
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a374  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800a60c  0800a60c  0001a60c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a64c  0800a64c  0001a64c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a654  0800a654  0001a654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a658  0800a658  0001a658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  0800a65c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000584  20000010  0800a66c  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000594  0800a66c  00020594  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001fbe1  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002fec  00000000  00000000  0003fc1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000012a0  00000000  00000000  00042c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000011c8  00000000  00000000  00043eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000035f1  00000000  00000000  00045078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017224  00000000  00000000  00048669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016549b  00000000  00000000  0005f88d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001c4d28  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004fd4  00000000  00000000  001c4d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a5f4 	.word	0x0800a5f4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	0800a5f4 	.word	0x0800a5f4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <package_uart>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t package_uart(uint8_t *pData[4])
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
     int result = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]
//    static unsigned char state = 0;
//    static int checksum = 0;
		char mode = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	72fb      	strb	r3, [r7, #11]
		switch (mode)
 80005e0:	7afb      	ldrb	r3, [r7, #11]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d101      	bne.n	80005ea <package_uart+0x1a>
		{
			case 1:
			{
				result = 0xFA;
 80005e6:	23fa      	movs	r3, #250	; 0xfa
 80005e8:	60fb      	str	r3, [r7, #12]
			}
			default:
			{
				result = 0xAC;
 80005ea:	23ac      	movs	r3, #172	; 0xac
 80005ec:	60fb      	str	r3, [r7, #12]
			}
		}
		return result;
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	b2db      	uxtb	r3, r3
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
	...

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f001 fb3a 	bl	8001c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f852 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  SysTick->LOAD = 480000 - 1;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f000 fd0e 	bl	800102c <MX_GPIO_Init>
  MX_DMA_Init();
 8000610:	f000 fcc4 	bl	8000f9c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000614:	f000 fc76 	bl	8000f04 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000618:	f000 f9ca 	bl	80009b0 <MX_TIM2_Init>
  MX_UART4_Init();
 800061c:	f000 fc22 	bl	8000e64 <MX_UART4_Init>
  MX_TIM4_Init();
 8000620:	f000 fab6 	bl	8000b90 <MX_TIM4_Init>
  MX_SPI3_Init();
 8000624:	f000 f8c0 	bl	80007a8 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000628:	f000 f914 	bl	8000854 <MX_TIM1_Init>
  MX_TIM3_Init();
 800062c:	f000 fa38 	bl	8000aa0 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000630:	f000 fb26 	bl	8000c80 <MX_TIM5_Init>
  MX_TIM15_Init();
 8000634:	f000 fb72 	bl	8000d1c <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start_IT(&htim2);
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	2101      	movs	r1, #1
 800063c:	4817      	ldr	r0, [pc, #92]	; (800069c <main+0x9c>)
 800063e:	f004 f89f 	bl	8004780 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2102      	movs	r1, #2
 8000646:	4816      	ldr	r0, [pc, #88]	; (80006a0 <main+0xa0>)
 8000648:	f004 f89a 	bl	8004780 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000652:	4812      	ldr	r0, [pc, #72]	; (800069c <main+0x9c>)
 8000654:	f004 f894 	bl	8004780 <HAL_GPIO_WritePin>
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <main+0xa4>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <main+0xa4>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f042 0220 	orr.w	r2, r2, #32
 8000666:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_TC);
 8000668:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <main+0xa4>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <main+0xa4>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000676:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart3, UART3_rxBuffer, 4);
 8000678:	2204      	movs	r2, #4
 800067a:	490b      	ldr	r1, [pc, #44]	; (80006a8 <main+0xa8>)
 800067c:	4809      	ldr	r0, [pc, #36]	; (80006a4 <main+0xa4>)
 800067e:	f007 ff09 	bl	8008494 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      if (TXBUFFER[0] != 0) {
 8000682:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <main+0xac>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0fb      	beq.n	8000682 <main+0x82>
    	  HAL_UART_Transmit_IT(&huart3, TXBUFFER, 1);
 800068a:	2201      	movs	r2, #1
 800068c:	4907      	ldr	r1, [pc, #28]	; (80006ac <main+0xac>)
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <main+0xa4>)
 8000690:	f007 fe7c 	bl	800838c <HAL_UART_Transmit_IT>

    	  TXBUFFER[0] = 0;
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <main+0xac>)
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]
      if (TXBUFFER[0] != 0) {
 800069a:	e7f2      	b.n	8000682 <main+0x82>
 800069c:	58020400 	.word	0x58020400
 80006a0:	58021000 	.word	0x58021000
 80006a4:	20000168 	.word	0x20000168
 80006a8:	20000244 	.word	0x20000244
 80006ac:	20000438 	.word	0x20000438

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b09c      	sub	sp, #112	; 0x70
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ba:	224c      	movs	r2, #76	; 0x4c
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f009 ff90 	bl	800a5e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2220      	movs	r2, #32
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f009 ff8a 	bl	800a5e4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006d0:	2002      	movs	r0, #2
 80006d2:	f004 f889 	bl	80047e8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006d6:	2300      	movs	r3, #0
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	4b31      	ldr	r3, [pc, #196]	; (80007a0 <SystemClock_Config+0xf0>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	4a30      	ldr	r2, [pc, #192]	; (80007a0 <SystemClock_Config+0xf0>)
 80006e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e4:	6193      	str	r3, [r2, #24]
 80006e6:	4b2e      	ldr	r3, [pc, #184]	; (80007a0 <SystemClock_Config+0xf0>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	4b2c      	ldr	r3, [pc, #176]	; (80007a4 <SystemClock_Config+0xf4>)
 80006f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006f4:	4a2b      	ldr	r2, [pc, #172]	; (80007a4 <SystemClock_Config+0xf4>)
 80006f6:	f043 0301 	orr.w	r3, r3, #1
 80006fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006fc:	4b29      	ldr	r3, [pc, #164]	; (80007a4 <SystemClock_Config+0xf4>)
 80006fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000700:	f003 0301 	and.w	r3, r3, #1
 8000704:	603b      	str	r3, [r7, #0]
 8000706:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000708:	bf00      	nop
 800070a:	4b25      	ldr	r3, [pc, #148]	; (80007a0 <SystemClock_Config+0xf0>)
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000716:	d1f8      	bne.n	800070a <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000718:	2302      	movs	r3, #2
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800071c:	2301      	movs	r3, #1
 800071e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	2340      	movs	r3, #64	; 0x40
 8000722:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000724:	2302      	movs	r3, #2
 8000726:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000728:	2300      	movs	r3, #0
 800072a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800072c:	2304      	movs	r3, #4
 800072e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000730:	233c      	movs	r3, #60	; 0x3c
 8000732:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000734:	2302      	movs	r3, #2
 8000736:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000738:	2306      	movs	r3, #6
 800073a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800073c:	2302      	movs	r3, #2
 800073e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000740:	230c      	movs	r3, #12
 8000742:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000744:	2300      	movs	r3, #0
 8000746:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000750:	4618      	mov	r0, r3
 8000752:	f004 f883 	bl	800485c <HAL_RCC_OscConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800075c:	f000 fd9d 	bl	800129a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000760:	233f      	movs	r3, #63	; 0x3f
 8000762:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000764:	2303      	movs	r3, #3
 8000766:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800076c:	2308      	movs	r3, #8
 800076e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000770:	2340      	movs	r3, #64	; 0x40
 8000772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000774:	2340      	movs	r3, #64	; 0x40
 8000776:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000778:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800077c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800077e:	2340      	movs	r3, #64	; 0x40
 8000780:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2104      	movs	r1, #4
 8000786:	4618      	mov	r0, r3
 8000788:	f004 fc78 	bl	800507c <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000792:	f000 fd82 	bl	800129a <Error_Handler>
  }
}
 8000796:	bf00      	nop
 8000798:	3770      	adds	r7, #112	; 0x70
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	58024800 	.word	0x58024800
 80007a4:	58000400 	.word	0x58000400

080007a8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007ac:	4b27      	ldr	r3, [pc, #156]	; (800084c <MX_SPI3_Init+0xa4>)
 80007ae:	4a28      	ldr	r2, [pc, #160]	; (8000850 <MX_SPI3_Init+0xa8>)
 80007b0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007b2:	4b26      	ldr	r3, [pc, #152]	; (800084c <MX_SPI3_Init+0xa4>)
 80007b4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80007b8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007ba:	4b24      	ldr	r3, [pc, #144]	; (800084c <MX_SPI3_Init+0xa4>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80007c0:	4b22      	ldr	r3, [pc, #136]	; (800084c <MX_SPI3_Init+0xa4>)
 80007c2:	2203      	movs	r2, #3
 80007c4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007c6:	4b21      	ldr	r3, [pc, #132]	; (800084c <MX_SPI3_Init+0xa4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007cc:	4b1f      	ldr	r3, [pc, #124]	; (800084c <MX_SPI3_Init+0xa4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007d2:	4b1e      	ldr	r3, [pc, #120]	; (800084c <MX_SPI3_Init+0xa4>)
 80007d4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80007d8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007da:	4b1c      	ldr	r3, [pc, #112]	; (800084c <MX_SPI3_Init+0xa4>)
 80007dc:	2200      	movs	r2, #0
 80007de:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e0:	4b1a      	ldr	r3, [pc, #104]	; (800084c <MX_SPI3_Init+0xa4>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007e6:	4b19      	ldr	r3, [pc, #100]	; (800084c <MX_SPI3_Init+0xa4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ec:	4b17      	ldr	r3, [pc, #92]	; (800084c <MX_SPI3_Init+0xa4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80007f2:	4b16      	ldr	r3, [pc, #88]	; (800084c <MX_SPI3_Init+0xa4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_SPI3_Init+0xa4>)
 80007fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007fe:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_SPI3_Init+0xa4>)
 8000802:	2200      	movs	r2, #0
 8000804:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_SPI3_Init+0xa4>)
 8000808:	2200      	movs	r2, #0
 800080a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_SPI3_Init+0xa4>)
 800080e:	2200      	movs	r2, #0
 8000810:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_SPI3_Init+0xa4>)
 8000814:	2200      	movs	r2, #0
 8000816:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_SPI3_Init+0xa4>)
 800081a:	2200      	movs	r2, #0
 800081c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <MX_SPI3_Init+0xa4>)
 8000820:	2200      	movs	r2, #0
 8000822:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_SPI3_Init+0xa4>)
 8000826:	2200      	movs	r2, #0
 8000828:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <MX_SPI3_Init+0xa4>)
 800082c:	2200      	movs	r2, #0
 800082e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_SPI3_Init+0xa4>)
 8000832:	2200      	movs	r2, #0
 8000834:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_SPI3_Init+0xa4>)
 8000838:	f006 fb0e 	bl	8006e58 <HAL_SPI_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8000842:	f000 fd2a 	bl	800129a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000360 	.word	0x20000360
 8000850:	40003c00 	.word	0x40003c00

08000854 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b09a      	sub	sp, #104	; 0x68
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000868:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000874:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
 8000884:	615a      	str	r2, [r3, #20]
 8000886:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	222c      	movs	r2, #44	; 0x2c
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f009 fea8 	bl	800a5e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000894:	4b44      	ldr	r3, [pc, #272]	; (80009a8 <MX_TIM1_Init+0x154>)
 8000896:	4a45      	ldr	r2, [pc, #276]	; (80009ac <MX_TIM1_Init+0x158>)
 8000898:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 800089a:	4b43      	ldr	r3, [pc, #268]	; (80009a8 <MX_TIM1_Init+0x154>)
 800089c:	22ef      	movs	r2, #239	; 0xef
 800089e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a0:	4b41      	ldr	r3, [pc, #260]	; (80009a8 <MX_TIM1_Init+0x154>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 625-1;
 80008a6:	4b40      	ldr	r3, [pc, #256]	; (80009a8 <MX_TIM1_Init+0x154>)
 80008a8:	f44f 721c 	mov.w	r2, #624	; 0x270
 80008ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ae:	4b3e      	ldr	r3, [pc, #248]	; (80009a8 <MX_TIM1_Init+0x154>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008b4:	4b3c      	ldr	r3, [pc, #240]	; (80009a8 <MX_TIM1_Init+0x154>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ba:	4b3b      	ldr	r3, [pc, #236]	; (80009a8 <MX_TIM1_Init+0x154>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008c0:	4839      	ldr	r0, [pc, #228]	; (80009a8 <MX_TIM1_Init+0x154>)
 80008c2:	f006 fbe6 	bl	8007092 <HAL_TIM_Base_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80008cc:	f000 fce5 	bl	800129a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008da:	4619      	mov	r1, r3
 80008dc:	4832      	ldr	r0, [pc, #200]	; (80009a8 <MX_TIM1_Init+0x154>)
 80008de:	f006 febf 	bl	8007660 <HAL_TIM_ConfigClockSource>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80008e8:	f000 fcd7 	bl	800129a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008ec:	482e      	ldr	r0, [pc, #184]	; (80009a8 <MX_TIM1_Init+0x154>)
 80008ee:	f006 fc27 	bl	8007140 <HAL_TIM_PWM_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80008f8:	f000 fccf 	bl	800129a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008fc:	2300      	movs	r3, #0
 80008fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000900:	2300      	movs	r3, #0
 8000902:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000908:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800090c:	4619      	mov	r1, r3
 800090e:	4826      	ldr	r0, [pc, #152]	; (80009a8 <MX_TIM1_Init+0x154>)
 8000910:	f007 fbc8 	bl	80080a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800091a:	f000 fcbe 	bl	800129a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800091e:	2360      	movs	r3, #96	; 0x60
 8000920:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8000922:	f240 1339 	movw	r3, #313	; 0x139
 8000926:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000928:	2300      	movs	r3, #0
 800092a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800092c:	2300      	movs	r3, #0
 800092e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000934:	2300      	movs	r3, #0
 8000936:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000938:	2300      	movs	r3, #0
 800093a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800093c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000940:	2204      	movs	r2, #4
 8000942:	4619      	mov	r1, r3
 8000944:	4818      	ldr	r0, [pc, #96]	; (80009a8 <MX_TIM1_Init+0x154>)
 8000946:	f006 fd7b 	bl	8007440 <HAL_TIM_PWM_ConfigChannel>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000950:	f000 fca3 	bl	800129a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000968:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800096c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000972:	2300      	movs	r3, #0
 8000974:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000976:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000980:	2300      	movs	r3, #0
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	4619      	mov	r1, r3
 8000988:	4807      	ldr	r0, [pc, #28]	; (80009a8 <MX_TIM1_Init+0x154>)
 800098a:	f007 fc13 	bl	80081b4 <HAL_TIMEx_ConfigBreakDeadTime>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000994:	f000 fc81 	bl	800129a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000998:	4803      	ldr	r0, [pc, #12]	; (80009a8 <MX_TIM1_Init+0x154>)
 800099a:	f000 fd9d 	bl	80014d8 <HAL_TIM_MspPostInit>

}
 800099e:	bf00      	nop
 80009a0:	3768      	adds	r7, #104	; 0x68
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200003ec 	.word	0x200003ec
 80009ac:	40010000 	.word	0x40010000

080009b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08e      	sub	sp, #56	; 0x38
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009d0:	463b      	mov	r3, r7
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]
 80009de:	615a      	str	r2, [r3, #20]
 80009e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009e2:	4b2e      	ldr	r3, [pc, #184]	; (8000a9c <MX_TIM2_Init+0xec>)
 80009e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 80009ea:	4b2c      	ldr	r3, [pc, #176]	; (8000a9c <MX_TIM2_Init+0xec>)
 80009ec:	22ef      	movs	r2, #239	; 0xef
 80009ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f0:	4b2a      	ldr	r3, [pc, #168]	; (8000a9c <MX_TIM2_Init+0xec>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625-1;
 80009f6:	4b29      	ldr	r3, [pc, #164]	; (8000a9c <MX_TIM2_Init+0xec>)
 80009f8:	f44f 721c 	mov.w	r2, #624	; 0x270
 80009fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fe:	4b27      	ldr	r3, [pc, #156]	; (8000a9c <MX_TIM2_Init+0xec>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a04:	4b25      	ldr	r3, [pc, #148]	; (8000a9c <MX_TIM2_Init+0xec>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a0a:	4824      	ldr	r0, [pc, #144]	; (8000a9c <MX_TIM2_Init+0xec>)
 8000a0c:	f006 fb41 	bl	8007092 <HAL_TIM_Base_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000a16:	f000 fc40 	bl	800129a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a24:	4619      	mov	r1, r3
 8000a26:	481d      	ldr	r0, [pc, #116]	; (8000a9c <MX_TIM2_Init+0xec>)
 8000a28:	f006 fe1a 	bl	8007660 <HAL_TIM_ConfigClockSource>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000a32:	f000 fc32 	bl	800129a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a36:	4819      	ldr	r0, [pc, #100]	; (8000a9c <MX_TIM2_Init+0xec>)
 8000a38:	f006 fb82 	bl	8007140 <HAL_TIM_PWM_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000a42:	f000 fc2a 	bl	800129a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	4811      	ldr	r0, [pc, #68]	; (8000a9c <MX_TIM2_Init+0xec>)
 8000a56:	f007 fb25 	bl	80080a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000a60:	f000 fc1b 	bl	800129a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a64:	2360      	movs	r3, #96	; 0x60
 8000a66:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000a68:	f240 1339 	movw	r3, #313	; 0x139
 8000a6c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a76:	463b      	mov	r3, r7
 8000a78:	2208      	movs	r2, #8
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4807      	ldr	r0, [pc, #28]	; (8000a9c <MX_TIM2_Init+0xec>)
 8000a7e:	f006 fcdf 	bl	8007440 <HAL_TIM_PWM_ConfigChannel>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000a88:	f000 fc07 	bl	800129a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a8c:	4803      	ldr	r0, [pc, #12]	; (8000a9c <MX_TIM2_Init+0xec>)
 8000a8e:	f000 fd23 	bl	80014d8 <HAL_TIM_MspPostInit>

}
 8000a92:	bf00      	nop
 8000a94:	3738      	adds	r7, #56	; 0x38
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200004cc 	.word	0x200004cc

08000aa0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08e      	sub	sp, #56	; 0x38
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aa6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]
 8000ace:	615a      	str	r2, [r3, #20]
 8000ad0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ad2:	4b2d      	ldr	r3, [pc, #180]	; (8000b88 <MX_TIM3_Init+0xe8>)
 8000ad4:	4a2d      	ldr	r2, [pc, #180]	; (8000b8c <MX_TIM3_Init+0xec>)
 8000ad6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 8000ad8:	4b2b      	ldr	r3, [pc, #172]	; (8000b88 <MX_TIM3_Init+0xe8>)
 8000ada:	22ef      	movs	r2, #239	; 0xef
 8000adc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ade:	4b2a      	ldr	r3, [pc, #168]	; (8000b88 <MX_TIM3_Init+0xe8>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 625-1;
 8000ae4:	4b28      	ldr	r3, [pc, #160]	; (8000b88 <MX_TIM3_Init+0xe8>)
 8000ae6:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000aea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aec:	4b26      	ldr	r3, [pc, #152]	; (8000b88 <MX_TIM3_Init+0xe8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af2:	4b25      	ldr	r3, [pc, #148]	; (8000b88 <MX_TIM3_Init+0xe8>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000af8:	4823      	ldr	r0, [pc, #140]	; (8000b88 <MX_TIM3_Init+0xe8>)
 8000afa:	f006 faca 	bl	8007092 <HAL_TIM_Base_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000b04:	f000 fbc9 	bl	800129a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b12:	4619      	mov	r1, r3
 8000b14:	481c      	ldr	r0, [pc, #112]	; (8000b88 <MX_TIM3_Init+0xe8>)
 8000b16:	f006 fda3 	bl	8007660 <HAL_TIM_ConfigClockSource>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000b20:	f000 fbbb 	bl	800129a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b24:	4818      	ldr	r0, [pc, #96]	; (8000b88 <MX_TIM3_Init+0xe8>)
 8000b26:	f006 fb0b 	bl	8007140 <HAL_TIM_PWM_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000b30:	f000 fbb3 	bl	800129a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b3c:	f107 031c 	add.w	r3, r7, #28
 8000b40:	4619      	mov	r1, r3
 8000b42:	4811      	ldr	r0, [pc, #68]	; (8000b88 <MX_TIM3_Init+0xe8>)
 8000b44:	f007 faae 	bl	80080a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000b4e:	f000 fba4 	bl	800129a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b52:	2360      	movs	r3, #96	; 0x60
 8000b54:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000b56:	f240 1339 	movw	r3, #313	; 0x139
 8000b5a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b64:	463b      	mov	r3, r7
 8000b66:	2200      	movs	r2, #0
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4807      	ldr	r0, [pc, #28]	; (8000b88 <MX_TIM3_Init+0xe8>)
 8000b6c:	f006 fc68 	bl	8007440 <HAL_TIM_PWM_ConfigChannel>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000b76:	f000 fb90 	bl	800129a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b7a:	4803      	ldr	r0, [pc, #12]	; (8000b88 <MX_TIM3_Init+0xe8>)
 8000b7c:	f000 fcac 	bl	80014d8 <HAL_TIM_MspPostInit>

}
 8000b80:	bf00      	nop
 8000b82:	3738      	adds	r7, #56	; 0x38
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000314 	.word	0x20000314
 8000b8c:	40000400 	.word	0x40000400

08000b90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08e      	sub	sp, #56	; 0x38
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba4:	f107 031c 	add.w	r3, r7, #28
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]
 8000bbe:	615a      	str	r2, [r3, #20]
 8000bc0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bc2:	4b2d      	ldr	r3, [pc, #180]	; (8000c78 <MX_TIM4_Init+0xe8>)
 8000bc4:	4a2d      	ldr	r2, [pc, #180]	; (8000c7c <MX_TIM4_Init+0xec>)
 8000bc6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8000bc8:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <MX_TIM4_Init+0xe8>)
 8000bca:	22ef      	movs	r2, #239	; 0xef
 8000bcc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bce:	4b2a      	ldr	r3, [pc, #168]	; (8000c78 <MX_TIM4_Init+0xe8>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 625-1;
 8000bd4:	4b28      	ldr	r3, [pc, #160]	; (8000c78 <MX_TIM4_Init+0xe8>)
 8000bd6:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000bda:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bdc:	4b26      	ldr	r3, [pc, #152]	; (8000c78 <MX_TIM4_Init+0xe8>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000be2:	4b25      	ldr	r3, [pc, #148]	; (8000c78 <MX_TIM4_Init+0xe8>)
 8000be4:	2280      	movs	r2, #128	; 0x80
 8000be6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000be8:	4823      	ldr	r0, [pc, #140]	; (8000c78 <MX_TIM4_Init+0xe8>)
 8000bea:	f006 fa52 	bl	8007092 <HAL_TIM_Base_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000bf4:	f000 fb51 	bl	800129a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000bfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c02:	4619      	mov	r1, r3
 8000c04:	481c      	ldr	r0, [pc, #112]	; (8000c78 <MX_TIM4_Init+0xe8>)
 8000c06:	f006 fd2b 	bl	8007660 <HAL_TIM_ConfigClockSource>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000c10:	f000 fb43 	bl	800129a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000c14:	4818      	ldr	r0, [pc, #96]	; (8000c78 <MX_TIM4_Init+0xe8>)
 8000c16:	f006 fa93 	bl	8007140 <HAL_TIM_PWM_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000c20:	f000 fb3b 	bl	800129a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c2c:	f107 031c 	add.w	r3, r7, #28
 8000c30:	4619      	mov	r1, r3
 8000c32:	4811      	ldr	r0, [pc, #68]	; (8000c78 <MX_TIM4_Init+0xe8>)
 8000c34:	f007 fa36 	bl	80080a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000c3e:	f000 fb2c 	bl	800129a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c42:	2360      	movs	r3, #96	; 0x60
 8000c44:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000c46:	f240 1339 	movw	r3, #313	; 0x139
 8000c4a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c54:	463b      	mov	r3, r7
 8000c56:	2208      	movs	r2, #8
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4807      	ldr	r0, [pc, #28]	; (8000c78 <MX_TIM4_Init+0xe8>)
 8000c5c:	f006 fbf0 	bl	8007440 <HAL_TIM_PWM_ConfigChannel>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000c66:	f000 fb18 	bl	800129a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000c6a:	4803      	ldr	r0, [pc, #12]	; (8000c78 <MX_TIM4_Init+0xe8>)
 8000c6c:	f000 fc34 	bl	80014d8 <HAL_TIM_MspPostInit>

}
 8000c70:	bf00      	nop
 8000c72:	3738      	adds	r7, #56	; 0x38
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	200000a4 	.word	0x200000a4
 8000c7c:	40000800 	.word	0x40000800

08000c80 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c86:	f107 0310 	add.w	r3, r7, #16
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000c9e:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <MX_TIM5_Init+0x94>)
 8000ca0:	4a1d      	ldr	r2, [pc, #116]	; (8000d18 <MX_TIM5_Init+0x98>)
 8000ca2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 240-1;
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <MX_TIM5_Init+0x94>)
 8000ca6:	22ef      	movs	r2, #239	; 0xef
 8000ca8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000caa:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <MX_TIM5_Init+0x94>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8000cb0:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <MX_TIM5_Init+0x94>)
 8000cb2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cb6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb8:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <MX_TIM5_Init+0x94>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <MX_TIM5_Init+0x94>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000cc4:	4813      	ldr	r0, [pc, #76]	; (8000d14 <MX_TIM5_Init+0x94>)
 8000cc6:	f006 f9e4 	bl	8007092 <HAL_TIM_Base_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000cd0:	f000 fae3 	bl	800129a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000cda:	f107 0310 	add.w	r3, r7, #16
 8000cde:	4619      	mov	r1, r3
 8000ce0:	480c      	ldr	r0, [pc, #48]	; (8000d14 <MX_TIM5_Init+0x94>)
 8000ce2:	f006 fcbd 	bl	8007660 <HAL_TIM_ConfigClockSource>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000cec:	f000 fad5 	bl	800129a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_TIM5_Init+0x94>)
 8000cfe:	f007 f9d1 	bl	80080a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000d08:	f000 fac7 	bl	800129a <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000d0c:	bf00      	nop
 8000d0e:	3720      	adds	r7, #32
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	200002c8 	.word	0x200002c8
 8000d18:	40000c00 	.word	0x40000c00

08000d1c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b09a      	sub	sp, #104	; 0x68
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d30:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
 8000d4c:	615a      	str	r2, [r3, #20]
 8000d4e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	222c      	movs	r2, #44	; 0x2c
 8000d54:	2100      	movs	r1, #0
 8000d56:	4618      	mov	r0, r3
 8000d58:	f009 fc44 	bl	800a5e4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000d5c:	4b3f      	ldr	r3, [pc, #252]	; (8000e5c <MX_TIM15_Init+0x140>)
 8000d5e:	4a40      	ldr	r2, [pc, #256]	; (8000e60 <MX_TIM15_Init+0x144>)
 8000d60:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8000d62:	4b3e      	ldr	r3, [pc, #248]	; (8000e5c <MX_TIM15_Init+0x140>)
 8000d64:	22ef      	movs	r2, #239	; 0xef
 8000d66:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d68:	4b3c      	ldr	r3, [pc, #240]	; (8000e5c <MX_TIM15_Init+0x140>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 625-1;
 8000d6e:	4b3b      	ldr	r3, [pc, #236]	; (8000e5c <MX_TIM15_Init+0x140>)
 8000d70:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000d74:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d76:	4b39      	ldr	r3, [pc, #228]	; (8000e5c <MX_TIM15_Init+0x140>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000d7c:	4b37      	ldr	r3, [pc, #220]	; (8000e5c <MX_TIM15_Init+0x140>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d82:	4b36      	ldr	r3, [pc, #216]	; (8000e5c <MX_TIM15_Init+0x140>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000d88:	4834      	ldr	r0, [pc, #208]	; (8000e5c <MX_TIM15_Init+0x140>)
 8000d8a:	f006 f982 	bl	8007092 <HAL_TIM_Base_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8000d94:	f000 fa81 	bl	800129a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d9c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000d9e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000da2:	4619      	mov	r1, r3
 8000da4:	482d      	ldr	r0, [pc, #180]	; (8000e5c <MX_TIM15_Init+0x140>)
 8000da6:	f006 fc5b 	bl	8007660 <HAL_TIM_ConfigClockSource>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8000db0:	f000 fa73 	bl	800129a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000db4:	4829      	ldr	r0, [pc, #164]	; (8000e5c <MX_TIM15_Init+0x140>)
 8000db6:	f006 f9c3 	bl	8007140 <HAL_TIM_PWM_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8000dc0:	f000 fa6b 	bl	800129a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000dcc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4822      	ldr	r0, [pc, #136]	; (8000e5c <MX_TIM15_Init+0x140>)
 8000dd4:	f007 f966 	bl	80080a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8000dde:	f000 fa5c 	bl	800129a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000de2:	2360      	movs	r3, #96	; 0x60
 8000de4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8000de6:	f240 1339 	movw	r3, #313	; 0x139
 8000dea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dec:	2300      	movs	r3, #0
 8000dee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000df0:	2300      	movs	r3, #0
 8000df2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000df4:	2300      	movs	r3, #0
 8000df6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e04:	2204      	movs	r2, #4
 8000e06:	4619      	mov	r1, r3
 8000e08:	4814      	ldr	r0, [pc, #80]	; (8000e5c <MX_TIM15_Init+0x140>)
 8000e0a:	f006 fb19 	bl	8007440 <HAL_TIM_PWM_ConfigChannel>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8000e14:	f000 fa41 	bl	800129a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e20:	2300      	movs	r3, #0
 8000e22:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e30:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4807      	ldr	r0, [pc, #28]	; (8000e5c <MX_TIM15_Init+0x140>)
 8000e40:	f007 f9b8 	bl	80081b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8000e4a:	f000 fa26 	bl	800129a <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000e4e:	4803      	ldr	r0, [pc, #12]	; (8000e5c <MX_TIM15_Init+0x140>)
 8000e50:	f000 fb42 	bl	80014d8 <HAL_TIM_MspPostInit>

}
 8000e54:	bf00      	nop
 8000e56:	3768      	adds	r7, #104	; 0x68
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	200001f8 	.word	0x200001f8
 8000e60:	40014000 	.word	0x40014000

08000e64 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000e68:	4b24      	ldr	r3, [pc, #144]	; (8000efc <MX_UART4_Init+0x98>)
 8000e6a:	4a25      	ldr	r2, [pc, #148]	; (8000f00 <MX_UART4_Init+0x9c>)
 8000e6c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000e6e:	4b23      	ldr	r3, [pc, #140]	; (8000efc <MX_UART4_Init+0x98>)
 8000e70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e74:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000e76:	4b21      	ldr	r3, [pc, #132]	; (8000efc <MX_UART4_Init+0x98>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <MX_UART4_Init+0x98>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000e82:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <MX_UART4_Init+0x98>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000e88:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <MX_UART4_Init+0x98>)
 8000e8a:	220c      	movs	r2, #12
 8000e8c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e8e:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <MX_UART4_Init+0x98>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e94:	4b19      	ldr	r3, [pc, #100]	; (8000efc <MX_UART4_Init+0x98>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e9a:	4b18      	ldr	r3, [pc, #96]	; (8000efc <MX_UART4_Init+0x98>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ea0:	4b16      	ldr	r3, [pc, #88]	; (8000efc <MX_UART4_Init+0x98>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <MX_UART4_Init+0x98>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart4, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000eac:	2300      	movs	r3, #0
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4812      	ldr	r0, [pc, #72]	; (8000efc <MX_UART4_Init+0x98>)
 8000eb4:	f009 f9e6 	bl	800a284 <HAL_RS485Ex_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 8000ebe:	f000 f9ec 	bl	800129a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	480d      	ldr	r0, [pc, #52]	; (8000efc <MX_UART4_Init+0x98>)
 8000ec6:	f009 fa9e 	bl	800a406 <HAL_UARTEx_SetTxFifoThreshold>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_UART4_Init+0x70>
  {
    Error_Handler();
 8000ed0:	f000 f9e3 	bl	800129a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4809      	ldr	r0, [pc, #36]	; (8000efc <MX_UART4_Init+0x98>)
 8000ed8:	f009 fad3 	bl	800a482 <HAL_UARTEx_SetRxFifoThreshold>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_UART4_Init+0x82>
  {
    Error_Handler();
 8000ee2:	f000 f9da 	bl	800129a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000ee6:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_UART4_Init+0x98>)
 8000ee8:	f009 fa54 	bl	800a394 <HAL_UARTEx_DisableFifoMode>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_UART4_Init+0x92>
  {
    Error_Handler();
 8000ef2:	f000 f9d2 	bl	800129a <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	2000043c 	.word	0x2000043c
 8000f00:	40004c00 	.word	0x40004c00

08000f04 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f08:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f0a:	4a23      	ldr	r2, [pc, #140]	; (8000f98 <MX_USART3_UART_Init+0x94>)
 8000f0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f0e:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f16:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f1c:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f22:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f28:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f2a:	220c      	movs	r2, #12
 8000f2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f2e:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f34:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f3a:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f40:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f46:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f4c:	4811      	ldr	r0, [pc, #68]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f4e:	f007 f9cd 	bl	80082ec <HAL_UART_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f58:	f000 f99f 	bl	800129a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	480d      	ldr	r0, [pc, #52]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f60:	f009 fa51 	bl	800a406 <HAL_UARTEx_SetTxFifoThreshold>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f6a:	f000 f996 	bl	800129a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4808      	ldr	r0, [pc, #32]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f72:	f009 fa86 	bl	800a482 <HAL_UARTEx_SetRxFifoThreshold>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f7c:	f000 f98d 	bl	800129a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f80:	4804      	ldr	r0, [pc, #16]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f82:	f009 fa07 	bl	800a394 <HAL_UARTEx_DisableFifoMode>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f8c:	f000 f985 	bl	800129a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000168 	.word	0x20000168
 8000f98:	40004800 	.word	0x40004800

08000f9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fa2:	4b21      	ldr	r3, [pc, #132]	; (8001028 <MX_DMA_Init+0x8c>)
 8000fa4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fa8:	4a1f      	ldr	r2, [pc, #124]	; (8001028 <MX_DMA_Init+0x8c>)
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fb2:	4b1d      	ldr	r3, [pc, #116]	; (8001028 <MX_DMA_Init+0x8c>)
 8000fb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fc0:	4b19      	ldr	r3, [pc, #100]	; (8001028 <MX_DMA_Init+0x8c>)
 8000fc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fc6:	4a18      	ldr	r2, [pc, #96]	; (8001028 <MX_DMA_Init+0x8c>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fd0:	4b15      	ldr	r3, [pc, #84]	; (8001028 <MX_DMA_Init+0x8c>)
 8000fd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	200b      	movs	r0, #11
 8000fe4:	f000 ffc3 	bl	8001f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000fe8:	200b      	movs	r0, #11
 8000fea:	f000 ffda 	bl	8001fa2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	200c      	movs	r0, #12
 8000ff4:	f000 ffbb 	bl	8001f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ff8:	200c      	movs	r0, #12
 8000ffa:	f000 ffd2 	bl	8001fa2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2100      	movs	r1, #0
 8001002:	2038      	movs	r0, #56	; 0x38
 8001004:	f000 ffb3 	bl	8001f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001008:	2038      	movs	r0, #56	; 0x38
 800100a:	f000 ffca 	bl	8001fa2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2100      	movs	r1, #0
 8001012:	2039      	movs	r0, #57	; 0x39
 8001014:	f000 ffab 	bl	8001f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001018:	2039      	movs	r0, #57	; 0x39
 800101a:	f000 ffc2 	bl	8001fa2 <HAL_NVIC_EnableIRQ>

}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	58024400 	.word	0x58024400

0800102c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08c      	sub	sp, #48	; 0x30
 8001030:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001042:	4b71      	ldr	r3, [pc, #452]	; (8001208 <MX_GPIO_Init+0x1dc>)
 8001044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001048:	4a6f      	ldr	r2, [pc, #444]	; (8001208 <MX_GPIO_Init+0x1dc>)
 800104a:	f043 0310 	orr.w	r3, r3, #16
 800104e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001052:	4b6d      	ldr	r3, [pc, #436]	; (8001208 <MX_GPIO_Init+0x1dc>)
 8001054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001058:	f003 0310 	and.w	r3, r3, #16
 800105c:	61bb      	str	r3, [r7, #24]
 800105e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001060:	4b69      	ldr	r3, [pc, #420]	; (8001208 <MX_GPIO_Init+0x1dc>)
 8001062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001066:	4a68      	ldr	r2, [pc, #416]	; (8001208 <MX_GPIO_Init+0x1dc>)
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001070:	4b65      	ldr	r3, [pc, #404]	; (8001208 <MX_GPIO_Init+0x1dc>)
 8001072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800107e:	4b62      	ldr	r3, [pc, #392]	; (8001208 <MX_GPIO_Init+0x1dc>)
 8001080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001084:	4a60      	ldr	r2, [pc, #384]	; (8001208 <MX_GPIO_Init+0x1dc>)
 8001086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800108a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800108e:	4b5e      	ldr	r3, [pc, #376]	; (8001208 <MX_GPIO_Init+0x1dc>)
 8001090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800109c:	4b5a      	ldr	r3, [pc, #360]	; (8001208 <MX_GPIO_Init+0x1dc>)
 800109e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a2:	4a59      	ldr	r2, [pc, #356]	; (8001208 <MX_GPIO_Init+0x1dc>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ac:	4b56      	ldr	r3, [pc, #344]	; (8001208 <MX_GPIO_Init+0x1dc>)
 80010ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ba:	4b53      	ldr	r3, [pc, #332]	; (8001208 <MX_GPIO_Init+0x1dc>)
 80010bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c0:	4a51      	ldr	r2, [pc, #324]	; (8001208 <MX_GPIO_Init+0x1dc>)
 80010c2:	f043 0302 	orr.w	r3, r3, #2
 80010c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ca:	4b4f      	ldr	r3, [pc, #316]	; (8001208 <MX_GPIO_Init+0x1dc>)
 80010cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d8:	4b4b      	ldr	r3, [pc, #300]	; (8001208 <MX_GPIO_Init+0x1dc>)
 80010da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010de:	4a4a      	ldr	r2, [pc, #296]	; (8001208 <MX_GPIO_Init+0x1dc>)
 80010e0:	f043 0308 	orr.w	r3, r3, #8
 80010e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e8:	4b47      	ldr	r3, [pc, #284]	; (8001208 <MX_GPIO_Init+0x1dc>)
 80010ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010f6:	4b44      	ldr	r3, [pc, #272]	; (8001208 <MX_GPIO_Init+0x1dc>)
 80010f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fc:	4a42      	ldr	r2, [pc, #264]	; (8001208 <MX_GPIO_Init+0x1dc>)
 80010fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001102:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001106:	4b40      	ldr	r3, [pc, #256]	; (8001208 <MX_GPIO_Init+0x1dc>)
 8001108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001110:	603b      	str	r3, [r7, #0]
 8001112:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8001114:	2200      	movs	r2, #0
 8001116:	f644 2121 	movw	r1, #18977	; 0x4a21
 800111a:	483c      	ldr	r0, [pc, #240]	; (800120c <MX_GPIO_Init+0x1e0>)
 800111c:	f003 fb30 	bl	8004780 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	f24c 0102 	movw	r1, #49154	; 0xc002
 8001126:	483a      	ldr	r0, [pc, #232]	; (8001210 <MX_GPIO_Init+0x1e4>)
 8001128:	f003 fb2a 	bl	8004780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001132:	4838      	ldr	r0, [pc, #224]	; (8001214 <MX_GPIO_Init+0x1e8>)
 8001134:	f003 fb24 	bl	8004780 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin DIR_2_Pin LD3_Pin DIR_3_Pin
                           DIR_4_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8001138:	f644 2321 	movw	r3, #18977	; 0x4a21
 800113c:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113e:	2301      	movs	r3, #1
 8001140:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	2300      	movs	r3, #0
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114a:	f107 031c 	add.w	r3, r7, #28
 800114e:	4619      	mov	r1, r3
 8001150:	482e      	ldr	r0, [pc, #184]	; (800120c <MX_GPIO_Init+0x1e0>)
 8001152:	f003 f965 	bl	8004420 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM2_Pin LM1_Pin LM6_Pin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin|LM6_Pin;
 8001156:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 800115a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800115c:	4b2e      	ldr	r3, [pc, #184]	; (8001218 <MX_GPIO_Init+0x1ec>)
 800115e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001164:	f107 031c 	add.w	r3, r7, #28
 8001168:	4619      	mov	r1, r3
 800116a:	4829      	ldr	r0, [pc, #164]	; (8001210 <MX_GPIO_Init+0x1e4>)
 800116c:	f003 f958 	bl	8004420 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_1_Pin DIR_5_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 8001170:	f24c 0302 	movw	r3, #49154	; 0xc002
 8001174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001176:	2301      	movs	r3, #1
 8001178:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	4619      	mov	r1, r3
 8001188:	4821      	ldr	r0, [pc, #132]	; (8001210 <MX_GPIO_Init+0x1e4>)
 800118a:	f003 f949 	bl	8004420 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800118e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001192:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001194:	2301      	movs	r3, #1
 8001196:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	4619      	mov	r1, r3
 80011a6:	481b      	ldr	r0, [pc, #108]	; (8001214 <MX_GPIO_Init+0x1e8>)
 80011a8:	f003 f93a 	bl	8004420 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM5_Pin */
  GPIO_InitStruct.Pin = LM5_Pin;
 80011ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011b2:	4b19      	ldr	r3, [pc, #100]	; (8001218 <MX_GPIO_Init+0x1ec>)
 80011b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 80011ba:	f107 031c 	add.w	r3, r7, #28
 80011be:	4619      	mov	r1, r3
 80011c0:	4816      	ldr	r0, [pc, #88]	; (800121c <MX_GPIO_Init+0x1f0>)
 80011c2:	f003 f92d 	bl	8004420 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM4_Pin LM3_Pin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 80011c6:	23c0      	movs	r3, #192	; 0xc0
 80011c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <MX_GPIO_Init+0x1ec>)
 80011cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d2:	f107 031c 	add.w	r3, r7, #28
 80011d6:	4619      	mov	r1, r3
 80011d8:	480c      	ldr	r0, [pc, #48]	; (800120c <MX_GPIO_Init+0x1e0>)
 80011da:	f003 f921 	bl	8004420 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2103      	movs	r1, #3
 80011e2:	2017      	movs	r0, #23
 80011e4:	f000 fec3 	bl	8001f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011e8:	2017      	movs	r0, #23
 80011ea:	f000 feda 	bl	8001fa2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2103      	movs	r1, #3
 80011f2:	2028      	movs	r0, #40	; 0x28
 80011f4:	f000 febb 	bl	8001f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011f8:	2028      	movs	r0, #40	; 0x28
 80011fa:	f000 fed2 	bl	8001fa2 <HAL_NVIC_EnableIRQ>

}
 80011fe:	bf00      	nop
 8001200:	3730      	adds	r7, #48	; 0x30
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	58024400 	.word	0x58024400
 800120c:	58020400 	.word	0x58020400
 8001210:	58021000 	.word	0x58021000
 8001214:	58020c00 	.word	0x58020c00
 8001218:	11110000 	.word	0x11110000
 800121c:	58021800 	.word	0x58021800

08001220 <HAL_UART_RxCpltCallback>:
 }
return len;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	if(huart == &huart3)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a09      	ldr	r2, [pc, #36]	; (8001250 <HAL_UART_RxCpltCallback+0x30>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d10b      	bne.n	8001248 <HAL_UART_RxCpltCallback+0x28>
	{
		TXBUFFER[0] = (uint8_t)package_uart(0);
 8001230:	2000      	movs	r0, #0
 8001232:	f7ff f9cd 	bl	80005d0 <package_uart>
 8001236:	4603      	mov	r3, r0
 8001238:	461a      	mov	r2, r3
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_UART_RxCpltCallback+0x34>)
 800123c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, UART3_rxBuffer, BUFFSIZE);
 800123e:	2204      	movs	r2, #4
 8001240:	4905      	ldr	r1, [pc, #20]	; (8001258 <HAL_UART_RxCpltCallback+0x38>)
 8001242:	4803      	ldr	r0, [pc, #12]	; (8001250 <HAL_UART_RxCpltCallback+0x30>)
 8001244:	f007 f926 	bl	8008494 <HAL_UART_Receive_IT>
//		uint8_t data = *UART3_rxBuffer;
//		uartbuff = package_uart(data);
//		HAL_UART_Transmit_IT(&huart3, UART3_rxBuffer, 4);
	}
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000168 	.word	0x20000168
 8001254:	20000438 	.word	0x20000438
 8001258:	20000244 	.word	0x20000244

0800125c <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]

}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	80fb      	strh	r3, [r7, #6]


}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001286:	b480      	push	{r7}
 8001288:	b083      	sub	sp, #12
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
  if (htim == &htim5)
  {

  }
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800129e:	b672      	cpsid	i
}
 80012a0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a2:	e7fe      	b.n	80012a2 <Error_Handler+0x8>

080012a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_MspInit+0x30>)
 80012ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012b0:	4a08      	ldr	r2, [pc, #32]	; (80012d4 <HAL_MspInit+0x30>)
 80012b2:	f043 0302 	orr.w	r3, r3, #2
 80012b6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_MspInit+0x30>)
 80012bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	58024400 	.word	0x58024400

080012d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b0b8      	sub	sp, #224	; 0xe0
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f0:	f107 0310 	add.w	r3, r7, #16
 80012f4:	22bc      	movs	r2, #188	; 0xbc
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f009 f973 	bl	800a5e4 <memset>
  if(hspi->Instance==SPI3)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a25      	ldr	r2, [pc, #148]	; (8001398 <HAL_SPI_MspInit+0xc0>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d142      	bne.n	800138e <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800130c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800130e:	2300      	movs	r3, #0
 8001310:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001312:	f107 0310 	add.w	r3, r7, #16
 8001316:	4618      	mov	r0, r3
 8001318:	f004 fa3c 	bl	8005794 <HAL_RCCEx_PeriphCLKConfig>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001322:	f7ff ffba 	bl	800129a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001326:	4b1d      	ldr	r3, [pc, #116]	; (800139c <HAL_SPI_MspInit+0xc4>)
 8001328:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800132c:	4a1b      	ldr	r2, [pc, #108]	; (800139c <HAL_SPI_MspInit+0xc4>)
 800132e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001332:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <HAL_SPI_MspInit+0xc4>)
 8001338:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800133c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001344:	4b15      	ldr	r3, [pc, #84]	; (800139c <HAL_SPI_MspInit+0xc4>)
 8001346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134a:	4a14      	ldr	r2, [pc, #80]	; (800139c <HAL_SPI_MspInit+0xc4>)
 800134c:	f043 0304 	orr.w	r3, r3, #4
 8001350:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <HAL_SPI_MspInit+0xc4>)
 8001356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001362:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001366:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800137c:	2306      	movs	r3, #6
 800137e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001382:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001386:	4619      	mov	r1, r3
 8001388:	4805      	ldr	r0, [pc, #20]	; (80013a0 <HAL_SPI_MspInit+0xc8>)
 800138a:	f003 f849 	bl	8004420 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800138e:	bf00      	nop
 8001390:	37e0      	adds	r7, #224	; 0xe0
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40003c00 	.word	0x40003c00
 800139c:	58024400 	.word	0x58024400
 80013a0:	58020800 	.word	0x58020800

080013a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a43      	ldr	r2, [pc, #268]	; (80014c0 <HAL_TIM_Base_MspInit+0x11c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d10f      	bne.n	80013d6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013b6:	4b43      	ldr	r3, [pc, #268]	; (80014c4 <HAL_TIM_Base_MspInit+0x120>)
 80013b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013bc:	4a41      	ldr	r2, [pc, #260]	; (80014c4 <HAL_TIM_Base_MspInit+0x120>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80013c6:	4b3f      	ldr	r3, [pc, #252]	; (80014c4 <HAL_TIM_Base_MspInit+0x120>)
 80013c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	61fb      	str	r3, [r7, #28]
 80013d2:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80013d4:	e06f      	b.n	80014b6 <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM2)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013de:	d10f      	bne.n	8001400 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013e0:	4b38      	ldr	r3, [pc, #224]	; (80014c4 <HAL_TIM_Base_MspInit+0x120>)
 80013e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013e6:	4a37      	ldr	r2, [pc, #220]	; (80014c4 <HAL_TIM_Base_MspInit+0x120>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013f0:	4b34      	ldr	r3, [pc, #208]	; (80014c4 <HAL_TIM_Base_MspInit+0x120>)
 80013f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	61bb      	str	r3, [r7, #24]
 80013fc:	69bb      	ldr	r3, [r7, #24]
}
 80013fe:	e05a      	b.n	80014b6 <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM3)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a30      	ldr	r2, [pc, #192]	; (80014c8 <HAL_TIM_Base_MspInit+0x124>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d10f      	bne.n	800142a <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800140a:	4b2e      	ldr	r3, [pc, #184]	; (80014c4 <HAL_TIM_Base_MspInit+0x120>)
 800140c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001410:	4a2c      	ldr	r2, [pc, #176]	; (80014c4 <HAL_TIM_Base_MspInit+0x120>)
 8001412:	f043 0302 	orr.w	r3, r3, #2
 8001416:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800141a:	4b2a      	ldr	r3, [pc, #168]	; (80014c4 <HAL_TIM_Base_MspInit+0x120>)
 800141c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	617b      	str	r3, [r7, #20]
 8001426:	697b      	ldr	r3, [r7, #20]
}
 8001428:	e045      	b.n	80014b6 <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM4)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a27      	ldr	r2, [pc, #156]	; (80014cc <HAL_TIM_Base_MspInit+0x128>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d10f      	bne.n	8001454 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001434:	4b23      	ldr	r3, [pc, #140]	; (80014c4 <HAL_TIM_Base_MspInit+0x120>)
 8001436:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800143a:	4a22      	ldr	r2, [pc, #136]	; (80014c4 <HAL_TIM_Base_MspInit+0x120>)
 800143c:	f043 0304 	orr.w	r3, r3, #4
 8001440:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001444:	4b1f      	ldr	r3, [pc, #124]	; (80014c4 <HAL_TIM_Base_MspInit+0x120>)
 8001446:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]
}
 8001452:	e030      	b.n	80014b6 <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM5)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a1d      	ldr	r2, [pc, #116]	; (80014d0 <HAL_TIM_Base_MspInit+0x12c>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d117      	bne.n	800148e <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800145e:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <HAL_TIM_Base_MspInit+0x120>)
 8001460:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001464:	4a17      	ldr	r2, [pc, #92]	; (80014c4 <HAL_TIM_Base_MspInit+0x120>)
 8001466:	f043 0308 	orr.w	r3, r3, #8
 800146a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800146e:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <HAL_TIM_Base_MspInit+0x120>)
 8001470:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001474:	f003 0308 	and.w	r3, r3, #8
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800147c:	2200      	movs	r2, #0
 800147e:	2100      	movs	r1, #0
 8001480:	2032      	movs	r0, #50	; 0x32
 8001482:	f000 fd74 	bl	8001f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001486:	2032      	movs	r0, #50	; 0x32
 8001488:	f000 fd8b 	bl	8001fa2 <HAL_NVIC_EnableIRQ>
}
 800148c:	e013      	b.n	80014b6 <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM15)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a10      	ldr	r2, [pc, #64]	; (80014d4 <HAL_TIM_Base_MspInit+0x130>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d10e      	bne.n	80014b6 <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001498:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <HAL_TIM_Base_MspInit+0x120>)
 800149a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800149e:	4a09      	ldr	r2, [pc, #36]	; (80014c4 <HAL_TIM_Base_MspInit+0x120>)
 80014a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_TIM_Base_MspInit+0x120>)
 80014aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
}
 80014b6:	bf00      	nop
 80014b8:	3720      	adds	r7, #32
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40010000 	.word	0x40010000
 80014c4:	58024400 	.word	0x58024400
 80014c8:	40000400 	.word	0x40000400
 80014cc:	40000800 	.word	0x40000800
 80014d0:	40000c00 	.word	0x40000c00
 80014d4:	40014000 	.word	0x40014000

080014d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08c      	sub	sp, #48	; 0x30
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 031c 	add.w	r3, r7, #28
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a5e      	ldr	r2, [pc, #376]	; (8001670 <HAL_TIM_MspPostInit+0x198>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d120      	bne.n	800153c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014fa:	4b5e      	ldr	r3, [pc, #376]	; (8001674 <HAL_TIM_MspPostInit+0x19c>)
 80014fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001500:	4a5c      	ldr	r2, [pc, #368]	; (8001674 <HAL_TIM_MspPostInit+0x19c>)
 8001502:	f043 0310 	orr.w	r3, r3, #16
 8001506:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800150a:	4b5a      	ldr	r3, [pc, #360]	; (8001674 <HAL_TIM_MspPostInit+0x19c>)
 800150c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001510:	f003 0310 	and.w	r3, r3, #16
 8001514:	61bb      	str	r3, [r7, #24]
 8001516:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8001518:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800151c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800152a:	2301      	movs	r3, #1
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 800152e:	f107 031c 	add.w	r3, r7, #28
 8001532:	4619      	mov	r1, r3
 8001534:	4850      	ldr	r0, [pc, #320]	; (8001678 <HAL_TIM_MspPostInit+0x1a0>)
 8001536:	f002 ff73 	bl	8004420 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800153a:	e094      	b.n	8001666 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM2)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001544:	d120      	bne.n	8001588 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001546:	4b4b      	ldr	r3, [pc, #300]	; (8001674 <HAL_TIM_MspPostInit+0x19c>)
 8001548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154c:	4a49      	ldr	r2, [pc, #292]	; (8001674 <HAL_TIM_MspPostInit+0x19c>)
 800154e:	f043 0302 	orr.w	r3, r3, #2
 8001552:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001556:	4b47      	ldr	r3, [pc, #284]	; (8001674 <HAL_TIM_MspPostInit+0x19c>)
 8001558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 8001564:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001576:	2301      	movs	r3, #1
 8001578:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 800157a:	f107 031c 	add.w	r3, r7, #28
 800157e:	4619      	mov	r1, r3
 8001580:	483e      	ldr	r0, [pc, #248]	; (800167c <HAL_TIM_MspPostInit+0x1a4>)
 8001582:	f002 ff4d 	bl	8004420 <HAL_GPIO_Init>
}
 8001586:	e06e      	b.n	8001666 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM3)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a3c      	ldr	r2, [pc, #240]	; (8001680 <HAL_TIM_MspPostInit+0x1a8>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d11f      	bne.n	80015d2 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	4b38      	ldr	r3, [pc, #224]	; (8001674 <HAL_TIM_MspPostInit+0x19c>)
 8001594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001598:	4a36      	ldr	r2, [pc, #216]	; (8001674 <HAL_TIM_MspPostInit+0x19c>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015a2:	4b34      	ldr	r3, [pc, #208]	; (8001674 <HAL_TIM_MspPostInit+0x19c>)
 80015a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 80015b0:	2340      	movs	r3, #64	; 0x40
 80015b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015c0:	2302      	movs	r3, #2
 80015c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 80015c4:	f107 031c 	add.w	r3, r7, #28
 80015c8:	4619      	mov	r1, r3
 80015ca:	482e      	ldr	r0, [pc, #184]	; (8001684 <HAL_TIM_MspPostInit+0x1ac>)
 80015cc:	f002 ff28 	bl	8004420 <HAL_GPIO_Init>
}
 80015d0:	e049      	b.n	8001666 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM4)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a2c      	ldr	r2, [pc, #176]	; (8001688 <HAL_TIM_MspPostInit+0x1b0>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d120      	bne.n	800161e <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015dc:	4b25      	ldr	r3, [pc, #148]	; (8001674 <HAL_TIM_MspPostInit+0x19c>)
 80015de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e2:	4a24      	ldr	r2, [pc, #144]	; (8001674 <HAL_TIM_MspPostInit+0x19c>)
 80015e4:	f043 0302 	orr.w	r3, r3, #2
 80015e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ec:	4b21      	ldr	r3, [pc, #132]	; (8001674 <HAL_TIM_MspPostInit+0x19c>)
 80015ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 80015fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001600:	2302      	movs	r3, #2
 8001602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	2300      	movs	r3, #0
 800160a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800160c:	2302      	movs	r3, #2
 800160e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8001610:	f107 031c 	add.w	r3, r7, #28
 8001614:	4619      	mov	r1, r3
 8001616:	4819      	ldr	r0, [pc, #100]	; (800167c <HAL_TIM_MspPostInit+0x1a4>)
 8001618:	f002 ff02 	bl	8004420 <HAL_GPIO_Init>
}
 800161c:	e023      	b.n	8001666 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM15)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a1a      	ldr	r2, [pc, #104]	; (800168c <HAL_TIM_MspPostInit+0x1b4>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d11e      	bne.n	8001666 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <HAL_TIM_MspPostInit+0x19c>)
 800162a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162e:	4a11      	ldr	r2, [pc, #68]	; (8001674 <HAL_TIM_MspPostInit+0x19c>)
 8001630:	f043 0310 	orr.w	r3, r3, #16
 8001634:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001638:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <HAL_TIM_MspPostInit+0x19c>)
 800163a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163e:	f003 0310 	and.w	r3, r3, #16
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 8001646:	2340      	movs	r3, #64	; 0x40
 8001648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164a:	2302      	movs	r3, #2
 800164c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	2300      	movs	r3, #0
 8001654:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8001656:	2304      	movs	r3, #4
 8001658:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 800165a:	f107 031c 	add.w	r3, r7, #28
 800165e:	4619      	mov	r1, r3
 8001660:	4805      	ldr	r0, [pc, #20]	; (8001678 <HAL_TIM_MspPostInit+0x1a0>)
 8001662:	f002 fedd 	bl	8004420 <HAL_GPIO_Init>
}
 8001666:	bf00      	nop
 8001668:	3730      	adds	r7, #48	; 0x30
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40010000 	.word	0x40010000
 8001674:	58024400 	.word	0x58024400
 8001678:	58021000 	.word	0x58021000
 800167c:	58020400 	.word	0x58020400
 8001680:	40000400 	.word	0x40000400
 8001684:	58020000 	.word	0x58020000
 8001688:	40000800 	.word	0x40000800
 800168c:	40014000 	.word	0x40014000

08001690 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b0bc      	sub	sp, #240	; 0xf0
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016a8:	f107 0320 	add.w	r3, r7, #32
 80016ac:	22bc      	movs	r2, #188	; 0xbc
 80016ae:	2100      	movs	r1, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f008 ff97 	bl	800a5e4 <memset>
  if(huart->Instance==UART4)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a67      	ldr	r2, [pc, #412]	; (8001858 <HAL_UART_MspInit+0x1c8>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	f040 80db 	bne.w	8001878 <HAL_UART_MspInit+0x1e8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80016c2:	2302      	movs	r3, #2
 80016c4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80016c6:	2300      	movs	r3, #0
 80016c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016cc:	f107 0320 	add.w	r3, r7, #32
 80016d0:	4618      	mov	r0, r3
 80016d2:	f004 f85f 	bl	8005794 <HAL_RCCEx_PeriphCLKConfig>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80016dc:	f7ff fddd 	bl	800129a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80016e0:	4b5e      	ldr	r3, [pc, #376]	; (800185c <HAL_UART_MspInit+0x1cc>)
 80016e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016e6:	4a5d      	ldr	r2, [pc, #372]	; (800185c <HAL_UART_MspInit+0x1cc>)
 80016e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016f0:	4b5a      	ldr	r3, [pc, #360]	; (800185c <HAL_UART_MspInit+0x1cc>)
 80016f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016fa:	61fb      	str	r3, [r7, #28]
 80016fc:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	4b57      	ldr	r3, [pc, #348]	; (800185c <HAL_UART_MspInit+0x1cc>)
 8001700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001704:	4a55      	ldr	r2, [pc, #340]	; (800185c <HAL_UART_MspInit+0x1cc>)
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800170e:	4b53      	ldr	r3, [pc, #332]	; (800185c <HAL_UART_MspInit+0x1cc>)
 8001710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	61bb      	str	r3, [r7, #24]
 800171a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800171c:	4b4f      	ldr	r3, [pc, #316]	; (800185c <HAL_UART_MspInit+0x1cc>)
 800171e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001722:	4a4e      	ldr	r2, [pc, #312]	; (800185c <HAL_UART_MspInit+0x1cc>)
 8001724:	f043 0308 	orr.w	r3, r3, #8
 8001728:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800172c:	4b4b      	ldr	r3, [pc, #300]	; (800185c <HAL_UART_MspInit+0x1cc>)
 800172e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001732:	f003 0308 	and.w	r3, r3, #8
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA15 (JTDI)     ------> UART4_DE
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800173a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800173e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001742:	2302      	movs	r3, #2
 8001744:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174e:	2300      	movs	r3, #0
 8001750:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001754:	2308      	movs	r3, #8
 8001756:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800175e:	4619      	mov	r1, r3
 8001760:	483f      	ldr	r0, [pc, #252]	; (8001860 <HAL_UART_MspInit+0x1d0>)
 8001762:	f002 fe5d 	bl	8004420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001766:	2303      	movs	r3, #3
 8001768:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176c:	2302      	movs	r3, #2
 800176e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800177e:	2308      	movs	r3, #8
 8001780:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001784:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001788:	4619      	mov	r1, r3
 800178a:	4836      	ldr	r0, [pc, #216]	; (8001864 <HAL_UART_MspInit+0x1d4>)
 800178c:	f002 fe48 	bl	8004420 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Stream0;
 8001790:	4b35      	ldr	r3, [pc, #212]	; (8001868 <HAL_UART_MspInit+0x1d8>)
 8001792:	4a36      	ldr	r2, [pc, #216]	; (800186c <HAL_UART_MspInit+0x1dc>)
 8001794:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001796:	4b34      	ldr	r3, [pc, #208]	; (8001868 <HAL_UART_MspInit+0x1d8>)
 8001798:	223f      	movs	r2, #63	; 0x3f
 800179a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800179c:	4b32      	ldr	r3, [pc, #200]	; (8001868 <HAL_UART_MspInit+0x1d8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017a2:	4b31      	ldr	r3, [pc, #196]	; (8001868 <HAL_UART_MspInit+0x1d8>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017a8:	4b2f      	ldr	r3, [pc, #188]	; (8001868 <HAL_UART_MspInit+0x1d8>)
 80017aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ae:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017b0:	4b2d      	ldr	r3, [pc, #180]	; (8001868 <HAL_UART_MspInit+0x1d8>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017b6:	4b2c      	ldr	r3, [pc, #176]	; (8001868 <HAL_UART_MspInit+0x1d8>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80017bc:	4b2a      	ldr	r3, [pc, #168]	; (8001868 <HAL_UART_MspInit+0x1d8>)
 80017be:	2200      	movs	r2, #0
 80017c0:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017c2:	4b29      	ldr	r3, [pc, #164]	; (8001868 <HAL_UART_MspInit+0x1d8>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017c8:	4b27      	ldr	r3, [pc, #156]	; (8001868 <HAL_UART_MspInit+0x1d8>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80017ce:	4826      	ldr	r0, [pc, #152]	; (8001868 <HAL_UART_MspInit+0x1d8>)
 80017d0:	f000 fc02 	bl	8001fd8 <HAL_DMA_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_UART_MspInit+0x14e>
    {
      Error_Handler();
 80017da:	f7ff fd5e 	bl	800129a <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a21      	ldr	r2, [pc, #132]	; (8001868 <HAL_UART_MspInit+0x1d8>)
 80017e2:	67da      	str	r2, [r3, #124]	; 0x7c
 80017e4:	4a20      	ldr	r2, [pc, #128]	; (8001868 <HAL_UART_MspInit+0x1d8>)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Stream1;
 80017ea:	4b21      	ldr	r3, [pc, #132]	; (8001870 <HAL_UART_MspInit+0x1e0>)
 80017ec:	4a21      	ldr	r2, [pc, #132]	; (8001874 <HAL_UART_MspInit+0x1e4>)
 80017ee:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 80017f0:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <HAL_UART_MspInit+0x1e0>)
 80017f2:	2240      	movs	r2, #64	; 0x40
 80017f4:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017f6:	4b1e      	ldr	r3, [pc, #120]	; (8001870 <HAL_UART_MspInit+0x1e0>)
 80017f8:	2240      	movs	r2, #64	; 0x40
 80017fa:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017fc:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <HAL_UART_MspInit+0x1e0>)
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001802:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <HAL_UART_MspInit+0x1e0>)
 8001804:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001808:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800180a:	4b19      	ldr	r3, [pc, #100]	; (8001870 <HAL_UART_MspInit+0x1e0>)
 800180c:	2200      	movs	r2, #0
 800180e:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001810:	4b17      	ldr	r3, [pc, #92]	; (8001870 <HAL_UART_MspInit+0x1e0>)
 8001812:	2200      	movs	r2, #0
 8001814:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001816:	4b16      	ldr	r3, [pc, #88]	; (8001870 <HAL_UART_MspInit+0x1e0>)
 8001818:	2200      	movs	r2, #0
 800181a:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800181c:	4b14      	ldr	r3, [pc, #80]	; (8001870 <HAL_UART_MspInit+0x1e0>)
 800181e:	2200      	movs	r2, #0
 8001820:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001822:	4b13      	ldr	r3, [pc, #76]	; (8001870 <HAL_UART_MspInit+0x1e0>)
 8001824:	2200      	movs	r2, #0
 8001826:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001828:	4811      	ldr	r0, [pc, #68]	; (8001870 <HAL_UART_MspInit+0x1e0>)
 800182a:	f000 fbd5 	bl	8001fd8 <HAL_DMA_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <HAL_UART_MspInit+0x1a8>
    {
      Error_Handler();
 8001834:	f7ff fd31 	bl	800129a <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a0d      	ldr	r2, [pc, #52]	; (8001870 <HAL_UART_MspInit+0x1e0>)
 800183c:	679a      	str	r2, [r3, #120]	; 0x78
 800183e:	4a0c      	ldr	r2, [pc, #48]	; (8001870 <HAL_UART_MspInit+0x1e0>)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001844:	2200      	movs	r2, #0
 8001846:	2100      	movs	r1, #0
 8001848:	2034      	movs	r0, #52	; 0x34
 800184a:	f000 fb90 	bl	8001f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800184e:	2034      	movs	r0, #52	; 0x34
 8001850:	f000 fba7 	bl	8001fa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001854:	e0bb      	b.n	80019ce <HAL_UART_MspInit+0x33e>
 8001856:	bf00      	nop
 8001858:	40004c00 	.word	0x40004c00
 800185c:	58024400 	.word	0x58024400
 8001860:	58020000 	.word	0x58020000
 8001864:	58020c00 	.word	0x58020c00
 8001868:	2000002c 	.word	0x2000002c
 800186c:	40020410 	.word	0x40020410
 8001870:	20000518 	.word	0x20000518
 8001874:	40020428 	.word	0x40020428
  else if(huart->Instance==USART3)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a56      	ldr	r2, [pc, #344]	; (80019d8 <HAL_UART_MspInit+0x348>)
 800187e:	4293      	cmp	r3, r2
 8001880:	f040 80a5 	bne.w	80019ce <HAL_UART_MspInit+0x33e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001884:	2302      	movs	r3, #2
 8001886:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001888:	2300      	movs	r3, #0
 800188a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800188e:	f107 0320 	add.w	r3, r7, #32
 8001892:	4618      	mov	r0, r3
 8001894:	f003 ff7e 	bl	8005794 <HAL_RCCEx_PeriphCLKConfig>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_UART_MspInit+0x212>
      Error_Handler();
 800189e:	f7ff fcfc 	bl	800129a <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018a2:	4b4e      	ldr	r3, [pc, #312]	; (80019dc <HAL_UART_MspInit+0x34c>)
 80018a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018a8:	4a4c      	ldr	r2, [pc, #304]	; (80019dc <HAL_UART_MspInit+0x34c>)
 80018aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018b2:	4b4a      	ldr	r3, [pc, #296]	; (80019dc <HAL_UART_MspInit+0x34c>)
 80018b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018c0:	4b46      	ldr	r3, [pc, #280]	; (80019dc <HAL_UART_MspInit+0x34c>)
 80018c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c6:	4a45      	ldr	r2, [pc, #276]	; (80019dc <HAL_UART_MspInit+0x34c>)
 80018c8:	f043 0308 	orr.w	r3, r3, #8
 80018cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018d0:	4b42      	ldr	r3, [pc, #264]	; (80019dc <HAL_UART_MspInit+0x34c>)
 80018d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018f8:	2307      	movs	r3, #7
 80018fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018fe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001902:	4619      	mov	r1, r3
 8001904:	4836      	ldr	r0, [pc, #216]	; (80019e0 <HAL_UART_MspInit+0x350>)
 8001906:	f002 fd8b 	bl	8004420 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 800190a:	4b36      	ldr	r3, [pc, #216]	; (80019e4 <HAL_UART_MspInit+0x354>)
 800190c:	4a36      	ldr	r2, [pc, #216]	; (80019e8 <HAL_UART_MspInit+0x358>)
 800190e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001910:	4b34      	ldr	r3, [pc, #208]	; (80019e4 <HAL_UART_MspInit+0x354>)
 8001912:	222d      	movs	r2, #45	; 0x2d
 8001914:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001916:	4b33      	ldr	r3, [pc, #204]	; (80019e4 <HAL_UART_MspInit+0x354>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800191c:	4b31      	ldr	r3, [pc, #196]	; (80019e4 <HAL_UART_MspInit+0x354>)
 800191e:	2200      	movs	r2, #0
 8001920:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001922:	4b30      	ldr	r3, [pc, #192]	; (80019e4 <HAL_UART_MspInit+0x354>)
 8001924:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001928:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800192a:	4b2e      	ldr	r3, [pc, #184]	; (80019e4 <HAL_UART_MspInit+0x354>)
 800192c:	2200      	movs	r2, #0
 800192e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001930:	4b2c      	ldr	r3, [pc, #176]	; (80019e4 <HAL_UART_MspInit+0x354>)
 8001932:	2200      	movs	r2, #0
 8001934:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001936:	4b2b      	ldr	r3, [pc, #172]	; (80019e4 <HAL_UART_MspInit+0x354>)
 8001938:	2200      	movs	r2, #0
 800193a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800193c:	4b29      	ldr	r3, [pc, #164]	; (80019e4 <HAL_UART_MspInit+0x354>)
 800193e:	2200      	movs	r2, #0
 8001940:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001942:	4b28      	ldr	r3, [pc, #160]	; (80019e4 <HAL_UART_MspInit+0x354>)
 8001944:	2200      	movs	r2, #0
 8001946:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001948:	4826      	ldr	r0, [pc, #152]	; (80019e4 <HAL_UART_MspInit+0x354>)
 800194a:	f000 fb45 	bl	8001fd8 <HAL_DMA_Init>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <HAL_UART_MspInit+0x2c8>
      Error_Handler();
 8001954:	f7ff fca1 	bl	800129a <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a22      	ldr	r2, [pc, #136]	; (80019e4 <HAL_UART_MspInit+0x354>)
 800195c:	67da      	str	r2, [r3, #124]	; 0x7c
 800195e:	4a21      	ldr	r2, [pc, #132]	; (80019e4 <HAL_UART_MspInit+0x354>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8001964:	4b21      	ldr	r3, [pc, #132]	; (80019ec <HAL_UART_MspInit+0x35c>)
 8001966:	4a22      	ldr	r2, [pc, #136]	; (80019f0 <HAL_UART_MspInit+0x360>)
 8001968:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800196a:	4b20      	ldr	r3, [pc, #128]	; (80019ec <HAL_UART_MspInit+0x35c>)
 800196c:	222e      	movs	r2, #46	; 0x2e
 800196e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001970:	4b1e      	ldr	r3, [pc, #120]	; (80019ec <HAL_UART_MspInit+0x35c>)
 8001972:	2240      	movs	r2, #64	; 0x40
 8001974:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001976:	4b1d      	ldr	r3, [pc, #116]	; (80019ec <HAL_UART_MspInit+0x35c>)
 8001978:	2200      	movs	r2, #0
 800197a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800197c:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <HAL_UART_MspInit+0x35c>)
 800197e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001982:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001984:	4b19      	ldr	r3, [pc, #100]	; (80019ec <HAL_UART_MspInit+0x35c>)
 8001986:	2200      	movs	r2, #0
 8001988:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800198a:	4b18      	ldr	r3, [pc, #96]	; (80019ec <HAL_UART_MspInit+0x35c>)
 800198c:	2200      	movs	r2, #0
 800198e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001990:	4b16      	ldr	r3, [pc, #88]	; (80019ec <HAL_UART_MspInit+0x35c>)
 8001992:	2200      	movs	r2, #0
 8001994:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <HAL_UART_MspInit+0x35c>)
 8001998:	2200      	movs	r2, #0
 800199a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800199c:	4b13      	ldr	r3, [pc, #76]	; (80019ec <HAL_UART_MspInit+0x35c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80019a2:	4812      	ldr	r0, [pc, #72]	; (80019ec <HAL_UART_MspInit+0x35c>)
 80019a4:	f000 fb18 	bl	8001fd8 <HAL_DMA_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_UART_MspInit+0x322>
      Error_Handler();
 80019ae:	f7ff fc74 	bl	800129a <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a0d      	ldr	r2, [pc, #52]	; (80019ec <HAL_UART_MspInit+0x35c>)
 80019b6:	679a      	str	r2, [r3, #120]	; 0x78
 80019b8:	4a0c      	ldr	r2, [pc, #48]	; (80019ec <HAL_UART_MspInit+0x35c>)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80019be:	2200      	movs	r2, #0
 80019c0:	2100      	movs	r1, #0
 80019c2:	2027      	movs	r0, #39	; 0x27
 80019c4:	f000 fad3 	bl	8001f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80019c8:	2027      	movs	r0, #39	; 0x27
 80019ca:	f000 faea 	bl	8001fa2 <HAL_NVIC_EnableIRQ>
}
 80019ce:	bf00      	nop
 80019d0:	37f0      	adds	r7, #240	; 0xf0
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40004800 	.word	0x40004800
 80019dc:	58024400 	.word	0x58024400
 80019e0:	58020c00 	.word	0x58020c00
 80019e4:	200000f0 	.word	0x200000f0
 80019e8:	40020010 	.word	0x40020010
 80019ec:	20000250 	.word	0x20000250
 80019f0:	40020028 	.word	0x40020028

080019f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <NMI_Handler+0x4>

080019fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019fe:	e7fe      	b.n	80019fe <HardFault_Handler+0x4>

08001a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <MemManage_Handler+0x4>

08001a06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a0a:	e7fe      	b.n	8001a0a <BusFault_Handler+0x4>

08001a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <UsageFault_Handler+0x4>

08001a12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a40:	f000 f98e 	bl	8001d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001a4c:	4802      	ldr	r0, [pc, #8]	; (8001a58 <DMA1_Stream0_IRQHandler+0x10>)
 8001a4e:	f001 fb81 	bl	8003154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200000f0 	.word	0x200000f0

08001a5c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001a60:	4802      	ldr	r0, [pc, #8]	; (8001a6c <DMA1_Stream1_IRQHandler+0x10>)
 8001a62:	f001 fb77 	bl	8003154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000250 	.word	0x20000250

08001a70 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001a74:	2040      	movs	r0, #64	; 0x40
 8001a76:	f002 fe9c 	bl	80047b2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001a7a:	2080      	movs	r0, #128	; 0x80
 8001a7c:	f002 fe99 	bl	80047b2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a88:	4802      	ldr	r0, [pc, #8]	; (8001a94 <USART3_IRQHandler+0x10>)
 8001a8a:	f006 fd49 	bl	8008520 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000168 	.word	0x20000168

08001a98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001a9c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001aa0:	f002 fe87 	bl	80047b2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001aa4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001aa8:	f002 fe83 	bl	80047b2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001aac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ab0:	f002 fe7f 	bl	80047b2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001ab4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001ab8:	f002 fe7b 	bl	80047b2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001ac4:	4802      	ldr	r0, [pc, #8]	; (8001ad0 <TIM5_IRQHandler+0x10>)
 8001ac6:	f005 fb9c 	bl	8007202 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200002c8 	.word	0x200002c8

08001ad4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001ad8:	4802      	ldr	r0, [pc, #8]	; (8001ae4 <UART4_IRQHandler+0x10>)
 8001ada:	f006 fd21 	bl	8008520 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	2000043c 	.word	0x2000043c

08001ae8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001aec:	4802      	ldr	r0, [pc, #8]	; (8001af8 <DMA2_Stream0_IRQHandler+0x10>)
 8001aee:	f001 fb31 	bl	8003154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	2000002c 	.word	0x2000002c

08001afc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001b00:	4802      	ldr	r0, [pc, #8]	; (8001b0c <DMA2_Stream1_IRQHandler+0x10>)
 8001b02:	f001 fb27 	bl	8003154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000518 	.word	0x20000518

08001b10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b14:	4b39      	ldr	r3, [pc, #228]	; (8001bfc <SystemInit+0xec>)
 8001b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b1a:	4a38      	ldr	r2, [pc, #224]	; (8001bfc <SystemInit+0xec>)
 8001b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b24:	4b36      	ldr	r3, [pc, #216]	; (8001c00 <SystemInit+0xf0>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 030f 	and.w	r3, r3, #15
 8001b2c:	2b06      	cmp	r3, #6
 8001b2e:	d807      	bhi.n	8001b40 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b30:	4b33      	ldr	r3, [pc, #204]	; (8001c00 <SystemInit+0xf0>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f023 030f 	bic.w	r3, r3, #15
 8001b38:	4a31      	ldr	r2, [pc, #196]	; (8001c00 <SystemInit+0xf0>)
 8001b3a:	f043 0307 	orr.w	r3, r3, #7
 8001b3e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b40:	4b30      	ldr	r3, [pc, #192]	; (8001c04 <SystemInit+0xf4>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a2f      	ldr	r2, [pc, #188]	; (8001c04 <SystemInit+0xf4>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b4c:	4b2d      	ldr	r3, [pc, #180]	; (8001c04 <SystemInit+0xf4>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b52:	4b2c      	ldr	r3, [pc, #176]	; (8001c04 <SystemInit+0xf4>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	492b      	ldr	r1, [pc, #172]	; (8001c04 <SystemInit+0xf4>)
 8001b58:	4b2b      	ldr	r3, [pc, #172]	; (8001c08 <SystemInit+0xf8>)
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b5e:	4b28      	ldr	r3, [pc, #160]	; (8001c00 <SystemInit+0xf0>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d007      	beq.n	8001b7a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b6a:	4b25      	ldr	r3, [pc, #148]	; (8001c00 <SystemInit+0xf0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f023 030f 	bic.w	r3, r3, #15
 8001b72:	4a23      	ldr	r2, [pc, #140]	; (8001c00 <SystemInit+0xf0>)
 8001b74:	f043 0307 	orr.w	r3, r3, #7
 8001b78:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001b7a:	4b22      	ldr	r3, [pc, #136]	; (8001c04 <SystemInit+0xf4>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001b80:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <SystemInit+0xf4>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001b86:	4b1f      	ldr	r3, [pc, #124]	; (8001c04 <SystemInit+0xf4>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001b8c:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <SystemInit+0xf4>)
 8001b8e:	4a1f      	ldr	r2, [pc, #124]	; (8001c0c <SystemInit+0xfc>)
 8001b90:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001b92:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <SystemInit+0xf4>)
 8001b94:	4a1e      	ldr	r2, [pc, #120]	; (8001c10 <SystemInit+0x100>)
 8001b96:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001b98:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <SystemInit+0xf4>)
 8001b9a:	4a1e      	ldr	r2, [pc, #120]	; (8001c14 <SystemInit+0x104>)
 8001b9c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001b9e:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <SystemInit+0xf4>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001ba4:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <SystemInit+0xf4>)
 8001ba6:	4a1b      	ldr	r2, [pc, #108]	; (8001c14 <SystemInit+0x104>)
 8001ba8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001baa:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <SystemInit+0xf4>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001bb0:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <SystemInit+0xf4>)
 8001bb2:	4a18      	ldr	r2, [pc, #96]	; (8001c14 <SystemInit+0x104>)
 8001bb4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001bb6:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <SystemInit+0xf4>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <SystemInit+0xf4>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a10      	ldr	r2, [pc, #64]	; (8001c04 <SystemInit+0xf4>)
 8001bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001bc8:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <SystemInit+0xf4>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001bce:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <SystemInit+0x108>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <SystemInit+0x10c>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bda:	d202      	bcs.n	8001be2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001bdc:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <SystemInit+0x110>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <SystemInit+0x114>)
 8001be4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001be8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bea:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <SystemInit+0xec>)
 8001bec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bf0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001bf2:	bf00      	nop
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000ed00 	.word	0xe000ed00
 8001c00:	52002000 	.word	0x52002000
 8001c04:	58024400 	.word	0x58024400
 8001c08:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c0c:	02020200 	.word	0x02020200
 8001c10:	01ff0000 	.word	0x01ff0000
 8001c14:	01010280 	.word	0x01010280
 8001c18:	5c001000 	.word	0x5c001000
 8001c1c:	ffff0000 	.word	0xffff0000
 8001c20:	51008108 	.word	0x51008108
 8001c24:	52004000 	.word	0x52004000

08001c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001c28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c2c:	f7ff ff70 	bl	8001b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c30:	480c      	ldr	r0, [pc, #48]	; (8001c64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c32:	490d      	ldr	r1, [pc, #52]	; (8001c68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c34:	4a0d      	ldr	r2, [pc, #52]	; (8001c6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c38:	e002      	b.n	8001c40 <LoopCopyDataInit>

08001c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c3e:	3304      	adds	r3, #4

08001c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c44:	d3f9      	bcc.n	8001c3a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c46:	4a0a      	ldr	r2, [pc, #40]	; (8001c70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c48:	4c0a      	ldr	r4, [pc, #40]	; (8001c74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c4c:	e001      	b.n	8001c52 <LoopFillZerobss>

08001c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c50:	3204      	adds	r2, #4

08001c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c54:	d3fb      	bcc.n	8001c4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c56:	f008 fca1 	bl	800a59c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c5a:	f7fe fcd1 	bl	8000600 <main>
  bx  lr
 8001c5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c68:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001c6c:	0800a65c 	.word	0x0800a65c
  ldr r2, =_sbss
 8001c70:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001c74:	20000594 	.word	0x20000594

08001c78 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c78:	e7fe      	b.n	8001c78 <ADC3_IRQHandler>
	...

08001c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c82:	2003      	movs	r0, #3
 8001c84:	f000 f968 	bl	8001f58 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c88:	f003 fbae 	bl	80053e8 <HAL_RCC_GetSysClockFreq>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <HAL_Init+0x68>)
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	0a1b      	lsrs	r3, r3, #8
 8001c94:	f003 030f 	and.w	r3, r3, #15
 8001c98:	4913      	ldr	r1, [pc, #76]	; (8001ce8 <HAL_Init+0x6c>)
 8001c9a:	5ccb      	ldrb	r3, [r1, r3]
 8001c9c:	f003 031f 	and.w	r3, r3, #31
 8001ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ca6:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <HAL_Init+0x68>)
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	4a0e      	ldr	r2, [pc, #56]	; (8001ce8 <HAL_Init+0x6c>)
 8001cb0:	5cd3      	ldrb	r3, [r2, r3]
 8001cb2:	f003 031f 	and.w	r3, r3, #31
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cbc:	4a0b      	ldr	r2, [pc, #44]	; (8001cec <HAL_Init+0x70>)
 8001cbe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001cc0:	4a0b      	ldr	r2, [pc, #44]	; (8001cf0 <HAL_Init+0x74>)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	f000 f814 	bl	8001cf4 <HAL_InitTick>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e002      	b.n	8001cdc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd6:	f7ff fae5 	bl	80012a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	58024400 	.word	0x58024400
 8001ce8:	0800a60c 	.word	0x0800a60c
 8001cec:	20000004 	.word	0x20000004
 8001cf0:	20000000 	.word	0x20000000

08001cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001cfc:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <HAL_InitTick+0x60>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e021      	b.n	8001d4c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d08:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <HAL_InitTick+0x64>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <HAL_InitTick+0x60>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	4619      	mov	r1, r3
 8001d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 f94d 	bl	8001fbe <HAL_SYSTICK_Config>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e00e      	b.n	8001d4c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b0f      	cmp	r3, #15
 8001d32:	d80a      	bhi.n	8001d4a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d34:	2200      	movs	r2, #0
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	f04f 30ff 	mov.w	r0, #4294967295
 8001d3c:	f000 f917 	bl	8001f6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d40:	4a06      	ldr	r2, [pc, #24]	; (8001d5c <HAL_InitTick+0x68>)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
 8001d48:	e000      	b.n	8001d4c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	2000000c 	.word	0x2000000c
 8001d58:	20000000 	.word	0x20000000
 8001d5c:	20000008 	.word	0x20000008

08001d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d64:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <HAL_IncTick+0x20>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <HAL_IncTick+0x24>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4413      	add	r3, r2
 8001d70:	4a04      	ldr	r2, [pc, #16]	; (8001d84 <HAL_IncTick+0x24>)
 8001d72:	6013      	str	r3, [r2, #0]
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	2000000c 	.word	0x2000000c
 8001d84:	20000590 	.word	0x20000590

08001d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d8c:	4b03      	ldr	r3, [pc, #12]	; (8001d9c <HAL_GetTick+0x14>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	20000590 	.word	0x20000590

08001da0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001da4:	4b03      	ldr	r3, [pc, #12]	; (8001db4 <HAL_GetREVID+0x14>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	0c1b      	lsrs	r3, r3, #16
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	5c001000 	.word	0x5c001000

08001db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <__NVIC_SetPriorityGrouping+0x40>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001de0:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <__NVIC_SetPriorityGrouping+0x44>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001de6:	4a04      	ldr	r2, [pc, #16]	; (8001df8 <__NVIC_SetPriorityGrouping+0x40>)
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	60d3      	str	r3, [r2, #12]
}
 8001dec:	bf00      	nop
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	e000ed00 	.word	0xe000ed00
 8001dfc:	05fa0000 	.word	0x05fa0000

08001e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e04:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <__NVIC_GetPriorityGrouping+0x18>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	0a1b      	lsrs	r3, r3, #8
 8001e0a:	f003 0307 	and.w	r3, r3, #7
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	db0b      	blt.n	8001e46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	f003 021f 	and.w	r2, r3, #31
 8001e34:	4907      	ldr	r1, [pc, #28]	; (8001e54 <__NVIC_EnableIRQ+0x38>)
 8001e36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e3a:	095b      	lsrs	r3, r3, #5
 8001e3c:	2001      	movs	r0, #1
 8001e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	e000e100 	.word	0xe000e100

08001e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	6039      	str	r1, [r7, #0]
 8001e62:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	db0a      	blt.n	8001e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	490c      	ldr	r1, [pc, #48]	; (8001ea4 <__NVIC_SetPriority+0x4c>)
 8001e72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e76:	0112      	lsls	r2, r2, #4
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	440b      	add	r3, r1
 8001e7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e80:	e00a      	b.n	8001e98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	4908      	ldr	r1, [pc, #32]	; (8001ea8 <__NVIC_SetPriority+0x50>)
 8001e88:	88fb      	ldrh	r3, [r7, #6]
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	3b04      	subs	r3, #4
 8001e90:	0112      	lsls	r2, r2, #4
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	440b      	add	r3, r1
 8001e96:	761a      	strb	r2, [r3, #24]
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	e000e100 	.word	0xe000e100
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b089      	sub	sp, #36	; 0x24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f1c3 0307 	rsb	r3, r3, #7
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	bf28      	it	cs
 8001eca:	2304      	movcs	r3, #4
 8001ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	2b06      	cmp	r3, #6
 8001ed4:	d902      	bls.n	8001edc <NVIC_EncodePriority+0x30>
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	3b03      	subs	r3, #3
 8001eda:	e000      	b.n	8001ede <NVIC_EncodePriority+0x32>
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43da      	mvns	r2, r3
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	401a      	ands	r2, r3
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	fa01 f303 	lsl.w	r3, r1, r3
 8001efe:	43d9      	mvns	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f04:	4313      	orrs	r3, r2
         );
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3724      	adds	r7, #36	; 0x24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
	...

08001f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f24:	d301      	bcc.n	8001f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f26:	2301      	movs	r3, #1
 8001f28:	e00f      	b.n	8001f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f2a:	4a0a      	ldr	r2, [pc, #40]	; (8001f54 <SysTick_Config+0x40>)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f32:	210f      	movs	r1, #15
 8001f34:	f04f 30ff 	mov.w	r0, #4294967295
 8001f38:	f7ff ff8e 	bl	8001e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <SysTick_Config+0x40>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f42:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <SysTick_Config+0x40>)
 8001f44:	2207      	movs	r2, #7
 8001f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	e000e010 	.word	0xe000e010

08001f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7ff ff29 	bl	8001db8 <__NVIC_SetPriorityGrouping>
}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b086      	sub	sp, #24
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	4603      	mov	r3, r0
 8001f76:	60b9      	str	r1, [r7, #8]
 8001f78:	607a      	str	r2, [r7, #4]
 8001f7a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f7c:	f7ff ff40 	bl	8001e00 <__NVIC_GetPriorityGrouping>
 8001f80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	68b9      	ldr	r1, [r7, #8]
 8001f86:	6978      	ldr	r0, [r7, #20]
 8001f88:	f7ff ff90 	bl	8001eac <NVIC_EncodePriority>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f92:	4611      	mov	r1, r2
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff ff5f 	bl	8001e58 <__NVIC_SetPriority>
}
 8001f9a:	bf00      	nop
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	4603      	mov	r3, r0
 8001faa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff ff33 	bl	8001e1c <__NVIC_EnableIRQ>
}
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff ffa4 	bl	8001f14 <SysTick_Config>
 8001fcc:	4603      	mov	r3, r0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001fe0:	f7ff fed2 	bl	8001d88 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e316      	b.n	800261e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a66      	ldr	r2, [pc, #408]	; (8002190 <HAL_DMA_Init+0x1b8>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d04a      	beq.n	8002090 <HAL_DMA_Init+0xb8>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a65      	ldr	r2, [pc, #404]	; (8002194 <HAL_DMA_Init+0x1bc>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d045      	beq.n	8002090 <HAL_DMA_Init+0xb8>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a63      	ldr	r2, [pc, #396]	; (8002198 <HAL_DMA_Init+0x1c0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d040      	beq.n	8002090 <HAL_DMA_Init+0xb8>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a62      	ldr	r2, [pc, #392]	; (800219c <HAL_DMA_Init+0x1c4>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d03b      	beq.n	8002090 <HAL_DMA_Init+0xb8>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a60      	ldr	r2, [pc, #384]	; (80021a0 <HAL_DMA_Init+0x1c8>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d036      	beq.n	8002090 <HAL_DMA_Init+0xb8>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a5f      	ldr	r2, [pc, #380]	; (80021a4 <HAL_DMA_Init+0x1cc>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d031      	beq.n	8002090 <HAL_DMA_Init+0xb8>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a5d      	ldr	r2, [pc, #372]	; (80021a8 <HAL_DMA_Init+0x1d0>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d02c      	beq.n	8002090 <HAL_DMA_Init+0xb8>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a5c      	ldr	r2, [pc, #368]	; (80021ac <HAL_DMA_Init+0x1d4>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d027      	beq.n	8002090 <HAL_DMA_Init+0xb8>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a5a      	ldr	r2, [pc, #360]	; (80021b0 <HAL_DMA_Init+0x1d8>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d022      	beq.n	8002090 <HAL_DMA_Init+0xb8>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a59      	ldr	r2, [pc, #356]	; (80021b4 <HAL_DMA_Init+0x1dc>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d01d      	beq.n	8002090 <HAL_DMA_Init+0xb8>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a57      	ldr	r2, [pc, #348]	; (80021b8 <HAL_DMA_Init+0x1e0>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d018      	beq.n	8002090 <HAL_DMA_Init+0xb8>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a56      	ldr	r2, [pc, #344]	; (80021bc <HAL_DMA_Init+0x1e4>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d013      	beq.n	8002090 <HAL_DMA_Init+0xb8>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a54      	ldr	r2, [pc, #336]	; (80021c0 <HAL_DMA_Init+0x1e8>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d00e      	beq.n	8002090 <HAL_DMA_Init+0xb8>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a53      	ldr	r2, [pc, #332]	; (80021c4 <HAL_DMA_Init+0x1ec>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d009      	beq.n	8002090 <HAL_DMA_Init+0xb8>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a51      	ldr	r2, [pc, #324]	; (80021c8 <HAL_DMA_Init+0x1f0>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d004      	beq.n	8002090 <HAL_DMA_Init+0xb8>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a50      	ldr	r2, [pc, #320]	; (80021cc <HAL_DMA_Init+0x1f4>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d101      	bne.n	8002094 <HAL_DMA_Init+0xbc>
 8002090:	2301      	movs	r3, #1
 8002092:	e000      	b.n	8002096 <HAL_DMA_Init+0xbe>
 8002094:	2300      	movs	r3, #0
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 813b 	beq.w	8002312 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2202      	movs	r2, #2
 80020a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a37      	ldr	r2, [pc, #220]	; (8002190 <HAL_DMA_Init+0x1b8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d04a      	beq.n	800214c <HAL_DMA_Init+0x174>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a36      	ldr	r2, [pc, #216]	; (8002194 <HAL_DMA_Init+0x1bc>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d045      	beq.n	800214c <HAL_DMA_Init+0x174>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a34      	ldr	r2, [pc, #208]	; (8002198 <HAL_DMA_Init+0x1c0>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d040      	beq.n	800214c <HAL_DMA_Init+0x174>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a33      	ldr	r2, [pc, #204]	; (800219c <HAL_DMA_Init+0x1c4>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d03b      	beq.n	800214c <HAL_DMA_Init+0x174>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a31      	ldr	r2, [pc, #196]	; (80021a0 <HAL_DMA_Init+0x1c8>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d036      	beq.n	800214c <HAL_DMA_Init+0x174>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a30      	ldr	r2, [pc, #192]	; (80021a4 <HAL_DMA_Init+0x1cc>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d031      	beq.n	800214c <HAL_DMA_Init+0x174>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a2e      	ldr	r2, [pc, #184]	; (80021a8 <HAL_DMA_Init+0x1d0>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d02c      	beq.n	800214c <HAL_DMA_Init+0x174>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a2d      	ldr	r2, [pc, #180]	; (80021ac <HAL_DMA_Init+0x1d4>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d027      	beq.n	800214c <HAL_DMA_Init+0x174>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a2b      	ldr	r2, [pc, #172]	; (80021b0 <HAL_DMA_Init+0x1d8>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d022      	beq.n	800214c <HAL_DMA_Init+0x174>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a2a      	ldr	r2, [pc, #168]	; (80021b4 <HAL_DMA_Init+0x1dc>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d01d      	beq.n	800214c <HAL_DMA_Init+0x174>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a28      	ldr	r2, [pc, #160]	; (80021b8 <HAL_DMA_Init+0x1e0>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d018      	beq.n	800214c <HAL_DMA_Init+0x174>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a27      	ldr	r2, [pc, #156]	; (80021bc <HAL_DMA_Init+0x1e4>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d013      	beq.n	800214c <HAL_DMA_Init+0x174>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a25      	ldr	r2, [pc, #148]	; (80021c0 <HAL_DMA_Init+0x1e8>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d00e      	beq.n	800214c <HAL_DMA_Init+0x174>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a24      	ldr	r2, [pc, #144]	; (80021c4 <HAL_DMA_Init+0x1ec>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d009      	beq.n	800214c <HAL_DMA_Init+0x174>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a22      	ldr	r2, [pc, #136]	; (80021c8 <HAL_DMA_Init+0x1f0>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d004      	beq.n	800214c <HAL_DMA_Init+0x174>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a21      	ldr	r2, [pc, #132]	; (80021cc <HAL_DMA_Init+0x1f4>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d108      	bne.n	800215e <HAL_DMA_Init+0x186>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0201 	bic.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	e007      	b.n	800216e <HAL_DMA_Init+0x196>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 0201 	bic.w	r2, r2, #1
 800216c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800216e:	e02f      	b.n	80021d0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002170:	f7ff fe0a 	bl	8001d88 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b05      	cmp	r3, #5
 800217c:	d928      	bls.n	80021d0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2220      	movs	r2, #32
 8002182:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2203      	movs	r2, #3
 8002188:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e246      	b.n	800261e <HAL_DMA_Init+0x646>
 8002190:	40020010 	.word	0x40020010
 8002194:	40020028 	.word	0x40020028
 8002198:	40020040 	.word	0x40020040
 800219c:	40020058 	.word	0x40020058
 80021a0:	40020070 	.word	0x40020070
 80021a4:	40020088 	.word	0x40020088
 80021a8:	400200a0 	.word	0x400200a0
 80021ac:	400200b8 	.word	0x400200b8
 80021b0:	40020410 	.word	0x40020410
 80021b4:	40020428 	.word	0x40020428
 80021b8:	40020440 	.word	0x40020440
 80021bc:	40020458 	.word	0x40020458
 80021c0:	40020470 	.word	0x40020470
 80021c4:	40020488 	.word	0x40020488
 80021c8:	400204a0 	.word	0x400204a0
 80021cc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1c8      	bne.n	8002170 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	4b83      	ldr	r3, [pc, #524]	; (80023f8 <HAL_DMA_Init+0x420>)
 80021ea:	4013      	ands	r3, r2
 80021ec:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80021f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002202:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800220e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	4313      	orrs	r3, r2
 800221a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	2b04      	cmp	r3, #4
 8002222:	d107      	bne.n	8002234 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222c:	4313      	orrs	r3, r2
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	4313      	orrs	r3, r2
 8002232:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002234:	4b71      	ldr	r3, [pc, #452]	; (80023fc <HAL_DMA_Init+0x424>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	4b71      	ldr	r3, [pc, #452]	; (8002400 <HAL_DMA_Init+0x428>)
 800223a:	4013      	ands	r3, r2
 800223c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002240:	d328      	bcc.n	8002294 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b28      	cmp	r3, #40	; 0x28
 8002248:	d903      	bls.n	8002252 <HAL_DMA_Init+0x27a>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b2e      	cmp	r3, #46	; 0x2e
 8002250:	d917      	bls.n	8002282 <HAL_DMA_Init+0x2aa>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b3e      	cmp	r3, #62	; 0x3e
 8002258:	d903      	bls.n	8002262 <HAL_DMA_Init+0x28a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b42      	cmp	r3, #66	; 0x42
 8002260:	d90f      	bls.n	8002282 <HAL_DMA_Init+0x2aa>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b46      	cmp	r3, #70	; 0x46
 8002268:	d903      	bls.n	8002272 <HAL_DMA_Init+0x29a>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b48      	cmp	r3, #72	; 0x48
 8002270:	d907      	bls.n	8002282 <HAL_DMA_Init+0x2aa>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b4e      	cmp	r3, #78	; 0x4e
 8002278:	d905      	bls.n	8002286 <HAL_DMA_Init+0x2ae>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b52      	cmp	r3, #82	; 0x52
 8002280:	d801      	bhi.n	8002286 <HAL_DMA_Init+0x2ae>
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <HAL_DMA_Init+0x2b0>
 8002286:	2300      	movs	r3, #0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002292:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	f023 0307 	bic.w	r3, r3, #7
 80022aa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	d117      	bne.n	80022ee <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00e      	beq.n	80022ee <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f001 ff1b 	bl	800410c <DMA_CheckFifoParam>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d008      	beq.n	80022ee <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2240      	movs	r2, #64	; 0x40
 80022e0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e197      	b.n	800261e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f001 fe56 	bl	8003fa8 <DMA_CalcBaseAndBitshift>
 80022fc:	4603      	mov	r3, r0
 80022fe:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002304:	f003 031f 	and.w	r3, r3, #31
 8002308:	223f      	movs	r2, #63	; 0x3f
 800230a:	409a      	lsls	r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	e0cd      	b.n	80024ae <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a3b      	ldr	r2, [pc, #236]	; (8002404 <HAL_DMA_Init+0x42c>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d022      	beq.n	8002362 <HAL_DMA_Init+0x38a>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a39      	ldr	r2, [pc, #228]	; (8002408 <HAL_DMA_Init+0x430>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d01d      	beq.n	8002362 <HAL_DMA_Init+0x38a>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a38      	ldr	r2, [pc, #224]	; (800240c <HAL_DMA_Init+0x434>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d018      	beq.n	8002362 <HAL_DMA_Init+0x38a>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a36      	ldr	r2, [pc, #216]	; (8002410 <HAL_DMA_Init+0x438>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d013      	beq.n	8002362 <HAL_DMA_Init+0x38a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a35      	ldr	r2, [pc, #212]	; (8002414 <HAL_DMA_Init+0x43c>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d00e      	beq.n	8002362 <HAL_DMA_Init+0x38a>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a33      	ldr	r2, [pc, #204]	; (8002418 <HAL_DMA_Init+0x440>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d009      	beq.n	8002362 <HAL_DMA_Init+0x38a>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a32      	ldr	r2, [pc, #200]	; (800241c <HAL_DMA_Init+0x444>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d004      	beq.n	8002362 <HAL_DMA_Init+0x38a>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a30      	ldr	r2, [pc, #192]	; (8002420 <HAL_DMA_Init+0x448>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d101      	bne.n	8002366 <HAL_DMA_Init+0x38e>
 8002362:	2301      	movs	r3, #1
 8002364:	e000      	b.n	8002368 <HAL_DMA_Init+0x390>
 8002366:	2300      	movs	r3, #0
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 8097 	beq.w	800249c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a24      	ldr	r2, [pc, #144]	; (8002404 <HAL_DMA_Init+0x42c>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d021      	beq.n	80023bc <HAL_DMA_Init+0x3e4>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a22      	ldr	r2, [pc, #136]	; (8002408 <HAL_DMA_Init+0x430>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d01c      	beq.n	80023bc <HAL_DMA_Init+0x3e4>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a21      	ldr	r2, [pc, #132]	; (800240c <HAL_DMA_Init+0x434>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d017      	beq.n	80023bc <HAL_DMA_Init+0x3e4>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a1f      	ldr	r2, [pc, #124]	; (8002410 <HAL_DMA_Init+0x438>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d012      	beq.n	80023bc <HAL_DMA_Init+0x3e4>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a1e      	ldr	r2, [pc, #120]	; (8002414 <HAL_DMA_Init+0x43c>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d00d      	beq.n	80023bc <HAL_DMA_Init+0x3e4>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a1c      	ldr	r2, [pc, #112]	; (8002418 <HAL_DMA_Init+0x440>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d008      	beq.n	80023bc <HAL_DMA_Init+0x3e4>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a1b      	ldr	r2, [pc, #108]	; (800241c <HAL_DMA_Init+0x444>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d003      	beq.n	80023bc <HAL_DMA_Init+0x3e4>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a19      	ldr	r2, [pc, #100]	; (8002420 <HAL_DMA_Init+0x448>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2202      	movs	r2, #2
 80023ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	4b12      	ldr	r3, [pc, #72]	; (8002424 <HAL_DMA_Init+0x44c>)
 80023da:	4013      	ands	r3, r2
 80023dc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b40      	cmp	r3, #64	; 0x40
 80023e4:	d020      	beq.n	8002428 <HAL_DMA_Init+0x450>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2b80      	cmp	r3, #128	; 0x80
 80023ec:	d102      	bne.n	80023f4 <HAL_DMA_Init+0x41c>
 80023ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023f2:	e01a      	b.n	800242a <HAL_DMA_Init+0x452>
 80023f4:	2300      	movs	r3, #0
 80023f6:	e018      	b.n	800242a <HAL_DMA_Init+0x452>
 80023f8:	fe10803f 	.word	0xfe10803f
 80023fc:	5c001000 	.word	0x5c001000
 8002400:	ffff0000 	.word	0xffff0000
 8002404:	58025408 	.word	0x58025408
 8002408:	5802541c 	.word	0x5802541c
 800240c:	58025430 	.word	0x58025430
 8002410:	58025444 	.word	0x58025444
 8002414:	58025458 	.word	0x58025458
 8002418:	5802546c 	.word	0x5802546c
 800241c:	58025480 	.word	0x58025480
 8002420:	58025494 	.word	0x58025494
 8002424:	fffe000f 	.word	0xfffe000f
 8002428:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	68d2      	ldr	r2, [r2, #12]
 800242e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002430:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002438:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002440:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002448:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002450:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002458:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	4313      	orrs	r3, r2
 800245e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	461a      	mov	r2, r3
 800246e:	4b6e      	ldr	r3, [pc, #440]	; (8002628 <HAL_DMA_Init+0x650>)
 8002470:	4413      	add	r3, r2
 8002472:	4a6e      	ldr	r2, [pc, #440]	; (800262c <HAL_DMA_Init+0x654>)
 8002474:	fba2 2303 	umull	r2, r3, r2, r3
 8002478:	091b      	lsrs	r3, r3, #4
 800247a:	009a      	lsls	r2, r3, #2
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f001 fd91 	bl	8003fa8 <DMA_CalcBaseAndBitshift>
 8002486:	4603      	mov	r3, r0
 8002488:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248e:	f003 031f 	and.w	r3, r3, #31
 8002492:	2201      	movs	r2, #1
 8002494:	409a      	lsls	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	e008      	b.n	80024ae <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2240      	movs	r2, #64	; 0x40
 80024a0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2203      	movs	r2, #3
 80024a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e0b7      	b.n	800261e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a5f      	ldr	r2, [pc, #380]	; (8002630 <HAL_DMA_Init+0x658>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d072      	beq.n	800259e <HAL_DMA_Init+0x5c6>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a5d      	ldr	r2, [pc, #372]	; (8002634 <HAL_DMA_Init+0x65c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d06d      	beq.n	800259e <HAL_DMA_Init+0x5c6>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a5c      	ldr	r2, [pc, #368]	; (8002638 <HAL_DMA_Init+0x660>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d068      	beq.n	800259e <HAL_DMA_Init+0x5c6>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a5a      	ldr	r2, [pc, #360]	; (800263c <HAL_DMA_Init+0x664>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d063      	beq.n	800259e <HAL_DMA_Init+0x5c6>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a59      	ldr	r2, [pc, #356]	; (8002640 <HAL_DMA_Init+0x668>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d05e      	beq.n	800259e <HAL_DMA_Init+0x5c6>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a57      	ldr	r2, [pc, #348]	; (8002644 <HAL_DMA_Init+0x66c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d059      	beq.n	800259e <HAL_DMA_Init+0x5c6>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a56      	ldr	r2, [pc, #344]	; (8002648 <HAL_DMA_Init+0x670>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d054      	beq.n	800259e <HAL_DMA_Init+0x5c6>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a54      	ldr	r2, [pc, #336]	; (800264c <HAL_DMA_Init+0x674>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d04f      	beq.n	800259e <HAL_DMA_Init+0x5c6>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a53      	ldr	r2, [pc, #332]	; (8002650 <HAL_DMA_Init+0x678>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d04a      	beq.n	800259e <HAL_DMA_Init+0x5c6>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a51      	ldr	r2, [pc, #324]	; (8002654 <HAL_DMA_Init+0x67c>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d045      	beq.n	800259e <HAL_DMA_Init+0x5c6>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a50      	ldr	r2, [pc, #320]	; (8002658 <HAL_DMA_Init+0x680>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d040      	beq.n	800259e <HAL_DMA_Init+0x5c6>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a4e      	ldr	r2, [pc, #312]	; (800265c <HAL_DMA_Init+0x684>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d03b      	beq.n	800259e <HAL_DMA_Init+0x5c6>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a4d      	ldr	r2, [pc, #308]	; (8002660 <HAL_DMA_Init+0x688>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d036      	beq.n	800259e <HAL_DMA_Init+0x5c6>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a4b      	ldr	r2, [pc, #300]	; (8002664 <HAL_DMA_Init+0x68c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d031      	beq.n	800259e <HAL_DMA_Init+0x5c6>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a4a      	ldr	r2, [pc, #296]	; (8002668 <HAL_DMA_Init+0x690>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d02c      	beq.n	800259e <HAL_DMA_Init+0x5c6>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a48      	ldr	r2, [pc, #288]	; (800266c <HAL_DMA_Init+0x694>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d027      	beq.n	800259e <HAL_DMA_Init+0x5c6>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a47      	ldr	r2, [pc, #284]	; (8002670 <HAL_DMA_Init+0x698>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d022      	beq.n	800259e <HAL_DMA_Init+0x5c6>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a45      	ldr	r2, [pc, #276]	; (8002674 <HAL_DMA_Init+0x69c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d01d      	beq.n	800259e <HAL_DMA_Init+0x5c6>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a44      	ldr	r2, [pc, #272]	; (8002678 <HAL_DMA_Init+0x6a0>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d018      	beq.n	800259e <HAL_DMA_Init+0x5c6>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a42      	ldr	r2, [pc, #264]	; (800267c <HAL_DMA_Init+0x6a4>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d013      	beq.n	800259e <HAL_DMA_Init+0x5c6>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a41      	ldr	r2, [pc, #260]	; (8002680 <HAL_DMA_Init+0x6a8>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d00e      	beq.n	800259e <HAL_DMA_Init+0x5c6>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a3f      	ldr	r2, [pc, #252]	; (8002684 <HAL_DMA_Init+0x6ac>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d009      	beq.n	800259e <HAL_DMA_Init+0x5c6>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a3e      	ldr	r2, [pc, #248]	; (8002688 <HAL_DMA_Init+0x6b0>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d004      	beq.n	800259e <HAL_DMA_Init+0x5c6>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a3c      	ldr	r2, [pc, #240]	; (800268c <HAL_DMA_Init+0x6b4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d101      	bne.n	80025a2 <HAL_DMA_Init+0x5ca>
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <HAL_DMA_Init+0x5cc>
 80025a2:	2300      	movs	r3, #0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d032      	beq.n	800260e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f001 fe2b 	bl	8004204 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	2b80      	cmp	r3, #128	; 0x80
 80025b4:	d102      	bne.n	80025bc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80025d0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d010      	beq.n	80025fc <HAL_DMA_Init+0x624>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d80c      	bhi.n	80025fc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f001 fea8 	bl	8004338 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	e008      	b.n	800260e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	a7fdabf8 	.word	0xa7fdabf8
 800262c:	cccccccd 	.word	0xcccccccd
 8002630:	40020010 	.word	0x40020010
 8002634:	40020028 	.word	0x40020028
 8002638:	40020040 	.word	0x40020040
 800263c:	40020058 	.word	0x40020058
 8002640:	40020070 	.word	0x40020070
 8002644:	40020088 	.word	0x40020088
 8002648:	400200a0 	.word	0x400200a0
 800264c:	400200b8 	.word	0x400200b8
 8002650:	40020410 	.word	0x40020410
 8002654:	40020428 	.word	0x40020428
 8002658:	40020440 	.word	0x40020440
 800265c:	40020458 	.word	0x40020458
 8002660:	40020470 	.word	0x40020470
 8002664:	40020488 	.word	0x40020488
 8002668:	400204a0 	.word	0x400204a0
 800266c:	400204b8 	.word	0x400204b8
 8002670:	58025408 	.word	0x58025408
 8002674:	5802541c 	.word	0x5802541c
 8002678:	58025430 	.word	0x58025430
 800267c:	58025444 	.word	0x58025444
 8002680:	58025458 	.word	0x58025458
 8002684:	5802546c 	.word	0x5802546c
 8002688:	58025480 	.word	0x58025480
 800268c:	58025494 	.word	0x58025494

08002690 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002698:	f7ff fb76 	bl	8001d88 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e2dc      	b.n	8002c62 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d008      	beq.n	80026c6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2280      	movs	r2, #128	; 0x80
 80026b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e2cd      	b.n	8002c62 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a76      	ldr	r2, [pc, #472]	; (80028a4 <HAL_DMA_Abort+0x214>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d04a      	beq.n	8002766 <HAL_DMA_Abort+0xd6>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a74      	ldr	r2, [pc, #464]	; (80028a8 <HAL_DMA_Abort+0x218>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d045      	beq.n	8002766 <HAL_DMA_Abort+0xd6>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a73      	ldr	r2, [pc, #460]	; (80028ac <HAL_DMA_Abort+0x21c>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d040      	beq.n	8002766 <HAL_DMA_Abort+0xd6>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a71      	ldr	r2, [pc, #452]	; (80028b0 <HAL_DMA_Abort+0x220>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d03b      	beq.n	8002766 <HAL_DMA_Abort+0xd6>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a70      	ldr	r2, [pc, #448]	; (80028b4 <HAL_DMA_Abort+0x224>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d036      	beq.n	8002766 <HAL_DMA_Abort+0xd6>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a6e      	ldr	r2, [pc, #440]	; (80028b8 <HAL_DMA_Abort+0x228>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d031      	beq.n	8002766 <HAL_DMA_Abort+0xd6>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a6d      	ldr	r2, [pc, #436]	; (80028bc <HAL_DMA_Abort+0x22c>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d02c      	beq.n	8002766 <HAL_DMA_Abort+0xd6>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a6b      	ldr	r2, [pc, #428]	; (80028c0 <HAL_DMA_Abort+0x230>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d027      	beq.n	8002766 <HAL_DMA_Abort+0xd6>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a6a      	ldr	r2, [pc, #424]	; (80028c4 <HAL_DMA_Abort+0x234>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d022      	beq.n	8002766 <HAL_DMA_Abort+0xd6>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a68      	ldr	r2, [pc, #416]	; (80028c8 <HAL_DMA_Abort+0x238>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d01d      	beq.n	8002766 <HAL_DMA_Abort+0xd6>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a67      	ldr	r2, [pc, #412]	; (80028cc <HAL_DMA_Abort+0x23c>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d018      	beq.n	8002766 <HAL_DMA_Abort+0xd6>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a65      	ldr	r2, [pc, #404]	; (80028d0 <HAL_DMA_Abort+0x240>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d013      	beq.n	8002766 <HAL_DMA_Abort+0xd6>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a64      	ldr	r2, [pc, #400]	; (80028d4 <HAL_DMA_Abort+0x244>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d00e      	beq.n	8002766 <HAL_DMA_Abort+0xd6>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a62      	ldr	r2, [pc, #392]	; (80028d8 <HAL_DMA_Abort+0x248>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d009      	beq.n	8002766 <HAL_DMA_Abort+0xd6>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a61      	ldr	r2, [pc, #388]	; (80028dc <HAL_DMA_Abort+0x24c>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d004      	beq.n	8002766 <HAL_DMA_Abort+0xd6>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a5f      	ldr	r2, [pc, #380]	; (80028e0 <HAL_DMA_Abort+0x250>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d101      	bne.n	800276a <HAL_DMA_Abort+0xda>
 8002766:	2301      	movs	r3, #1
 8002768:	e000      	b.n	800276c <HAL_DMA_Abort+0xdc>
 800276a:	2300      	movs	r3, #0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d013      	beq.n	8002798 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 021e 	bic.w	r2, r2, #30
 800277e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	695a      	ldr	r2, [r3, #20]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800278e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	617b      	str	r3, [r7, #20]
 8002796:	e00a      	b.n	80027ae <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 020e 	bic.w	r2, r2, #14
 80027a6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a3c      	ldr	r2, [pc, #240]	; (80028a4 <HAL_DMA_Abort+0x214>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d072      	beq.n	800289e <HAL_DMA_Abort+0x20e>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a3a      	ldr	r2, [pc, #232]	; (80028a8 <HAL_DMA_Abort+0x218>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d06d      	beq.n	800289e <HAL_DMA_Abort+0x20e>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a39      	ldr	r2, [pc, #228]	; (80028ac <HAL_DMA_Abort+0x21c>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d068      	beq.n	800289e <HAL_DMA_Abort+0x20e>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a37      	ldr	r2, [pc, #220]	; (80028b0 <HAL_DMA_Abort+0x220>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d063      	beq.n	800289e <HAL_DMA_Abort+0x20e>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a36      	ldr	r2, [pc, #216]	; (80028b4 <HAL_DMA_Abort+0x224>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d05e      	beq.n	800289e <HAL_DMA_Abort+0x20e>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a34      	ldr	r2, [pc, #208]	; (80028b8 <HAL_DMA_Abort+0x228>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d059      	beq.n	800289e <HAL_DMA_Abort+0x20e>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a33      	ldr	r2, [pc, #204]	; (80028bc <HAL_DMA_Abort+0x22c>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d054      	beq.n	800289e <HAL_DMA_Abort+0x20e>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a31      	ldr	r2, [pc, #196]	; (80028c0 <HAL_DMA_Abort+0x230>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d04f      	beq.n	800289e <HAL_DMA_Abort+0x20e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a30      	ldr	r2, [pc, #192]	; (80028c4 <HAL_DMA_Abort+0x234>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d04a      	beq.n	800289e <HAL_DMA_Abort+0x20e>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a2e      	ldr	r2, [pc, #184]	; (80028c8 <HAL_DMA_Abort+0x238>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d045      	beq.n	800289e <HAL_DMA_Abort+0x20e>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a2d      	ldr	r2, [pc, #180]	; (80028cc <HAL_DMA_Abort+0x23c>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d040      	beq.n	800289e <HAL_DMA_Abort+0x20e>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a2b      	ldr	r2, [pc, #172]	; (80028d0 <HAL_DMA_Abort+0x240>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d03b      	beq.n	800289e <HAL_DMA_Abort+0x20e>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a2a      	ldr	r2, [pc, #168]	; (80028d4 <HAL_DMA_Abort+0x244>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d036      	beq.n	800289e <HAL_DMA_Abort+0x20e>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a28      	ldr	r2, [pc, #160]	; (80028d8 <HAL_DMA_Abort+0x248>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d031      	beq.n	800289e <HAL_DMA_Abort+0x20e>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a27      	ldr	r2, [pc, #156]	; (80028dc <HAL_DMA_Abort+0x24c>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d02c      	beq.n	800289e <HAL_DMA_Abort+0x20e>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a25      	ldr	r2, [pc, #148]	; (80028e0 <HAL_DMA_Abort+0x250>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d027      	beq.n	800289e <HAL_DMA_Abort+0x20e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a24      	ldr	r2, [pc, #144]	; (80028e4 <HAL_DMA_Abort+0x254>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d022      	beq.n	800289e <HAL_DMA_Abort+0x20e>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a22      	ldr	r2, [pc, #136]	; (80028e8 <HAL_DMA_Abort+0x258>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d01d      	beq.n	800289e <HAL_DMA_Abort+0x20e>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a21      	ldr	r2, [pc, #132]	; (80028ec <HAL_DMA_Abort+0x25c>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d018      	beq.n	800289e <HAL_DMA_Abort+0x20e>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a1f      	ldr	r2, [pc, #124]	; (80028f0 <HAL_DMA_Abort+0x260>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d013      	beq.n	800289e <HAL_DMA_Abort+0x20e>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a1e      	ldr	r2, [pc, #120]	; (80028f4 <HAL_DMA_Abort+0x264>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d00e      	beq.n	800289e <HAL_DMA_Abort+0x20e>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a1c      	ldr	r2, [pc, #112]	; (80028f8 <HAL_DMA_Abort+0x268>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d009      	beq.n	800289e <HAL_DMA_Abort+0x20e>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a1b      	ldr	r2, [pc, #108]	; (80028fc <HAL_DMA_Abort+0x26c>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d004      	beq.n	800289e <HAL_DMA_Abort+0x20e>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a19      	ldr	r2, [pc, #100]	; (8002900 <HAL_DMA_Abort+0x270>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d132      	bne.n	8002904 <HAL_DMA_Abort+0x274>
 800289e:	2301      	movs	r3, #1
 80028a0:	e031      	b.n	8002906 <HAL_DMA_Abort+0x276>
 80028a2:	bf00      	nop
 80028a4:	40020010 	.word	0x40020010
 80028a8:	40020028 	.word	0x40020028
 80028ac:	40020040 	.word	0x40020040
 80028b0:	40020058 	.word	0x40020058
 80028b4:	40020070 	.word	0x40020070
 80028b8:	40020088 	.word	0x40020088
 80028bc:	400200a0 	.word	0x400200a0
 80028c0:	400200b8 	.word	0x400200b8
 80028c4:	40020410 	.word	0x40020410
 80028c8:	40020428 	.word	0x40020428
 80028cc:	40020440 	.word	0x40020440
 80028d0:	40020458 	.word	0x40020458
 80028d4:	40020470 	.word	0x40020470
 80028d8:	40020488 	.word	0x40020488
 80028dc:	400204a0 	.word	0x400204a0
 80028e0:	400204b8 	.word	0x400204b8
 80028e4:	58025408 	.word	0x58025408
 80028e8:	5802541c 	.word	0x5802541c
 80028ec:	58025430 	.word	0x58025430
 80028f0:	58025444 	.word	0x58025444
 80028f4:	58025458 	.word	0x58025458
 80028f8:	5802546c 	.word	0x5802546c
 80028fc:	58025480 	.word	0x58025480
 8002900:	58025494 	.word	0x58025494
 8002904:	2300      	movs	r3, #0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d007      	beq.n	800291a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002914:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002918:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a6d      	ldr	r2, [pc, #436]	; (8002ad4 <HAL_DMA_Abort+0x444>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d04a      	beq.n	80029ba <HAL_DMA_Abort+0x32a>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a6b      	ldr	r2, [pc, #428]	; (8002ad8 <HAL_DMA_Abort+0x448>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d045      	beq.n	80029ba <HAL_DMA_Abort+0x32a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a6a      	ldr	r2, [pc, #424]	; (8002adc <HAL_DMA_Abort+0x44c>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d040      	beq.n	80029ba <HAL_DMA_Abort+0x32a>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a68      	ldr	r2, [pc, #416]	; (8002ae0 <HAL_DMA_Abort+0x450>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d03b      	beq.n	80029ba <HAL_DMA_Abort+0x32a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a67      	ldr	r2, [pc, #412]	; (8002ae4 <HAL_DMA_Abort+0x454>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d036      	beq.n	80029ba <HAL_DMA_Abort+0x32a>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a65      	ldr	r2, [pc, #404]	; (8002ae8 <HAL_DMA_Abort+0x458>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d031      	beq.n	80029ba <HAL_DMA_Abort+0x32a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a64      	ldr	r2, [pc, #400]	; (8002aec <HAL_DMA_Abort+0x45c>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d02c      	beq.n	80029ba <HAL_DMA_Abort+0x32a>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a62      	ldr	r2, [pc, #392]	; (8002af0 <HAL_DMA_Abort+0x460>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d027      	beq.n	80029ba <HAL_DMA_Abort+0x32a>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a61      	ldr	r2, [pc, #388]	; (8002af4 <HAL_DMA_Abort+0x464>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d022      	beq.n	80029ba <HAL_DMA_Abort+0x32a>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a5f      	ldr	r2, [pc, #380]	; (8002af8 <HAL_DMA_Abort+0x468>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d01d      	beq.n	80029ba <HAL_DMA_Abort+0x32a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a5e      	ldr	r2, [pc, #376]	; (8002afc <HAL_DMA_Abort+0x46c>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d018      	beq.n	80029ba <HAL_DMA_Abort+0x32a>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a5c      	ldr	r2, [pc, #368]	; (8002b00 <HAL_DMA_Abort+0x470>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d013      	beq.n	80029ba <HAL_DMA_Abort+0x32a>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a5b      	ldr	r2, [pc, #364]	; (8002b04 <HAL_DMA_Abort+0x474>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d00e      	beq.n	80029ba <HAL_DMA_Abort+0x32a>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a59      	ldr	r2, [pc, #356]	; (8002b08 <HAL_DMA_Abort+0x478>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d009      	beq.n	80029ba <HAL_DMA_Abort+0x32a>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a58      	ldr	r2, [pc, #352]	; (8002b0c <HAL_DMA_Abort+0x47c>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d004      	beq.n	80029ba <HAL_DMA_Abort+0x32a>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a56      	ldr	r2, [pc, #344]	; (8002b10 <HAL_DMA_Abort+0x480>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d108      	bne.n	80029cc <HAL_DMA_Abort+0x33c>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 0201 	bic.w	r2, r2, #1
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	e007      	b.n	80029dc <HAL_DMA_Abort+0x34c>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0201 	bic.w	r2, r2, #1
 80029da:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80029dc:	e013      	b.n	8002a06 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029de:	f7ff f9d3 	bl	8001d88 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b05      	cmp	r3, #5
 80029ea:	d90c      	bls.n	8002a06 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2220      	movs	r2, #32
 80029f0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2203      	movs	r2, #3
 80029fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e12d      	b.n	8002c62 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1e5      	bne.n	80029de <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a2f      	ldr	r2, [pc, #188]	; (8002ad4 <HAL_DMA_Abort+0x444>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d04a      	beq.n	8002ab2 <HAL_DMA_Abort+0x422>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a2d      	ldr	r2, [pc, #180]	; (8002ad8 <HAL_DMA_Abort+0x448>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d045      	beq.n	8002ab2 <HAL_DMA_Abort+0x422>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a2c      	ldr	r2, [pc, #176]	; (8002adc <HAL_DMA_Abort+0x44c>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d040      	beq.n	8002ab2 <HAL_DMA_Abort+0x422>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a2a      	ldr	r2, [pc, #168]	; (8002ae0 <HAL_DMA_Abort+0x450>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d03b      	beq.n	8002ab2 <HAL_DMA_Abort+0x422>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a29      	ldr	r2, [pc, #164]	; (8002ae4 <HAL_DMA_Abort+0x454>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d036      	beq.n	8002ab2 <HAL_DMA_Abort+0x422>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a27      	ldr	r2, [pc, #156]	; (8002ae8 <HAL_DMA_Abort+0x458>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d031      	beq.n	8002ab2 <HAL_DMA_Abort+0x422>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a26      	ldr	r2, [pc, #152]	; (8002aec <HAL_DMA_Abort+0x45c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d02c      	beq.n	8002ab2 <HAL_DMA_Abort+0x422>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a24      	ldr	r2, [pc, #144]	; (8002af0 <HAL_DMA_Abort+0x460>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d027      	beq.n	8002ab2 <HAL_DMA_Abort+0x422>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a23      	ldr	r2, [pc, #140]	; (8002af4 <HAL_DMA_Abort+0x464>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d022      	beq.n	8002ab2 <HAL_DMA_Abort+0x422>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a21      	ldr	r2, [pc, #132]	; (8002af8 <HAL_DMA_Abort+0x468>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d01d      	beq.n	8002ab2 <HAL_DMA_Abort+0x422>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a20      	ldr	r2, [pc, #128]	; (8002afc <HAL_DMA_Abort+0x46c>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d018      	beq.n	8002ab2 <HAL_DMA_Abort+0x422>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a1e      	ldr	r2, [pc, #120]	; (8002b00 <HAL_DMA_Abort+0x470>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d013      	beq.n	8002ab2 <HAL_DMA_Abort+0x422>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a1d      	ldr	r2, [pc, #116]	; (8002b04 <HAL_DMA_Abort+0x474>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d00e      	beq.n	8002ab2 <HAL_DMA_Abort+0x422>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a1b      	ldr	r2, [pc, #108]	; (8002b08 <HAL_DMA_Abort+0x478>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d009      	beq.n	8002ab2 <HAL_DMA_Abort+0x422>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a1a      	ldr	r2, [pc, #104]	; (8002b0c <HAL_DMA_Abort+0x47c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d004      	beq.n	8002ab2 <HAL_DMA_Abort+0x422>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a18      	ldr	r2, [pc, #96]	; (8002b10 <HAL_DMA_Abort+0x480>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d101      	bne.n	8002ab6 <HAL_DMA_Abort+0x426>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <HAL_DMA_Abort+0x428>
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d02b      	beq.n	8002b14 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac6:	f003 031f 	and.w	r3, r3, #31
 8002aca:	223f      	movs	r2, #63	; 0x3f
 8002acc:	409a      	lsls	r2, r3
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	609a      	str	r2, [r3, #8]
 8002ad2:	e02a      	b.n	8002b2a <HAL_DMA_Abort+0x49a>
 8002ad4:	40020010 	.word	0x40020010
 8002ad8:	40020028 	.word	0x40020028
 8002adc:	40020040 	.word	0x40020040
 8002ae0:	40020058 	.word	0x40020058
 8002ae4:	40020070 	.word	0x40020070
 8002ae8:	40020088 	.word	0x40020088
 8002aec:	400200a0 	.word	0x400200a0
 8002af0:	400200b8 	.word	0x400200b8
 8002af4:	40020410 	.word	0x40020410
 8002af8:	40020428 	.word	0x40020428
 8002afc:	40020440 	.word	0x40020440
 8002b00:	40020458 	.word	0x40020458
 8002b04:	40020470 	.word	0x40020470
 8002b08:	40020488 	.word	0x40020488
 8002b0c:	400204a0 	.word	0x400204a0
 8002b10:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b18:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1e:	f003 031f 	and.w	r3, r3, #31
 8002b22:	2201      	movs	r2, #1
 8002b24:	409a      	lsls	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a4f      	ldr	r2, [pc, #316]	; (8002c6c <HAL_DMA_Abort+0x5dc>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d072      	beq.n	8002c1a <HAL_DMA_Abort+0x58a>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a4d      	ldr	r2, [pc, #308]	; (8002c70 <HAL_DMA_Abort+0x5e0>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d06d      	beq.n	8002c1a <HAL_DMA_Abort+0x58a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a4c      	ldr	r2, [pc, #304]	; (8002c74 <HAL_DMA_Abort+0x5e4>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d068      	beq.n	8002c1a <HAL_DMA_Abort+0x58a>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a4a      	ldr	r2, [pc, #296]	; (8002c78 <HAL_DMA_Abort+0x5e8>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d063      	beq.n	8002c1a <HAL_DMA_Abort+0x58a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a49      	ldr	r2, [pc, #292]	; (8002c7c <HAL_DMA_Abort+0x5ec>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d05e      	beq.n	8002c1a <HAL_DMA_Abort+0x58a>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a47      	ldr	r2, [pc, #284]	; (8002c80 <HAL_DMA_Abort+0x5f0>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d059      	beq.n	8002c1a <HAL_DMA_Abort+0x58a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a46      	ldr	r2, [pc, #280]	; (8002c84 <HAL_DMA_Abort+0x5f4>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d054      	beq.n	8002c1a <HAL_DMA_Abort+0x58a>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a44      	ldr	r2, [pc, #272]	; (8002c88 <HAL_DMA_Abort+0x5f8>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d04f      	beq.n	8002c1a <HAL_DMA_Abort+0x58a>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a43      	ldr	r2, [pc, #268]	; (8002c8c <HAL_DMA_Abort+0x5fc>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d04a      	beq.n	8002c1a <HAL_DMA_Abort+0x58a>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a41      	ldr	r2, [pc, #260]	; (8002c90 <HAL_DMA_Abort+0x600>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d045      	beq.n	8002c1a <HAL_DMA_Abort+0x58a>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a40      	ldr	r2, [pc, #256]	; (8002c94 <HAL_DMA_Abort+0x604>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d040      	beq.n	8002c1a <HAL_DMA_Abort+0x58a>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a3e      	ldr	r2, [pc, #248]	; (8002c98 <HAL_DMA_Abort+0x608>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d03b      	beq.n	8002c1a <HAL_DMA_Abort+0x58a>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a3d      	ldr	r2, [pc, #244]	; (8002c9c <HAL_DMA_Abort+0x60c>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d036      	beq.n	8002c1a <HAL_DMA_Abort+0x58a>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a3b      	ldr	r2, [pc, #236]	; (8002ca0 <HAL_DMA_Abort+0x610>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d031      	beq.n	8002c1a <HAL_DMA_Abort+0x58a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a3a      	ldr	r2, [pc, #232]	; (8002ca4 <HAL_DMA_Abort+0x614>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d02c      	beq.n	8002c1a <HAL_DMA_Abort+0x58a>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a38      	ldr	r2, [pc, #224]	; (8002ca8 <HAL_DMA_Abort+0x618>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d027      	beq.n	8002c1a <HAL_DMA_Abort+0x58a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a37      	ldr	r2, [pc, #220]	; (8002cac <HAL_DMA_Abort+0x61c>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d022      	beq.n	8002c1a <HAL_DMA_Abort+0x58a>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a35      	ldr	r2, [pc, #212]	; (8002cb0 <HAL_DMA_Abort+0x620>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d01d      	beq.n	8002c1a <HAL_DMA_Abort+0x58a>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a34      	ldr	r2, [pc, #208]	; (8002cb4 <HAL_DMA_Abort+0x624>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d018      	beq.n	8002c1a <HAL_DMA_Abort+0x58a>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a32      	ldr	r2, [pc, #200]	; (8002cb8 <HAL_DMA_Abort+0x628>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d013      	beq.n	8002c1a <HAL_DMA_Abort+0x58a>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a31      	ldr	r2, [pc, #196]	; (8002cbc <HAL_DMA_Abort+0x62c>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d00e      	beq.n	8002c1a <HAL_DMA_Abort+0x58a>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a2f      	ldr	r2, [pc, #188]	; (8002cc0 <HAL_DMA_Abort+0x630>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d009      	beq.n	8002c1a <HAL_DMA_Abort+0x58a>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a2e      	ldr	r2, [pc, #184]	; (8002cc4 <HAL_DMA_Abort+0x634>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d004      	beq.n	8002c1a <HAL_DMA_Abort+0x58a>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a2c      	ldr	r2, [pc, #176]	; (8002cc8 <HAL_DMA_Abort+0x638>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d101      	bne.n	8002c1e <HAL_DMA_Abort+0x58e>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <HAL_DMA_Abort+0x590>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d015      	beq.n	8002c50 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002c2c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00c      	beq.n	8002c50 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c44:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002c4e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40020010 	.word	0x40020010
 8002c70:	40020028 	.word	0x40020028
 8002c74:	40020040 	.word	0x40020040
 8002c78:	40020058 	.word	0x40020058
 8002c7c:	40020070 	.word	0x40020070
 8002c80:	40020088 	.word	0x40020088
 8002c84:	400200a0 	.word	0x400200a0
 8002c88:	400200b8 	.word	0x400200b8
 8002c8c:	40020410 	.word	0x40020410
 8002c90:	40020428 	.word	0x40020428
 8002c94:	40020440 	.word	0x40020440
 8002c98:	40020458 	.word	0x40020458
 8002c9c:	40020470 	.word	0x40020470
 8002ca0:	40020488 	.word	0x40020488
 8002ca4:	400204a0 	.word	0x400204a0
 8002ca8:	400204b8 	.word	0x400204b8
 8002cac:	58025408 	.word	0x58025408
 8002cb0:	5802541c 	.word	0x5802541c
 8002cb4:	58025430 	.word	0x58025430
 8002cb8:	58025444 	.word	0x58025444
 8002cbc:	58025458 	.word	0x58025458
 8002cc0:	5802546c 	.word	0x5802546c
 8002cc4:	58025480 	.word	0x58025480
 8002cc8:	58025494 	.word	0x58025494

08002ccc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e205      	b.n	80030ea <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d004      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2280      	movs	r2, #128	; 0x80
 8002cee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e1fa      	b.n	80030ea <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a8c      	ldr	r2, [pc, #560]	; (8002f2c <HAL_DMA_Abort_IT+0x260>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d04a      	beq.n	8002d94 <HAL_DMA_Abort_IT+0xc8>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a8b      	ldr	r2, [pc, #556]	; (8002f30 <HAL_DMA_Abort_IT+0x264>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d045      	beq.n	8002d94 <HAL_DMA_Abort_IT+0xc8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a89      	ldr	r2, [pc, #548]	; (8002f34 <HAL_DMA_Abort_IT+0x268>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d040      	beq.n	8002d94 <HAL_DMA_Abort_IT+0xc8>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a88      	ldr	r2, [pc, #544]	; (8002f38 <HAL_DMA_Abort_IT+0x26c>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d03b      	beq.n	8002d94 <HAL_DMA_Abort_IT+0xc8>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a86      	ldr	r2, [pc, #536]	; (8002f3c <HAL_DMA_Abort_IT+0x270>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d036      	beq.n	8002d94 <HAL_DMA_Abort_IT+0xc8>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a85      	ldr	r2, [pc, #532]	; (8002f40 <HAL_DMA_Abort_IT+0x274>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d031      	beq.n	8002d94 <HAL_DMA_Abort_IT+0xc8>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a83      	ldr	r2, [pc, #524]	; (8002f44 <HAL_DMA_Abort_IT+0x278>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d02c      	beq.n	8002d94 <HAL_DMA_Abort_IT+0xc8>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a82      	ldr	r2, [pc, #520]	; (8002f48 <HAL_DMA_Abort_IT+0x27c>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d027      	beq.n	8002d94 <HAL_DMA_Abort_IT+0xc8>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a80      	ldr	r2, [pc, #512]	; (8002f4c <HAL_DMA_Abort_IT+0x280>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d022      	beq.n	8002d94 <HAL_DMA_Abort_IT+0xc8>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a7f      	ldr	r2, [pc, #508]	; (8002f50 <HAL_DMA_Abort_IT+0x284>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d01d      	beq.n	8002d94 <HAL_DMA_Abort_IT+0xc8>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a7d      	ldr	r2, [pc, #500]	; (8002f54 <HAL_DMA_Abort_IT+0x288>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d018      	beq.n	8002d94 <HAL_DMA_Abort_IT+0xc8>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a7c      	ldr	r2, [pc, #496]	; (8002f58 <HAL_DMA_Abort_IT+0x28c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d013      	beq.n	8002d94 <HAL_DMA_Abort_IT+0xc8>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a7a      	ldr	r2, [pc, #488]	; (8002f5c <HAL_DMA_Abort_IT+0x290>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d00e      	beq.n	8002d94 <HAL_DMA_Abort_IT+0xc8>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a79      	ldr	r2, [pc, #484]	; (8002f60 <HAL_DMA_Abort_IT+0x294>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d009      	beq.n	8002d94 <HAL_DMA_Abort_IT+0xc8>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a77      	ldr	r2, [pc, #476]	; (8002f64 <HAL_DMA_Abort_IT+0x298>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d004      	beq.n	8002d94 <HAL_DMA_Abort_IT+0xc8>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a76      	ldr	r2, [pc, #472]	; (8002f68 <HAL_DMA_Abort_IT+0x29c>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d101      	bne.n	8002d98 <HAL_DMA_Abort_IT+0xcc>
 8002d94:	2301      	movs	r3, #1
 8002d96:	e000      	b.n	8002d9a <HAL_DMA_Abort_IT+0xce>
 8002d98:	2300      	movs	r3, #0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d065      	beq.n	8002e6a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2204      	movs	r2, #4
 8002da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a60      	ldr	r2, [pc, #384]	; (8002f2c <HAL_DMA_Abort_IT+0x260>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d04a      	beq.n	8002e46 <HAL_DMA_Abort_IT+0x17a>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a5e      	ldr	r2, [pc, #376]	; (8002f30 <HAL_DMA_Abort_IT+0x264>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d045      	beq.n	8002e46 <HAL_DMA_Abort_IT+0x17a>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a5d      	ldr	r2, [pc, #372]	; (8002f34 <HAL_DMA_Abort_IT+0x268>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d040      	beq.n	8002e46 <HAL_DMA_Abort_IT+0x17a>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a5b      	ldr	r2, [pc, #364]	; (8002f38 <HAL_DMA_Abort_IT+0x26c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d03b      	beq.n	8002e46 <HAL_DMA_Abort_IT+0x17a>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a5a      	ldr	r2, [pc, #360]	; (8002f3c <HAL_DMA_Abort_IT+0x270>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d036      	beq.n	8002e46 <HAL_DMA_Abort_IT+0x17a>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a58      	ldr	r2, [pc, #352]	; (8002f40 <HAL_DMA_Abort_IT+0x274>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d031      	beq.n	8002e46 <HAL_DMA_Abort_IT+0x17a>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a57      	ldr	r2, [pc, #348]	; (8002f44 <HAL_DMA_Abort_IT+0x278>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d02c      	beq.n	8002e46 <HAL_DMA_Abort_IT+0x17a>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a55      	ldr	r2, [pc, #340]	; (8002f48 <HAL_DMA_Abort_IT+0x27c>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d027      	beq.n	8002e46 <HAL_DMA_Abort_IT+0x17a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a54      	ldr	r2, [pc, #336]	; (8002f4c <HAL_DMA_Abort_IT+0x280>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d022      	beq.n	8002e46 <HAL_DMA_Abort_IT+0x17a>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a52      	ldr	r2, [pc, #328]	; (8002f50 <HAL_DMA_Abort_IT+0x284>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d01d      	beq.n	8002e46 <HAL_DMA_Abort_IT+0x17a>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a51      	ldr	r2, [pc, #324]	; (8002f54 <HAL_DMA_Abort_IT+0x288>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d018      	beq.n	8002e46 <HAL_DMA_Abort_IT+0x17a>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a4f      	ldr	r2, [pc, #316]	; (8002f58 <HAL_DMA_Abort_IT+0x28c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d013      	beq.n	8002e46 <HAL_DMA_Abort_IT+0x17a>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a4e      	ldr	r2, [pc, #312]	; (8002f5c <HAL_DMA_Abort_IT+0x290>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d00e      	beq.n	8002e46 <HAL_DMA_Abort_IT+0x17a>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a4c      	ldr	r2, [pc, #304]	; (8002f60 <HAL_DMA_Abort_IT+0x294>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d009      	beq.n	8002e46 <HAL_DMA_Abort_IT+0x17a>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a4b      	ldr	r2, [pc, #300]	; (8002f64 <HAL_DMA_Abort_IT+0x298>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d004      	beq.n	8002e46 <HAL_DMA_Abort_IT+0x17a>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a49      	ldr	r2, [pc, #292]	; (8002f68 <HAL_DMA_Abort_IT+0x29c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d108      	bne.n	8002e58 <HAL_DMA_Abort_IT+0x18c>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0201 	bic.w	r2, r2, #1
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	e147      	b.n	80030e8 <HAL_DMA_Abort_IT+0x41c>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0201 	bic.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	e13e      	b.n	80030e8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 020e 	bic.w	r2, r2, #14
 8002e78:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a2b      	ldr	r2, [pc, #172]	; (8002f2c <HAL_DMA_Abort_IT+0x260>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d04a      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x24e>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a29      	ldr	r2, [pc, #164]	; (8002f30 <HAL_DMA_Abort_IT+0x264>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d045      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x24e>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a28      	ldr	r2, [pc, #160]	; (8002f34 <HAL_DMA_Abort_IT+0x268>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d040      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x24e>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a26      	ldr	r2, [pc, #152]	; (8002f38 <HAL_DMA_Abort_IT+0x26c>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d03b      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x24e>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a25      	ldr	r2, [pc, #148]	; (8002f3c <HAL_DMA_Abort_IT+0x270>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d036      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x24e>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a23      	ldr	r2, [pc, #140]	; (8002f40 <HAL_DMA_Abort_IT+0x274>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d031      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x24e>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a22      	ldr	r2, [pc, #136]	; (8002f44 <HAL_DMA_Abort_IT+0x278>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d02c      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x24e>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a20      	ldr	r2, [pc, #128]	; (8002f48 <HAL_DMA_Abort_IT+0x27c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d027      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x24e>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a1f      	ldr	r2, [pc, #124]	; (8002f4c <HAL_DMA_Abort_IT+0x280>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d022      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x24e>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a1d      	ldr	r2, [pc, #116]	; (8002f50 <HAL_DMA_Abort_IT+0x284>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d01d      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x24e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a1c      	ldr	r2, [pc, #112]	; (8002f54 <HAL_DMA_Abort_IT+0x288>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d018      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x24e>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a1a      	ldr	r2, [pc, #104]	; (8002f58 <HAL_DMA_Abort_IT+0x28c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d013      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x24e>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a19      	ldr	r2, [pc, #100]	; (8002f5c <HAL_DMA_Abort_IT+0x290>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d00e      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x24e>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a17      	ldr	r2, [pc, #92]	; (8002f60 <HAL_DMA_Abort_IT+0x294>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d009      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x24e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a16      	ldr	r2, [pc, #88]	; (8002f64 <HAL_DMA_Abort_IT+0x298>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d004      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x24e>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a14      	ldr	r2, [pc, #80]	; (8002f68 <HAL_DMA_Abort_IT+0x29c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d128      	bne.n	8002f6c <HAL_DMA_Abort_IT+0x2a0>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0201 	bic.w	r2, r2, #1
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	e027      	b.n	8002f7c <HAL_DMA_Abort_IT+0x2b0>
 8002f2c:	40020010 	.word	0x40020010
 8002f30:	40020028 	.word	0x40020028
 8002f34:	40020040 	.word	0x40020040
 8002f38:	40020058 	.word	0x40020058
 8002f3c:	40020070 	.word	0x40020070
 8002f40:	40020088 	.word	0x40020088
 8002f44:	400200a0 	.word	0x400200a0
 8002f48:	400200b8 	.word	0x400200b8
 8002f4c:	40020410 	.word	0x40020410
 8002f50:	40020428 	.word	0x40020428
 8002f54:	40020440 	.word	0x40020440
 8002f58:	40020458 	.word	0x40020458
 8002f5c:	40020470 	.word	0x40020470
 8002f60:	40020488 	.word	0x40020488
 8002f64:	400204a0 	.word	0x400204a0
 8002f68:	400204b8 	.word	0x400204b8
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0201 	bic.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a5c      	ldr	r2, [pc, #368]	; (80030f4 <HAL_DMA_Abort_IT+0x428>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d072      	beq.n	800306c <HAL_DMA_Abort_IT+0x3a0>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a5b      	ldr	r2, [pc, #364]	; (80030f8 <HAL_DMA_Abort_IT+0x42c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d06d      	beq.n	800306c <HAL_DMA_Abort_IT+0x3a0>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a59      	ldr	r2, [pc, #356]	; (80030fc <HAL_DMA_Abort_IT+0x430>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d068      	beq.n	800306c <HAL_DMA_Abort_IT+0x3a0>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a58      	ldr	r2, [pc, #352]	; (8003100 <HAL_DMA_Abort_IT+0x434>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d063      	beq.n	800306c <HAL_DMA_Abort_IT+0x3a0>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a56      	ldr	r2, [pc, #344]	; (8003104 <HAL_DMA_Abort_IT+0x438>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d05e      	beq.n	800306c <HAL_DMA_Abort_IT+0x3a0>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a55      	ldr	r2, [pc, #340]	; (8003108 <HAL_DMA_Abort_IT+0x43c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d059      	beq.n	800306c <HAL_DMA_Abort_IT+0x3a0>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a53      	ldr	r2, [pc, #332]	; (800310c <HAL_DMA_Abort_IT+0x440>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d054      	beq.n	800306c <HAL_DMA_Abort_IT+0x3a0>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a52      	ldr	r2, [pc, #328]	; (8003110 <HAL_DMA_Abort_IT+0x444>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d04f      	beq.n	800306c <HAL_DMA_Abort_IT+0x3a0>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a50      	ldr	r2, [pc, #320]	; (8003114 <HAL_DMA_Abort_IT+0x448>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d04a      	beq.n	800306c <HAL_DMA_Abort_IT+0x3a0>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a4f      	ldr	r2, [pc, #316]	; (8003118 <HAL_DMA_Abort_IT+0x44c>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d045      	beq.n	800306c <HAL_DMA_Abort_IT+0x3a0>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a4d      	ldr	r2, [pc, #308]	; (800311c <HAL_DMA_Abort_IT+0x450>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d040      	beq.n	800306c <HAL_DMA_Abort_IT+0x3a0>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a4c      	ldr	r2, [pc, #304]	; (8003120 <HAL_DMA_Abort_IT+0x454>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d03b      	beq.n	800306c <HAL_DMA_Abort_IT+0x3a0>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a4a      	ldr	r2, [pc, #296]	; (8003124 <HAL_DMA_Abort_IT+0x458>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d036      	beq.n	800306c <HAL_DMA_Abort_IT+0x3a0>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a49      	ldr	r2, [pc, #292]	; (8003128 <HAL_DMA_Abort_IT+0x45c>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d031      	beq.n	800306c <HAL_DMA_Abort_IT+0x3a0>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a47      	ldr	r2, [pc, #284]	; (800312c <HAL_DMA_Abort_IT+0x460>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d02c      	beq.n	800306c <HAL_DMA_Abort_IT+0x3a0>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a46      	ldr	r2, [pc, #280]	; (8003130 <HAL_DMA_Abort_IT+0x464>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d027      	beq.n	800306c <HAL_DMA_Abort_IT+0x3a0>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a44      	ldr	r2, [pc, #272]	; (8003134 <HAL_DMA_Abort_IT+0x468>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d022      	beq.n	800306c <HAL_DMA_Abort_IT+0x3a0>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a43      	ldr	r2, [pc, #268]	; (8003138 <HAL_DMA_Abort_IT+0x46c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d01d      	beq.n	800306c <HAL_DMA_Abort_IT+0x3a0>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a41      	ldr	r2, [pc, #260]	; (800313c <HAL_DMA_Abort_IT+0x470>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d018      	beq.n	800306c <HAL_DMA_Abort_IT+0x3a0>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a40      	ldr	r2, [pc, #256]	; (8003140 <HAL_DMA_Abort_IT+0x474>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d013      	beq.n	800306c <HAL_DMA_Abort_IT+0x3a0>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a3e      	ldr	r2, [pc, #248]	; (8003144 <HAL_DMA_Abort_IT+0x478>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d00e      	beq.n	800306c <HAL_DMA_Abort_IT+0x3a0>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a3d      	ldr	r2, [pc, #244]	; (8003148 <HAL_DMA_Abort_IT+0x47c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d009      	beq.n	800306c <HAL_DMA_Abort_IT+0x3a0>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a3b      	ldr	r2, [pc, #236]	; (800314c <HAL_DMA_Abort_IT+0x480>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d004      	beq.n	800306c <HAL_DMA_Abort_IT+0x3a0>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a3a      	ldr	r2, [pc, #232]	; (8003150 <HAL_DMA_Abort_IT+0x484>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d101      	bne.n	8003070 <HAL_DMA_Abort_IT+0x3a4>
 800306c:	2301      	movs	r3, #1
 800306e:	e000      	b.n	8003072 <HAL_DMA_Abort_IT+0x3a6>
 8003070:	2300      	movs	r3, #0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d028      	beq.n	80030c8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003080:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003084:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003090:	f003 031f 	and.w	r3, r3, #31
 8003094:	2201      	movs	r2, #1
 8003096:	409a      	lsls	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80030a4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00c      	beq.n	80030c8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030bc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80030c6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40020010 	.word	0x40020010
 80030f8:	40020028 	.word	0x40020028
 80030fc:	40020040 	.word	0x40020040
 8003100:	40020058 	.word	0x40020058
 8003104:	40020070 	.word	0x40020070
 8003108:	40020088 	.word	0x40020088
 800310c:	400200a0 	.word	0x400200a0
 8003110:	400200b8 	.word	0x400200b8
 8003114:	40020410 	.word	0x40020410
 8003118:	40020428 	.word	0x40020428
 800311c:	40020440 	.word	0x40020440
 8003120:	40020458 	.word	0x40020458
 8003124:	40020470 	.word	0x40020470
 8003128:	40020488 	.word	0x40020488
 800312c:	400204a0 	.word	0x400204a0
 8003130:	400204b8 	.word	0x400204b8
 8003134:	58025408 	.word	0x58025408
 8003138:	5802541c 	.word	0x5802541c
 800313c:	58025430 	.word	0x58025430
 8003140:	58025444 	.word	0x58025444
 8003144:	58025458 	.word	0x58025458
 8003148:	5802546c 	.word	0x5802546c
 800314c:	58025480 	.word	0x58025480
 8003150:	58025494 	.word	0x58025494

08003154 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08a      	sub	sp, #40	; 0x28
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800315c:	2300      	movs	r3, #0
 800315e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003160:	4b67      	ldr	r3, [pc, #412]	; (8003300 <HAL_DMA_IRQHandler+0x1ac>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a67      	ldr	r2, [pc, #412]	; (8003304 <HAL_DMA_IRQHandler+0x1b0>)
 8003166:	fba2 2303 	umull	r2, r3, r2, r3
 800316a:	0a9b      	lsrs	r3, r3, #10
 800316c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003172:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003178:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800317a:	6a3b      	ldr	r3, [r7, #32]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a5f      	ldr	r2, [pc, #380]	; (8003308 <HAL_DMA_IRQHandler+0x1b4>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d04a      	beq.n	8003226 <HAL_DMA_IRQHandler+0xd2>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a5d      	ldr	r2, [pc, #372]	; (800330c <HAL_DMA_IRQHandler+0x1b8>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d045      	beq.n	8003226 <HAL_DMA_IRQHandler+0xd2>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a5c      	ldr	r2, [pc, #368]	; (8003310 <HAL_DMA_IRQHandler+0x1bc>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d040      	beq.n	8003226 <HAL_DMA_IRQHandler+0xd2>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a5a      	ldr	r2, [pc, #360]	; (8003314 <HAL_DMA_IRQHandler+0x1c0>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d03b      	beq.n	8003226 <HAL_DMA_IRQHandler+0xd2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a59      	ldr	r2, [pc, #356]	; (8003318 <HAL_DMA_IRQHandler+0x1c4>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d036      	beq.n	8003226 <HAL_DMA_IRQHandler+0xd2>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a57      	ldr	r2, [pc, #348]	; (800331c <HAL_DMA_IRQHandler+0x1c8>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d031      	beq.n	8003226 <HAL_DMA_IRQHandler+0xd2>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a56      	ldr	r2, [pc, #344]	; (8003320 <HAL_DMA_IRQHandler+0x1cc>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d02c      	beq.n	8003226 <HAL_DMA_IRQHandler+0xd2>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a54      	ldr	r2, [pc, #336]	; (8003324 <HAL_DMA_IRQHandler+0x1d0>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d027      	beq.n	8003226 <HAL_DMA_IRQHandler+0xd2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a53      	ldr	r2, [pc, #332]	; (8003328 <HAL_DMA_IRQHandler+0x1d4>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d022      	beq.n	8003226 <HAL_DMA_IRQHandler+0xd2>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a51      	ldr	r2, [pc, #324]	; (800332c <HAL_DMA_IRQHandler+0x1d8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d01d      	beq.n	8003226 <HAL_DMA_IRQHandler+0xd2>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a50      	ldr	r2, [pc, #320]	; (8003330 <HAL_DMA_IRQHandler+0x1dc>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d018      	beq.n	8003226 <HAL_DMA_IRQHandler+0xd2>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a4e      	ldr	r2, [pc, #312]	; (8003334 <HAL_DMA_IRQHandler+0x1e0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d013      	beq.n	8003226 <HAL_DMA_IRQHandler+0xd2>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a4d      	ldr	r2, [pc, #308]	; (8003338 <HAL_DMA_IRQHandler+0x1e4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d00e      	beq.n	8003226 <HAL_DMA_IRQHandler+0xd2>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a4b      	ldr	r2, [pc, #300]	; (800333c <HAL_DMA_IRQHandler+0x1e8>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d009      	beq.n	8003226 <HAL_DMA_IRQHandler+0xd2>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a4a      	ldr	r2, [pc, #296]	; (8003340 <HAL_DMA_IRQHandler+0x1ec>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d004      	beq.n	8003226 <HAL_DMA_IRQHandler+0xd2>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a48      	ldr	r2, [pc, #288]	; (8003344 <HAL_DMA_IRQHandler+0x1f0>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d101      	bne.n	800322a <HAL_DMA_IRQHandler+0xd6>
 8003226:	2301      	movs	r3, #1
 8003228:	e000      	b.n	800322c <HAL_DMA_IRQHandler+0xd8>
 800322a:	2300      	movs	r3, #0
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 842b 	beq.w	8003a88 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003236:	f003 031f 	and.w	r3, r3, #31
 800323a:	2208      	movs	r2, #8
 800323c:	409a      	lsls	r2, r3
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	4013      	ands	r3, r2
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 80a2 	beq.w	800338c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a2e      	ldr	r2, [pc, #184]	; (8003308 <HAL_DMA_IRQHandler+0x1b4>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d04a      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x194>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a2d      	ldr	r2, [pc, #180]	; (800330c <HAL_DMA_IRQHandler+0x1b8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d045      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x194>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a2b      	ldr	r2, [pc, #172]	; (8003310 <HAL_DMA_IRQHandler+0x1bc>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d040      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x194>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a2a      	ldr	r2, [pc, #168]	; (8003314 <HAL_DMA_IRQHandler+0x1c0>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d03b      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x194>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a28      	ldr	r2, [pc, #160]	; (8003318 <HAL_DMA_IRQHandler+0x1c4>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d036      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x194>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a27      	ldr	r2, [pc, #156]	; (800331c <HAL_DMA_IRQHandler+0x1c8>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d031      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x194>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a25      	ldr	r2, [pc, #148]	; (8003320 <HAL_DMA_IRQHandler+0x1cc>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d02c      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x194>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a24      	ldr	r2, [pc, #144]	; (8003324 <HAL_DMA_IRQHandler+0x1d0>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d027      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x194>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a22      	ldr	r2, [pc, #136]	; (8003328 <HAL_DMA_IRQHandler+0x1d4>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d022      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x194>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a21      	ldr	r2, [pc, #132]	; (800332c <HAL_DMA_IRQHandler+0x1d8>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d01d      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x194>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a1f      	ldr	r2, [pc, #124]	; (8003330 <HAL_DMA_IRQHandler+0x1dc>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d018      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x194>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a1e      	ldr	r2, [pc, #120]	; (8003334 <HAL_DMA_IRQHandler+0x1e0>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d013      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x194>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a1c      	ldr	r2, [pc, #112]	; (8003338 <HAL_DMA_IRQHandler+0x1e4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d00e      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x194>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a1b      	ldr	r2, [pc, #108]	; (800333c <HAL_DMA_IRQHandler+0x1e8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d009      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x194>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a19      	ldr	r2, [pc, #100]	; (8003340 <HAL_DMA_IRQHandler+0x1ec>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d004      	beq.n	80032e8 <HAL_DMA_IRQHandler+0x194>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a18      	ldr	r2, [pc, #96]	; (8003344 <HAL_DMA_IRQHandler+0x1f0>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d12f      	bne.n	8003348 <HAL_DMA_IRQHandler+0x1f4>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	bf14      	ite	ne
 80032f6:	2301      	movne	r3, #1
 80032f8:	2300      	moveq	r3, #0
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	e02e      	b.n	800335c <HAL_DMA_IRQHandler+0x208>
 80032fe:	bf00      	nop
 8003300:	20000000 	.word	0x20000000
 8003304:	1b4e81b5 	.word	0x1b4e81b5
 8003308:	40020010 	.word	0x40020010
 800330c:	40020028 	.word	0x40020028
 8003310:	40020040 	.word	0x40020040
 8003314:	40020058 	.word	0x40020058
 8003318:	40020070 	.word	0x40020070
 800331c:	40020088 	.word	0x40020088
 8003320:	400200a0 	.word	0x400200a0
 8003324:	400200b8 	.word	0x400200b8
 8003328:	40020410 	.word	0x40020410
 800332c:	40020428 	.word	0x40020428
 8003330:	40020440 	.word	0x40020440
 8003334:	40020458 	.word	0x40020458
 8003338:	40020470 	.word	0x40020470
 800333c:	40020488 	.word	0x40020488
 8003340:	400204a0 	.word	0x400204a0
 8003344:	400204b8 	.word	0x400204b8
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b00      	cmp	r3, #0
 8003354:	bf14      	ite	ne
 8003356:	2301      	movne	r3, #1
 8003358:	2300      	moveq	r3, #0
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d015      	beq.n	800338c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0204 	bic.w	r2, r2, #4
 800336e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003374:	f003 031f 	and.w	r3, r3, #31
 8003378:	2208      	movs	r2, #8
 800337a:	409a      	lsls	r2, r3
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003384:	f043 0201 	orr.w	r2, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003390:	f003 031f 	and.w	r3, r3, #31
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	fa22 f303 	lsr.w	r3, r2, r3
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d06e      	beq.n	8003480 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a69      	ldr	r2, [pc, #420]	; (800354c <HAL_DMA_IRQHandler+0x3f8>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d04a      	beq.n	8003442 <HAL_DMA_IRQHandler+0x2ee>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a67      	ldr	r2, [pc, #412]	; (8003550 <HAL_DMA_IRQHandler+0x3fc>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d045      	beq.n	8003442 <HAL_DMA_IRQHandler+0x2ee>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a66      	ldr	r2, [pc, #408]	; (8003554 <HAL_DMA_IRQHandler+0x400>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d040      	beq.n	8003442 <HAL_DMA_IRQHandler+0x2ee>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a64      	ldr	r2, [pc, #400]	; (8003558 <HAL_DMA_IRQHandler+0x404>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d03b      	beq.n	8003442 <HAL_DMA_IRQHandler+0x2ee>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a63      	ldr	r2, [pc, #396]	; (800355c <HAL_DMA_IRQHandler+0x408>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d036      	beq.n	8003442 <HAL_DMA_IRQHandler+0x2ee>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a61      	ldr	r2, [pc, #388]	; (8003560 <HAL_DMA_IRQHandler+0x40c>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d031      	beq.n	8003442 <HAL_DMA_IRQHandler+0x2ee>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a60      	ldr	r2, [pc, #384]	; (8003564 <HAL_DMA_IRQHandler+0x410>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d02c      	beq.n	8003442 <HAL_DMA_IRQHandler+0x2ee>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a5e      	ldr	r2, [pc, #376]	; (8003568 <HAL_DMA_IRQHandler+0x414>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d027      	beq.n	8003442 <HAL_DMA_IRQHandler+0x2ee>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a5d      	ldr	r2, [pc, #372]	; (800356c <HAL_DMA_IRQHandler+0x418>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d022      	beq.n	8003442 <HAL_DMA_IRQHandler+0x2ee>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a5b      	ldr	r2, [pc, #364]	; (8003570 <HAL_DMA_IRQHandler+0x41c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d01d      	beq.n	8003442 <HAL_DMA_IRQHandler+0x2ee>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a5a      	ldr	r2, [pc, #360]	; (8003574 <HAL_DMA_IRQHandler+0x420>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d018      	beq.n	8003442 <HAL_DMA_IRQHandler+0x2ee>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a58      	ldr	r2, [pc, #352]	; (8003578 <HAL_DMA_IRQHandler+0x424>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d013      	beq.n	8003442 <HAL_DMA_IRQHandler+0x2ee>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a57      	ldr	r2, [pc, #348]	; (800357c <HAL_DMA_IRQHandler+0x428>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d00e      	beq.n	8003442 <HAL_DMA_IRQHandler+0x2ee>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a55      	ldr	r2, [pc, #340]	; (8003580 <HAL_DMA_IRQHandler+0x42c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d009      	beq.n	8003442 <HAL_DMA_IRQHandler+0x2ee>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a54      	ldr	r2, [pc, #336]	; (8003584 <HAL_DMA_IRQHandler+0x430>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d004      	beq.n	8003442 <HAL_DMA_IRQHandler+0x2ee>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a52      	ldr	r2, [pc, #328]	; (8003588 <HAL_DMA_IRQHandler+0x434>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d10a      	bne.n	8003458 <HAL_DMA_IRQHandler+0x304>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344c:	2b00      	cmp	r3, #0
 800344e:	bf14      	ite	ne
 8003450:	2301      	movne	r3, #1
 8003452:	2300      	moveq	r3, #0
 8003454:	b2db      	uxtb	r3, r3
 8003456:	e003      	b.n	8003460 <HAL_DMA_IRQHandler+0x30c>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2300      	movs	r3, #0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00d      	beq.n	8003480 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003468:	f003 031f 	and.w	r3, r3, #31
 800346c:	2201      	movs	r2, #1
 800346e:	409a      	lsls	r2, r3
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003478:	f043 0202 	orr.w	r2, r3, #2
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003484:	f003 031f 	and.w	r3, r3, #31
 8003488:	2204      	movs	r2, #4
 800348a:	409a      	lsls	r2, r3
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	4013      	ands	r3, r2
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 808f 	beq.w	80035b4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a2c      	ldr	r2, [pc, #176]	; (800354c <HAL_DMA_IRQHandler+0x3f8>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d04a      	beq.n	8003536 <HAL_DMA_IRQHandler+0x3e2>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a2a      	ldr	r2, [pc, #168]	; (8003550 <HAL_DMA_IRQHandler+0x3fc>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d045      	beq.n	8003536 <HAL_DMA_IRQHandler+0x3e2>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a29      	ldr	r2, [pc, #164]	; (8003554 <HAL_DMA_IRQHandler+0x400>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d040      	beq.n	8003536 <HAL_DMA_IRQHandler+0x3e2>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a27      	ldr	r2, [pc, #156]	; (8003558 <HAL_DMA_IRQHandler+0x404>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d03b      	beq.n	8003536 <HAL_DMA_IRQHandler+0x3e2>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a26      	ldr	r2, [pc, #152]	; (800355c <HAL_DMA_IRQHandler+0x408>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d036      	beq.n	8003536 <HAL_DMA_IRQHandler+0x3e2>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a24      	ldr	r2, [pc, #144]	; (8003560 <HAL_DMA_IRQHandler+0x40c>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d031      	beq.n	8003536 <HAL_DMA_IRQHandler+0x3e2>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a23      	ldr	r2, [pc, #140]	; (8003564 <HAL_DMA_IRQHandler+0x410>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d02c      	beq.n	8003536 <HAL_DMA_IRQHandler+0x3e2>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a21      	ldr	r2, [pc, #132]	; (8003568 <HAL_DMA_IRQHandler+0x414>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d027      	beq.n	8003536 <HAL_DMA_IRQHandler+0x3e2>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a20      	ldr	r2, [pc, #128]	; (800356c <HAL_DMA_IRQHandler+0x418>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d022      	beq.n	8003536 <HAL_DMA_IRQHandler+0x3e2>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a1e      	ldr	r2, [pc, #120]	; (8003570 <HAL_DMA_IRQHandler+0x41c>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d01d      	beq.n	8003536 <HAL_DMA_IRQHandler+0x3e2>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a1d      	ldr	r2, [pc, #116]	; (8003574 <HAL_DMA_IRQHandler+0x420>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d018      	beq.n	8003536 <HAL_DMA_IRQHandler+0x3e2>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a1b      	ldr	r2, [pc, #108]	; (8003578 <HAL_DMA_IRQHandler+0x424>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d013      	beq.n	8003536 <HAL_DMA_IRQHandler+0x3e2>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a1a      	ldr	r2, [pc, #104]	; (800357c <HAL_DMA_IRQHandler+0x428>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d00e      	beq.n	8003536 <HAL_DMA_IRQHandler+0x3e2>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a18      	ldr	r2, [pc, #96]	; (8003580 <HAL_DMA_IRQHandler+0x42c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d009      	beq.n	8003536 <HAL_DMA_IRQHandler+0x3e2>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a17      	ldr	r2, [pc, #92]	; (8003584 <HAL_DMA_IRQHandler+0x430>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d004      	beq.n	8003536 <HAL_DMA_IRQHandler+0x3e2>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a15      	ldr	r2, [pc, #84]	; (8003588 <HAL_DMA_IRQHandler+0x434>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d12a      	bne.n	800358c <HAL_DMA_IRQHandler+0x438>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	bf14      	ite	ne
 8003544:	2301      	movne	r3, #1
 8003546:	2300      	moveq	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	e023      	b.n	8003594 <HAL_DMA_IRQHandler+0x440>
 800354c:	40020010 	.word	0x40020010
 8003550:	40020028 	.word	0x40020028
 8003554:	40020040 	.word	0x40020040
 8003558:	40020058 	.word	0x40020058
 800355c:	40020070 	.word	0x40020070
 8003560:	40020088 	.word	0x40020088
 8003564:	400200a0 	.word	0x400200a0
 8003568:	400200b8 	.word	0x400200b8
 800356c:	40020410 	.word	0x40020410
 8003570:	40020428 	.word	0x40020428
 8003574:	40020440 	.word	0x40020440
 8003578:	40020458 	.word	0x40020458
 800357c:	40020470 	.word	0x40020470
 8003580:	40020488 	.word	0x40020488
 8003584:	400204a0 	.word	0x400204a0
 8003588:	400204b8 	.word	0x400204b8
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2300      	movs	r3, #0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00d      	beq.n	80035b4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359c:	f003 031f 	and.w	r3, r3, #31
 80035a0:	2204      	movs	r2, #4
 80035a2:	409a      	lsls	r2, r3
 80035a4:	6a3b      	ldr	r3, [r7, #32]
 80035a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ac:	f043 0204 	orr.w	r2, r3, #4
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b8:	f003 031f 	and.w	r3, r3, #31
 80035bc:	2210      	movs	r2, #16
 80035be:	409a      	lsls	r2, r3
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	4013      	ands	r3, r2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 80a6 	beq.w	8003716 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a85      	ldr	r2, [pc, #532]	; (80037e4 <HAL_DMA_IRQHandler+0x690>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d04a      	beq.n	800366a <HAL_DMA_IRQHandler+0x516>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a83      	ldr	r2, [pc, #524]	; (80037e8 <HAL_DMA_IRQHandler+0x694>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d045      	beq.n	800366a <HAL_DMA_IRQHandler+0x516>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a82      	ldr	r2, [pc, #520]	; (80037ec <HAL_DMA_IRQHandler+0x698>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d040      	beq.n	800366a <HAL_DMA_IRQHandler+0x516>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a80      	ldr	r2, [pc, #512]	; (80037f0 <HAL_DMA_IRQHandler+0x69c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d03b      	beq.n	800366a <HAL_DMA_IRQHandler+0x516>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a7f      	ldr	r2, [pc, #508]	; (80037f4 <HAL_DMA_IRQHandler+0x6a0>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d036      	beq.n	800366a <HAL_DMA_IRQHandler+0x516>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a7d      	ldr	r2, [pc, #500]	; (80037f8 <HAL_DMA_IRQHandler+0x6a4>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d031      	beq.n	800366a <HAL_DMA_IRQHandler+0x516>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a7c      	ldr	r2, [pc, #496]	; (80037fc <HAL_DMA_IRQHandler+0x6a8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d02c      	beq.n	800366a <HAL_DMA_IRQHandler+0x516>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a7a      	ldr	r2, [pc, #488]	; (8003800 <HAL_DMA_IRQHandler+0x6ac>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d027      	beq.n	800366a <HAL_DMA_IRQHandler+0x516>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a79      	ldr	r2, [pc, #484]	; (8003804 <HAL_DMA_IRQHandler+0x6b0>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d022      	beq.n	800366a <HAL_DMA_IRQHandler+0x516>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a77      	ldr	r2, [pc, #476]	; (8003808 <HAL_DMA_IRQHandler+0x6b4>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d01d      	beq.n	800366a <HAL_DMA_IRQHandler+0x516>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a76      	ldr	r2, [pc, #472]	; (800380c <HAL_DMA_IRQHandler+0x6b8>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d018      	beq.n	800366a <HAL_DMA_IRQHandler+0x516>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a74      	ldr	r2, [pc, #464]	; (8003810 <HAL_DMA_IRQHandler+0x6bc>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d013      	beq.n	800366a <HAL_DMA_IRQHandler+0x516>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a73      	ldr	r2, [pc, #460]	; (8003814 <HAL_DMA_IRQHandler+0x6c0>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d00e      	beq.n	800366a <HAL_DMA_IRQHandler+0x516>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a71      	ldr	r2, [pc, #452]	; (8003818 <HAL_DMA_IRQHandler+0x6c4>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d009      	beq.n	800366a <HAL_DMA_IRQHandler+0x516>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a70      	ldr	r2, [pc, #448]	; (800381c <HAL_DMA_IRQHandler+0x6c8>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d004      	beq.n	800366a <HAL_DMA_IRQHandler+0x516>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a6e      	ldr	r2, [pc, #440]	; (8003820 <HAL_DMA_IRQHandler+0x6cc>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d10a      	bne.n	8003680 <HAL_DMA_IRQHandler+0x52c>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b00      	cmp	r3, #0
 8003676:	bf14      	ite	ne
 8003678:	2301      	movne	r3, #1
 800367a:	2300      	moveq	r3, #0
 800367c:	b2db      	uxtb	r3, r3
 800367e:	e009      	b.n	8003694 <HAL_DMA_IRQHandler+0x540>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0304 	and.w	r3, r3, #4
 800368a:	2b00      	cmp	r3, #0
 800368c:	bf14      	ite	ne
 800368e:	2301      	movne	r3, #1
 8003690:	2300      	moveq	r3, #0
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	d03e      	beq.n	8003716 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369c:	f003 031f 	and.w	r3, r3, #31
 80036a0:	2210      	movs	r2, #16
 80036a2:	409a      	lsls	r2, r3
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d018      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d108      	bne.n	80036d6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d024      	beq.n	8003716 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	4798      	blx	r3
 80036d4:	e01f      	b.n	8003716 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d01b      	beq.n	8003716 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	4798      	blx	r3
 80036e6:	e016      	b.n	8003716 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d107      	bne.n	8003706 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0208 	bic.w	r2, r2, #8
 8003704:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371a:	f003 031f 	and.w	r3, r3, #31
 800371e:	2220      	movs	r2, #32
 8003720:	409a      	lsls	r2, r3
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	4013      	ands	r3, r2
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 8110 	beq.w	800394c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a2c      	ldr	r2, [pc, #176]	; (80037e4 <HAL_DMA_IRQHandler+0x690>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d04a      	beq.n	80037cc <HAL_DMA_IRQHandler+0x678>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a2b      	ldr	r2, [pc, #172]	; (80037e8 <HAL_DMA_IRQHandler+0x694>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d045      	beq.n	80037cc <HAL_DMA_IRQHandler+0x678>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a29      	ldr	r2, [pc, #164]	; (80037ec <HAL_DMA_IRQHandler+0x698>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d040      	beq.n	80037cc <HAL_DMA_IRQHandler+0x678>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a28      	ldr	r2, [pc, #160]	; (80037f0 <HAL_DMA_IRQHandler+0x69c>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d03b      	beq.n	80037cc <HAL_DMA_IRQHandler+0x678>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a26      	ldr	r2, [pc, #152]	; (80037f4 <HAL_DMA_IRQHandler+0x6a0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d036      	beq.n	80037cc <HAL_DMA_IRQHandler+0x678>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a25      	ldr	r2, [pc, #148]	; (80037f8 <HAL_DMA_IRQHandler+0x6a4>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d031      	beq.n	80037cc <HAL_DMA_IRQHandler+0x678>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a23      	ldr	r2, [pc, #140]	; (80037fc <HAL_DMA_IRQHandler+0x6a8>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d02c      	beq.n	80037cc <HAL_DMA_IRQHandler+0x678>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a22      	ldr	r2, [pc, #136]	; (8003800 <HAL_DMA_IRQHandler+0x6ac>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d027      	beq.n	80037cc <HAL_DMA_IRQHandler+0x678>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a20      	ldr	r2, [pc, #128]	; (8003804 <HAL_DMA_IRQHandler+0x6b0>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d022      	beq.n	80037cc <HAL_DMA_IRQHandler+0x678>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a1f      	ldr	r2, [pc, #124]	; (8003808 <HAL_DMA_IRQHandler+0x6b4>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d01d      	beq.n	80037cc <HAL_DMA_IRQHandler+0x678>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a1d      	ldr	r2, [pc, #116]	; (800380c <HAL_DMA_IRQHandler+0x6b8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d018      	beq.n	80037cc <HAL_DMA_IRQHandler+0x678>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a1c      	ldr	r2, [pc, #112]	; (8003810 <HAL_DMA_IRQHandler+0x6bc>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d013      	beq.n	80037cc <HAL_DMA_IRQHandler+0x678>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a1a      	ldr	r2, [pc, #104]	; (8003814 <HAL_DMA_IRQHandler+0x6c0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d00e      	beq.n	80037cc <HAL_DMA_IRQHandler+0x678>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a19      	ldr	r2, [pc, #100]	; (8003818 <HAL_DMA_IRQHandler+0x6c4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d009      	beq.n	80037cc <HAL_DMA_IRQHandler+0x678>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a17      	ldr	r2, [pc, #92]	; (800381c <HAL_DMA_IRQHandler+0x6c8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d004      	beq.n	80037cc <HAL_DMA_IRQHandler+0x678>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a16      	ldr	r2, [pc, #88]	; (8003820 <HAL_DMA_IRQHandler+0x6cc>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d12b      	bne.n	8003824 <HAL_DMA_IRQHandler+0x6d0>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0310 	and.w	r3, r3, #16
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	bf14      	ite	ne
 80037da:	2301      	movne	r3, #1
 80037dc:	2300      	moveq	r3, #0
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	e02a      	b.n	8003838 <HAL_DMA_IRQHandler+0x6e4>
 80037e2:	bf00      	nop
 80037e4:	40020010 	.word	0x40020010
 80037e8:	40020028 	.word	0x40020028
 80037ec:	40020040 	.word	0x40020040
 80037f0:	40020058 	.word	0x40020058
 80037f4:	40020070 	.word	0x40020070
 80037f8:	40020088 	.word	0x40020088
 80037fc:	400200a0 	.word	0x400200a0
 8003800:	400200b8 	.word	0x400200b8
 8003804:	40020410 	.word	0x40020410
 8003808:	40020428 	.word	0x40020428
 800380c:	40020440 	.word	0x40020440
 8003810:	40020458 	.word	0x40020458
 8003814:	40020470 	.word	0x40020470
 8003818:	40020488 	.word	0x40020488
 800381c:	400204a0 	.word	0x400204a0
 8003820:	400204b8 	.word	0x400204b8
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	bf14      	ite	ne
 8003832:	2301      	movne	r3, #1
 8003834:	2300      	moveq	r3, #0
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 8087 	beq.w	800394c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003842:	f003 031f 	and.w	r3, r3, #31
 8003846:	2220      	movs	r2, #32
 8003848:	409a      	lsls	r2, r3
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b04      	cmp	r3, #4
 8003858:	d139      	bne.n	80038ce <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0216 	bic.w	r2, r2, #22
 8003868:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695a      	ldr	r2, [r3, #20]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003878:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	2b00      	cmp	r3, #0
 8003880:	d103      	bne.n	800388a <HAL_DMA_IRQHandler+0x736>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003886:	2b00      	cmp	r3, #0
 8003888:	d007      	beq.n	800389a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 0208 	bic.w	r2, r2, #8
 8003898:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389e:	f003 031f 	and.w	r3, r3, #31
 80038a2:	223f      	movs	r2, #63	; 0x3f
 80038a4:	409a      	lsls	r2, r3
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 834a 	beq.w	8003f58 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	4798      	blx	r3
          }
          return;
 80038cc:	e344      	b.n	8003f58 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d018      	beq.n	800390e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d108      	bne.n	80038fc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d02c      	beq.n	800394c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	4798      	blx	r3
 80038fa:	e027      	b.n	800394c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003900:	2b00      	cmp	r3, #0
 8003902:	d023      	beq.n	800394c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	4798      	blx	r3
 800390c:	e01e      	b.n	800394c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10f      	bne.n	800393c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0210 	bic.w	r2, r2, #16
 800392a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 8306 	beq.w	8003f62 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 8088 	beq.w	8003a74 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2204      	movs	r2, #4
 8003968:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a7a      	ldr	r2, [pc, #488]	; (8003b5c <HAL_DMA_IRQHandler+0xa08>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d04a      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x8b8>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a79      	ldr	r2, [pc, #484]	; (8003b60 <HAL_DMA_IRQHandler+0xa0c>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d045      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x8b8>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a77      	ldr	r2, [pc, #476]	; (8003b64 <HAL_DMA_IRQHandler+0xa10>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d040      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x8b8>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a76      	ldr	r2, [pc, #472]	; (8003b68 <HAL_DMA_IRQHandler+0xa14>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d03b      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x8b8>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a74      	ldr	r2, [pc, #464]	; (8003b6c <HAL_DMA_IRQHandler+0xa18>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d036      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x8b8>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a73      	ldr	r2, [pc, #460]	; (8003b70 <HAL_DMA_IRQHandler+0xa1c>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d031      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x8b8>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a71      	ldr	r2, [pc, #452]	; (8003b74 <HAL_DMA_IRQHandler+0xa20>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d02c      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x8b8>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a70      	ldr	r2, [pc, #448]	; (8003b78 <HAL_DMA_IRQHandler+0xa24>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d027      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x8b8>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a6e      	ldr	r2, [pc, #440]	; (8003b7c <HAL_DMA_IRQHandler+0xa28>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d022      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x8b8>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a6d      	ldr	r2, [pc, #436]	; (8003b80 <HAL_DMA_IRQHandler+0xa2c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d01d      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x8b8>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a6b      	ldr	r2, [pc, #428]	; (8003b84 <HAL_DMA_IRQHandler+0xa30>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d018      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x8b8>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a6a      	ldr	r2, [pc, #424]	; (8003b88 <HAL_DMA_IRQHandler+0xa34>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d013      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x8b8>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a68      	ldr	r2, [pc, #416]	; (8003b8c <HAL_DMA_IRQHandler+0xa38>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d00e      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x8b8>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a67      	ldr	r2, [pc, #412]	; (8003b90 <HAL_DMA_IRQHandler+0xa3c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d009      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x8b8>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a65      	ldr	r2, [pc, #404]	; (8003b94 <HAL_DMA_IRQHandler+0xa40>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d004      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x8b8>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a64      	ldr	r2, [pc, #400]	; (8003b98 <HAL_DMA_IRQHandler+0xa44>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d108      	bne.n	8003a1e <HAL_DMA_IRQHandler+0x8ca>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0201 	bic.w	r2, r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	e007      	b.n	8003a2e <HAL_DMA_IRQHandler+0x8da>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 0201 	bic.w	r2, r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	3301      	adds	r3, #1
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d307      	bcc.n	8003a4a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1f2      	bne.n	8003a2e <HAL_DMA_IRQHandler+0x8da>
 8003a48:	e000      	b.n	8003a4c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003a4a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d004      	beq.n	8003a6c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2203      	movs	r2, #3
 8003a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003a6a:	e003      	b.n	8003a74 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 8272 	beq.w	8003f62 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	4798      	blx	r3
 8003a86:	e26c      	b.n	8003f62 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a43      	ldr	r2, [pc, #268]	; (8003b9c <HAL_DMA_IRQHandler+0xa48>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d022      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x984>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a42      	ldr	r2, [pc, #264]	; (8003ba0 <HAL_DMA_IRQHandler+0xa4c>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d01d      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x984>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a40      	ldr	r2, [pc, #256]	; (8003ba4 <HAL_DMA_IRQHandler+0xa50>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d018      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x984>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a3f      	ldr	r2, [pc, #252]	; (8003ba8 <HAL_DMA_IRQHandler+0xa54>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d013      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x984>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a3d      	ldr	r2, [pc, #244]	; (8003bac <HAL_DMA_IRQHandler+0xa58>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d00e      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x984>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a3c      	ldr	r2, [pc, #240]	; (8003bb0 <HAL_DMA_IRQHandler+0xa5c>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d009      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x984>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a3a      	ldr	r2, [pc, #232]	; (8003bb4 <HAL_DMA_IRQHandler+0xa60>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d004      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0x984>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a39      	ldr	r2, [pc, #228]	; (8003bb8 <HAL_DMA_IRQHandler+0xa64>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d101      	bne.n	8003adc <HAL_DMA_IRQHandler+0x988>
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e000      	b.n	8003ade <HAL_DMA_IRQHandler+0x98a>
 8003adc:	2300      	movs	r3, #0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 823f 	beq.w	8003f62 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af0:	f003 031f 	and.w	r3, r3, #31
 8003af4:	2204      	movs	r2, #4
 8003af6:	409a      	lsls	r2, r3
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	4013      	ands	r3, r2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 80cd 	beq.w	8003c9c <HAL_DMA_IRQHandler+0xb48>
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 80c7 	beq.w	8003c9c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b12:	f003 031f 	and.w	r3, r3, #31
 8003b16:	2204      	movs	r2, #4
 8003b18:	409a      	lsls	r2, r3
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d049      	beq.n	8003bbc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d109      	bne.n	8003b46 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 8210 	beq.w	8003f5c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b44:	e20a      	b.n	8003f5c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 8206 	beq.w	8003f5c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b58:	e200      	b.n	8003f5c <HAL_DMA_IRQHandler+0xe08>
 8003b5a:	bf00      	nop
 8003b5c:	40020010 	.word	0x40020010
 8003b60:	40020028 	.word	0x40020028
 8003b64:	40020040 	.word	0x40020040
 8003b68:	40020058 	.word	0x40020058
 8003b6c:	40020070 	.word	0x40020070
 8003b70:	40020088 	.word	0x40020088
 8003b74:	400200a0 	.word	0x400200a0
 8003b78:	400200b8 	.word	0x400200b8
 8003b7c:	40020410 	.word	0x40020410
 8003b80:	40020428 	.word	0x40020428
 8003b84:	40020440 	.word	0x40020440
 8003b88:	40020458 	.word	0x40020458
 8003b8c:	40020470 	.word	0x40020470
 8003b90:	40020488 	.word	0x40020488
 8003b94:	400204a0 	.word	0x400204a0
 8003b98:	400204b8 	.word	0x400204b8
 8003b9c:	58025408 	.word	0x58025408
 8003ba0:	5802541c 	.word	0x5802541c
 8003ba4:	58025430 	.word	0x58025430
 8003ba8:	58025444 	.word	0x58025444
 8003bac:	58025458 	.word	0x58025458
 8003bb0:	5802546c 	.word	0x5802546c
 8003bb4:	58025480 	.word	0x58025480
 8003bb8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	f003 0320 	and.w	r3, r3, #32
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d160      	bne.n	8003c88 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a8c      	ldr	r2, [pc, #560]	; (8003dfc <HAL_DMA_IRQHandler+0xca8>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d04a      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xb12>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a8a      	ldr	r2, [pc, #552]	; (8003e00 <HAL_DMA_IRQHandler+0xcac>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d045      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xb12>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a89      	ldr	r2, [pc, #548]	; (8003e04 <HAL_DMA_IRQHandler+0xcb0>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d040      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xb12>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a87      	ldr	r2, [pc, #540]	; (8003e08 <HAL_DMA_IRQHandler+0xcb4>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d03b      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xb12>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a86      	ldr	r2, [pc, #536]	; (8003e0c <HAL_DMA_IRQHandler+0xcb8>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d036      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xb12>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a84      	ldr	r2, [pc, #528]	; (8003e10 <HAL_DMA_IRQHandler+0xcbc>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d031      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xb12>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a83      	ldr	r2, [pc, #524]	; (8003e14 <HAL_DMA_IRQHandler+0xcc0>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d02c      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xb12>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a81      	ldr	r2, [pc, #516]	; (8003e18 <HAL_DMA_IRQHandler+0xcc4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d027      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xb12>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a80      	ldr	r2, [pc, #512]	; (8003e1c <HAL_DMA_IRQHandler+0xcc8>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d022      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xb12>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a7e      	ldr	r2, [pc, #504]	; (8003e20 <HAL_DMA_IRQHandler+0xccc>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d01d      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xb12>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a7d      	ldr	r2, [pc, #500]	; (8003e24 <HAL_DMA_IRQHandler+0xcd0>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d018      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xb12>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a7b      	ldr	r2, [pc, #492]	; (8003e28 <HAL_DMA_IRQHandler+0xcd4>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d013      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xb12>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a7a      	ldr	r2, [pc, #488]	; (8003e2c <HAL_DMA_IRQHandler+0xcd8>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d00e      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xb12>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a78      	ldr	r2, [pc, #480]	; (8003e30 <HAL_DMA_IRQHandler+0xcdc>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d009      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xb12>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a77      	ldr	r2, [pc, #476]	; (8003e34 <HAL_DMA_IRQHandler+0xce0>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d004      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xb12>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a75      	ldr	r2, [pc, #468]	; (8003e38 <HAL_DMA_IRQHandler+0xce4>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d108      	bne.n	8003c78 <HAL_DMA_IRQHandler+0xb24>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0208 	bic.w	r2, r2, #8
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	e007      	b.n	8003c88 <HAL_DMA_IRQHandler+0xb34>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0204 	bic.w	r2, r2, #4
 8003c86:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 8165 	beq.w	8003f5c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c9a:	e15f      	b.n	8003f5c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca0:	f003 031f 	and.w	r3, r3, #31
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	409a      	lsls	r2, r3
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	4013      	ands	r3, r2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 80c5 	beq.w	8003e3c <HAL_DMA_IRQHandler+0xce8>
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 80bf 	beq.w	8003e3c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc2:	f003 031f 	and.w	r3, r3, #31
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	409a      	lsls	r2, r3
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d018      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d109      	bne.n	8003cf6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 813a 	beq.w	8003f60 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cf4:	e134      	b.n	8003f60 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 8130 	beq.w	8003f60 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d08:	e12a      	b.n	8003f60 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f003 0320 	and.w	r3, r3, #32
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d168      	bne.n	8003de6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a38      	ldr	r2, [pc, #224]	; (8003dfc <HAL_DMA_IRQHandler+0xca8>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d04a      	beq.n	8003db4 <HAL_DMA_IRQHandler+0xc60>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a37      	ldr	r2, [pc, #220]	; (8003e00 <HAL_DMA_IRQHandler+0xcac>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d045      	beq.n	8003db4 <HAL_DMA_IRQHandler+0xc60>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a35      	ldr	r2, [pc, #212]	; (8003e04 <HAL_DMA_IRQHandler+0xcb0>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d040      	beq.n	8003db4 <HAL_DMA_IRQHandler+0xc60>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a34      	ldr	r2, [pc, #208]	; (8003e08 <HAL_DMA_IRQHandler+0xcb4>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d03b      	beq.n	8003db4 <HAL_DMA_IRQHandler+0xc60>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a32      	ldr	r2, [pc, #200]	; (8003e0c <HAL_DMA_IRQHandler+0xcb8>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d036      	beq.n	8003db4 <HAL_DMA_IRQHandler+0xc60>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a31      	ldr	r2, [pc, #196]	; (8003e10 <HAL_DMA_IRQHandler+0xcbc>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d031      	beq.n	8003db4 <HAL_DMA_IRQHandler+0xc60>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a2f      	ldr	r2, [pc, #188]	; (8003e14 <HAL_DMA_IRQHandler+0xcc0>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d02c      	beq.n	8003db4 <HAL_DMA_IRQHandler+0xc60>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a2e      	ldr	r2, [pc, #184]	; (8003e18 <HAL_DMA_IRQHandler+0xcc4>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d027      	beq.n	8003db4 <HAL_DMA_IRQHandler+0xc60>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a2c      	ldr	r2, [pc, #176]	; (8003e1c <HAL_DMA_IRQHandler+0xcc8>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d022      	beq.n	8003db4 <HAL_DMA_IRQHandler+0xc60>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a2b      	ldr	r2, [pc, #172]	; (8003e20 <HAL_DMA_IRQHandler+0xccc>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d01d      	beq.n	8003db4 <HAL_DMA_IRQHandler+0xc60>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a29      	ldr	r2, [pc, #164]	; (8003e24 <HAL_DMA_IRQHandler+0xcd0>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d018      	beq.n	8003db4 <HAL_DMA_IRQHandler+0xc60>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a28      	ldr	r2, [pc, #160]	; (8003e28 <HAL_DMA_IRQHandler+0xcd4>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d013      	beq.n	8003db4 <HAL_DMA_IRQHandler+0xc60>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a26      	ldr	r2, [pc, #152]	; (8003e2c <HAL_DMA_IRQHandler+0xcd8>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d00e      	beq.n	8003db4 <HAL_DMA_IRQHandler+0xc60>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a25      	ldr	r2, [pc, #148]	; (8003e30 <HAL_DMA_IRQHandler+0xcdc>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d009      	beq.n	8003db4 <HAL_DMA_IRQHandler+0xc60>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a23      	ldr	r2, [pc, #140]	; (8003e34 <HAL_DMA_IRQHandler+0xce0>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d004      	beq.n	8003db4 <HAL_DMA_IRQHandler+0xc60>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a22      	ldr	r2, [pc, #136]	; (8003e38 <HAL_DMA_IRQHandler+0xce4>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d108      	bne.n	8003dc6 <HAL_DMA_IRQHandler+0xc72>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 0214 	bic.w	r2, r2, #20
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	e007      	b.n	8003dd6 <HAL_DMA_IRQHandler+0xc82>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 020a 	bic.w	r2, r2, #10
 8003dd4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 80b8 	beq.w	8003f60 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003df8:	e0b2      	b.n	8003f60 <HAL_DMA_IRQHandler+0xe0c>
 8003dfa:	bf00      	nop
 8003dfc:	40020010 	.word	0x40020010
 8003e00:	40020028 	.word	0x40020028
 8003e04:	40020040 	.word	0x40020040
 8003e08:	40020058 	.word	0x40020058
 8003e0c:	40020070 	.word	0x40020070
 8003e10:	40020088 	.word	0x40020088
 8003e14:	400200a0 	.word	0x400200a0
 8003e18:	400200b8 	.word	0x400200b8
 8003e1c:	40020410 	.word	0x40020410
 8003e20:	40020428 	.word	0x40020428
 8003e24:	40020440 	.word	0x40020440
 8003e28:	40020458 	.word	0x40020458
 8003e2c:	40020470 	.word	0x40020470
 8003e30:	40020488 	.word	0x40020488
 8003e34:	400204a0 	.word	0x400204a0
 8003e38:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e40:	f003 031f 	and.w	r3, r3, #31
 8003e44:	2208      	movs	r2, #8
 8003e46:	409a      	lsls	r2, r3
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 8088 	beq.w	8003f62 <HAL_DMA_IRQHandler+0xe0e>
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 8082 	beq.w	8003f62 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a41      	ldr	r2, [pc, #260]	; (8003f68 <HAL_DMA_IRQHandler+0xe14>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d04a      	beq.n	8003efe <HAL_DMA_IRQHandler+0xdaa>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a3f      	ldr	r2, [pc, #252]	; (8003f6c <HAL_DMA_IRQHandler+0xe18>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d045      	beq.n	8003efe <HAL_DMA_IRQHandler+0xdaa>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a3e      	ldr	r2, [pc, #248]	; (8003f70 <HAL_DMA_IRQHandler+0xe1c>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d040      	beq.n	8003efe <HAL_DMA_IRQHandler+0xdaa>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a3c      	ldr	r2, [pc, #240]	; (8003f74 <HAL_DMA_IRQHandler+0xe20>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d03b      	beq.n	8003efe <HAL_DMA_IRQHandler+0xdaa>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a3b      	ldr	r2, [pc, #236]	; (8003f78 <HAL_DMA_IRQHandler+0xe24>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d036      	beq.n	8003efe <HAL_DMA_IRQHandler+0xdaa>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a39      	ldr	r2, [pc, #228]	; (8003f7c <HAL_DMA_IRQHandler+0xe28>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d031      	beq.n	8003efe <HAL_DMA_IRQHandler+0xdaa>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a38      	ldr	r2, [pc, #224]	; (8003f80 <HAL_DMA_IRQHandler+0xe2c>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d02c      	beq.n	8003efe <HAL_DMA_IRQHandler+0xdaa>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a36      	ldr	r2, [pc, #216]	; (8003f84 <HAL_DMA_IRQHandler+0xe30>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d027      	beq.n	8003efe <HAL_DMA_IRQHandler+0xdaa>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a35      	ldr	r2, [pc, #212]	; (8003f88 <HAL_DMA_IRQHandler+0xe34>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d022      	beq.n	8003efe <HAL_DMA_IRQHandler+0xdaa>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a33      	ldr	r2, [pc, #204]	; (8003f8c <HAL_DMA_IRQHandler+0xe38>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d01d      	beq.n	8003efe <HAL_DMA_IRQHandler+0xdaa>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a32      	ldr	r2, [pc, #200]	; (8003f90 <HAL_DMA_IRQHandler+0xe3c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d018      	beq.n	8003efe <HAL_DMA_IRQHandler+0xdaa>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a30      	ldr	r2, [pc, #192]	; (8003f94 <HAL_DMA_IRQHandler+0xe40>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d013      	beq.n	8003efe <HAL_DMA_IRQHandler+0xdaa>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a2f      	ldr	r2, [pc, #188]	; (8003f98 <HAL_DMA_IRQHandler+0xe44>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d00e      	beq.n	8003efe <HAL_DMA_IRQHandler+0xdaa>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a2d      	ldr	r2, [pc, #180]	; (8003f9c <HAL_DMA_IRQHandler+0xe48>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d009      	beq.n	8003efe <HAL_DMA_IRQHandler+0xdaa>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a2c      	ldr	r2, [pc, #176]	; (8003fa0 <HAL_DMA_IRQHandler+0xe4c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d004      	beq.n	8003efe <HAL_DMA_IRQHandler+0xdaa>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a2a      	ldr	r2, [pc, #168]	; (8003fa4 <HAL_DMA_IRQHandler+0xe50>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d108      	bne.n	8003f10 <HAL_DMA_IRQHandler+0xdbc>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 021c 	bic.w	r2, r2, #28
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	e007      	b.n	8003f20 <HAL_DMA_IRQHandler+0xdcc>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 020e 	bic.w	r2, r2, #14
 8003f1e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f24:	f003 031f 	and.w	r3, r3, #31
 8003f28:	2201      	movs	r2, #1
 8003f2a:	409a      	lsls	r2, r3
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d009      	beq.n	8003f62 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	4798      	blx	r3
 8003f56:	e004      	b.n	8003f62 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003f58:	bf00      	nop
 8003f5a:	e002      	b.n	8003f62 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f5c:	bf00      	nop
 8003f5e:	e000      	b.n	8003f62 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f60:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003f62:	3728      	adds	r7, #40	; 0x28
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	40020010 	.word	0x40020010
 8003f6c:	40020028 	.word	0x40020028
 8003f70:	40020040 	.word	0x40020040
 8003f74:	40020058 	.word	0x40020058
 8003f78:	40020070 	.word	0x40020070
 8003f7c:	40020088 	.word	0x40020088
 8003f80:	400200a0 	.word	0x400200a0
 8003f84:	400200b8 	.word	0x400200b8
 8003f88:	40020410 	.word	0x40020410
 8003f8c:	40020428 	.word	0x40020428
 8003f90:	40020440 	.word	0x40020440
 8003f94:	40020458 	.word	0x40020458
 8003f98:	40020470 	.word	0x40020470
 8003f9c:	40020488 	.word	0x40020488
 8003fa0:	400204a0 	.word	0x400204a0
 8003fa4:	400204b8 	.word	0x400204b8

08003fa8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a42      	ldr	r2, [pc, #264]	; (80040c0 <DMA_CalcBaseAndBitshift+0x118>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d04a      	beq.n	8004050 <DMA_CalcBaseAndBitshift+0xa8>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a41      	ldr	r2, [pc, #260]	; (80040c4 <DMA_CalcBaseAndBitshift+0x11c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d045      	beq.n	8004050 <DMA_CalcBaseAndBitshift+0xa8>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a3f      	ldr	r2, [pc, #252]	; (80040c8 <DMA_CalcBaseAndBitshift+0x120>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d040      	beq.n	8004050 <DMA_CalcBaseAndBitshift+0xa8>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a3e      	ldr	r2, [pc, #248]	; (80040cc <DMA_CalcBaseAndBitshift+0x124>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d03b      	beq.n	8004050 <DMA_CalcBaseAndBitshift+0xa8>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a3c      	ldr	r2, [pc, #240]	; (80040d0 <DMA_CalcBaseAndBitshift+0x128>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d036      	beq.n	8004050 <DMA_CalcBaseAndBitshift+0xa8>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a3b      	ldr	r2, [pc, #236]	; (80040d4 <DMA_CalcBaseAndBitshift+0x12c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d031      	beq.n	8004050 <DMA_CalcBaseAndBitshift+0xa8>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a39      	ldr	r2, [pc, #228]	; (80040d8 <DMA_CalcBaseAndBitshift+0x130>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d02c      	beq.n	8004050 <DMA_CalcBaseAndBitshift+0xa8>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a38      	ldr	r2, [pc, #224]	; (80040dc <DMA_CalcBaseAndBitshift+0x134>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d027      	beq.n	8004050 <DMA_CalcBaseAndBitshift+0xa8>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a36      	ldr	r2, [pc, #216]	; (80040e0 <DMA_CalcBaseAndBitshift+0x138>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d022      	beq.n	8004050 <DMA_CalcBaseAndBitshift+0xa8>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a35      	ldr	r2, [pc, #212]	; (80040e4 <DMA_CalcBaseAndBitshift+0x13c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d01d      	beq.n	8004050 <DMA_CalcBaseAndBitshift+0xa8>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a33      	ldr	r2, [pc, #204]	; (80040e8 <DMA_CalcBaseAndBitshift+0x140>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d018      	beq.n	8004050 <DMA_CalcBaseAndBitshift+0xa8>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a32      	ldr	r2, [pc, #200]	; (80040ec <DMA_CalcBaseAndBitshift+0x144>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d013      	beq.n	8004050 <DMA_CalcBaseAndBitshift+0xa8>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a30      	ldr	r2, [pc, #192]	; (80040f0 <DMA_CalcBaseAndBitshift+0x148>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d00e      	beq.n	8004050 <DMA_CalcBaseAndBitshift+0xa8>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a2f      	ldr	r2, [pc, #188]	; (80040f4 <DMA_CalcBaseAndBitshift+0x14c>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d009      	beq.n	8004050 <DMA_CalcBaseAndBitshift+0xa8>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a2d      	ldr	r2, [pc, #180]	; (80040f8 <DMA_CalcBaseAndBitshift+0x150>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d004      	beq.n	8004050 <DMA_CalcBaseAndBitshift+0xa8>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a2c      	ldr	r2, [pc, #176]	; (80040fc <DMA_CalcBaseAndBitshift+0x154>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d101      	bne.n	8004054 <DMA_CalcBaseAndBitshift+0xac>
 8004050:	2301      	movs	r3, #1
 8004052:	e000      	b.n	8004056 <DMA_CalcBaseAndBitshift+0xae>
 8004054:	2300      	movs	r3, #0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d024      	beq.n	80040a4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	b2db      	uxtb	r3, r3
 8004060:	3b10      	subs	r3, #16
 8004062:	4a27      	ldr	r2, [pc, #156]	; (8004100 <DMA_CalcBaseAndBitshift+0x158>)
 8004064:	fba2 2303 	umull	r2, r3, r2, r3
 8004068:	091b      	lsrs	r3, r3, #4
 800406a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	4a24      	ldr	r2, [pc, #144]	; (8004104 <DMA_CalcBaseAndBitshift+0x15c>)
 8004074:	5cd3      	ldrb	r3, [r2, r3]
 8004076:	461a      	mov	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2b03      	cmp	r3, #3
 8004080:	d908      	bls.n	8004094 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	461a      	mov	r2, r3
 8004088:	4b1f      	ldr	r3, [pc, #124]	; (8004108 <DMA_CalcBaseAndBitshift+0x160>)
 800408a:	4013      	ands	r3, r2
 800408c:	1d1a      	adds	r2, r3, #4
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	659a      	str	r2, [r3, #88]	; 0x58
 8004092:	e00d      	b.n	80040b0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	461a      	mov	r2, r3
 800409a:	4b1b      	ldr	r3, [pc, #108]	; (8004108 <DMA_CalcBaseAndBitshift+0x160>)
 800409c:	4013      	ands	r3, r2
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6593      	str	r3, [r2, #88]	; 0x58
 80040a2:	e005      	b.n	80040b0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	40020010 	.word	0x40020010
 80040c4:	40020028 	.word	0x40020028
 80040c8:	40020040 	.word	0x40020040
 80040cc:	40020058 	.word	0x40020058
 80040d0:	40020070 	.word	0x40020070
 80040d4:	40020088 	.word	0x40020088
 80040d8:	400200a0 	.word	0x400200a0
 80040dc:	400200b8 	.word	0x400200b8
 80040e0:	40020410 	.word	0x40020410
 80040e4:	40020428 	.word	0x40020428
 80040e8:	40020440 	.word	0x40020440
 80040ec:	40020458 	.word	0x40020458
 80040f0:	40020470 	.word	0x40020470
 80040f4:	40020488 	.word	0x40020488
 80040f8:	400204a0 	.word	0x400204a0
 80040fc:	400204b8 	.word	0x400204b8
 8004100:	aaaaaaab 	.word	0xaaaaaaab
 8004104:	0800a61c 	.word	0x0800a61c
 8004108:	fffffc00 	.word	0xfffffc00

0800410c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004114:	2300      	movs	r3, #0
 8004116:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d120      	bne.n	8004162 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004124:	2b03      	cmp	r3, #3
 8004126:	d858      	bhi.n	80041da <DMA_CheckFifoParam+0xce>
 8004128:	a201      	add	r2, pc, #4	; (adr r2, 8004130 <DMA_CheckFifoParam+0x24>)
 800412a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412e:	bf00      	nop
 8004130:	08004141 	.word	0x08004141
 8004134:	08004153 	.word	0x08004153
 8004138:	08004141 	.word	0x08004141
 800413c:	080041db 	.word	0x080041db
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004144:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d048      	beq.n	80041de <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004150:	e045      	b.n	80041de <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004156:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800415a:	d142      	bne.n	80041e2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004160:	e03f      	b.n	80041e2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800416a:	d123      	bne.n	80041b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004170:	2b03      	cmp	r3, #3
 8004172:	d838      	bhi.n	80041e6 <DMA_CheckFifoParam+0xda>
 8004174:	a201      	add	r2, pc, #4	; (adr r2, 800417c <DMA_CheckFifoParam+0x70>)
 8004176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417a:	bf00      	nop
 800417c:	0800418d 	.word	0x0800418d
 8004180:	08004193 	.word	0x08004193
 8004184:	0800418d 	.word	0x0800418d
 8004188:	080041a5 	.word	0x080041a5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	73fb      	strb	r3, [r7, #15]
        break;
 8004190:	e030      	b.n	80041f4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004196:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d025      	beq.n	80041ea <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041a2:	e022      	b.n	80041ea <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041ac:	d11f      	bne.n	80041ee <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041b2:	e01c      	b.n	80041ee <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d902      	bls.n	80041c2 <DMA_CheckFifoParam+0xb6>
 80041bc:	2b03      	cmp	r3, #3
 80041be:	d003      	beq.n	80041c8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80041c0:	e018      	b.n	80041f4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	73fb      	strb	r3, [r7, #15]
        break;
 80041c6:	e015      	b.n	80041f4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00e      	beq.n	80041f2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	73fb      	strb	r3, [r7, #15]
    break;
 80041d8:	e00b      	b.n	80041f2 <DMA_CheckFifoParam+0xe6>
        break;
 80041da:	bf00      	nop
 80041dc:	e00a      	b.n	80041f4 <DMA_CheckFifoParam+0xe8>
        break;
 80041de:	bf00      	nop
 80041e0:	e008      	b.n	80041f4 <DMA_CheckFifoParam+0xe8>
        break;
 80041e2:	bf00      	nop
 80041e4:	e006      	b.n	80041f4 <DMA_CheckFifoParam+0xe8>
        break;
 80041e6:	bf00      	nop
 80041e8:	e004      	b.n	80041f4 <DMA_CheckFifoParam+0xe8>
        break;
 80041ea:	bf00      	nop
 80041ec:	e002      	b.n	80041f4 <DMA_CheckFifoParam+0xe8>
        break;
 80041ee:	bf00      	nop
 80041f0:	e000      	b.n	80041f4 <DMA_CheckFifoParam+0xe8>
    break;
 80041f2:	bf00      	nop
    }
  }

  return status;
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop

08004204 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a38      	ldr	r2, [pc, #224]	; (80042f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d022      	beq.n	8004262 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a36      	ldr	r2, [pc, #216]	; (80042fc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d01d      	beq.n	8004262 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a35      	ldr	r2, [pc, #212]	; (8004300 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d018      	beq.n	8004262 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a33      	ldr	r2, [pc, #204]	; (8004304 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d013      	beq.n	8004262 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a32      	ldr	r2, [pc, #200]	; (8004308 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d00e      	beq.n	8004262 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a30      	ldr	r2, [pc, #192]	; (800430c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d009      	beq.n	8004262 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a2f      	ldr	r2, [pc, #188]	; (8004310 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d004      	beq.n	8004262 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a2d      	ldr	r2, [pc, #180]	; (8004314 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d101      	bne.n	8004266 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004262:	2301      	movs	r3, #1
 8004264:	e000      	b.n	8004268 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004266:	2300      	movs	r3, #0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d01a      	beq.n	80042a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	b2db      	uxtb	r3, r3
 8004272:	3b08      	subs	r3, #8
 8004274:	4a28      	ldr	r2, [pc, #160]	; (8004318 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004276:	fba2 2303 	umull	r2, r3, r2, r3
 800427a:	091b      	lsrs	r3, r3, #4
 800427c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	4b26      	ldr	r3, [pc, #152]	; (800431c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004282:	4413      	add	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	461a      	mov	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a24      	ldr	r2, [pc, #144]	; (8004320 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004290:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f003 031f 	and.w	r3, r3, #31
 8004298:	2201      	movs	r2, #1
 800429a:	409a      	lsls	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80042a0:	e024      	b.n	80042ec <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	3b10      	subs	r3, #16
 80042aa:	4a1e      	ldr	r2, [pc, #120]	; (8004324 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80042ac:	fba2 2303 	umull	r2, r3, r2, r3
 80042b0:	091b      	lsrs	r3, r3, #4
 80042b2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	4a1c      	ldr	r2, [pc, #112]	; (8004328 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d806      	bhi.n	80042ca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	4a1b      	ldr	r2, [pc, #108]	; (800432c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d902      	bls.n	80042ca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	3308      	adds	r3, #8
 80042c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	4b18      	ldr	r3, [pc, #96]	; (8004330 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80042ce:	4413      	add	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	461a      	mov	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a16      	ldr	r2, [pc, #88]	; (8004334 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80042dc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f003 031f 	and.w	r3, r3, #31
 80042e4:	2201      	movs	r2, #1
 80042e6:	409a      	lsls	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	669a      	str	r2, [r3, #104]	; 0x68
}
 80042ec:	bf00      	nop
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	58025408 	.word	0x58025408
 80042fc:	5802541c 	.word	0x5802541c
 8004300:	58025430 	.word	0x58025430
 8004304:	58025444 	.word	0x58025444
 8004308:	58025458 	.word	0x58025458
 800430c:	5802546c 	.word	0x5802546c
 8004310:	58025480 	.word	0x58025480
 8004314:	58025494 	.word	0x58025494
 8004318:	cccccccd 	.word	0xcccccccd
 800431c:	16009600 	.word	0x16009600
 8004320:	58025880 	.word	0x58025880
 8004324:	aaaaaaab 	.word	0xaaaaaaab
 8004328:	400204b8 	.word	0x400204b8
 800432c:	4002040f 	.word	0x4002040f
 8004330:	10008200 	.word	0x10008200
 8004334:	40020880 	.word	0x40020880

08004338 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	b2db      	uxtb	r3, r3
 8004346:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d04a      	beq.n	80043e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2b08      	cmp	r3, #8
 8004352:	d847      	bhi.n	80043e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a25      	ldr	r2, [pc, #148]	; (80043f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d022      	beq.n	80043a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a24      	ldr	r2, [pc, #144]	; (80043f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d01d      	beq.n	80043a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a22      	ldr	r2, [pc, #136]	; (80043f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d018      	beq.n	80043a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a21      	ldr	r2, [pc, #132]	; (80043fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d013      	beq.n	80043a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a1f      	ldr	r2, [pc, #124]	; (8004400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d00e      	beq.n	80043a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a1e      	ldr	r2, [pc, #120]	; (8004404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d009      	beq.n	80043a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a1c      	ldr	r2, [pc, #112]	; (8004408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d004      	beq.n	80043a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a1b      	ldr	r2, [pc, #108]	; (800440c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d101      	bne.n	80043a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80043a4:	2301      	movs	r3, #1
 80043a6:	e000      	b.n	80043aa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80043a8:	2300      	movs	r3, #0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00a      	beq.n	80043c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	4b17      	ldr	r3, [pc, #92]	; (8004410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80043b2:	4413      	add	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	461a      	mov	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a15      	ldr	r2, [pc, #84]	; (8004414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80043c0:	671a      	str	r2, [r3, #112]	; 0x70
 80043c2:	e009      	b.n	80043d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	4b14      	ldr	r3, [pc, #80]	; (8004418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80043c8:	4413      	add	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	461a      	mov	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a11      	ldr	r2, [pc, #68]	; (800441c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80043d6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	3b01      	subs	r3, #1
 80043dc:	2201      	movs	r2, #1
 80043de:	409a      	lsls	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80043e4:	bf00      	nop
 80043e6:	3714      	adds	r7, #20
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	58025408 	.word	0x58025408
 80043f4:	5802541c 	.word	0x5802541c
 80043f8:	58025430 	.word	0x58025430
 80043fc:	58025444 	.word	0x58025444
 8004400:	58025458 	.word	0x58025458
 8004404:	5802546c 	.word	0x5802546c
 8004408:	58025480 	.word	0x58025480
 800440c:	58025494 	.word	0x58025494
 8004410:	1600963f 	.word	0x1600963f
 8004414:	58025940 	.word	0x58025940
 8004418:	1000823f 	.word	0x1000823f
 800441c:	40020940 	.word	0x40020940

08004420 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004420:	b480      	push	{r7}
 8004422:	b089      	sub	sp, #36	; 0x24
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800442a:	2300      	movs	r3, #0
 800442c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800442e:	4b89      	ldr	r3, [pc, #548]	; (8004654 <HAL_GPIO_Init+0x234>)
 8004430:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004432:	e194      	b.n	800475e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	2101      	movs	r1, #1
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	fa01 f303 	lsl.w	r3, r1, r3
 8004440:	4013      	ands	r3, r2
 8004442:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 8186 	beq.w	8004758 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d00b      	beq.n	800446c <HAL_GPIO_Init+0x4c>
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2b02      	cmp	r3, #2
 800445a:	d007      	beq.n	800446c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004460:	2b11      	cmp	r3, #17
 8004462:	d003      	beq.n	800446c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	2b12      	cmp	r3, #18
 800446a:	d130      	bne.n	80044ce <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	2203      	movs	r2, #3
 8004478:	fa02 f303 	lsl.w	r3, r2, r3
 800447c:	43db      	mvns	r3, r3
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	4013      	ands	r3, r2
 8004482:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	68da      	ldr	r2, [r3, #12]
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	4313      	orrs	r3, r2
 8004494:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044a2:	2201      	movs	r2, #1
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	fa02 f303 	lsl.w	r3, r2, r3
 80044aa:	43db      	mvns	r3, r3
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	4013      	ands	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	091b      	lsrs	r3, r3, #4
 80044b8:	f003 0201 	and.w	r2, r3, #1
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	fa02 f303 	lsl.w	r3, r2, r3
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	2203      	movs	r2, #3
 80044da:	fa02 f303 	lsl.w	r3, r2, r3
 80044de:	43db      	mvns	r3, r3
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	4013      	ands	r3, r2
 80044e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	689a      	ldr	r2, [r3, #8]
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	fa02 f303 	lsl.w	r3, r2, r3
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2b02      	cmp	r3, #2
 8004504:	d003      	beq.n	800450e <HAL_GPIO_Init+0xee>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2b12      	cmp	r3, #18
 800450c:	d123      	bne.n	8004556 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	08da      	lsrs	r2, r3, #3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	3208      	adds	r2, #8
 8004516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800451a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	f003 0307 	and.w	r3, r3, #7
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	220f      	movs	r2, #15
 8004526:	fa02 f303 	lsl.w	r3, r2, r3
 800452a:	43db      	mvns	r3, r3
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	4013      	ands	r3, r2
 8004530:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	691a      	ldr	r2, [r3, #16]
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	fa02 f303 	lsl.w	r3, r2, r3
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	4313      	orrs	r3, r2
 8004546:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	08da      	lsrs	r2, r3, #3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	3208      	adds	r2, #8
 8004550:	69b9      	ldr	r1, [r7, #24]
 8004552:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	2203      	movs	r2, #3
 8004562:	fa02 f303 	lsl.w	r3, r2, r3
 8004566:	43db      	mvns	r3, r3
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	4013      	ands	r3, r2
 800456c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f003 0203 	and.w	r2, r3, #3
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	4313      	orrs	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 80e0 	beq.w	8004758 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004598:	4b2f      	ldr	r3, [pc, #188]	; (8004658 <HAL_GPIO_Init+0x238>)
 800459a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800459e:	4a2e      	ldr	r2, [pc, #184]	; (8004658 <HAL_GPIO_Init+0x238>)
 80045a0:	f043 0302 	orr.w	r3, r3, #2
 80045a4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80045a8:	4b2b      	ldr	r3, [pc, #172]	; (8004658 <HAL_GPIO_Init+0x238>)
 80045aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045b6:	4a29      	ldr	r2, [pc, #164]	; (800465c <HAL_GPIO_Init+0x23c>)
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	089b      	lsrs	r3, r3, #2
 80045bc:	3302      	adds	r3, #2
 80045be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	f003 0303 	and.w	r3, r3, #3
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	220f      	movs	r2, #15
 80045ce:	fa02 f303 	lsl.w	r3, r2, r3
 80045d2:	43db      	mvns	r3, r3
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	4013      	ands	r3, r2
 80045d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a20      	ldr	r2, [pc, #128]	; (8004660 <HAL_GPIO_Init+0x240>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d052      	beq.n	8004688 <HAL_GPIO_Init+0x268>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a1f      	ldr	r2, [pc, #124]	; (8004664 <HAL_GPIO_Init+0x244>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d031      	beq.n	800464e <HAL_GPIO_Init+0x22e>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a1e      	ldr	r2, [pc, #120]	; (8004668 <HAL_GPIO_Init+0x248>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d02b      	beq.n	800464a <HAL_GPIO_Init+0x22a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a1d      	ldr	r2, [pc, #116]	; (800466c <HAL_GPIO_Init+0x24c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d025      	beq.n	8004646 <HAL_GPIO_Init+0x226>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a1c      	ldr	r2, [pc, #112]	; (8004670 <HAL_GPIO_Init+0x250>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d01f      	beq.n	8004642 <HAL_GPIO_Init+0x222>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a1b      	ldr	r2, [pc, #108]	; (8004674 <HAL_GPIO_Init+0x254>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d019      	beq.n	800463e <HAL_GPIO_Init+0x21e>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a1a      	ldr	r2, [pc, #104]	; (8004678 <HAL_GPIO_Init+0x258>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d013      	beq.n	800463a <HAL_GPIO_Init+0x21a>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a19      	ldr	r2, [pc, #100]	; (800467c <HAL_GPIO_Init+0x25c>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d00d      	beq.n	8004636 <HAL_GPIO_Init+0x216>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a18      	ldr	r2, [pc, #96]	; (8004680 <HAL_GPIO_Init+0x260>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d007      	beq.n	8004632 <HAL_GPIO_Init+0x212>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a17      	ldr	r2, [pc, #92]	; (8004684 <HAL_GPIO_Init+0x264>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d101      	bne.n	800462e <HAL_GPIO_Init+0x20e>
 800462a:	2309      	movs	r3, #9
 800462c:	e02d      	b.n	800468a <HAL_GPIO_Init+0x26a>
 800462e:	230a      	movs	r3, #10
 8004630:	e02b      	b.n	800468a <HAL_GPIO_Init+0x26a>
 8004632:	2308      	movs	r3, #8
 8004634:	e029      	b.n	800468a <HAL_GPIO_Init+0x26a>
 8004636:	2307      	movs	r3, #7
 8004638:	e027      	b.n	800468a <HAL_GPIO_Init+0x26a>
 800463a:	2306      	movs	r3, #6
 800463c:	e025      	b.n	800468a <HAL_GPIO_Init+0x26a>
 800463e:	2305      	movs	r3, #5
 8004640:	e023      	b.n	800468a <HAL_GPIO_Init+0x26a>
 8004642:	2304      	movs	r3, #4
 8004644:	e021      	b.n	800468a <HAL_GPIO_Init+0x26a>
 8004646:	2303      	movs	r3, #3
 8004648:	e01f      	b.n	800468a <HAL_GPIO_Init+0x26a>
 800464a:	2302      	movs	r3, #2
 800464c:	e01d      	b.n	800468a <HAL_GPIO_Init+0x26a>
 800464e:	2301      	movs	r3, #1
 8004650:	e01b      	b.n	800468a <HAL_GPIO_Init+0x26a>
 8004652:	bf00      	nop
 8004654:	58000080 	.word	0x58000080
 8004658:	58024400 	.word	0x58024400
 800465c:	58000400 	.word	0x58000400
 8004660:	58020000 	.word	0x58020000
 8004664:	58020400 	.word	0x58020400
 8004668:	58020800 	.word	0x58020800
 800466c:	58020c00 	.word	0x58020c00
 8004670:	58021000 	.word	0x58021000
 8004674:	58021400 	.word	0x58021400
 8004678:	58021800 	.word	0x58021800
 800467c:	58021c00 	.word	0x58021c00
 8004680:	58022000 	.word	0x58022000
 8004684:	58022400 	.word	0x58022400
 8004688:	2300      	movs	r3, #0
 800468a:	69fa      	ldr	r2, [r7, #28]
 800468c:	f002 0203 	and.w	r2, r2, #3
 8004690:	0092      	lsls	r2, r2, #2
 8004692:	4093      	lsls	r3, r2
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	4313      	orrs	r3, r2
 8004698:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800469a:	4938      	ldr	r1, [pc, #224]	; (800477c <HAL_GPIO_Init+0x35c>)
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	089b      	lsrs	r3, r3, #2
 80046a0:	3302      	adds	r3, #2
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	43db      	mvns	r3, r3
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	4013      	ands	r3, r2
 80046b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d003      	beq.n	80046cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	43db      	mvns	r3, r3
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	4013      	ands	r3, r2
 80046e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	43db      	mvns	r3, r3
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	4013      	ands	r3, r2
 800470c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	4313      	orrs	r3, r2
 8004720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004722:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800472a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	43db      	mvns	r3, r3
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	4013      	ands	r3, r2
 800473a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d003      	beq.n	8004750 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	4313      	orrs	r3, r2
 800474e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004750:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	3301      	adds	r3, #1
 800475c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	fa22 f303 	lsr.w	r3, r2, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	f47f ae63 	bne.w	8004434 <HAL_GPIO_Init+0x14>
  }
}
 800476e:	bf00      	nop
 8004770:	bf00      	nop
 8004772:	3724      	adds	r7, #36	; 0x24
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	58000400 	.word	0x58000400

08004780 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	460b      	mov	r3, r1
 800478a:	807b      	strh	r3, [r7, #2]
 800478c:	4613      	mov	r3, r2
 800478e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004790:	787b      	ldrb	r3, [r7, #1]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004796:	887a      	ldrh	r2, [r7, #2]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800479c:	e003      	b.n	80047a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800479e:	887b      	ldrh	r3, [r7, #2]
 80047a0:	041a      	lsls	r2, r3, #16
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	619a      	str	r2, [r3, #24]
}
 80047a6:	bf00      	nop
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b082      	sub	sp, #8
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	4603      	mov	r3, r0
 80047ba:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80047bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80047c4:	88fb      	ldrh	r3, [r7, #6]
 80047c6:	4013      	ands	r3, r2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d008      	beq.n	80047de <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047d0:	88fb      	ldrh	r3, [r7, #6]
 80047d2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047d6:	88fb      	ldrh	r3, [r7, #6]
 80047d8:	4618      	mov	r0, r3
 80047da:	f7fc fd49 	bl	8001270 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80047de:	bf00      	nop
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
	...

080047e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80047f0:	4b19      	ldr	r3, [pc, #100]	; (8004858 <HAL_PWREx_ConfigSupply+0x70>)
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b04      	cmp	r3, #4
 80047fa:	d00a      	beq.n	8004812 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80047fc:	4b16      	ldr	r3, [pc, #88]	; (8004858 <HAL_PWREx_ConfigSupply+0x70>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	429a      	cmp	r2, r3
 8004808:	d001      	beq.n	800480e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e01f      	b.n	800484e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	e01d      	b.n	800484e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004812:	4b11      	ldr	r3, [pc, #68]	; (8004858 <HAL_PWREx_ConfigSupply+0x70>)
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f023 0207 	bic.w	r2, r3, #7
 800481a:	490f      	ldr	r1, [pc, #60]	; (8004858 <HAL_PWREx_ConfigSupply+0x70>)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4313      	orrs	r3, r2
 8004820:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004822:	f7fd fab1 	bl	8001d88 <HAL_GetTick>
 8004826:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004828:	e009      	b.n	800483e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800482a:	f7fd faad 	bl	8001d88 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004838:	d901      	bls.n	800483e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e007      	b.n	800484e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800483e:	4b06      	ldr	r3, [pc, #24]	; (8004858 <HAL_PWREx_ConfigSupply+0x70>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800484a:	d1ee      	bne.n	800482a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	58024800 	.word	0x58024800

0800485c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b08c      	sub	sp, #48	; 0x30
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e3ff      	b.n	800506e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 8087 	beq.w	800498a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800487c:	4b99      	ldr	r3, [pc, #612]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004884:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004886:	4b97      	ldr	r3, [pc, #604]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 8004888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800488c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800488e:	2b10      	cmp	r3, #16
 8004890:	d007      	beq.n	80048a2 <HAL_RCC_OscConfig+0x46>
 8004892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004894:	2b18      	cmp	r3, #24
 8004896:	d110      	bne.n	80048ba <HAL_RCC_OscConfig+0x5e>
 8004898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489a:	f003 0303 	and.w	r3, r3, #3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d10b      	bne.n	80048ba <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a2:	4b90      	ldr	r3, [pc, #576]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d06c      	beq.n	8004988 <HAL_RCC_OscConfig+0x12c>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d168      	bne.n	8004988 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e3d9      	b.n	800506e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048c2:	d106      	bne.n	80048d2 <HAL_RCC_OscConfig+0x76>
 80048c4:	4b87      	ldr	r3, [pc, #540]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a86      	ldr	r2, [pc, #536]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 80048ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ce:	6013      	str	r3, [r2, #0]
 80048d0:	e02e      	b.n	8004930 <HAL_RCC_OscConfig+0xd4>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10c      	bne.n	80048f4 <HAL_RCC_OscConfig+0x98>
 80048da:	4b82      	ldr	r3, [pc, #520]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a81      	ldr	r2, [pc, #516]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 80048e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	4b7f      	ldr	r3, [pc, #508]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a7e      	ldr	r2, [pc, #504]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 80048ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	e01d      	b.n	8004930 <HAL_RCC_OscConfig+0xd4>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048fc:	d10c      	bne.n	8004918 <HAL_RCC_OscConfig+0xbc>
 80048fe:	4b79      	ldr	r3, [pc, #484]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a78      	ldr	r2, [pc, #480]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 8004904:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	4b76      	ldr	r3, [pc, #472]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a75      	ldr	r2, [pc, #468]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 8004910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004914:	6013      	str	r3, [r2, #0]
 8004916:	e00b      	b.n	8004930 <HAL_RCC_OscConfig+0xd4>
 8004918:	4b72      	ldr	r3, [pc, #456]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a71      	ldr	r2, [pc, #452]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 800491e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004922:	6013      	str	r3, [r2, #0]
 8004924:	4b6f      	ldr	r3, [pc, #444]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a6e      	ldr	r2, [pc, #440]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 800492a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800492e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d013      	beq.n	8004960 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004938:	f7fd fa26 	bl	8001d88 <HAL_GetTick>
 800493c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004940:	f7fd fa22 	bl	8001d88 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b64      	cmp	r3, #100	; 0x64
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e38d      	b.n	800506e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004952:	4b64      	ldr	r3, [pc, #400]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0f0      	beq.n	8004940 <HAL_RCC_OscConfig+0xe4>
 800495e:	e014      	b.n	800498a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004960:	f7fd fa12 	bl	8001d88 <HAL_GetTick>
 8004964:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004968:	f7fd fa0e 	bl	8001d88 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b64      	cmp	r3, #100	; 0x64
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e379      	b.n	800506e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800497a:	4b5a      	ldr	r3, [pc, #360]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1f0      	bne.n	8004968 <HAL_RCC_OscConfig+0x10c>
 8004986:	e000      	b.n	800498a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	f000 80ae 	beq.w	8004af4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004998:	4b52      	ldr	r3, [pc, #328]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049a0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049a2:	4b50      	ldr	r3, [pc, #320]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 80049a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80049a8:	6a3b      	ldr	r3, [r7, #32]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d007      	beq.n	80049be <HAL_RCC_OscConfig+0x162>
 80049ae:	6a3b      	ldr	r3, [r7, #32]
 80049b0:	2b18      	cmp	r3, #24
 80049b2:	d13a      	bne.n	8004a2a <HAL_RCC_OscConfig+0x1ce>
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	f003 0303 	and.w	r3, r3, #3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d135      	bne.n	8004a2a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049be:	4b49      	ldr	r3, [pc, #292]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0304 	and.w	r3, r3, #4
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d005      	beq.n	80049d6 <HAL_RCC_OscConfig+0x17a>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e34b      	b.n	800506e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049d6:	f7fd f9e3 	bl	8001da0 <HAL_GetREVID>
 80049da:	4603      	mov	r3, r0
 80049dc:	f241 0203 	movw	r2, #4099	; 0x1003
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d817      	bhi.n	8004a14 <HAL_RCC_OscConfig+0x1b8>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	2b40      	cmp	r3, #64	; 0x40
 80049ea:	d108      	bne.n	80049fe <HAL_RCC_OscConfig+0x1a2>
 80049ec:	4b3d      	ldr	r3, [pc, #244]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80049f4:	4a3b      	ldr	r2, [pc, #236]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 80049f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049fa:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049fc:	e07a      	b.n	8004af4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049fe:	4b39      	ldr	r3, [pc, #228]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	031b      	lsls	r3, r3, #12
 8004a0c:	4935      	ldr	r1, [pc, #212]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a12:	e06f      	b.n	8004af4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a14:	4b33      	ldr	r3, [pc, #204]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	061b      	lsls	r3, r3, #24
 8004a22:	4930      	ldr	r1, [pc, #192]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a28:	e064      	b.n	8004af4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d045      	beq.n	8004abe <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004a32:	4b2c      	ldr	r3, [pc, #176]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f023 0219 	bic.w	r2, r3, #25
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	4929      	ldr	r1, [pc, #164]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a44:	f7fd f9a0 	bl	8001d88 <HAL_GetTick>
 8004a48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a4c:	f7fd f99c 	bl	8001d88 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e307      	b.n	800506e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a5e:	4b21      	ldr	r3, [pc, #132]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0304 	and.w	r3, r3, #4
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0f0      	beq.n	8004a4c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a6a:	f7fd f999 	bl	8001da0 <HAL_GetREVID>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	f241 0203 	movw	r2, #4099	; 0x1003
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d817      	bhi.n	8004aa8 <HAL_RCC_OscConfig+0x24c>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	2b40      	cmp	r3, #64	; 0x40
 8004a7e:	d108      	bne.n	8004a92 <HAL_RCC_OscConfig+0x236>
 8004a80:	4b18      	ldr	r3, [pc, #96]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004a88:	4a16      	ldr	r2, [pc, #88]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 8004a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a8e:	6053      	str	r3, [r2, #4]
 8004a90:	e030      	b.n	8004af4 <HAL_RCC_OscConfig+0x298>
 8004a92:	4b14      	ldr	r3, [pc, #80]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	031b      	lsls	r3, r3, #12
 8004aa0:	4910      	ldr	r1, [pc, #64]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	604b      	str	r3, [r1, #4]
 8004aa6:	e025      	b.n	8004af4 <HAL_RCC_OscConfig+0x298>
 8004aa8:	4b0e      	ldr	r3, [pc, #56]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	061b      	lsls	r3, r3, #24
 8004ab6:	490b      	ldr	r1, [pc, #44]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	604b      	str	r3, [r1, #4]
 8004abc:	e01a      	b.n	8004af4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004abe:	4b09      	ldr	r3, [pc, #36]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a08      	ldr	r2, [pc, #32]	; (8004ae4 <HAL_RCC_OscConfig+0x288>)
 8004ac4:	f023 0301 	bic.w	r3, r3, #1
 8004ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aca:	f7fd f95d 	bl	8001d88 <HAL_GetTick>
 8004ace:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ad0:	e00a      	b.n	8004ae8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ad2:	f7fd f959 	bl	8001d88 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d903      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e2c4      	b.n	800506e <HAL_RCC_OscConfig+0x812>
 8004ae4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ae8:	4ba4      	ldr	r3, [pc, #656]	; (8004d7c <HAL_RCC_OscConfig+0x520>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1ee      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0310 	and.w	r3, r3, #16
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 80a9 	beq.w	8004c54 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b02:	4b9e      	ldr	r3, [pc, #632]	; (8004d7c <HAL_RCC_OscConfig+0x520>)
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b0a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b0c:	4b9b      	ldr	r3, [pc, #620]	; (8004d7c <HAL_RCC_OscConfig+0x520>)
 8004b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b10:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d007      	beq.n	8004b28 <HAL_RCC_OscConfig+0x2cc>
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	2b18      	cmp	r3, #24
 8004b1c:	d13a      	bne.n	8004b94 <HAL_RCC_OscConfig+0x338>
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f003 0303 	and.w	r3, r3, #3
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d135      	bne.n	8004b94 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b28:	4b94      	ldr	r3, [pc, #592]	; (8004d7c <HAL_RCC_OscConfig+0x520>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d005      	beq.n	8004b40 <HAL_RCC_OscConfig+0x2e4>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	69db      	ldr	r3, [r3, #28]
 8004b38:	2b80      	cmp	r3, #128	; 0x80
 8004b3a:	d001      	beq.n	8004b40 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e296      	b.n	800506e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b40:	f7fd f92e 	bl	8001da0 <HAL_GetREVID>
 8004b44:	4603      	mov	r3, r0
 8004b46:	f241 0203 	movw	r2, #4099	; 0x1003
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d817      	bhi.n	8004b7e <HAL_RCC_OscConfig+0x322>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	2b20      	cmp	r3, #32
 8004b54:	d108      	bne.n	8004b68 <HAL_RCC_OscConfig+0x30c>
 8004b56:	4b89      	ldr	r3, [pc, #548]	; (8004d7c <HAL_RCC_OscConfig+0x520>)
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004b5e:	4a87      	ldr	r2, [pc, #540]	; (8004d7c <HAL_RCC_OscConfig+0x520>)
 8004b60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b64:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b66:	e075      	b.n	8004c54 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b68:	4b84      	ldr	r3, [pc, #528]	; (8004d7c <HAL_RCC_OscConfig+0x520>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	069b      	lsls	r3, r3, #26
 8004b76:	4981      	ldr	r1, [pc, #516]	; (8004d7c <HAL_RCC_OscConfig+0x520>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b7c:	e06a      	b.n	8004c54 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b7e:	4b7f      	ldr	r3, [pc, #508]	; (8004d7c <HAL_RCC_OscConfig+0x520>)
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	061b      	lsls	r3, r3, #24
 8004b8c:	497b      	ldr	r1, [pc, #492]	; (8004d7c <HAL_RCC_OscConfig+0x520>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b92:	e05f      	b.n	8004c54 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	69db      	ldr	r3, [r3, #28]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d042      	beq.n	8004c22 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004b9c:	4b77      	ldr	r3, [pc, #476]	; (8004d7c <HAL_RCC_OscConfig+0x520>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a76      	ldr	r2, [pc, #472]	; (8004d7c <HAL_RCC_OscConfig+0x520>)
 8004ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba8:	f7fd f8ee 	bl	8001d88 <HAL_GetTick>
 8004bac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004bb0:	f7fd f8ea 	bl	8001d88 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e255      	b.n	800506e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004bc2:	4b6e      	ldr	r3, [pc, #440]	; (8004d7c <HAL_RCC_OscConfig+0x520>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d0f0      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004bce:	f7fd f8e7 	bl	8001da0 <HAL_GetREVID>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	f241 0203 	movw	r2, #4099	; 0x1003
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d817      	bhi.n	8004c0c <HAL_RCC_OscConfig+0x3b0>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	2b20      	cmp	r3, #32
 8004be2:	d108      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x39a>
 8004be4:	4b65      	ldr	r3, [pc, #404]	; (8004d7c <HAL_RCC_OscConfig+0x520>)
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004bec:	4a63      	ldr	r2, [pc, #396]	; (8004d7c <HAL_RCC_OscConfig+0x520>)
 8004bee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bf2:	6053      	str	r3, [r2, #4]
 8004bf4:	e02e      	b.n	8004c54 <HAL_RCC_OscConfig+0x3f8>
 8004bf6:	4b61      	ldr	r3, [pc, #388]	; (8004d7c <HAL_RCC_OscConfig+0x520>)
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	069b      	lsls	r3, r3, #26
 8004c04:	495d      	ldr	r1, [pc, #372]	; (8004d7c <HAL_RCC_OscConfig+0x520>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	604b      	str	r3, [r1, #4]
 8004c0a:	e023      	b.n	8004c54 <HAL_RCC_OscConfig+0x3f8>
 8004c0c:	4b5b      	ldr	r3, [pc, #364]	; (8004d7c <HAL_RCC_OscConfig+0x520>)
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	061b      	lsls	r3, r3, #24
 8004c1a:	4958      	ldr	r1, [pc, #352]	; (8004d7c <HAL_RCC_OscConfig+0x520>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	60cb      	str	r3, [r1, #12]
 8004c20:	e018      	b.n	8004c54 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004c22:	4b56      	ldr	r3, [pc, #344]	; (8004d7c <HAL_RCC_OscConfig+0x520>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a55      	ldr	r2, [pc, #340]	; (8004d7c <HAL_RCC_OscConfig+0x520>)
 8004c28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2e:	f7fd f8ab 	bl	8001d88 <HAL_GetTick>
 8004c32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004c34:	e008      	b.n	8004c48 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004c36:	f7fd f8a7 	bl	8001d88 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d901      	bls.n	8004c48 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e212      	b.n	800506e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004c48:	4b4c      	ldr	r3, [pc, #304]	; (8004d7c <HAL_RCC_OscConfig+0x520>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1f0      	bne.n	8004c36 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0308 	and.w	r3, r3, #8
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d036      	beq.n	8004cce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d019      	beq.n	8004c9c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c68:	4b44      	ldr	r3, [pc, #272]	; (8004d7c <HAL_RCC_OscConfig+0x520>)
 8004c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c6c:	4a43      	ldr	r2, [pc, #268]	; (8004d7c <HAL_RCC_OscConfig+0x520>)
 8004c6e:	f043 0301 	orr.w	r3, r3, #1
 8004c72:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c74:	f7fd f888 	bl	8001d88 <HAL_GetTick>
 8004c78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c7c:	f7fd f884 	bl	8001d88 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e1ef      	b.n	800506e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c8e:	4b3b      	ldr	r3, [pc, #236]	; (8004d7c <HAL_RCC_OscConfig+0x520>)
 8004c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0f0      	beq.n	8004c7c <HAL_RCC_OscConfig+0x420>
 8004c9a:	e018      	b.n	8004cce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c9c:	4b37      	ldr	r3, [pc, #220]	; (8004d7c <HAL_RCC_OscConfig+0x520>)
 8004c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ca0:	4a36      	ldr	r2, [pc, #216]	; (8004d7c <HAL_RCC_OscConfig+0x520>)
 8004ca2:	f023 0301 	bic.w	r3, r3, #1
 8004ca6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca8:	f7fd f86e 	bl	8001d88 <HAL_GetTick>
 8004cac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004cae:	e008      	b.n	8004cc2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cb0:	f7fd f86a 	bl	8001d88 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e1d5      	b.n	800506e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004cc2:	4b2e      	ldr	r3, [pc, #184]	; (8004d7c <HAL_RCC_OscConfig+0x520>)
 8004cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1f0      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0320 	and.w	r3, r3, #32
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d036      	beq.n	8004d48 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d019      	beq.n	8004d16 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ce2:	4b26      	ldr	r3, [pc, #152]	; (8004d7c <HAL_RCC_OscConfig+0x520>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a25      	ldr	r2, [pc, #148]	; (8004d7c <HAL_RCC_OscConfig+0x520>)
 8004ce8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004cec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004cee:	f7fd f84b 	bl	8001d88 <HAL_GetTick>
 8004cf2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004cf4:	e008      	b.n	8004d08 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004cf6:	f7fd f847 	bl	8001d88 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d901      	bls.n	8004d08 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e1b2      	b.n	800506e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d08:	4b1c      	ldr	r3, [pc, #112]	; (8004d7c <HAL_RCC_OscConfig+0x520>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d0f0      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x49a>
 8004d14:	e018      	b.n	8004d48 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d16:	4b19      	ldr	r3, [pc, #100]	; (8004d7c <HAL_RCC_OscConfig+0x520>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a18      	ldr	r2, [pc, #96]	; (8004d7c <HAL_RCC_OscConfig+0x520>)
 8004d1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d20:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d22:	f7fd f831 	bl	8001d88 <HAL_GetTick>
 8004d26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004d28:	e008      	b.n	8004d3c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004d2a:	f7fd f82d 	bl	8001d88 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e198      	b.n	800506e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004d3c:	4b0f      	ldr	r3, [pc, #60]	; (8004d7c <HAL_RCC_OscConfig+0x520>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1f0      	bne.n	8004d2a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0304 	and.w	r3, r3, #4
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f000 8085 	beq.w	8004e60 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d56:	4b0a      	ldr	r3, [pc, #40]	; (8004d80 <HAL_RCC_OscConfig+0x524>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a09      	ldr	r2, [pc, #36]	; (8004d80 <HAL_RCC_OscConfig+0x524>)
 8004d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d62:	f7fd f811 	bl	8001d88 <HAL_GetTick>
 8004d66:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d68:	e00c      	b.n	8004d84 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d6a:	f7fd f80d 	bl	8001d88 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	2b64      	cmp	r3, #100	; 0x64
 8004d76:	d905      	bls.n	8004d84 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e178      	b.n	800506e <HAL_RCC_OscConfig+0x812>
 8004d7c:	58024400 	.word	0x58024400
 8004d80:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d84:	4b96      	ldr	r3, [pc, #600]	; (8004fe0 <HAL_RCC_OscConfig+0x784>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d0ec      	beq.n	8004d6a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d106      	bne.n	8004da6 <HAL_RCC_OscConfig+0x54a>
 8004d98:	4b92      	ldr	r3, [pc, #584]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d9c:	4a91      	ldr	r2, [pc, #580]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004d9e:	f043 0301 	orr.w	r3, r3, #1
 8004da2:	6713      	str	r3, [r2, #112]	; 0x70
 8004da4:	e02d      	b.n	8004e02 <HAL_RCC_OscConfig+0x5a6>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10c      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x56c>
 8004dae:	4b8d      	ldr	r3, [pc, #564]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db2:	4a8c      	ldr	r2, [pc, #560]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004db4:	f023 0301 	bic.w	r3, r3, #1
 8004db8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dba:	4b8a      	ldr	r3, [pc, #552]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dbe:	4a89      	ldr	r2, [pc, #548]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004dc0:	f023 0304 	bic.w	r3, r3, #4
 8004dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8004dc6:	e01c      	b.n	8004e02 <HAL_RCC_OscConfig+0x5a6>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	2b05      	cmp	r3, #5
 8004dce:	d10c      	bne.n	8004dea <HAL_RCC_OscConfig+0x58e>
 8004dd0:	4b84      	ldr	r3, [pc, #528]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd4:	4a83      	ldr	r2, [pc, #524]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004dd6:	f043 0304 	orr.w	r3, r3, #4
 8004dda:	6713      	str	r3, [r2, #112]	; 0x70
 8004ddc:	4b81      	ldr	r3, [pc, #516]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de0:	4a80      	ldr	r2, [pc, #512]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004de2:	f043 0301 	orr.w	r3, r3, #1
 8004de6:	6713      	str	r3, [r2, #112]	; 0x70
 8004de8:	e00b      	b.n	8004e02 <HAL_RCC_OscConfig+0x5a6>
 8004dea:	4b7e      	ldr	r3, [pc, #504]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dee:	4a7d      	ldr	r2, [pc, #500]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004df0:	f023 0301 	bic.w	r3, r3, #1
 8004df4:	6713      	str	r3, [r2, #112]	; 0x70
 8004df6:	4b7b      	ldr	r3, [pc, #492]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfa:	4a7a      	ldr	r2, [pc, #488]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004dfc:	f023 0304 	bic.w	r3, r3, #4
 8004e00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d015      	beq.n	8004e36 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e0a:	f7fc ffbd 	bl	8001d88 <HAL_GetTick>
 8004e0e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e10:	e00a      	b.n	8004e28 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e12:	f7fc ffb9 	bl	8001d88 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d901      	bls.n	8004e28 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e122      	b.n	800506e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e28:	4b6e      	ldr	r3, [pc, #440]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d0ee      	beq.n	8004e12 <HAL_RCC_OscConfig+0x5b6>
 8004e34:	e014      	b.n	8004e60 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e36:	f7fc ffa7 	bl	8001d88 <HAL_GetTick>
 8004e3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e3c:	e00a      	b.n	8004e54 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e3e:	f7fc ffa3 	bl	8001d88 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e10c      	b.n	800506e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e54:	4b63      	ldr	r3, [pc, #396]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1ee      	bne.n	8004e3e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 8101 	beq.w	800506c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004e6a:	4b5e      	ldr	r3, [pc, #376]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e72:	2b18      	cmp	r3, #24
 8004e74:	f000 80bc 	beq.w	8004ff0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	f040 8095 	bne.w	8004fac <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e82:	4b58      	ldr	r3, [pc, #352]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a57      	ldr	r2, [pc, #348]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004e88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e8e:	f7fc ff7b 	bl	8001d88 <HAL_GetTick>
 8004e92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e94:	e008      	b.n	8004ea8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e96:	f7fc ff77 	bl	8001d88 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e0e2      	b.n	800506e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ea8:	4b4e      	ldr	r3, [pc, #312]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1f0      	bne.n	8004e96 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004eb4:	4b4b      	ldr	r3, [pc, #300]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004eb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eb8:	4b4b      	ldr	r3, [pc, #300]	; (8004fe8 <HAL_RCC_OscConfig+0x78c>)
 8004eba:	4013      	ands	r3, r2
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004ec4:	0112      	lsls	r2, r2, #4
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	4946      	ldr	r1, [pc, #280]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	628b      	str	r3, [r1, #40]	; 0x28
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004edc:	3b01      	subs	r3, #1
 8004ede:	025b      	lsls	r3, r3, #9
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	041b      	lsls	r3, r3, #16
 8004eec:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ef0:	431a      	orrs	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	061b      	lsls	r3, r3, #24
 8004efa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004efe:	4939      	ldr	r1, [pc, #228]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004f04:	4b37      	ldr	r3, [pc, #220]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f08:	4a36      	ldr	r2, [pc, #216]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004f0a:	f023 0301 	bic.w	r3, r3, #1
 8004f0e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004f10:	4b34      	ldr	r3, [pc, #208]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004f12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f14:	4b35      	ldr	r3, [pc, #212]	; (8004fec <HAL_RCC_OscConfig+0x790>)
 8004f16:	4013      	ands	r3, r2
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004f1c:	00d2      	lsls	r2, r2, #3
 8004f1e:	4931      	ldr	r1, [pc, #196]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004f24:	4b2f      	ldr	r3, [pc, #188]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f28:	f023 020c 	bic.w	r2, r3, #12
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f30:	492c      	ldr	r1, [pc, #176]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004f36:	4b2b      	ldr	r3, [pc, #172]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3a:	f023 0202 	bic.w	r2, r3, #2
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f42:	4928      	ldr	r1, [pc, #160]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004f48:	4b26      	ldr	r3, [pc, #152]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4c:	4a25      	ldr	r2, [pc, #148]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f54:	4b23      	ldr	r3, [pc, #140]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f58:	4a22      	ldr	r2, [pc, #136]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004f5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004f60:	4b20      	ldr	r3, [pc, #128]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	4a1f      	ldr	r2, [pc, #124]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004f66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004f6c:	4b1d      	ldr	r3, [pc, #116]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f70:	4a1c      	ldr	r2, [pc, #112]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004f72:	f043 0301 	orr.w	r3, r3, #1
 8004f76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f78:	4b1a      	ldr	r3, [pc, #104]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a19      	ldr	r2, [pc, #100]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004f7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f84:	f7fc ff00 	bl	8001d88 <HAL_GetTick>
 8004f88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f8c:	f7fc fefc 	bl	8001d88 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e067      	b.n	800506e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f9e:	4b11      	ldr	r3, [pc, #68]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0f0      	beq.n	8004f8c <HAL_RCC_OscConfig+0x730>
 8004faa:	e05f      	b.n	800506c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fac:	4b0d      	ldr	r3, [pc, #52]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a0c      	ldr	r2, [pc, #48]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004fb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb8:	f7fc fee6 	bl	8001d88 <HAL_GetTick>
 8004fbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fbe:	e008      	b.n	8004fd2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fc0:	f7fc fee2 	bl	8001d88 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e04d      	b.n	800506e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fd2:	4b04      	ldr	r3, [pc, #16]	; (8004fe4 <HAL_RCC_OscConfig+0x788>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1f0      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x764>
 8004fde:	e045      	b.n	800506c <HAL_RCC_OscConfig+0x810>
 8004fe0:	58024800 	.word	0x58024800
 8004fe4:	58024400 	.word	0x58024400
 8004fe8:	fffffc0c 	.word	0xfffffc0c
 8004fec:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004ff0:	4b21      	ldr	r3, [pc, #132]	; (8005078 <HAL_RCC_OscConfig+0x81c>)
 8004ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004ff6:	4b20      	ldr	r3, [pc, #128]	; (8005078 <HAL_RCC_OscConfig+0x81c>)
 8004ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	2b01      	cmp	r3, #1
 8005002:	d031      	beq.n	8005068 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	f003 0203 	and.w	r2, r3, #3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800500e:	429a      	cmp	r2, r3
 8005010:	d12a      	bne.n	8005068 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	091b      	lsrs	r3, r3, #4
 8005016:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800501e:	429a      	cmp	r2, r3
 8005020:	d122      	bne.n	8005068 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800502e:	429a      	cmp	r2, r3
 8005030:	d11a      	bne.n	8005068 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	0a5b      	lsrs	r3, r3, #9
 8005036:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800503e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005040:	429a      	cmp	r2, r3
 8005042:	d111      	bne.n	8005068 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	0c1b      	lsrs	r3, r3, #16
 8005048:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005050:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005052:	429a      	cmp	r2, r3
 8005054:	d108      	bne.n	8005068 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	0e1b      	lsrs	r3, r3, #24
 800505a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005062:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005064:	429a      	cmp	r2, r3
 8005066:	d001      	beq.n	800506c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e000      	b.n	800506e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3730      	adds	r7, #48	; 0x30
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	58024400 	.word	0x58024400

0800507c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b086      	sub	sp, #24
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d101      	bne.n	8005090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e19c      	b.n	80053ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005090:	4b8a      	ldr	r3, [pc, #552]	; (80052bc <HAL_RCC_ClockConfig+0x240>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 030f 	and.w	r3, r3, #15
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	429a      	cmp	r2, r3
 800509c:	d910      	bls.n	80050c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800509e:	4b87      	ldr	r3, [pc, #540]	; (80052bc <HAL_RCC_ClockConfig+0x240>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f023 020f 	bic.w	r2, r3, #15
 80050a6:	4985      	ldr	r1, [pc, #532]	; (80052bc <HAL_RCC_ClockConfig+0x240>)
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ae:	4b83      	ldr	r3, [pc, #524]	; (80052bc <HAL_RCC_ClockConfig+0x240>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d001      	beq.n	80050c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e184      	b.n	80053ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0304 	and.w	r3, r3, #4
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d010      	beq.n	80050ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691a      	ldr	r2, [r3, #16]
 80050d0:	4b7b      	ldr	r3, [pc, #492]	; (80052c0 <HAL_RCC_ClockConfig+0x244>)
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050d8:	429a      	cmp	r2, r3
 80050da:	d908      	bls.n	80050ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80050dc:	4b78      	ldr	r3, [pc, #480]	; (80052c0 <HAL_RCC_ClockConfig+0x244>)
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	4975      	ldr	r1, [pc, #468]	; (80052c0 <HAL_RCC_ClockConfig+0x244>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0308 	and.w	r3, r3, #8
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d010      	beq.n	800511c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	695a      	ldr	r2, [r3, #20]
 80050fe:	4b70      	ldr	r3, [pc, #448]	; (80052c0 <HAL_RCC_ClockConfig+0x244>)
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005106:	429a      	cmp	r2, r3
 8005108:	d908      	bls.n	800511c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800510a:	4b6d      	ldr	r3, [pc, #436]	; (80052c0 <HAL_RCC_ClockConfig+0x244>)
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	496a      	ldr	r1, [pc, #424]	; (80052c0 <HAL_RCC_ClockConfig+0x244>)
 8005118:	4313      	orrs	r3, r2
 800511a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0310 	and.w	r3, r3, #16
 8005124:	2b00      	cmp	r3, #0
 8005126:	d010      	beq.n	800514a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	699a      	ldr	r2, [r3, #24]
 800512c:	4b64      	ldr	r3, [pc, #400]	; (80052c0 <HAL_RCC_ClockConfig+0x244>)
 800512e:	69db      	ldr	r3, [r3, #28]
 8005130:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005134:	429a      	cmp	r2, r3
 8005136:	d908      	bls.n	800514a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005138:	4b61      	ldr	r3, [pc, #388]	; (80052c0 <HAL_RCC_ClockConfig+0x244>)
 800513a:	69db      	ldr	r3, [r3, #28]
 800513c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	495e      	ldr	r1, [pc, #376]	; (80052c0 <HAL_RCC_ClockConfig+0x244>)
 8005146:	4313      	orrs	r3, r2
 8005148:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0320 	and.w	r3, r3, #32
 8005152:	2b00      	cmp	r3, #0
 8005154:	d010      	beq.n	8005178 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	69da      	ldr	r2, [r3, #28]
 800515a:	4b59      	ldr	r3, [pc, #356]	; (80052c0 <HAL_RCC_ClockConfig+0x244>)
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005162:	429a      	cmp	r2, r3
 8005164:	d908      	bls.n	8005178 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005166:	4b56      	ldr	r3, [pc, #344]	; (80052c0 <HAL_RCC_ClockConfig+0x244>)
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	4953      	ldr	r1, [pc, #332]	; (80052c0 <HAL_RCC_ClockConfig+0x244>)
 8005174:	4313      	orrs	r3, r2
 8005176:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d010      	beq.n	80051a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68da      	ldr	r2, [r3, #12]
 8005188:	4b4d      	ldr	r3, [pc, #308]	; (80052c0 <HAL_RCC_ClockConfig+0x244>)
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	f003 030f 	and.w	r3, r3, #15
 8005190:	429a      	cmp	r2, r3
 8005192:	d908      	bls.n	80051a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005194:	4b4a      	ldr	r3, [pc, #296]	; (80052c0 <HAL_RCC_ClockConfig+0x244>)
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	f023 020f 	bic.w	r2, r3, #15
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	4947      	ldr	r1, [pc, #284]	; (80052c0 <HAL_RCC_ClockConfig+0x244>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d055      	beq.n	800525e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80051b2:	4b43      	ldr	r3, [pc, #268]	; (80052c0 <HAL_RCC_ClockConfig+0x244>)
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	4940      	ldr	r1, [pc, #256]	; (80052c0 <HAL_RCC_ClockConfig+0x244>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d107      	bne.n	80051dc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051cc:	4b3c      	ldr	r3, [pc, #240]	; (80052c0 <HAL_RCC_ClockConfig+0x244>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d121      	bne.n	800521c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e0f6      	b.n	80053ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	2b03      	cmp	r3, #3
 80051e2:	d107      	bne.n	80051f4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80051e4:	4b36      	ldr	r3, [pc, #216]	; (80052c0 <HAL_RCC_ClockConfig+0x244>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d115      	bne.n	800521c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e0ea      	b.n	80053ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d107      	bne.n	800520c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80051fc:	4b30      	ldr	r3, [pc, #192]	; (80052c0 <HAL_RCC_ClockConfig+0x244>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005204:	2b00      	cmp	r3, #0
 8005206:	d109      	bne.n	800521c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e0de      	b.n	80053ca <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800520c:	4b2c      	ldr	r3, [pc, #176]	; (80052c0 <HAL_RCC_ClockConfig+0x244>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0304 	and.w	r3, r3, #4
 8005214:	2b00      	cmp	r3, #0
 8005216:	d101      	bne.n	800521c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e0d6      	b.n	80053ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800521c:	4b28      	ldr	r3, [pc, #160]	; (80052c0 <HAL_RCC_ClockConfig+0x244>)
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	f023 0207 	bic.w	r2, r3, #7
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	4925      	ldr	r1, [pc, #148]	; (80052c0 <HAL_RCC_ClockConfig+0x244>)
 800522a:	4313      	orrs	r3, r2
 800522c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800522e:	f7fc fdab 	bl	8001d88 <HAL_GetTick>
 8005232:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005234:	e00a      	b.n	800524c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005236:	f7fc fda7 	bl	8001d88 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	f241 3288 	movw	r2, #5000	; 0x1388
 8005244:	4293      	cmp	r3, r2
 8005246:	d901      	bls.n	800524c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e0be      	b.n	80053ca <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800524c:	4b1c      	ldr	r3, [pc, #112]	; (80052c0 <HAL_RCC_ClockConfig+0x244>)
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	429a      	cmp	r2, r3
 800525c:	d1eb      	bne.n	8005236 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d010      	beq.n	800528c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	4b14      	ldr	r3, [pc, #80]	; (80052c0 <HAL_RCC_ClockConfig+0x244>)
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	f003 030f 	and.w	r3, r3, #15
 8005276:	429a      	cmp	r2, r3
 8005278:	d208      	bcs.n	800528c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800527a:	4b11      	ldr	r3, [pc, #68]	; (80052c0 <HAL_RCC_ClockConfig+0x244>)
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	f023 020f 	bic.w	r2, r3, #15
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	490e      	ldr	r1, [pc, #56]	; (80052c0 <HAL_RCC_ClockConfig+0x244>)
 8005288:	4313      	orrs	r3, r2
 800528a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800528c:	4b0b      	ldr	r3, [pc, #44]	; (80052bc <HAL_RCC_ClockConfig+0x240>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 030f 	and.w	r3, r3, #15
 8005294:	683a      	ldr	r2, [r7, #0]
 8005296:	429a      	cmp	r2, r3
 8005298:	d214      	bcs.n	80052c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800529a:	4b08      	ldr	r3, [pc, #32]	; (80052bc <HAL_RCC_ClockConfig+0x240>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f023 020f 	bic.w	r2, r3, #15
 80052a2:	4906      	ldr	r1, [pc, #24]	; (80052bc <HAL_RCC_ClockConfig+0x240>)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052aa:	4b04      	ldr	r3, [pc, #16]	; (80052bc <HAL_RCC_ClockConfig+0x240>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 030f 	and.w	r3, r3, #15
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d005      	beq.n	80052c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e086      	b.n	80053ca <HAL_RCC_ClockConfig+0x34e>
 80052bc:	52002000 	.word	0x52002000
 80052c0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d010      	beq.n	80052f2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691a      	ldr	r2, [r3, #16]
 80052d4:	4b3f      	ldr	r3, [pc, #252]	; (80053d4 <HAL_RCC_ClockConfig+0x358>)
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052dc:	429a      	cmp	r2, r3
 80052de:	d208      	bcs.n	80052f2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80052e0:	4b3c      	ldr	r3, [pc, #240]	; (80053d4 <HAL_RCC_ClockConfig+0x358>)
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	4939      	ldr	r1, [pc, #228]	; (80053d4 <HAL_RCC_ClockConfig+0x358>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0308 	and.w	r3, r3, #8
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d010      	beq.n	8005320 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	695a      	ldr	r2, [r3, #20]
 8005302:	4b34      	ldr	r3, [pc, #208]	; (80053d4 <HAL_RCC_ClockConfig+0x358>)
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800530a:	429a      	cmp	r2, r3
 800530c:	d208      	bcs.n	8005320 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800530e:	4b31      	ldr	r3, [pc, #196]	; (80053d4 <HAL_RCC_ClockConfig+0x358>)
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	492e      	ldr	r1, [pc, #184]	; (80053d4 <HAL_RCC_ClockConfig+0x358>)
 800531c:	4313      	orrs	r3, r2
 800531e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0310 	and.w	r3, r3, #16
 8005328:	2b00      	cmp	r3, #0
 800532a:	d010      	beq.n	800534e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	699a      	ldr	r2, [r3, #24]
 8005330:	4b28      	ldr	r3, [pc, #160]	; (80053d4 <HAL_RCC_ClockConfig+0x358>)
 8005332:	69db      	ldr	r3, [r3, #28]
 8005334:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005338:	429a      	cmp	r2, r3
 800533a:	d208      	bcs.n	800534e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800533c:	4b25      	ldr	r3, [pc, #148]	; (80053d4 <HAL_RCC_ClockConfig+0x358>)
 800533e:	69db      	ldr	r3, [r3, #28]
 8005340:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	4922      	ldr	r1, [pc, #136]	; (80053d4 <HAL_RCC_ClockConfig+0x358>)
 800534a:	4313      	orrs	r3, r2
 800534c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0320 	and.w	r3, r3, #32
 8005356:	2b00      	cmp	r3, #0
 8005358:	d010      	beq.n	800537c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	69da      	ldr	r2, [r3, #28]
 800535e:	4b1d      	ldr	r3, [pc, #116]	; (80053d4 <HAL_RCC_ClockConfig+0x358>)
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005366:	429a      	cmp	r2, r3
 8005368:	d208      	bcs.n	800537c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800536a:	4b1a      	ldr	r3, [pc, #104]	; (80053d4 <HAL_RCC_ClockConfig+0x358>)
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	4917      	ldr	r1, [pc, #92]	; (80053d4 <HAL_RCC_ClockConfig+0x358>)
 8005378:	4313      	orrs	r3, r2
 800537a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800537c:	f000 f834 	bl	80053e8 <HAL_RCC_GetSysClockFreq>
 8005380:	4602      	mov	r2, r0
 8005382:	4b14      	ldr	r3, [pc, #80]	; (80053d4 <HAL_RCC_ClockConfig+0x358>)
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	0a1b      	lsrs	r3, r3, #8
 8005388:	f003 030f 	and.w	r3, r3, #15
 800538c:	4912      	ldr	r1, [pc, #72]	; (80053d8 <HAL_RCC_ClockConfig+0x35c>)
 800538e:	5ccb      	ldrb	r3, [r1, r3]
 8005390:	f003 031f 	and.w	r3, r3, #31
 8005394:	fa22 f303 	lsr.w	r3, r2, r3
 8005398:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800539a:	4b0e      	ldr	r3, [pc, #56]	; (80053d4 <HAL_RCC_ClockConfig+0x358>)
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	f003 030f 	and.w	r3, r3, #15
 80053a2:	4a0d      	ldr	r2, [pc, #52]	; (80053d8 <HAL_RCC_ClockConfig+0x35c>)
 80053a4:	5cd3      	ldrb	r3, [r2, r3]
 80053a6:	f003 031f 	and.w	r3, r3, #31
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	fa22 f303 	lsr.w	r3, r2, r3
 80053b0:	4a0a      	ldr	r2, [pc, #40]	; (80053dc <HAL_RCC_ClockConfig+0x360>)
 80053b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80053b4:	4a0a      	ldr	r2, [pc, #40]	; (80053e0 <HAL_RCC_ClockConfig+0x364>)
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80053ba:	4b0a      	ldr	r3, [pc, #40]	; (80053e4 <HAL_RCC_ClockConfig+0x368>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4618      	mov	r0, r3
 80053c0:	f7fc fc98 	bl	8001cf4 <HAL_InitTick>
 80053c4:	4603      	mov	r3, r0
 80053c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3718      	adds	r7, #24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	58024400 	.word	0x58024400
 80053d8:	0800a60c 	.word	0x0800a60c
 80053dc:	20000004 	.word	0x20000004
 80053e0:	20000000 	.word	0x20000000
 80053e4:	20000008 	.word	0x20000008

080053e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b089      	sub	sp, #36	; 0x24
 80053ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053ee:	4bb3      	ldr	r3, [pc, #716]	; (80056bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053f6:	2b18      	cmp	r3, #24
 80053f8:	f200 8155 	bhi.w	80056a6 <HAL_RCC_GetSysClockFreq+0x2be>
 80053fc:	a201      	add	r2, pc, #4	; (adr r2, 8005404 <HAL_RCC_GetSysClockFreq+0x1c>)
 80053fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005402:	bf00      	nop
 8005404:	08005469 	.word	0x08005469
 8005408:	080056a7 	.word	0x080056a7
 800540c:	080056a7 	.word	0x080056a7
 8005410:	080056a7 	.word	0x080056a7
 8005414:	080056a7 	.word	0x080056a7
 8005418:	080056a7 	.word	0x080056a7
 800541c:	080056a7 	.word	0x080056a7
 8005420:	080056a7 	.word	0x080056a7
 8005424:	0800548f 	.word	0x0800548f
 8005428:	080056a7 	.word	0x080056a7
 800542c:	080056a7 	.word	0x080056a7
 8005430:	080056a7 	.word	0x080056a7
 8005434:	080056a7 	.word	0x080056a7
 8005438:	080056a7 	.word	0x080056a7
 800543c:	080056a7 	.word	0x080056a7
 8005440:	080056a7 	.word	0x080056a7
 8005444:	08005495 	.word	0x08005495
 8005448:	080056a7 	.word	0x080056a7
 800544c:	080056a7 	.word	0x080056a7
 8005450:	080056a7 	.word	0x080056a7
 8005454:	080056a7 	.word	0x080056a7
 8005458:	080056a7 	.word	0x080056a7
 800545c:	080056a7 	.word	0x080056a7
 8005460:	080056a7 	.word	0x080056a7
 8005464:	0800549b 	.word	0x0800549b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005468:	4b94      	ldr	r3, [pc, #592]	; (80056bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0320 	and.w	r3, r3, #32
 8005470:	2b00      	cmp	r3, #0
 8005472:	d009      	beq.n	8005488 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005474:	4b91      	ldr	r3, [pc, #580]	; (80056bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	08db      	lsrs	r3, r3, #3
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	4a90      	ldr	r2, [pc, #576]	; (80056c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005480:	fa22 f303 	lsr.w	r3, r2, r3
 8005484:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005486:	e111      	b.n	80056ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005488:	4b8d      	ldr	r3, [pc, #564]	; (80056c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800548a:	61bb      	str	r3, [r7, #24]
    break;
 800548c:	e10e      	b.n	80056ac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800548e:	4b8d      	ldr	r3, [pc, #564]	; (80056c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005490:	61bb      	str	r3, [r7, #24]
    break;
 8005492:	e10b      	b.n	80056ac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005494:	4b8c      	ldr	r3, [pc, #560]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005496:	61bb      	str	r3, [r7, #24]
    break;
 8005498:	e108      	b.n	80056ac <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800549a:	4b88      	ldr	r3, [pc, #544]	; (80056bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800549c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549e:	f003 0303 	and.w	r3, r3, #3
 80054a2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80054a4:	4b85      	ldr	r3, [pc, #532]	; (80056bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a8:	091b      	lsrs	r3, r3, #4
 80054aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054ae:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80054b0:	4b82      	ldr	r3, [pc, #520]	; (80056bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80054ba:	4b80      	ldr	r3, [pc, #512]	; (80056bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054be:	08db      	lsrs	r3, r3, #3
 80054c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	fb02 f303 	mul.w	r3, r2, r3
 80054ca:	ee07 3a90 	vmov	s15, r3
 80054ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054d2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 80e1 	beq.w	80056a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	f000 8083 	beq.w	80055ec <HAL_RCC_GetSysClockFreq+0x204>
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	f200 80a1 	bhi.w	8005630 <HAL_RCC_GetSysClockFreq+0x248>
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d003      	beq.n	80054fc <HAL_RCC_GetSysClockFreq+0x114>
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d056      	beq.n	80055a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80054fa:	e099      	b.n	8005630 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054fc:	4b6f      	ldr	r3, [pc, #444]	; (80056bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0320 	and.w	r3, r3, #32
 8005504:	2b00      	cmp	r3, #0
 8005506:	d02d      	beq.n	8005564 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005508:	4b6c      	ldr	r3, [pc, #432]	; (80056bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	08db      	lsrs	r3, r3, #3
 800550e:	f003 0303 	and.w	r3, r3, #3
 8005512:	4a6b      	ldr	r2, [pc, #428]	; (80056c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005514:	fa22 f303 	lsr.w	r3, r2, r3
 8005518:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	ee07 3a90 	vmov	s15, r3
 8005520:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	ee07 3a90 	vmov	s15, r3
 800552a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800552e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005532:	4b62      	ldr	r3, [pc, #392]	; (80056bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800553a:	ee07 3a90 	vmov	s15, r3
 800553e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005542:	ed97 6a02 	vldr	s12, [r7, #8]
 8005546:	eddf 5a61 	vldr	s11, [pc, #388]	; 80056cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800554a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800554e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005552:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800555a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800555e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005562:	e087      	b.n	8005674 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	ee07 3a90 	vmov	s15, r3
 800556a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800556e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80056d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005576:	4b51      	ldr	r3, [pc, #324]	; (80056bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800557e:	ee07 3a90 	vmov	s15, r3
 8005582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005586:	ed97 6a02 	vldr	s12, [r7, #8]
 800558a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80056cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800558e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800559a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800559e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055a6:	e065      	b.n	8005674 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	ee07 3a90 	vmov	s15, r3
 80055ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80056d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80055b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ba:	4b40      	ldr	r3, [pc, #256]	; (80056bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055c2:	ee07 3a90 	vmov	s15, r3
 80055c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80055ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80056cc <HAL_RCC_GetSysClockFreq+0x2e4>
 80055d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055ea:	e043      	b.n	8005674 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	ee07 3a90 	vmov	s15, r3
 80055f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80056d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80055fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055fe:	4b2f      	ldr	r3, [pc, #188]	; (80056bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005606:	ee07 3a90 	vmov	s15, r3
 800560a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800560e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005612:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80056cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800561a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800561e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800562a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800562e:	e021      	b.n	8005674 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	ee07 3a90 	vmov	s15, r3
 8005636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800563a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80056d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800563e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005642:	4b1e      	ldr	r3, [pc, #120]	; (80056bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800564a:	ee07 3a90 	vmov	s15, r3
 800564e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005652:	ed97 6a02 	vldr	s12, [r7, #8]
 8005656:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80056cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800565a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800565e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005662:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800566a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800566e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005672:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005674:	4b11      	ldr	r3, [pc, #68]	; (80056bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005678:	0a5b      	lsrs	r3, r3, #9
 800567a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800567e:	3301      	adds	r3, #1
 8005680:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	ee07 3a90 	vmov	s15, r3
 8005688:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800568c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005690:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005694:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005698:	ee17 3a90 	vmov	r3, s15
 800569c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800569e:	e005      	b.n	80056ac <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	61bb      	str	r3, [r7, #24]
    break;
 80056a4:	e002      	b.n	80056ac <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80056a6:	4b07      	ldr	r3, [pc, #28]	; (80056c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80056a8:	61bb      	str	r3, [r7, #24]
    break;
 80056aa:	bf00      	nop
  }

  return sysclockfreq;
 80056ac:	69bb      	ldr	r3, [r7, #24]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3724      	adds	r7, #36	; 0x24
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	58024400 	.word	0x58024400
 80056c0:	03d09000 	.word	0x03d09000
 80056c4:	003d0900 	.word	0x003d0900
 80056c8:	02dc6c00 	.word	0x02dc6c00
 80056cc:	46000000 	.word	0x46000000
 80056d0:	4c742400 	.word	0x4c742400
 80056d4:	4a742400 	.word	0x4a742400
 80056d8:	4c371b00 	.word	0x4c371b00

080056dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80056e2:	f7ff fe81 	bl	80053e8 <HAL_RCC_GetSysClockFreq>
 80056e6:	4602      	mov	r2, r0
 80056e8:	4b10      	ldr	r3, [pc, #64]	; (800572c <HAL_RCC_GetHCLKFreq+0x50>)
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	0a1b      	lsrs	r3, r3, #8
 80056ee:	f003 030f 	and.w	r3, r3, #15
 80056f2:	490f      	ldr	r1, [pc, #60]	; (8005730 <HAL_RCC_GetHCLKFreq+0x54>)
 80056f4:	5ccb      	ldrb	r3, [r1, r3]
 80056f6:	f003 031f 	and.w	r3, r3, #31
 80056fa:	fa22 f303 	lsr.w	r3, r2, r3
 80056fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005700:	4b0a      	ldr	r3, [pc, #40]	; (800572c <HAL_RCC_GetHCLKFreq+0x50>)
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	f003 030f 	and.w	r3, r3, #15
 8005708:	4a09      	ldr	r2, [pc, #36]	; (8005730 <HAL_RCC_GetHCLKFreq+0x54>)
 800570a:	5cd3      	ldrb	r3, [r2, r3]
 800570c:	f003 031f 	and.w	r3, r3, #31
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	fa22 f303 	lsr.w	r3, r2, r3
 8005716:	4a07      	ldr	r2, [pc, #28]	; (8005734 <HAL_RCC_GetHCLKFreq+0x58>)
 8005718:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800571a:	4a07      	ldr	r2, [pc, #28]	; (8005738 <HAL_RCC_GetHCLKFreq+0x5c>)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005720:	4b04      	ldr	r3, [pc, #16]	; (8005734 <HAL_RCC_GetHCLKFreq+0x58>)
 8005722:	681b      	ldr	r3, [r3, #0]
}
 8005724:	4618      	mov	r0, r3
 8005726:	3708      	adds	r7, #8
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	58024400 	.word	0x58024400
 8005730:	0800a60c 	.word	0x0800a60c
 8005734:	20000004 	.word	0x20000004
 8005738:	20000000 	.word	0x20000000

0800573c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005740:	f7ff ffcc 	bl	80056dc <HAL_RCC_GetHCLKFreq>
 8005744:	4602      	mov	r2, r0
 8005746:	4b06      	ldr	r3, [pc, #24]	; (8005760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005748:	69db      	ldr	r3, [r3, #28]
 800574a:	091b      	lsrs	r3, r3, #4
 800574c:	f003 0307 	and.w	r3, r3, #7
 8005750:	4904      	ldr	r1, [pc, #16]	; (8005764 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005752:	5ccb      	ldrb	r3, [r1, r3]
 8005754:	f003 031f 	and.w	r3, r3, #31
 8005758:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800575c:	4618      	mov	r0, r3
 800575e:	bd80      	pop	{r7, pc}
 8005760:	58024400 	.word	0x58024400
 8005764:	0800a60c 	.word	0x0800a60c

08005768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800576c:	f7ff ffb6 	bl	80056dc <HAL_RCC_GetHCLKFreq>
 8005770:	4602      	mov	r2, r0
 8005772:	4b06      	ldr	r3, [pc, #24]	; (800578c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	0a1b      	lsrs	r3, r3, #8
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	4904      	ldr	r1, [pc, #16]	; (8005790 <HAL_RCC_GetPCLK2Freq+0x28>)
 800577e:	5ccb      	ldrb	r3, [r1, r3]
 8005780:	f003 031f 	and.w	r3, r3, #31
 8005784:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005788:	4618      	mov	r0, r3
 800578a:	bd80      	pop	{r7, pc}
 800578c:	58024400 	.word	0x58024400
 8005790:	0800a60c 	.word	0x0800a60c

08005794 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800579c:	2300      	movs	r3, #0
 800579e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057a0:	2300      	movs	r3, #0
 80057a2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d03f      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80057b8:	d02a      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80057ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80057be:	d824      	bhi.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80057c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057c4:	d018      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80057c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057ca:	d81e      	bhi.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d003      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80057d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057d4:	d007      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80057d6:	e018      	b.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057d8:	4bab      	ldr	r3, [pc, #684]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057dc:	4aaa      	ldr	r2, [pc, #680]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80057e4:	e015      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	3304      	adds	r3, #4
 80057ea:	2102      	movs	r1, #2
 80057ec:	4618      	mov	r0, r3
 80057ee:	f001 f9cf 	bl	8006b90 <RCCEx_PLL2_Config>
 80057f2:	4603      	mov	r3, r0
 80057f4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80057f6:	e00c      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	3324      	adds	r3, #36	; 0x24
 80057fc:	2102      	movs	r1, #2
 80057fe:	4618      	mov	r0, r3
 8005800:	f001 fa78 	bl	8006cf4 <RCCEx_PLL3_Config>
 8005804:	4603      	mov	r3, r0
 8005806:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005808:	e003      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	75fb      	strb	r3, [r7, #23]
      break;
 800580e:	e000      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005810:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005812:	7dfb      	ldrb	r3, [r7, #23]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d109      	bne.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005818:	4b9b      	ldr	r3, [pc, #620]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800581a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800581c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005824:	4998      	ldr	r1, [pc, #608]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005826:	4313      	orrs	r3, r2
 8005828:	650b      	str	r3, [r1, #80]	; 0x50
 800582a:	e001      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800582c:	7dfb      	ldrb	r3, [r7, #23]
 800582e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005838:	2b00      	cmp	r3, #0
 800583a:	d03d      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005840:	2b04      	cmp	r3, #4
 8005842:	d826      	bhi.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005844:	a201      	add	r2, pc, #4	; (adr r2, 800584c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584a:	bf00      	nop
 800584c:	08005861 	.word	0x08005861
 8005850:	0800586f 	.word	0x0800586f
 8005854:	08005881 	.word	0x08005881
 8005858:	08005899 	.word	0x08005899
 800585c:	08005899 	.word	0x08005899
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005860:	4b89      	ldr	r3, [pc, #548]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005864:	4a88      	ldr	r2, [pc, #544]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005866:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800586a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800586c:	e015      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	3304      	adds	r3, #4
 8005872:	2100      	movs	r1, #0
 8005874:	4618      	mov	r0, r3
 8005876:	f001 f98b 	bl	8006b90 <RCCEx_PLL2_Config>
 800587a:	4603      	mov	r3, r0
 800587c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800587e:	e00c      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	3324      	adds	r3, #36	; 0x24
 8005884:	2100      	movs	r1, #0
 8005886:	4618      	mov	r0, r3
 8005888:	f001 fa34 	bl	8006cf4 <RCCEx_PLL3_Config>
 800588c:	4603      	mov	r3, r0
 800588e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005890:	e003      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	75fb      	strb	r3, [r7, #23]
      break;
 8005896:	e000      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005898:	bf00      	nop
    }

    if(ret == HAL_OK)
 800589a:	7dfb      	ldrb	r3, [r7, #23]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d109      	bne.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058a0:	4b79      	ldr	r3, [pc, #484]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058a4:	f023 0207 	bic.w	r2, r3, #7
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ac:	4976      	ldr	r1, [pc, #472]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	650b      	str	r3, [r1, #80]	; 0x50
 80058b2:	e001      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b4:	7dfb      	ldrb	r3, [r7, #23]
 80058b6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d042      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058cc:	d02b      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80058ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058d2:	d825      	bhi.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80058d4:	2bc0      	cmp	r3, #192	; 0xc0
 80058d6:	d028      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80058d8:	2bc0      	cmp	r3, #192	; 0xc0
 80058da:	d821      	bhi.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80058dc:	2b80      	cmp	r3, #128	; 0x80
 80058de:	d016      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80058e0:	2b80      	cmp	r3, #128	; 0x80
 80058e2:	d81d      	bhi.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80058e8:	2b40      	cmp	r3, #64	; 0x40
 80058ea:	d007      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x168>
 80058ec:	e018      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058ee:	4b66      	ldr	r3, [pc, #408]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f2:	4a65      	ldr	r2, [pc, #404]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80058fa:	e017      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	3304      	adds	r3, #4
 8005900:	2100      	movs	r1, #0
 8005902:	4618      	mov	r0, r3
 8005904:	f001 f944 	bl	8006b90 <RCCEx_PLL2_Config>
 8005908:	4603      	mov	r3, r0
 800590a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800590c:	e00e      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	3324      	adds	r3, #36	; 0x24
 8005912:	2100      	movs	r1, #0
 8005914:	4618      	mov	r0, r3
 8005916:	f001 f9ed 	bl	8006cf4 <RCCEx_PLL3_Config>
 800591a:	4603      	mov	r3, r0
 800591c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800591e:	e005      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	75fb      	strb	r3, [r7, #23]
      break;
 8005924:	e002      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005926:	bf00      	nop
 8005928:	e000      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800592a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800592c:	7dfb      	ldrb	r3, [r7, #23]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d109      	bne.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005932:	4b55      	ldr	r3, [pc, #340]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005936:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800593e:	4952      	ldr	r1, [pc, #328]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005940:	4313      	orrs	r3, r2
 8005942:	650b      	str	r3, [r1, #80]	; 0x50
 8005944:	e001      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005946:	7dfb      	ldrb	r3, [r7, #23]
 8005948:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005952:	2b00      	cmp	r3, #0
 8005954:	d049      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800595c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005960:	d030      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005962:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005966:	d82a      	bhi.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005968:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800596c:	d02c      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800596e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005972:	d824      	bhi.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005974:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005978:	d018      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x218>
 800597a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800597e:	d81e      	bhi.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005980:	2b00      	cmp	r3, #0
 8005982:	d003      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005984:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005988:	d007      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800598a:	e018      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800598c:	4b3e      	ldr	r3, [pc, #248]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800598e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005990:	4a3d      	ldr	r2, [pc, #244]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005996:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005998:	e017      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	3304      	adds	r3, #4
 800599e:	2100      	movs	r1, #0
 80059a0:	4618      	mov	r0, r3
 80059a2:	f001 f8f5 	bl	8006b90 <RCCEx_PLL2_Config>
 80059a6:	4603      	mov	r3, r0
 80059a8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80059aa:	e00e      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	3324      	adds	r3, #36	; 0x24
 80059b0:	2100      	movs	r1, #0
 80059b2:	4618      	mov	r0, r3
 80059b4:	f001 f99e 	bl	8006cf4 <RCCEx_PLL3_Config>
 80059b8:	4603      	mov	r3, r0
 80059ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059bc:	e005      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	75fb      	strb	r3, [r7, #23]
      break;
 80059c2:	e002      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80059c4:	bf00      	nop
 80059c6:	e000      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80059c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059ca:	7dfb      	ldrb	r3, [r7, #23]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d10a      	bne.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80059d0:	4b2d      	ldr	r3, [pc, #180]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059d4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80059de:	492a      	ldr	r1, [pc, #168]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	658b      	str	r3, [r1, #88]	; 0x58
 80059e4:	e001      	b.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e6:	7dfb      	ldrb	r3, [r7, #23]
 80059e8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d04c      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80059fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a00:	d030      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005a02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a06:	d82a      	bhi.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005a08:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a0c:	d02c      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005a0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a12:	d824      	bhi.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005a14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a18:	d018      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005a1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a1e:	d81e      	bhi.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d003      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005a24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a28:	d007      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005a2a:	e018      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a2c:	4b16      	ldr	r3, [pc, #88]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a30:	4a15      	ldr	r2, [pc, #84]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a38:	e017      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	2100      	movs	r1, #0
 8005a40:	4618      	mov	r0, r3
 8005a42:	f001 f8a5 	bl	8006b90 <RCCEx_PLL2_Config>
 8005a46:	4603      	mov	r3, r0
 8005a48:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005a4a:	e00e      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	3324      	adds	r3, #36	; 0x24
 8005a50:	2100      	movs	r1, #0
 8005a52:	4618      	mov	r0, r3
 8005a54:	f001 f94e 	bl	8006cf4 <RCCEx_PLL3_Config>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a5c:	e005      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	75fb      	strb	r3, [r7, #23]
      break;
 8005a62:	e002      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005a64:	bf00      	nop
 8005a66:	e000      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005a68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a6a:	7dfb      	ldrb	r3, [r7, #23]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10d      	bne.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005a70:	4b05      	ldr	r3, [pc, #20]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a74:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005a7e:	4902      	ldr	r1, [pc, #8]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	658b      	str	r3, [r1, #88]	; 0x58
 8005a84:	e004      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005a86:	bf00      	nop
 8005a88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a8c:	7dfb      	ldrb	r3, [r7, #23]
 8005a8e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d032      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aa0:	2b30      	cmp	r3, #48	; 0x30
 8005aa2:	d01c      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005aa4:	2b30      	cmp	r3, #48	; 0x30
 8005aa6:	d817      	bhi.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005aa8:	2b20      	cmp	r3, #32
 8005aaa:	d00c      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005aac:	2b20      	cmp	r3, #32
 8005aae:	d813      	bhi.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d016      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005ab4:	2b10      	cmp	r3, #16
 8005ab6:	d10f      	bne.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ab8:	4baf      	ldr	r3, [pc, #700]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abc:	4aae      	ldr	r2, [pc, #696]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ac2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005ac4:	e00e      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	3304      	adds	r3, #4
 8005aca:	2102      	movs	r1, #2
 8005acc:	4618      	mov	r0, r3
 8005ace:	f001 f85f 	bl	8006b90 <RCCEx_PLL2_Config>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005ad6:	e005      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	75fb      	strb	r3, [r7, #23]
      break;
 8005adc:	e002      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005ade:	bf00      	nop
 8005ae0:	e000      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005ae2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ae4:	7dfb      	ldrb	r3, [r7, #23]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d109      	bne.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005aea:	4ba3      	ldr	r3, [pc, #652]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005af6:	49a0      	ldr	r1, [pc, #640]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005afc:	e001      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005afe:	7dfb      	ldrb	r3, [r7, #23]
 8005b00:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d047      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b16:	d030      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005b18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b1c:	d82a      	bhi.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005b1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b22:	d02c      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005b24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b28:	d824      	bhi.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b2e:	d018      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b34:	d81e      	bhi.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8005b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b3e:	d007      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005b40:	e018      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b42:	4b8d      	ldr	r3, [pc, #564]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b46:	4a8c      	ldr	r2, [pc, #560]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005b4e:	e017      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	3304      	adds	r3, #4
 8005b54:	2100      	movs	r1, #0
 8005b56:	4618      	mov	r0, r3
 8005b58:	f001 f81a 	bl	8006b90 <RCCEx_PLL2_Config>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005b60:	e00e      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	3324      	adds	r3, #36	; 0x24
 8005b66:	2100      	movs	r1, #0
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f001 f8c3 	bl	8006cf4 <RCCEx_PLL3_Config>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005b72:	e005      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	75fb      	strb	r3, [r7, #23]
      break;
 8005b78:	e002      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005b7a:	bf00      	nop
 8005b7c:	e000      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005b7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b80:	7dfb      	ldrb	r3, [r7, #23]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d109      	bne.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005b86:	4b7c      	ldr	r3, [pc, #496]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b8a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b92:	4979      	ldr	r1, [pc, #484]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	650b      	str	r3, [r1, #80]	; 0x50
 8005b98:	e001      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b9a:	7dfb      	ldrb	r3, [r7, #23]
 8005b9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d049      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bb2:	d02e      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005bb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bb8:	d828      	bhi.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005bba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bbe:	d02a      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005bc0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bc4:	d822      	bhi.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005bc6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005bca:	d026      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005bcc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005bd0:	d81c      	bhi.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005bd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bd6:	d010      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x466>
 8005bd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bdc:	d816      	bhi.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d01d      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005be6:	d111      	bne.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	3304      	adds	r3, #4
 8005bec:	2101      	movs	r1, #1
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 ffce 	bl	8006b90 <RCCEx_PLL2_Config>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005bf8:	e012      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	3324      	adds	r3, #36	; 0x24
 8005bfe:	2101      	movs	r1, #1
 8005c00:	4618      	mov	r0, r3
 8005c02:	f001 f877 	bl	8006cf4 <RCCEx_PLL3_Config>
 8005c06:	4603      	mov	r3, r0
 8005c08:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005c0a:	e009      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	75fb      	strb	r3, [r7, #23]
      break;
 8005c10:	e006      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005c12:	bf00      	nop
 8005c14:	e004      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005c16:	bf00      	nop
 8005c18:	e002      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005c1a:	bf00      	nop
 8005c1c:	e000      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005c1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c20:	7dfb      	ldrb	r3, [r7, #23]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d109      	bne.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005c26:	4b54      	ldr	r3, [pc, #336]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c2a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c32:	4951      	ldr	r1, [pc, #324]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	650b      	str	r3, [r1, #80]	; 0x50
 8005c38:	e001      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c3a:	7dfb      	ldrb	r3, [r7, #23]
 8005c3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d04b      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005c50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c54:	d02e      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8005c56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c5a:	d828      	bhi.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c60:	d02a      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c66:	d822      	bhi.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005c68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c6c:	d026      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005c6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c72:	d81c      	bhi.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005c74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c78:	d010      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005c7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c7e:	d816      	bhi.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d01d      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005c84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c88:	d111      	bne.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	2101      	movs	r1, #1
 8005c90:	4618      	mov	r0, r3
 8005c92:	f000 ff7d 	bl	8006b90 <RCCEx_PLL2_Config>
 8005c96:	4603      	mov	r3, r0
 8005c98:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005c9a:	e012      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	3324      	adds	r3, #36	; 0x24
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f001 f826 	bl	8006cf4 <RCCEx_PLL3_Config>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005cac:	e009      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	75fb      	strb	r3, [r7, #23]
      break;
 8005cb2:	e006      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005cb4:	bf00      	nop
 8005cb6:	e004      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005cb8:	bf00      	nop
 8005cba:	e002      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005cbc:	bf00      	nop
 8005cbe:	e000      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005cc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cc2:	7dfb      	ldrb	r3, [r7, #23]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10a      	bne.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005cc8:	4b2b      	ldr	r3, [pc, #172]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ccc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005cd6:	4928      	ldr	r1, [pc, #160]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	658b      	str	r3, [r1, #88]	; 0x58
 8005cdc:	e001      	b.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cde:	7dfb      	ldrb	r3, [r7, #23]
 8005ce0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d02f      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cf6:	d00e      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005cf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cfc:	d814      	bhi.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d015      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005d02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d06:	d10f      	bne.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d08:	4b1b      	ldr	r3, [pc, #108]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0c:	4a1a      	ldr	r2, [pc, #104]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005d14:	e00c      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	3304      	adds	r3, #4
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f000 ff37 	bl	8006b90 <RCCEx_PLL2_Config>
 8005d22:	4603      	mov	r3, r0
 8005d24:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005d26:	e003      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d2c:	e000      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005d2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d30:	7dfb      	ldrb	r3, [r7, #23]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d109      	bne.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d36:	4b10      	ldr	r3, [pc, #64]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d3a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d42:	490d      	ldr	r1, [pc, #52]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	650b      	str	r3, [r1, #80]	; 0x50
 8005d48:	e001      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d4a:	7dfb      	ldrb	r3, [r7, #23]
 8005d4c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d033      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d5e:	2b03      	cmp	r3, #3
 8005d60:	d81c      	bhi.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005d62:	a201      	add	r2, pc, #4	; (adr r2, 8005d68 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8005d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d68:	08005da3 	.word	0x08005da3
 8005d6c:	08005d7d 	.word	0x08005d7d
 8005d70:	08005d8b 	.word	0x08005d8b
 8005d74:	08005da3 	.word	0x08005da3
 8005d78:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d7c:	4bb8      	ldr	r3, [pc, #736]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d80:	4ab7      	ldr	r2, [pc, #732]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005d88:	e00c      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	3304      	adds	r3, #4
 8005d8e:	2102      	movs	r1, #2
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 fefd 	bl	8006b90 <RCCEx_PLL2_Config>
 8005d96:	4603      	mov	r3, r0
 8005d98:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005d9a:	e003      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	75fb      	strb	r3, [r7, #23]
      break;
 8005da0:	e000      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005da2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005da4:	7dfb      	ldrb	r3, [r7, #23]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d109      	bne.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005daa:	4bad      	ldr	r3, [pc, #692]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dae:	f023 0203 	bic.w	r2, r3, #3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db6:	49aa      	ldr	r1, [pc, #680]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005dbc:	e001      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dbe:	7dfb      	ldrb	r3, [r7, #23]
 8005dc0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 8086 	beq.w	8005edc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005dd0:	4ba4      	ldr	r3, [pc, #656]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4aa3      	ldr	r2, [pc, #652]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ddc:	f7fb ffd4 	bl	8001d88 <HAL_GetTick>
 8005de0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005de2:	e009      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005de4:	f7fb ffd0 	bl	8001d88 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	2b64      	cmp	r3, #100	; 0x64
 8005df0:	d902      	bls.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	75fb      	strb	r3, [r7, #23]
        break;
 8005df6:	e005      	b.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005df8:	4b9a      	ldr	r3, [pc, #616]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d0ef      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005e04:	7dfb      	ldrb	r3, [r7, #23]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d166      	bne.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005e0a:	4b95      	ldr	r3, [pc, #596]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e14:	4053      	eors	r3, r2
 8005e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d013      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e1e:	4b90      	ldr	r3, [pc, #576]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e26:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e28:	4b8d      	ldr	r3, [pc, #564]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e2c:	4a8c      	ldr	r2, [pc, #560]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e32:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e34:	4b8a      	ldr	r3, [pc, #552]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e38:	4a89      	ldr	r2, [pc, #548]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e3e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005e40:	4a87      	ldr	r2, [pc, #540]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e50:	d115      	bne.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e52:	f7fb ff99 	bl	8001d88 <HAL_GetTick>
 8005e56:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e58:	e00b      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e5a:	f7fb ff95 	bl	8001d88 <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d902      	bls.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	75fb      	strb	r3, [r7, #23]
            break;
 8005e70:	e005      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e72:	4b7b      	ldr	r3, [pc, #492]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0ed      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005e7e:	7dfb      	ldrb	r3, [r7, #23]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d126      	bne.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e92:	d10d      	bne.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005e94:	4b72      	ldr	r3, [pc, #456]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ea2:	0919      	lsrs	r1, r3, #4
 8005ea4:	4b70      	ldr	r3, [pc, #448]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8005ea6:	400b      	ands	r3, r1
 8005ea8:	496d      	ldr	r1, [pc, #436]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	610b      	str	r3, [r1, #16]
 8005eae:	e005      	b.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005eb0:	4b6b      	ldr	r3, [pc, #428]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	4a6a      	ldr	r2, [pc, #424]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005eb6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005eba:	6113      	str	r3, [r2, #16]
 8005ebc:	4b68      	ldr	r3, [pc, #416]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ebe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ec6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005eca:	4965      	ldr	r1, [pc, #404]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	670b      	str	r3, [r1, #112]	; 0x70
 8005ed0:	e004      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ed2:	7dfb      	ldrb	r3, [r7, #23]
 8005ed4:	75bb      	strb	r3, [r7, #22]
 8005ed6:	e001      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed8:	7dfb      	ldrb	r3, [r7, #23]
 8005eda:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d07e      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005eec:	2b28      	cmp	r3, #40	; 0x28
 8005eee:	d867      	bhi.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005ef0:	a201      	add	r2, pc, #4	; (adr r2, 8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef6:	bf00      	nop
 8005ef8:	08005fc7 	.word	0x08005fc7
 8005efc:	08005fc1 	.word	0x08005fc1
 8005f00:	08005fc1 	.word	0x08005fc1
 8005f04:	08005fc1 	.word	0x08005fc1
 8005f08:	08005fc1 	.word	0x08005fc1
 8005f0c:	08005fc1 	.word	0x08005fc1
 8005f10:	08005fc1 	.word	0x08005fc1
 8005f14:	08005fc1 	.word	0x08005fc1
 8005f18:	08005f9d 	.word	0x08005f9d
 8005f1c:	08005fc1 	.word	0x08005fc1
 8005f20:	08005fc1 	.word	0x08005fc1
 8005f24:	08005fc1 	.word	0x08005fc1
 8005f28:	08005fc1 	.word	0x08005fc1
 8005f2c:	08005fc1 	.word	0x08005fc1
 8005f30:	08005fc1 	.word	0x08005fc1
 8005f34:	08005fc1 	.word	0x08005fc1
 8005f38:	08005faf 	.word	0x08005faf
 8005f3c:	08005fc1 	.word	0x08005fc1
 8005f40:	08005fc1 	.word	0x08005fc1
 8005f44:	08005fc1 	.word	0x08005fc1
 8005f48:	08005fc1 	.word	0x08005fc1
 8005f4c:	08005fc1 	.word	0x08005fc1
 8005f50:	08005fc1 	.word	0x08005fc1
 8005f54:	08005fc1 	.word	0x08005fc1
 8005f58:	08005fc7 	.word	0x08005fc7
 8005f5c:	08005fc1 	.word	0x08005fc1
 8005f60:	08005fc1 	.word	0x08005fc1
 8005f64:	08005fc1 	.word	0x08005fc1
 8005f68:	08005fc1 	.word	0x08005fc1
 8005f6c:	08005fc1 	.word	0x08005fc1
 8005f70:	08005fc1 	.word	0x08005fc1
 8005f74:	08005fc1 	.word	0x08005fc1
 8005f78:	08005fc7 	.word	0x08005fc7
 8005f7c:	08005fc1 	.word	0x08005fc1
 8005f80:	08005fc1 	.word	0x08005fc1
 8005f84:	08005fc1 	.word	0x08005fc1
 8005f88:	08005fc1 	.word	0x08005fc1
 8005f8c:	08005fc1 	.word	0x08005fc1
 8005f90:	08005fc1 	.word	0x08005fc1
 8005f94:	08005fc1 	.word	0x08005fc1
 8005f98:	08005fc7 	.word	0x08005fc7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	3304      	adds	r3, #4
 8005fa0:	2101      	movs	r1, #1
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f000 fdf4 	bl	8006b90 <RCCEx_PLL2_Config>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005fac:	e00c      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	3324      	adds	r3, #36	; 0x24
 8005fb2:	2101      	movs	r1, #1
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f000 fe9d 	bl	8006cf4 <RCCEx_PLL3_Config>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005fbe:	e003      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	75fb      	strb	r3, [r7, #23]
      break;
 8005fc4:	e000      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8005fc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fc8:	7dfb      	ldrb	r3, [r7, #23]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d109      	bne.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005fce:	4b24      	ldr	r3, [pc, #144]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fda:	4921      	ldr	r1, [pc, #132]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	654b      	str	r3, [r1, #84]	; 0x54
 8005fe0:	e001      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fe2:	7dfb      	ldrb	r3, [r7, #23]
 8005fe4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d03e      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ff6:	2b05      	cmp	r3, #5
 8005ff8:	d820      	bhi.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8005ffa:	a201      	add	r2, pc, #4	; (adr r2, 8006000 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8005ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006000:	08006043 	.word	0x08006043
 8006004:	08006019 	.word	0x08006019
 8006008:	0800602b 	.word	0x0800602b
 800600c:	08006043 	.word	0x08006043
 8006010:	08006043 	.word	0x08006043
 8006014:	08006043 	.word	0x08006043
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	3304      	adds	r3, #4
 800601c:	2101      	movs	r1, #1
 800601e:	4618      	mov	r0, r3
 8006020:	f000 fdb6 	bl	8006b90 <RCCEx_PLL2_Config>
 8006024:	4603      	mov	r3, r0
 8006026:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006028:	e00c      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	3324      	adds	r3, #36	; 0x24
 800602e:	2101      	movs	r1, #1
 8006030:	4618      	mov	r0, r3
 8006032:	f000 fe5f 	bl	8006cf4 <RCCEx_PLL3_Config>
 8006036:	4603      	mov	r3, r0
 8006038:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800603a:	e003      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	75fb      	strb	r3, [r7, #23]
      break;
 8006040:	e000      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006042:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006044:	7dfb      	ldrb	r3, [r7, #23]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d110      	bne.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800604a:	4b05      	ldr	r3, [pc, #20]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800604c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800604e:	f023 0207 	bic.w	r2, r3, #7
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006056:	4902      	ldr	r1, [pc, #8]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006058:	4313      	orrs	r3, r2
 800605a:	654b      	str	r3, [r1, #84]	; 0x54
 800605c:	e008      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800605e:	bf00      	nop
 8006060:	58024400 	.word	0x58024400
 8006064:	58024800 	.word	0x58024800
 8006068:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800606c:	7dfb      	ldrb	r3, [r7, #23]
 800606e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0304 	and.w	r3, r3, #4
 8006078:	2b00      	cmp	r3, #0
 800607a:	d039      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006082:	2b05      	cmp	r3, #5
 8006084:	d820      	bhi.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006086:	a201      	add	r2, pc, #4	; (adr r2, 800608c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608c:	080060cf 	.word	0x080060cf
 8006090:	080060a5 	.word	0x080060a5
 8006094:	080060b7 	.word	0x080060b7
 8006098:	080060cf 	.word	0x080060cf
 800609c:	080060cf 	.word	0x080060cf
 80060a0:	080060cf 	.word	0x080060cf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	3304      	adds	r3, #4
 80060a8:	2101      	movs	r1, #1
 80060aa:	4618      	mov	r0, r3
 80060ac:	f000 fd70 	bl	8006b90 <RCCEx_PLL2_Config>
 80060b0:	4603      	mov	r3, r0
 80060b2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80060b4:	e00c      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	3324      	adds	r3, #36	; 0x24
 80060ba:	2101      	movs	r1, #1
 80060bc:	4618      	mov	r0, r3
 80060be:	f000 fe19 	bl	8006cf4 <RCCEx_PLL3_Config>
 80060c2:	4603      	mov	r3, r0
 80060c4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80060c6:	e003      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	75fb      	strb	r3, [r7, #23]
      break;
 80060cc:	e000      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80060ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060d0:	7dfb      	ldrb	r3, [r7, #23]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10a      	bne.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060d6:	4bb7      	ldr	r3, [pc, #732]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80060d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060da:	f023 0207 	bic.w	r2, r3, #7
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060e4:	49b3      	ldr	r1, [pc, #716]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	658b      	str	r3, [r1, #88]	; 0x58
 80060ea:	e001      	b.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ec:	7dfb      	ldrb	r3, [r7, #23]
 80060ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0320 	and.w	r3, r3, #32
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d04b      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006102:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006106:	d02e      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006108:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800610c:	d828      	bhi.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800610e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006112:	d02a      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006118:	d822      	bhi.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800611a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800611e:	d026      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006120:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006124:	d81c      	bhi.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006126:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800612a:	d010      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800612c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006130:	d816      	bhi.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006132:	2b00      	cmp	r3, #0
 8006134:	d01d      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006136:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800613a:	d111      	bne.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	3304      	adds	r3, #4
 8006140:	2100      	movs	r1, #0
 8006142:	4618      	mov	r0, r3
 8006144:	f000 fd24 	bl	8006b90 <RCCEx_PLL2_Config>
 8006148:	4603      	mov	r3, r0
 800614a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800614c:	e012      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	3324      	adds	r3, #36	; 0x24
 8006152:	2102      	movs	r1, #2
 8006154:	4618      	mov	r0, r3
 8006156:	f000 fdcd 	bl	8006cf4 <RCCEx_PLL3_Config>
 800615a:	4603      	mov	r3, r0
 800615c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800615e:	e009      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	75fb      	strb	r3, [r7, #23]
      break;
 8006164:	e006      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006166:	bf00      	nop
 8006168:	e004      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800616a:	bf00      	nop
 800616c:	e002      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800616e:	bf00      	nop
 8006170:	e000      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006172:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006174:	7dfb      	ldrb	r3, [r7, #23]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10a      	bne.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800617a:	4b8e      	ldr	r3, [pc, #568]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800617c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800617e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006188:	498a      	ldr	r1, [pc, #552]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800618a:	4313      	orrs	r3, r2
 800618c:	654b      	str	r3, [r1, #84]	; 0x54
 800618e:	e001      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006190:	7dfb      	ldrb	r3, [r7, #23]
 8006192:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619c:	2b00      	cmp	r3, #0
 800619e:	d04b      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061a6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80061aa:	d02e      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80061ac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80061b0:	d828      	bhi.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80061b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b6:	d02a      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80061b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061bc:	d822      	bhi.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80061be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061c2:	d026      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80061c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061c8:	d81c      	bhi.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80061ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061ce:	d010      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80061d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061d4:	d816      	bhi.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d01d      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80061da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061de:	d111      	bne.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	3304      	adds	r3, #4
 80061e4:	2100      	movs	r1, #0
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 fcd2 	bl	8006b90 <RCCEx_PLL2_Config>
 80061ec:	4603      	mov	r3, r0
 80061ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80061f0:	e012      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	3324      	adds	r3, #36	; 0x24
 80061f6:	2102      	movs	r1, #2
 80061f8:	4618      	mov	r0, r3
 80061fa:	f000 fd7b 	bl	8006cf4 <RCCEx_PLL3_Config>
 80061fe:	4603      	mov	r3, r0
 8006200:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006202:	e009      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	75fb      	strb	r3, [r7, #23]
      break;
 8006208:	e006      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800620a:	bf00      	nop
 800620c:	e004      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800620e:	bf00      	nop
 8006210:	e002      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006212:	bf00      	nop
 8006214:	e000      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006216:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006218:	7dfb      	ldrb	r3, [r7, #23]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10a      	bne.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800621e:	4b65      	ldr	r3, [pc, #404]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006222:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800622c:	4961      	ldr	r1, [pc, #388]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800622e:	4313      	orrs	r3, r2
 8006230:	658b      	str	r3, [r1, #88]	; 0x58
 8006232:	e001      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006234:	7dfb      	ldrb	r3, [r7, #23]
 8006236:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006240:	2b00      	cmp	r3, #0
 8006242:	d04b      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800624a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800624e:	d02e      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006250:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006254:	d828      	bhi.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800625a:	d02a      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800625c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006260:	d822      	bhi.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006262:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006266:	d026      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006268:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800626c:	d81c      	bhi.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800626e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006272:	d010      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006274:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006278:	d816      	bhi.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800627a:	2b00      	cmp	r3, #0
 800627c:	d01d      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800627e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006282:	d111      	bne.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	3304      	adds	r3, #4
 8006288:	2100      	movs	r1, #0
 800628a:	4618      	mov	r0, r3
 800628c:	f000 fc80 	bl	8006b90 <RCCEx_PLL2_Config>
 8006290:	4603      	mov	r3, r0
 8006292:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006294:	e012      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	3324      	adds	r3, #36	; 0x24
 800629a:	2102      	movs	r1, #2
 800629c:	4618      	mov	r0, r3
 800629e:	f000 fd29 	bl	8006cf4 <RCCEx_PLL3_Config>
 80062a2:	4603      	mov	r3, r0
 80062a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80062a6:	e009      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	75fb      	strb	r3, [r7, #23]
      break;
 80062ac:	e006      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80062ae:	bf00      	nop
 80062b0:	e004      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80062b2:	bf00      	nop
 80062b4:	e002      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80062b6:	bf00      	nop
 80062b8:	e000      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80062ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062bc:	7dfb      	ldrb	r3, [r7, #23]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10a      	bne.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80062c2:	4b3c      	ldr	r3, [pc, #240]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80062c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062d0:	4938      	ldr	r1, [pc, #224]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	658b      	str	r3, [r1, #88]	; 0x58
 80062d6:	e001      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062d8:	7dfb      	ldrb	r3, [r7, #23]
 80062da:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0308 	and.w	r3, r3, #8
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d01a      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f2:	d10a      	bne.n	800630a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	3324      	adds	r3, #36	; 0x24
 80062f8:	2102      	movs	r1, #2
 80062fa:	4618      	mov	r0, r3
 80062fc:	f000 fcfa 	bl	8006cf4 <RCCEx_PLL3_Config>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d001      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800630a:	4b2a      	ldr	r3, [pc, #168]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800630c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800630e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006318:	4926      	ldr	r1, [pc, #152]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800631a:	4313      	orrs	r3, r2
 800631c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0310 	and.w	r3, r3, #16
 8006326:	2b00      	cmp	r3, #0
 8006328:	d01a      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006334:	d10a      	bne.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	3324      	adds	r3, #36	; 0x24
 800633a:	2102      	movs	r1, #2
 800633c:	4618      	mov	r0, r3
 800633e:	f000 fcd9 	bl	8006cf4 <RCCEx_PLL3_Config>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800634c:	4b19      	ldr	r3, [pc, #100]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800634e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006350:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800635a:	4916      	ldr	r1, [pc, #88]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800635c:	4313      	orrs	r3, r2
 800635e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d036      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006372:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006376:	d01f      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006378:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800637c:	d817      	bhi.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006386:	d009      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006388:	e011      	b.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	3304      	adds	r3, #4
 800638e:	2100      	movs	r1, #0
 8006390:	4618      	mov	r0, r3
 8006392:	f000 fbfd 	bl	8006b90 <RCCEx_PLL2_Config>
 8006396:	4603      	mov	r3, r0
 8006398:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800639a:	e00e      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	3324      	adds	r3, #36	; 0x24
 80063a0:	2102      	movs	r1, #2
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 fca6 	bl	8006cf4 <RCCEx_PLL3_Config>
 80063a8:	4603      	mov	r3, r0
 80063aa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80063ac:	e005      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	75fb      	strb	r3, [r7, #23]
      break;
 80063b2:	e002      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80063b4:	58024400 	.word	0x58024400
      break;
 80063b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063ba:	7dfb      	ldrb	r3, [r7, #23]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10a      	bne.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80063c0:	4b93      	ldr	r3, [pc, #588]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80063c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80063ce:	4990      	ldr	r1, [pc, #576]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	658b      	str	r3, [r1, #88]	; 0x58
 80063d4:	e001      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d6:	7dfb      	ldrb	r3, [r7, #23]
 80063d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d033      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80063f0:	d01c      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80063f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80063f6:	d816      	bhi.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80063f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063fc:	d003      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80063fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006402:	d007      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006404:	e00f      	b.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006406:	4b82      	ldr	r3, [pc, #520]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640a:	4a81      	ldr	r2, [pc, #516]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800640c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006410:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006412:	e00c      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	3324      	adds	r3, #36	; 0x24
 8006418:	2101      	movs	r1, #1
 800641a:	4618      	mov	r0, r3
 800641c:	f000 fc6a 	bl	8006cf4 <RCCEx_PLL3_Config>
 8006420:	4603      	mov	r3, r0
 8006422:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006424:	e003      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	75fb      	strb	r3, [r7, #23]
      break;
 800642a:	e000      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800642c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800642e:	7dfb      	ldrb	r3, [r7, #23]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10a      	bne.n	800644a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006434:	4b76      	ldr	r3, [pc, #472]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006438:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006442:	4973      	ldr	r1, [pc, #460]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006444:	4313      	orrs	r3, r2
 8006446:	654b      	str	r3, [r1, #84]	; 0x54
 8006448:	e001      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800644a:	7dfb      	ldrb	r3, [r7, #23]
 800644c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d029      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006466:	d007      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006468:	e00f      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800646a:	4b69      	ldr	r3, [pc, #420]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800646c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646e:	4a68      	ldr	r2, [pc, #416]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006474:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006476:	e00b      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	3304      	adds	r3, #4
 800647c:	2102      	movs	r1, #2
 800647e:	4618      	mov	r0, r3
 8006480:	f000 fb86 	bl	8006b90 <RCCEx_PLL2_Config>
 8006484:	4603      	mov	r3, r0
 8006486:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006488:	e002      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	75fb      	strb	r3, [r7, #23]
      break;
 800648e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006490:	7dfb      	ldrb	r3, [r7, #23]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d109      	bne.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006496:	4b5e      	ldr	r3, [pc, #376]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800649a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064a2:	495b      	ldr	r1, [pc, #364]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80064a4:	4313      	orrs	r3, r2
 80064a6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80064a8:	e001      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064aa:	7dfb      	ldrb	r3, [r7, #23]
 80064ac:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00a      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	3324      	adds	r3, #36	; 0x24
 80064be:	2102      	movs	r1, #2
 80064c0:	4618      	mov	r0, r3
 80064c2:	f000 fc17 	bl	8006cf4 <RCCEx_PLL3_Config>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d001      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d030      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064e4:	d017      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80064e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064ea:	d811      	bhi.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80064ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064f0:	d013      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80064f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064f6:	d80b      	bhi.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d010      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80064fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006500:	d106      	bne.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006502:	4b43      	ldr	r3, [pc, #268]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006506:	4a42      	ldr	r2, [pc, #264]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800650c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800650e:	e007      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	75fb      	strb	r3, [r7, #23]
      break;
 8006514:	e004      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006516:	bf00      	nop
 8006518:	e002      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800651a:	bf00      	nop
 800651c:	e000      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800651e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006520:	7dfb      	ldrb	r3, [r7, #23]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d109      	bne.n	800653a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006526:	4b3a      	ldr	r3, [pc, #232]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800652a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006532:	4937      	ldr	r1, [pc, #220]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006534:	4313      	orrs	r3, r2
 8006536:	654b      	str	r3, [r1, #84]	; 0x54
 8006538:	e001      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800653a:	7dfb      	ldrb	r3, [r7, #23]
 800653c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d008      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800654a:	4b31      	ldr	r3, [pc, #196]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800654c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800654e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006556:	492e      	ldr	r1, [pc, #184]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006558:	4313      	orrs	r3, r2
 800655a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d009      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006568:	4b29      	ldr	r3, [pc, #164]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006576:	4926      	ldr	r1, [pc, #152]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006578:	4313      	orrs	r3, r2
 800657a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006584:	2b00      	cmp	r3, #0
 8006586:	d008      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006588:	4b21      	ldr	r3, [pc, #132]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800658a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800658c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006594:	491e      	ldr	r1, [pc, #120]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006596:	4313      	orrs	r3, r2
 8006598:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00d      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80065a6:	4b1a      	ldr	r3, [pc, #104]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	4a19      	ldr	r2, [pc, #100]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065b0:	6113      	str	r3, [r2, #16]
 80065b2:	4b17      	ldr	r3, [pc, #92]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065b4:	691a      	ldr	r2, [r3, #16]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80065bc:	4914      	ldr	r1, [pc, #80]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	da08      	bge.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80065ca:	4b11      	ldr	r3, [pc, #68]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065d6:	490e      	ldr	r1, [pc, #56]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d009      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80065e8:	4b09      	ldr	r3, [pc, #36]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f6:	4906      	ldr	r1, [pc, #24]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80065fc:	7dbb      	ldrb	r3, [r7, #22]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8006602:	2300      	movs	r3, #0
 8006604:	e000      	b.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
}
 8006608:	4618      	mov	r0, r3
 800660a:	3718      	adds	r7, #24
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	58024400 	.word	0x58024400

08006614 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006618:	f7ff f860 	bl	80056dc <HAL_RCC_GetHCLKFreq>
 800661c:	4602      	mov	r2, r0
 800661e:	4b06      	ldr	r3, [pc, #24]	; (8006638 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	091b      	lsrs	r3, r3, #4
 8006624:	f003 0307 	and.w	r3, r3, #7
 8006628:	4904      	ldr	r1, [pc, #16]	; (800663c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800662a:	5ccb      	ldrb	r3, [r1, r3]
 800662c:	f003 031f 	and.w	r3, r3, #31
 8006630:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006634:	4618      	mov	r0, r3
 8006636:	bd80      	pop	{r7, pc}
 8006638:	58024400 	.word	0x58024400
 800663c:	0800a60c 	.word	0x0800a60c

08006640 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006640:	b480      	push	{r7}
 8006642:	b089      	sub	sp, #36	; 0x24
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006648:	4ba1      	ldr	r3, [pc, #644]	; (80068d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800664a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664c:	f003 0303 	and.w	r3, r3, #3
 8006650:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006652:	4b9f      	ldr	r3, [pc, #636]	; (80068d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006656:	0b1b      	lsrs	r3, r3, #12
 8006658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800665c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800665e:	4b9c      	ldr	r3, [pc, #624]	; (80068d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006662:	091b      	lsrs	r3, r3, #4
 8006664:	f003 0301 	and.w	r3, r3, #1
 8006668:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800666a:	4b99      	ldr	r3, [pc, #612]	; (80068d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800666c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800666e:	08db      	lsrs	r3, r3, #3
 8006670:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	fb02 f303 	mul.w	r3, r2, r3
 800667a:	ee07 3a90 	vmov	s15, r3
 800667e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006682:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	2b00      	cmp	r3, #0
 800668a:	f000 8111 	beq.w	80068b0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	2b02      	cmp	r3, #2
 8006692:	f000 8083 	beq.w	800679c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	2b02      	cmp	r3, #2
 800669a:	f200 80a1 	bhi.w	80067e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d003      	beq.n	80066ac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d056      	beq.n	8006758 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80066aa:	e099      	b.n	80067e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066ac:	4b88      	ldr	r3, [pc, #544]	; (80068d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0320 	and.w	r3, r3, #32
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d02d      	beq.n	8006714 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80066b8:	4b85      	ldr	r3, [pc, #532]	; (80068d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	08db      	lsrs	r3, r3, #3
 80066be:	f003 0303 	and.w	r3, r3, #3
 80066c2:	4a84      	ldr	r2, [pc, #528]	; (80068d4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80066c4:	fa22 f303 	lsr.w	r3, r2, r3
 80066c8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	ee07 3a90 	vmov	s15, r3
 80066d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	ee07 3a90 	vmov	s15, r3
 80066da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066e2:	4b7b      	ldr	r3, [pc, #492]	; (80068d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ea:	ee07 3a90 	vmov	s15, r3
 80066ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80066f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80068d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80066fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006702:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800670a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800670e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006712:	e087      	b.n	8006824 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	ee07 3a90 	vmov	s15, r3
 800671a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800671e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80068dc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006726:	4b6a      	ldr	r3, [pc, #424]	; (80068d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800672e:	ee07 3a90 	vmov	s15, r3
 8006732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006736:	ed97 6a03 	vldr	s12, [r7, #12]
 800673a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80068d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800673e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006746:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800674a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800674e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006752:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006756:	e065      	b.n	8006824 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	ee07 3a90 	vmov	s15, r3
 800675e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006762:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80068e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800676a:	4b59      	ldr	r3, [pc, #356]	; (80068d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800676c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006772:	ee07 3a90 	vmov	s15, r3
 8006776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800677a:	ed97 6a03 	vldr	s12, [r7, #12]
 800677e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80068d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800678a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800678e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006796:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800679a:	e043      	b.n	8006824 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	ee07 3a90 	vmov	s15, r3
 80067a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80068e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80067aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ae:	4b48      	ldr	r3, [pc, #288]	; (80068d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067b6:	ee07 3a90 	vmov	s15, r3
 80067ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067be:	ed97 6a03 	vldr	s12, [r7, #12]
 80067c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80068d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067de:	e021      	b.n	8006824 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	ee07 3a90 	vmov	s15, r3
 80067e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80068e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80067ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067f2:	4b37      	ldr	r3, [pc, #220]	; (80068d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067fa:	ee07 3a90 	vmov	s15, r3
 80067fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006802:	ed97 6a03 	vldr	s12, [r7, #12]
 8006806:	eddf 5a34 	vldr	s11, [pc, #208]	; 80068d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800680a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800680e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800681a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800681e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006822:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006824:	4b2a      	ldr	r3, [pc, #168]	; (80068d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006828:	0a5b      	lsrs	r3, r3, #9
 800682a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800682e:	ee07 3a90 	vmov	s15, r3
 8006832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006836:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800683a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800683e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006842:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800684a:	ee17 2a90 	vmov	r2, s15
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006852:	4b1f      	ldr	r3, [pc, #124]	; (80068d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006856:	0c1b      	lsrs	r3, r3, #16
 8006858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800685c:	ee07 3a90 	vmov	s15, r3
 8006860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006864:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006868:	ee37 7a87 	vadd.f32	s14, s15, s14
 800686c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006878:	ee17 2a90 	vmov	r2, s15
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006880:	4b13      	ldr	r3, [pc, #76]	; (80068d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006884:	0e1b      	lsrs	r3, r3, #24
 8006886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800688a:	ee07 3a90 	vmov	s15, r3
 800688e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006892:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006896:	ee37 7a87 	vadd.f32	s14, s15, s14
 800689a:	edd7 6a07 	vldr	s13, [r7, #28]
 800689e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068a6:	ee17 2a90 	vmov	r2, s15
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80068ae:	e008      	b.n	80068c2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	609a      	str	r2, [r3, #8]
}
 80068c2:	bf00      	nop
 80068c4:	3724      	adds	r7, #36	; 0x24
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	58024400 	.word	0x58024400
 80068d4:	03d09000 	.word	0x03d09000
 80068d8:	46000000 	.word	0x46000000
 80068dc:	4c742400 	.word	0x4c742400
 80068e0:	4a742400 	.word	0x4a742400
 80068e4:	4c371b00 	.word	0x4c371b00

080068e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b089      	sub	sp, #36	; 0x24
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80068f0:	4ba1      	ldr	r3, [pc, #644]	; (8006b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f4:	f003 0303 	and.w	r3, r3, #3
 80068f8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80068fa:	4b9f      	ldr	r3, [pc, #636]	; (8006b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fe:	0d1b      	lsrs	r3, r3, #20
 8006900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006904:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006906:	4b9c      	ldr	r3, [pc, #624]	; (8006b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690a:	0a1b      	lsrs	r3, r3, #8
 800690c:	f003 0301 	and.w	r3, r3, #1
 8006910:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006912:	4b99      	ldr	r3, [pc, #612]	; (8006b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006916:	08db      	lsrs	r3, r3, #3
 8006918:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	fb02 f303 	mul.w	r3, r2, r3
 8006922:	ee07 3a90 	vmov	s15, r3
 8006926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800692a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	2b00      	cmp	r3, #0
 8006932:	f000 8111 	beq.w	8006b58 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	2b02      	cmp	r3, #2
 800693a:	f000 8083 	beq.w	8006a44 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	2b02      	cmp	r3, #2
 8006942:	f200 80a1 	bhi.w	8006a88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d003      	beq.n	8006954 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d056      	beq.n	8006a00 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006952:	e099      	b.n	8006a88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006954:	4b88      	ldr	r3, [pc, #544]	; (8006b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0320 	and.w	r3, r3, #32
 800695c:	2b00      	cmp	r3, #0
 800695e:	d02d      	beq.n	80069bc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006960:	4b85      	ldr	r3, [pc, #532]	; (8006b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	08db      	lsrs	r3, r3, #3
 8006966:	f003 0303 	and.w	r3, r3, #3
 800696a:	4a84      	ldr	r2, [pc, #528]	; (8006b7c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800696c:	fa22 f303 	lsr.w	r3, r2, r3
 8006970:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	ee07 3a90 	vmov	s15, r3
 8006978:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	ee07 3a90 	vmov	s15, r3
 8006982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800698a:	4b7b      	ldr	r3, [pc, #492]	; (8006b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800698c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006992:	ee07 3a90 	vmov	s15, r3
 8006996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800699a:	ed97 6a03 	vldr	s12, [r7, #12]
 800699e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006b80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069b6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80069ba:	e087      	b.n	8006acc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	ee07 3a90 	vmov	s15, r3
 80069c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006b84 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80069ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069ce:	4b6a      	ldr	r3, [pc, #424]	; (8006b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069d6:	ee07 3a90 	vmov	s15, r3
 80069da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069de:	ed97 6a03 	vldr	s12, [r7, #12]
 80069e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006b80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80069fe:	e065      	b.n	8006acc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	ee07 3a90 	vmov	s15, r3
 8006a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a0a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006b88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a12:	4b59      	ldr	r3, [pc, #356]	; (8006b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a1a:	ee07 3a90 	vmov	s15, r3
 8006a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a22:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a26:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006b80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a42:	e043      	b.n	8006acc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	ee07 3a90 	vmov	s15, r3
 8006a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a4e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006b8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a56:	4b48      	ldr	r3, [pc, #288]	; (8006b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a5e:	ee07 3a90 	vmov	s15, r3
 8006a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a66:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a6a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006b80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a86:	e021      	b.n	8006acc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	ee07 3a90 	vmov	s15, r3
 8006a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a92:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006b88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a9a:	4b37      	ldr	r3, [pc, #220]	; (8006b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aa2:	ee07 3a90 	vmov	s15, r3
 8006aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006b80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ac6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006aca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006acc:	4b2a      	ldr	r3, [pc, #168]	; (8006b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad0:	0a5b      	lsrs	r3, r3, #9
 8006ad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ad6:	ee07 3a90 	vmov	s15, r3
 8006ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ade:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ae2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ae6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006aea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006aee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006af2:	ee17 2a90 	vmov	r2, s15
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006afa:	4b1f      	ldr	r3, [pc, #124]	; (8006b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afe:	0c1b      	lsrs	r3, r3, #16
 8006b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b04:	ee07 3a90 	vmov	s15, r3
 8006b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b14:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b20:	ee17 2a90 	vmov	r2, s15
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006b28:	4b13      	ldr	r3, [pc, #76]	; (8006b78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2c:	0e1b      	lsrs	r3, r3, #24
 8006b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b32:	ee07 3a90 	vmov	s15, r3
 8006b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b42:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b4e:	ee17 2a90 	vmov	r2, s15
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006b56:	e008      	b.n	8006b6a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	609a      	str	r2, [r3, #8]
}
 8006b6a:	bf00      	nop
 8006b6c:	3724      	adds	r7, #36	; 0x24
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	58024400 	.word	0x58024400
 8006b7c:	03d09000 	.word	0x03d09000
 8006b80:	46000000 	.word	0x46000000
 8006b84:	4c742400 	.word	0x4c742400
 8006b88:	4a742400 	.word	0x4a742400
 8006b8c:	4c371b00 	.word	0x4c371b00

08006b90 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006b9e:	4b53      	ldr	r3, [pc, #332]	; (8006cec <RCCEx_PLL2_Config+0x15c>)
 8006ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba2:	f003 0303 	and.w	r3, r3, #3
 8006ba6:	2b03      	cmp	r3, #3
 8006ba8:	d101      	bne.n	8006bae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e099      	b.n	8006ce2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006bae:	4b4f      	ldr	r3, [pc, #316]	; (8006cec <RCCEx_PLL2_Config+0x15c>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a4e      	ldr	r2, [pc, #312]	; (8006cec <RCCEx_PLL2_Config+0x15c>)
 8006bb4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006bb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bba:	f7fb f8e5 	bl	8001d88 <HAL_GetTick>
 8006bbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006bc0:	e008      	b.n	8006bd4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006bc2:	f7fb f8e1 	bl	8001d88 <HAL_GetTick>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d901      	bls.n	8006bd4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e086      	b.n	8006ce2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006bd4:	4b45      	ldr	r3, [pc, #276]	; (8006cec <RCCEx_PLL2_Config+0x15c>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1f0      	bne.n	8006bc2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006be0:	4b42      	ldr	r3, [pc, #264]	; (8006cec <RCCEx_PLL2_Config+0x15c>)
 8006be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	031b      	lsls	r3, r3, #12
 8006bee:	493f      	ldr	r1, [pc, #252]	; (8006cec <RCCEx_PLL2_Config+0x15c>)
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	628b      	str	r3, [r1, #40]	; 0x28
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	3b01      	subs	r3, #1
 8006c04:	025b      	lsls	r3, r3, #9
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	431a      	orrs	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	041b      	lsls	r3, r3, #16
 8006c12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006c16:	431a      	orrs	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	061b      	lsls	r3, r3, #24
 8006c20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006c24:	4931      	ldr	r1, [pc, #196]	; (8006cec <RCCEx_PLL2_Config+0x15c>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006c2a:	4b30      	ldr	r3, [pc, #192]	; (8006cec <RCCEx_PLL2_Config+0x15c>)
 8006c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	492d      	ldr	r1, [pc, #180]	; (8006cec <RCCEx_PLL2_Config+0x15c>)
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006c3c:	4b2b      	ldr	r3, [pc, #172]	; (8006cec <RCCEx_PLL2_Config+0x15c>)
 8006c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c40:	f023 0220 	bic.w	r2, r3, #32
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	4928      	ldr	r1, [pc, #160]	; (8006cec <RCCEx_PLL2_Config+0x15c>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006c4e:	4b27      	ldr	r3, [pc, #156]	; (8006cec <RCCEx_PLL2_Config+0x15c>)
 8006c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c52:	4a26      	ldr	r2, [pc, #152]	; (8006cec <RCCEx_PLL2_Config+0x15c>)
 8006c54:	f023 0310 	bic.w	r3, r3, #16
 8006c58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006c5a:	4b24      	ldr	r3, [pc, #144]	; (8006cec <RCCEx_PLL2_Config+0x15c>)
 8006c5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c5e:	4b24      	ldr	r3, [pc, #144]	; (8006cf0 <RCCEx_PLL2_Config+0x160>)
 8006c60:	4013      	ands	r3, r2
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	69d2      	ldr	r2, [r2, #28]
 8006c66:	00d2      	lsls	r2, r2, #3
 8006c68:	4920      	ldr	r1, [pc, #128]	; (8006cec <RCCEx_PLL2_Config+0x15c>)
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006c6e:	4b1f      	ldr	r3, [pc, #124]	; (8006cec <RCCEx_PLL2_Config+0x15c>)
 8006c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c72:	4a1e      	ldr	r2, [pc, #120]	; (8006cec <RCCEx_PLL2_Config+0x15c>)
 8006c74:	f043 0310 	orr.w	r3, r3, #16
 8006c78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d106      	bne.n	8006c8e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006c80:	4b1a      	ldr	r3, [pc, #104]	; (8006cec <RCCEx_PLL2_Config+0x15c>)
 8006c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c84:	4a19      	ldr	r2, [pc, #100]	; (8006cec <RCCEx_PLL2_Config+0x15c>)
 8006c86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006c8c:	e00f      	b.n	8006cae <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d106      	bne.n	8006ca2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006c94:	4b15      	ldr	r3, [pc, #84]	; (8006cec <RCCEx_PLL2_Config+0x15c>)
 8006c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c98:	4a14      	ldr	r2, [pc, #80]	; (8006cec <RCCEx_PLL2_Config+0x15c>)
 8006c9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ca0:	e005      	b.n	8006cae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006ca2:	4b12      	ldr	r3, [pc, #72]	; (8006cec <RCCEx_PLL2_Config+0x15c>)
 8006ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca6:	4a11      	ldr	r2, [pc, #68]	; (8006cec <RCCEx_PLL2_Config+0x15c>)
 8006ca8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006cac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006cae:	4b0f      	ldr	r3, [pc, #60]	; (8006cec <RCCEx_PLL2_Config+0x15c>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a0e      	ldr	r2, [pc, #56]	; (8006cec <RCCEx_PLL2_Config+0x15c>)
 8006cb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006cb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cba:	f7fb f865 	bl	8001d88 <HAL_GetTick>
 8006cbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006cc0:	e008      	b.n	8006cd4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006cc2:	f7fb f861 	bl	8001d88 <HAL_GetTick>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d901      	bls.n	8006cd4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e006      	b.n	8006ce2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006cd4:	4b05      	ldr	r3, [pc, #20]	; (8006cec <RCCEx_PLL2_Config+0x15c>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d0f0      	beq.n	8006cc2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	58024400 	.word	0x58024400
 8006cf0:	ffff0007 	.word	0xffff0007

08006cf4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d02:	4b53      	ldr	r3, [pc, #332]	; (8006e50 <RCCEx_PLL3_Config+0x15c>)
 8006d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d06:	f003 0303 	and.w	r3, r3, #3
 8006d0a:	2b03      	cmp	r3, #3
 8006d0c:	d101      	bne.n	8006d12 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e099      	b.n	8006e46 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006d12:	4b4f      	ldr	r3, [pc, #316]	; (8006e50 <RCCEx_PLL3_Config+0x15c>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a4e      	ldr	r2, [pc, #312]	; (8006e50 <RCCEx_PLL3_Config+0x15c>)
 8006d18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d1e:	f7fb f833 	bl	8001d88 <HAL_GetTick>
 8006d22:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d24:	e008      	b.n	8006d38 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006d26:	f7fb f82f 	bl	8001d88 <HAL_GetTick>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d901      	bls.n	8006d38 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e086      	b.n	8006e46 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d38:	4b45      	ldr	r3, [pc, #276]	; (8006e50 <RCCEx_PLL3_Config+0x15c>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1f0      	bne.n	8006d26 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006d44:	4b42      	ldr	r3, [pc, #264]	; (8006e50 <RCCEx_PLL3_Config+0x15c>)
 8006d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d48:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	051b      	lsls	r3, r3, #20
 8006d52:	493f      	ldr	r1, [pc, #252]	; (8006e50 <RCCEx_PLL3_Config+0x15c>)
 8006d54:	4313      	orrs	r3, r2
 8006d56:	628b      	str	r3, [r1, #40]	; 0x28
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	3b01      	subs	r3, #1
 8006d68:	025b      	lsls	r3, r3, #9
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	431a      	orrs	r2, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	3b01      	subs	r3, #1
 8006d74:	041b      	lsls	r3, r3, #16
 8006d76:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006d7a:	431a      	orrs	r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	3b01      	subs	r3, #1
 8006d82:	061b      	lsls	r3, r3, #24
 8006d84:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006d88:	4931      	ldr	r1, [pc, #196]	; (8006e50 <RCCEx_PLL3_Config+0x15c>)
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006d8e:	4b30      	ldr	r3, [pc, #192]	; (8006e50 <RCCEx_PLL3_Config+0x15c>)
 8006d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	492d      	ldr	r1, [pc, #180]	; (8006e50 <RCCEx_PLL3_Config+0x15c>)
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006da0:	4b2b      	ldr	r3, [pc, #172]	; (8006e50 <RCCEx_PLL3_Config+0x15c>)
 8006da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	4928      	ldr	r1, [pc, #160]	; (8006e50 <RCCEx_PLL3_Config+0x15c>)
 8006dae:	4313      	orrs	r3, r2
 8006db0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006db2:	4b27      	ldr	r3, [pc, #156]	; (8006e50 <RCCEx_PLL3_Config+0x15c>)
 8006db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db6:	4a26      	ldr	r2, [pc, #152]	; (8006e50 <RCCEx_PLL3_Config+0x15c>)
 8006db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dbc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006dbe:	4b24      	ldr	r3, [pc, #144]	; (8006e50 <RCCEx_PLL3_Config+0x15c>)
 8006dc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dc2:	4b24      	ldr	r3, [pc, #144]	; (8006e54 <RCCEx_PLL3_Config+0x160>)
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	69d2      	ldr	r2, [r2, #28]
 8006dca:	00d2      	lsls	r2, r2, #3
 8006dcc:	4920      	ldr	r1, [pc, #128]	; (8006e50 <RCCEx_PLL3_Config+0x15c>)
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006dd2:	4b1f      	ldr	r3, [pc, #124]	; (8006e50 <RCCEx_PLL3_Config+0x15c>)
 8006dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd6:	4a1e      	ldr	r2, [pc, #120]	; (8006e50 <RCCEx_PLL3_Config+0x15c>)
 8006dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ddc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d106      	bne.n	8006df2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006de4:	4b1a      	ldr	r3, [pc, #104]	; (8006e50 <RCCEx_PLL3_Config+0x15c>)
 8006de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de8:	4a19      	ldr	r2, [pc, #100]	; (8006e50 <RCCEx_PLL3_Config+0x15c>)
 8006dea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006dee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006df0:	e00f      	b.n	8006e12 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d106      	bne.n	8006e06 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006df8:	4b15      	ldr	r3, [pc, #84]	; (8006e50 <RCCEx_PLL3_Config+0x15c>)
 8006dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfc:	4a14      	ldr	r2, [pc, #80]	; (8006e50 <RCCEx_PLL3_Config+0x15c>)
 8006dfe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006e02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e04:	e005      	b.n	8006e12 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006e06:	4b12      	ldr	r3, [pc, #72]	; (8006e50 <RCCEx_PLL3_Config+0x15c>)
 8006e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0a:	4a11      	ldr	r2, [pc, #68]	; (8006e50 <RCCEx_PLL3_Config+0x15c>)
 8006e0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e10:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006e12:	4b0f      	ldr	r3, [pc, #60]	; (8006e50 <RCCEx_PLL3_Config+0x15c>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a0e      	ldr	r2, [pc, #56]	; (8006e50 <RCCEx_PLL3_Config+0x15c>)
 8006e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e1e:	f7fa ffb3 	bl	8001d88 <HAL_GetTick>
 8006e22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e24:	e008      	b.n	8006e38 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006e26:	f7fa ffaf 	bl	8001d88 <HAL_GetTick>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d901      	bls.n	8006e38 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e006      	b.n	8006e46 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e38:	4b05      	ldr	r3, [pc, #20]	; (8006e50 <RCCEx_PLL3_Config+0x15c>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d0f0      	beq.n	8006e26 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	58024400 	.word	0x58024400
 8006e54:	ffff0007 	.word	0xffff0007

08006e58 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8006e60:	2300      	movs	r3, #0
 8006e62:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d101      	bne.n	8006e6e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e0eb      	b.n	8007046 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a75      	ldr	r2, [pc, #468]	; (8007050 <HAL_SPI_Init+0x1f8>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d00f      	beq.n	8006e9e <HAL_SPI_Init+0x46>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a74      	ldr	r2, [pc, #464]	; (8007054 <HAL_SPI_Init+0x1fc>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d00a      	beq.n	8006e9e <HAL_SPI_Init+0x46>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a72      	ldr	r2, [pc, #456]	; (8007058 <HAL_SPI_Init+0x200>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d005      	beq.n	8006e9e <HAL_SPI_Init+0x46>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	2b0f      	cmp	r3, #15
 8006e98:	d901      	bls.n	8006e9e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e0d3      	b.n	8007046 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 f8dc 	bl	800705c <SPI_GetPacketSize>
 8006ea4:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a69      	ldr	r2, [pc, #420]	; (8007050 <HAL_SPI_Init+0x1f8>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d00c      	beq.n	8006eca <HAL_SPI_Init+0x72>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a67      	ldr	r2, [pc, #412]	; (8007054 <HAL_SPI_Init+0x1fc>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d007      	beq.n	8006eca <HAL_SPI_Init+0x72>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a66      	ldr	r2, [pc, #408]	; (8007058 <HAL_SPI_Init+0x200>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d002      	beq.n	8006eca <HAL_SPI_Init+0x72>
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	2b08      	cmp	r3, #8
 8006ec8:	d811      	bhi.n	8006eee <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006ece:	4a60      	ldr	r2, [pc, #384]	; (8007050 <HAL_SPI_Init+0x1f8>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d009      	beq.n	8006ee8 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a5e      	ldr	r2, [pc, #376]	; (8007054 <HAL_SPI_Init+0x1fc>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d004      	beq.n	8006ee8 <HAL_SPI_Init+0x90>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a5d      	ldr	r2, [pc, #372]	; (8007058 <HAL_SPI_Init+0x200>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d104      	bne.n	8006ef2 <HAL_SPI_Init+0x9a>
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2b10      	cmp	r3, #16
 8006eec:	d901      	bls.n	8006ef2 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e0a9      	b.n	8007046 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d106      	bne.n	8006f0c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7fa f9e6 	bl	80012d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2202      	movs	r2, #2
 8006f10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f022 0201 	bic.w	r2, r2, #1
 8006f22:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	699b      	ldr	r3, [r3, #24]
 8006f28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f2c:	d119      	bne.n	8006f62 <HAL_SPI_Init+0x10a>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f36:	d103      	bne.n	8006f40 <HAL_SPI_Init+0xe8>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d008      	beq.n	8006f52 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10c      	bne.n	8006f62 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f50:	d107      	bne.n	8006f62 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006f60:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	69da      	ldr	r2, [r3, #28]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f6a:	431a      	orrs	r2, r3
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	431a      	orrs	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f74:	ea42 0103 	orr.w	r1, r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	68da      	ldr	r2, [r3, #12]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	430a      	orrs	r2, r1
 8006f82:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8c:	431a      	orrs	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f92:	431a      	orrs	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	431a      	orrs	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	431a      	orrs	r2, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	695b      	ldr	r3, [r3, #20]
 8006fa4:	431a      	orrs	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	431a      	orrs	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	431a      	orrs	r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fb6:	431a      	orrs	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	431a      	orrs	r2, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fc2:	ea42 0103 	orr.w	r1, r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d113      	bne.n	8007002 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fec:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007000:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f022 0201 	bic.w	r2, r2, #1
 8007010:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00a      	beq.n	8007034 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	430a      	orrs	r2, r1
 8007032:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	40013000 	.word	0x40013000
 8007054:	40003800 	.word	0x40003800
 8007058:	40003c00 	.word	0x40003c00

0800705c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007068:	095b      	lsrs	r3, r3, #5
 800706a:	3301      	adds	r3, #1
 800706c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	3301      	adds	r3, #1
 8007074:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	3307      	adds	r3, #7
 800707a:	08db      	lsrs	r3, r3, #3
 800707c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	fb02 f303 	mul.w	r3, r2, r3
}
 8007086:	4618      	mov	r0, r3
 8007088:	3714      	adds	r7, #20
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b082      	sub	sp, #8
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d101      	bne.n	80070a4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	e049      	b.n	8007138 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d106      	bne.n	80070be <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f7fa f973 	bl	80013a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2202      	movs	r2, #2
 80070c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	3304      	adds	r3, #4
 80070ce:	4619      	mov	r1, r3
 80070d0:	4610      	mov	r0, r2
 80070d2:	f000 fbe1 	bl	8007898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2201      	movs	r2, #1
 80070da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2201      	movs	r2, #1
 80070e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2201      	movs	r2, #1
 80070ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2201      	movs	r2, #1
 80070f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2201      	movs	r2, #1
 800710a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2201      	movs	r2, #1
 8007112:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2201      	movs	r2, #1
 800711a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2201      	movs	r2, #1
 8007122:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2201      	movs	r2, #1
 8007132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3708      	adds	r7, #8
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d101      	bne.n	8007152 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e049      	b.n	80071e6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b00      	cmp	r3, #0
 800715c:	d106      	bne.n	800716c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f841 	bl	80071ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2202      	movs	r2, #2
 8007170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	3304      	adds	r3, #4
 800717c:	4619      	mov	r1, r3
 800717e:	4610      	mov	r0, r2
 8007180:	f000 fb8a 	bl	8007898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3708      	adds	r7, #8
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b083      	sub	sp, #12
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80071f6:	bf00      	nop
 80071f8:	370c      	adds	r7, #12
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr

08007202 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b082      	sub	sp, #8
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	f003 0302 	and.w	r3, r3, #2
 8007214:	2b02      	cmp	r3, #2
 8007216:	d122      	bne.n	800725e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	f003 0302 	and.w	r3, r3, #2
 8007222:	2b02      	cmp	r3, #2
 8007224:	d11b      	bne.n	800725e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f06f 0202 	mvn.w	r2, #2
 800722e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	f003 0303 	and.w	r3, r3, #3
 8007240:	2b00      	cmp	r3, #0
 8007242:	d003      	beq.n	800724c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 fb09 	bl	800785c <HAL_TIM_IC_CaptureCallback>
 800724a:	e005      	b.n	8007258 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 fafb 	bl	8007848 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fb0c 	bl	8007870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	f003 0304 	and.w	r3, r3, #4
 8007268:	2b04      	cmp	r3, #4
 800726a:	d122      	bne.n	80072b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	f003 0304 	and.w	r3, r3, #4
 8007276:	2b04      	cmp	r3, #4
 8007278:	d11b      	bne.n	80072b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f06f 0204 	mvn.w	r2, #4
 8007282:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2202      	movs	r2, #2
 8007288:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	699b      	ldr	r3, [r3, #24]
 8007290:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007294:	2b00      	cmp	r3, #0
 8007296:	d003      	beq.n	80072a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fadf 	bl	800785c <HAL_TIM_IC_CaptureCallback>
 800729e:	e005      	b.n	80072ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 fad1 	bl	8007848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 fae2 	bl	8007870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	f003 0308 	and.w	r3, r3, #8
 80072bc:	2b08      	cmp	r3, #8
 80072be:	d122      	bne.n	8007306 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	f003 0308 	and.w	r3, r3, #8
 80072ca:	2b08      	cmp	r3, #8
 80072cc:	d11b      	bne.n	8007306 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f06f 0208 	mvn.w	r2, #8
 80072d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2204      	movs	r2, #4
 80072dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	69db      	ldr	r3, [r3, #28]
 80072e4:	f003 0303 	and.w	r3, r3, #3
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d003      	beq.n	80072f4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fab5 	bl	800785c <HAL_TIM_IC_CaptureCallback>
 80072f2:	e005      	b.n	8007300 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 faa7 	bl	8007848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fab8 	bl	8007870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	f003 0310 	and.w	r3, r3, #16
 8007310:	2b10      	cmp	r3, #16
 8007312:	d122      	bne.n	800735a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	f003 0310 	and.w	r3, r3, #16
 800731e:	2b10      	cmp	r3, #16
 8007320:	d11b      	bne.n	800735a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f06f 0210 	mvn.w	r2, #16
 800732a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2208      	movs	r2, #8
 8007330:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	69db      	ldr	r3, [r3, #28]
 8007338:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800733c:	2b00      	cmp	r3, #0
 800733e:	d003      	beq.n	8007348 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fa8b 	bl	800785c <HAL_TIM_IC_CaptureCallback>
 8007346:	e005      	b.n	8007354 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 fa7d 	bl	8007848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fa8e 	bl	8007870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	f003 0301 	and.w	r3, r3, #1
 8007364:	2b01      	cmp	r3, #1
 8007366:	d10e      	bne.n	8007386 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	f003 0301 	and.w	r3, r3, #1
 8007372:	2b01      	cmp	r3, #1
 8007374:	d107      	bne.n	8007386 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f06f 0201 	mvn.w	r2, #1
 800737e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f7f9 ff80 	bl	8001286 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007390:	2b80      	cmp	r3, #128	; 0x80
 8007392:	d10e      	bne.n	80073b2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800739e:	2b80      	cmp	r3, #128	; 0x80
 80073a0:	d107      	bne.n	80073b2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80073aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 ff89 	bl	80082c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073c0:	d10e      	bne.n	80073e0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073cc:	2b80      	cmp	r3, #128	; 0x80
 80073ce:	d107      	bne.n	80073e0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80073d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 ff7c 	bl	80082d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ea:	2b40      	cmp	r3, #64	; 0x40
 80073ec:	d10e      	bne.n	800740c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073f8:	2b40      	cmp	r3, #64	; 0x40
 80073fa:	d107      	bne.n	800740c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fa3c 	bl	8007884 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	f003 0320 	and.w	r3, r3, #32
 8007416:	2b20      	cmp	r3, #32
 8007418:	d10e      	bne.n	8007438 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	f003 0320 	and.w	r3, r3, #32
 8007424:	2b20      	cmp	r3, #32
 8007426:	d107      	bne.n	8007438 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f06f 0220 	mvn.w	r2, #32
 8007430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 ff3c 	bl	80082b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007438:	bf00      	nop
 800743a:	3708      	adds	r7, #8
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007452:	2b01      	cmp	r3, #1
 8007454:	d101      	bne.n	800745a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007456:	2302      	movs	r3, #2
 8007458:	e0fd      	b.n	8007656 <HAL_TIM_PWM_ConfigChannel+0x216>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2201      	movs	r2, #1
 800745e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2b14      	cmp	r3, #20
 8007466:	f200 80f0 	bhi.w	800764a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800746a:	a201      	add	r2, pc, #4	; (adr r2, 8007470 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800746c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007470:	080074c5 	.word	0x080074c5
 8007474:	0800764b 	.word	0x0800764b
 8007478:	0800764b 	.word	0x0800764b
 800747c:	0800764b 	.word	0x0800764b
 8007480:	08007505 	.word	0x08007505
 8007484:	0800764b 	.word	0x0800764b
 8007488:	0800764b 	.word	0x0800764b
 800748c:	0800764b 	.word	0x0800764b
 8007490:	08007547 	.word	0x08007547
 8007494:	0800764b 	.word	0x0800764b
 8007498:	0800764b 	.word	0x0800764b
 800749c:	0800764b 	.word	0x0800764b
 80074a0:	08007587 	.word	0x08007587
 80074a4:	0800764b 	.word	0x0800764b
 80074a8:	0800764b 	.word	0x0800764b
 80074ac:	0800764b 	.word	0x0800764b
 80074b0:	080075c9 	.word	0x080075c9
 80074b4:	0800764b 	.word	0x0800764b
 80074b8:	0800764b 	.word	0x0800764b
 80074bc:	0800764b 	.word	0x0800764b
 80074c0:	08007609 	.word	0x08007609
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68b9      	ldr	r1, [r7, #8]
 80074ca:	4618      	mov	r0, r3
 80074cc:	f000 fa7e 	bl	80079cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	699a      	ldr	r2, [r3, #24]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f042 0208 	orr.w	r2, r2, #8
 80074de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	699a      	ldr	r2, [r3, #24]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f022 0204 	bic.w	r2, r2, #4
 80074ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	6999      	ldr	r1, [r3, #24]
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	691a      	ldr	r2, [r3, #16]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	430a      	orrs	r2, r1
 8007500:	619a      	str	r2, [r3, #24]
      break;
 8007502:	e0a3      	b.n	800764c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68b9      	ldr	r1, [r7, #8]
 800750a:	4618      	mov	r0, r3
 800750c:	f000 faee 	bl	8007aec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	699a      	ldr	r2, [r3, #24]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800751e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	699a      	ldr	r2, [r3, #24]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800752e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6999      	ldr	r1, [r3, #24]
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	021a      	lsls	r2, r3, #8
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	430a      	orrs	r2, r1
 8007542:	619a      	str	r2, [r3, #24]
      break;
 8007544:	e082      	b.n	800764c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68b9      	ldr	r1, [r7, #8]
 800754c:	4618      	mov	r0, r3
 800754e:	f000 fb57 	bl	8007c00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	69da      	ldr	r2, [r3, #28]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f042 0208 	orr.w	r2, r2, #8
 8007560:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	69da      	ldr	r2, [r3, #28]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f022 0204 	bic.w	r2, r2, #4
 8007570:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	69d9      	ldr	r1, [r3, #28]
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	691a      	ldr	r2, [r3, #16]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	430a      	orrs	r2, r1
 8007582:	61da      	str	r2, [r3, #28]
      break;
 8007584:	e062      	b.n	800764c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68b9      	ldr	r1, [r7, #8]
 800758c:	4618      	mov	r0, r3
 800758e:	f000 fbbd 	bl	8007d0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	69da      	ldr	r2, [r3, #28]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	69da      	ldr	r2, [r3, #28]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	69d9      	ldr	r1, [r3, #28]
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	021a      	lsls	r2, r3, #8
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	430a      	orrs	r2, r1
 80075c4:	61da      	str	r2, [r3, #28]
      break;
 80075c6:	e041      	b.n	800764c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68b9      	ldr	r1, [r7, #8]
 80075ce:	4618      	mov	r0, r3
 80075d0:	f000 fc04 	bl	8007ddc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f042 0208 	orr.w	r2, r2, #8
 80075e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f022 0204 	bic.w	r2, r2, #4
 80075f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	691a      	ldr	r2, [r3, #16]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	430a      	orrs	r2, r1
 8007604:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007606:	e021      	b.n	800764c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68b9      	ldr	r1, [r7, #8]
 800760e:	4618      	mov	r0, r3
 8007610:	f000 fc46 	bl	8007ea0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007622:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007632:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	021a      	lsls	r2, r3, #8
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	430a      	orrs	r2, r1
 8007646:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007648:	e000      	b.n	800764c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800764a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop

08007660 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007670:	2b01      	cmp	r3, #1
 8007672:	d101      	bne.n	8007678 <HAL_TIM_ConfigClockSource+0x18>
 8007674:	2302      	movs	r3, #2
 8007676:	e0db      	b.n	8007830 <HAL_TIM_ConfigClockSource+0x1d0>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2202      	movs	r2, #2
 8007684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	4b69      	ldr	r3, [pc, #420]	; (8007838 <HAL_TIM_ConfigClockSource+0x1d8>)
 8007694:	4013      	ands	r3, r2
 8007696:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800769e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a63      	ldr	r2, [pc, #396]	; (800783c <HAL_TIM_ConfigClockSource+0x1dc>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	f000 80a9 	beq.w	8007806 <HAL_TIM_ConfigClockSource+0x1a6>
 80076b4:	4a61      	ldr	r2, [pc, #388]	; (800783c <HAL_TIM_ConfigClockSource+0x1dc>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	f200 80ae 	bhi.w	8007818 <HAL_TIM_ConfigClockSource+0x1b8>
 80076bc:	4a60      	ldr	r2, [pc, #384]	; (8007840 <HAL_TIM_ConfigClockSource+0x1e0>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	f000 80a1 	beq.w	8007806 <HAL_TIM_ConfigClockSource+0x1a6>
 80076c4:	4a5e      	ldr	r2, [pc, #376]	; (8007840 <HAL_TIM_ConfigClockSource+0x1e0>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	f200 80a6 	bhi.w	8007818 <HAL_TIM_ConfigClockSource+0x1b8>
 80076cc:	4a5d      	ldr	r2, [pc, #372]	; (8007844 <HAL_TIM_ConfigClockSource+0x1e4>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	f000 8099 	beq.w	8007806 <HAL_TIM_ConfigClockSource+0x1a6>
 80076d4:	4a5b      	ldr	r2, [pc, #364]	; (8007844 <HAL_TIM_ConfigClockSource+0x1e4>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	f200 809e 	bhi.w	8007818 <HAL_TIM_ConfigClockSource+0x1b8>
 80076dc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80076e0:	f000 8091 	beq.w	8007806 <HAL_TIM_ConfigClockSource+0x1a6>
 80076e4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80076e8:	f200 8096 	bhi.w	8007818 <HAL_TIM_ConfigClockSource+0x1b8>
 80076ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076f0:	f000 8089 	beq.w	8007806 <HAL_TIM_ConfigClockSource+0x1a6>
 80076f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076f8:	f200 808e 	bhi.w	8007818 <HAL_TIM_ConfigClockSource+0x1b8>
 80076fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007700:	d03e      	beq.n	8007780 <HAL_TIM_ConfigClockSource+0x120>
 8007702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007706:	f200 8087 	bhi.w	8007818 <HAL_TIM_ConfigClockSource+0x1b8>
 800770a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800770e:	f000 8085 	beq.w	800781c <HAL_TIM_ConfigClockSource+0x1bc>
 8007712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007716:	d87f      	bhi.n	8007818 <HAL_TIM_ConfigClockSource+0x1b8>
 8007718:	2b70      	cmp	r3, #112	; 0x70
 800771a:	d01a      	beq.n	8007752 <HAL_TIM_ConfigClockSource+0xf2>
 800771c:	2b70      	cmp	r3, #112	; 0x70
 800771e:	d87b      	bhi.n	8007818 <HAL_TIM_ConfigClockSource+0x1b8>
 8007720:	2b60      	cmp	r3, #96	; 0x60
 8007722:	d050      	beq.n	80077c6 <HAL_TIM_ConfigClockSource+0x166>
 8007724:	2b60      	cmp	r3, #96	; 0x60
 8007726:	d877      	bhi.n	8007818 <HAL_TIM_ConfigClockSource+0x1b8>
 8007728:	2b50      	cmp	r3, #80	; 0x50
 800772a:	d03c      	beq.n	80077a6 <HAL_TIM_ConfigClockSource+0x146>
 800772c:	2b50      	cmp	r3, #80	; 0x50
 800772e:	d873      	bhi.n	8007818 <HAL_TIM_ConfigClockSource+0x1b8>
 8007730:	2b40      	cmp	r3, #64	; 0x40
 8007732:	d058      	beq.n	80077e6 <HAL_TIM_ConfigClockSource+0x186>
 8007734:	2b40      	cmp	r3, #64	; 0x40
 8007736:	d86f      	bhi.n	8007818 <HAL_TIM_ConfigClockSource+0x1b8>
 8007738:	2b30      	cmp	r3, #48	; 0x30
 800773a:	d064      	beq.n	8007806 <HAL_TIM_ConfigClockSource+0x1a6>
 800773c:	2b30      	cmp	r3, #48	; 0x30
 800773e:	d86b      	bhi.n	8007818 <HAL_TIM_ConfigClockSource+0x1b8>
 8007740:	2b20      	cmp	r3, #32
 8007742:	d060      	beq.n	8007806 <HAL_TIM_ConfigClockSource+0x1a6>
 8007744:	2b20      	cmp	r3, #32
 8007746:	d867      	bhi.n	8007818 <HAL_TIM_ConfigClockSource+0x1b8>
 8007748:	2b00      	cmp	r3, #0
 800774a:	d05c      	beq.n	8007806 <HAL_TIM_ConfigClockSource+0x1a6>
 800774c:	2b10      	cmp	r3, #16
 800774e:	d05a      	beq.n	8007806 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007750:	e062      	b.n	8007818 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6818      	ldr	r0, [r3, #0]
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	6899      	ldr	r1, [r3, #8]
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	685a      	ldr	r2, [r3, #4]
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	f000 fc7f 	bl	8008064 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007774:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	609a      	str	r2, [r3, #8]
      break;
 800777e:	e04e      	b.n	800781e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6818      	ldr	r0, [r3, #0]
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	6899      	ldr	r1, [r3, #8]
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	685a      	ldr	r2, [r3, #4]
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	f000 fc68 	bl	8008064 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	689a      	ldr	r2, [r3, #8]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077a2:	609a      	str	r2, [r3, #8]
      break;
 80077a4:	e03b      	b.n	800781e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6818      	ldr	r0, [r3, #0]
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	6859      	ldr	r1, [r3, #4]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	461a      	mov	r2, r3
 80077b4:	f000 fbd8 	bl	8007f68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2150      	movs	r1, #80	; 0x50
 80077be:	4618      	mov	r0, r3
 80077c0:	f000 fc32 	bl	8008028 <TIM_ITRx_SetConfig>
      break;
 80077c4:	e02b      	b.n	800781e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6818      	ldr	r0, [r3, #0]
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	6859      	ldr	r1, [r3, #4]
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	461a      	mov	r2, r3
 80077d4:	f000 fbf7 	bl	8007fc6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2160      	movs	r1, #96	; 0x60
 80077de:	4618      	mov	r0, r3
 80077e0:	f000 fc22 	bl	8008028 <TIM_ITRx_SetConfig>
      break;
 80077e4:	e01b      	b.n	800781e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6818      	ldr	r0, [r3, #0]
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	6859      	ldr	r1, [r3, #4]
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	461a      	mov	r2, r3
 80077f4:	f000 fbb8 	bl	8007f68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2140      	movs	r1, #64	; 0x40
 80077fe:	4618      	mov	r0, r3
 8007800:	f000 fc12 	bl	8008028 <TIM_ITRx_SetConfig>
      break;
 8007804:	e00b      	b.n	800781e <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4619      	mov	r1, r3
 8007810:	4610      	mov	r0, r2
 8007812:	f000 fc09 	bl	8008028 <TIM_ITRx_SetConfig>
        break;
 8007816:	e002      	b.n	800781e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8007818:	bf00      	nop
 800781a:	e000      	b.n	800781e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800781c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800782e:	2300      	movs	r3, #0
}
 8007830:	4618      	mov	r0, r3
 8007832:	3710      	adds	r7, #16
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	ffceff88 	.word	0xffceff88
 800783c:	00100040 	.word	0x00100040
 8007840:	00100030 	.word	0x00100030
 8007844:	00100020 	.word	0x00100020

08007848 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007864:	bf00      	nop
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007878:	bf00      	nop
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800788c:	bf00      	nop
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007898:	b480      	push	{r7}
 800789a:	b085      	sub	sp, #20
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a40      	ldr	r2, [pc, #256]	; (80079ac <TIM_Base_SetConfig+0x114>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d013      	beq.n	80078d8 <TIM_Base_SetConfig+0x40>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078b6:	d00f      	beq.n	80078d8 <TIM_Base_SetConfig+0x40>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a3d      	ldr	r2, [pc, #244]	; (80079b0 <TIM_Base_SetConfig+0x118>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d00b      	beq.n	80078d8 <TIM_Base_SetConfig+0x40>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a3c      	ldr	r2, [pc, #240]	; (80079b4 <TIM_Base_SetConfig+0x11c>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d007      	beq.n	80078d8 <TIM_Base_SetConfig+0x40>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a3b      	ldr	r2, [pc, #236]	; (80079b8 <TIM_Base_SetConfig+0x120>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d003      	beq.n	80078d8 <TIM_Base_SetConfig+0x40>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a3a      	ldr	r2, [pc, #232]	; (80079bc <TIM_Base_SetConfig+0x124>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d108      	bne.n	80078ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a2f      	ldr	r2, [pc, #188]	; (80079ac <TIM_Base_SetConfig+0x114>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d01f      	beq.n	8007932 <TIM_Base_SetConfig+0x9a>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078f8:	d01b      	beq.n	8007932 <TIM_Base_SetConfig+0x9a>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a2c      	ldr	r2, [pc, #176]	; (80079b0 <TIM_Base_SetConfig+0x118>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d017      	beq.n	8007932 <TIM_Base_SetConfig+0x9a>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a2b      	ldr	r2, [pc, #172]	; (80079b4 <TIM_Base_SetConfig+0x11c>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d013      	beq.n	8007932 <TIM_Base_SetConfig+0x9a>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a2a      	ldr	r2, [pc, #168]	; (80079b8 <TIM_Base_SetConfig+0x120>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d00f      	beq.n	8007932 <TIM_Base_SetConfig+0x9a>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a29      	ldr	r2, [pc, #164]	; (80079bc <TIM_Base_SetConfig+0x124>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d00b      	beq.n	8007932 <TIM_Base_SetConfig+0x9a>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a28      	ldr	r2, [pc, #160]	; (80079c0 <TIM_Base_SetConfig+0x128>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d007      	beq.n	8007932 <TIM_Base_SetConfig+0x9a>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a27      	ldr	r2, [pc, #156]	; (80079c4 <TIM_Base_SetConfig+0x12c>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d003      	beq.n	8007932 <TIM_Base_SetConfig+0x9a>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a26      	ldr	r2, [pc, #152]	; (80079c8 <TIM_Base_SetConfig+0x130>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d108      	bne.n	8007944 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	4313      	orrs	r3, r2
 8007942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	695b      	ldr	r3, [r3, #20]
 800794e:	4313      	orrs	r3, r2
 8007950:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	689a      	ldr	r2, [r3, #8]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a10      	ldr	r2, [pc, #64]	; (80079ac <TIM_Base_SetConfig+0x114>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d00f      	beq.n	8007990 <TIM_Base_SetConfig+0xf8>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a12      	ldr	r2, [pc, #72]	; (80079bc <TIM_Base_SetConfig+0x124>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d00b      	beq.n	8007990 <TIM_Base_SetConfig+0xf8>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a11      	ldr	r2, [pc, #68]	; (80079c0 <TIM_Base_SetConfig+0x128>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d007      	beq.n	8007990 <TIM_Base_SetConfig+0xf8>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a10      	ldr	r2, [pc, #64]	; (80079c4 <TIM_Base_SetConfig+0x12c>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d003      	beq.n	8007990 <TIM_Base_SetConfig+0xf8>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a0f      	ldr	r2, [pc, #60]	; (80079c8 <TIM_Base_SetConfig+0x130>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d103      	bne.n	8007998 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	691a      	ldr	r2, [r3, #16]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	615a      	str	r2, [r3, #20]
}
 800799e:	bf00      	nop
 80079a0:	3714      	adds	r7, #20
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop
 80079ac:	40010000 	.word	0x40010000
 80079b0:	40000400 	.word	0x40000400
 80079b4:	40000800 	.word	0x40000800
 80079b8:	40000c00 	.word	0x40000c00
 80079bc:	40010400 	.word	0x40010400
 80079c0:	40014000 	.word	0x40014000
 80079c4:	40014400 	.word	0x40014400
 80079c8:	40014800 	.word	0x40014800

080079cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b087      	sub	sp, #28
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a1b      	ldr	r3, [r3, #32]
 80079da:	f023 0201 	bic.w	r2, r3, #1
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	699b      	ldr	r3, [r3, #24]
 80079f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	4b37      	ldr	r3, [pc, #220]	; (8007ad4 <TIM_OC1_SetConfig+0x108>)
 80079f8:	4013      	ands	r3, r2
 80079fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f023 0303 	bic.w	r3, r3, #3
 8007a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	68fa      	ldr	r2, [r7, #12]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	f023 0302 	bic.w	r3, r3, #2
 8007a14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	697a      	ldr	r2, [r7, #20]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a2d      	ldr	r2, [pc, #180]	; (8007ad8 <TIM_OC1_SetConfig+0x10c>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d00f      	beq.n	8007a48 <TIM_OC1_SetConfig+0x7c>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a2c      	ldr	r2, [pc, #176]	; (8007adc <TIM_OC1_SetConfig+0x110>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d00b      	beq.n	8007a48 <TIM_OC1_SetConfig+0x7c>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4a2b      	ldr	r2, [pc, #172]	; (8007ae0 <TIM_OC1_SetConfig+0x114>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d007      	beq.n	8007a48 <TIM_OC1_SetConfig+0x7c>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a2a      	ldr	r2, [pc, #168]	; (8007ae4 <TIM_OC1_SetConfig+0x118>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d003      	beq.n	8007a48 <TIM_OC1_SetConfig+0x7c>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a29      	ldr	r2, [pc, #164]	; (8007ae8 <TIM_OC1_SetConfig+0x11c>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d10c      	bne.n	8007a62 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	f023 0308 	bic.w	r3, r3, #8
 8007a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	697a      	ldr	r2, [r7, #20]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f023 0304 	bic.w	r3, r3, #4
 8007a60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a1c      	ldr	r2, [pc, #112]	; (8007ad8 <TIM_OC1_SetConfig+0x10c>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d00f      	beq.n	8007a8a <TIM_OC1_SetConfig+0xbe>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a1b      	ldr	r2, [pc, #108]	; (8007adc <TIM_OC1_SetConfig+0x110>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d00b      	beq.n	8007a8a <TIM_OC1_SetConfig+0xbe>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a1a      	ldr	r2, [pc, #104]	; (8007ae0 <TIM_OC1_SetConfig+0x114>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d007      	beq.n	8007a8a <TIM_OC1_SetConfig+0xbe>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4a19      	ldr	r2, [pc, #100]	; (8007ae4 <TIM_OC1_SetConfig+0x118>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d003      	beq.n	8007a8a <TIM_OC1_SetConfig+0xbe>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a18      	ldr	r2, [pc, #96]	; (8007ae8 <TIM_OC1_SetConfig+0x11c>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d111      	bne.n	8007aae <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	695b      	ldr	r3, [r3, #20]
 8007a9e:	693a      	ldr	r2, [r7, #16]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	699b      	ldr	r3, [r3, #24]
 8007aa8:	693a      	ldr	r2, [r7, #16]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	693a      	ldr	r2, [r7, #16]
 8007ab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	685a      	ldr	r2, [r3, #4]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	697a      	ldr	r2, [r7, #20]
 8007ac6:	621a      	str	r2, [r3, #32]
}
 8007ac8:	bf00      	nop
 8007aca:	371c      	adds	r7, #28
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr
 8007ad4:	fffeff8f 	.word	0xfffeff8f
 8007ad8:	40010000 	.word	0x40010000
 8007adc:	40010400 	.word	0x40010400
 8007ae0:	40014000 	.word	0x40014000
 8007ae4:	40014400 	.word	0x40014400
 8007ae8:	40014800 	.word	0x40014800

08007aec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b087      	sub	sp, #28
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a1b      	ldr	r3, [r3, #32]
 8007afa:	f023 0210 	bic.w	r2, r3, #16
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a1b      	ldr	r3, [r3, #32]
 8007b06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	699b      	ldr	r3, [r3, #24]
 8007b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	4b34      	ldr	r3, [pc, #208]	; (8007be8 <TIM_OC2_SetConfig+0xfc>)
 8007b18:	4013      	ands	r3, r2
 8007b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	021b      	lsls	r3, r3, #8
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	f023 0320 	bic.w	r3, r3, #32
 8007b36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	011b      	lsls	r3, r3, #4
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4a29      	ldr	r2, [pc, #164]	; (8007bec <TIM_OC2_SetConfig+0x100>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d003      	beq.n	8007b54 <TIM_OC2_SetConfig+0x68>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4a28      	ldr	r2, [pc, #160]	; (8007bf0 <TIM_OC2_SetConfig+0x104>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d10d      	bne.n	8007b70 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	011b      	lsls	r3, r3, #4
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a1e      	ldr	r2, [pc, #120]	; (8007bec <TIM_OC2_SetConfig+0x100>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d00f      	beq.n	8007b98 <TIM_OC2_SetConfig+0xac>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a1d      	ldr	r2, [pc, #116]	; (8007bf0 <TIM_OC2_SetConfig+0x104>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d00b      	beq.n	8007b98 <TIM_OC2_SetConfig+0xac>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a1c      	ldr	r2, [pc, #112]	; (8007bf4 <TIM_OC2_SetConfig+0x108>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d007      	beq.n	8007b98 <TIM_OC2_SetConfig+0xac>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4a1b      	ldr	r2, [pc, #108]	; (8007bf8 <TIM_OC2_SetConfig+0x10c>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d003      	beq.n	8007b98 <TIM_OC2_SetConfig+0xac>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4a1a      	ldr	r2, [pc, #104]	; (8007bfc <TIM_OC2_SetConfig+0x110>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d113      	bne.n	8007bc0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	695b      	ldr	r3, [r3, #20]
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	693a      	ldr	r2, [r7, #16]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	699b      	ldr	r3, [r3, #24]
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	693a      	ldr	r2, [r7, #16]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	693a      	ldr	r2, [r7, #16]
 8007bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	685a      	ldr	r2, [r3, #4]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	697a      	ldr	r2, [r7, #20]
 8007bd8:	621a      	str	r2, [r3, #32]
}
 8007bda:	bf00      	nop
 8007bdc:	371c      	adds	r7, #28
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	feff8fff 	.word	0xfeff8fff
 8007bec:	40010000 	.word	0x40010000
 8007bf0:	40010400 	.word	0x40010400
 8007bf4:	40014000 	.word	0x40014000
 8007bf8:	40014400 	.word	0x40014400
 8007bfc:	40014800 	.word	0x40014800

08007c00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b087      	sub	sp, #28
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a1b      	ldr	r3, [r3, #32]
 8007c0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a1b      	ldr	r3, [r3, #32]
 8007c1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	69db      	ldr	r3, [r3, #28]
 8007c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f023 0303 	bic.w	r3, r3, #3
 8007c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	021b      	lsls	r3, r3, #8
 8007c50:	697a      	ldr	r2, [r7, #20]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a27      	ldr	r2, [pc, #156]	; (8007cf8 <TIM_OC3_SetConfig+0xf8>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d003      	beq.n	8007c66 <TIM_OC3_SetConfig+0x66>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a26      	ldr	r2, [pc, #152]	; (8007cfc <TIM_OC3_SetConfig+0xfc>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d10d      	bne.n	8007c82 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	021b      	lsls	r3, r3, #8
 8007c74:	697a      	ldr	r2, [r7, #20]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4a1c      	ldr	r2, [pc, #112]	; (8007cf8 <TIM_OC3_SetConfig+0xf8>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d00f      	beq.n	8007caa <TIM_OC3_SetConfig+0xaa>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a1b      	ldr	r2, [pc, #108]	; (8007cfc <TIM_OC3_SetConfig+0xfc>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d00b      	beq.n	8007caa <TIM_OC3_SetConfig+0xaa>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4a1a      	ldr	r2, [pc, #104]	; (8007d00 <TIM_OC3_SetConfig+0x100>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d007      	beq.n	8007caa <TIM_OC3_SetConfig+0xaa>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a19      	ldr	r2, [pc, #100]	; (8007d04 <TIM_OC3_SetConfig+0x104>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d003      	beq.n	8007caa <TIM_OC3_SetConfig+0xaa>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4a18      	ldr	r2, [pc, #96]	; (8007d08 <TIM_OC3_SetConfig+0x108>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d113      	bne.n	8007cd2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	695b      	ldr	r3, [r3, #20]
 8007cbe:	011b      	lsls	r3, r3, #4
 8007cc0:	693a      	ldr	r2, [r7, #16]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	699b      	ldr	r3, [r3, #24]
 8007cca:	011b      	lsls	r3, r3, #4
 8007ccc:	693a      	ldr	r2, [r7, #16]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	685a      	ldr	r2, [r3, #4]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	697a      	ldr	r2, [r7, #20]
 8007cea:	621a      	str	r2, [r3, #32]
}
 8007cec:	bf00      	nop
 8007cee:	371c      	adds	r7, #28
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr
 8007cf8:	40010000 	.word	0x40010000
 8007cfc:	40010400 	.word	0x40010400
 8007d00:	40014000 	.word	0x40014000
 8007d04:	40014400 	.word	0x40014400
 8007d08:	40014800 	.word	0x40014800

08007d0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b087      	sub	sp, #28
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a1b      	ldr	r3, [r3, #32]
 8007d1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	69db      	ldr	r3, [r3, #28]
 8007d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	021b      	lsls	r3, r3, #8
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	031b      	lsls	r3, r3, #12
 8007d5e:	693a      	ldr	r2, [r7, #16]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a18      	ldr	r2, [pc, #96]	; (8007dc8 <TIM_OC4_SetConfig+0xbc>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d00f      	beq.n	8007d8c <TIM_OC4_SetConfig+0x80>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a17      	ldr	r2, [pc, #92]	; (8007dcc <TIM_OC4_SetConfig+0xc0>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d00b      	beq.n	8007d8c <TIM_OC4_SetConfig+0x80>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a16      	ldr	r2, [pc, #88]	; (8007dd0 <TIM_OC4_SetConfig+0xc4>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d007      	beq.n	8007d8c <TIM_OC4_SetConfig+0x80>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4a15      	ldr	r2, [pc, #84]	; (8007dd4 <TIM_OC4_SetConfig+0xc8>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d003      	beq.n	8007d8c <TIM_OC4_SetConfig+0x80>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4a14      	ldr	r2, [pc, #80]	; (8007dd8 <TIM_OC4_SetConfig+0xcc>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d109      	bne.n	8007da0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	695b      	ldr	r3, [r3, #20]
 8007d98:	019b      	lsls	r3, r3, #6
 8007d9a:	697a      	ldr	r2, [r7, #20]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	697a      	ldr	r2, [r7, #20]
 8007da4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	685a      	ldr	r2, [r3, #4]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	693a      	ldr	r2, [r7, #16]
 8007db8:	621a      	str	r2, [r3, #32]
}
 8007dba:	bf00      	nop
 8007dbc:	371c      	adds	r7, #28
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	40010000 	.word	0x40010000
 8007dcc:	40010400 	.word	0x40010400
 8007dd0:	40014000 	.word	0x40014000
 8007dd4:	40014400 	.word	0x40014400
 8007dd8:	40014800 	.word	0x40014800

08007ddc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b087      	sub	sp, #28
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a1b      	ldr	r3, [r3, #32]
 8007df6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007e1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	041b      	lsls	r3, r3, #16
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	4313      	orrs	r3, r2
 8007e28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a17      	ldr	r2, [pc, #92]	; (8007e8c <TIM_OC5_SetConfig+0xb0>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d00f      	beq.n	8007e52 <TIM_OC5_SetConfig+0x76>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a16      	ldr	r2, [pc, #88]	; (8007e90 <TIM_OC5_SetConfig+0xb4>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d00b      	beq.n	8007e52 <TIM_OC5_SetConfig+0x76>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a15      	ldr	r2, [pc, #84]	; (8007e94 <TIM_OC5_SetConfig+0xb8>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d007      	beq.n	8007e52 <TIM_OC5_SetConfig+0x76>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a14      	ldr	r2, [pc, #80]	; (8007e98 <TIM_OC5_SetConfig+0xbc>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d003      	beq.n	8007e52 <TIM_OC5_SetConfig+0x76>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a13      	ldr	r2, [pc, #76]	; (8007e9c <TIM_OC5_SetConfig+0xc0>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d109      	bne.n	8007e66 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	695b      	ldr	r3, [r3, #20]
 8007e5e:	021b      	lsls	r3, r3, #8
 8007e60:	697a      	ldr	r2, [r7, #20]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	697a      	ldr	r2, [r7, #20]
 8007e6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	68fa      	ldr	r2, [r7, #12]
 8007e70:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	685a      	ldr	r2, [r3, #4]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	693a      	ldr	r2, [r7, #16]
 8007e7e:	621a      	str	r2, [r3, #32]
}
 8007e80:	bf00      	nop
 8007e82:	371c      	adds	r7, #28
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr
 8007e8c:	40010000 	.word	0x40010000
 8007e90:	40010400 	.word	0x40010400
 8007e94:	40014000 	.word	0x40014000
 8007e98:	40014400 	.word	0x40014400
 8007e9c:	40014800 	.word	0x40014800

08007ea0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b087      	sub	sp, #28
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a1b      	ldr	r3, [r3, #32]
 8007eae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a1b      	ldr	r3, [r3, #32]
 8007eba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	021b      	lsls	r3, r3, #8
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ee2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	051b      	lsls	r3, r3, #20
 8007eea:	693a      	ldr	r2, [r7, #16]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a18      	ldr	r2, [pc, #96]	; (8007f54 <TIM_OC6_SetConfig+0xb4>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d00f      	beq.n	8007f18 <TIM_OC6_SetConfig+0x78>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a17      	ldr	r2, [pc, #92]	; (8007f58 <TIM_OC6_SetConfig+0xb8>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d00b      	beq.n	8007f18 <TIM_OC6_SetConfig+0x78>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a16      	ldr	r2, [pc, #88]	; (8007f5c <TIM_OC6_SetConfig+0xbc>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d007      	beq.n	8007f18 <TIM_OC6_SetConfig+0x78>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a15      	ldr	r2, [pc, #84]	; (8007f60 <TIM_OC6_SetConfig+0xc0>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d003      	beq.n	8007f18 <TIM_OC6_SetConfig+0x78>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a14      	ldr	r2, [pc, #80]	; (8007f64 <TIM_OC6_SetConfig+0xc4>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d109      	bne.n	8007f2c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007f1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	695b      	ldr	r3, [r3, #20]
 8007f24:	029b      	lsls	r3, r3, #10
 8007f26:	697a      	ldr	r2, [r7, #20]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	697a      	ldr	r2, [r7, #20]
 8007f30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	685a      	ldr	r2, [r3, #4]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	693a      	ldr	r2, [r7, #16]
 8007f44:	621a      	str	r2, [r3, #32]
}
 8007f46:	bf00      	nop
 8007f48:	371c      	adds	r7, #28
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	40010000 	.word	0x40010000
 8007f58:	40010400 	.word	0x40010400
 8007f5c:	40014000 	.word	0x40014000
 8007f60:	40014400 	.word	0x40014400
 8007f64:	40014800 	.word	0x40014800

08007f68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b087      	sub	sp, #28
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6a1b      	ldr	r3, [r3, #32]
 8007f78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6a1b      	ldr	r3, [r3, #32]
 8007f7e:	f023 0201 	bic.w	r2, r3, #1
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	699b      	ldr	r3, [r3, #24]
 8007f8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	011b      	lsls	r3, r3, #4
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	f023 030a 	bic.w	r3, r3, #10
 8007fa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fa6:	697a      	ldr	r2, [r7, #20]
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	693a      	ldr	r2, [r7, #16]
 8007fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	621a      	str	r2, [r3, #32]
}
 8007fba:	bf00      	nop
 8007fbc:	371c      	adds	r7, #28
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr

08007fc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b087      	sub	sp, #28
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	60f8      	str	r0, [r7, #12]
 8007fce:	60b9      	str	r1, [r7, #8]
 8007fd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6a1b      	ldr	r3, [r3, #32]
 8007fd6:	f023 0210 	bic.w	r2, r3, #16
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6a1b      	ldr	r3, [r3, #32]
 8007fe8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ff0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	031b      	lsls	r3, r3, #12
 8007ff6:	697a      	ldr	r2, [r7, #20]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008002:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	011b      	lsls	r3, r3, #4
 8008008:	693a      	ldr	r2, [r7, #16]
 800800a:	4313      	orrs	r3, r2
 800800c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	697a      	ldr	r2, [r7, #20]
 8008012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	693a      	ldr	r2, [r7, #16]
 8008018:	621a      	str	r2, [r3, #32]
}
 800801a:	bf00      	nop
 800801c:	371c      	adds	r7, #28
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr
	...

08008028 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008028:	b480      	push	{r7}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008038:	68fa      	ldr	r2, [r7, #12]
 800803a:	4b09      	ldr	r3, [pc, #36]	; (8008060 <TIM_ITRx_SetConfig+0x38>)
 800803c:	4013      	ands	r3, r2
 800803e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008040:	683a      	ldr	r2, [r7, #0]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	4313      	orrs	r3, r2
 8008046:	f043 0307 	orr.w	r3, r3, #7
 800804a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	609a      	str	r2, [r3, #8]
}
 8008052:	bf00      	nop
 8008054:	3714      	adds	r7, #20
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr
 800805e:	bf00      	nop
 8008060:	ffcfff8f 	.word	0xffcfff8f

08008064 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008064:	b480      	push	{r7}
 8008066:	b087      	sub	sp, #28
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]
 8008070:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800807e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	021a      	lsls	r2, r3, #8
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	431a      	orrs	r2, r3
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	4313      	orrs	r3, r2
 800808c:	697a      	ldr	r2, [r7, #20]
 800808e:	4313      	orrs	r3, r2
 8008090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	697a      	ldr	r2, [r7, #20]
 8008096:	609a      	str	r2, [r3, #8]
}
 8008098:	bf00      	nop
 800809a:	371c      	adds	r7, #28
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b085      	sub	sp, #20
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d101      	bne.n	80080bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080b8:	2302      	movs	r3, #2
 80080ba:	e068      	b.n	800818e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2202      	movs	r2, #2
 80080c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a2e      	ldr	r2, [pc, #184]	; (800819c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d004      	beq.n	80080f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a2d      	ldr	r2, [pc, #180]	; (80081a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d108      	bne.n	8008102 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80080f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	4313      	orrs	r3, r2
 8008100:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008108:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	4313      	orrs	r3, r2
 8008112:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	68fa      	ldr	r2, [r7, #12]
 800811a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a1e      	ldr	r2, [pc, #120]	; (800819c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d01d      	beq.n	8008162 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800812e:	d018      	beq.n	8008162 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a1b      	ldr	r2, [pc, #108]	; (80081a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d013      	beq.n	8008162 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a1a      	ldr	r2, [pc, #104]	; (80081a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d00e      	beq.n	8008162 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a18      	ldr	r2, [pc, #96]	; (80081ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d009      	beq.n	8008162 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a13      	ldr	r2, [pc, #76]	; (80081a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d004      	beq.n	8008162 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a14      	ldr	r2, [pc, #80]	; (80081b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d10c      	bne.n	800817c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008168:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	68ba      	ldr	r2, [r7, #8]
 8008170:	4313      	orrs	r3, r2
 8008172:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	68ba      	ldr	r2, [r7, #8]
 800817a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3714      	adds	r7, #20
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	40010000 	.word	0x40010000
 80081a0:	40010400 	.word	0x40010400
 80081a4:	40000400 	.word	0x40000400
 80081a8:	40000800 	.word	0x40000800
 80081ac:	40000c00 	.word	0x40000c00
 80081b0:	40001800 	.word	0x40001800

080081b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b085      	sub	sp, #20
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80081be:	2300      	movs	r3, #0
 80081c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d101      	bne.n	80081d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80081cc:	2302      	movs	r3, #2
 80081ce:	e065      	b.n	800829c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	4313      	orrs	r3, r2
 80081f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	4313      	orrs	r3, r2
 8008200:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4313      	orrs	r3, r2
 800820e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	4313      	orrs	r3, r2
 800821c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	695b      	ldr	r3, [r3, #20]
 8008228:	4313      	orrs	r3, r2
 800822a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008236:	4313      	orrs	r3, r2
 8008238:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	699b      	ldr	r3, [r3, #24]
 8008244:	041b      	lsls	r3, r3, #16
 8008246:	4313      	orrs	r3, r2
 8008248:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a16      	ldr	r2, [pc, #88]	; (80082a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d004      	beq.n	800825e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a14      	ldr	r2, [pc, #80]	; (80082ac <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d115      	bne.n	800828a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008268:	051b      	lsls	r3, r3, #20
 800826a:	4313      	orrs	r3, r2
 800826c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	69db      	ldr	r3, [r3, #28]
 8008278:	4313      	orrs	r3, r2
 800827a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	6a1b      	ldr	r3, [r3, #32]
 8008286:	4313      	orrs	r3, r2
 8008288:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3714      	adds	r7, #20
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr
 80082a8:	40010000 	.word	0x40010000
 80082ac:	40010400 	.word	0x40010400

080082b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082b8:	bf00      	nop
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082cc:	bf00      	nop
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d101      	bne.n	80082fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	e042      	b.n	8008384 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008304:	2b00      	cmp	r3, #0
 8008306:	d106      	bne.n	8008316 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f7f9 f9bd 	bl	8001690 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2224      	movs	r2, #36	; 0x24
 800831a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f022 0201 	bic.w	r2, r2, #1
 800832c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fbc6 	bl	8008ac0 <UART_SetConfig>
 8008334:	4603      	mov	r3, r0
 8008336:	2b01      	cmp	r3, #1
 8008338:	d101      	bne.n	800833e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	e022      	b.n	8008384 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008342:	2b00      	cmp	r3, #0
 8008344:	d002      	beq.n	800834c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f001 f91a 	bl	8009580 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	685a      	ldr	r2, [r3, #4]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800835a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	689a      	ldr	r2, [r3, #8]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800836a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f042 0201 	orr.w	r2, r2, #1
 800837a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f001 f9a1 	bl	80096c4 <UART_CheckIdleState>
 8008382:	4603      	mov	r3, r0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3708      	adds	r7, #8
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800838c:	b480      	push	{r7}
 800838e:	b085      	sub	sp, #20
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	4613      	mov	r3, r2
 8008398:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083a0:	2b20      	cmp	r3, #32
 80083a2:	d168      	bne.n	8008476 <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d002      	beq.n	80083b0 <HAL_UART_Transmit_IT+0x24>
 80083aa:	88fb      	ldrh	r3, [r7, #6]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d101      	bne.n	80083b4 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	e061      	b.n	8008478 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d101      	bne.n	80083c2 <HAL_UART_Transmit_IT+0x36>
 80083be:	2302      	movs	r3, #2
 80083c0:	e05a      	b.n	8008478 <HAL_UART_Transmit_IT+0xec>
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2201      	movs	r2, #1
 80083c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	68ba      	ldr	r2, [r7, #8]
 80083ce:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	88fa      	ldrh	r2, [r7, #6]
 80083d4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	88fa      	ldrh	r2, [r7, #6]
 80083dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2200      	movs	r2, #0
 80083e4:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2200      	movs	r2, #0
 80083ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2221      	movs	r2, #33	; 0x21
 80083f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083fe:	d11c      	bne.n	800843a <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008408:	d107      	bne.n	800841a <HAL_UART_Transmit_IT+0x8e>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d103      	bne.n	800841a <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	4a1b      	ldr	r2, [pc, #108]	; (8008484 <HAL_UART_Transmit_IT+0xf8>)
 8008416:	675a      	str	r2, [r3, #116]	; 0x74
 8008418:	e002      	b.n	8008420 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	4a1a      	ldr	r2, [pc, #104]	; (8008488 <HAL_UART_Transmit_IT+0xfc>)
 800841e:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2200      	movs	r2, #0
 8008424:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	689a      	ldr	r2, [r3, #8]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008436:	609a      	str	r2, [r3, #8]
 8008438:	e01b      	b.n	8008472 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008442:	d107      	bne.n	8008454 <HAL_UART_Transmit_IT+0xc8>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d103      	bne.n	8008454 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	4a0f      	ldr	r2, [pc, #60]	; (800848c <HAL_UART_Transmit_IT+0x100>)
 8008450:	675a      	str	r2, [r3, #116]	; 0x74
 8008452:	e002      	b.n	800845a <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	4a0e      	ldr	r2, [pc, #56]	; (8008490 <HAL_UART_Transmit_IT+0x104>)
 8008458:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008470:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8008472:	2300      	movs	r3, #0
 8008474:	e000      	b.n	8008478 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 8008476:	2302      	movs	r3, #2
  }
}
 8008478:	4618      	mov	r0, r3
 800847a:	3714      	adds	r7, #20
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr
 8008484:	08009bf5 	.word	0x08009bf5
 8008488:	08009b5b 	.word	0x08009b5b
 800848c:	08009add 	.word	0x08009add
 8008490:	08009a69 	.word	0x08009a69

08008494 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	4613      	mov	r3, r2
 80084a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084a8:	2b20      	cmp	r3, #32
 80084aa:	d131      	bne.n	8008510 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d002      	beq.n	80084b8 <HAL_UART_Receive_IT+0x24>
 80084b2:	88fb      	ldrh	r3, [r7, #6]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d101      	bne.n	80084bc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	e02a      	b.n	8008512 <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d101      	bne.n	80084ca <HAL_UART_Receive_IT+0x36>
 80084c6:	2302      	movs	r3, #2
 80084c8:	e023      	b.n	8008512 <HAL_UART_Receive_IT+0x7e>
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2201      	movs	r2, #1
 80084ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2200      	movs	r2, #0
 80084d6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a0f      	ldr	r2, [pc, #60]	; (800851c <HAL_UART_Receive_IT+0x88>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d00e      	beq.n	8008500 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d007      	beq.n	8008500 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80084fe:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008500:	88fb      	ldrh	r3, [r7, #6]
 8008502:	461a      	mov	r2, r3
 8008504:	68b9      	ldr	r1, [r7, #8]
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f001 f9a8 	bl	800985c <UART_Start_Receive_IT>
 800850c:	4603      	mov	r3, r0
 800850e:	e000      	b.n	8008512 <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008510:	2302      	movs	r3, #2
  }
}
 8008512:	4618      	mov	r0, r3
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	58000c00 	.word	0x58000c00

08008520 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b088      	sub	sp, #32
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	69db      	ldr	r3, [r3, #28]
 800852e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008540:	69fa      	ldr	r2, [r7, #28]
 8008542:	f640 030f 	movw	r3, #2063	; 0x80f
 8008546:	4013      	ands	r3, r2
 8008548:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d118      	bne.n	8008582 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	f003 0320 	and.w	r3, r3, #32
 8008556:	2b00      	cmp	r3, #0
 8008558:	d013      	beq.n	8008582 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	f003 0320 	and.w	r3, r3, #32
 8008560:	2b00      	cmp	r3, #0
 8008562:	d104      	bne.n	800856e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800856a:	2b00      	cmp	r3, #0
 800856c:	d009      	beq.n	8008582 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008572:	2b00      	cmp	r3, #0
 8008574:	f000 8282 	beq.w	8008a7c <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	4798      	blx	r3
      }
      return;
 8008580:	e27c      	b.n	8008a7c <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	2b00      	cmp	r3, #0
 8008586:	f000 80ef 	beq.w	8008768 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800858a:	697a      	ldr	r2, [r7, #20]
 800858c:	4b73      	ldr	r3, [pc, #460]	; (800875c <HAL_UART_IRQHandler+0x23c>)
 800858e:	4013      	ands	r3, r2
 8008590:	2b00      	cmp	r3, #0
 8008592:	d105      	bne.n	80085a0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008594:	69ba      	ldr	r2, [r7, #24]
 8008596:	4b72      	ldr	r3, [pc, #456]	; (8008760 <HAL_UART_IRQHandler+0x240>)
 8008598:	4013      	ands	r3, r2
 800859a:	2b00      	cmp	r3, #0
 800859c:	f000 80e4 	beq.w	8008768 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	f003 0301 	and.w	r3, r3, #1
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d010      	beq.n	80085cc <HAL_UART_IRQHandler+0xac>
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00b      	beq.n	80085cc <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2201      	movs	r2, #1
 80085ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085c2:	f043 0201 	orr.w	r2, r3, #1
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	f003 0302 	and.w	r3, r3, #2
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d010      	beq.n	80085f8 <HAL_UART_IRQHandler+0xd8>
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	f003 0301 	and.w	r3, r3, #1
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00b      	beq.n	80085f8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2202      	movs	r2, #2
 80085e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085ee:	f043 0204 	orr.w	r2, r3, #4
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	f003 0304 	and.w	r3, r3, #4
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d010      	beq.n	8008624 <HAL_UART_IRQHandler+0x104>
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	f003 0301 	and.w	r3, r3, #1
 8008608:	2b00      	cmp	r3, #0
 800860a:	d00b      	beq.n	8008624 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2204      	movs	r2, #4
 8008612:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800861a:	f043 0202 	orr.w	r2, r3, #2
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008624:	69fb      	ldr	r3, [r7, #28]
 8008626:	f003 0308 	and.w	r3, r3, #8
 800862a:	2b00      	cmp	r3, #0
 800862c:	d015      	beq.n	800865a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800862e:	69bb      	ldr	r3, [r7, #24]
 8008630:	f003 0320 	and.w	r3, r3, #32
 8008634:	2b00      	cmp	r3, #0
 8008636:	d104      	bne.n	8008642 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008638:	697a      	ldr	r2, [r7, #20]
 800863a:	4b48      	ldr	r3, [pc, #288]	; (800875c <HAL_UART_IRQHandler+0x23c>)
 800863c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00b      	beq.n	800865a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2208      	movs	r2, #8
 8008648:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008650:	f043 0208 	orr.w	r2, r3, #8
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008660:	2b00      	cmp	r3, #0
 8008662:	d011      	beq.n	8008688 <HAL_UART_IRQHandler+0x168>
 8008664:	69bb      	ldr	r3, [r7, #24]
 8008666:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00c      	beq.n	8008688 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008676:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800867e:	f043 0220 	orr.w	r2, r3, #32
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800868e:	2b00      	cmp	r3, #0
 8008690:	f000 81f6 	beq.w	8008a80 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	f003 0320 	and.w	r3, r3, #32
 800869a:	2b00      	cmp	r3, #0
 800869c:	d011      	beq.n	80086c2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	f003 0320 	and.w	r3, r3, #32
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d104      	bne.n	80086b2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d007      	beq.n	80086c2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d003      	beq.n	80086c2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086c8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d4:	2b40      	cmp	r3, #64	; 0x40
 80086d6:	d004      	beq.n	80086e2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d031      	beq.n	8008746 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f001 f978 	bl	80099d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086f2:	2b40      	cmp	r3, #64	; 0x40
 80086f4:	d123      	bne.n	800873e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	689a      	ldr	r2, [r3, #8]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008704:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800870a:	2b00      	cmp	r3, #0
 800870c:	d013      	beq.n	8008736 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008712:	4a14      	ldr	r2, [pc, #80]	; (8008764 <HAL_UART_IRQHandler+0x244>)
 8008714:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800871a:	4618      	mov	r0, r3
 800871c:	f7fa fad6 	bl	8002ccc <HAL_DMA_Abort_IT>
 8008720:	4603      	mov	r3, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	d017      	beq.n	8008756 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800872a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008730:	4610      	mov	r0, r2
 8008732:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008734:	e00f      	b.n	8008756 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 f9ac 	bl	8008a94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800873c:	e00b      	b.n	8008756 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 f9a8 	bl	8008a94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008744:	e007      	b.n	8008756 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 f9a4 	bl	8008a94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008754:	e194      	b.n	8008a80 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008756:	bf00      	nop
    return;
 8008758:	e192      	b.n	8008a80 <HAL_UART_IRQHandler+0x560>
 800875a:	bf00      	nop
 800875c:	10000001 	.word	0x10000001
 8008760:	04000120 	.word	0x04000120
 8008764:	08009a3d 	.word	0x08009a3d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800876c:	2b01      	cmp	r3, #1
 800876e:	f040 810f 	bne.w	8008990 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	f003 0310 	and.w	r3, r3, #16
 8008778:	2b00      	cmp	r3, #0
 800877a:	f000 8109 	beq.w	8008990 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	f003 0310 	and.w	r3, r3, #16
 8008784:	2b00      	cmp	r3, #0
 8008786:	f000 8103 	beq.w	8008990 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2210      	movs	r2, #16
 8008790:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800879c:	2b40      	cmp	r3, #64	; 0x40
 800879e:	f040 80bb 	bne.w	8008918 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a96      	ldr	r2, [pc, #600]	; (8008a04 <HAL_UART_IRQHandler+0x4e4>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d059      	beq.n	8008862 <HAL_UART_IRQHandler+0x342>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a94      	ldr	r2, [pc, #592]	; (8008a08 <HAL_UART_IRQHandler+0x4e8>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d053      	beq.n	8008862 <HAL_UART_IRQHandler+0x342>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a92      	ldr	r2, [pc, #584]	; (8008a0c <HAL_UART_IRQHandler+0x4ec>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d04d      	beq.n	8008862 <HAL_UART_IRQHandler+0x342>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a90      	ldr	r2, [pc, #576]	; (8008a10 <HAL_UART_IRQHandler+0x4f0>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d047      	beq.n	8008862 <HAL_UART_IRQHandler+0x342>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a8e      	ldr	r2, [pc, #568]	; (8008a14 <HAL_UART_IRQHandler+0x4f4>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d041      	beq.n	8008862 <HAL_UART_IRQHandler+0x342>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a8c      	ldr	r2, [pc, #560]	; (8008a18 <HAL_UART_IRQHandler+0x4f8>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d03b      	beq.n	8008862 <HAL_UART_IRQHandler+0x342>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a8a      	ldr	r2, [pc, #552]	; (8008a1c <HAL_UART_IRQHandler+0x4fc>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d035      	beq.n	8008862 <HAL_UART_IRQHandler+0x342>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a88      	ldr	r2, [pc, #544]	; (8008a20 <HAL_UART_IRQHandler+0x500>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d02f      	beq.n	8008862 <HAL_UART_IRQHandler+0x342>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a86      	ldr	r2, [pc, #536]	; (8008a24 <HAL_UART_IRQHandler+0x504>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d029      	beq.n	8008862 <HAL_UART_IRQHandler+0x342>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a84      	ldr	r2, [pc, #528]	; (8008a28 <HAL_UART_IRQHandler+0x508>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d023      	beq.n	8008862 <HAL_UART_IRQHandler+0x342>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a82      	ldr	r2, [pc, #520]	; (8008a2c <HAL_UART_IRQHandler+0x50c>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d01d      	beq.n	8008862 <HAL_UART_IRQHandler+0x342>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a80      	ldr	r2, [pc, #512]	; (8008a30 <HAL_UART_IRQHandler+0x510>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d017      	beq.n	8008862 <HAL_UART_IRQHandler+0x342>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a7e      	ldr	r2, [pc, #504]	; (8008a34 <HAL_UART_IRQHandler+0x514>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d011      	beq.n	8008862 <HAL_UART_IRQHandler+0x342>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a7c      	ldr	r2, [pc, #496]	; (8008a38 <HAL_UART_IRQHandler+0x518>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d00b      	beq.n	8008862 <HAL_UART_IRQHandler+0x342>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a7a      	ldr	r2, [pc, #488]	; (8008a3c <HAL_UART_IRQHandler+0x51c>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d005      	beq.n	8008862 <HAL_UART_IRQHandler+0x342>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a78      	ldr	r2, [pc, #480]	; (8008a40 <HAL_UART_IRQHandler+0x520>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d105      	bne.n	800886e <HAL_UART_IRQHandler+0x34e>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	b29b      	uxth	r3, r3
 800886c:	e004      	b.n	8008878 <HAL_UART_IRQHandler+0x358>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	b29b      	uxth	r3, r3
 8008878:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800887a:	893b      	ldrh	r3, [r7, #8]
 800887c:	2b00      	cmp	r3, #0
 800887e:	f000 8101 	beq.w	8008a84 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008888:	893a      	ldrh	r2, [r7, #8]
 800888a:	429a      	cmp	r2, r3
 800888c:	f080 80fa 	bcs.w	8008a84 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	893a      	ldrh	r2, [r7, #8]
 8008894:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800889c:	69db      	ldr	r3, [r3, #28]
 800889e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088a2:	d02b      	beq.n	80088fc <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80088b2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	689a      	ldr	r2, [r3, #8]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f022 0201 	bic.w	r2, r2, #1
 80088c2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	689a      	ldr	r2, [r3, #8]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088d2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2220      	movs	r2, #32
 80088d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f022 0210 	bic.w	r2, r2, #16
 80088f0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7f9 feca 	bl	8002690 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008908:	b29b      	uxth	r3, r3
 800890a:	1ad3      	subs	r3, r2, r3
 800890c:	b29b      	uxth	r3, r3
 800890e:	4619      	mov	r1, r3
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 f8c9 	bl	8008aa8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008916:	e0b5      	b.n	8008a84 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008924:	b29b      	uxth	r3, r3
 8008926:	1ad3      	subs	r3, r2, r3
 8008928:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008930:	b29b      	uxth	r3, r3
 8008932:	2b00      	cmp	r3, #0
 8008934:	f000 80a8 	beq.w	8008a88 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8008938:	897b      	ldrh	r3, [r7, #10]
 800893a:	2b00      	cmp	r3, #0
 800893c:	f000 80a4 	beq.w	8008a88 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800894e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	6899      	ldr	r1, [r3, #8]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	4b3a      	ldr	r3, [pc, #232]	; (8008a44 <HAL_UART_IRQHandler+0x524>)
 800895c:	400b      	ands	r3, r1
 800895e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2220      	movs	r2, #32
 8008964:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f022 0210 	bic.w	r2, r2, #16
 8008982:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008984:	897b      	ldrh	r3, [r7, #10]
 8008986:	4619      	mov	r1, r3
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 f88d 	bl	8008aa8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800898e:	e07b      	b.n	8008a88 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00d      	beq.n	80089b6 <HAL_UART_IRQHandler+0x496>
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d008      	beq.n	80089b6 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80089ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f001 fcd2 	bl	800a358 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089b4:	e06b      	b.n	8008a8e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d012      	beq.n	80089e6 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80089c0:	69bb      	ldr	r3, [r7, #24]
 80089c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d104      	bne.n	80089d4 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d008      	beq.n	80089e6 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d057      	beq.n	8008a8c <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	4798      	blx	r3
    }
    return;
 80089e4:	e052      	b.n	8008a8c <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d02b      	beq.n	8008a48 <HAL_UART_IRQHandler+0x528>
 80089f0:	69bb      	ldr	r3, [r7, #24]
 80089f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d026      	beq.n	8008a48 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f001 f94c 	bl	8009c98 <UART_EndTransmit_IT>
    return;
 8008a00:	e045      	b.n	8008a8e <HAL_UART_IRQHandler+0x56e>
 8008a02:	bf00      	nop
 8008a04:	40020010 	.word	0x40020010
 8008a08:	40020028 	.word	0x40020028
 8008a0c:	40020040 	.word	0x40020040
 8008a10:	40020058 	.word	0x40020058
 8008a14:	40020070 	.word	0x40020070
 8008a18:	40020088 	.word	0x40020088
 8008a1c:	400200a0 	.word	0x400200a0
 8008a20:	400200b8 	.word	0x400200b8
 8008a24:	40020410 	.word	0x40020410
 8008a28:	40020428 	.word	0x40020428
 8008a2c:	40020440 	.word	0x40020440
 8008a30:	40020458 	.word	0x40020458
 8008a34:	40020470 	.word	0x40020470
 8008a38:	40020488 	.word	0x40020488
 8008a3c:	400204a0 	.word	0x400204a0
 8008a40:	400204b8 	.word	0x400204b8
 8008a44:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d008      	beq.n	8008a64 <HAL_UART_IRQHandler+0x544>
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d003      	beq.n	8008a64 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f001 fc8f 	bl	800a380 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a62:	e014      	b.n	8008a8e <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00f      	beq.n	8008a8e <HAL_UART_IRQHandler+0x56e>
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	da0c      	bge.n	8008a8e <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f001 fc79 	bl	800a36c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a7a:	e008      	b.n	8008a8e <HAL_UART_IRQHandler+0x56e>
      return;
 8008a7c:	bf00      	nop
 8008a7e:	e006      	b.n	8008a8e <HAL_UART_IRQHandler+0x56e>
    return;
 8008a80:	bf00      	nop
 8008a82:	e004      	b.n	8008a8e <HAL_UART_IRQHandler+0x56e>
      return;
 8008a84:	bf00      	nop
 8008a86:	e002      	b.n	8008a8e <HAL_UART_IRQHandler+0x56e>
      return;
 8008a88:	bf00      	nop
 8008a8a:	e000      	b.n	8008a8e <HAL_UART_IRQHandler+0x56e>
    return;
 8008a8c:	bf00      	nop
  }
}
 8008a8e:	3720      	adds	r7, #32
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008a9c:	bf00      	nop
 8008a9e:	370c      	adds	r7, #12
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr

08008aa8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ab4:	bf00      	nop
 8008ab6:	370c      	adds	r7, #12
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ac0:	b5b0      	push	{r4, r5, r7, lr}
 8008ac2:	b08e      	sub	sp, #56	; 0x38
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	689a      	ldr	r2, [r3, #8]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	431a      	orrs	r2, r3
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	695b      	ldr	r3, [r3, #20]
 8008adc:	431a      	orrs	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	69db      	ldr	r3, [r3, #28]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	4bbf      	ldr	r3, [pc, #764]	; (8008dec <UART_SetConfig+0x32c>)
 8008aee:	4013      	ands	r3, r2
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	6812      	ldr	r2, [r2, #0]
 8008af4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008af6:	430b      	orrs	r3, r1
 8008af8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	68da      	ldr	r2, [r3, #12]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	430a      	orrs	r2, r1
 8008b0e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	699b      	ldr	r3, [r3, #24]
 8008b14:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4ab5      	ldr	r2, [pc, #724]	; (8008df0 <UART_SetConfig+0x330>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d004      	beq.n	8008b2a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6a1b      	ldr	r3, [r3, #32]
 8008b24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b26:	4313      	orrs	r3, r2
 8008b28:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	689a      	ldr	r2, [r3, #8]
 8008b30:	4bb0      	ldr	r3, [pc, #704]	; (8008df4 <UART_SetConfig+0x334>)
 8008b32:	4013      	ands	r3, r2
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	6812      	ldr	r2, [r2, #0]
 8008b38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008b3a:	430b      	orrs	r3, r1
 8008b3c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b44:	f023 010f 	bic.w	r1, r3, #15
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	430a      	orrs	r2, r1
 8008b52:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4aa7      	ldr	r2, [pc, #668]	; (8008df8 <UART_SetConfig+0x338>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d176      	bne.n	8008c4c <UART_SetConfig+0x18c>
 8008b5e:	4ba7      	ldr	r3, [pc, #668]	; (8008dfc <UART_SetConfig+0x33c>)
 8008b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b66:	2b28      	cmp	r3, #40	; 0x28
 8008b68:	d86c      	bhi.n	8008c44 <UART_SetConfig+0x184>
 8008b6a:	a201      	add	r2, pc, #4	; (adr r2, 8008b70 <UART_SetConfig+0xb0>)
 8008b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b70:	08008c15 	.word	0x08008c15
 8008b74:	08008c45 	.word	0x08008c45
 8008b78:	08008c45 	.word	0x08008c45
 8008b7c:	08008c45 	.word	0x08008c45
 8008b80:	08008c45 	.word	0x08008c45
 8008b84:	08008c45 	.word	0x08008c45
 8008b88:	08008c45 	.word	0x08008c45
 8008b8c:	08008c45 	.word	0x08008c45
 8008b90:	08008c1d 	.word	0x08008c1d
 8008b94:	08008c45 	.word	0x08008c45
 8008b98:	08008c45 	.word	0x08008c45
 8008b9c:	08008c45 	.word	0x08008c45
 8008ba0:	08008c45 	.word	0x08008c45
 8008ba4:	08008c45 	.word	0x08008c45
 8008ba8:	08008c45 	.word	0x08008c45
 8008bac:	08008c45 	.word	0x08008c45
 8008bb0:	08008c25 	.word	0x08008c25
 8008bb4:	08008c45 	.word	0x08008c45
 8008bb8:	08008c45 	.word	0x08008c45
 8008bbc:	08008c45 	.word	0x08008c45
 8008bc0:	08008c45 	.word	0x08008c45
 8008bc4:	08008c45 	.word	0x08008c45
 8008bc8:	08008c45 	.word	0x08008c45
 8008bcc:	08008c45 	.word	0x08008c45
 8008bd0:	08008c2d 	.word	0x08008c2d
 8008bd4:	08008c45 	.word	0x08008c45
 8008bd8:	08008c45 	.word	0x08008c45
 8008bdc:	08008c45 	.word	0x08008c45
 8008be0:	08008c45 	.word	0x08008c45
 8008be4:	08008c45 	.word	0x08008c45
 8008be8:	08008c45 	.word	0x08008c45
 8008bec:	08008c45 	.word	0x08008c45
 8008bf0:	08008c35 	.word	0x08008c35
 8008bf4:	08008c45 	.word	0x08008c45
 8008bf8:	08008c45 	.word	0x08008c45
 8008bfc:	08008c45 	.word	0x08008c45
 8008c00:	08008c45 	.word	0x08008c45
 8008c04:	08008c45 	.word	0x08008c45
 8008c08:	08008c45 	.word	0x08008c45
 8008c0c:	08008c45 	.word	0x08008c45
 8008c10:	08008c3d 	.word	0x08008c3d
 8008c14:	2301      	movs	r3, #1
 8008c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c1a:	e222      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008c1c:	2304      	movs	r3, #4
 8008c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c22:	e21e      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008c24:	2308      	movs	r3, #8
 8008c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c2a:	e21a      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008c2c:	2310      	movs	r3, #16
 8008c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c32:	e216      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008c34:	2320      	movs	r3, #32
 8008c36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c3a:	e212      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008c3c:	2340      	movs	r3, #64	; 0x40
 8008c3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c42:	e20e      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008c44:	2380      	movs	r3, #128	; 0x80
 8008c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c4a:	e20a      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a6b      	ldr	r2, [pc, #428]	; (8008e00 <UART_SetConfig+0x340>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d130      	bne.n	8008cb8 <UART_SetConfig+0x1f8>
 8008c56:	4b69      	ldr	r3, [pc, #420]	; (8008dfc <UART_SetConfig+0x33c>)
 8008c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c5a:	f003 0307 	and.w	r3, r3, #7
 8008c5e:	2b05      	cmp	r3, #5
 8008c60:	d826      	bhi.n	8008cb0 <UART_SetConfig+0x1f0>
 8008c62:	a201      	add	r2, pc, #4	; (adr r2, 8008c68 <UART_SetConfig+0x1a8>)
 8008c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c68:	08008c81 	.word	0x08008c81
 8008c6c:	08008c89 	.word	0x08008c89
 8008c70:	08008c91 	.word	0x08008c91
 8008c74:	08008c99 	.word	0x08008c99
 8008c78:	08008ca1 	.word	0x08008ca1
 8008c7c:	08008ca9 	.word	0x08008ca9
 8008c80:	2300      	movs	r3, #0
 8008c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c86:	e1ec      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008c88:	2304      	movs	r3, #4
 8008c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c8e:	e1e8      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008c90:	2308      	movs	r3, #8
 8008c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c96:	e1e4      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008c98:	2310      	movs	r3, #16
 8008c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c9e:	e1e0      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008ca0:	2320      	movs	r3, #32
 8008ca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ca6:	e1dc      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008ca8:	2340      	movs	r3, #64	; 0x40
 8008caa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cae:	e1d8      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008cb0:	2380      	movs	r3, #128	; 0x80
 8008cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cb6:	e1d4      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a51      	ldr	r2, [pc, #324]	; (8008e04 <UART_SetConfig+0x344>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d130      	bne.n	8008d24 <UART_SetConfig+0x264>
 8008cc2:	4b4e      	ldr	r3, [pc, #312]	; (8008dfc <UART_SetConfig+0x33c>)
 8008cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cc6:	f003 0307 	and.w	r3, r3, #7
 8008cca:	2b05      	cmp	r3, #5
 8008ccc:	d826      	bhi.n	8008d1c <UART_SetConfig+0x25c>
 8008cce:	a201      	add	r2, pc, #4	; (adr r2, 8008cd4 <UART_SetConfig+0x214>)
 8008cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd4:	08008ced 	.word	0x08008ced
 8008cd8:	08008cf5 	.word	0x08008cf5
 8008cdc:	08008cfd 	.word	0x08008cfd
 8008ce0:	08008d05 	.word	0x08008d05
 8008ce4:	08008d0d 	.word	0x08008d0d
 8008ce8:	08008d15 	.word	0x08008d15
 8008cec:	2300      	movs	r3, #0
 8008cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cf2:	e1b6      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008cf4:	2304      	movs	r3, #4
 8008cf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cfa:	e1b2      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008cfc:	2308      	movs	r3, #8
 8008cfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d02:	e1ae      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008d04:	2310      	movs	r3, #16
 8008d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d0a:	e1aa      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008d0c:	2320      	movs	r3, #32
 8008d0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d12:	e1a6      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008d14:	2340      	movs	r3, #64	; 0x40
 8008d16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d1a:	e1a2      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008d1c:	2380      	movs	r3, #128	; 0x80
 8008d1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d22:	e19e      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a37      	ldr	r2, [pc, #220]	; (8008e08 <UART_SetConfig+0x348>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d130      	bne.n	8008d90 <UART_SetConfig+0x2d0>
 8008d2e:	4b33      	ldr	r3, [pc, #204]	; (8008dfc <UART_SetConfig+0x33c>)
 8008d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d32:	f003 0307 	and.w	r3, r3, #7
 8008d36:	2b05      	cmp	r3, #5
 8008d38:	d826      	bhi.n	8008d88 <UART_SetConfig+0x2c8>
 8008d3a:	a201      	add	r2, pc, #4	; (adr r2, 8008d40 <UART_SetConfig+0x280>)
 8008d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d40:	08008d59 	.word	0x08008d59
 8008d44:	08008d61 	.word	0x08008d61
 8008d48:	08008d69 	.word	0x08008d69
 8008d4c:	08008d71 	.word	0x08008d71
 8008d50:	08008d79 	.word	0x08008d79
 8008d54:	08008d81 	.word	0x08008d81
 8008d58:	2300      	movs	r3, #0
 8008d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d5e:	e180      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008d60:	2304      	movs	r3, #4
 8008d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d66:	e17c      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008d68:	2308      	movs	r3, #8
 8008d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d6e:	e178      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008d70:	2310      	movs	r3, #16
 8008d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d76:	e174      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008d78:	2320      	movs	r3, #32
 8008d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d7e:	e170      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008d80:	2340      	movs	r3, #64	; 0x40
 8008d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d86:	e16c      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008d88:	2380      	movs	r3, #128	; 0x80
 8008d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d8e:	e168      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a1d      	ldr	r2, [pc, #116]	; (8008e0c <UART_SetConfig+0x34c>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d142      	bne.n	8008e20 <UART_SetConfig+0x360>
 8008d9a:	4b18      	ldr	r3, [pc, #96]	; (8008dfc <UART_SetConfig+0x33c>)
 8008d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d9e:	f003 0307 	and.w	r3, r3, #7
 8008da2:	2b05      	cmp	r3, #5
 8008da4:	d838      	bhi.n	8008e18 <UART_SetConfig+0x358>
 8008da6:	a201      	add	r2, pc, #4	; (adr r2, 8008dac <UART_SetConfig+0x2ec>)
 8008da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dac:	08008dc5 	.word	0x08008dc5
 8008db0:	08008dcd 	.word	0x08008dcd
 8008db4:	08008dd5 	.word	0x08008dd5
 8008db8:	08008ddd 	.word	0x08008ddd
 8008dbc:	08008de5 	.word	0x08008de5
 8008dc0:	08008e11 	.word	0x08008e11
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dca:	e14a      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008dcc:	2304      	movs	r3, #4
 8008dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dd2:	e146      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008dd4:	2308      	movs	r3, #8
 8008dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dda:	e142      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008ddc:	2310      	movs	r3, #16
 8008dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008de2:	e13e      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008de4:	2320      	movs	r3, #32
 8008de6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dea:	e13a      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008dec:	cfff69f3 	.word	0xcfff69f3
 8008df0:	58000c00 	.word	0x58000c00
 8008df4:	11fff4ff 	.word	0x11fff4ff
 8008df8:	40011000 	.word	0x40011000
 8008dfc:	58024400 	.word	0x58024400
 8008e00:	40004400 	.word	0x40004400
 8008e04:	40004800 	.word	0x40004800
 8008e08:	40004c00 	.word	0x40004c00
 8008e0c:	40005000 	.word	0x40005000
 8008e10:	2340      	movs	r3, #64	; 0x40
 8008e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e16:	e124      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008e18:	2380      	movs	r3, #128	; 0x80
 8008e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e1e:	e120      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4acc      	ldr	r2, [pc, #816]	; (8009158 <UART_SetConfig+0x698>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d176      	bne.n	8008f18 <UART_SetConfig+0x458>
 8008e2a:	4bcc      	ldr	r3, [pc, #816]	; (800915c <UART_SetConfig+0x69c>)
 8008e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e32:	2b28      	cmp	r3, #40	; 0x28
 8008e34:	d86c      	bhi.n	8008f10 <UART_SetConfig+0x450>
 8008e36:	a201      	add	r2, pc, #4	; (adr r2, 8008e3c <UART_SetConfig+0x37c>)
 8008e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e3c:	08008ee1 	.word	0x08008ee1
 8008e40:	08008f11 	.word	0x08008f11
 8008e44:	08008f11 	.word	0x08008f11
 8008e48:	08008f11 	.word	0x08008f11
 8008e4c:	08008f11 	.word	0x08008f11
 8008e50:	08008f11 	.word	0x08008f11
 8008e54:	08008f11 	.word	0x08008f11
 8008e58:	08008f11 	.word	0x08008f11
 8008e5c:	08008ee9 	.word	0x08008ee9
 8008e60:	08008f11 	.word	0x08008f11
 8008e64:	08008f11 	.word	0x08008f11
 8008e68:	08008f11 	.word	0x08008f11
 8008e6c:	08008f11 	.word	0x08008f11
 8008e70:	08008f11 	.word	0x08008f11
 8008e74:	08008f11 	.word	0x08008f11
 8008e78:	08008f11 	.word	0x08008f11
 8008e7c:	08008ef1 	.word	0x08008ef1
 8008e80:	08008f11 	.word	0x08008f11
 8008e84:	08008f11 	.word	0x08008f11
 8008e88:	08008f11 	.word	0x08008f11
 8008e8c:	08008f11 	.word	0x08008f11
 8008e90:	08008f11 	.word	0x08008f11
 8008e94:	08008f11 	.word	0x08008f11
 8008e98:	08008f11 	.word	0x08008f11
 8008e9c:	08008ef9 	.word	0x08008ef9
 8008ea0:	08008f11 	.word	0x08008f11
 8008ea4:	08008f11 	.word	0x08008f11
 8008ea8:	08008f11 	.word	0x08008f11
 8008eac:	08008f11 	.word	0x08008f11
 8008eb0:	08008f11 	.word	0x08008f11
 8008eb4:	08008f11 	.word	0x08008f11
 8008eb8:	08008f11 	.word	0x08008f11
 8008ebc:	08008f01 	.word	0x08008f01
 8008ec0:	08008f11 	.word	0x08008f11
 8008ec4:	08008f11 	.word	0x08008f11
 8008ec8:	08008f11 	.word	0x08008f11
 8008ecc:	08008f11 	.word	0x08008f11
 8008ed0:	08008f11 	.word	0x08008f11
 8008ed4:	08008f11 	.word	0x08008f11
 8008ed8:	08008f11 	.word	0x08008f11
 8008edc:	08008f09 	.word	0x08008f09
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ee6:	e0bc      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008ee8:	2304      	movs	r3, #4
 8008eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eee:	e0b8      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008ef0:	2308      	movs	r3, #8
 8008ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ef6:	e0b4      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008ef8:	2310      	movs	r3, #16
 8008efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008efe:	e0b0      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008f00:	2320      	movs	r3, #32
 8008f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f06:	e0ac      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008f08:	2340      	movs	r3, #64	; 0x40
 8008f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f0e:	e0a8      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008f10:	2380      	movs	r3, #128	; 0x80
 8008f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f16:	e0a4      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a90      	ldr	r2, [pc, #576]	; (8009160 <UART_SetConfig+0x6a0>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d130      	bne.n	8008f84 <UART_SetConfig+0x4c4>
 8008f22:	4b8e      	ldr	r3, [pc, #568]	; (800915c <UART_SetConfig+0x69c>)
 8008f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f26:	f003 0307 	and.w	r3, r3, #7
 8008f2a:	2b05      	cmp	r3, #5
 8008f2c:	d826      	bhi.n	8008f7c <UART_SetConfig+0x4bc>
 8008f2e:	a201      	add	r2, pc, #4	; (adr r2, 8008f34 <UART_SetConfig+0x474>)
 8008f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f34:	08008f4d 	.word	0x08008f4d
 8008f38:	08008f55 	.word	0x08008f55
 8008f3c:	08008f5d 	.word	0x08008f5d
 8008f40:	08008f65 	.word	0x08008f65
 8008f44:	08008f6d 	.word	0x08008f6d
 8008f48:	08008f75 	.word	0x08008f75
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f52:	e086      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008f54:	2304      	movs	r3, #4
 8008f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f5a:	e082      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008f5c:	2308      	movs	r3, #8
 8008f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f62:	e07e      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008f64:	2310      	movs	r3, #16
 8008f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f6a:	e07a      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008f6c:	2320      	movs	r3, #32
 8008f6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f72:	e076      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008f74:	2340      	movs	r3, #64	; 0x40
 8008f76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f7a:	e072      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008f7c:	2380      	movs	r3, #128	; 0x80
 8008f7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f82:	e06e      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a76      	ldr	r2, [pc, #472]	; (8009164 <UART_SetConfig+0x6a4>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d130      	bne.n	8008ff0 <UART_SetConfig+0x530>
 8008f8e:	4b73      	ldr	r3, [pc, #460]	; (800915c <UART_SetConfig+0x69c>)
 8008f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f92:	f003 0307 	and.w	r3, r3, #7
 8008f96:	2b05      	cmp	r3, #5
 8008f98:	d826      	bhi.n	8008fe8 <UART_SetConfig+0x528>
 8008f9a:	a201      	add	r2, pc, #4	; (adr r2, 8008fa0 <UART_SetConfig+0x4e0>)
 8008f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa0:	08008fb9 	.word	0x08008fb9
 8008fa4:	08008fc1 	.word	0x08008fc1
 8008fa8:	08008fc9 	.word	0x08008fc9
 8008fac:	08008fd1 	.word	0x08008fd1
 8008fb0:	08008fd9 	.word	0x08008fd9
 8008fb4:	08008fe1 	.word	0x08008fe1
 8008fb8:	2300      	movs	r3, #0
 8008fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fbe:	e050      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008fc0:	2304      	movs	r3, #4
 8008fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fc6:	e04c      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008fc8:	2308      	movs	r3, #8
 8008fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fce:	e048      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008fd0:	2310      	movs	r3, #16
 8008fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fd6:	e044      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008fd8:	2320      	movs	r3, #32
 8008fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fde:	e040      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008fe0:	2340      	movs	r3, #64	; 0x40
 8008fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fe6:	e03c      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008fe8:	2380      	movs	r3, #128	; 0x80
 8008fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fee:	e038      	b.n	8009062 <UART_SetConfig+0x5a2>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a5c      	ldr	r2, [pc, #368]	; (8009168 <UART_SetConfig+0x6a8>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d130      	bne.n	800905c <UART_SetConfig+0x59c>
 8008ffa:	4b58      	ldr	r3, [pc, #352]	; (800915c <UART_SetConfig+0x69c>)
 8008ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ffe:	f003 0307 	and.w	r3, r3, #7
 8009002:	2b05      	cmp	r3, #5
 8009004:	d826      	bhi.n	8009054 <UART_SetConfig+0x594>
 8009006:	a201      	add	r2, pc, #4	; (adr r2, 800900c <UART_SetConfig+0x54c>)
 8009008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900c:	08009025 	.word	0x08009025
 8009010:	0800902d 	.word	0x0800902d
 8009014:	08009035 	.word	0x08009035
 8009018:	0800903d 	.word	0x0800903d
 800901c:	08009045 	.word	0x08009045
 8009020:	0800904d 	.word	0x0800904d
 8009024:	2302      	movs	r3, #2
 8009026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800902a:	e01a      	b.n	8009062 <UART_SetConfig+0x5a2>
 800902c:	2304      	movs	r3, #4
 800902e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009032:	e016      	b.n	8009062 <UART_SetConfig+0x5a2>
 8009034:	2308      	movs	r3, #8
 8009036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800903a:	e012      	b.n	8009062 <UART_SetConfig+0x5a2>
 800903c:	2310      	movs	r3, #16
 800903e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009042:	e00e      	b.n	8009062 <UART_SetConfig+0x5a2>
 8009044:	2320      	movs	r3, #32
 8009046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800904a:	e00a      	b.n	8009062 <UART_SetConfig+0x5a2>
 800904c:	2340      	movs	r3, #64	; 0x40
 800904e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009052:	e006      	b.n	8009062 <UART_SetConfig+0x5a2>
 8009054:	2380      	movs	r3, #128	; 0x80
 8009056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800905a:	e002      	b.n	8009062 <UART_SetConfig+0x5a2>
 800905c:	2380      	movs	r3, #128	; 0x80
 800905e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a40      	ldr	r2, [pc, #256]	; (8009168 <UART_SetConfig+0x6a8>)
 8009068:	4293      	cmp	r3, r2
 800906a:	f040 80ef 	bne.w	800924c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800906e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009072:	2b20      	cmp	r3, #32
 8009074:	dc46      	bgt.n	8009104 <UART_SetConfig+0x644>
 8009076:	2b02      	cmp	r3, #2
 8009078:	f2c0 8081 	blt.w	800917e <UART_SetConfig+0x6be>
 800907c:	3b02      	subs	r3, #2
 800907e:	2b1e      	cmp	r3, #30
 8009080:	d87d      	bhi.n	800917e <UART_SetConfig+0x6be>
 8009082:	a201      	add	r2, pc, #4	; (adr r2, 8009088 <UART_SetConfig+0x5c8>)
 8009084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009088:	0800910b 	.word	0x0800910b
 800908c:	0800917f 	.word	0x0800917f
 8009090:	08009113 	.word	0x08009113
 8009094:	0800917f 	.word	0x0800917f
 8009098:	0800917f 	.word	0x0800917f
 800909c:	0800917f 	.word	0x0800917f
 80090a0:	08009123 	.word	0x08009123
 80090a4:	0800917f 	.word	0x0800917f
 80090a8:	0800917f 	.word	0x0800917f
 80090ac:	0800917f 	.word	0x0800917f
 80090b0:	0800917f 	.word	0x0800917f
 80090b4:	0800917f 	.word	0x0800917f
 80090b8:	0800917f 	.word	0x0800917f
 80090bc:	0800917f 	.word	0x0800917f
 80090c0:	08009133 	.word	0x08009133
 80090c4:	0800917f 	.word	0x0800917f
 80090c8:	0800917f 	.word	0x0800917f
 80090cc:	0800917f 	.word	0x0800917f
 80090d0:	0800917f 	.word	0x0800917f
 80090d4:	0800917f 	.word	0x0800917f
 80090d8:	0800917f 	.word	0x0800917f
 80090dc:	0800917f 	.word	0x0800917f
 80090e0:	0800917f 	.word	0x0800917f
 80090e4:	0800917f 	.word	0x0800917f
 80090e8:	0800917f 	.word	0x0800917f
 80090ec:	0800917f 	.word	0x0800917f
 80090f0:	0800917f 	.word	0x0800917f
 80090f4:	0800917f 	.word	0x0800917f
 80090f8:	0800917f 	.word	0x0800917f
 80090fc:	0800917f 	.word	0x0800917f
 8009100:	08009171 	.word	0x08009171
 8009104:	2b40      	cmp	r3, #64	; 0x40
 8009106:	d036      	beq.n	8009176 <UART_SetConfig+0x6b6>
 8009108:	e039      	b.n	800917e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800910a:	f7fd fa83 	bl	8006614 <HAL_RCCEx_GetD3PCLK1Freq>
 800910e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009110:	e03b      	b.n	800918a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009112:	f107 0314 	add.w	r3, r7, #20
 8009116:	4618      	mov	r0, r3
 8009118:	f7fd fa92 	bl	8006640 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009120:	e033      	b.n	800918a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009122:	f107 0308 	add.w	r3, r7, #8
 8009126:	4618      	mov	r0, r3
 8009128:	f7fd fbde 	bl	80068e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009130:	e02b      	b.n	800918a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009132:	4b0a      	ldr	r3, [pc, #40]	; (800915c <UART_SetConfig+0x69c>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f003 0320 	and.w	r3, r3, #32
 800913a:	2b00      	cmp	r3, #0
 800913c:	d009      	beq.n	8009152 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800913e:	4b07      	ldr	r3, [pc, #28]	; (800915c <UART_SetConfig+0x69c>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	08db      	lsrs	r3, r3, #3
 8009144:	f003 0303 	and.w	r3, r3, #3
 8009148:	4a08      	ldr	r2, [pc, #32]	; (800916c <UART_SetConfig+0x6ac>)
 800914a:	fa22 f303 	lsr.w	r3, r2, r3
 800914e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009150:	e01b      	b.n	800918a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8009152:	4b06      	ldr	r3, [pc, #24]	; (800916c <UART_SetConfig+0x6ac>)
 8009154:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009156:	e018      	b.n	800918a <UART_SetConfig+0x6ca>
 8009158:	40011400 	.word	0x40011400
 800915c:	58024400 	.word	0x58024400
 8009160:	40007800 	.word	0x40007800
 8009164:	40007c00 	.word	0x40007c00
 8009168:	58000c00 	.word	0x58000c00
 800916c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009170:	4bc4      	ldr	r3, [pc, #784]	; (8009484 <UART_SetConfig+0x9c4>)
 8009172:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009174:	e009      	b.n	800918a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800917a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800917c:	e005      	b.n	800918a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800917e:	2300      	movs	r3, #0
 8009180:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009188:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800918a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800918c:	2b00      	cmp	r3, #0
 800918e:	f000 81da 	beq.w	8009546 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009196:	4abc      	ldr	r2, [pc, #752]	; (8009488 <UART_SetConfig+0x9c8>)
 8009198:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800919c:	461a      	mov	r2, r3
 800919e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80091a4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	685a      	ldr	r2, [r3, #4]
 80091aa:	4613      	mov	r3, r2
 80091ac:	005b      	lsls	r3, r3, #1
 80091ae:	4413      	add	r3, r2
 80091b0:	6a3a      	ldr	r2, [r7, #32]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d305      	bcc.n	80091c2 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091bc:	6a3a      	ldr	r2, [r7, #32]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d903      	bls.n	80091ca <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80091c8:	e1bd      	b.n	8009546 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091cc:	4618      	mov	r0, r3
 80091ce:	f04f 0100 	mov.w	r1, #0
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d6:	4aac      	ldr	r2, [pc, #688]	; (8009488 <UART_SetConfig+0x9c8>)
 80091d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091dc:	b29a      	uxth	r2, r3
 80091de:	f04f 0300 	mov.w	r3, #0
 80091e2:	f7f7 f879 	bl	80002d8 <__aeabi_uldivmod>
 80091e6:	4602      	mov	r2, r0
 80091e8:	460b      	mov	r3, r1
 80091ea:	4610      	mov	r0, r2
 80091ec:	4619      	mov	r1, r3
 80091ee:	f04f 0200 	mov.w	r2, #0
 80091f2:	f04f 0300 	mov.w	r3, #0
 80091f6:	020b      	lsls	r3, r1, #8
 80091f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80091fc:	0202      	lsls	r2, r0, #8
 80091fe:	6879      	ldr	r1, [r7, #4]
 8009200:	6849      	ldr	r1, [r1, #4]
 8009202:	0849      	lsrs	r1, r1, #1
 8009204:	4608      	mov	r0, r1
 8009206:	f04f 0100 	mov.w	r1, #0
 800920a:	1814      	adds	r4, r2, r0
 800920c:	eb43 0501 	adc.w	r5, r3, r1
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	461a      	mov	r2, r3
 8009216:	f04f 0300 	mov.w	r3, #0
 800921a:	4620      	mov	r0, r4
 800921c:	4629      	mov	r1, r5
 800921e:	f7f7 f85b 	bl	80002d8 <__aeabi_uldivmod>
 8009222:	4602      	mov	r2, r0
 8009224:	460b      	mov	r3, r1
 8009226:	4613      	mov	r3, r2
 8009228:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800922a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009230:	d308      	bcc.n	8009244 <UART_SetConfig+0x784>
 8009232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009234:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009238:	d204      	bcs.n	8009244 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009240:	60da      	str	r2, [r3, #12]
 8009242:	e180      	b.n	8009546 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800924a:	e17c      	b.n	8009546 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	69db      	ldr	r3, [r3, #28]
 8009250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009254:	f040 80bf 	bne.w	80093d6 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8009258:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800925c:	2b20      	cmp	r3, #32
 800925e:	dc49      	bgt.n	80092f4 <UART_SetConfig+0x834>
 8009260:	2b00      	cmp	r3, #0
 8009262:	db7c      	blt.n	800935e <UART_SetConfig+0x89e>
 8009264:	2b20      	cmp	r3, #32
 8009266:	d87a      	bhi.n	800935e <UART_SetConfig+0x89e>
 8009268:	a201      	add	r2, pc, #4	; (adr r2, 8009270 <UART_SetConfig+0x7b0>)
 800926a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800926e:	bf00      	nop
 8009270:	080092fb 	.word	0x080092fb
 8009274:	08009303 	.word	0x08009303
 8009278:	0800935f 	.word	0x0800935f
 800927c:	0800935f 	.word	0x0800935f
 8009280:	0800930b 	.word	0x0800930b
 8009284:	0800935f 	.word	0x0800935f
 8009288:	0800935f 	.word	0x0800935f
 800928c:	0800935f 	.word	0x0800935f
 8009290:	0800931b 	.word	0x0800931b
 8009294:	0800935f 	.word	0x0800935f
 8009298:	0800935f 	.word	0x0800935f
 800929c:	0800935f 	.word	0x0800935f
 80092a0:	0800935f 	.word	0x0800935f
 80092a4:	0800935f 	.word	0x0800935f
 80092a8:	0800935f 	.word	0x0800935f
 80092ac:	0800935f 	.word	0x0800935f
 80092b0:	0800932b 	.word	0x0800932b
 80092b4:	0800935f 	.word	0x0800935f
 80092b8:	0800935f 	.word	0x0800935f
 80092bc:	0800935f 	.word	0x0800935f
 80092c0:	0800935f 	.word	0x0800935f
 80092c4:	0800935f 	.word	0x0800935f
 80092c8:	0800935f 	.word	0x0800935f
 80092cc:	0800935f 	.word	0x0800935f
 80092d0:	0800935f 	.word	0x0800935f
 80092d4:	0800935f 	.word	0x0800935f
 80092d8:	0800935f 	.word	0x0800935f
 80092dc:	0800935f 	.word	0x0800935f
 80092e0:	0800935f 	.word	0x0800935f
 80092e4:	0800935f 	.word	0x0800935f
 80092e8:	0800935f 	.word	0x0800935f
 80092ec:	0800935f 	.word	0x0800935f
 80092f0:	08009351 	.word	0x08009351
 80092f4:	2b40      	cmp	r3, #64	; 0x40
 80092f6:	d02e      	beq.n	8009356 <UART_SetConfig+0x896>
 80092f8:	e031      	b.n	800935e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092fa:	f7fc fa1f 	bl	800573c <HAL_RCC_GetPCLK1Freq>
 80092fe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009300:	e033      	b.n	800936a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009302:	f7fc fa31 	bl	8005768 <HAL_RCC_GetPCLK2Freq>
 8009306:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009308:	e02f      	b.n	800936a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800930a:	f107 0314 	add.w	r3, r7, #20
 800930e:	4618      	mov	r0, r3
 8009310:	f7fd f996 	bl	8006640 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009314:	69bb      	ldr	r3, [r7, #24]
 8009316:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009318:	e027      	b.n	800936a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800931a:	f107 0308 	add.w	r3, r7, #8
 800931e:	4618      	mov	r0, r3
 8009320:	f7fd fae2 	bl	80068e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009328:	e01f      	b.n	800936a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800932a:	4b58      	ldr	r3, [pc, #352]	; (800948c <UART_SetConfig+0x9cc>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f003 0320 	and.w	r3, r3, #32
 8009332:	2b00      	cmp	r3, #0
 8009334:	d009      	beq.n	800934a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009336:	4b55      	ldr	r3, [pc, #340]	; (800948c <UART_SetConfig+0x9cc>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	08db      	lsrs	r3, r3, #3
 800933c:	f003 0303 	and.w	r3, r3, #3
 8009340:	4a53      	ldr	r2, [pc, #332]	; (8009490 <UART_SetConfig+0x9d0>)
 8009342:	fa22 f303 	lsr.w	r3, r2, r3
 8009346:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009348:	e00f      	b.n	800936a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800934a:	4b51      	ldr	r3, [pc, #324]	; (8009490 <UART_SetConfig+0x9d0>)
 800934c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800934e:	e00c      	b.n	800936a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009350:	4b4c      	ldr	r3, [pc, #304]	; (8009484 <UART_SetConfig+0x9c4>)
 8009352:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009354:	e009      	b.n	800936a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800935a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800935c:	e005      	b.n	800936a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800935e:	2300      	movs	r3, #0
 8009360:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009362:	2301      	movs	r3, #1
 8009364:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009368:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800936a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936c:	2b00      	cmp	r3, #0
 800936e:	f000 80ea 	beq.w	8009546 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009376:	4a44      	ldr	r2, [pc, #272]	; (8009488 <UART_SetConfig+0x9c8>)
 8009378:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800937c:	461a      	mov	r2, r3
 800937e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009380:	fbb3 f3f2 	udiv	r3, r3, r2
 8009384:	005a      	lsls	r2, r3, #1
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	085b      	lsrs	r3, r3, #1
 800938c:	441a      	add	r2, r3
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	fbb2 f3f3 	udiv	r3, r2, r3
 8009396:	b29b      	uxth	r3, r3
 8009398:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800939a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939c:	2b0f      	cmp	r3, #15
 800939e:	d916      	bls.n	80093ce <UART_SetConfig+0x90e>
 80093a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093a6:	d212      	bcs.n	80093ce <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80093a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	f023 030f 	bic.w	r3, r3, #15
 80093b0:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80093b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b4:	085b      	lsrs	r3, r3, #1
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	f003 0307 	and.w	r3, r3, #7
 80093bc:	b29a      	uxth	r2, r3
 80093be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80093c0:	4313      	orrs	r3, r2
 80093c2:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80093ca:	60da      	str	r2, [r3, #12]
 80093cc:	e0bb      	b.n	8009546 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80093d4:	e0b7      	b.n	8009546 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80093d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80093da:	2b20      	cmp	r3, #32
 80093dc:	dc4a      	bgt.n	8009474 <UART_SetConfig+0x9b4>
 80093de:	2b00      	cmp	r3, #0
 80093e0:	f2c0 8086 	blt.w	80094f0 <UART_SetConfig+0xa30>
 80093e4:	2b20      	cmp	r3, #32
 80093e6:	f200 8083 	bhi.w	80094f0 <UART_SetConfig+0xa30>
 80093ea:	a201      	add	r2, pc, #4	; (adr r2, 80093f0 <UART_SetConfig+0x930>)
 80093ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f0:	0800947b 	.word	0x0800947b
 80093f4:	08009495 	.word	0x08009495
 80093f8:	080094f1 	.word	0x080094f1
 80093fc:	080094f1 	.word	0x080094f1
 8009400:	0800949d 	.word	0x0800949d
 8009404:	080094f1 	.word	0x080094f1
 8009408:	080094f1 	.word	0x080094f1
 800940c:	080094f1 	.word	0x080094f1
 8009410:	080094ad 	.word	0x080094ad
 8009414:	080094f1 	.word	0x080094f1
 8009418:	080094f1 	.word	0x080094f1
 800941c:	080094f1 	.word	0x080094f1
 8009420:	080094f1 	.word	0x080094f1
 8009424:	080094f1 	.word	0x080094f1
 8009428:	080094f1 	.word	0x080094f1
 800942c:	080094f1 	.word	0x080094f1
 8009430:	080094bd 	.word	0x080094bd
 8009434:	080094f1 	.word	0x080094f1
 8009438:	080094f1 	.word	0x080094f1
 800943c:	080094f1 	.word	0x080094f1
 8009440:	080094f1 	.word	0x080094f1
 8009444:	080094f1 	.word	0x080094f1
 8009448:	080094f1 	.word	0x080094f1
 800944c:	080094f1 	.word	0x080094f1
 8009450:	080094f1 	.word	0x080094f1
 8009454:	080094f1 	.word	0x080094f1
 8009458:	080094f1 	.word	0x080094f1
 800945c:	080094f1 	.word	0x080094f1
 8009460:	080094f1 	.word	0x080094f1
 8009464:	080094f1 	.word	0x080094f1
 8009468:	080094f1 	.word	0x080094f1
 800946c:	080094f1 	.word	0x080094f1
 8009470:	080094e3 	.word	0x080094e3
 8009474:	2b40      	cmp	r3, #64	; 0x40
 8009476:	d037      	beq.n	80094e8 <UART_SetConfig+0xa28>
 8009478:	e03a      	b.n	80094f0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800947a:	f7fc f95f 	bl	800573c <HAL_RCC_GetPCLK1Freq>
 800947e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009480:	e03c      	b.n	80094fc <UART_SetConfig+0xa3c>
 8009482:	bf00      	nop
 8009484:	003d0900 	.word	0x003d0900
 8009488:	0800a624 	.word	0x0800a624
 800948c:	58024400 	.word	0x58024400
 8009490:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009494:	f7fc f968 	bl	8005768 <HAL_RCC_GetPCLK2Freq>
 8009498:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800949a:	e02f      	b.n	80094fc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800949c:	f107 0314 	add.w	r3, r7, #20
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7fd f8cd 	bl	8006640 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80094aa:	e027      	b.n	80094fc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094ac:	f107 0308 	add.w	r3, r7, #8
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7fd fa19 	bl	80068e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80094ba:	e01f      	b.n	80094fc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094bc:	4b2c      	ldr	r3, [pc, #176]	; (8009570 <UART_SetConfig+0xab0>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f003 0320 	and.w	r3, r3, #32
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d009      	beq.n	80094dc <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80094c8:	4b29      	ldr	r3, [pc, #164]	; (8009570 <UART_SetConfig+0xab0>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	08db      	lsrs	r3, r3, #3
 80094ce:	f003 0303 	and.w	r3, r3, #3
 80094d2:	4a28      	ldr	r2, [pc, #160]	; (8009574 <UART_SetConfig+0xab4>)
 80094d4:	fa22 f303 	lsr.w	r3, r2, r3
 80094d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80094da:	e00f      	b.n	80094fc <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80094dc:	4b25      	ldr	r3, [pc, #148]	; (8009574 <UART_SetConfig+0xab4>)
 80094de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80094e0:	e00c      	b.n	80094fc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80094e2:	4b25      	ldr	r3, [pc, #148]	; (8009578 <UART_SetConfig+0xab8>)
 80094e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80094e6:	e009      	b.n	80094fc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80094ee:	e005      	b.n	80094fc <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80094f0:	2300      	movs	r3, #0
 80094f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80094f4:	2301      	movs	r3, #1
 80094f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80094fa:	bf00      	nop
    }

    if (pclk != 0U)
 80094fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d021      	beq.n	8009546 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009506:	4a1d      	ldr	r2, [pc, #116]	; (800957c <UART_SetConfig+0xabc>)
 8009508:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800950c:	461a      	mov	r2, r3
 800950e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009510:	fbb3 f2f2 	udiv	r2, r3, r2
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	085b      	lsrs	r3, r3, #1
 800951a:	441a      	add	r2, r3
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	fbb2 f3f3 	udiv	r3, r2, r3
 8009524:	b29b      	uxth	r3, r3
 8009526:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952a:	2b0f      	cmp	r3, #15
 800952c:	d908      	bls.n	8009540 <UART_SetConfig+0xa80>
 800952e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009534:	d204      	bcs.n	8009540 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800953c:	60da      	str	r2, [r3, #12]
 800953e:	e002      	b.n	8009546 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009540:	2301      	movs	r3, #1
 8009542:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2201      	movs	r2, #1
 800954a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2201      	movs	r2, #1
 8009552:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009562:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009566:	4618      	mov	r0, r3
 8009568:	3738      	adds	r7, #56	; 0x38
 800956a:	46bd      	mov	sp, r7
 800956c:	bdb0      	pop	{r4, r5, r7, pc}
 800956e:	bf00      	nop
 8009570:	58024400 	.word	0x58024400
 8009574:	03d09000 	.word	0x03d09000
 8009578:	003d0900 	.word	0x003d0900
 800957c:	0800a624 	.word	0x0800a624

08009580 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009580:	b480      	push	{r7}
 8009582:	b083      	sub	sp, #12
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800958c:	f003 0301 	and.w	r3, r3, #1
 8009590:	2b00      	cmp	r3, #0
 8009592:	d00a      	beq.n	80095aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	430a      	orrs	r2, r1
 80095a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ae:	f003 0302 	and.w	r3, r3, #2
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00a      	beq.n	80095cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	430a      	orrs	r2, r1
 80095ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d0:	f003 0304 	and.w	r3, r3, #4
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d00a      	beq.n	80095ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	430a      	orrs	r2, r1
 80095ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095f2:	f003 0308 	and.w	r3, r3, #8
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d00a      	beq.n	8009610 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	430a      	orrs	r2, r1
 800960e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009614:	f003 0310 	and.w	r3, r3, #16
 8009618:	2b00      	cmp	r3, #0
 800961a:	d00a      	beq.n	8009632 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	430a      	orrs	r2, r1
 8009630:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009636:	f003 0320 	and.w	r3, r3, #32
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00a      	beq.n	8009654 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	430a      	orrs	r2, r1
 8009652:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800965c:	2b00      	cmp	r3, #0
 800965e:	d01a      	beq.n	8009696 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	430a      	orrs	r2, r1
 8009674:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800967a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800967e:	d10a      	bne.n	8009696 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	430a      	orrs	r2, r1
 8009694:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800969a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d00a      	beq.n	80096b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	430a      	orrs	r2, r1
 80096b6:	605a      	str	r2, [r3, #4]
  }
}
 80096b8:	bf00      	nop
 80096ba:	370c      	adds	r7, #12
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b086      	sub	sp, #24
 80096c8:	af02      	add	r7, sp, #8
 80096ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80096d4:	f7f8 fb58 	bl	8001d88 <HAL_GetTick>
 80096d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f003 0308 	and.w	r3, r3, #8
 80096e4:	2b08      	cmp	r3, #8
 80096e6:	d10e      	bne.n	8009706 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80096ec:	9300      	str	r3, [sp, #0]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2200      	movs	r2, #0
 80096f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 f82f 	bl	800975a <UART_WaitOnFlagUntilTimeout>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d001      	beq.n	8009706 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009702:	2303      	movs	r3, #3
 8009704:	e025      	b.n	8009752 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f003 0304 	and.w	r3, r3, #4
 8009710:	2b04      	cmp	r3, #4
 8009712:	d10e      	bne.n	8009732 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009714:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009718:	9300      	str	r3, [sp, #0]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2200      	movs	r2, #0
 800971e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 f819 	bl	800975a <UART_WaitOnFlagUntilTimeout>
 8009728:	4603      	mov	r3, r0
 800972a:	2b00      	cmp	r3, #0
 800972c:	d001      	beq.n	8009732 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800972e:	2303      	movs	r3, #3
 8009730:	e00f      	b.n	8009752 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2220      	movs	r2, #32
 8009736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2220      	movs	r2, #32
 800973e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3710      	adds	r7, #16
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800975a:	b580      	push	{r7, lr}
 800975c:	b084      	sub	sp, #16
 800975e:	af00      	add	r7, sp, #0
 8009760:	60f8      	str	r0, [r7, #12]
 8009762:	60b9      	str	r1, [r7, #8]
 8009764:	603b      	str	r3, [r7, #0]
 8009766:	4613      	mov	r3, r2
 8009768:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800976a:	e062      	b.n	8009832 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800976c:	69bb      	ldr	r3, [r7, #24]
 800976e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009772:	d05e      	beq.n	8009832 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009774:	f7f8 fb08 	bl	8001d88 <HAL_GetTick>
 8009778:	4602      	mov	r2, r0
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	1ad3      	subs	r3, r2, r3
 800977e:	69ba      	ldr	r2, [r7, #24]
 8009780:	429a      	cmp	r2, r3
 8009782:	d302      	bcc.n	800978a <UART_WaitOnFlagUntilTimeout+0x30>
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d11d      	bne.n	80097c6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009798:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	689a      	ldr	r2, [r3, #8]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f022 0201 	bic.w	r2, r2, #1
 80097a8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2220      	movs	r2, #32
 80097ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2220      	movs	r2, #32
 80097b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2200      	movs	r2, #0
 80097be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80097c2:	2303      	movs	r3, #3
 80097c4:	e045      	b.n	8009852 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f003 0304 	and.w	r3, r3, #4
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d02e      	beq.n	8009832 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	69db      	ldr	r3, [r3, #28]
 80097da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097e2:	d126      	bne.n	8009832 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80097ec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80097fc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	689a      	ldr	r2, [r3, #8]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f022 0201 	bic.w	r2, r2, #1
 800980c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2220      	movs	r2, #32
 8009812:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2220      	movs	r2, #32
 800981a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2220      	movs	r2, #32
 8009822:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2200      	movs	r2, #0
 800982a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800982e:	2303      	movs	r3, #3
 8009830:	e00f      	b.n	8009852 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	69da      	ldr	r2, [r3, #28]
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	4013      	ands	r3, r2
 800983c:	68ba      	ldr	r2, [r7, #8]
 800983e:	429a      	cmp	r2, r3
 8009840:	bf0c      	ite	eq
 8009842:	2301      	moveq	r3, #1
 8009844:	2300      	movne	r3, #0
 8009846:	b2db      	uxtb	r3, r3
 8009848:	461a      	mov	r2, r3
 800984a:	79fb      	ldrb	r3, [r7, #7]
 800984c:	429a      	cmp	r2, r3
 800984e:	d08d      	beq.n	800976c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009850:	2300      	movs	r3, #0
}
 8009852:	4618      	mov	r0, r3
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
	...

0800985c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800985c:	b480      	push	{r7}
 800985e:	b085      	sub	sp, #20
 8009860:	af00      	add	r7, sp, #0
 8009862:	60f8      	str	r0, [r7, #12]
 8009864:	60b9      	str	r1, [r7, #8]
 8009866:	4613      	mov	r3, r2
 8009868:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	68ba      	ldr	r2, [r7, #8]
 800986e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	88fa      	ldrh	r2, [r7, #6]
 8009874:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	88fa      	ldrh	r2, [r7, #6]
 800987c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2200      	movs	r2, #0
 8009884:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	689b      	ldr	r3, [r3, #8]
 800988a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800988e:	d10e      	bne.n	80098ae <UART_Start_Receive_IT+0x52>
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d105      	bne.n	80098a4 <UART_Start_Receive_IT+0x48>
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800989e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80098a2:	e02d      	b.n	8009900 <UART_Start_Receive_IT+0xa4>
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	22ff      	movs	r2, #255	; 0xff
 80098a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80098ac:	e028      	b.n	8009900 <UART_Start_Receive_IT+0xa4>
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	689b      	ldr	r3, [r3, #8]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d10d      	bne.n	80098d2 <UART_Start_Receive_IT+0x76>
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	691b      	ldr	r3, [r3, #16]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d104      	bne.n	80098c8 <UART_Start_Receive_IT+0x6c>
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	22ff      	movs	r2, #255	; 0xff
 80098c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80098c6:	e01b      	b.n	8009900 <UART_Start_Receive_IT+0xa4>
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	227f      	movs	r2, #127	; 0x7f
 80098cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80098d0:	e016      	b.n	8009900 <UART_Start_Receive_IT+0xa4>
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098da:	d10d      	bne.n	80098f8 <UART_Start_Receive_IT+0x9c>
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d104      	bne.n	80098ee <UART_Start_Receive_IT+0x92>
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	227f      	movs	r2, #127	; 0x7f
 80098e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80098ec:	e008      	b.n	8009900 <UART_Start_Receive_IT+0xa4>
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	223f      	movs	r2, #63	; 0x3f
 80098f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80098f6:	e003      	b.n	8009900 <UART_Start_Receive_IT+0xa4>
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2200      	movs	r2, #0
 8009904:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2222      	movs	r2, #34	; 0x22
 800990c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	689a      	ldr	r2, [r3, #8]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f042 0201 	orr.w	r2, r2, #1
 800991e:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009924:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009928:	d12a      	bne.n	8009980 <UART_Start_Receive_IT+0x124>
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009930:	88fa      	ldrh	r2, [r7, #6]
 8009932:	429a      	cmp	r2, r3
 8009934:	d324      	bcc.n	8009980 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800993e:	d107      	bne.n	8009950 <UART_Start_Receive_IT+0xf4>
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	691b      	ldr	r3, [r3, #16]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d103      	bne.n	8009950 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	4a1f      	ldr	r2, [pc, #124]	; (80099c8 <UART_Start_Receive_IT+0x16c>)
 800994c:	671a      	str	r2, [r3, #112]	; 0x70
 800994e:	e002      	b.n	8009956 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	4a1e      	ldr	r2, [pc, #120]	; (80099cc <UART_Start_Receive_IT+0x170>)
 8009954:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2200      	movs	r2, #0
 800995a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800996c:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	689a      	ldr	r2, [r3, #8]
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800997c:	609a      	str	r2, [r3, #8]
 800997e:	e01b      	b.n	80099b8 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	689b      	ldr	r3, [r3, #8]
 8009984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009988:	d107      	bne.n	800999a <UART_Start_Receive_IT+0x13e>
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	691b      	ldr	r3, [r3, #16]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d103      	bne.n	800999a <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	4a0e      	ldr	r2, [pc, #56]	; (80099d0 <UART_Start_Receive_IT+0x174>)
 8009996:	671a      	str	r2, [r3, #112]	; 0x70
 8009998:	e002      	b.n	80099a0 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	4a0d      	ldr	r2, [pc, #52]	; (80099d4 <UART_Start_Receive_IT+0x178>)
 800999e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2200      	movs	r2, #0
 80099a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80099b6:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80099b8:	2300      	movs	r3, #0
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3714      	adds	r7, #20
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr
 80099c6:	bf00      	nop
 80099c8:	0800a081 	.word	0x0800a081
 80099cc:	08009e7d 	.word	0x08009e7d
 80099d0:	08009da5 	.word	0x08009da5
 80099d4:	08009ccd 	.word	0x08009ccd

080099d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	681a      	ldr	r2, [r3, #0]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80099ee:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	6899      	ldr	r1, [r3, #8]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	4b0f      	ldr	r3, [pc, #60]	; (8009a38 <UART_EndRxTransfer+0x60>)
 80099fc:	400b      	ands	r3, r1
 80099fe:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d107      	bne.n	8009a18 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f022 0210 	bic.w	r2, r2, #16
 8009a16:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2220      	movs	r2, #32
 8009a1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2200      	movs	r2, #0
 8009a24:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009a2c:	bf00      	nop
 8009a2e:	370c      	adds	r7, #12
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr
 8009a38:	effffffe 	.word	0xeffffffe

08009a3c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2200      	movs	r2, #0
 8009a56:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a5a:	68f8      	ldr	r0, [r7, #12]
 8009a5c:	f7ff f81a 	bl	8008a94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a60:	bf00      	nop
 8009a62:	3710      	adds	r7, #16
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a76:	2b21      	cmp	r3, #33	; 0x21
 8009a78:	d12a      	bne.n	8009ad0 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d110      	bne.n	8009aa8 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a94:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009aa4:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009aa6:	e013      	b.n	8009ad0 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009aac:	781a      	ldrb	r2, [r3, #0]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ab8:	1c5a      	adds	r2, r3, #1
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	3b01      	subs	r3, #1
 8009ac8:	b29a      	uxth	r2, r3
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8009ad0:	bf00      	nop
 8009ad2:	370c      	adds	r7, #12
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr

08009adc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b085      	sub	sp, #20
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009aea:	2b21      	cmp	r3, #33	; 0x21
 8009aec:	d12f      	bne.n	8009b4e <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d110      	bne.n	8009b1c <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b08:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b18:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009b1a:	e018      	b.n	8009b4e <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b20:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	881b      	ldrh	r3, [r3, #0]
 8009b26:	461a      	mov	r2, r3
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b30:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b36:	1c9a      	adds	r2, r3, #2
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	3b01      	subs	r3, #1
 8009b46:	b29a      	uxth	r2, r3
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8009b4e:	bf00      	nop
 8009b50:	3714      	adds	r7, #20
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr

08009b5a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009b5a:	b480      	push	{r7}
 8009b5c:	b085      	sub	sp, #20
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b68:	2b21      	cmp	r3, #33	; 0x21
 8009b6a:	d13d      	bne.n	8009be8 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009b72:	81fb      	strh	r3, [r7, #14]
 8009b74:	e035      	b.n	8009be2 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d111      	bne.n	8009ba6 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	689a      	ldr	r2, [r3, #8]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8009b90:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ba0:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8009ba2:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8009ba4:	e020      	b.n	8009be8 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	69db      	ldr	r3, [r3, #28]
 8009bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d013      	beq.n	8009bdc <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bb8:	781a      	ldrb	r2, [r3, #0]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bc4:	1c5a      	adds	r2, r3, #1
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	3b01      	subs	r3, #1
 8009bd4:	b29a      	uxth	r2, r3
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009bdc:	89fb      	ldrh	r3, [r7, #14]
 8009bde:	3b01      	subs	r3, #1
 8009be0:	81fb      	strh	r3, [r7, #14]
 8009be2:	89fb      	ldrh	r3, [r7, #14]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d1c6      	bne.n	8009b76 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 8009be8:	bf00      	nop
 8009bea:	3714      	adds	r7, #20
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr

08009bf4 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c02:	2b21      	cmp	r3, #33	; 0x21
 8009c04:	d142      	bne.n	8009c8c <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009c0c:	81fb      	strh	r3, [r7, #14]
 8009c0e:	e03a      	b.n	8009c86 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d111      	bne.n	8009c40 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	689a      	ldr	r2, [r3, #8]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8009c2a:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c3a:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8009c3c:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8009c3e:	e025      	b.n	8009c8c <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	69db      	ldr	r3, [r3, #28]
 8009c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d018      	beq.n	8009c80 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c52:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	881b      	ldrh	r3, [r3, #0]
 8009c58:	461a      	mov	r2, r3
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c62:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c68:	1c9a      	adds	r2, r3, #2
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	3b01      	subs	r3, #1
 8009c78:	b29a      	uxth	r2, r3
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009c80:	89fb      	ldrh	r3, [r7, #14]
 8009c82:	3b01      	subs	r3, #1
 8009c84:	81fb      	strh	r3, [r7, #14]
 8009c86:	89fb      	ldrh	r3, [r7, #14]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d1c1      	bne.n	8009c10 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 8009c8c:	bf00      	nop
 8009c8e:	3714      	adds	r7, #20
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr

08009c98 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009cae:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2220      	movs	r2, #32
 8009cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f7f7 facc 	bl	800125c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009cc4:	bf00      	nop
 8009cc6:	3708      	adds	r7, #8
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009cda:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ce2:	2b22      	cmp	r3, #34	; 0x22
 8009ce4:	d152      	bne.n	8009d8c <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cec:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009cee:	89bb      	ldrh	r3, [r7, #12]
 8009cf0:	b2d9      	uxtb	r1, r3
 8009cf2:	89fb      	ldrh	r3, [r7, #14]
 8009cf4:	b2da      	uxtb	r2, r3
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cfa:	400a      	ands	r2, r1
 8009cfc:	b2d2      	uxtb	r2, r2
 8009cfe:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d04:	1c5a      	adds	r2, r3, #1
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	3b01      	subs	r3, #1
 8009d14:	b29a      	uxth	r2, r3
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d139      	bne.n	8009d9c <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009d36:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	689a      	ldr	r2, [r3, #8]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f022 0201 	bic.w	r2, r2, #1
 8009d46:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2220      	movs	r2, #32
 8009d4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d10f      	bne.n	8009d7e <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f022 0210 	bic.w	r2, r2, #16
 8009d6c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d74:	4619      	mov	r1, r3
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f7fe fe96 	bl	8008aa8 <HAL_UARTEx_RxEventCallback>
 8009d7c:	e002      	b.n	8009d84 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f7f7 fa4e 	bl	8001220 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d8a:	e007      	b.n	8009d9c <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	699a      	ldr	r2, [r3, #24]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f042 0208 	orr.w	r2, r2, #8
 8009d9a:	619a      	str	r2, [r3, #24]
}
 8009d9c:	bf00      	nop
 8009d9e:	3710      	adds	r7, #16
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009db2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dba:	2b22      	cmp	r3, #34	; 0x22
 8009dbc:	d152      	bne.n	8009e64 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc4:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dca:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8009dcc:	89ba      	ldrh	r2, [r7, #12]
 8009dce:	89fb      	ldrh	r3, [r7, #14]
 8009dd0:	4013      	ands	r3, r2
 8009dd2:	b29a      	uxth	r2, r3
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ddc:	1c9a      	adds	r2, r3, #2
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	3b01      	subs	r3, #1
 8009dec:	b29a      	uxth	r2, r3
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d139      	bne.n	8009e74 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	681a      	ldr	r2, [r3, #0]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009e0e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	689a      	ldr	r2, [r3, #8]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f022 0201 	bic.w	r2, r2, #1
 8009e1e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2220      	movs	r2, #32
 8009e24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d10f      	bne.n	8009e56 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f022 0210 	bic.w	r2, r2, #16
 8009e44:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f7fe fe2a 	bl	8008aa8 <HAL_UARTEx_RxEventCallback>
 8009e54:	e002      	b.n	8009e5c <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f7f7 f9e2 	bl	8001220 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009e62:	e007      	b.n	8009e74 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	699a      	ldr	r2, [r3, #24]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f042 0208 	orr.w	r2, r2, #8
 8009e72:	619a      	str	r2, [r3, #24]
}
 8009e74:	bf00      	nop
 8009e76:	3710      	adds	r7, #16
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b088      	sub	sp, #32
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009e8a:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	69db      	ldr	r3, [r3, #28]
 8009e92:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eaa:	2b22      	cmp	r3, #34	; 0x22
 8009eac:	f040 80d8 	bne.w	800a060 <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009eb6:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009eb8:	e0a8      	b.n	800a00c <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec0:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009ec2:	89bb      	ldrh	r3, [r7, #12]
 8009ec4:	b2d9      	uxtb	r1, r3
 8009ec6:	8b7b      	ldrh	r3, [r7, #26]
 8009ec8:	b2da      	uxtb	r2, r3
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ece:	400a      	ands	r2, r1
 8009ed0:	b2d2      	uxtb	r2, r2
 8009ed2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ed8:	1c5a      	adds	r2, r3, #1
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	3b01      	subs	r3, #1
 8009ee8:	b29a      	uxth	r2, r3
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	69db      	ldr	r3, [r3, #28]
 8009ef6:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009ef8:	69fb      	ldr	r3, [r7, #28]
 8009efa:	f003 0307 	and.w	r3, r3, #7
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d04d      	beq.n	8009f9e <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009f02:	69fb      	ldr	r3, [r7, #28]
 8009f04:	f003 0301 	and.w	r3, r3, #1
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d010      	beq.n	8009f2e <UART_RxISR_8BIT_FIFOEN+0xb2>
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d00b      	beq.n	8009f2e <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f24:	f043 0201 	orr.w	r2, r3, #1
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f2e:	69fb      	ldr	r3, [r7, #28]
 8009f30:	f003 0302 	and.w	r3, r3, #2
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d010      	beq.n	8009f5a <UART_RxISR_8BIT_FIFOEN+0xde>
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	f003 0301 	and.w	r3, r3, #1
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d00b      	beq.n	8009f5a <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	2202      	movs	r2, #2
 8009f48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f50:	f043 0204 	orr.w	r2, r3, #4
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f5a:	69fb      	ldr	r3, [r7, #28]
 8009f5c:	f003 0304 	and.w	r3, r3, #4
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d010      	beq.n	8009f86 <UART_RxISR_8BIT_FIFOEN+0x10a>
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	f003 0301 	and.w	r3, r3, #1
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d00b      	beq.n	8009f86 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	2204      	movs	r2, #4
 8009f74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f7c:	f043 0202 	orr.w	r2, r3, #2
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d006      	beq.n	8009f9e <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f7fe fd7f 	bl	8008a94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d130      	bne.n	800a00c <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009fb8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	6899      	ldr	r1, [r3, #8]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681a      	ldr	r2, [r3, #0]
 8009fc4:	4b2c      	ldr	r3, [pc, #176]	; (800a078 <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 8009fc6:	400b      	ands	r3, r1
 8009fc8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2220      	movs	r2, #32
 8009fce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d10f      	bne.n	800a000 <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f022 0210 	bic.w	r2, r2, #16
 8009fee:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f7fe fd55 	bl	8008aa8 <HAL_UARTEx_RxEventCallback>
 8009ffe:	e002      	b.n	800a006 <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f7f7 f90d 	bl	8001220 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a00c:	89fb      	ldrh	r3, [r7, #14]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d005      	beq.n	800a01e <UART_RxISR_8BIT_FIFOEN+0x1a2>
 800a012:	69fb      	ldr	r3, [r7, #28]
 800a014:	f003 0320 	and.w	r3, r3, #32
 800a018:	2b00      	cmp	r3, #0
 800a01a:	f47f af4e 	bne.w	8009eba <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a024:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a026:	897b      	ldrh	r3, [r7, #10]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d021      	beq.n	800a070 <UART_RxISR_8BIT_FIFOEN+0x1f4>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a032:	897a      	ldrh	r2, [r7, #10]
 800a034:	429a      	cmp	r2, r3
 800a036:	d21b      	bcs.n	800a070 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	689a      	ldr	r2, [r3, #8]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a046:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	4a0c      	ldr	r2, [pc, #48]	; (800a07c <UART_RxISR_8BIT_FIFOEN+0x200>)
 800a04c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f042 0220 	orr.w	r2, r2, #32
 800a05c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a05e:	e007      	b.n	800a070 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	699a      	ldr	r2, [r3, #24]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f042 0208 	orr.w	r2, r2, #8
 800a06e:	619a      	str	r2, [r3, #24]
}
 800a070:	bf00      	nop
 800a072:	3720      	adds	r7, #32
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}
 800a078:	effffffe 	.word	0xeffffffe
 800a07c:	08009ccd 	.word	0x08009ccd

0800a080 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b08a      	sub	sp, #40	; 0x28
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a08e:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	69db      	ldr	r3, [r3, #28]
 800a096:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	689b      	ldr	r3, [r3, #8]
 800a0a6:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ae:	2b22      	cmp	r3, #34	; 0x22
 800a0b0:	f040 80d8 	bne.w	800a264 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a0ba:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a0bc:	e0a8      	b.n	800a210 <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c4:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0ca:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800a0cc:	8aba      	ldrh	r2, [r7, #20]
 800a0ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a0d0:	4013      	ands	r3, r2
 800a0d2:	b29a      	uxth	r2, r3
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0dc:	1c9a      	adds	r2, r3, #2
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	3b01      	subs	r3, #1
 800a0ec:	b29a      	uxth	r2, r3
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	69db      	ldr	r3, [r3, #28]
 800a0fa:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fe:	f003 0307 	and.w	r3, r3, #7
 800a102:	2b00      	cmp	r3, #0
 800a104:	d04d      	beq.n	800a1a2 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a108:	f003 0301 	and.w	r3, r3, #1
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d010      	beq.n	800a132 <UART_RxISR_16BIT_FIFOEN+0xb2>
 800a110:	69fb      	ldr	r3, [r7, #28]
 800a112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a116:	2b00      	cmp	r3, #0
 800a118:	d00b      	beq.n	800a132 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	2201      	movs	r2, #1
 800a120:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a128:	f043 0201 	orr.w	r2, r3, #1
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a134:	f003 0302 	and.w	r3, r3, #2
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d010      	beq.n	800a15e <UART_RxISR_16BIT_FIFOEN+0xde>
 800a13c:	69bb      	ldr	r3, [r7, #24]
 800a13e:	f003 0301 	and.w	r3, r3, #1
 800a142:	2b00      	cmp	r3, #0
 800a144:	d00b      	beq.n	800a15e <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	2202      	movs	r2, #2
 800a14c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a154:	f043 0204 	orr.w	r2, r3, #4
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a160:	f003 0304 	and.w	r3, r3, #4
 800a164:	2b00      	cmp	r3, #0
 800a166:	d010      	beq.n	800a18a <UART_RxISR_16BIT_FIFOEN+0x10a>
 800a168:	69bb      	ldr	r3, [r7, #24]
 800a16a:	f003 0301 	and.w	r3, r3, #1
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d00b      	beq.n	800a18a <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2204      	movs	r2, #4
 800a178:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a180:	f043 0202 	orr.w	r2, r3, #2
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a190:	2b00      	cmp	r3, #0
 800a192:	d006      	beq.n	800a1a2 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f7fe fc7d 	bl	8008a94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d130      	bne.n	800a210 <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a1bc:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	6899      	ldr	r1, [r3, #8]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	4b2c      	ldr	r3, [pc, #176]	; (800a27c <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 800a1ca:	400b      	ands	r3, r1
 800a1cc:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2220      	movs	r2, #32
 800a1d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d10f      	bne.n	800a204 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f022 0210 	bic.w	r2, r2, #16
 800a1f2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f7fe fc53 	bl	8008aa8 <HAL_UARTEx_RxEventCallback>
 800a202:	e002      	b.n	800a20a <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f7f7 f80b 	bl	8001220 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2200      	movs	r2, #0
 800a20e:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a210:	8afb      	ldrh	r3, [r7, #22]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d005      	beq.n	800a222 <UART_RxISR_16BIT_FIFOEN+0x1a2>
 800a216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a218:	f003 0320 	and.w	r3, r3, #32
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	f47f af4e 	bne.w	800a0be <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a228:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a22a:	89fb      	ldrh	r3, [r7, #14]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d021      	beq.n	800a274 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a236:	89fa      	ldrh	r2, [r7, #14]
 800a238:	429a      	cmp	r2, r3
 800a23a:	d21b      	bcs.n	800a274 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	689a      	ldr	r2, [r3, #8]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a24a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	4a0c      	ldr	r2, [pc, #48]	; (800a280 <UART_RxISR_16BIT_FIFOEN+0x200>)
 800a250:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f042 0220 	orr.w	r2, r2, #32
 800a260:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a262:	e007      	b.n	800a274 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	699a      	ldr	r2, [r3, #24]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f042 0208 	orr.w	r2, r2, #8
 800a272:	619a      	str	r2, [r3, #24]
}
 800a274:	bf00      	nop
 800a276:	3728      	adds	r7, #40	; 0x28
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}
 800a27c:	effffffe 	.word	0xeffffffe
 800a280:	08009da5 	.word	0x08009da5

0800a284 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b086      	sub	sp, #24
 800a288:	af00      	add	r7, sp, #0
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	60b9      	str	r1, [r7, #8]
 800a28e:	607a      	str	r2, [r7, #4]
 800a290:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d101      	bne.n	800a29c <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800a298:	2301      	movs	r3, #1
 800a29a:	e056      	b.n	800a34a <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d106      	bne.n	800a2b4 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800a2ae:	68f8      	ldr	r0, [r7, #12]
 800a2b0:	f7f7 f9ee 	bl	8001690 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2224      	movs	r2, #36	; 0x24
 800a2b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f022 0201 	bic.w	r2, r2, #1
 800a2ca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a2cc:	68f8      	ldr	r0, [r7, #12]
 800a2ce:	f7fe fbf7 	bl	8008ac0 <UART_SetConfig>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d101      	bne.n	800a2dc <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	e036      	b.n	800a34a <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d002      	beq.n	800a2ea <HAL_RS485Ex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800a2e4:	68f8      	ldr	r0, [r7, #12]
 800a2e6:	f7ff f94b 	bl	8009580 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	689a      	ldr	r2, [r3, #8]
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a2f8:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	689b      	ldr	r3, [r3, #8]
 800a300:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	68ba      	ldr	r2, [r7, #8]
 800a30a:	430a      	orrs	r2, r1
 800a30c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	055b      	lsls	r3, r3, #21
 800a312:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	041b      	lsls	r3, r3, #16
 800a318:	697a      	ldr	r2, [r7, #20]
 800a31a:	4313      	orrs	r3, r2
 800a31c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	681a      	ldr	r2, [r3, #0]
 800a324:	4b0b      	ldr	r3, [pc, #44]	; (800a354 <HAL_RS485Ex_Init+0xd0>)
 800a326:	4013      	ands	r3, r2
 800a328:	68fa      	ldr	r2, [r7, #12]
 800a32a:	6812      	ldr	r2, [r2, #0]
 800a32c:	6979      	ldr	r1, [r7, #20]
 800a32e:	430b      	orrs	r3, r1
 800a330:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f042 0201 	orr.w	r2, r2, #1
 800a340:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a342:	68f8      	ldr	r0, [r7, #12]
 800a344:	f7ff f9be 	bl	80096c4 <UART_CheckIdleState>
 800a348:	4603      	mov	r3, r0
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3718      	adds	r7, #24
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	fc00ffff 	.word	0xfc00ffff

0800a358 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a358:	b480      	push	{r7}
 800a35a:	b083      	sub	sp, #12
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a360:	bf00      	nop
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b083      	sub	sp, #12
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a374:	bf00      	nop
 800a376:	370c      	adds	r7, #12
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a388:	bf00      	nop
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a394:	b480      	push	{r7}
 800a396:	b085      	sub	sp, #20
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d101      	bne.n	800a3aa <HAL_UARTEx_DisableFifoMode+0x16>
 800a3a6:	2302      	movs	r3, #2
 800a3a8:	e027      	b.n	800a3fa <HAL_UARTEx_DisableFifoMode+0x66>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2224      	movs	r2, #36	; 0x24
 800a3b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	681a      	ldr	r2, [r3, #0]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f022 0201 	bic.w	r2, r2, #1
 800a3d0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a3d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	68fa      	ldr	r2, [r7, #12]
 800a3e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2220      	movs	r2, #32
 800a3ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a3f8:	2300      	movs	r3, #0
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3714      	adds	r7, #20
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr

0800a406 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a406:	b580      	push	{r7, lr}
 800a408:	b084      	sub	sp, #16
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
 800a40e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a416:	2b01      	cmp	r3, #1
 800a418:	d101      	bne.n	800a41e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a41a:	2302      	movs	r3, #2
 800a41c:	e02d      	b.n	800a47a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2201      	movs	r2, #1
 800a422:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2224      	movs	r2, #36	; 0x24
 800a42a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	681a      	ldr	r2, [r3, #0]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f022 0201 	bic.w	r2, r2, #1
 800a444:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	689b      	ldr	r3, [r3, #8]
 800a44c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	683a      	ldr	r2, [r7, #0]
 800a456:	430a      	orrs	r2, r1
 800a458:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 f850 	bl	800a500 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	68fa      	ldr	r2, [r7, #12]
 800a466:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2220      	movs	r2, #32
 800a46c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a478:	2300      	movs	r3, #0
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3710      	adds	r7, #16
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}

0800a482 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a482:	b580      	push	{r7, lr}
 800a484:	b084      	sub	sp, #16
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
 800a48a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a492:	2b01      	cmp	r3, #1
 800a494:	d101      	bne.n	800a49a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a496:	2302      	movs	r3, #2
 800a498:	e02d      	b.n	800a4f6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2201      	movs	r2, #1
 800a49e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2224      	movs	r2, #36	; 0x24
 800a4a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f022 0201 	bic.w	r2, r2, #1
 800a4c0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	683a      	ldr	r2, [r7, #0]
 800a4d2:	430a      	orrs	r2, r1
 800a4d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 f812 	bl	800a500 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	68fa      	ldr	r2, [r7, #12]
 800a4e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2220      	movs	r2, #32
 800a4e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a4f4:	2300      	movs	r3, #0
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3710      	adds	r7, #16
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
	...

0800a500 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a500:	b480      	push	{r7}
 800a502:	b085      	sub	sp, #20
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d108      	bne.n	800a522 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2201      	movs	r2, #1
 800a514:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2201      	movs	r2, #1
 800a51c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a520:	e031      	b.n	800a586 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a522:	2310      	movs	r3, #16
 800a524:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a526:	2310      	movs	r3, #16
 800a528:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	689b      	ldr	r3, [r3, #8]
 800a530:	0e5b      	lsrs	r3, r3, #25
 800a532:	b2db      	uxtb	r3, r3
 800a534:	f003 0307 	and.w	r3, r3, #7
 800a538:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	689b      	ldr	r3, [r3, #8]
 800a540:	0f5b      	lsrs	r3, r3, #29
 800a542:	b2db      	uxtb	r3, r3
 800a544:	f003 0307 	and.w	r3, r3, #7
 800a548:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a54a:	7bbb      	ldrb	r3, [r7, #14]
 800a54c:	7b3a      	ldrb	r2, [r7, #12]
 800a54e:	4911      	ldr	r1, [pc, #68]	; (800a594 <UARTEx_SetNbDataToProcess+0x94>)
 800a550:	5c8a      	ldrb	r2, [r1, r2]
 800a552:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a556:	7b3a      	ldrb	r2, [r7, #12]
 800a558:	490f      	ldr	r1, [pc, #60]	; (800a598 <UARTEx_SetNbDataToProcess+0x98>)
 800a55a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a55c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a560:	b29a      	uxth	r2, r3
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a568:	7bfb      	ldrb	r3, [r7, #15]
 800a56a:	7b7a      	ldrb	r2, [r7, #13]
 800a56c:	4909      	ldr	r1, [pc, #36]	; (800a594 <UARTEx_SetNbDataToProcess+0x94>)
 800a56e:	5c8a      	ldrb	r2, [r1, r2]
 800a570:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a574:	7b7a      	ldrb	r2, [r7, #13]
 800a576:	4908      	ldr	r1, [pc, #32]	; (800a598 <UARTEx_SetNbDataToProcess+0x98>)
 800a578:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a57a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a57e:	b29a      	uxth	r2, r3
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a586:	bf00      	nop
 800a588:	3714      	adds	r7, #20
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr
 800a592:	bf00      	nop
 800a594:	0800a63c 	.word	0x0800a63c
 800a598:	0800a644 	.word	0x0800a644

0800a59c <__libc_init_array>:
 800a59c:	b570      	push	{r4, r5, r6, lr}
 800a59e:	4d0d      	ldr	r5, [pc, #52]	; (800a5d4 <__libc_init_array+0x38>)
 800a5a0:	4c0d      	ldr	r4, [pc, #52]	; (800a5d8 <__libc_init_array+0x3c>)
 800a5a2:	1b64      	subs	r4, r4, r5
 800a5a4:	10a4      	asrs	r4, r4, #2
 800a5a6:	2600      	movs	r6, #0
 800a5a8:	42a6      	cmp	r6, r4
 800a5aa:	d109      	bne.n	800a5c0 <__libc_init_array+0x24>
 800a5ac:	4d0b      	ldr	r5, [pc, #44]	; (800a5dc <__libc_init_array+0x40>)
 800a5ae:	4c0c      	ldr	r4, [pc, #48]	; (800a5e0 <__libc_init_array+0x44>)
 800a5b0:	f000 f820 	bl	800a5f4 <_init>
 800a5b4:	1b64      	subs	r4, r4, r5
 800a5b6:	10a4      	asrs	r4, r4, #2
 800a5b8:	2600      	movs	r6, #0
 800a5ba:	42a6      	cmp	r6, r4
 800a5bc:	d105      	bne.n	800a5ca <__libc_init_array+0x2e>
 800a5be:	bd70      	pop	{r4, r5, r6, pc}
 800a5c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5c4:	4798      	blx	r3
 800a5c6:	3601      	adds	r6, #1
 800a5c8:	e7ee      	b.n	800a5a8 <__libc_init_array+0xc>
 800a5ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5ce:	4798      	blx	r3
 800a5d0:	3601      	adds	r6, #1
 800a5d2:	e7f2      	b.n	800a5ba <__libc_init_array+0x1e>
 800a5d4:	0800a654 	.word	0x0800a654
 800a5d8:	0800a654 	.word	0x0800a654
 800a5dc:	0800a654 	.word	0x0800a654
 800a5e0:	0800a658 	.word	0x0800a658

0800a5e4 <memset>:
 800a5e4:	4402      	add	r2, r0
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d100      	bne.n	800a5ee <memset+0xa>
 800a5ec:	4770      	bx	lr
 800a5ee:	f803 1b01 	strb.w	r1, [r3], #1
 800a5f2:	e7f9      	b.n	800a5e8 <memset+0x4>

0800a5f4 <_init>:
 800a5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5f6:	bf00      	nop
 800a5f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5fa:	bc08      	pop	{r3}
 800a5fc:	469e      	mov	lr, r3
 800a5fe:	4770      	bx	lr

0800a600 <_fini>:
 800a600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a602:	bf00      	nop
 800a604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a606:	bc08      	pop	{r3}
 800a608:	469e      	mov	lr, r3
 800a60a:	4770      	bx	lr
