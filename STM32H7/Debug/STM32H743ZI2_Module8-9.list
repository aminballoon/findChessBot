
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013008  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000201c  080132a8  080132a8  000232a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080152c4  080152c4  000252c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  080152cc  080152cc  000252cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  080152d4  080152d4  000252d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f4  24000000  080152dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001110  240001f4  080154d0  000301f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24001304  080154d0  00031304  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003e680  00000000  00000000  00030222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005b98  00000000  00000000  0006e8a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000016e0  00000000  00000000  00074440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001528  00000000  00000000  00075b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e58b  00000000  00000000  00077048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000238c7  00000000  00000000  000b55d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016dc44  00000000  00000000  000d8e9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00246ade  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000727c  00000000  00000000  00246b34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f4 	.word	0x240001f4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013290 	.word	0x08013290

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f8 	.word	0x240001f8
 80002dc:	08013290 	.word	0x08013290

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b96e 	b.w	80009fc <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	4604      	mov	r4, r0
 8000740:	468c      	mov	ip, r1
 8000742:	2b00      	cmp	r3, #0
 8000744:	f040 8083 	bne.w	800084e <__udivmoddi4+0x116>
 8000748:	428a      	cmp	r2, r1
 800074a:	4617      	mov	r7, r2
 800074c:	d947      	bls.n	80007de <__udivmoddi4+0xa6>
 800074e:	fab2 f282 	clz	r2, r2
 8000752:	b142      	cbz	r2, 8000766 <__udivmoddi4+0x2e>
 8000754:	f1c2 0020 	rsb	r0, r2, #32
 8000758:	fa24 f000 	lsr.w	r0, r4, r0
 800075c:	4091      	lsls	r1, r2
 800075e:	4097      	lsls	r7, r2
 8000760:	ea40 0c01 	orr.w	ip, r0, r1
 8000764:	4094      	lsls	r4, r2
 8000766:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800076a:	0c23      	lsrs	r3, r4, #16
 800076c:	fbbc f6f8 	udiv	r6, ip, r8
 8000770:	fa1f fe87 	uxth.w	lr, r7
 8000774:	fb08 c116 	mls	r1, r8, r6, ip
 8000778:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800077c:	fb06 f10e 	mul.w	r1, r6, lr
 8000780:	4299      	cmp	r1, r3
 8000782:	d909      	bls.n	8000798 <__udivmoddi4+0x60>
 8000784:	18fb      	adds	r3, r7, r3
 8000786:	f106 30ff 	add.w	r0, r6, #4294967295
 800078a:	f080 8119 	bcs.w	80009c0 <__udivmoddi4+0x288>
 800078e:	4299      	cmp	r1, r3
 8000790:	f240 8116 	bls.w	80009c0 <__udivmoddi4+0x288>
 8000794:	3e02      	subs	r6, #2
 8000796:	443b      	add	r3, r7
 8000798:	1a5b      	subs	r3, r3, r1
 800079a:	b2a4      	uxth	r4, r4
 800079c:	fbb3 f0f8 	udiv	r0, r3, r8
 80007a0:	fb08 3310 	mls	r3, r8, r0, r3
 80007a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80007ac:	45a6      	cmp	lr, r4
 80007ae:	d909      	bls.n	80007c4 <__udivmoddi4+0x8c>
 80007b0:	193c      	adds	r4, r7, r4
 80007b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007b6:	f080 8105 	bcs.w	80009c4 <__udivmoddi4+0x28c>
 80007ba:	45a6      	cmp	lr, r4
 80007bc:	f240 8102 	bls.w	80009c4 <__udivmoddi4+0x28c>
 80007c0:	3802      	subs	r0, #2
 80007c2:	443c      	add	r4, r7
 80007c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007c8:	eba4 040e 	sub.w	r4, r4, lr
 80007cc:	2600      	movs	r6, #0
 80007ce:	b11d      	cbz	r5, 80007d8 <__udivmoddi4+0xa0>
 80007d0:	40d4      	lsrs	r4, r2
 80007d2:	2300      	movs	r3, #0
 80007d4:	e9c5 4300 	strd	r4, r3, [r5]
 80007d8:	4631      	mov	r1, r6
 80007da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007de:	b902      	cbnz	r2, 80007e2 <__udivmoddi4+0xaa>
 80007e0:	deff      	udf	#255	; 0xff
 80007e2:	fab2 f282 	clz	r2, r2
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	d150      	bne.n	800088c <__udivmoddi4+0x154>
 80007ea:	1bcb      	subs	r3, r1, r7
 80007ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007f0:	fa1f f887 	uxth.w	r8, r7
 80007f4:	2601      	movs	r6, #1
 80007f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007fa:	0c21      	lsrs	r1, r4, #16
 80007fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000800:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000804:	fb08 f30c 	mul.w	r3, r8, ip
 8000808:	428b      	cmp	r3, r1
 800080a:	d907      	bls.n	800081c <__udivmoddi4+0xe4>
 800080c:	1879      	adds	r1, r7, r1
 800080e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000812:	d202      	bcs.n	800081a <__udivmoddi4+0xe2>
 8000814:	428b      	cmp	r3, r1
 8000816:	f200 80e9 	bhi.w	80009ec <__udivmoddi4+0x2b4>
 800081a:	4684      	mov	ip, r0
 800081c:	1ac9      	subs	r1, r1, r3
 800081e:	b2a3      	uxth	r3, r4
 8000820:	fbb1 f0fe 	udiv	r0, r1, lr
 8000824:	fb0e 1110 	mls	r1, lr, r0, r1
 8000828:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800082c:	fb08 f800 	mul.w	r8, r8, r0
 8000830:	45a0      	cmp	r8, r4
 8000832:	d907      	bls.n	8000844 <__udivmoddi4+0x10c>
 8000834:	193c      	adds	r4, r7, r4
 8000836:	f100 33ff 	add.w	r3, r0, #4294967295
 800083a:	d202      	bcs.n	8000842 <__udivmoddi4+0x10a>
 800083c:	45a0      	cmp	r8, r4
 800083e:	f200 80d9 	bhi.w	80009f4 <__udivmoddi4+0x2bc>
 8000842:	4618      	mov	r0, r3
 8000844:	eba4 0408 	sub.w	r4, r4, r8
 8000848:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800084c:	e7bf      	b.n	80007ce <__udivmoddi4+0x96>
 800084e:	428b      	cmp	r3, r1
 8000850:	d909      	bls.n	8000866 <__udivmoddi4+0x12e>
 8000852:	2d00      	cmp	r5, #0
 8000854:	f000 80b1 	beq.w	80009ba <__udivmoddi4+0x282>
 8000858:	2600      	movs	r6, #0
 800085a:	e9c5 0100 	strd	r0, r1, [r5]
 800085e:	4630      	mov	r0, r6
 8000860:	4631      	mov	r1, r6
 8000862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000866:	fab3 f683 	clz	r6, r3
 800086a:	2e00      	cmp	r6, #0
 800086c:	d14a      	bne.n	8000904 <__udivmoddi4+0x1cc>
 800086e:	428b      	cmp	r3, r1
 8000870:	d302      	bcc.n	8000878 <__udivmoddi4+0x140>
 8000872:	4282      	cmp	r2, r0
 8000874:	f200 80b8 	bhi.w	80009e8 <__udivmoddi4+0x2b0>
 8000878:	1a84      	subs	r4, r0, r2
 800087a:	eb61 0103 	sbc.w	r1, r1, r3
 800087e:	2001      	movs	r0, #1
 8000880:	468c      	mov	ip, r1
 8000882:	2d00      	cmp	r5, #0
 8000884:	d0a8      	beq.n	80007d8 <__udivmoddi4+0xa0>
 8000886:	e9c5 4c00 	strd	r4, ip, [r5]
 800088a:	e7a5      	b.n	80007d8 <__udivmoddi4+0xa0>
 800088c:	f1c2 0320 	rsb	r3, r2, #32
 8000890:	fa20 f603 	lsr.w	r6, r0, r3
 8000894:	4097      	lsls	r7, r2
 8000896:	fa01 f002 	lsl.w	r0, r1, r2
 800089a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800089e:	40d9      	lsrs	r1, r3
 80008a0:	4330      	orrs	r0, r6
 80008a2:	0c03      	lsrs	r3, r0, #16
 80008a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80008a8:	fa1f f887 	uxth.w	r8, r7
 80008ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80008b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008b4:	fb06 f108 	mul.w	r1, r6, r8
 80008b8:	4299      	cmp	r1, r3
 80008ba:	fa04 f402 	lsl.w	r4, r4, r2
 80008be:	d909      	bls.n	80008d4 <__udivmoddi4+0x19c>
 80008c0:	18fb      	adds	r3, r7, r3
 80008c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80008c6:	f080 808d 	bcs.w	80009e4 <__udivmoddi4+0x2ac>
 80008ca:	4299      	cmp	r1, r3
 80008cc:	f240 808a 	bls.w	80009e4 <__udivmoddi4+0x2ac>
 80008d0:	3e02      	subs	r6, #2
 80008d2:	443b      	add	r3, r7
 80008d4:	1a5b      	subs	r3, r3, r1
 80008d6:	b281      	uxth	r1, r0
 80008d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80008e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008e4:	fb00 f308 	mul.w	r3, r0, r8
 80008e8:	428b      	cmp	r3, r1
 80008ea:	d907      	bls.n	80008fc <__udivmoddi4+0x1c4>
 80008ec:	1879      	adds	r1, r7, r1
 80008ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80008f2:	d273      	bcs.n	80009dc <__udivmoddi4+0x2a4>
 80008f4:	428b      	cmp	r3, r1
 80008f6:	d971      	bls.n	80009dc <__udivmoddi4+0x2a4>
 80008f8:	3802      	subs	r0, #2
 80008fa:	4439      	add	r1, r7
 80008fc:	1acb      	subs	r3, r1, r3
 80008fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000902:	e778      	b.n	80007f6 <__udivmoddi4+0xbe>
 8000904:	f1c6 0c20 	rsb	ip, r6, #32
 8000908:	fa03 f406 	lsl.w	r4, r3, r6
 800090c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000910:	431c      	orrs	r4, r3
 8000912:	fa20 f70c 	lsr.w	r7, r0, ip
 8000916:	fa01 f306 	lsl.w	r3, r1, r6
 800091a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800091e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000922:	431f      	orrs	r7, r3
 8000924:	0c3b      	lsrs	r3, r7, #16
 8000926:	fbb1 f9fe 	udiv	r9, r1, lr
 800092a:	fa1f f884 	uxth.w	r8, r4
 800092e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000932:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000936:	fb09 fa08 	mul.w	sl, r9, r8
 800093a:	458a      	cmp	sl, r1
 800093c:	fa02 f206 	lsl.w	r2, r2, r6
 8000940:	fa00 f306 	lsl.w	r3, r0, r6
 8000944:	d908      	bls.n	8000958 <__udivmoddi4+0x220>
 8000946:	1861      	adds	r1, r4, r1
 8000948:	f109 30ff 	add.w	r0, r9, #4294967295
 800094c:	d248      	bcs.n	80009e0 <__udivmoddi4+0x2a8>
 800094e:	458a      	cmp	sl, r1
 8000950:	d946      	bls.n	80009e0 <__udivmoddi4+0x2a8>
 8000952:	f1a9 0902 	sub.w	r9, r9, #2
 8000956:	4421      	add	r1, r4
 8000958:	eba1 010a 	sub.w	r1, r1, sl
 800095c:	b2bf      	uxth	r7, r7
 800095e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000962:	fb0e 1110 	mls	r1, lr, r0, r1
 8000966:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800096a:	fb00 f808 	mul.w	r8, r0, r8
 800096e:	45b8      	cmp	r8, r7
 8000970:	d907      	bls.n	8000982 <__udivmoddi4+0x24a>
 8000972:	19e7      	adds	r7, r4, r7
 8000974:	f100 31ff 	add.w	r1, r0, #4294967295
 8000978:	d22e      	bcs.n	80009d8 <__udivmoddi4+0x2a0>
 800097a:	45b8      	cmp	r8, r7
 800097c:	d92c      	bls.n	80009d8 <__udivmoddi4+0x2a0>
 800097e:	3802      	subs	r0, #2
 8000980:	4427      	add	r7, r4
 8000982:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000986:	eba7 0708 	sub.w	r7, r7, r8
 800098a:	fba0 8902 	umull	r8, r9, r0, r2
 800098e:	454f      	cmp	r7, r9
 8000990:	46c6      	mov	lr, r8
 8000992:	4649      	mov	r1, r9
 8000994:	d31a      	bcc.n	80009cc <__udivmoddi4+0x294>
 8000996:	d017      	beq.n	80009c8 <__udivmoddi4+0x290>
 8000998:	b15d      	cbz	r5, 80009b2 <__udivmoddi4+0x27a>
 800099a:	ebb3 020e 	subs.w	r2, r3, lr
 800099e:	eb67 0701 	sbc.w	r7, r7, r1
 80009a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80009a6:	40f2      	lsrs	r2, r6
 80009a8:	ea4c 0202 	orr.w	r2, ip, r2
 80009ac:	40f7      	lsrs	r7, r6
 80009ae:	e9c5 2700 	strd	r2, r7, [r5]
 80009b2:	2600      	movs	r6, #0
 80009b4:	4631      	mov	r1, r6
 80009b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ba:	462e      	mov	r6, r5
 80009bc:	4628      	mov	r0, r5
 80009be:	e70b      	b.n	80007d8 <__udivmoddi4+0xa0>
 80009c0:	4606      	mov	r6, r0
 80009c2:	e6e9      	b.n	8000798 <__udivmoddi4+0x60>
 80009c4:	4618      	mov	r0, r3
 80009c6:	e6fd      	b.n	80007c4 <__udivmoddi4+0x8c>
 80009c8:	4543      	cmp	r3, r8
 80009ca:	d2e5      	bcs.n	8000998 <__udivmoddi4+0x260>
 80009cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80009d0:	eb69 0104 	sbc.w	r1, r9, r4
 80009d4:	3801      	subs	r0, #1
 80009d6:	e7df      	b.n	8000998 <__udivmoddi4+0x260>
 80009d8:	4608      	mov	r0, r1
 80009da:	e7d2      	b.n	8000982 <__udivmoddi4+0x24a>
 80009dc:	4660      	mov	r0, ip
 80009de:	e78d      	b.n	80008fc <__udivmoddi4+0x1c4>
 80009e0:	4681      	mov	r9, r0
 80009e2:	e7b9      	b.n	8000958 <__udivmoddi4+0x220>
 80009e4:	4666      	mov	r6, ip
 80009e6:	e775      	b.n	80008d4 <__udivmoddi4+0x19c>
 80009e8:	4630      	mov	r0, r6
 80009ea:	e74a      	b.n	8000882 <__udivmoddi4+0x14a>
 80009ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80009f0:	4439      	add	r1, r7
 80009f2:	e713      	b.n	800081c <__udivmoddi4+0xe4>
 80009f4:	3802      	subs	r0, #2
 80009f6:	443c      	add	r4, r7
 80009f8:	e724      	b.n	8000844 <__udivmoddi4+0x10c>
 80009fa:	bf00      	nop

080009fc <__aeabi_idiv0>:
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>:
 *  Created on: Jan 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AMT21.h"

AMT21::AMT21(UART_HandleTypeDef *_amt21_huart, uint8_t _address) {
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	71fb      	strb	r3, [r7, #7]
	this->amt21_huart = _amt21_huart;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	68ba      	ldr	r2, [r7, #8]
 8000a12:	601a      	str	r2, [r3, #0]
	this->address = _address;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	79fa      	ldrb	r2, [r7, #7]
 8000a18:	729a      	strb	r2, [r3, #10]
}
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <_ZN5AMT21D1Ev>:

AMT21::~AMT21() {
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

}
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4618      	mov	r0, r3
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <_ZN5AMT2110AMT21_ReadEv>:

void AMT21::AMT21_Read() {
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) &(this->address),
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6818      	ldr	r0, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f103 010a 	add.w	r1, r3, #10
 8000a50:	2364      	movs	r3, #100	; 0x64
 8000a52:	2201      	movs	r2, #1
 8000a54:	f00c fb0c 	bl	800d070 <HAL_UART_Transmit>
			sizeof(this->address), 100);
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
	HAL_UART_Receive(this->amt21_huart, (uint8_t*) &(this->uart_buf), 2, 100);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6818      	ldr	r0, [r3, #0]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f103 010c 	add.w	r1, r3, #12
 8000a62:	2364      	movs	r3, #100	; 0x64
 8000a64:	2202      	movs	r2, #2
 8000a66:	f00c fb99 	bl	800d19c <HAL_UART_Receive>
	this->k0 = (this->uart_buf & 0x4000) == 0x4000;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	899b      	ldrh	r3, [r3, #12]
 8000a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	bf14      	ite	ne
 8000a76:	2301      	movne	r3, #1
 8000a78:	2300      	moveq	r3, #0
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	761a      	strb	r2, [r3, #24]
	this->k1 = (this->uart_buf & 0x8000) == 0x8000;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	899b      	ldrh	r3, [r3, #12]
 8000a86:	b21b      	sxth	r3, r3
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	0bdb      	lsrs	r3, r3, #15
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	461a      	mov	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	765a      	strb	r2, [r3, #25]
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <_ZN5AMT2117AMT21_Check_ValueEv>:
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) set_zero_command,
			sizeof(this->address), 100);
	//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
}

HAL_StatusTypeDef AMT21::AMT21_Check_Value() {
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	uint16_t raw_value_temp = this->uart_buf & 0x3FFF;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	899b      	ldrh	r3, [r3, #12]
 8000aa8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000aac:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = this->uart_buf & 0x0001;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	899b      	ldrh	r3, [r3, #12]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (this->uart_buf >> 1) & 0x0001;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	899b      	ldrh	r3, [r3, #12]
 8000abe:	105b      	asrs	r3, r3, #1
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000ac8:	2300      	movs	r3, #0
 8000aca:	737b      	strb	r3, [r7, #13]
 8000acc:	7b7b      	ldrb	r3, [r7, #13]
 8000ace:	2b05      	cmp	r3, #5
 8000ad0:	d820      	bhi.n	8000b14 <_ZN5AMT2117AMT21_Check_ValueEv+0x78>
		this->uart_buf = this->uart_buf >> 2;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	899b      	ldrh	r3, [r3, #12]
 8000ad6:	109b      	asrs	r3, r3, #2
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	819a      	strh	r2, [r3, #12]
		k0_check ^= this->uart_buf & 0x0001;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	899b      	ldrh	r3, [r3, #12]
 8000ae2:	b25b      	sxtb	r3, r3
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	b25a      	sxtb	r2, r3
 8000aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aee:	4053      	eors	r3, r2
 8000af0:	b25b      	sxtb	r3, r3
 8000af2:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (this->uart_buf >> 1) & 0x0001;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	899b      	ldrh	r3, [r3, #12]
 8000af8:	105b      	asrs	r3, r3, #1
 8000afa:	b25b      	sxtb	r3, r3
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	b25a      	sxtb	r2, r3
 8000b02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b06:	4053      	eors	r3, r2
 8000b08:	b25b      	sxtb	r3, r3
 8000b0a:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000b0c:	7b7b      	ldrb	r3, [r7, #13]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	737b      	strb	r3, [r7, #13]
 8000b12:	e7db      	b.n	8000acc <_ZN5AMT2117AMT21_Check_ValueEv+0x30>
	}
	k0_check = !k0_check;
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	bf0c      	ite	eq
 8000b1a:	2301      	moveq	r3, #1
 8000b1c:	2300      	movne	r3, #0
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 8000b22:	7bbb      	ldrb	r3, [r7, #14]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	bf0c      	ite	eq
 8000b28:	2301      	moveq	r3, #1
 8000b2a:	2300      	movne	r3, #0
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	73bb      	strb	r3, [r7, #14]
	if ((this->k0 == k0_check) && (this->k1 == k1_check)) {
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	7e1b      	ldrb	r3, [r3, #24]
 8000b34:	7bfa      	ldrb	r2, [r7, #15]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d10a      	bne.n	8000b50 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	7e5b      	ldrb	r3, [r3, #25]
 8000b3e:	7bba      	ldrb	r2, [r7, #14]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d105      	bne.n	8000b50 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
		this->raw_value = raw_value_temp;
 8000b44:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	e003      	b.n	8000b58 <_ZN5AMT2117AMT21_Check_ValueEv+0xbc>
	} else {
		this->raw_value = 0;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	81da      	strh	r2, [r3, #14]
		return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
	}
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <_ZN5AMT2112getAngPos180Ev>:
}
int16_t AMT21::getPrevRawValue() {
	return this->prev_raw_value;
}

int16_t AMT21::getAngPos180() {
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	return ((((this->raw_value & 0x2000) >> 13) * (-16383))
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	135b      	asrs	r3, r3, #13
			+ (this->raw_value & 0x3FFF)) * -1;
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	461a      	mov	r2, r3
 8000b80:	0392      	lsls	r2, r2, #14
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	b21b      	sxth	r3, r3
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	ed87 0a01 	vstr	s0, [r7, #4]
 8000bb0:	ed97 0a01 	vldr	s0, [r7, #4]
 8000bb4:	f00e fbf0 	bl	800f398 <cosf>
 8000bb8:	eef0 7a40 	vmov.f32	s15, s0
 8000bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	ed87 0a01 	vstr	s0, [r7, #4]
 8000bd0:	ed97 0a01 	vldr	s0, [r7, #4]
 8000bd4:	f00f f844 	bl	800fc60 <sinf>
 8000bd8:	eef0 7a40 	vmov.f32	s15, s0
 8000bdc:	eeb0 0a67 	vmov.f32	s0, s15
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <_ZN10RobotJointC1Ev>:
 *      Author: SakuranohanaTH
 */

#include "RobotJoint.h"

RobotJoint::RobotJoint() {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a32      	ldr	r2, [pc, #200]	; (8000cbc <_ZN10RobotJointC1Ev+0xd4>)
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	edd3 7a00 	vldr	s15, [r3]
 8000bfc:	2002      	movs	r0, #2
 8000bfe:	eeb0 0a67 	vmov.f32	s0, s15
 8000c02:	f000 fe7b 	bl	80018fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000c06:	eeb0 7b40 	vmov.f64	d7, d0
 8000c0a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	edc3 7a01 	vstr	s15, [r3, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	edd3 7a00 	vldr	s15, [r3]
 8000c1a:	2003      	movs	r0, #3
 8000c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000c20:	f000 fe6c 	bl	80018fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000c24:	eeb0 7b40 	vmov.f64	d7, d0
 8000c28:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	edc3 7a02 	vstr	s15, [r3, #8]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	edd3 7a00 	vldr	s15, [r3]
 8000c38:	2004      	movs	r0, #4
 8000c3a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c3e:	f000 fe5d 	bl	80018fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000c42:	eeb0 7b40 	vmov.f64	d7, d0
 8000c46:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	edc3 7a03 	vstr	s15, [r3, #12]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f04f 0200 	mov.w	r2, #0
 8000c56:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f04f 0200 	mov.w	r2, #0
 8000c60:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000c6a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f04f 0200 	mov.w	r2, #0
 8000c74:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000c7e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f04f 0200 	mov.w	r2, #0
 8000c88:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f04f 0200 	mov.w	r2, #0
 8000c92:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	f04f 0200 	mov.w	r2, #0
 8000c9c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a07      	ldr	r2, [pc, #28]	; (8000cc0 <_ZN10RobotJointC1Ev+0xd8>)
 8000ca4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <_ZN10RobotJointC1Ev+0xd4>)
 8000cac:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

}
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	3a83126f 	.word	0x3a83126f
 8000cc0:	3f19999a 	.word	0x3f19999a

08000cc4 <_ZN10RobotJointD1Ev>:
RobotJoint::~RobotJoint() {
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]

}
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <_ZN10RobotJoint9UpdateIVKEffffffff>:
void RobotJoint::UpdateIVK(float _q1, float _q2, float _q3, float _q4, float Vx,
		float Vy, float Vz, float Wz) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b090      	sub	sp, #64	; 0x40
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6278      	str	r0, [r7, #36]	; 0x24
 8000ce4:	ed87 0a08 	vstr	s0, [r7, #32]
 8000ce8:	edc7 0a07 	vstr	s1, [r7, #28]
 8000cec:	ed87 1a06 	vstr	s2, [r7, #24]
 8000cf0:	edc7 1a05 	vstr	s3, [r7, #20]
 8000cf4:	ed87 2a04 	vstr	s4, [r7, #16]
 8000cf8:	edc7 2a03 	vstr	s5, [r7, #12]
 8000cfc:	ed87 3a02 	vstr	s6, [r7, #8]
 8000d00:	edc7 3a01 	vstr	s7, [r7, #4]
	float S13 = sin(_q1 + _q3);
 8000d04:	ed97 7a08 	vldr	s14, [r7, #32]
 8000d08:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d10:	eeb0 0a67 	vmov.f32	s0, s15
 8000d14:	f7ff ff57 	bl	8000bc6 <_ZSt3sinf>
 8000d18:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
	float C13 = cos(_q1 + _q3);
 8000d1c:	ed97 7a08 	vldr	s14, [r7, #32]
 8000d20:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d28:	eeb0 0a67 	vmov.f32	s0, s15
 8000d2c:	f7ff ff3b 	bl	8000ba6 <_ZSt3cosf>
 8000d30:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
	float S3 = sin(_q3);
 8000d34:	ed97 0a06 	vldr	s0, [r7, #24]
 8000d38:	f7ff ff45 	bl	8000bc6 <_ZSt3sinf>
 8000d3c:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	float S1 = sin(_q1);
 8000d40:	ed97 0a08 	vldr	s0, [r7, #32]
 8000d44:	f7ff ff3f 	bl	8000bc6 <_ZSt3sinf>
 8000d48:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
	float C1 = cos(_q1);
 8000d4c:	ed97 0a08 	vldr	s0, [r7, #32]
 8000d50:	f7ff ff29 	bl	8000ba6 <_ZSt3cosf>
 8000d54:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	float L3S3 = this->L3 * S3;
 8000d58:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000d5c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8000e80 <_ZN10RobotJoint9UpdateIVKEffffffff+0x1a4>
 8000d60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d64:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	this->w_q1 = (Vx * C13 + Vy * S13) / (S3 * this->L12);
 8000d68:	ed97 7a04 	vldr	s14, [r7, #16]
 8000d6c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000d70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d74:	edd7 6a03 	vldr	s13, [r7, #12]
 8000d78:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000d7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d80:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000d84:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000d88:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8000e84 <_ZN10RobotJoint9UpdateIVKEffffffff+0x1a8>
 8000d8c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d96:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	this->w_q2 = Vz;
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9c:	68ba      	ldr	r2, [r7, #8]
 8000d9e:	639a      	str	r2, [r3, #56]	; 0x38
	this->w_q3 = -(Vx * (this->L3 * C13 + this->L1 * C1 + this->L2 * C1))
 8000da0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000da4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8000e80 <_ZN10RobotJoint9UpdateIVKEffffffff+0x1a4>
 8000da8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000dac:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000db0:	eddf 6a35 	vldr	s13, [pc, #212]	; 8000e88 <_ZN10RobotJoint9UpdateIVKEffffffff+0x1ac>
 8000db4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000db8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000dbc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000dc0:	eddf 6a32 	vldr	s13, [pc, #200]	; 8000e8c <_ZN10RobotJoint9UpdateIVKEffffffff+0x1b0>
 8000dc4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000dc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000dcc:	edd7 7a04 	vldr	s15, [r7, #16]
 8000dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dd4:	eef1 6a67 	vneg.f32	s13, s15
			/ (L3S3 * this->L12)
 8000dd8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000ddc:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000e84 <_ZN10RobotJoint9UpdateIVKEffffffff+0x1a8>
 8000de0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000de4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
			- (Vy * (this->L3 * S13 + this->L1 * S1 + this->L2 * S1))
 8000de8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000dec:	eddf 6a24 	vldr	s13, [pc, #144]	; 8000e80 <_ZN10RobotJoint9UpdateIVKEffffffff+0x1a4>
 8000df0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000df4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000df8:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8000e88 <_ZN10RobotJoint9UpdateIVKEffffffff+0x1ac>
 8000dfc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000e00:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000e04:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000e08:	ed9f 6a20 	vldr	s12, [pc, #128]	; 8000e8c <_ZN10RobotJoint9UpdateIVKEffffffff+0x1b0>
 8000e0c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000e10:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000e14:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e18:	ee26 6aa7 	vmul.f32	s12, s13, s15
					/ (L3S3 * this->L12);
 8000e1c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000e20:	eddf 6a18 	vldr	s13, [pc, #96]	; 8000e84 <_ZN10RobotJoint9UpdateIVKEffffffff+0x1a8>
 8000e24:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000e28:	eec6 7a26 	vdiv.f32	s15, s12, s13
			- (Vy * (this->L3 * S13 + this->L1 * S1 + this->L2 * S1))
 8000e2c:	ee77 7a67 	vsub.f32	s15, s14, s15
	this->w_q3 = -(Vx * (this->L3 * C13 + this->L1 * C1 + this->L2 * C1))
 8000e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e32:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	this->w_q4 = (Vx * C1 + Vy * S1 + this->L3 * Wz * S3) / (L3S3);
 8000e36:	ed97 7a04 	vldr	s14, [r7, #16]
 8000e3a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000e3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e42:	edd7 6a03 	vldr	s13, [r7, #12]
 8000e46:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000e4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e52:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e56:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8000e80 <_ZN10RobotJoint9UpdateIVKEffffffff+0x1a4>
 8000e5a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000e5e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000e62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e66:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000e6a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000e6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e74:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
}
 8000e78:	bf00      	nop
 8000e7a:	3740      	adds	r7, #64	; 0x40
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	3ea147ae 	.word	0x3ea147ae
 8000e84:	3ec43958 	.word	0x3ec43958
 8000e88:	3c591687 	.word	0x3c591687
 8000e8c:	3ebd70a4 	.word	0x3ebd70a4

08000e90 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>:
void RobotJoint::UpdateQuinticCoff(float T, float Start_pos, float Final_pos,
		float Start_velocity, float Final_velocity, float Start_acceleration,
		float Final_acceleration) {
 8000e90:	b480      	push	{r7}
 8000e92:	b091      	sub	sp, #68	; 0x44
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	61f8      	str	r0, [r7, #28]
 8000e98:	ed87 0a06 	vstr	s0, [r7, #24]
 8000e9c:	edc7 0a05 	vstr	s1, [r7, #20]
 8000ea0:	ed87 1a04 	vstr	s2, [r7, #16]
 8000ea4:	edc7 1a03 	vstr	s3, [r7, #12]
 8000ea8:	ed87 2a02 	vstr	s4, [r7, #8]
 8000eac:	edc7 2a01 	vstr	s5, [r7, #4]
 8000eb0:	ed87 3a00 	vstr	s6, [r7]
	this->C0 = Start_pos;
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	697a      	ldr	r2, [r7, #20]
 8000eb8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	this->C1 = Start_velocity;
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	this->C2 = Start_acceleration / 2.0;
 8000ec4:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ec8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000ecc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0

	const float A = Final_pos
			- (Start_pos + (Start_velocity * T)
 8000ed6:	ed97 7a03 	vldr	s14, [r7, #12]
 8000eda:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ede:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ee2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ee6:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ (Start_acceleration * T * T / 2));
 8000eea:	edd7 6a01 	vldr	s13, [r7, #4]
 8000eee:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ef2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000ef6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000efa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000efe:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8000f02:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000f06:	ee77 7a27 	vadd.f32	s15, s14, s15
	const float A = Final_pos
 8000f0a:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f12:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	const float B = Final_velocity
			- (Start_velocity + (Start_acceleration * T));
 8000f16:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f22:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f26:	ee77 7a27 	vadd.f32	s15, s14, s15
	const float B = Final_velocity
 8000f2a:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f32:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	const float C = Final_acceleration - Start_acceleration;
 8000f36:	ed97 7a00 	vldr	s14, [r7]
 8000f3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f42:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	const float T2 = T * T;
 8000f46:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f4a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000f4e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	const float T3 = T * T * T;
 8000f52:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f56:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000f5a:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f62:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	const float T4 = T * T * T * T;
 8000f66:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f6a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000f6e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f76:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f7e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	const float T5 = T * T * T * T * T;
 8000f82:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f86:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000f8a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f92:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f9a:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fa2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	this->C3 = (10.0 * A / T3) - (4.0 * B / T2) + (C / (2.0 * T));
 8000fa6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000faa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fae:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8000fb2:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000fb6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000fba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fbe:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000fc2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000fc6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fca:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000fce:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000fd2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000fd6:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000fda:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000fde:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000fe2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000fe6:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000fea:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ff2:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000ff6:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000ffa:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ffe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
	this->C4 = (-15.0 * A / T4) + (7.0 * B / T3) - (C / T2);
 8001008:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800100c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001010:	eeba 6b0e 	vmov.f64	d6, #174	; 0xc1700000 -15.0
 8001014:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001018:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800101c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001020:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001024:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001028:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800102c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8001030:	ee27 4b05 	vmul.f64	d4, d7, d5
 8001034:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001038:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800103c:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001040:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001044:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 8001048:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800104c:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8001050:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001054:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001058:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
	this->C5 = (6.0 * A / T5) - (3.0 * B / T4) + (C / (2.0 * T3));
 8001062:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001066:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800106a:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 800106e:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001072:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001076:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800107a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800107e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001082:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001086:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 800108a:	ee27 4b05 	vmul.f64	d4, d7, d5
 800108e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001092:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001096:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800109a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800109e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80010a2:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 80010a6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80010aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010ae:	ee37 5b07 	vadd.f64	d5, d7, d7
 80010b2:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80010b6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80010ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
	this->T = T;
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
}
 80010cc:	bf00      	nop
 80010ce:	3744      	adds	r7, #68	; 0x44
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <_ZN10RobotJoint13KalmanFillterEf>:
void RobotJoint::KalmanFillter(float theta_k) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	ed2d 8b08 	vpush	{d8-d11}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	ed87 0a00 	vstr	s0, [r7]
	float X1 = this->X11;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
	float X2 = this->X21;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80010f6:	623b      	str	r3, [r7, #32]
	float P11 = this->p11;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80010fe:	61fb      	str	r3, [r7, #28]
	float P12 = this->p12;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001106:	61bb      	str	r3, [r7, #24]
	float P21 = this->p21;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800110e:	617b      	str	r3, [r7, #20]
	float P22 = this->p22;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001116:	613b      	str	r3, [r7, #16]
	float Q = this->Q;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800111e:	60fb      	str	r3, [r7, #12]
	float R = this->R;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001126:	60bb      	str	r3, [r7, #8]

	this->X11 = X1 + (X2 * this->dt)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	ed93 7a00 	vldr	s14, [r3]
 800112e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001132:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001136:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800113a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800113e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- ((X1 - theta_k + X2 * this->dt)
 8001142:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001146:	edd7 7a00 	vldr	s15, [r7]
 800114a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	edd3 6a00 	vldr	s13, [r3]
 8001154:	edd7 7a08 	vldr	s15, [r7, #32]
 8001158:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800115c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001160:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	ed93 7a00 	vldr	s14, [r3]
 800116a:	edd7 7a05 	vldr	s15, [r7, #20]
 800116e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001172:	edd7 7a07 	vldr	s15, [r7, #28]
 8001176:	ee77 7a27 	vadd.f32	s15, s14, s15
 800117a:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800117e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001182:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	edd3 7a00 	vldr	s15, [r3]
 800118c:	2004      	movs	r0, #4
 800118e:	eeb0 0a67 	vmov.f32	s0, s15
 8001192:	f000 fbb3 	bl	80018fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001196:	eeb0 7b40 	vmov.f64	d7, d0
 800119a:	ee2b 6b07 	vmul.f64	d6, d11, d7
 800119e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80011a2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011a6:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt)))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	ed93 7a00 	vldr	s14, [r3]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	edd3 5a00 	vldr	s11, [r3]
 80011b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80011ba:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80011be:	edd7 7a06 	vldr	s15, [r7, #24]
 80011c2:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80011c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011ce:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80011d2:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80011d6:	ed97 7a07 	vldr	s14, [r7, #28]
 80011da:	edd7 7a02 	vldr	s15, [r7, #8]
 80011de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	edd3 6a00 	vldr	s13, [r3]
 80011e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80011ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f4:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80011f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80011fc:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	edd3 7a00 	vldr	s15, [r3]
 8001206:	2004      	movs	r0, #4
 8001208:	eeb0 0a67 	vmov.f32	s0, s15
 800120c:	f000 fb76 	bl	80018fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001210:	eeb0 7b40 	vmov.f64	d7, d0
 8001214:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001218:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800121c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001220:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	ed93 7a00 	vldr	s14, [r3]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 5a00 	vldr	s11, [r3]
 8001230:	edd7 7a04 	vldr	s15, [r7, #16]
 8001234:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001238:	edd7 7a06 	vldr	s15, [r7, #24]
 800123c:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001244:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001248:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800124c:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- ((X1 - theta_k + X2 * this->dt)
 8001250:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001254:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->X11 = X1 + (X2 * this->dt)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	this->X21 = X2
 800125e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001262:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 8001266:	edd7 7a03 	vldr	s15, [r7, #12]
 800126a:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	edd3 7a00 	vldr	s15, [r3]
 8001274:	2003      	movs	r0, #3
 8001276:	eeb0 0a67 	vmov.f32	s0, s15
 800127a:	f000 fb3f 	bl	80018fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800127e:	eeb0 7b40 	vmov.f64	d7, d0
 8001282:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001286:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800128a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	ed93 7a00 	vldr	s14, [r3]
 8001294:	edd7 7a04 	vldr	s15, [r7, #16]
 8001298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800129c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012a0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80012a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80012a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012ac:	ee36 6b07 	vadd.f64	d6, d6, d7
					* (X1 - theta_k + X2 * this->dt))
 80012b0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80012b4:	edd7 7a00 	vldr	s15, [r7]
 80012b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edd3 5a00 	vldr	s11, [r3]
 80012c2:	edd7 7a08 	vldr	s15, [r7, #32]
 80012c6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80012ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012d2:	ee26 9b07 	vmul.f64	d9, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80012d6:	ed97 7a07 	vldr	s14, [r7, #28]
 80012da:	edd7 7a02 	vldr	s15, [r7, #8]
 80012de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	edd3 6a00 	vldr	s13, [r3]
 80012e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80012ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f4:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80012f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80012fc:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	edd3 7a00 	vldr	s15, [r3]
 8001306:	2004      	movs	r0, #4
 8001308:	eeb0 0a67 	vmov.f32	s0, s15
 800130c:	f000 faf6 	bl	80018fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001310:	eeb0 7b40 	vmov.f64	d7, d0
 8001314:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001318:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800131c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001320:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	ed93 7a00 	vldr	s14, [r3]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	edd3 5a00 	vldr	s11, [r3]
 8001330:	edd7 7a04 	vldr	s15, [r7, #16]
 8001334:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001338:	edd7 7a06 	vldr	s15, [r7, #24]
 800133c:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001344:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001348:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800134c:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 8001350:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001354:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->X21 = X2
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	ed93 7a00 	vldr	s14, [r3]
 8001364:	edd7 7a05 	vldr	s15, [r7, #20]
 8001368:	ee27 7a27 	vmul.f32	s14, s14, s15
 800136c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001370:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001374:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001378:	edd7 7a03 	vldr	s15, [r7, #12]
 800137c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	edd3 7a00 	vldr	s15, [r3]
 8001386:	2004      	movs	r0, #4
 8001388:	eeb0 0a67 	vmov.f32	s0, s15
 800138c:	f000 fab6 	bl	80018fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001390:	eeb0 7b40 	vmov.f64	d7, d0
 8001394:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001398:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800139c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80013a0:	ee38 6b07 	vadd.f64	d6, d8, d7
			+ this->dt * (P12 + P22 * this->dt))
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	ed93 7a00 	vldr	s14, [r3]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	edd3 5a00 	vldr	s11, [r3]
 80013b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80013b4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80013b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80013bc:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80013c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013c8:	ee36 8b07 	vadd.f64	d8, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80013cc:	ed97 7a07 	vldr	s14, [r7, #28]
 80013d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80013d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	edd3 6a00 	vldr	s13, [r3]
 80013de:	edd7 7a05 	vldr	s15, [r7, #20]
 80013e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ea:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80013ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80013f2:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	edd3 7a00 	vldr	s15, [r3]
 80013fc:	2004      	movs	r0, #4
 80013fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001402:	f000 fa7b 	bl	80018fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001406:	eeb0 7b40 	vmov.f64	d7, d0
 800140a:	ee2a 6b07 	vmul.f64	d6, d10, d7
 800140e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001412:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001416:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	ed93 7a00 	vldr	s14, [r3]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	edd3 5a00 	vldr	s11, [r3]
 8001426:	edd7 7a04 	vldr	s15, [r7, #16]
 800142a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800142e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001432:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800143a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800143e:	ee36 6b07 	vadd.f64	d6, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001442:	ee88 7b06 	vdiv.f64	d7, d8, d6
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 8001446:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800144a:	ee37 7b46 	vsub.f64	d7, d7, d6
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800144e:	eeb1 8b47 	vneg.f64	d8, d7
			* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	ed93 7a00 	vldr	s14, [r3]
 8001458:	edd7 7a05 	vldr	s15, [r7, #20]
 800145c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001460:	edd7 7a07 	vldr	s15, [r7, #28]
 8001464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001468:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800146c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001470:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	2004      	movs	r0, #4
 800147c:	eeb0 0a67 	vmov.f32	s0, s15
 8001480:	f000 fa3c 	bl	80018fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001484:	eeb0 7b40 	vmov.f64	d7, d0
 8001488:	ee2a 6b07 	vmul.f64	d6, d10, d7
 800148c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001490:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001494:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	ed93 7a00 	vldr	s14, [r3]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	edd3 5a00 	vldr	s11, [r3]
 80014a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80014a8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80014ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80014b0:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80014b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014bc:	ee36 7b07 	vadd.f64	d7, d6, d7
			* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80014c0:	ee28 7b07 	vmul.f64	d7, d8, d7
 80014c4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	ed93 7a00 	vldr	s14, [r3]
 80014d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80014d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80014e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e4:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80014e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80014ec:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	edd3 7a00 	vldr	s15, [r3]
 80014f6:	2004      	movs	r0, #4
 80014f8:	eeb0 0a67 	vmov.f32	s0, s15
 80014fc:	f000 f9fe 	bl	80018fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001500:	eeb0 7b40 	vmov.f64	d7, d0
 8001504:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001508:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800150c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001510:	ee38 6b07 	vadd.f64	d6, d8, d7
			+ this->dt * (P12 + P22 * this->dt))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	ed93 7a00 	vldr	s14, [r3]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	edd3 5a00 	vldr	s11, [r3]
 8001520:	edd7 7a04 	vldr	s15, [r7, #16]
 8001524:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001528:	edd7 7a06 	vldr	s15, [r7, #24]
 800152c:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001534:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001538:	ee36 8b07 	vadd.f64	d8, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800153c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001540:	edd7 7a02 	vldr	s15, [r7, #8]
 8001544:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	edd3 6a00 	vldr	s13, [r3]
 800154e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001552:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001556:	ee77 7a27 	vadd.f32	s15, s14, s15
 800155a:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800155e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001562:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	edd3 7a00 	vldr	s15, [r3]
 800156c:	2004      	movs	r0, #4
 800156e:	eeb0 0a67 	vmov.f32	s0, s15
 8001572:	f000 f9c3 	bl	80018fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001576:	eeb0 7b40 	vmov.f64	d7, d0
 800157a:	ee2a 6b07 	vmul.f64	d6, d10, d7
 800157e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001582:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001586:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	ed93 7a00 	vldr	s14, [r3]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	edd3 5a00 	vldr	s11, [r3]
 8001596:	edd7 7a04 	vldr	s15, [r7, #16]
 800159a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800159e:	edd7 7a06 	vldr	s15, [r7, #24]
 80015a2:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80015a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015ae:	ee36 6b07 	vadd.f64	d6, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80015b2:	ee88 7b06 	vdiv.f64	d7, d8, d6
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 80015b6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80015ba:	ee37 7b46 	vsub.f64	d7, d7, d6
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80015be:	eeb1 8b47 	vneg.f64	d8, d7
			* ((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12);
 80015c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80015c6:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	edd3 7a00 	vldr	s15, [r3]
 80015d0:	2003      	movs	r0, #3
 80015d2:	eeb0 0a67 	vmov.f32	s0, s15
 80015d6:	f000 f991 	bl	80018fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80015da:	eeb0 7b40 	vmov.f64	d7, d0
 80015de:	ee29 7b07 	vmul.f64	d7, d9, d7
 80015e2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80015e6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	ed93 7a00 	vldr	s14, [r3]
 80015f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80015f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015fc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001600:	edd7 7a06 	vldr	s15, [r7, #24]
 8001604:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001608:	ee36 7b07 	vadd.f64	d7, d6, d7
 800160c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001610:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
	this->p21 = P21 + P22 * this->dt + (Q * pow(this->dt, 3)) / 2
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	ed93 7a00 	vldr	s14, [r3]
 8001620:	edd7 7a04 	vldr	s15, [r7, #16]
 8001624:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001628:	edd7 7a05 	vldr	s15, [r7, #20]
 800162c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001630:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001634:	edd7 7a03 	vldr	s15, [r7, #12]
 8001638:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	edd3 7a00 	vldr	s15, [r3]
 8001642:	2003      	movs	r0, #3
 8001644:	eeb0 0a67 	vmov.f32	s0, s15
 8001648:	f000 f958 	bl	80018fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800164c:	eeb0 7b40 	vmov.f64	d7, d0
 8001650:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001654:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001658:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800165c:	ee38 8b07 	vadd.f64	d8, d8, d7
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 8001660:	edd7 7a03 	vldr	s15, [r7, #12]
 8001664:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	edd3 7a00 	vldr	s15, [r3]
 800166e:	2003      	movs	r0, #3
 8001670:	eeb0 0a67 	vmov.f32	s0, s15
 8001674:	f000 f942 	bl	80018fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001678:	eeb0 7b40 	vmov.f64	d7, d0
 800167c:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001680:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001684:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	ed93 7a00 	vldr	s14, [r3]
 800168e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001696:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800169a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800169e:	edd7 7a05 	vldr	s15, [r7, #20]
 80016a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016a6:	ee36 9b07 	vadd.f64	d9, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	ed93 7a00 	vldr	s14, [r3]
 80016b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80016b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80016bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c0:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80016c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80016c8:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	edd3 7a00 	vldr	s15, [r3]
 80016d2:	2004      	movs	r0, #4
 80016d4:	eeb0 0a67 	vmov.f32	s0, s15
 80016d8:	f000 f910 	bl	80018fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80016dc:	eeb0 7b40 	vmov.f64	d7, d0
 80016e0:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80016e4:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80016e8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016ec:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt)))
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	ed93 7a00 	vldr	s14, [r3]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	edd3 5a00 	vldr	s11, [r3]
 80016fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001700:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001704:	edd7 7a06 	vldr	s15, [r7, #24]
 8001708:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800170c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001710:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001714:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001718:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800171c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001720:	edd7 7a02 	vldr	s15, [r7, #8]
 8001724:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	edd3 6a00 	vldr	s13, [r3]
 800172e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001732:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001736:	ee77 7a27 	vadd.f32	s15, s14, s15
 800173a:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800173e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001742:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	edd3 7a00 	vldr	s15, [r3]
 800174c:	2004      	movs	r0, #4
 800174e:	eeb0 0a67 	vmov.f32	s0, s15
 8001752:	f000 f8d3 	bl	80018fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001756:	eeb0 7b40 	vmov.f64	d7, d0
 800175a:	ee2b 6b07 	vmul.f64	d6, d11, d7
 800175e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001762:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001766:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	ed93 7a00 	vldr	s14, [r3]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	edd3 5a00 	vldr	s11, [r3]
 8001776:	edd7 7a04 	vldr	s15, [r7, #16]
 800177a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800177e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001782:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800178a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800178e:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001792:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 8001796:	ee38 7b47 	vsub.f64	d7, d8, d7
 800179a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p21 = P21 + P22 * this->dt + (Q * pow(this->dt, 3)) / 2
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
	this->p22 = P22 + Q * pow(this->dt, 2)
 80017a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80017a8:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80017ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80017b0:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	edd3 7a00 	vldr	s15, [r3]
 80017ba:	2002      	movs	r0, #2
 80017bc:	eeb0 0a67 	vmov.f32	s0, s15
 80017c0:	f000 f89c 	bl	80018fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80017c4:	eeb0 7b40 	vmov.f64	d7, d0
 80017c8:	ee29 7b07 	vmul.f64	d7, d9, d7
 80017cc:	ee38 8b07 	vadd.f64	d8, d8, d7
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12)
 80017d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80017d4:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	edd3 7a00 	vldr	s15, [r3]
 80017de:	2003      	movs	r0, #3
 80017e0:	eeb0 0a67 	vmov.f32	s0, s15
 80017e4:	f000 f88a 	bl	80018fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80017e8:	eeb0 7b40 	vmov.f64	d7, d0
 80017ec:	ee29 7b07 	vmul.f64	d7, d9, d7
 80017f0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80017f4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	ed93 7a00 	vldr	s14, [r3]
 80017fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001806:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800180a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800180e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001812:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001816:	ee36 9b07 	vadd.f64	d9, d6, d7
					* ((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21))
 800181a:	edd7 7a03 	vldr	s15, [r7, #12]
 800181e:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	edd3 7a00 	vldr	s15, [r3]
 8001828:	2003      	movs	r0, #3
 800182a:	eeb0 0a67 	vmov.f32	s0, s15
 800182e:	f000 f865 	bl	80018fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001832:	eeb0 7b40 	vmov.f64	d7, d0
 8001836:	ee2a 7b07 	vmul.f64	d7, d10, d7
 800183a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800183e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	ed93 7a00 	vldr	s14, [r3]
 8001848:	edd7 7a04 	vldr	s15, [r7, #16]
 800184c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001850:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001854:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001858:	edd7 7a05 	vldr	s15, [r7, #20]
 800185c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001860:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001864:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001868:	ed97 7a07 	vldr	s14, [r7, #28]
 800186c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001870:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	edd3 6a00 	vldr	s13, [r3]
 800187a:	edd7 7a05 	vldr	s15, [r7, #20]
 800187e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001882:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001886:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800188a:	edd7 7a03 	vldr	s15, [r7, #12]
 800188e:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	edd3 7a00 	vldr	s15, [r3]
 8001898:	2004      	movs	r0, #4
 800189a:	eeb0 0a67 	vmov.f32	s0, s15
 800189e:	f000 f82d 	bl	80018fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80018a2:	eeb0 7b40 	vmov.f64	d7, d0
 80018a6:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80018aa:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80018ae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018b2:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	ed93 7a00 	vldr	s14, [r3]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	edd3 5a00 	vldr	s11, [r3]
 80018c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80018c6:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80018ca:	edd7 7a06 	vldr	s15, [r7, #24]
 80018ce:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80018d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018da:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80018de:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12)
 80018e2:	ee38 7b47 	vsub.f64	d7, d8, d7
 80018e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p22 = P22 + Q * pow(this->dt, 2)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4

}
 80018f0:	bf00      	nop
 80018f2:	3728      	adds	r7, #40	; 0x28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	ecbd 8b08 	vpop	{d8-d11}
 80018fa:	bd80      	pop	{r7, pc}

080018fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	ed87 0a01 	vstr	s0, [r7, #4]
 8001906:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8001908:	edd7 7a01 	vldr	s15, [r7, #4]
 800190c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	ee06 3a90 	vmov	s13, r3
 8001916:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800191a:	eeb0 1b46 	vmov.f64	d1, d6
 800191e:	eeb0 0b47 	vmov.f64	d0, d7
 8001922:	f00d fe1d 	bl	800f560 <pow>
 8001926:	eeb0 7b40 	vmov.f64	d7, d0
    }
 800192a:	eeb0 0b47 	vmov.f64	d0, d7
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <_ZSt5floorf>:
  { return __builtin_floorf(__x); }
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	ed87 0a01 	vstr	s0, [r7, #4]
 800193e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001942:	fefb 7a67 	vrintm.f32	s15, s15
 8001946:	eeb0 0a67 	vmov.f32	s0, s15
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	ed87 0a01 	vstr	s0, [r7, #4]
 800195e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001962:	fef8 7a67 	vrinta.f32	s15, s15
 8001966:	eeb0 0a67 	vmov.f32	s0, s15
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>:
 *
 *  Created on: Jan 30, 2022
 *      Author: SakuranohanaTH
 */
#include "ServoMotor.h"
ServoMotor::ServoMotor(TIM_HandleTypeDef *_servo_htim,
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
		uint32_t _SERVO_TIM_CHANNEL) {
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2200      	movs	r2, #0
 800198a:	60da      	str	r2, [r3, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2200      	movs	r2, #0
 8001990:	611a      	str	r2, [r3, #16]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	22b4      	movs	r2, #180	; 0xb4
 8001996:	615a      	str	r2, [r3, #20]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2200      	movs	r2, #0
 800199c:	761a      	strb	r2, [r3, #24]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2200      	movs	r2, #0
 80019a2:	765a      	strb	r2, [r3, #25]
	this->servo_htim = _servo_htim;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	601a      	str	r2, [r3, #0]
	this->SERVO_TIM_CHANNEL = _SERVO_TIM_CHANNEL;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	605a      	str	r2, [r3, #4]
	 * 2ms/20ms = 0.1 = 10%
	 *
	 * CRR = 0.1 * (19999 + 1) = 2000
	 *
	 */
	this->servo_htim->Instance->PSC = _PSC_SERVO_MOTOR - 1U;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	22ef      	movs	r2, #239	; 0xef
 80019b8:	629a      	str	r2, [r3, #40]	; 0x28
	this->servo_htim->Instance->ARR = _ARR_SERVO_MOTOR - 1U;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80019c4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4618      	mov	r0, r3
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <_ZN10ServoMotorD1Ev>:
ServoMotor::~ServoMotor() {
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
}
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4618      	mov	r0, r3
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <_ZN10ServoMotor11ServoEnableEv>:
void ServoMotor::ServoEnable() {
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Enable PWM for Servo Motor
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	4619      	mov	r1, r3
 80019fc:	4610      	mov	r0, r2
 80019fe:	f00a f927 	bl	800bc50 <HAL_TIM_PWM_Start>
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <_ZN10ServoMotor17ServoRotateDegreeEl>:
void ServoMotor::ServoDisable() {
	HAL_TIM_PWM_Stop(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Disable PWM for Servo Motor
}
void ServoMotor::ServoRotateDegree(int32_t _sdegrotate) {
 8001a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af02      	add	r7, sp, #8
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
	if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_1) {
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d13f      	bne.n	8001a9e <_ZN10ServoMotor17ServoRotateDegreeEl+0x92>
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691c      	ldr	r4, [r3, #16]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	695d      	ldr	r5, [r3, #20]
				_sdegrotate, this->minsdeg, this->maxsdeg, // Mapping degree value to CRR value
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2e:	3301      	adds	r3, #1
 8001a30:	ee07 3a90 	vmov	s15, r3
 8001a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a38:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8001cc0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001a3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a40:	eeb0 0a67 	vmov.f32	s0, s15
 8001a44:	f7ff ff86 	bl	8001954 <_ZSt5roundf>
 8001a48:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8001a4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a50:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	ee07 3a90 	vmov	s15, r3
 8001a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a66:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8001cc4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001a6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a72:	f7ff ff5f 	bl	8001934 <_ZSt5floorf>
 8001a76:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8001a7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a7e:	ee17 3a90 	vmov	r3, s15
 8001a82:	9301      	str	r3, [sp, #4]
 8001a84:	9600      	str	r6, [sp, #0]
 8001a86:	462b      	mov	r3, r5
 8001a88:	4622      	mov	r2, r4
 8001a8a:	6839      	ldr	r1, [r7, #0]
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 f9cf 	bl	8001e30 <_ZN10ServoMotor10GripperMapElllll>
 8001a92:	4602      	mov	r2, r0
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR3 = 0;
		this->servo_htim->Instance->CCR4 = 0;
		this->servo_htim->Instance->CCR5 = 0;
		this->servo_htim->Instance->CCR6 = 0;
	}
}
 8001a9c:	e176      	b.n	8001d8c <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_2) {
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d13f      	bne.n	8001b26 <_ZN10ServoMotor17ServoRotateDegreeEl+0x11a>
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	691c      	ldr	r4, [r3, #16]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	ee07 3a90 	vmov	s15, r3
 8001abc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ac0:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001cc0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001ac4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ac8:	eeb0 0a67 	vmov.f32	s0, s15
 8001acc:	f7ff ff42 	bl	8001954 <_ZSt5roundf>
 8001ad0:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8001ad4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ad8:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	ee07 3a90 	vmov	s15, r3
 8001aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aee:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001cc4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001af2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001af6:	eeb0 0a67 	vmov.f32	s0, s15
 8001afa:	f7ff ff1b 	bl	8001934 <_ZSt5floorf>
 8001afe:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8001b02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b06:	ee17 3a90 	vmov	r3, s15
 8001b0a:	9301      	str	r3, [sp, #4]
 8001b0c:	9600      	str	r6, [sp, #0]
 8001b0e:	462b      	mov	r3, r5
 8001b10:	4622      	mov	r2, r4
 8001b12:	6839      	ldr	r1, [r7, #0]
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f98b 	bl	8001e30 <_ZN10ServoMotor10GripperMapElllll>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001b24:	e132      	b.n	8001d8c <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b08      	cmp	r3, #8
 8001b2c:	d13f      	bne.n	8001bae <_ZN10ServoMotor17ServoRotateDegreeEl+0x1a2>
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	691c      	ldr	r4, [r3, #16]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3e:	3301      	adds	r3, #1
 8001b40:	ee07 3a90 	vmov	s15, r3
 8001b44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b48:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001cc0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001b4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b50:	eeb0 0a67 	vmov.f32	s0, s15
 8001b54:	f7ff fefe 	bl	8001954 <_ZSt5roundf>
 8001b58:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001b5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b60:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	ee07 3a90 	vmov	s15, r3
 8001b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b76:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001cc4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001b7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b82:	f7ff fed7 	bl	8001934 <_ZSt5floorf>
 8001b86:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001b8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b8e:	ee17 3a90 	vmov	r3, s15
 8001b92:	9301      	str	r3, [sp, #4]
 8001b94:	9600      	str	r6, [sp, #0]
 8001b96:	462b      	mov	r3, r5
 8001b98:	4622      	mov	r2, r4
 8001b9a:	6839      	ldr	r1, [r7, #0]
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f947 	bl	8001e30 <_ZN10ServoMotor10GripperMapElllll>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001bac:	e0ee      	b.n	8001d8c <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b0c      	cmp	r3, #12
 8001bb4:	d13f      	bne.n	8001c36 <_ZN10ServoMotor17ServoRotateDegreeEl+0x22a>
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691c      	ldr	r4, [r3, #16]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	ee07 3a90 	vmov	s15, r3
 8001bcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bd0:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001cc0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001bd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bdc:	f7ff feba 	bl	8001954 <_ZSt5roundf>
 8001be0:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8001be4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001be8:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	ee07 3a90 	vmov	s15, r3
 8001bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bfe:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001cc4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001c02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c06:	eeb0 0a67 	vmov.f32	s0, s15
 8001c0a:	f7ff fe93 	bl	8001934 <_ZSt5floorf>
 8001c0e:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8001c12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c16:	ee17 3a90 	vmov	r3, s15
 8001c1a:	9301      	str	r3, [sp, #4]
 8001c1c:	9600      	str	r6, [sp, #0]
 8001c1e:	462b      	mov	r3, r5
 8001c20:	4622      	mov	r2, r4
 8001c22:	6839      	ldr	r1, [r7, #0]
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 f903 	bl	8001e30 <_ZN10ServoMotor10GripperMapElllll>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001c34:	e0aa      	b.n	8001d8c <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b10      	cmp	r3, #16
 8001c3c:	d144      	bne.n	8001cc8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2bc>
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691c      	ldr	r4, [r3, #16]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4e:	3301      	adds	r3, #1
 8001c50:	ee07 3a90 	vmov	s15, r3
 8001c54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c58:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001cc0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001c5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c60:	eeb0 0a67 	vmov.f32	s0, s15
 8001c64:	f7ff fe76 	bl	8001954 <_ZSt5roundf>
 8001c68:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001c6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c70:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	ee07 3a90 	vmov	s15, r3
 8001c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c86:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001cc4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001c8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c92:	f7ff fe4f 	bl	8001934 <_ZSt5floorf>
 8001c96:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001c9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c9e:	ee17 3a90 	vmov	r3, s15
 8001ca2:	9301      	str	r3, [sp, #4]
 8001ca4:	9600      	str	r6, [sp, #0]
 8001ca6:	462b      	mov	r3, r5
 8001ca8:	4622      	mov	r2, r4
 8001caa:	6839      	ldr	r1, [r7, #0]
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 f8bf 	bl	8001e30 <_ZN10ServoMotor10GripperMapElllll>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001cbc:	e066      	b.n	8001d8c <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
 8001cbe:	bf00      	nop
 8001cc0:	3d4ccccd 	.word	0x3d4ccccd
 8001cc4:	3e19999a 	.word	0x3e19999a
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2b14      	cmp	r3, #20
 8001cce:	d13f      	bne.n	8001d50 <_ZN10ServoMotor17ServoRotateDegreeEl+0x344>
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691c      	ldr	r4, [r3, #16]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	ee07 3a90 	vmov	s15, r3
 8001ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cea:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 8001cc0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001cee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cf2:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf6:	f7ff fe2d 	bl	8001954 <_ZSt5roundf>
 8001cfa:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001cfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d02:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0e:	3301      	adds	r3, #1
 8001d10:	ee07 3a90 	vmov	s15, r3
 8001d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d18:	ed1f 7a16 	vldr	s14, [pc, #-88]	; 8001cc4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001d1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d20:	eeb0 0a67 	vmov.f32	s0, s15
 8001d24:	f7ff fe06 	bl	8001934 <_ZSt5floorf>
 8001d28:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001d2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d30:	ee17 3a90 	vmov	r3, s15
 8001d34:	9301      	str	r3, [sp, #4]
 8001d36:	9600      	str	r6, [sp, #0]
 8001d38:	462b      	mov	r3, r5
 8001d3a:	4622      	mov	r2, r4
 8001d3c:	6839      	ldr	r1, [r7, #0]
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f876 	bl	8001e30 <_ZN10ServoMotor10GripperMapElllll>
 8001d44:	4602      	mov	r2, r0
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001d4e:	e01d      	b.n	8001d8c <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
		this->servo_htim->Instance->CCR1 = 0;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2200      	movs	r2, #0
 8001d58:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR2 = 0;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2200      	movs	r2, #0
 8001d62:	639a      	str	r2, [r3, #56]	; 0x38
		this->servo_htim->Instance->CCR3 = 0;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	63da      	str	r2, [r3, #60]	; 0x3c
		this->servo_htim->Instance->CCR4 = 0;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2200      	movs	r2, #0
 8001d76:	641a      	str	r2, [r3, #64]	; 0x40
		this->servo_htim->Instance->CCR5 = 0;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	659a      	str	r2, [r3, #88]	; 0x58
		this->servo_htim->Instance->CCR6 = 0;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d94 <_ZN10ServoMotor20setDegreeGripperOpenEl>:
void ServoMotor::setDegreeGripperOpen(int32_t _sdegopen) {
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
	this->sdegopen = _sdegopen;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	609a      	str	r2, [r3, #8]
	this->isSetDegreeGripperOpen = true;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	761a      	strb	r2, [r3, #24]
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <_ZN10ServoMotor21setDegreeGripperCloseEl>:
void ServoMotor::setDegreeGripperClose(int32_t _sdegclose) {
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
 8001dbe:	6039      	str	r1, [r7, #0]
	this->sdegclose = _sdegclose;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	60da      	str	r2, [r3, #12]
	this->isSetDegreeGripperClose = true;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	765a      	strb	r2, [r3, #25]
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <_ZN10ServoMotor12GripperCloseEv>:
void ServoMotor::GripperClose() {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperClose)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	7e5b      	ldrb	r3, [r3, #25]
 8001de4:	f083 0301 	eor.w	r3, r3, #1
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d106      	bne.n	8001dfc <_ZN10ServoMotor12GripperCloseEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegclose);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	4619      	mov	r1, r3
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff fe09 	bl	8001a0c <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001dfa:	e000      	b.n	8001dfe <_ZN10ServoMotor12GripperCloseEv+0x26>
		return;
 8001dfc:	bf00      	nop
}
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <_ZN10ServoMotor11GripperOpenEv>:
void ServoMotor::GripperOpen() {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperOpen)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	7e1b      	ldrb	r3, [r3, #24]
 8001e10:	f083 0301 	eor.w	r3, r3, #1
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d106      	bne.n	8001e28 <_ZN10ServoMotor11GripperOpenEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegopen);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	4619      	mov	r1, r3
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff fdf3 	bl	8001a0c <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001e26:	e000      	b.n	8001e2a <_ZN10ServoMotor11GripperOpenEv+0x26>
		return;
 8001e28:	bf00      	nop
}
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <_ZN10ServoMotor10GripperMapElllll>:
int32_t ServoMotor::GripperMap(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min,
		int32_t out_max) {
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
 8001e3c:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	69f9      	ldr	r1, [r7, #28]
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	1a8a      	subs	r2, r1, r2
 8001e4a:	fb02 f203 	mul.w	r2, r2, r3
 8001e4e:	6839      	ldr	r1, [r7, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	1acb      	subs	r3, r1, r3
 8001e54:	fb92 f2f3 	sdiv	r2, r2, r3
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	4413      	add	r3, r2
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e72:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e76:	eef0 7ae7 	vabs.f32	s15, s15
 8001e7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>:
 *  Created on: Jan 29, 2022
 *      Author: SakuranohanaTH
 */
#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef *_stepper_htim, uint32_t _STEPPER_TIM_CHANNEL,
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
 8001e94:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *_DIRPort, uint32_t _DIRPin) {
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	4a18      	ldr	r2, [pc, #96]	; (8001efc <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 8001e9a:	615a      	str	r2, [r3, #20]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4a18      	ldr	r2, [pc, #96]	; (8001f00 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001ea0:	619a      	str	r2, [r3, #24]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ea8:	61da      	str	r2, [r3, #28]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	4a15      	ldr	r2, [pc, #84]	; (8001f04 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x7c>)
 8001eae:	621a      	str	r2, [r3, #32]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001eb6:	625a      	str	r2, [r3, #36]	; 0x24
	this->stepper_htim = _stepper_htim;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	601a      	str	r2, [r3, #0]
	this->STEPPER_TIM_CHANNEL = _STEPPER_TIM_CHANNEL;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	605a      	str	r2, [r3, #4]
	this->stepper_htim->Instance->PSC = _PSC_STEPPER_MOTOR - 1U;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	22c7      	movs	r2, #199	; 0xc7
 8001ecc:	629a      	str	r2, [r3, #40]	; 0x28
	this->minFrequency = 60.0f;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4a0d      	ldr	r2, [pc, #52]	; (8001f08 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x80>)
 8001ed2:	615a      	str	r2, [r3, #20]
	this->maxFrequency = 20000.0f;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001ed8:	619a      	str	r2, [r3, #24]
	this->StepperSetFrequency(0.0f);
 8001eda:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001f0c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x84>
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f000 f832 	bl	8001f48 <_ZN7Stepper19StepperSetFrequencyEf>
	this->DIRPort = _DIRPort;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	609a      	str	r2, [r3, #8]
	this->DIRPin = _DIRPin;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	60da      	str	r2, [r3, #12]
}
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	41a00000 	.word	0x41a00000
 8001f00:	469c4000 	.word	0x469c4000
 8001f04:	43480000 	.word	0x43480000
 8001f08:	42700000 	.word	0x42700000
 8001f0c:	00000000 	.word	0x00000000

08001f10 <_ZN7StepperD1Ev>:
Stepper::~Stepper() {
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
}
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <_ZN7Stepper13StepperEnableEv>:
void Stepper::StepperEnable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	4619      	mov	r1, r3
 8001f38:	4610      	mov	r0, r2
 8001f3a:	f009 fe89 	bl	800bc50 <HAL_TIM_PWM_Start>
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <_ZN7Stepper19StepperSetFrequencyEf>:
void Stepper::StepperDisable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
	HAL_TIM_PWM_Stop(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
}
void Stepper::StepperSetFrequency(float _frequency) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	ed2d 8b02 	vpush	{d8}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = _frequency ;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	611a      	str	r2, [r3, #16]

	float f;
	if (fabs(this->frequency) <= this->minFrequency)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f64:	eeb0 0a67 	vmov.f32	s0, s15
 8001f68:	f7ff ff7e 	bl	8001e68 <_ZSt4fabsf>
 8001f6c:	eeb0 7a40 	vmov.f32	s14, s0
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	edd3 7a05 	vldr	s15, [r3, #20]
 8001f76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7e:	bf94      	ite	ls
 8001f80:	2301      	movls	r3, #1
 8001f82:	2300      	movhi	r3, #0
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <_ZN7Stepper19StepperSetFrequencyEf+0x4a>
		f = this->minFrequency;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	e01b      	b.n	8001fca <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else if (fabs(this->frequency) >= this->maxFrequency)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f98:	eeb0 0a67 	vmov.f32	s0, s15
 8001f9c:	f7ff ff64 	bl	8001e68 <_ZSt4fabsf>
 8001fa0:	eeb0 7a40 	vmov.f32	s14, s0
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	edd3 7a06 	vldr	s15, [r3, #24]
 8001faa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb2:	bfac      	ite	ge
 8001fb4:	2301      	movge	r3, #1
 8001fb6:	2300      	movlt	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <_ZN7Stepper19StepperSetFrequencyEf+0x7e>
		f = this->maxFrequency;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	e001      	b.n	8001fca <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else
		f = _frequency;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	60fb      	str	r3, [r7, #12]

	if (this->frequency >= 0.001f) {
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001fd0:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 800226c <_ZN7Stepper19StepperSetFrequencyEf+0x324>
 8001fd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fdc:	f2c0 80db 	blt.w	8002196 <_ZN7Stepper19StepperSetFrequencyEf+0x24e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_SET);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6898      	ldr	r0, [r3, #8]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	2201      	movs	r2, #1
 8001fec:	4619      	mov	r1, r3
 8001fee:	f007 f855 	bl	800909c <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * (f))) - 1U);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	ee07 3a90 	vmov	s15, r3
 8002000:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002004:	edd7 7a03 	vldr	s15, [r7, #12]
 8002008:	ee27 7a27 	vmul.f32	s14, s14, s15
 800200c:	eddf 6a98 	vldr	s13, [pc, #608]	; 8002270 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8002010:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8002014:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002018:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800201c:	eeb0 0a67 	vmov.f32	s0, s15
 8002020:	f7ff fc98 	bl	8001954 <_ZSt5roundf>
 8002024:	eef0 7a40 	vmov.f32	s15, s0
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002032:	ee17 2a90 	vmov	r2, s15
 8002036:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d113      	bne.n	8002068 <_ZN7Stepper19StepperSetFrequencyEf+0x120>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002048:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 800204a:	085b      	lsrs	r3, r3, #1
 800204c:	4618      	mov	r0, r3
 800204e:	f000 fa5b 	bl	8002508 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002052:	eeb0 7b40 	vmov.f64	d7, d0
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002060:	ee17 2a90 	vmov	r2, s15
 8002064:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR4 = 0;
			this->stepper_htim->Instance->CCR5 = 0;
			this->stepper_htim->Instance->CCR6 = 0;
		}
	}
}
 8002066:	e1e0      	b.n	800242a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b04      	cmp	r3, #4
 800206e:	d113      	bne.n	8002098 <_ZN7Stepper19StepperSetFrequencyEf+0x150>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002078:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 800207a:	085b      	lsrs	r3, r3, #1
 800207c:	4618      	mov	r0, r3
 800207e:	f000 fa43 	bl	8002508 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002082:	eeb0 7b40 	vmov.f64	d7, d0
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002090:	ee17 2a90 	vmov	r2, s15
 8002094:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002096:	e1c8      	b.n	800242a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b08      	cmp	r3, #8
 800209e:	d113      	bne.n	80020c8 <_ZN7Stepper19StepperSetFrequencyEf+0x180>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 80020aa:	085b      	lsrs	r3, r3, #1
 80020ac:	4618      	mov	r0, r3
 80020ae:	f000 fa2b 	bl	8002508 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80020b2:	eeb0 7b40 	vmov.f64	d7, d0
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80020c0:	ee17 2a90 	vmov	r2, s15
 80020c4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80020c6:	e1b0      	b.n	800242a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b0c      	cmp	r3, #12
 80020ce:	d113      	bne.n	80020f8 <_ZN7Stepper19StepperSetFrequencyEf+0x1b0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 80020da:	085b      	lsrs	r3, r3, #1
 80020dc:	4618      	mov	r0, r3
 80020de:	f000 fa13 	bl	8002508 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80020e2:	eeb0 7b40 	vmov.f64	d7, d0
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80020f0:	ee17 2a90 	vmov	r2, s15
 80020f4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80020f6:	e198      	b.n	800242a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b10      	cmp	r3, #16
 80020fe:	d113      	bne.n	8002128 <_ZN7Stepper19StepperSetFrequencyEf+0x1e0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002108:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 800210a:	085b      	lsrs	r3, r3, #1
 800210c:	4618      	mov	r0, r3
 800210e:	f000 f9fb 	bl	8002508 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002112:	eeb0 7b40 	vmov.f64	d7, d0
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002120:	ee17 2a90 	vmov	r2, s15
 8002124:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002126:	e180      	b.n	800242a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b14      	cmp	r3, #20
 800212e:	d113      	bne.n	8002158 <_ZN7Stepper19StepperSetFrequencyEf+0x210>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002138:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 800213a:	085b      	lsrs	r3, r3, #1
 800213c:	4618      	mov	r0, r3
 800213e:	f000 f9e3 	bl	8002508 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002142:	eeb0 7b40 	vmov.f64	d7, d0
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002150:	ee17 2a90 	vmov	r2, s15
 8002154:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002156:	e168      	b.n	800242a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2200      	movs	r2, #0
 8002160:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2200      	movs	r2, #0
 800216a:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2200      	movs	r2, #0
 8002174:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2200      	movs	r2, #0
 800217e:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2200      	movs	r2, #0
 8002188:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2200      	movs	r2, #0
 8002192:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002194:	e149      	b.n	800242a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
	} else if (this->frequency <= -0.001f) {
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	edd3 7a04 	vldr	s15, [r3, #16]
 800219c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002274 <_ZN7Stepper19StepperSetFrequencyEf+0x32c>
 80021a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a8:	f200 80e5 	bhi.w	8002376 <_ZN7Stepper19StepperSetFrequencyEf+0x42e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_RESET);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6898      	ldr	r0, [r3, #8]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	2200      	movs	r2, #0
 80021b8:	4619      	mov	r1, r3
 80021ba:	f006 ff6f 	bl	800909c <HAL_GPIO_WritePin>
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * fabs(f))) - 1U);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c6:	3301      	adds	r3, #1
 80021c8:	ee07 3a90 	vmov	s15, r3
 80021cc:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80021d0:	ed97 0a03 	vldr	s0, [r7, #12]
 80021d4:	f7ff fe48 	bl	8001e68 <_ZSt4fabsf>
 80021d8:	eef0 7a40 	vmov.f32	s15, s0
 80021dc:	ee28 7a27 	vmul.f32	s14, s16, s15
 80021e0:	eddf 6a23 	vldr	s13, [pc, #140]	; 8002270 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 80021e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 80021e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80021ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80021f0:	eeb0 0a67 	vmov.f32	s0, s15
 80021f4:	f7ff fbae 	bl	8001954 <_ZSt5roundf>
 80021f8:	eef0 7a40 	vmov.f32	s15, s0
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002206:	ee17 2a90 	vmov	r2, s15
 800220a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d113      	bne.n	800223c <_ZN7Stepper19StepperSetFrequencyEf+0x2f4>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 800221e:	085b      	lsrs	r3, r3, #1
 8002220:	4618      	mov	r0, r3
 8002222:	f000 f971 	bl	8002508 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002226:	eeb0 7b40 	vmov.f64	d7, d0
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002234:	ee17 2a90 	vmov	r2, s15
 8002238:	635a      	str	r2, [r3, #52]	; 0x34
}
 800223a:	e0f6      	b.n	800242a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b04      	cmp	r3, #4
 8002242:	d119      	bne.n	8002278 <_ZN7Stepper19StepperSetFrequencyEf+0x330>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 800224e:	085b      	lsrs	r3, r3, #1
 8002250:	4618      	mov	r0, r3
 8002252:	f000 f959 	bl	8002508 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002256:	eeb0 7b40 	vmov.f64	d7, d0
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002264:	ee17 2a90 	vmov	r2, s15
 8002268:	639a      	str	r2, [r3, #56]	; 0x38
}
 800226a:	e0de      	b.n	800242a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
 800226c:	3a83126f 	.word	0x3a83126f
 8002270:	4d64e1c0 	.word	0x4d64e1c0
 8002274:	ba83126f 	.word	0xba83126f
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b08      	cmp	r3, #8
 800227e:	d113      	bne.n	80022a8 <_ZN7Stepper19StepperSetFrequencyEf+0x360>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002288:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 800228a:	085b      	lsrs	r3, r3, #1
 800228c:	4618      	mov	r0, r3
 800228e:	f000 f93b 	bl	8002508 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002292:	eeb0 7b40 	vmov.f64	d7, d0
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80022a0:	ee17 2a90 	vmov	r2, s15
 80022a4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80022a6:	e0c0      	b.n	800242a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2b0c      	cmp	r3, #12
 80022ae:	d113      	bne.n	80022d8 <_ZN7Stepper19StepperSetFrequencyEf+0x390>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 80022ba:	085b      	lsrs	r3, r3, #1
 80022bc:	4618      	mov	r0, r3
 80022be:	f000 f923 	bl	8002508 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80022c2:	eeb0 7b40 	vmov.f64	d7, d0
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80022d0:	ee17 2a90 	vmov	r2, s15
 80022d4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80022d6:	e0a8      	b.n	800242a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b10      	cmp	r3, #16
 80022de:	d113      	bne.n	8002308 <_ZN7Stepper19StepperSetFrequencyEf+0x3c0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 80022ea:	085b      	lsrs	r3, r3, #1
 80022ec:	4618      	mov	r0, r3
 80022ee:	f000 f90b 	bl	8002508 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80022f2:	eeb0 7b40 	vmov.f64	d7, d0
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002300:	ee17 2a90 	vmov	r2, s15
 8002304:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002306:	e090      	b.n	800242a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b14      	cmp	r3, #20
 800230e:	d113      	bne.n	8002338 <_ZN7Stepper19StepperSetFrequencyEf+0x3f0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002318:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 800231a:	085b      	lsrs	r3, r3, #1
 800231c:	4618      	mov	r0, r3
 800231e:	f000 f8f3 	bl	8002508 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002322:	eeb0 7b40 	vmov.f64	d7, d0
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002330:	ee17 2a90 	vmov	r2, s15
 8002334:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002336:	e078      	b.n	800242a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2200      	movs	r2, #0
 8002340:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2200      	movs	r2, #0
 800234a:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2200      	movs	r2, #0
 8002354:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2200      	movs	r2, #0
 800235e:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2200      	movs	r2, #0
 8002368:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2200      	movs	r2, #0
 8002372:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002374:	e059      	b.n	800242a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d105      	bne.n	800238a <_ZN7Stepper19StepperSetFrequencyEf+0x442>
			this->stepper_htim->Instance->CCR1 = 0;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2200      	movs	r2, #0
 8002386:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002388:	e04f      	b.n	800242a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b04      	cmp	r3, #4
 8002390:	d105      	bne.n	800239e <_ZN7Stepper19StepperSetFrequencyEf+0x456>
			this->stepper_htim->Instance->CCR2 = 0;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2200      	movs	r2, #0
 800239a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800239c:	e045      	b.n	800242a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b08      	cmp	r3, #8
 80023a4:	d105      	bne.n	80023b2 <_ZN7Stepper19StepperSetFrequencyEf+0x46a>
			this->stepper_htim->Instance->CCR3 = 0;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2200      	movs	r2, #0
 80023ae:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80023b0:	e03b      	b.n	800242a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b0c      	cmp	r3, #12
 80023b8:	d105      	bne.n	80023c6 <_ZN7Stepper19StepperSetFrequencyEf+0x47e>
			this->stepper_htim->Instance->CCR4 = 0;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2200      	movs	r2, #0
 80023c2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80023c4:	e031      	b.n	800242a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b10      	cmp	r3, #16
 80023cc:	d105      	bne.n	80023da <_ZN7Stepper19StepperSetFrequencyEf+0x492>
			this->stepper_htim->Instance->CCR5 = 0;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2200      	movs	r2, #0
 80023d6:	659a      	str	r2, [r3, #88]	; 0x58
}
 80023d8:	e027      	b.n	800242a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b14      	cmp	r3, #20
 80023e0:	d105      	bne.n	80023ee <_ZN7Stepper19StepperSetFrequencyEf+0x4a6>
			this->stepper_htim->Instance->CCR6 = 0;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2200      	movs	r2, #0
 80023ea:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80023ec:	e01d      	b.n	800242a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2200      	movs	r2, #0
 80023f6:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2200      	movs	r2, #0
 8002400:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2200      	movs	r2, #0
 800240a:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2200      	movs	r2, #0
 8002414:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2200      	movs	r2, #0
 800241e:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2200      	movs	r2, #0
 8002428:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800242a:	bf00      	nop
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	ecbd 8b02 	vpop	{d8}
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop

08002438 <_ZN7Stepper15StepperSetRatioEf>:
void Stepper::StepperSetMaxFrequency(float _maxFrequency) {
	this->maxFrequency = fabs((float) _maxFrequency);
}
void Stepper::StepperSetRatio(float _ratio) {
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	ed87 0a00 	vstr	s0, [r7]
	this->ratio = fabs(_ratio);
 8002444:	ed97 0a00 	vldr	s0, [r7]
 8002448:	f7ff fd0e 	bl	8001e68 <_ZSt4fabsf>
 800244c:	eef0 7a40 	vmov.f32	s15, s0
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	4603      	mov	r3, r0
 8002466:	71fb      	strb	r3, [r7, #7]
    { return __builtin_fabs(__x); }
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	ee07 3a90 	vmov	s15, r3
 800246e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002472:	eeb0 0b47 	vmov.f64	d0, d7
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <_ZN7Stepper19StepperSetMicrostepEh>:
void Stepper::StepperSetMicrostep(uint8_t _microstep) {
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	460b      	mov	r3, r1
 800248a:	70fb      	strb	r3, [r7, #3]
	this->microStep = fabs(_microstep);
 800248c:	78fb      	ldrb	r3, [r7, #3]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff ffe5 	bl	800245e <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002494:	eeb0 7b40 	vmov.f64	d7, d0
 8002498:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	0000      	movs	r0, r0
 80024ac:	0000      	movs	r0, r0
	...

080024b0 <_ZN7Stepper20StepperOpenLoopSpeedEf>:
void Stepper::StepperOpenLoopSpeed(float _speed) {
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	ed87 0a00 	vstr	s0, [r7]
//	if (_speed > -0.07853981634f && _speed < 0.07853981634f) { // upper than abs(-20Hz) and lower than 20Hz
//		this->StepperSetFrequency(0.0f);
//	} else {
		this->StepperSetFrequency(
				(float) (_speed * this->microStep * this->ratio * this->SPR * 1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	ed93 7a07 	vldr	s14, [r3, #28]
 80024c2:	edd7 7a00 	vldr	s15, [r7]
 80024c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80024d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	edd3 7a08 	vldr	s15, [r3, #32]
 80024da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024de:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
						/ (2.0f * PI)));
 80024e2:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8002500 <_ZN7Stepper20StepperOpenLoopSpeedEf+0x50>
 80024e6:	ee86 7b05 	vdiv.f64	d7, d6, d5
		this->StepperSetFrequency(
 80024ea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80024ee:	eeb0 0a67 	vmov.f32	s0, s15
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7ff fd28 	bl	8001f48 <_ZN7Stepper19StepperSetFrequencyEf>
//	}
}
 80024f8:	bf00      	nop
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	54442eea 	.word	0x54442eea
 8002504:	401921fb 	.word	0x401921fb

08002508 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    round(_Tp __x)
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
    { return __builtin_round(__x); }
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	ee07 3a90 	vmov	s15, r3
 8002516:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800251a:	eeb0 0b47 	vmov.f64	d0, d7
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800252c:	4b13      	ldr	r3, [pc, #76]	; (800257c <MX_CRC_Init+0x54>)
 800252e:	4a14      	ldr	r2, [pc, #80]	; (8002580 <MX_CRC_Init+0x58>)
 8002530:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8002532:	4b12      	ldr	r3, [pc, #72]	; (800257c <MX_CRC_Init+0x54>)
 8002534:	2201      	movs	r2, #1
 8002536:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8002538:	4b10      	ldr	r3, [pc, #64]	; (800257c <MX_CRC_Init+0x54>)
 800253a:	2201      	movs	r2, #1
 800253c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 32773;
 800253e:	4b0f      	ldr	r3, [pc, #60]	; (800257c <MX_CRC_Init+0x54>)
 8002540:	f248 0205 	movw	r2, #32773	; 0x8005
 8002544:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8002546:	4b0d      	ldr	r3, [pc, #52]	; (800257c <MX_CRC_Init+0x54>)
 8002548:	2208      	movs	r2, #8
 800254a:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 800254c:	4b0b      	ldr	r3, [pc, #44]	; (800257c <MX_CRC_Init+0x54>)
 800254e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002552:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8002554:	4b09      	ldr	r3, [pc, #36]	; (800257c <MX_CRC_Init+0x54>)
 8002556:	2220      	movs	r2, #32
 8002558:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <MX_CRC_Init+0x54>)
 800255c:	2280      	movs	r2, #128	; 0x80
 800255e:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <MX_CRC_Init+0x54>)
 8002562:	2201      	movs	r2, #1
 8002564:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002566:	4805      	ldr	r0, [pc, #20]	; (800257c <MX_CRC_Init+0x54>)
 8002568:	f003 fbb0 	bl	8005ccc <HAL_CRC_Init>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_CRC_Init+0x4e>
  {
    Error_Handler();
 8002572:	f001 fc1b 	bl	8003dac <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	24000af8 	.word	0x24000af8
 8002580:	58024c00 	.word	0x58024c00

08002584 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a0b      	ldr	r2, [pc, #44]	; (80025c0 <HAL_CRC_MspInit+0x3c>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d10e      	bne.n	80025b4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002596:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <HAL_CRC_MspInit+0x40>)
 8002598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800259c:	4a09      	ldr	r2, [pc, #36]	; (80025c4 <HAL_CRC_MspInit+0x40>)
 800259e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80025a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025a6:	4b07      	ldr	r3, [pc, #28]	; (80025c4 <HAL_CRC_MspInit+0x40>)
 80025a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80025b4:	bf00      	nop
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	58024c00 	.word	0x58024c00
 80025c4:	58024400 	.word	0x58024400

080025c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025ce:	4b1d      	ldr	r3, [pc, #116]	; (8002644 <MX_DMA_Init+0x7c>)
 80025d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025d4:	4a1b      	ldr	r2, [pc, #108]	; (8002644 <MX_DMA_Init+0x7c>)
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80025de:	4b19      	ldr	r3, [pc, #100]	; (8002644 <MX_DMA_Init+0x7c>)
 80025e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	607b      	str	r3, [r7, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80025ec:	2200      	movs	r2, #0
 80025ee:	2100      	movs	r1, #0
 80025f0:	200b      	movs	r0, #11
 80025f2:	f003 fb2a 	bl	8005c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80025f6:	200b      	movs	r0, #11
 80025f8:	f003 fb41 	bl	8005c7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80025fc:	2200      	movs	r2, #0
 80025fe:	2100      	movs	r1, #0
 8002600:	200c      	movs	r0, #12
 8002602:	f003 fb22 	bl	8005c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002606:	200c      	movs	r0, #12
 8002608:	f003 fb39 	bl	8005c7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800260c:	2200      	movs	r2, #0
 800260e:	2100      	movs	r1, #0
 8002610:	200d      	movs	r0, #13
 8002612:	f003 fb1a 	bl	8005c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002616:	200d      	movs	r0, #13
 8002618:	f003 fb31 	bl	8005c7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800261c:	2200      	movs	r2, #0
 800261e:	2100      	movs	r1, #0
 8002620:	200e      	movs	r0, #14
 8002622:	f003 fb12 	bl	8005c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002626:	200e      	movs	r0, #14
 8002628:	f003 fb29 	bl	8005c7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800262c:	2200      	movs	r2, #0
 800262e:	2100      	movs	r1, #0
 8002630:	200f      	movs	r0, #15
 8002632:	f003 fb0a 	bl	8005c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002636:	200f      	movs	r0, #15
 8002638:	f003 fb21 	bl	8005c7e <HAL_NVIC_EnableIRQ>

}
 800263c:	bf00      	nop
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	58024400 	.word	0x58024400

08002648 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08c      	sub	sp, #48	; 0x30
 800264c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264e:	f107 031c 	add.w	r3, r7, #28
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	605a      	str	r2, [r3, #4]
 8002658:	609a      	str	r2, [r3, #8]
 800265a:	60da      	str	r2, [r3, #12]
 800265c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800265e:	4b8e      	ldr	r3, [pc, #568]	; (8002898 <MX_GPIO_Init+0x250>)
 8002660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002664:	4a8c      	ldr	r2, [pc, #560]	; (8002898 <MX_GPIO_Init+0x250>)
 8002666:	f043 0310 	orr.w	r3, r3, #16
 800266a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800266e:	4b8a      	ldr	r3, [pc, #552]	; (8002898 <MX_GPIO_Init+0x250>)
 8002670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002674:	f003 0310 	and.w	r3, r3, #16
 8002678:	61bb      	str	r3, [r7, #24]
 800267a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800267c:	4b86      	ldr	r3, [pc, #536]	; (8002898 <MX_GPIO_Init+0x250>)
 800267e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002682:	4a85      	ldr	r2, [pc, #532]	; (8002898 <MX_GPIO_Init+0x250>)
 8002684:	f043 0304 	orr.w	r3, r3, #4
 8002688:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800268c:	4b82      	ldr	r3, [pc, #520]	; (8002898 <MX_GPIO_Init+0x250>)
 800268e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002692:	f003 0304 	and.w	r3, r3, #4
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800269a:	4b7f      	ldr	r3, [pc, #508]	; (8002898 <MX_GPIO_Init+0x250>)
 800269c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026a0:	4a7d      	ldr	r2, [pc, #500]	; (8002898 <MX_GPIO_Init+0x250>)
 80026a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026aa:	4b7b      	ldr	r3, [pc, #492]	; (8002898 <MX_GPIO_Init+0x250>)
 80026ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b8:	4b77      	ldr	r3, [pc, #476]	; (8002898 <MX_GPIO_Init+0x250>)
 80026ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026be:	4a76      	ldr	r2, [pc, #472]	; (8002898 <MX_GPIO_Init+0x250>)
 80026c0:	f043 0301 	orr.w	r3, r3, #1
 80026c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026c8:	4b73      	ldr	r3, [pc, #460]	; (8002898 <MX_GPIO_Init+0x250>)
 80026ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d6:	4b70      	ldr	r3, [pc, #448]	; (8002898 <MX_GPIO_Init+0x250>)
 80026d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026dc:	4a6e      	ldr	r2, [pc, #440]	; (8002898 <MX_GPIO_Init+0x250>)
 80026de:	f043 0302 	orr.w	r3, r3, #2
 80026e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026e6:	4b6c      	ldr	r3, [pc, #432]	; (8002898 <MX_GPIO_Init+0x250>)
 80026e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026f4:	4b68      	ldr	r3, [pc, #416]	; (8002898 <MX_GPIO_Init+0x250>)
 80026f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026fa:	4a67      	ldr	r2, [pc, #412]	; (8002898 <MX_GPIO_Init+0x250>)
 80026fc:	f043 0308 	orr.w	r3, r3, #8
 8002700:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002704:	4b64      	ldr	r3, [pc, #400]	; (8002898 <MX_GPIO_Init+0x250>)
 8002706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	607b      	str	r3, [r7, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002712:	4b61      	ldr	r3, [pc, #388]	; (8002898 <MX_GPIO_Init+0x250>)
 8002714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002718:	4a5f      	ldr	r2, [pc, #380]	; (8002898 <MX_GPIO_Init+0x250>)
 800271a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800271e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002722:	4b5d      	ldr	r3, [pc, #372]	; (8002898 <MX_GPIO_Init+0x250>)
 8002724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272c:	603b      	str	r3, [r7, #0]
 800272e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8002730:	2200      	movs	r2, #0
 8002732:	f644 2121 	movw	r1, #18977	; 0x4a21
 8002736:	4859      	ldr	r0, [pc, #356]	; (800289c <MX_GPIO_Init+0x254>)
 8002738:	f006 fcb0 	bl	800909c <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 800273c:	2200      	movs	r2, #0
 800273e:	f24c 0102 	movw	r1, #49154	; 0xc002
 8002742:	4857      	ldr	r0, [pc, #348]	; (80028a0 <MX_GPIO_Init+0x258>)
 8002744:	f006 fcaa 	bl	800909c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8002748:	2200      	movs	r2, #0
 800274a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800274e:	4855      	ldr	r0, [pc, #340]	; (80028a4 <MX_GPIO_Init+0x25c>)
 8002750:	f006 fca4 	bl	800909c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8002754:	2200      	movs	r2, #0
 8002756:	f44f 7100 	mov.w	r1, #512	; 0x200
 800275a:	4853      	ldr	r0, [pc, #332]	; (80028a8 <MX_GPIO_Init+0x260>)
 800275c:	f006 fc9e 	bl	800909c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 8002760:	2200      	movs	r2, #0
 8002762:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002766:	4851      	ldr	r0, [pc, #324]	; (80028ac <MX_GPIO_Init+0x264>)
 8002768:	f006 fc98 	bl	800909c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_Button_Pin_Pin;
 800276c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002772:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002778:	2300      	movs	r3, #0
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Blue_Button_Pin_GPIO_Port, &GPIO_InitStruct);
 800277c:	f107 031c 	add.w	r3, r7, #28
 8002780:	4619      	mov	r1, r3
 8002782:	4849      	ldr	r0, [pc, #292]	; (80028a8 <MX_GPIO_Init+0x260>)
 8002784:	f006 fada 	bl	8008d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8002788:	f644 2321 	movw	r3, #18977	; 0x4a21
 800278c:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800278e:	2301      	movs	r3, #1
 8002790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	2300      	movs	r3, #0
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002796:	2300      	movs	r3, #0
 8002798:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800279a:	f107 031c 	add.w	r3, r7, #28
 800279e:	4619      	mov	r1, r3
 80027a0:	483e      	ldr	r0, [pc, #248]	; (800289c <MX_GPIO_Init+0x254>)
 80027a2:	f006 facb 	bl	8008d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin;
 80027a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80027aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80027b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027b6:	f107 031c 	add.w	r3, r7, #28
 80027ba:	4619      	mov	r1, r3
 80027bc:	4838      	ldr	r0, [pc, #224]	; (80028a0 <MX_GPIO_Init+0x258>)
 80027be:	f006 fabd 	bl	8008d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 80027c2:	f24c 0302 	movw	r3, #49154	; 0xc002
 80027c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027c8:	2301      	movs	r3, #1
 80027ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d0:	2300      	movs	r3, #0
 80027d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027d4:	f107 031c 	add.w	r3, r7, #28
 80027d8:	4619      	mov	r1, r3
 80027da:	4831      	ldr	r0, [pc, #196]	; (80028a0 <MX_GPIO_Init+0x258>)
 80027dc:	f006 faae 	bl	8008d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80027e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027e6:	2301      	movs	r3, #1
 80027e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ee:	2300      	movs	r3, #0
 80027f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80027f2:	f107 031c 	add.w	r3, r7, #28
 80027f6:	4619      	mov	r1, r3
 80027f8:	482a      	ldr	r0, [pc, #168]	; (80028a4 <MX_GPIO_Init+0x25c>)
 80027fa:	f006 fa9f 	bl	8008d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 80027fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002804:	2301      	movs	r3, #1
 8002806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002808:	2300      	movs	r3, #0
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280c:	2300      	movs	r3, #0
 800280e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8002810:	f107 031c 	add.w	r3, r7, #28
 8002814:	4619      	mov	r1, r3
 8002816:	4824      	ldr	r0, [pc, #144]	; (80028a8 <MX_GPIO_Init+0x260>)
 8002818:	f006 fa90 	bl	8008d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 800281c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002822:	2301      	movs	r3, #1
 8002824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002826:	2300      	movs	r3, #0
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282a:	2300      	movs	r3, #0
 800282c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 800282e:	f107 031c 	add.w	r3, r7, #28
 8002832:	4619      	mov	r1, r3
 8002834:	481d      	ldr	r0, [pc, #116]	; (80028ac <MX_GPIO_Init+0x264>)
 8002836:	f006 fa81 	bl	8008d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LM5_Pin;
 800283a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800283e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002840:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002846:	2300      	movs	r3, #0
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 800284a:	f107 031c 	add.w	r3, r7, #28
 800284e:	4619      	mov	r1, r3
 8002850:	4817      	ldr	r0, [pc, #92]	; (80028b0 <MX_GPIO_Init+0x268>)
 8002852:	f006 fa73 	bl	8008d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 8002856:	23c0      	movs	r3, #192	; 0xc0
 8002858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800285a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800285e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002860:	2300      	movs	r3, #0
 8002862:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002864:	f107 031c 	add.w	r3, r7, #28
 8002868:	4619      	mov	r1, r3
 800286a:	480c      	ldr	r0, [pc, #48]	; (800289c <MX_GPIO_Init+0x254>)
 800286c:	f006 fa66 	bl	8008d3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002870:	2200      	movs	r2, #0
 8002872:	2100      	movs	r1, #0
 8002874:	2017      	movs	r0, #23
 8002876:	f003 f9e8 	bl	8005c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800287a:	2017      	movs	r0, #23
 800287c:	f003 f9ff 	bl	8005c7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002880:	2200      	movs	r2, #0
 8002882:	2100      	movs	r1, #0
 8002884:	2028      	movs	r0, #40	; 0x28
 8002886:	f003 f9e0 	bl	8005c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800288a:	2028      	movs	r0, #40	; 0x28
 800288c:	f003 f9f7 	bl	8005c7e <HAL_NVIC_EnableIRQ>

}
 8002890:	bf00      	nop
 8002892:	3730      	adds	r7, #48	; 0x30
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	58024400 	.word	0x58024400
 800289c:	58020400 	.word	0x58020400
 80028a0:	58021000 	.word	0x58021000
 80028a4:	58020c00 	.word	0x58020c00
 80028a8:	58020800 	.word	0x58020800
 80028ac:	58020000 	.word	0x58020000
 80028b0:	58021800 	.word	0x58021800

080028b4 <HAL_UARTEx_RxEventCallback>:
#define Rx_BUFFER_SIZE   20
uint8_t Old_Rx_Buffer[Rx_BUFFER_SIZE] = { 0 };
uint8_t New_Rx_Buffer[Rx_BUFFER_SIZE] = { 0 };
volatile uint16_t cmdDataSize = 0;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80028b4:	b5b0      	push	{r4, r5, r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	807b      	strh	r3, [r7, #2]
	if (huart == &huart3) {
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a99      	ldr	r2, [pc, #612]	; (8002b28 <HAL_UARTEx_RxEventCallback+0x274>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	f040 8200 	bne.w	8002cca <HAL_UARTEx_RxEventCallback+0x416>
		memcpy(Old_Rx_Buffer, &New_Rx_Buffer, Rx_BUFFER_SIZE);	// Keep buffer.
 80028ca:	4a98      	ldr	r2, [pc, #608]	; (8002b2c <HAL_UARTEx_RxEventCallback+0x278>)
 80028cc:	4b98      	ldr	r3, [pc, #608]	; (8002b30 <HAL_UARTEx_RxEventCallback+0x27c>)
 80028ce:	4614      	mov	r4, r2
 80028d0:	461d      	mov	r5, r3
 80028d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028d6:	682b      	ldr	r3, [r5, #0]
 80028d8:	6023      	str	r3, [r4, #0]
		memset(New_Rx_Buffer, 0, Rx_BUFFER_SIZE);	// Clear received data.
 80028da:	2214      	movs	r2, #20
 80028dc:	2100      	movs	r1, #0
 80028de:	4894      	ldr	r0, [pc, #592]	; (8002b30 <HAL_UARTEx_RxEventCallback+0x27c>)
 80028e0:	f00e f88e 	bl	8010a00 <memset>
		if (Size - 2 > 0 && Size <= Rx_BUFFER_SIZE) {// Check if there's some data.
 80028e4:	887b      	ldrh	r3, [r7, #2]
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	f240 81de 	bls.w	8002ca8 <HAL_UARTEx_RxEventCallback+0x3f4>
 80028ec:	887b      	ldrh	r3, [r7, #2]
 80028ee:	2b14      	cmp	r3, #20
 80028f0:	f200 81da 	bhi.w	8002ca8 <HAL_UARTEx_RxEventCallback+0x3f4>
			cmdDataSize = Size - 2;	// Calculate data length.
 80028f4:	887b      	ldrh	r3, [r7, #2]
 80028f6:	3b02      	subs	r3, #2
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	4b8e      	ldr	r3, [pc, #568]	; (8002b34 <HAL_UARTEx_RxEventCallback+0x280>)
 80028fc:	801a      	strh	r2, [r3, #0]
			CRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) Old_Rx_Buffer,
 80028fe:	4b8d      	ldr	r3, [pc, #564]	; (8002b34 <HAL_UARTEx_RxEventCallback+0x280>)
 8002900:	881b      	ldrh	r3, [r3, #0]
 8002902:	b29b      	uxth	r3, r3
 8002904:	461a      	mov	r2, r3
 8002906:	4989      	ldr	r1, [pc, #548]	; (8002b2c <HAL_UARTEx_RxEventCallback+0x278>)
 8002908:	488b      	ldr	r0, [pc, #556]	; (8002b38 <HAL_UARTEx_RxEventCallback+0x284>)
 800290a:	f003 fa43 	bl	8005d94 <HAL_CRC_Calculate>
 800290e:	4603      	mov	r3, r0
 8002910:	b29a      	uxth	r2, r3
 8002912:	4b8a      	ldr	r3, [pc, #552]	; (8002b3c <HAL_UARTEx_RxEventCallback+0x288>)
 8002914:	801a      	strh	r2, [r3, #0]
					cmdDataSize); // Calculate data only by STM32 Hardware CRC.
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 8002916:	4b87      	ldr	r3, [pc, #540]	; (8002b34 <HAL_UARTEx_RxEventCallback+0x280>)
 8002918:	881b      	ldrh	r3, [r3, #0]
 800291a:	b29b      	uxth	r3, r3
 800291c:	461a      	mov	r2, r3
 800291e:	4b83      	ldr	r3, [pc, #524]	; (8002b2c <HAL_UARTEx_RxEventCallback+0x278>)
 8002920:	5c9b      	ldrb	r3, [r3, r2]
 8002922:	021b      	lsls	r3, r3, #8
					| Old_Rx_Buffer[cmdDataSize + 1]; // Read Expected CRC from Protocol.
 8002924:	b21a      	sxth	r2, r3
 8002926:	4b83      	ldr	r3, [pc, #524]	; (8002b34 <HAL_UARTEx_RxEventCallback+0x280>)
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	b29b      	uxth	r3, r3
 800292c:	3301      	adds	r3, #1
 800292e:	497f      	ldr	r1, [pc, #508]	; (8002b2c <HAL_UARTEx_RxEventCallback+0x278>)
 8002930:	5ccb      	ldrb	r3, [r1, r3]
 8002932:	b21b      	sxth	r3, r3
 8002934:	4313      	orrs	r3, r2
 8002936:	b21b      	sxth	r3, r3
 8002938:	b29a      	uxth	r2, r3
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 800293a:	4b81      	ldr	r3, [pc, #516]	; (8002b40 <HAL_UARTEx_RxEventCallback+0x28c>)
 800293c:	801a      	strh	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 800293e:	4b7f      	ldr	r3, [pc, #508]	; (8002b3c <HAL_UARTEx_RxEventCallback+0x288>)
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	b29a      	uxth	r2, r3
 8002944:	4b7e      	ldr	r3, [pc, #504]	; (8002b40 <HAL_UARTEx_RxEventCallback+0x28c>)
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	b29b      	uxth	r3, r3
 800294a:	429a      	cmp	r2, r3
 800294c:	bf0c      	ite	eq
 800294e:	2301      	moveq	r3, #1
 8002950:	2300      	movne	r3, #0
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 81c9 	beq.w	8002cec <HAL_UARTEx_RxEventCallback+0x438>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800295a:	2201      	movs	r2, #1
 800295c:	2102      	movs	r1, #2
 800295e:	4879      	ldr	r0, [pc, #484]	; (8002b44 <HAL_UARTEx_RxEventCallback+0x290>)
 8002960:	f006 fb9c 	bl	800909c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002964:	2200      	movs	r2, #0
 8002966:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800296a:	4877      	ldr	r0, [pc, #476]	; (8002b48 <HAL_UARTEx_RxEventCallback+0x294>)
 800296c:	f006 fb96 	bl	800909c <HAL_GPIO_WritePin>
				if (Old_Rx_Buffer[0] == 0x41 && cmdDataSize == 3) {	// Joint Jog q1
 8002970:	4b6e      	ldr	r3, [pc, #440]	; (8002b2c <HAL_UARTEx_RxEventCallback+0x278>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b41      	cmp	r3, #65	; 0x41
 8002976:	d106      	bne.n	8002986 <HAL_UARTEx_RxEventCallback+0xd2>
 8002978:	4b6e      	ldr	r3, [pc, #440]	; (8002b34 <HAL_UARTEx_RxEventCallback+0x280>)
 800297a:	881b      	ldrh	r3, [r3, #0]
 800297c:	b29b      	uxth	r3, r3
 800297e:	2b03      	cmp	r3, #3
 8002980:	d101      	bne.n	8002986 <HAL_UARTEx_RxEventCallback+0xd2>
 8002982:	2301      	movs	r3, #1
 8002984:	e000      	b.n	8002988 <HAL_UARTEx_RxEventCallback+0xd4>
 8002986:	2300      	movs	r3, #0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00b      	beq.n	80029a4 <HAL_UARTEx_RxEventCallback+0xf0>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 800298c:	4b67      	ldr	r3, [pc, #412]	; (8002b2c <HAL_UARTEx_RxEventCallback+0x278>)
 800298e:	785b      	ldrb	r3, [r3, #1]
 8002990:	021b      	lsls	r3, r3, #8
 8002992:	b25a      	sxtb	r2, r3
 8002994:	4b65      	ldr	r3, [pc, #404]	; (8002b2c <HAL_UARTEx_RxEventCallback+0x278>)
 8002996:	789b      	ldrb	r3, [r3, #2]
 8002998:	b25b      	sxtb	r3, r3
 800299a:	4313      	orrs	r3, r2
 800299c:	b25a      	sxtb	r2, r3
 800299e:	4b6b      	ldr	r3, [pc, #428]	; (8002b4c <HAL_UARTEx_RxEventCallback+0x298>)
 80029a0:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 80029a2:	e1a3      	b.n	8002cec <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x42 && cmdDataSize == 3) {// Joint Jog q2
 80029a4:	4b61      	ldr	r3, [pc, #388]	; (8002b2c <HAL_UARTEx_RxEventCallback+0x278>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b42      	cmp	r3, #66	; 0x42
 80029aa:	d106      	bne.n	80029ba <HAL_UARTEx_RxEventCallback+0x106>
 80029ac:	4b61      	ldr	r3, [pc, #388]	; (8002b34 <HAL_UARTEx_RxEventCallback+0x280>)
 80029ae:	881b      	ldrh	r3, [r3, #0]
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	2b03      	cmp	r3, #3
 80029b4:	d101      	bne.n	80029ba <HAL_UARTEx_RxEventCallback+0x106>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <HAL_UARTEx_RxEventCallback+0x108>
 80029ba:	2300      	movs	r3, #0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00b      	beq.n	80029d8 <HAL_UARTEx_RxEventCallback+0x124>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq2 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 80029c0:	4b5a      	ldr	r3, [pc, #360]	; (8002b2c <HAL_UARTEx_RxEventCallback+0x278>)
 80029c2:	785b      	ldrb	r3, [r3, #1]
 80029c4:	021b      	lsls	r3, r3, #8
 80029c6:	b25a      	sxtb	r2, r3
 80029c8:	4b58      	ldr	r3, [pc, #352]	; (8002b2c <HAL_UARTEx_RxEventCallback+0x278>)
 80029ca:	789b      	ldrb	r3, [r3, #2]
 80029cc:	b25b      	sxtb	r3, r3
 80029ce:	4313      	orrs	r3, r2
 80029d0:	b25a      	sxtb	r2, r3
 80029d2:	4b5f      	ldr	r3, [pc, #380]	; (8002b50 <HAL_UARTEx_RxEventCallback+0x29c>)
 80029d4:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 80029d6:	e189      	b.n	8002cec <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x43 && cmdDataSize == 3) {// Joint Jog q3
 80029d8:	4b54      	ldr	r3, [pc, #336]	; (8002b2c <HAL_UARTEx_RxEventCallback+0x278>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b43      	cmp	r3, #67	; 0x43
 80029de:	d106      	bne.n	80029ee <HAL_UARTEx_RxEventCallback+0x13a>
 80029e0:	4b54      	ldr	r3, [pc, #336]	; (8002b34 <HAL_UARTEx_RxEventCallback+0x280>)
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	d101      	bne.n	80029ee <HAL_UARTEx_RxEventCallback+0x13a>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <HAL_UARTEx_RxEventCallback+0x13c>
 80029ee:	2300      	movs	r3, #0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00b      	beq.n	8002a0c <HAL_UARTEx_RxEventCallback+0x158>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq3 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 80029f4:	4b4d      	ldr	r3, [pc, #308]	; (8002b2c <HAL_UARTEx_RxEventCallback+0x278>)
 80029f6:	785b      	ldrb	r3, [r3, #1]
 80029f8:	021b      	lsls	r3, r3, #8
 80029fa:	b25a      	sxtb	r2, r3
 80029fc:	4b4b      	ldr	r3, [pc, #300]	; (8002b2c <HAL_UARTEx_RxEventCallback+0x278>)
 80029fe:	789b      	ldrb	r3, [r3, #2]
 8002a00:	b25b      	sxtb	r3, r3
 8002a02:	4313      	orrs	r3, r2
 8002a04:	b25a      	sxtb	r2, r3
 8002a06:	4b53      	ldr	r3, [pc, #332]	; (8002b54 <HAL_UARTEx_RxEventCallback+0x2a0>)
 8002a08:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8002a0a:	e16f      	b.n	8002cec <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x44 && cmdDataSize == 3) {// Joint Jog q4
 8002a0c:	4b47      	ldr	r3, [pc, #284]	; (8002b2c <HAL_UARTEx_RxEventCallback+0x278>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b44      	cmp	r3, #68	; 0x44
 8002a12:	d106      	bne.n	8002a22 <HAL_UARTEx_RxEventCallback+0x16e>
 8002a14:	4b47      	ldr	r3, [pc, #284]	; (8002b34 <HAL_UARTEx_RxEventCallback+0x280>)
 8002a16:	881b      	ldrh	r3, [r3, #0]
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	d101      	bne.n	8002a22 <HAL_UARTEx_RxEventCallback+0x16e>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e000      	b.n	8002a24 <HAL_UARTEx_RxEventCallback+0x170>
 8002a22:	2300      	movs	r3, #0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00b      	beq.n	8002a40 <HAL_UARTEx_RxEventCallback+0x18c>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq4 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8002a28:	4b40      	ldr	r3, [pc, #256]	; (8002b2c <HAL_UARTEx_RxEventCallback+0x278>)
 8002a2a:	785b      	ldrb	r3, [r3, #1]
 8002a2c:	021b      	lsls	r3, r3, #8
 8002a2e:	b25a      	sxtb	r2, r3
 8002a30:	4b3e      	ldr	r3, [pc, #248]	; (8002b2c <HAL_UARTEx_RxEventCallback+0x278>)
 8002a32:	789b      	ldrb	r3, [r3, #2]
 8002a34:	b25b      	sxtb	r3, r3
 8002a36:	4313      	orrs	r3, r2
 8002a38:	b25a      	sxtb	r2, r3
 8002a3a:	4b47      	ldr	r3, [pc, #284]	; (8002b58 <HAL_UARTEx_RxEventCallback+0x2a4>)
 8002a3c:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8002a3e:	e155      	b.n	8002cec <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x51 && cmdDataSize == 3) {// Linear Jog X
 8002a40:	4b3a      	ldr	r3, [pc, #232]	; (8002b2c <HAL_UARTEx_RxEventCallback+0x278>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b51      	cmp	r3, #81	; 0x51
 8002a46:	d106      	bne.n	8002a56 <HAL_UARTEx_RxEventCallback+0x1a2>
 8002a48:	4b3a      	ldr	r3, [pc, #232]	; (8002b34 <HAL_UARTEx_RxEventCallback+0x280>)
 8002a4a:	881b      	ldrh	r3, [r3, #0]
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d101      	bne.n	8002a56 <HAL_UARTEx_RxEventCallback+0x1a2>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <HAL_UARTEx_RxEventCallback+0x1a4>
 8002a56:	2300      	movs	r3, #0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00b      	beq.n	8002a74 <HAL_UARTEx_RxEventCallback+0x1c0>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dx = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8002a5c:	4b33      	ldr	r3, [pc, #204]	; (8002b2c <HAL_UARTEx_RxEventCallback+0x278>)
 8002a5e:	785b      	ldrb	r3, [r3, #1]
 8002a60:	021b      	lsls	r3, r3, #8
 8002a62:	b25a      	sxtb	r2, r3
 8002a64:	4b31      	ldr	r3, [pc, #196]	; (8002b2c <HAL_UARTEx_RxEventCallback+0x278>)
 8002a66:	789b      	ldrb	r3, [r3, #2]
 8002a68:	b25b      	sxtb	r3, r3
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	b25a      	sxtb	r2, r3
 8002a6e:	4b3b      	ldr	r3, [pc, #236]	; (8002b5c <HAL_UARTEx_RxEventCallback+0x2a8>)
 8002a70:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8002a72:	e13b      	b.n	8002cec <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x52 && cmdDataSize == 3) {// Linear Jog Y
 8002a74:	4b2d      	ldr	r3, [pc, #180]	; (8002b2c <HAL_UARTEx_RxEventCallback+0x278>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b52      	cmp	r3, #82	; 0x52
 8002a7a:	d106      	bne.n	8002a8a <HAL_UARTEx_RxEventCallback+0x1d6>
 8002a7c:	4b2d      	ldr	r3, [pc, #180]	; (8002b34 <HAL_UARTEx_RxEventCallback+0x280>)
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d101      	bne.n	8002a8a <HAL_UARTEx_RxEventCallback+0x1d6>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <HAL_UARTEx_RxEventCallback+0x1d8>
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00b      	beq.n	8002aa8 <HAL_UARTEx_RxEventCallback+0x1f4>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dy = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8002a90:	4b26      	ldr	r3, [pc, #152]	; (8002b2c <HAL_UARTEx_RxEventCallback+0x278>)
 8002a92:	785b      	ldrb	r3, [r3, #1]
 8002a94:	021b      	lsls	r3, r3, #8
 8002a96:	b25a      	sxtb	r2, r3
 8002a98:	4b24      	ldr	r3, [pc, #144]	; (8002b2c <HAL_UARTEx_RxEventCallback+0x278>)
 8002a9a:	789b      	ldrb	r3, [r3, #2]
 8002a9c:	b25b      	sxtb	r3, r3
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	b25a      	sxtb	r2, r3
 8002aa2:	4b2f      	ldr	r3, [pc, #188]	; (8002b60 <HAL_UARTEx_RxEventCallback+0x2ac>)
 8002aa4:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8002aa6:	e121      	b.n	8002cec <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x53 && cmdDataSize == 3) {// Linear Jog Z
 8002aa8:	4b20      	ldr	r3, [pc, #128]	; (8002b2c <HAL_UARTEx_RxEventCallback+0x278>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	2b53      	cmp	r3, #83	; 0x53
 8002aae:	d106      	bne.n	8002abe <HAL_UARTEx_RxEventCallback+0x20a>
 8002ab0:	4b20      	ldr	r3, [pc, #128]	; (8002b34 <HAL_UARTEx_RxEventCallback+0x280>)
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	d101      	bne.n	8002abe <HAL_UARTEx_RxEventCallback+0x20a>
 8002aba:	2301      	movs	r3, #1
 8002abc:	e000      	b.n	8002ac0 <HAL_UARTEx_RxEventCallback+0x20c>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00b      	beq.n	8002adc <HAL_UARTEx_RxEventCallback+0x228>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dz = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8002ac4:	4b19      	ldr	r3, [pc, #100]	; (8002b2c <HAL_UARTEx_RxEventCallback+0x278>)
 8002ac6:	785b      	ldrb	r3, [r3, #1]
 8002ac8:	021b      	lsls	r3, r3, #8
 8002aca:	b25a      	sxtb	r2, r3
 8002acc:	4b17      	ldr	r3, [pc, #92]	; (8002b2c <HAL_UARTEx_RxEventCallback+0x278>)
 8002ace:	789b      	ldrb	r3, [r3, #2]
 8002ad0:	b25b      	sxtb	r3, r3
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	b25a      	sxtb	r2, r3
 8002ad6:	4b23      	ldr	r3, [pc, #140]	; (8002b64 <HAL_UARTEx_RxEventCallback+0x2b0>)
 8002ad8:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8002ada:	e107      	b.n	8002cec <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x54 && cmdDataSize == 3) {// Linear Jog Yaw
 8002adc:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <HAL_UARTEx_RxEventCallback+0x278>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b54      	cmp	r3, #84	; 0x54
 8002ae2:	d106      	bne.n	8002af2 <HAL_UARTEx_RxEventCallback+0x23e>
 8002ae4:	4b13      	ldr	r3, [pc, #76]	; (8002b34 <HAL_UARTEx_RxEventCallback+0x280>)
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	d101      	bne.n	8002af2 <HAL_UARTEx_RxEventCallback+0x23e>
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <HAL_UARTEx_RxEventCallback+0x240>
 8002af2:	2300      	movs	r3, #0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00b      	beq.n	8002b10 <HAL_UARTEx_RxEventCallback+0x25c>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dyaw = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8002af8:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <HAL_UARTEx_RxEventCallback+0x278>)
 8002afa:	785b      	ldrb	r3, [r3, #1]
 8002afc:	021b      	lsls	r3, r3, #8
 8002afe:	b25a      	sxtb	r2, r3
 8002b00:	4b0a      	ldr	r3, [pc, #40]	; (8002b2c <HAL_UARTEx_RxEventCallback+0x278>)
 8002b02:	789b      	ldrb	r3, [r3, #2]
 8002b04:	b25b      	sxtb	r3, r3
 8002b06:	4313      	orrs	r3, r2
 8002b08:	b25a      	sxtb	r2, r3
 8002b0a:	4b17      	ldr	r3, [pc, #92]	; (8002b68 <HAL_UARTEx_RxEventCallback+0x2b4>)
 8002b0c:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8002b0e:	e0ed      	b.n	8002cec <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x61 && cmdDataSize == 5) { // Joint Jog 4q
 8002b10:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <HAL_UARTEx_RxEventCallback+0x278>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b61      	cmp	r3, #97	; 0x61
 8002b16:	d129      	bne.n	8002b6c <HAL_UARTEx_RxEventCallback+0x2b8>
 8002b18:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <HAL_UARTEx_RxEventCallback+0x280>)
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	2b05      	cmp	r3, #5
 8002b20:	d124      	bne.n	8002b6c <HAL_UARTEx_RxEventCallback+0x2b8>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e023      	b.n	8002b6e <HAL_UARTEx_RxEventCallback+0x2ba>
 8002b26:	bf00      	nop
 8002b28:	24001068 	.word	0x24001068
 8002b2c:	2400089c 	.word	0x2400089c
 8002b30:	240008b0 	.word	0x240008b0
 8002b34:	240008c4 	.word	0x240008c4
 8002b38:	24000af8 	.word	0x24000af8
 8002b3c:	24000894 	.word	0x24000894
 8002b40:	24000896 	.word	0x24000896
 8002b44:	58021000 	.word	0x58021000
 8002b48:	58020400 	.word	0x58020400
 8002b4c:	2400087b 	.word	0x2400087b
 8002b50:	2400087c 	.word	0x2400087c
 8002b54:	2400087d 	.word	0x2400087d
 8002b58:	2400087e 	.word	0x2400087e
 8002b5c:	2400087f 	.word	0x2400087f
 8002b60:	24000880 	.word	0x24000880
 8002b64:	24000881 	.word	0x24000881
 8002b68:	24000882 	.word	0x24000882
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d014      	beq.n	8002b9c <HAL_UARTEx_RxEventCallback+0x2e8>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = Old_Rx_Buffer[1];
 8002b72:	4b94      	ldr	r3, [pc, #592]	; (8002dc4 <HAL_UARTEx_RxEventCallback+0x510>)
 8002b74:	785b      	ldrb	r3, [r3, #1]
 8002b76:	b25a      	sxtb	r2, r3
 8002b78:	4b93      	ldr	r3, [pc, #588]	; (8002dc8 <HAL_UARTEx_RxEventCallback+0x514>)
 8002b7a:	701a      	strb	r2, [r3, #0]
					dq2 = Old_Rx_Buffer[2];
 8002b7c:	4b91      	ldr	r3, [pc, #580]	; (8002dc4 <HAL_UARTEx_RxEventCallback+0x510>)
 8002b7e:	789b      	ldrb	r3, [r3, #2]
 8002b80:	b25a      	sxtb	r2, r3
 8002b82:	4b92      	ldr	r3, [pc, #584]	; (8002dcc <HAL_UARTEx_RxEventCallback+0x518>)
 8002b84:	701a      	strb	r2, [r3, #0]
					dq3 = Old_Rx_Buffer[3];
 8002b86:	4b8f      	ldr	r3, [pc, #572]	; (8002dc4 <HAL_UARTEx_RxEventCallback+0x510>)
 8002b88:	78db      	ldrb	r3, [r3, #3]
 8002b8a:	b25a      	sxtb	r2, r3
 8002b8c:	4b90      	ldr	r3, [pc, #576]	; (8002dd0 <HAL_UARTEx_RxEventCallback+0x51c>)
 8002b8e:	701a      	strb	r2, [r3, #0]
					dq4 = Old_Rx_Buffer[4];
 8002b90:	4b8c      	ldr	r3, [pc, #560]	; (8002dc4 <HAL_UARTEx_RxEventCallback+0x510>)
 8002b92:	791b      	ldrb	r3, [r3, #4]
 8002b94:	b25a      	sxtb	r2, r3
 8002b96:	4b8f      	ldr	r3, [pc, #572]	; (8002dd4 <HAL_UARTEx_RxEventCallback+0x520>)
 8002b98:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8002b9a:	e0a7      	b.n	8002cec <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x71 && cmdDataSize == 5) { // Linear Jog X,Y,Z,Yaw
 8002b9c:	4b89      	ldr	r3, [pc, #548]	; (8002dc4 <HAL_UARTEx_RxEventCallback+0x510>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b71      	cmp	r3, #113	; 0x71
 8002ba2:	d106      	bne.n	8002bb2 <HAL_UARTEx_RxEventCallback+0x2fe>
 8002ba4:	4b8c      	ldr	r3, [pc, #560]	; (8002dd8 <HAL_UARTEx_RxEventCallback+0x524>)
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	2b05      	cmp	r3, #5
 8002bac:	d101      	bne.n	8002bb2 <HAL_UARTEx_RxEventCallback+0x2fe>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e000      	b.n	8002bb4 <HAL_UARTEx_RxEventCallback+0x300>
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d014      	beq.n	8002be2 <HAL_UARTEx_RxEventCallback+0x32e>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dx = Old_Rx_Buffer[1];
 8002bb8:	4b82      	ldr	r3, [pc, #520]	; (8002dc4 <HAL_UARTEx_RxEventCallback+0x510>)
 8002bba:	785b      	ldrb	r3, [r3, #1]
 8002bbc:	b25a      	sxtb	r2, r3
 8002bbe:	4b87      	ldr	r3, [pc, #540]	; (8002ddc <HAL_UARTEx_RxEventCallback+0x528>)
 8002bc0:	701a      	strb	r2, [r3, #0]
					dy = Old_Rx_Buffer[2];
 8002bc2:	4b80      	ldr	r3, [pc, #512]	; (8002dc4 <HAL_UARTEx_RxEventCallback+0x510>)
 8002bc4:	789b      	ldrb	r3, [r3, #2]
 8002bc6:	b25a      	sxtb	r2, r3
 8002bc8:	4b85      	ldr	r3, [pc, #532]	; (8002de0 <HAL_UARTEx_RxEventCallback+0x52c>)
 8002bca:	701a      	strb	r2, [r3, #0]
					dz = Old_Rx_Buffer[3];
 8002bcc:	4b7d      	ldr	r3, [pc, #500]	; (8002dc4 <HAL_UARTEx_RxEventCallback+0x510>)
 8002bce:	78db      	ldrb	r3, [r3, #3]
 8002bd0:	b25a      	sxtb	r2, r3
 8002bd2:	4b84      	ldr	r3, [pc, #528]	; (8002de4 <HAL_UARTEx_RxEventCallback+0x530>)
 8002bd4:	701a      	strb	r2, [r3, #0]
					dyaw = Old_Rx_Buffer[4];
 8002bd6:	4b7b      	ldr	r3, [pc, #492]	; (8002dc4 <HAL_UARTEx_RxEventCallback+0x510>)
 8002bd8:	791b      	ldrb	r3, [r3, #4]
 8002bda:	b25a      	sxtb	r2, r3
 8002bdc:	4b82      	ldr	r3, [pc, #520]	; (8002de8 <HAL_UARTEx_RxEventCallback+0x534>)
 8002bde:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8002be0:	e084      	b.n	8002cec <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x81 && cmdDataSize == 2) {// Servo
 8002be2:	4b78      	ldr	r3, [pc, #480]	; (8002dc4 <HAL_UARTEx_RxEventCallback+0x510>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b81      	cmp	r3, #129	; 0x81
 8002be8:	d106      	bne.n	8002bf8 <HAL_UARTEx_RxEventCallback+0x344>
 8002bea:	4b7b      	ldr	r3, [pc, #492]	; (8002dd8 <HAL_UARTEx_RxEventCallback+0x524>)
 8002bec:	881b      	ldrh	r3, [r3, #0]
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d101      	bne.n	8002bf8 <HAL_UARTEx_RxEventCallback+0x344>
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e000      	b.n	8002bfa <HAL_UARTEx_RxEventCallback+0x346>
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d015      	beq.n	8002c2a <HAL_UARTEx_RxEventCallback+0x376>
					gripperstate = Old_Rx_Buffer[1];
 8002bfe:	4b71      	ldr	r3, [pc, #452]	; (8002dc4 <HAL_UARTEx_RxEventCallback+0x510>)
 8002c00:	785b      	ldrb	r3, [r3, #1]
 8002c02:	461a      	mov	r2, r3
 8002c04:	4b79      	ldr	r3, [pc, #484]	; (8002dec <HAL_UARTEx_RxEventCallback+0x538>)
 8002c06:	601a      	str	r2, [r3, #0]
					if (gripperstate == 0) {
 8002c08:	4b78      	ldr	r3, [pc, #480]	; (8002dec <HAL_UARTEx_RxEventCallback+0x538>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	bf0c      	ite	eq
 8002c10:	2301      	moveq	r3, #1
 8002c12:	2300      	movne	r3, #0
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_UARTEx_RxEventCallback+0x36e>
						gripper.GripperOpen();
 8002c1a:	4875      	ldr	r0, [pc, #468]	; (8002df0 <HAL_UARTEx_RxEventCallback+0x53c>)
 8002c1c:	f7ff f8f2 	bl	8001e04 <_ZN10ServoMotor11GripperOpenEv>
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8002c20:	e064      	b.n	8002cec <HAL_UARTEx_RxEventCallback+0x438>
					} else {
						gripper.GripperClose();
 8002c22:	4873      	ldr	r0, [pc, #460]	; (8002df0 <HAL_UARTEx_RxEventCallback+0x53c>)
 8002c24:	f7ff f8d8 	bl	8001dd8 <_ZN10ServoMotor12GripperCloseEv>
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8002c28:	e060      	b.n	8002cec <HAL_UARTEx_RxEventCallback+0x438>
					}

				} else if (Old_Rx_Buffer[0] == 0x91 && cmdDataSize == 8) {
 8002c2a:	4b66      	ldr	r3, [pc, #408]	; (8002dc4 <HAL_UARTEx_RxEventCallback+0x510>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b91      	cmp	r3, #145	; 0x91
 8002c30:	d106      	bne.n	8002c40 <HAL_UARTEx_RxEventCallback+0x38c>
 8002c32:	4b69      	ldr	r3, [pc, #420]	; (8002dd8 <HAL_UARTEx_RxEventCallback+0x524>)
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d101      	bne.n	8002c40 <HAL_UARTEx_RxEventCallback+0x38c>
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e000      	b.n	8002c42 <HAL_UARTEx_RxEventCallback+0x38e>
 8002c40:	2300      	movs	r3, #0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d052      	beq.n	8002cec <HAL_UARTEx_RxEventCallback+0x438>
					px = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2] ;
 8002c46:	4b5f      	ldr	r3, [pc, #380]	; (8002dc4 <HAL_UARTEx_RxEventCallback+0x510>)
 8002c48:	785b      	ldrb	r3, [r3, #1]
 8002c4a:	021b      	lsls	r3, r3, #8
 8002c4c:	4a5d      	ldr	r2, [pc, #372]	; (8002dc4 <HAL_UARTEx_RxEventCallback+0x510>)
 8002c4e:	7892      	ldrb	r2, [r2, #2]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	ee07 3a90 	vmov	s15, r3
 8002c56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c5a:	4b66      	ldr	r3, [pc, #408]	; (8002df4 <HAL_UARTEx_RxEventCallback+0x540>)
 8002c5c:	edc3 7a00 	vstr	s15, [r3]
					py = (Old_Rx_Buffer[3] << 8) | Old_Rx_Buffer[4] ;
 8002c60:	4b58      	ldr	r3, [pc, #352]	; (8002dc4 <HAL_UARTEx_RxEventCallback+0x510>)
 8002c62:	78db      	ldrb	r3, [r3, #3]
 8002c64:	021b      	lsls	r3, r3, #8
 8002c66:	4a57      	ldr	r2, [pc, #348]	; (8002dc4 <HAL_UARTEx_RxEventCallback+0x510>)
 8002c68:	7912      	ldrb	r2, [r2, #4]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	ee07 3a90 	vmov	s15, r3
 8002c70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c74:	4b60      	ldr	r3, [pc, #384]	; (8002df8 <HAL_UARTEx_RxEventCallback+0x544>)
 8002c76:	edc3 7a00 	vstr	s15, [r3]
					pz = (Old_Rx_Buffer[5] << 8) | Old_Rx_Buffer[6] ;
 8002c7a:	4b52      	ldr	r3, [pc, #328]	; (8002dc4 <HAL_UARTEx_RxEventCallback+0x510>)
 8002c7c:	795b      	ldrb	r3, [r3, #5]
 8002c7e:	021b      	lsls	r3, r3, #8
 8002c80:	4a50      	ldr	r2, [pc, #320]	; (8002dc4 <HAL_UARTEx_RxEventCallback+0x510>)
 8002c82:	7992      	ldrb	r2, [r2, #6]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	ee07 3a90 	vmov	s15, r3
 8002c8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c8e:	4b5b      	ldr	r3, [pc, #364]	; (8002dfc <HAL_UARTEx_RxEventCallback+0x548>)
 8002c90:	edc3 7a00 	vstr	s15, [r3]
					pyaw = Old_Rx_Buffer[7];
 8002c94:	4b4b      	ldr	r3, [pc, #300]	; (8002dc4 <HAL_UARTEx_RxEventCallback+0x510>)
 8002c96:	79db      	ldrb	r3, [r3, #7]
 8002c98:	ee07 3a90 	vmov	s15, r3
 8002c9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ca0:	4b57      	ldr	r3, [pc, #348]	; (8002e00 <HAL_UARTEx_RxEventCallback+0x54c>)
 8002ca2:	edc3 7a00 	vstr	s15, [r3]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8002ca6:	e021      	b.n	8002cec <HAL_UARTEx_RxEventCallback+0x438>
				}
			}
		} else {
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2102      	movs	r1, #2
 8002cac:	4855      	ldr	r0, [pc, #340]	; (8002e04 <HAL_UARTEx_RxEventCallback+0x550>)
 8002cae:	f006 f9f5 	bl	800909c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cb8:	4853      	ldr	r0, [pc, #332]	; (8002e08 <HAL_UARTEx_RxEventCallback+0x554>)
 8002cba:	f006 f9ef 	bl	800909c <HAL_GPIO_WritePin>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "CRC16 error\n", 12);
 8002cbe:	220c      	movs	r2, #12
 8002cc0:	4952      	ldr	r1, [pc, #328]	; (8002e0c <HAL_UARTEx_RxEventCallback+0x558>)
 8002cc2:	4853      	ldr	r0, [pc, #332]	; (8002e10 <HAL_UARTEx_RxEventCallback+0x55c>)
 8002cc4:	f00a fb3e 	bl	800d344 <HAL_UART_Transmit_DMA>
 8002cc8:	e011      	b.n	8002cee <HAL_UARTEx_RxEventCallback+0x43a>
		}
	} else {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2102      	movs	r1, #2
 8002cce:	484d      	ldr	r0, [pc, #308]	; (8002e04 <HAL_UARTEx_RxEventCallback+0x550>)
 8002cd0:	f006 f9e4 	bl	800909c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cda:	484b      	ldr	r0, [pc, #300]	; (8002e08 <HAL_UARTEx_RxEventCallback+0x554>)
 8002cdc:	f006 f9de 	bl	800909c <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "Protocol match error\n", 21);
 8002ce0:	2215      	movs	r2, #21
 8002ce2:	494c      	ldr	r1, [pc, #304]	; (8002e14 <HAL_UARTEx_RxEventCallback+0x560>)
 8002ce4:	484a      	ldr	r0, [pc, #296]	; (8002e10 <HAL_UARTEx_RxEventCallback+0x55c>)
 8002ce6:	f00a fb2d 	bl	800d344 <HAL_UART_Transmit_DMA>
 8002cea:	e000      	b.n	8002cee <HAL_UARTEx_RxEventCallback+0x43a>
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8002cec:	bf00      	nop
	}
	/* start the DMA again */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer,
 8002cee:	2214      	movs	r2, #20
 8002cf0:	4949      	ldr	r1, [pc, #292]	; (8002e18 <HAL_UARTEx_RxEventCallback+0x564>)
 8002cf2:	4847      	ldr	r0, [pc, #284]	; (8002e10 <HAL_UARTEx_RxEventCallback+0x55c>)
 8002cf4:	f00c fa79 	bl	800f1ea <HAL_UARTEx_ReceiveToIdle_DMA>
			Rx_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8002cf8:	4b48      	ldr	r3, [pc, #288]	; (8002e1c <HAL_UARTEx_RxEventCallback+0x568>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a48      	ldr	r2, [pc, #288]	; (8002e20 <HAL_UARTEx_RxEventCallback+0x56c>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d04a      	beq.n	8002d98 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002d02:	4b46      	ldr	r3, [pc, #280]	; (8002e1c <HAL_UARTEx_RxEventCallback+0x568>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a47      	ldr	r2, [pc, #284]	; (8002e24 <HAL_UARTEx_RxEventCallback+0x570>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d045      	beq.n	8002d98 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002d0c:	4b43      	ldr	r3, [pc, #268]	; (8002e1c <HAL_UARTEx_RxEventCallback+0x568>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a45      	ldr	r2, [pc, #276]	; (8002e28 <HAL_UARTEx_RxEventCallback+0x574>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d040      	beq.n	8002d98 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002d16:	4b41      	ldr	r3, [pc, #260]	; (8002e1c <HAL_UARTEx_RxEventCallback+0x568>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a44      	ldr	r2, [pc, #272]	; (8002e2c <HAL_UARTEx_RxEventCallback+0x578>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d03b      	beq.n	8002d98 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002d20:	4b3e      	ldr	r3, [pc, #248]	; (8002e1c <HAL_UARTEx_RxEventCallback+0x568>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a42      	ldr	r2, [pc, #264]	; (8002e30 <HAL_UARTEx_RxEventCallback+0x57c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d036      	beq.n	8002d98 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002d2a:	4b3c      	ldr	r3, [pc, #240]	; (8002e1c <HAL_UARTEx_RxEventCallback+0x568>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a41      	ldr	r2, [pc, #260]	; (8002e34 <HAL_UARTEx_RxEventCallback+0x580>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d031      	beq.n	8002d98 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002d34:	4b39      	ldr	r3, [pc, #228]	; (8002e1c <HAL_UARTEx_RxEventCallback+0x568>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a3f      	ldr	r2, [pc, #252]	; (8002e38 <HAL_UARTEx_RxEventCallback+0x584>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d02c      	beq.n	8002d98 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002d3e:	4b37      	ldr	r3, [pc, #220]	; (8002e1c <HAL_UARTEx_RxEventCallback+0x568>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a3e      	ldr	r2, [pc, #248]	; (8002e3c <HAL_UARTEx_RxEventCallback+0x588>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d027      	beq.n	8002d98 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002d48:	4b34      	ldr	r3, [pc, #208]	; (8002e1c <HAL_UARTEx_RxEventCallback+0x568>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a3c      	ldr	r2, [pc, #240]	; (8002e40 <HAL_UARTEx_RxEventCallback+0x58c>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d022      	beq.n	8002d98 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002d52:	4b32      	ldr	r3, [pc, #200]	; (8002e1c <HAL_UARTEx_RxEventCallback+0x568>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a3b      	ldr	r2, [pc, #236]	; (8002e44 <HAL_UARTEx_RxEventCallback+0x590>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d01d      	beq.n	8002d98 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002d5c:	4b2f      	ldr	r3, [pc, #188]	; (8002e1c <HAL_UARTEx_RxEventCallback+0x568>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a39      	ldr	r2, [pc, #228]	; (8002e48 <HAL_UARTEx_RxEventCallback+0x594>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d018      	beq.n	8002d98 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002d66:	4b2d      	ldr	r3, [pc, #180]	; (8002e1c <HAL_UARTEx_RxEventCallback+0x568>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a38      	ldr	r2, [pc, #224]	; (8002e4c <HAL_UARTEx_RxEventCallback+0x598>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d013      	beq.n	8002d98 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002d70:	4b2a      	ldr	r3, [pc, #168]	; (8002e1c <HAL_UARTEx_RxEventCallback+0x568>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a36      	ldr	r2, [pc, #216]	; (8002e50 <HAL_UARTEx_RxEventCallback+0x59c>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d00e      	beq.n	8002d98 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002d7a:	4b28      	ldr	r3, [pc, #160]	; (8002e1c <HAL_UARTEx_RxEventCallback+0x568>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a35      	ldr	r2, [pc, #212]	; (8002e54 <HAL_UARTEx_RxEventCallback+0x5a0>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d009      	beq.n	8002d98 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002d84:	4b25      	ldr	r3, [pc, #148]	; (8002e1c <HAL_UARTEx_RxEventCallback+0x568>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a33      	ldr	r2, [pc, #204]	; (8002e58 <HAL_UARTEx_RxEventCallback+0x5a4>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d004      	beq.n	8002d98 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002d8e:	4b23      	ldr	r3, [pc, #140]	; (8002e1c <HAL_UARTEx_RxEventCallback+0x568>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a32      	ldr	r2, [pc, #200]	; (8002e5c <HAL_UARTEx_RxEventCallback+0x5a8>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d108      	bne.n	8002daa <HAL_UARTEx_RxEventCallback+0x4f6>
 8002d98:	4b20      	ldr	r3, [pc, #128]	; (8002e1c <HAL_UARTEx_RxEventCallback+0x568>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	4b1f      	ldr	r3, [pc, #124]	; (8002e1c <HAL_UARTEx_RxEventCallback+0x568>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0208 	bic.w	r2, r2, #8
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	e008      	b.n	8002dbc <HAL_UARTEx_RxEventCallback+0x508>
 8002daa:	4b1c      	ldr	r3, [pc, #112]	; (8002e1c <HAL_UARTEx_RxEventCallback+0x568>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	4b1a      	ldr	r3, [pc, #104]	; (8002e1c <HAL_UARTEx_RxEventCallback+0x568>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0204 	bic.w	r2, r2, #4
 8002db8:	601a      	str	r2, [r3, #0]
}
 8002dba:	bf00      	nop
 8002dbc:	bf00      	nop
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bdb0      	pop	{r4, r5, r7, pc}
 8002dc4:	2400089c 	.word	0x2400089c
 8002dc8:	2400087b 	.word	0x2400087b
 8002dcc:	2400087c 	.word	0x2400087c
 8002dd0:	2400087d 	.word	0x2400087d
 8002dd4:	2400087e 	.word	0x2400087e
 8002dd8:	240008c4 	.word	0x240008c4
 8002ddc:	2400087f 	.word	0x2400087f
 8002de0:	24000880 	.word	0x24000880
 8002de4:	24000881 	.word	0x24000881
 8002de8:	24000882 	.word	0x24000882
 8002dec:	24000898 	.word	0x24000898
 8002df0:	2400085c 	.word	0x2400085c
 8002df4:	24000884 	.word	0x24000884
 8002df8:	24000888 	.word	0x24000888
 8002dfc:	2400088c 	.word	0x2400088c
 8002e00:	24000890 	.word	0x24000890
 8002e04:	58021000 	.word	0x58021000
 8002e08:	58020400 	.word	0x58020400
 8002e0c:	080132a8 	.word	0x080132a8
 8002e10:	24001068 	.word	0x24001068
 8002e14:	080132b8 	.word	0x080132b8
 8002e18:	240008b0 	.word	0x240008b0
 8002e1c:	24000ff0 	.word	0x24000ff0
 8002e20:	40020010 	.word	0x40020010
 8002e24:	40020028 	.word	0x40020028
 8002e28:	40020040 	.word	0x40020040
 8002e2c:	40020058 	.word	0x40020058
 8002e30:	40020070 	.word	0x40020070
 8002e34:	40020088 	.word	0x40020088
 8002e38:	400200a0 	.word	0x400200a0
 8002e3c:	400200b8 	.word	0x400200b8
 8002e40:	40020410 	.word	0x40020410
 8002e44:	40020428 	.word	0x40020428
 8002e48:	40020440 	.word	0x40020440
 8002e4c:	40020458 	.word	0x40020458
 8002e50:	40020470 	.word	0x40020470
 8002e54:	40020488 	.word	0x40020488
 8002e58:	400204a0 	.word	0x400204a0
 8002e5c:	400204b8 	.word	0x400204b8

08002e60 <_Z6fcb_FKffff>:
volatile float debug_wq3;

volatile float Robot_X,Robot_Y,Robot_Z,Robot_Yaw;

void fcb_FK(float J_q1, float J_q2, float J_q3, float J_q4)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b090      	sub	sp, #64	; 0x40
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	ed87 0a03 	vstr	s0, [r7, #12]
 8002e6a:	edc7 0a02 	vstr	s1, [r7, #8]
 8002e6e:	ed87 1a01 	vstr	s2, [r7, #4]
 8002e72:	edc7 1a00 	vstr	s3, [r7]

	 const float C1 = cos(J_q1/1000.0);
 8002e76:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e7a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e7e:	ed9f 5b52 	vldr	d5, [pc, #328]	; 8002fc8 <_Z6fcb_FKffff+0x168>
 8002e82:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002e86:	eeb0 0b46 	vmov.f64	d0, d6
 8002e8a:	f00c fe2d 	bl	800fae8 <cos>
 8002e8e:	eeb0 7b40 	vmov.f64	d7, d0
 8002e92:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002e96:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	 const float S1 = sin(J_q1/1000.0);
 8002e9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ea2:	ed9f 5b49 	vldr	d5, [pc, #292]	; 8002fc8 <_Z6fcb_FKffff+0x168>
 8002ea6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002eaa:	eeb0 0b46 	vmov.f64	d0, d6
 8002eae:	f00c fe63 	bl	800fb78 <sin>
 8002eb2:	eeb0 7b40 	vmov.f64	d7, d0
 8002eb6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002eba:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	 const float C13 = cos((J_q1+J_q3)/1000.0);
 8002ebe:	ed97 7a03 	vldr	s14, [r7, #12]
 8002ec2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ec6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ece:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 8002fc8 <_Z6fcb_FKffff+0x168>
 8002ed2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002ed6:	eeb0 0b46 	vmov.f64	d0, d6
 8002eda:	f00c fe05 	bl	800fae8 <cos>
 8002ede:	eeb0 7b40 	vmov.f64	d7, d0
 8002ee2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002ee6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	 const float S13 = sin((J_q1+J_q3)/1000.0);
 8002eea:	ed97 7a03 	vldr	s14, [r7, #12]
 8002eee:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ef2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002efa:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8002fc8 <_Z6fcb_FKffff+0x168>
 8002efe:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002f02:	eeb0 0b46 	vmov.f64	d0, d6
 8002f06:	f00c fe37 	bl	800fb78 <sin>
 8002f0a:	eeb0 7b40 	vmov.f64	d7, d0
 8002f0e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002f12:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

	 const float L1 = 0.01325; // 0.053
 8002f16:	4b30      	ldr	r3, [pc, #192]	; (8002fd8 <_Z6fcb_FKffff+0x178>)
 8002f18:	62fb      	str	r3, [r7, #44]	; 0x2c
	 const float L2 = 0.370; // 0.36625
 8002f1a:	4b30      	ldr	r3, [pc, #192]	; (8002fdc <_Z6fcb_FKffff+0x17c>)
 8002f1c:	62bb      	str	r3, [r7, #40]	; 0x28
	 const float L3 = 0.315;
 8002f1e:	4b30      	ldr	r3, [pc, #192]	; (8002fe0 <_Z6fcb_FKffff+0x180>)
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
	 const float L12 = 0.38325;
 8002f22:	4b30      	ldr	r3, [pc, #192]	; (8002fe4 <_Z6fcb_FKffff+0x184>)
 8002f24:	623b      	str	r3, [r7, #32]
	 const float H1 = 0.125;
 8002f26:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 8002f2a:	61fb      	str	r3, [r7, #28]
	 const float H3 = 0.065;
 8002f2c:	4b2e      	ldr	r3, [pc, #184]	; (8002fe8 <_Z6fcb_FKffff+0x188>)
 8002f2e:	61bb      	str	r3, [r7, #24]
	 const float H4 = 0.190;
 8002f30:	4b2e      	ldr	r3, [pc, #184]	; (8002fec <_Z6fcb_FKffff+0x18c>)
 8002f32:	617b      	str	r3, [r7, #20]

	Robot_X = (L3*C13) + (L12*C1);
 8002f34:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002f38:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002ff0 <_Z6fcb_FKffff+0x190>
 8002f3c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f40:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002f44:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002ff4 <_Z6fcb_FKffff+0x194>
 8002f48:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f50:	4b29      	ldr	r3, [pc, #164]	; (8002ff8 <_Z6fcb_FKffff+0x198>)
 8002f52:	edc3 7a00 	vstr	s15, [r3]
	Robot_Y = (L3*S13) + (L12*S1);
 8002f56:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002f5a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002ff0 <_Z6fcb_FKffff+0x190>
 8002f5e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f62:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002f66:	eddf 6a23 	vldr	s13, [pc, #140]	; 8002ff4 <_Z6fcb_FKffff+0x194>
 8002f6a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f72:	4b22      	ldr	r3, [pc, #136]	; (8002ffc <_Z6fcb_FKffff+0x19c>)
 8002f74:	edc3 7a00 	vstr	s15, [r3]
	Robot_Z = 0.38 + (J_q2/1000.0);
 8002f78:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f7c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002f80:	ed9f 5b11 	vldr	d5, [pc, #68]	; 8002fc8 <_Z6fcb_FKffff+0x168>
 8002f84:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002f88:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8002fd0 <_Z6fcb_FKffff+0x170>
 8002f8c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002f90:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002f94:	4b1a      	ldr	r3, [pc, #104]	; (8003000 <_Z6fcb_FKffff+0x1a0>)
 8002f96:	edc3 7a00 	vstr	s15, [r3]
	Robot_Yaw = (J_q1 + J_q3 + J_q4)/1000.0;
 8002f9a:	ed97 7a03 	vldr	s14, [r7, #12]
 8002f9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fa2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fa6:	edd7 7a00 	vldr	s15, [r7]
 8002faa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fae:	eddf 6a15 	vldr	s13, [pc, #84]	; 8003004 <_Z6fcb_FKffff+0x1a4>
 8002fb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fb6:	4b14      	ldr	r3, [pc, #80]	; (8003008 <_Z6fcb_FKffff+0x1a8>)
 8002fb8:	edc3 7a00 	vstr	s15, [r3]

}
 8002fbc:	bf00      	nop
 8002fbe:	3740      	adds	r7, #64	; 0x40
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	f3af 8000 	nop.w
 8002fc8:	00000000 	.word	0x00000000
 8002fcc:	408f4000 	.word	0x408f4000
 8002fd0:	851eb852 	.word	0x851eb852
 8002fd4:	3fd851eb 	.word	0x3fd851eb
 8002fd8:	3c591687 	.word	0x3c591687
 8002fdc:	3ebd70a4 	.word	0x3ebd70a4
 8002fe0:	3ea147ae 	.word	0x3ea147ae
 8002fe4:	3ec43958 	.word	0x3ec43958
 8002fe8:	3d851eb8 	.word	0x3d851eb8
 8002fec:	3e428f5c 	.word	0x3e428f5c
 8002ff0:	3ea147ae 	.word	0x3ea147ae
 8002ff4:	3ec43958 	.word	0x3ec43958
 8002ff8:	240008fc 	.word	0x240008fc
 8002ffc:	24000900 	.word	0x24000900
 8003000:	24000904 	.word	0x24000904
 8003004:	447a0000 	.word	0x447a0000
 8003008:	24000908 	.word	0x24000908
 800300c:	00000000 	.word	0x00000000

08003010 <HAL_TIM_PeriodElapsedCallback>:





void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003010:	b580      	push	{r7, lr}
 8003012:	b088      	sub	sp, #32
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]

if (htim == &htim12) {	//

}

if (htim == &htim5) {	//
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a5c      	ldr	r2, [pc, #368]	; (800318c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	f040 8111 	bne.w	8003244 <HAL_TIM_PeriodElapsedCallback+0x234>
//		stepperJ4.StepperSetFrequency(dq4);

//		Update_ivk(fcb_joint1.Encoder / 2609.0 , 0.0,fcb_joint3.Encoder / 2609.0, 0.0, dx/1000.0, dy/1000.0, dz/1000.0, 0.0);

		int i;
				for (i = 1 ; i<num ; i++)
 8003022:	2301      	movs	r3, #1
 8003024:	61fb      	str	r3, [r7, #28]
 8003026:	4b5a      	ldr	r3, [pc, #360]	; (8003190 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	69fa      	ldr	r2, [r7, #28]
 800302c:	429a      	cmp	r2, r3
 800302e:	da2f      	bge.n	8003090 <HAL_TIM_PeriodElapsedCallback+0x80>
				{
					box_q1[i-1] = box_q1[i];
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	3b01      	subs	r3, #1
 8003034:	4957      	ldr	r1, [pc, #348]	; (8003194 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003036:	69fa      	ldr	r2, [r7, #28]
 8003038:	0092      	lsls	r2, r2, #2
 800303a:	440a      	add	r2, r1
 800303c:	6812      	ldr	r2, [r2, #0]
 800303e:	4955      	ldr	r1, [pc, #340]	; (8003194 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	601a      	str	r2, [r3, #0]
					box_q2[i-1] = box_q2[i];
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	3b01      	subs	r3, #1
 800304a:	4953      	ldr	r1, [pc, #332]	; (8003198 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800304c:	69fa      	ldr	r2, [r7, #28]
 800304e:	0092      	lsls	r2, r2, #2
 8003050:	440a      	add	r2, r1
 8003052:	6812      	ldr	r2, [r2, #0]
 8003054:	4950      	ldr	r1, [pc, #320]	; (8003198 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	601a      	str	r2, [r3, #0]
					box_q3[i-1] = box_q3[i];
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	3b01      	subs	r3, #1
 8003060:	494e      	ldr	r1, [pc, #312]	; (800319c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8003062:	69fa      	ldr	r2, [r7, #28]
 8003064:	0092      	lsls	r2, r2, #2
 8003066:	440a      	add	r2, r1
 8003068:	6812      	ldr	r2, [r2, #0]
 800306a:	494c      	ldr	r1, [pc, #304]	; (800319c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	440b      	add	r3, r1
 8003070:	601a      	str	r2, [r3, #0]
					box_q4[i-1] = box_q4[i];
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	3b01      	subs	r3, #1
 8003076:	494a      	ldr	r1, [pc, #296]	; (80031a0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8003078:	69fa      	ldr	r2, [r7, #28]
 800307a:	0092      	lsls	r2, r2, #2
 800307c:	440a      	add	r2, r1
 800307e:	6812      	ldr	r2, [r2, #0]
 8003080:	4947      	ldr	r1, [pc, #284]	; (80031a0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	601a      	str	r2, [r3, #0]
				for (i = 1 ; i<num ; i++)
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	3301      	adds	r3, #1
 800308c:	61fb      	str	r3, [r7, #28]
 800308e:	e7ca      	b.n	8003026 <HAL_TIM_PeriodElapsedCallback+0x16>
				}
				 box_q1[num-1] = w_q1;
 8003090:	4b3f      	ldr	r3, [pc, #252]	; (8003190 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	3b01      	subs	r3, #1
 8003096:	4a43      	ldr	r2, [pc, #268]	; (80031a4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8003098:	6812      	ldr	r2, [r2, #0]
 800309a:	493e      	ldr	r1, [pc, #248]	; (8003194 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	440b      	add	r3, r1
 80030a0:	601a      	str	r2, [r3, #0]
				 box_q2[num-1] = dz;
 80030a2:	4b41      	ldr	r3, [pc, #260]	; (80031a8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	b25a      	sxtb	r2, r3
 80030a8:	4b39      	ldr	r3, [pc, #228]	; (8003190 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	3b01      	subs	r3, #1
 80030ae:	ee07 2a90 	vmov	s15, r2
 80030b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030b6:	4a38      	ldr	r2, [pc, #224]	; (8003198 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	edc3 7a00 	vstr	s15, [r3]
				 box_q3[num-1] = w_q3;
 80030c0:	4b33      	ldr	r3, [pc, #204]	; (8003190 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	3b01      	subs	r3, #1
 80030c6:	4a39      	ldr	r2, [pc, #228]	; (80031ac <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80030c8:	6812      	ldr	r2, [r2, #0]
 80030ca:	4934      	ldr	r1, [pc, #208]	; (800319c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	440b      	add	r3, r1
 80030d0:	601a      	str	r2, [r3, #0]
				 box_q4[num-1] = w_q4;
 80030d2:	4b2f      	ldr	r3, [pc, #188]	; (8003190 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	4a35      	ldr	r2, [pc, #212]	; (80031b0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80030da:	6812      	ldr	r2, [r2, #0]
 80030dc:	4930      	ldr	r1, [pc, #192]	; (80031a0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	601a      	str	r2, [r3, #0]

				u_q1 = 0.0;
 80030e4:	4b33      	ldr	r3, [pc, #204]	; (80031b4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
				u_q2 = 0.0;
 80030ec:	4b32      	ldr	r3, [pc, #200]	; (80031b8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
				u_q3 = 0.0;
 80030f4:	4b31      	ldr	r3, [pc, #196]	; (80031bc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]
				u_q4 = 0.0;
 80030fc:	4b30      	ldr	r3, [pc, #192]	; (80031c0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80030fe:	f04f 0200 	mov.w	r2, #0
 8003102:	601a      	str	r2, [r3, #0]

				for(i = 0; i < num; i++)
 8003104:	2300      	movs	r3, #0
 8003106:	61fb      	str	r3, [r7, #28]
 8003108:	4b21      	ldr	r3, [pc, #132]	; (8003190 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	69fa      	ldr	r2, [r7, #28]
 800310e:	429a      	cmp	r2, r3
 8003110:	da58      	bge.n	80031c4 <HAL_TIM_PeriodElapsedCallback+0x1b4>
				{
					u_q1 += box_q1[i];
 8003112:	4a20      	ldr	r2, [pc, #128]	; (8003194 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4413      	add	r3, r2
 800311a:	ed93 7a00 	vldr	s14, [r3]
 800311e:	4b25      	ldr	r3, [pc, #148]	; (80031b4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8003120:	edd3 7a00 	vldr	s15, [r3]
 8003124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003128:	4b22      	ldr	r3, [pc, #136]	; (80031b4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800312a:	edc3 7a00 	vstr	s15, [r3]
					u_q2 += box_q2[i];
 800312e:	4a1a      	ldr	r2, [pc, #104]	; (8003198 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	ed93 7a00 	vldr	s14, [r3]
 800313a:	4b1f      	ldr	r3, [pc, #124]	; (80031b8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800313c:	edd3 7a00 	vldr	s15, [r3]
 8003140:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003144:	4b1c      	ldr	r3, [pc, #112]	; (80031b8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8003146:	edc3 7a00 	vstr	s15, [r3]
					u_q3 += box_q3[i];
 800314a:	4a14      	ldr	r2, [pc, #80]	; (800319c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	ed93 7a00 	vldr	s14, [r3]
 8003156:	4b19      	ldr	r3, [pc, #100]	; (80031bc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8003158:	edd3 7a00 	vldr	s15, [r3]
 800315c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003160:	4b16      	ldr	r3, [pc, #88]	; (80031bc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8003162:	edc3 7a00 	vstr	s15, [r3]
					u_q4 += box_q4[i];
 8003166:	4a0e      	ldr	r2, [pc, #56]	; (80031a0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	ed93 7a00 	vldr	s14, [r3]
 8003172:	4b13      	ldr	r3, [pc, #76]	; (80031c0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8003174:	edd3 7a00 	vldr	s15, [r3]
 8003178:	ee77 7a27 	vadd.f32	s15, s14, s15
 800317c:	4b10      	ldr	r3, [pc, #64]	; (80031c0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800317e:	edc3 7a00 	vstr	s15, [r3]
				for(i = 0; i < num; i++)
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	3301      	adds	r3, #1
 8003186:	61fb      	str	r3, [r7, #28]
 8003188:	e7be      	b.n	8003108 <HAL_TIM_PeriodElapsedCallback+0xf8>
 800318a:	bf00      	nop
 800318c:	24000c3c 	.word	0x24000c3c
 8003190:	24000010 	.word	0x24000010
 8003194:	2400090c 	.word	0x2400090c
 8003198:	24000984 	.word	0x24000984
 800319c:	240009fc 	.word	0x240009fc
 80031a0:	24000a74 	.word	0x24000a74
 80031a4:	240008e0 	.word	0x240008e0
 80031a8:	24000881 	.word	0x24000881
 80031ac:	240008e4 	.word	0x240008e4
 80031b0:	240008e8 	.word	0x240008e8
 80031b4:	240008ec 	.word	0x240008ec
 80031b8:	240008f0 	.word	0x240008f0
 80031bc:	240008f4 	.word	0x240008f4
 80031c0:	240008f8 	.word	0x240008f8
				}

				stepperJ1.StepperOpenLoopSpeed(u_q1/num*-1.0);
 80031c4:	4bd6      	ldr	r3, [pc, #856]	; (8003520 <HAL_TIM_PeriodElapsedCallback+0x510>)
 80031c6:	edd3 6a00 	vldr	s13, [r3]
 80031ca:	4bd6      	ldr	r3, [pc, #856]	; (8003524 <HAL_TIM_PeriodElapsedCallback+0x514>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	ee07 3a90 	vmov	s15, r3
 80031d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031da:	eef1 7a67 	vneg.f32	s15, s15
 80031de:	eeb0 0a67 	vmov.f32	s0, s15
 80031e2:	48d1      	ldr	r0, [pc, #836]	; (8003528 <HAL_TIM_PeriodElapsedCallback+0x518>)
 80031e4:	f7ff f964 	bl	80024b0 <_ZN7Stepper20StepperOpenLoopSpeedEf>
				stepperJ2.StepperSetFrequency(u_q2/3.0);
 80031e8:	4bd0      	ldr	r3, [pc, #832]	; (800352c <HAL_TIM_PeriodElapsedCallback+0x51c>)
 80031ea:	edd3 7a00 	vldr	s15, [r3]
 80031ee:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80031f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80031f6:	eeb0 0a47 	vmov.f32	s0, s14
 80031fa:	48cd      	ldr	r0, [pc, #820]	; (8003530 <HAL_TIM_PeriodElapsedCallback+0x520>)
 80031fc:	f7fe fea4 	bl	8001f48 <_ZN7Stepper19StepperSetFrequencyEf>
				stepperJ3.StepperOpenLoopSpeed(u_q3/num*1.0);
 8003200:	4bcc      	ldr	r3, [pc, #816]	; (8003534 <HAL_TIM_PeriodElapsedCallback+0x524>)
 8003202:	ed93 7a00 	vldr	s14, [r3]
 8003206:	4bc7      	ldr	r3, [pc, #796]	; (8003524 <HAL_TIM_PeriodElapsedCallback+0x514>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	ee07 3a90 	vmov	s15, r3
 800320e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003212:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003216:	eeb0 0a66 	vmov.f32	s0, s13
 800321a:	48c7      	ldr	r0, [pc, #796]	; (8003538 <HAL_TIM_PeriodElapsedCallback+0x528>)
 800321c:	f7ff f948 	bl	80024b0 <_ZN7Stepper20StepperOpenLoopSpeedEf>
				stepperJ4.StepperOpenLoopSpeed(u_q4/num*-1.0);
 8003220:	4bc6      	ldr	r3, [pc, #792]	; (800353c <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8003222:	edd3 6a00 	vldr	s13, [r3]
 8003226:	4bbf      	ldr	r3, [pc, #764]	; (8003524 <HAL_TIM_PeriodElapsedCallback+0x514>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	ee07 3a90 	vmov	s15, r3
 800322e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003232:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003236:	eef1 7a67 	vneg.f32	s15, s15
 800323a:	eeb0 0a67 	vmov.f32	s0, s15
 800323e:	48c0      	ldr	r0, [pc, #768]	; (8003540 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8003240:	f7ff f936 	bl	80024b0 <_ZN7Stepper20StepperOpenLoopSpeedEf>


}


	if (htim == &htim7) {
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4abf      	ldr	r2, [pc, #764]	; (8003544 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8003248:	4293      	cmp	r3, r2
 800324a:	f040 82fd 	bne.w	8003848 <HAL_TIM_PeriodElapsedCallback+0x838>

		encoderJ1.AMT21_Read();
 800324e:	48be      	ldr	r0, [pc, #760]	; (8003548 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8003250:	f7fd fbf5 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8003254:	48bc      	ldr	r0, [pc, #752]	; (8003548 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8003256:	f7fd fc21 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 800325a:	4603      	mov	r3, r0
 800325c:	461a      	mov	r2, r3
 800325e:	4bbb      	ldr	r3, [pc, #748]	; (800354c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8003260:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 8003262:	4bba      	ldr	r3, [pc, #744]	; (800354c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d110      	bne.n	800328c <HAL_TIM_PeriodElapsedCallback+0x27c>
			fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609 ;
 800326a:	48b7      	ldr	r0, [pc, #732]	; (8003548 <HAL_TIM_PeriodElapsedCallback+0x538>)
 800326c:	f7fd fc7a 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 8003270:	4603      	mov	r3, r0
 8003272:	ee07 3a90 	vmov	s15, r3
 8003276:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800327a:	ed9f 5ba7 	vldr	d5, [pc, #668]	; 8003518 <HAL_TIM_PeriodElapsedCallback+0x508>
 800327e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003282:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003286:	4bb2      	ldr	r3, [pc, #712]	; (8003550 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8003288:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
//				if(HALENCJ2OK == HAL_OK){
//					encoderJ2.unwarp();
//					fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609 ;
//				}

		encoderJ3.AMT21_Read();
 800328c:	48b1      	ldr	r0, [pc, #708]	; (8003554 <HAL_TIM_PeriodElapsedCallback+0x544>)
 800328e:	f7fd fbd6 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8003292:	48b0      	ldr	r0, [pc, #704]	; (8003554 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8003294:	f7fd fc02 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 8003298:	4603      	mov	r3, r0
 800329a:	461a      	mov	r2, r3
 800329c:	4bae      	ldr	r3, [pc, #696]	; (8003558 <HAL_TIM_PeriodElapsedCallback+0x548>)
 800329e:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 80032a0:	4bad      	ldr	r3, [pc, #692]	; (8003558 <HAL_TIM_PeriodElapsedCallback+0x548>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d110      	bne.n	80032ca <HAL_TIM_PeriodElapsedCallback+0x2ba>
			fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609 ;
 80032a8:	48aa      	ldr	r0, [pc, #680]	; (8003554 <HAL_TIM_PeriodElapsedCallback+0x544>)
 80032aa:	f7fd fc5b 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 80032ae:	4603      	mov	r3, r0
 80032b0:	ee07 3a90 	vmov	s15, r3
 80032b4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80032b8:	ed9f 5b97 	vldr	d5, [pc, #604]	; 8003518 <HAL_TIM_PeriodElapsedCallback+0x508>
 80032bc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80032c0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80032c4:	4ba5      	ldr	r3, [pc, #660]	; (800355c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 80032c6:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ4.AMT21_Read();
 80032ca:	48a5      	ldr	r0, [pc, #660]	; (8003560 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80032cc:	f7fd fbb7 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 80032d0:	48a3      	ldr	r0, [pc, #652]	; (8003560 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80032d2:	f7fd fbe3 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 80032d6:	4603      	mov	r3, r0
 80032d8:	461a      	mov	r2, r3
 80032da:	4ba2      	ldr	r3, [pc, #648]	; (8003564 <HAL_TIM_PeriodElapsedCallback+0x554>)
 80032dc:	701a      	strb	r2, [r3, #0]
		if (HALENCJ4OK == HAL_OK) {
 80032de:	4ba1      	ldr	r3, [pc, #644]	; (8003564 <HAL_TIM_PeriodElapsedCallback+0x554>)
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d110      	bne.n	8003308 <HAL_TIM_PeriodElapsedCallback+0x2f8>
			fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609 ;
 80032e6:	489e      	ldr	r0, [pc, #632]	; (8003560 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80032e8:	f7fd fc3c 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 80032ec:	4603      	mov	r3, r0
 80032ee:	ee07 3a90 	vmov	s15, r3
 80032f2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80032f6:	ed9f 5b88 	vldr	d5, [pc, #544]	; 8003518 <HAL_TIM_PeriodElapsedCallback+0x508>
 80032fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80032fe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003302:	4b99      	ldr	r3, [pc, #612]	; (8003568 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8003304:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		float t2 = t * t;
 8003308:	4b98      	ldr	r3, [pc, #608]	; (800356c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 800330a:	ed93 7a00 	vldr	s14, [r3]
 800330e:	4b97      	ldr	r3, [pc, #604]	; (800356c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8003310:	edd3 7a00 	vldr	s15, [r3]
 8003314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003318:	edc7 7a06 	vstr	s15, [r7, #24]
		float t3 = t * t * t;
 800331c:	4b93      	ldr	r3, [pc, #588]	; (800356c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 800331e:	ed93 7a00 	vldr	s14, [r3]
 8003322:	4b92      	ldr	r3, [pc, #584]	; (800356c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8003324:	edd3 7a00 	vldr	s15, [r3]
 8003328:	ee27 7a27 	vmul.f32	s14, s14, s15
 800332c:	4b8f      	ldr	r3, [pc, #572]	; (800356c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 800332e:	edd3 7a00 	vldr	s15, [r3]
 8003332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003336:	edc7 7a05 	vstr	s15, [r7, #20]
		float t4 = t * t * t * t;
 800333a:	4b8c      	ldr	r3, [pc, #560]	; (800356c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 800333c:	ed93 7a00 	vldr	s14, [r3]
 8003340:	4b8a      	ldr	r3, [pc, #552]	; (800356c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8003342:	edd3 7a00 	vldr	s15, [r3]
 8003346:	ee27 7a27 	vmul.f32	s14, s14, s15
 800334a:	4b88      	ldr	r3, [pc, #544]	; (800356c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 800334c:	edd3 7a00 	vldr	s15, [r3]
 8003350:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003354:	4b85      	ldr	r3, [pc, #532]	; (800356c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8003356:	edd3 7a00 	vldr	s15, [r3]
 800335a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800335e:	edc7 7a04 	vstr	s15, [r7, #16]
		float t5 = t * t * t * t * t;
 8003362:	4b82      	ldr	r3, [pc, #520]	; (800356c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8003364:	ed93 7a00 	vldr	s14, [r3]
 8003368:	4b80      	ldr	r3, [pc, #512]	; (800356c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 800336a:	edd3 7a00 	vldr	s15, [r3]
 800336e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003372:	4b7e      	ldr	r3, [pc, #504]	; (800356c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8003374:	edd3 7a00 	vldr	s15, [r3]
 8003378:	ee27 7a27 	vmul.f32	s14, s14, s15
 800337c:	4b7b      	ldr	r3, [pc, #492]	; (800356c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 800337e:	edd3 7a00 	vldr	s15, [r3]
 8003382:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003386:	4b79      	ldr	r3, [pc, #484]	; (800356c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8003388:	edd3 7a00 	vldr	s15, [r3]
 800338c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003390:	edc7 7a03 	vstr	s15, [r7, #12]

		fcb_FK(fcb_joint1.Encoder, 0, fcb_joint3.Encoder, fcb_joint4.Encoder);
 8003394:	4b6e      	ldr	r3, [pc, #440]	; (8003550 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8003396:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800339a:	4b70      	ldr	r3, [pc, #448]	; (800355c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 800339c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80033a0:	4b71      	ldr	r3, [pc, #452]	; (8003568 <HAL_TIM_PeriodElapsedCallback+0x558>)
 80033a2:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 80033a6:	eef0 1a66 	vmov.f32	s3, s13
 80033aa:	eeb0 1a47 	vmov.f32	s2, s14
 80033ae:	eddf 0a70 	vldr	s1, [pc, #448]	; 8003570 <HAL_TIM_PeriodElapsedCallback+0x560>
 80033b2:	eeb0 0a67 	vmov.f32	s0, s15
 80033b6:	f7ff fd53 	bl	8002e60 <_Z6fcb_FKffff>

		fcb_X.Goal_Velocity = (fcb_X.C1 + (2.0*fcb_X.C2*t) + (3.0*fcb_X.C3*t2) + (4.0*fcb_X.C4*t3) + (5.0*fcb_X.C5*t4));
 80033ba:	4b6e      	ldr	r3, [pc, #440]	; (8003574 <HAL_TIM_PeriodElapsedCallback+0x564>)
 80033bc:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 80033c0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80033c4:	4b6b      	ldr	r3, [pc, #428]	; (8003574 <HAL_TIM_PeriodElapsedCallback+0x564>)
 80033c6:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 80033ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80033ce:	ee37 5b07 	vadd.f64	d5, d7, d7
 80033d2:	4b66      	ldr	r3, [pc, #408]	; (800356c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 80033d4:	edd3 7a00 	vldr	s15, [r3]
 80033d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80033dc:	ee25 7b07 	vmul.f64	d7, d5, d7
 80033e0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80033e4:	4b63      	ldr	r3, [pc, #396]	; (8003574 <HAL_TIM_PeriodElapsedCallback+0x564>)
 80033e6:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 80033ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80033ee:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 80033f2:	ee27 5b05 	vmul.f64	d5, d7, d5
 80033f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80033fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80033fe:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003402:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003406:	4b5b      	ldr	r3, [pc, #364]	; (8003574 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8003408:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 800340c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003410:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003414:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003418:	edd7 7a05 	vldr	s15, [r7, #20]
 800341c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003420:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003424:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003428:	4b52      	ldr	r3, [pc, #328]	; (8003574 <HAL_TIM_PeriodElapsedCallback+0x564>)
 800342a:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 800342e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003432:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003436:	ee27 5b05 	vmul.f64	d5, d7, d5
 800343a:	edd7 7a04 	vldr	s15, [r7, #16]
 800343e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003442:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003446:	ee36 7b07 	vadd.f64	d7, d6, d7
 800344a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800344e:	4b49      	ldr	r3, [pc, #292]	; (8003574 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8003450:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_X.Goal_Position = ((fcb_X.C0 + (fcb_X.C1*t) + (fcb_X.C2*t2) + (fcb_X.C3*t3) + (fcb_X.C4*t4) + (fcb_X.C5*t5)));
 8003454:	4b47      	ldr	r3, [pc, #284]	; (8003574 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8003456:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 800345a:	4b46      	ldr	r3, [pc, #280]	; (8003574 <HAL_TIM_PeriodElapsedCallback+0x564>)
 800345c:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003460:	4b42      	ldr	r3, [pc, #264]	; (800356c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8003462:	edd3 7a00 	vldr	s15, [r3]
 8003466:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800346a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800346e:	4b41      	ldr	r3, [pc, #260]	; (8003574 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8003470:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003474:	edd7 7a06 	vldr	s15, [r7, #24]
 8003478:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800347c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003480:	4b3c      	ldr	r3, [pc, #240]	; (8003574 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8003482:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003486:	edd7 7a05 	vldr	s15, [r7, #20]
 800348a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800348e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003492:	4b38      	ldr	r3, [pc, #224]	; (8003574 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8003494:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003498:	edd7 7a04 	vldr	s15, [r7, #16]
 800349c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034a4:	4b33      	ldr	r3, [pc, #204]	; (8003574 <HAL_TIM_PeriodElapsedCallback+0x564>)
 80034a6:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 80034aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80034ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034b6:	4b2f      	ldr	r3, [pc, #188]	; (8003574 <HAL_TIM_PeriodElapsedCallback+0x564>)
 80034b8:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_X.UpdateIVK(fcb_joint1.Encoder/1000.0, 0, fcb_joint3.Encoder/1000.0, fcb_joint4.Encoder/1000.0, fcb_X.Goal_Velocity/1000.0, 0, 0, 0);
 80034bc:	4b24      	ldr	r3, [pc, #144]	; (8003550 <HAL_TIM_PeriodElapsedCallback+0x540>)
 80034be:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80034c2:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8003578 <HAL_TIM_PeriodElapsedCallback+0x568>
 80034c6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80034ca:	4b24      	ldr	r3, [pc, #144]	; (800355c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 80034cc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80034d0:	ed9f 6a29 	vldr	s12, [pc, #164]	; 8003578 <HAL_TIM_PeriodElapsedCallback+0x568>
 80034d4:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80034d8:	4b23      	ldr	r3, [pc, #140]	; (8003568 <HAL_TIM_PeriodElapsedCallback+0x558>)
 80034da:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80034de:	eddf 5a26 	vldr	s11, [pc, #152]	; 8003578 <HAL_TIM_PeriodElapsedCallback+0x568>
 80034e2:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 80034e6:	4b23      	ldr	r3, [pc, #140]	; (8003574 <HAL_TIM_PeriodElapsedCallback+0x564>)
 80034e8:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80034ec:	ed9f 5a22 	vldr	s10, [pc, #136]	; 8003578 <HAL_TIM_PeriodElapsedCallback+0x568>
 80034f0:	eec7 5a85 	vdiv.f32	s11, s15, s10
 80034f4:	eddf 3a1e 	vldr	s7, [pc, #120]	; 8003570 <HAL_TIM_PeriodElapsedCallback+0x560>
 80034f8:	ed9f 3a1d 	vldr	s6, [pc, #116]	; 8003570 <HAL_TIM_PeriodElapsedCallback+0x560>
 80034fc:	eddf 2a1c 	vldr	s5, [pc, #112]	; 8003570 <HAL_TIM_PeriodElapsedCallback+0x560>
 8003500:	eeb0 2a65 	vmov.f32	s4, s11
 8003504:	eef0 1a46 	vmov.f32	s3, s12
 8003508:	eeb0 1a66 	vmov.f32	s2, s13
 800350c:	eddf 0a18 	vldr	s1, [pc, #96]	; 8003570 <HAL_TIM_PeriodElapsedCallback+0x560>
 8003510:	eeb0 0a47 	vmov.f32	s0, s14
 8003514:	e032      	b.n	800357c <HAL_TIM_PeriodElapsedCallback+0x56c>
 8003516:	bf00      	nop
 8003518:	645a1cac 	.word	0x645a1cac
 800351c:	4004df3b 	.word	0x4004df3b
 8003520:	240008ec 	.word	0x240008ec
 8003524:	24000010 	.word	0x24000010
 8003528:	24000264 	.word	0x24000264
 800352c:	240008f0 	.word	0x240008f0
 8003530:	2400028c 	.word	0x2400028c
 8003534:	240008f4 	.word	0x240008f4
 8003538:	240002b4 	.word	0x240002b4
 800353c:	240008f8 	.word	0x240008f8
 8003540:	240002dc 	.word	0x240002dc
 8003544:	24000e9c 	.word	0x24000e9c
 8003548:	24000210 	.word	0x24000210
 800354c:	24000878 	.word	0x24000878
 8003550:	24000304 	.word	0x24000304
 8003554:	2400022c 	.word	0x2400022c
 8003558:	24000879 	.word	0x24000879
 800355c:	240004cc 	.word	0x240004cc
 8003560:	24000248 	.word	0x24000248
 8003564:	2400087a 	.word	0x2400087a
 8003568:	240005b0 	.word	0x240005b0
 800356c:	240008cc 	.word	0x240008cc
 8003570:	00000000 	.word	0x00000000
 8003574:	24000778 	.word	0x24000778
 8003578:	447a0000 	.word	0x447a0000
 800357c:	48b4      	ldr	r0, [pc, #720]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0x840>)
 800357e:	f7fd fbad 	bl	8000cdc <_ZN10RobotJoint9UpdateIVKEffffffff>
//		fcb_X.FindIK(fcb_X.Goal_Position/1000.0, Robot_Y, Robot_Z, Robot_Yaw);

//		fcb_joint1.Goal_Velocity = fcb_X.w_q1;
		fcb_joint1.Goal_Position = fcb_X.q1;
 8003582:	4bb3      	ldr	r3, [pc, #716]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0x840>)
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	4ab3      	ldr	r2, [pc, #716]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 8003588:	6493      	str	r3, [r2, #72]	; 0x48
		fcb_joint3.Goal_Velocity = fcb_X.w_q3;
 800358a:	4bb1      	ldr	r3, [pc, #708]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0x840>)
 800358c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358e:	4ab2      	ldr	r2, [pc, #712]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8003590:	64d3      	str	r3, [r2, #76]	; 0x4c
		//		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.Encoder;
		//		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.Encoder;
		//		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
		//		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;
		//
		fcb_joint1.KalmanFillter(fcb_joint1.Encoder);
 8003592:	4bb0      	ldr	r3, [pc, #704]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 8003594:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003598:	eeb0 0a67 	vmov.f32	s0, s15
 800359c:	48ad      	ldr	r0, [pc, #692]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 800359e:	f7fd fd9b 	bl	80010d8 <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint1.kalman_pos = fcb_joint1.X11;
 80035a2:	4bac      	ldr	r3, [pc, #688]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 80035a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80035a8:	4aaa      	ldr	r2, [pc, #680]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 80035aa:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint1.kalman_velo = fcb_joint1.X21;
 80035ae:	4ba9      	ldr	r3, [pc, #676]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 80035b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80035b4:	4aa7      	ldr	r2, [pc, #668]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 80035b6:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
 80035ba:	4ba7      	ldr	r3, [pc, #668]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 80035bc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80035c0:	eeb0 0a67 	vmov.f32	s0, s15
 80035c4:	48a4      	ldr	r0, [pc, #656]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 80035c6:	f7fd fd87 	bl	80010d8 <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint3.kalman_pos = fcb_joint3.X11;
 80035ca:	4ba3      	ldr	r3, [pc, #652]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 80035cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80035d0:	4aa1      	ldr	r2, [pc, #644]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 80035d2:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint3.kalman_velo = fcb_joint3.X21;
 80035d6:	4ba0      	ldr	r3, [pc, #640]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 80035d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80035dc:	4a9e      	ldr	r2, [pc, #632]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 80035de:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		fcb_joint1.Kp_p = 1.0;
 80035e2:	4b9c      	ldr	r3, [pc, #624]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 80035e4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80035e8:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint1.Ki_p = 0.0;
 80035ea:	4b9a      	ldr	r3, [pc, #616]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint1.Kd_p = 0.0;
 80035f2:	4b98      	ldr	r3, [pc, #608]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 80035f4:	f04f 0200 	mov.w	r2, #0
 80035f8:	669a      	str	r2, [r3, #104]	; 0x68
		fcb_joint3.Kp_p = 1.0;
 80035fa:	4b97      	ldr	r3, [pc, #604]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 80035fc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003600:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint3.Ki_p = 0.0;
 8003602:	4b95      	ldr	r3, [pc, #596]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint3.Kd_p = 0.0;
 800360a:	4b93      	ldr	r3, [pc, #588]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	669a      	str	r2, [r3, #104]	; 0x68

		fcb_joint1.Kp_v = 1.0;
 8003612:	4b90      	ldr	r3, [pc, #576]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 8003614:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003618:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint1.Ki_v = 0.0;
 800361a:	4b8e      	ldr	r3, [pc, #568]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint1.Kd_v = 0.0;
 8003622:	4b8c      	ldr	r3, [pc, #560]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 8003624:	f04f 0200 	mov.w	r2, #0
 8003628:	675a      	str	r2, [r3, #116]	; 0x74
		fcb_joint3.Kp_v = 1.0;
 800362a:	4b8b      	ldr	r3, [pc, #556]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 800362c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003630:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint3.Ki_v = 0.0;
 8003632:	4b89      	ldr	r3, [pc, #548]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8003634:	f04f 0200 	mov.w	r2, #0
 8003638:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint3.Kd_v = 0.0;
 800363a:	4b87      	ldr	r3, [pc, #540]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	675a      	str	r2, [r3, #116]	; 0x74

		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.Encoder;
 8003642:	4b84      	ldr	r3, [pc, #528]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 8003644:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8003648:	4b82      	ldr	r3, [pc, #520]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 800364a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800364e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003652:	4b80      	ldr	r3, [pc, #512]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 8003654:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.Encoder;
 8003658:	4b7f      	ldr	r3, [pc, #508]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 800365a:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800365e:	4b7e      	ldr	r3, [pc, #504]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8003660:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003664:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003668:	4b7b      	ldr	r3, [pc, #492]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 800366a:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint1.Error_v = fcb_joint1.Goal_Velocity - fcb_joint1.kalman_velo;
 800366e:	4b79      	ldr	r3, [pc, #484]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 8003670:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8003674:	4b77      	ldr	r3, [pc, #476]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 8003676:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 800367a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800367e:	4b75      	ldr	r3, [pc, #468]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 8003680:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		fcb_joint3.Error_v = fcb_joint3.Goal_Velocity - fcb_joint3.kalman_velo;
 8003684:	4b74      	ldr	r3, [pc, #464]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8003686:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800368a:	4b73      	ldr	r3, [pc, #460]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 800368c:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8003690:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003694:	4b70      	ldr	r3, [pc, #448]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8003696:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84

		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
 800369a:	4b6e      	ldr	r3, [pc, #440]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 800369c:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 80036a0:	4b6c      	ldr	r3, [pc, #432]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 80036a2:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80036a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036aa:	4b6a      	ldr	r3, [pc, #424]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 80036ac:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;
 80036b0:	4b69      	ldr	r3, [pc, #420]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 80036b2:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 80036b6:	4b68      	ldr	r3, [pc, #416]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 80036b8:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80036bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036c0:	4b65      	ldr	r3, [pc, #404]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 80036c2:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint1.Sum_Error_v += fcb_joint1.Error_v;
 80036c6:	4b63      	ldr	r3, [pc, #396]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 80036c8:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80036cc:	4b61      	ldr	r3, [pc, #388]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 80036ce:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80036d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036d6:	4b5f      	ldr	r3, [pc, #380]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 80036d8:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
		fcb_joint3.Sum_Error_v += fcb_joint3.Error_v;
 80036dc:	4b5e      	ldr	r3, [pc, #376]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 80036de:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80036e2:	4b5d      	ldr	r3, [pc, #372]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 80036e4:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80036e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ec:	4b5a      	ldr	r3, [pc, #360]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 80036ee:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
//									(fcb_joint3.Kd_v * (fcb_joint3.Error_v - fcb_joint3.Old_v)) ;

//		stepperJ1.StepperOpenLoopSpeed(fcb_joint1.Output_Joint_W/1000.0);
//		stepperJ3.StepperOpenLoopSpeed(fcb_joint3.Output_Joint_W/1000.0);

		stepperJ1.StepperOpenLoopSpeed(fcb_joint1.Goal_Velocity);
 80036f2:	4b58      	ldr	r3, [pc, #352]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 80036f4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80036f8:	eeb0 0a67 	vmov.f32	s0, s15
 80036fc:	4857      	ldr	r0, [pc, #348]	; (800385c <HAL_TIM_PeriodElapsedCallback+0x84c>)
 80036fe:	f7fe fed7 	bl	80024b0 <_ZN7Stepper20StepperOpenLoopSpeedEf>
		stepperJ3.StepperOpenLoopSpeed(fcb_joint3.Goal_Velocity);
 8003702:	4b55      	ldr	r3, [pc, #340]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8003704:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003708:	eeb0 0a67 	vmov.f32	s0, s15
 800370c:	4854      	ldr	r0, [pc, #336]	; (8003860 <HAL_TIM_PeriodElapsedCallback+0x850>)
 800370e:	f7fe fecf 	bl	80024b0 <_ZN7Stepper20StepperOpenLoopSpeedEf>

		fcb_joint1.Old_Error_p = fcb_joint1.Error_p;
 8003712:	4b50      	ldr	r3, [pc, #320]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 8003714:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003716:	4a4f      	ldr	r2, [pc, #316]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 8003718:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint3.Old_Error_p = fcb_joint3.Error_p;
 800371a:	4b4f      	ldr	r3, [pc, #316]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 800371c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800371e:	4a4e      	ldr	r2, [pc, #312]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8003720:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint1.Old_Error_v = fcb_joint1.Error_v;
 8003722:	4b4c      	ldr	r3, [pc, #304]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 8003724:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003728:	4a4a      	ldr	r2, [pc, #296]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 800372a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		fcb_joint3.Old_Error_v = fcb_joint3.Error_v;
 800372e:	4b4a      	ldr	r3, [pc, #296]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8003730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003734:	4a48      	ldr	r2, [pc, #288]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8003736:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

		fcb_joint1.Old_p = fcb_joint1.Encoder;
 800373a:	4b46      	ldr	r3, [pc, #280]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 800373c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373e:	4a45      	ldr	r2, [pc, #276]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 8003740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint3.Old_p = fcb_joint3.Encoder;
 8003744:	4b44      	ldr	r3, [pc, #272]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8003746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003748:	4a43      	ldr	r2, [pc, #268]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 800374a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint1.Old_v = fcb_joint1.kalman_velo;
 800374e:	4b41      	ldr	r3, [pc, #260]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 8003750:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003754:	4a3f      	ldr	r2, [pc, #252]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 8003756:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		fcb_joint3.Old_v = fcb_joint1.kalman_velo;
 800375a:	4b3e      	ldr	r3, [pc, #248]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 800375c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003760:	4a3d      	ldr	r2, [pc, #244]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8003762:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

		t = t + (sample_time_1000);
 8003766:	4b3f      	ldr	r3, [pc, #252]	; (8003864 <HAL_TIM_PeriodElapsedCallback+0x854>)
 8003768:	ed93 7a00 	vldr	s14, [r3]
 800376c:	4b3e      	ldr	r3, [pc, #248]	; (8003868 <HAL_TIM_PeriodElapsedCallback+0x858>)
 800376e:	edd3 7a00 	vldr	s15, [r3]
 8003772:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003776:	4b3b      	ldr	r3, [pc, #236]	; (8003864 <HAL_TIM_PeriodElapsedCallback+0x854>)
 8003778:	edc3 7a00 	vstr	s15, [r3]


		if (t >= fcb_X.T)
 800377c:	4b34      	ldr	r3, [pc, #208]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0x840>)
 800377e:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 8003782:	4b38      	ldr	r3, [pc, #224]	; (8003864 <HAL_TIM_PeriodElapsedCallback+0x854>)
 8003784:	edd3 7a00 	vldr	s15, [r3]
 8003788:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800378c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003790:	bf94      	ite	ls
 8003792:	2301      	movls	r3, #1
 8003794:	2300      	movhi	r3, #0
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	d055      	beq.n	8003848 <HAL_TIM_PeriodElapsedCallback+0x838>
		{
			t = 0.0;
 800379c:	4b31      	ldr	r3, [pc, #196]	; (8003864 <HAL_TIM_PeriodElapsedCallback+0x854>)
 800379e:	f04f 0200 	mov.w	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]
			direction_traj ^= 1;
 80037a4:	4b31      	ldr	r3, [pc, #196]	; (800386c <HAL_TIM_PeriodElapsedCallback+0x85c>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f083 0301 	eor.w	r3, r3, #1
 80037ac:	4a2f      	ldr	r2, [pc, #188]	; (800386c <HAL_TIM_PeriodElapsedCallback+0x85c>)
 80037ae:	6013      	str	r3, [r2, #0]

			fcb_joint1.Sum_Error_p = 0;
 80037b0:	4b28      	ldr	r3, [pc, #160]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 80037b2:	f04f 0200 	mov.w	r2, #0
 80037b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			fcb_joint3.Sum_Error_p = 0;
 80037ba:	4b27      	ldr	r3, [pc, #156]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			fcb_joint1.Sum_Error_v = 0;
 80037c4:	4b23      	ldr	r3, [pc, #140]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			fcb_joint3.Sum_Error_v = 0;
 80037ce:	4b22      	ldr	r3, [pc, #136]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 80037d0:	f04f 0200 	mov.w	r2, #0
 80037d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			fcb_joint1.Old_Error_p = 0;
 80037d8:	4b1e      	ldr	r3, [pc, #120]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	67da      	str	r2, [r3, #124]	; 0x7c
			fcb_joint3.Old_Error_p = 0;
 80037e0:	4b1d      	ldr	r3, [pc, #116]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 80037e2:	f04f 0200 	mov.w	r2, #0
 80037e6:	67da      	str	r2, [r3, #124]	; 0x7c
			fcb_joint1.Old_Error_v = 0;
 80037e8:	4b1a      	ldr	r3, [pc, #104]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			fcb_joint3.Old_Error_v = 0;
 80037f2:	4b19      	ldr	r3, [pc, #100]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			fcb_joint1.Old_p = 0;
 80037fc:	4b15      	ldr	r3, [pc, #84]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 80037fe:	f04f 0200 	mov.w	r2, #0
 8003802:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			fcb_joint3.Old_p = 0;
 8003806:	4b14      	ldr	r3, [pc, #80]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8003808:	f04f 0200 	mov.w	r2, #0
 800380c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			fcb_joint1.Old_v = 0;
 8003810:	4b10      	ldr	r3, [pc, #64]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x844>)
 8003812:	f04f 0200 	mov.w	r2, #0
 8003816:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			fcb_joint3.Old_v = 0;
 800381a:	4b0f      	ldr	r3, [pc, #60]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x848>)
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			fcb_X.T = 0.0;
 8003824:	4b0a      	ldr	r3, [pc, #40]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0x840>)
 8003826:	f04f 0200 	mov.w	r2, #0
 800382a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

			stepperJ1.StepperOpenLoopSpeed(0);
 800382e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8003870 <HAL_TIM_PeriodElapsedCallback+0x860>
 8003832:	480a      	ldr	r0, [pc, #40]	; (800385c <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8003834:	f7fe fe3c 	bl	80024b0 <_ZN7Stepper20StepperOpenLoopSpeedEf>
			stepperJ3.StepperOpenLoopSpeed(0);
 8003838:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8003870 <HAL_TIM_PeriodElapsedCallback+0x860>
 800383c:	4808      	ldr	r0, [pc, #32]	; (8003860 <HAL_TIM_PeriodElapsedCallback+0x850>)
 800383e:	f7fe fe37 	bl	80024b0 <_ZN7Stepper20StepperOpenLoopSpeedEf>
			if (direction_traj == 0)
 8003842:	4b0a      	ldr	r3, [pc, #40]	; (800386c <HAL_TIM_PeriodElapsedCallback+0x85c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
		//					chess_board_ang = 0.0;
		//					direction_traj ^= 1;
		//				}

	}
}
 8003848:	bf00      	nop
 800384a:	3720      	adds	r7, #32
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	24000778 	.word	0x24000778
 8003854:	24000304 	.word	0x24000304
 8003858:	240004cc 	.word	0x240004cc
 800385c:	24000264 	.word	0x24000264
 8003860:	240002b4 	.word	0x240002b4
 8003864:	240008cc 	.word	0x240008cc
 8003868:	2400000c 	.word	0x2400000c
 800386c:	240008c8 	.word	0x240008c8
	...

08003878 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 	HAL_Init();
 800387c:	f002 f848 	bl	8005910 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003880:	f000 f9f4 	bl	8003c6c <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003884:	f7fe fee0 	bl	8002648 <MX_GPIO_Init>
	MX_DMA_Init();
 8003888:	f7fe fe9e 	bl	80025c8 <MX_DMA_Init>
	MX_USART3_UART_Init();
 800388c:	f001 fd94 	bl	80053b8 <MX_USART3_UART_Init>
	MX_TIM2_Init();
 8003890:	f000 ff98 	bl	80047c4 <MX_TIM2_Init>
	MX_UART4_Init();
 8003894:	f001 fcee 	bl	8005274 <MX_UART4_Init>
	MX_TIM4_Init();
 8003898:	f001 f884 	bl	80049a4 <MX_TIM4_Init>
	MX_SPI3_Init();
 800389c:	f000 fbe6 	bl	800406c <MX_SPI3_Init>
	MX_TIM1_Init();
 80038a0:	f000 fee2 	bl	8004668 <MX_TIM1_Init>
	MX_TIM3_Init();
 80038a4:	f001 f806 	bl	80048b4 <MX_TIM3_Init>
	MX_TIM5_Init();
 80038a8:	f001 f8f4 	bl	8004a94 <MX_TIM5_Init>
	MX_TIM15_Init();
 80038ac:	f001 fa2e 	bl	8004d0c <MX_TIM15_Init>
	MX_CRC_Init();
 80038b0:	f7fe fe3a 	bl	8002528 <MX_CRC_Init>
	MX_UART7_Init();
 80038b4:	f001 fd32 	bl	800531c <MX_UART7_Init>
	MX_TIM6_Init();
 80038b8:	f001 f93a 	bl	8004b30 <MX_TIM6_Init>
	MX_TIM7_Init();
 80038bc:	f001 f96e 	bl	8004b9c <MX_TIM7_Init>
	MX_TIM12_Init();
 80038c0:	f001 f9a2 	bl	8004c08 <MX_TIM12_Init>
	MX_TIM13_Init();
 80038c4:	f001 f9da 	bl	8004c7c <MX_TIM13_Init>
	MX_TIM14_Init();
 80038c8:	f001 f9fc 	bl	8004cc4 <MX_TIM14_Init>
	/* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80038cc:	2201      	movs	r2, #1
 80038ce:	2101      	movs	r1, #1
 80038d0:	489f      	ldr	r0, [pc, #636]	; (8003b50 <main+0x2d8>)
 80038d2:	f005 fbe3 	bl	800909c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80038d6:	2201      	movs	r2, #1
 80038d8:	2102      	movs	r1, #2
 80038da:	489e      	ldr	r0, [pc, #632]	; (8003b54 <main+0x2dc>)
 80038dc:	f005 fbde 	bl	800909c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80038e0:	2200      	movs	r2, #0
 80038e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80038e6:	489a      	ldr	r0, [pc, #616]	; (8003b50 <main+0x2d8>)
 80038e8:	f005 fbd8 	bl	800909c <HAL_GPIO_WritePin>

	#ifdef __cplusplus
	stepperJ1.StepperSetFrequency(0.0f);
 80038ec:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 8003b58 <main+0x2e0>
 80038f0:	489a      	ldr	r0, [pc, #616]	; (8003b5c <main+0x2e4>)
 80038f2:	f7fe fb29 	bl	8001f48 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ1.StepperSetMicrostep(8);
 80038f6:	2108      	movs	r1, #8
 80038f8:	4898      	ldr	r0, [pc, #608]	; (8003b5c <main+0x2e4>)
 80038fa:	f7fe fdc1 	bl	8002480 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ1.StepperSetRatio(42);
 80038fe:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8003b60 <main+0x2e8>
 8003902:	4896      	ldr	r0, [pc, #600]	; (8003b5c <main+0x2e4>)
 8003904:	f7fe fd98 	bl	8002438 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ1.StepperEnable();
 8003908:	4894      	ldr	r0, [pc, #592]	; (8003b5c <main+0x2e4>)
 800390a:	f7fe fb0c 	bl	8001f26 <_ZN7Stepper13StepperEnableEv>

	stepperJ2.StepperSetFrequency(0.0f);
 800390e:	ed9f 0a92 	vldr	s0, [pc, #584]	; 8003b58 <main+0x2e0>
 8003912:	4894      	ldr	r0, [pc, #592]	; (8003b64 <main+0x2ec>)
 8003914:	f7fe fb18 	bl	8001f48 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ2.StepperSetMicrostep(8);
 8003918:	2108      	movs	r1, #8
 800391a:	4892      	ldr	r0, [pc, #584]	; (8003b64 <main+0x2ec>)
 800391c:	f7fe fdb0 	bl	8002480 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ2.StepperSetRatio(3);
 8003920:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8003924:	488f      	ldr	r0, [pc, #572]	; (8003b64 <main+0x2ec>)
 8003926:	f7fe fd87 	bl	8002438 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ2.StepperEnable();
 800392a:	488e      	ldr	r0, [pc, #568]	; (8003b64 <main+0x2ec>)
 800392c:	f7fe fafb 	bl	8001f26 <_ZN7Stepper13StepperEnableEv>

	stepperJ3.StepperSetFrequency(0.0f);
 8003930:	ed9f 0a89 	vldr	s0, [pc, #548]	; 8003b58 <main+0x2e0>
 8003934:	488c      	ldr	r0, [pc, #560]	; (8003b68 <main+0x2f0>)
 8003936:	f7fe fb07 	bl	8001f48 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetMicrostep(8);
 800393a:	2108      	movs	r1, #8
 800393c:	488a      	ldr	r0, [pc, #552]	; (8003b68 <main+0x2f0>)
 800393e:	f7fe fd9f 	bl	8002480 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ3.StepperSetRatio(9);
 8003942:	eeb2 0a02 	vmov.f32	s0, #34	; 0x41100000  9.0
 8003946:	4888      	ldr	r0, [pc, #544]	; (8003b68 <main+0x2f0>)
 8003948:	f7fe fd76 	bl	8002438 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ3.StepperEnable();
 800394c:	4886      	ldr	r0, [pc, #536]	; (8003b68 <main+0x2f0>)
 800394e:	f7fe faea 	bl	8001f26 <_ZN7Stepper13StepperEnableEv>

	stepperJ4.StepperSetFrequency(0.0f);
 8003952:	ed9f 0a81 	vldr	s0, [pc, #516]	; 8003b58 <main+0x2e0>
 8003956:	4885      	ldr	r0, [pc, #532]	; (8003b6c <main+0x2f4>)
 8003958:	f7fe faf6 	bl	8001f48 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ4.StepperSetMicrostep(8);
 800395c:	2108      	movs	r1, #8
 800395e:	4883      	ldr	r0, [pc, #524]	; (8003b6c <main+0x2f4>)
 8003960:	f7fe fd8e 	bl	8002480 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ4.StepperSetRatio(3);
 8003964:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8003968:	4880      	ldr	r0, [pc, #512]	; (8003b6c <main+0x2f4>)
 800396a:	f7fe fd65 	bl	8002438 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ4.StepperEnable();
 800396e:	487f      	ldr	r0, [pc, #508]	; (8003b6c <main+0x2f4>)
 8003970:	f7fe fad9 	bl	8001f26 <_ZN7Stepper13StepperEnableEv>

	//	stepperJ4.StepperSetMicrostep(1);
	//	stepperJ4.StepperSetRatio(1);

	gripper.setDegreeGripperClose(65);
 8003974:	2141      	movs	r1, #65	; 0x41
 8003976:	487e      	ldr	r0, [pc, #504]	; (8003b70 <main+0x2f8>)
 8003978:	f7fe fa1d 	bl	8001db6 <_ZN10ServoMotor21setDegreeGripperCloseEl>
	gripper.setDegreeGripperOpen(0);
 800397c:	2100      	movs	r1, #0
 800397e:	487c      	ldr	r0, [pc, #496]	; (8003b70 <main+0x2f8>)
 8003980:	f7fe fa08 	bl	8001d94 <_ZN10ServoMotor20setDegreeGripperOpenEl>
	gripper.ServoEnable();
 8003984:	487a      	ldr	r0, [pc, #488]	; (8003b70 <main+0x2f8>)
 8003986:	f7fe f830 	bl	80019ea <_ZN10ServoMotor11ServoEnableEv>
	fcb_joint3.Q = 0.12;
 800398a:	4b7a      	ldr	r3, [pc, #488]	; (8003b74 <main+0x2fc>)
 800398c:	4a7a      	ldr	r2, [pc, #488]	; (8003b78 <main+0x300>)
 800398e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	fcb_joint3.R = 0.0001;
 8003992:	4b78      	ldr	r3, [pc, #480]	; (8003b74 <main+0x2fc>)
 8003994:	4a79      	ldr	r2, [pc, #484]	; (8003b7c <main+0x304>)
 8003996:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	encoderJ1.AMT21_Read();
 800399a:	4879      	ldr	r0, [pc, #484]	; (8003b80 <main+0x308>)
 800399c:	f7fd f84f 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 80039a0:	4877      	ldr	r0, [pc, #476]	; (8003b80 <main+0x308>)
 80039a2:	f7fd f87b 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 80039a6:	4603      	mov	r3, r0
 80039a8:	461a      	mov	r2, r3
 80039aa:	4b76      	ldr	r3, [pc, #472]	; (8003b84 <main+0x30c>)
 80039ac:	701a      	strb	r2, [r3, #0]
	if (HALENCJ1OK == HAL_OK) {
 80039ae:	4b75      	ldr	r3, [pc, #468]	; (8003b84 <main+0x30c>)
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d110      	bne.n	80039d8 <main+0x160>
		fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609 ;}
 80039b6:	4872      	ldr	r0, [pc, #456]	; (8003b80 <main+0x308>)
 80039b8:	f7fd f8d4 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 80039bc:	4603      	mov	r3, r0
 80039be:	ee07 3a90 	vmov	s15, r3
 80039c2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80039c6:	ed9f 5b60 	vldr	d5, [pc, #384]	; 8003b48 <main+0x2d0>
 80039ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80039ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80039d2:	4b6d      	ldr	r3, [pc, #436]	; (8003b88 <main+0x310>)
 80039d4:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	encoderJ3.AMT21_Read();
 80039d8:	486c      	ldr	r0, [pc, #432]	; (8003b8c <main+0x314>)
 80039da:	f7fd f830 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 80039de:	486b      	ldr	r0, [pc, #428]	; (8003b8c <main+0x314>)
 80039e0:	f7fd f85c 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 80039e4:	4603      	mov	r3, r0
 80039e6:	461a      	mov	r2, r3
 80039e8:	4b69      	ldr	r3, [pc, #420]	; (8003b90 <main+0x318>)
 80039ea:	701a      	strb	r2, [r3, #0]
	if (HALENCJ3OK == HAL_OK) {
 80039ec:	4b68      	ldr	r3, [pc, #416]	; (8003b90 <main+0x318>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d110      	bne.n	8003a16 <main+0x19e>
		fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609 ;}
 80039f4:	4865      	ldr	r0, [pc, #404]	; (8003b8c <main+0x314>)
 80039f6:	f7fd f8b5 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 80039fa:	4603      	mov	r3, r0
 80039fc:	ee07 3a90 	vmov	s15, r3
 8003a00:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003a04:	ed9f 5b50 	vldr	d5, [pc, #320]	; 8003b48 <main+0x2d0>
 8003a08:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003a0c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003a10:	4b58      	ldr	r3, [pc, #352]	; (8003b74 <main+0x2fc>)
 8003a12:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	encoderJ4.AMT21_Read();
 8003a16:	485f      	ldr	r0, [pc, #380]	; (8003b94 <main+0x31c>)
 8003a18:	f7fd f811 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 8003a1c:	485d      	ldr	r0, [pc, #372]	; (8003b94 <main+0x31c>)
 8003a1e:	f7fd f83d 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 8003a22:	4603      	mov	r3, r0
 8003a24:	461a      	mov	r2, r3
 8003a26:	4b5c      	ldr	r3, [pc, #368]	; (8003b98 <main+0x320>)
 8003a28:	701a      	strb	r2, [r3, #0]
	if (HALENCJ4OK == HAL_OK) {
 8003a2a:	4b5b      	ldr	r3, [pc, #364]	; (8003b98 <main+0x320>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d110      	bne.n	8003a54 <main+0x1dc>
		fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609 ;}
 8003a32:	4858      	ldr	r0, [pc, #352]	; (8003b94 <main+0x31c>)
 8003a34:	f7fd f896 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	ee07 3a90 	vmov	s15, r3
 8003a3e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003a42:	ed9f 5b41 	vldr	d5, [pc, #260]	; 8003b48 <main+0x2d0>
 8003a46:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003a4a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003a4e:	4b53      	ldr	r3, [pc, #332]	; (8003b9c <main+0x324>)
 8003a50:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	fcb_FK(fcb_joint1.Encoder, 0, fcb_joint3.Encoder, fcb_joint4.Encoder);
 8003a54:	4b4c      	ldr	r3, [pc, #304]	; (8003b88 <main+0x310>)
 8003a56:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003a5a:	4b46      	ldr	r3, [pc, #280]	; (8003b74 <main+0x2fc>)
 8003a5c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8003a60:	4b4e      	ldr	r3, [pc, #312]	; (8003b9c <main+0x324>)
 8003a62:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8003a66:	eef0 1a66 	vmov.f32	s3, s13
 8003a6a:	eeb0 1a47 	vmov.f32	s2, s14
 8003a6e:	eddf 0a3a 	vldr	s1, [pc, #232]	; 8003b58 <main+0x2e0>
 8003a72:	eeb0 0a67 	vmov.f32	s0, s15
 8003a76:	f7ff f9f3 	bl	8002e60 <_Z6fcb_FKffff>
	HAL_Delay(3000);
 8003a7a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003a7e:	f001 ffd9 	bl	8005a34 <HAL_Delay>
	#endif

//		HAL_TIM_Base_Start_IT(&htim5); // Jog 		100 Hz
//		HAL_TIM_Base_Start_IT(&htim6); // Set home 	200 Hz
		HAL_TIM_Base_Start_IT(&htim7); // Control 	1000 Hz
 8003a82:	4847      	ldr	r0, [pc, #284]	; (8003ba0 <main+0x328>)
 8003a84:	f008 f80a 	bl	800ba9c <HAL_TIM_Base_Start_IT>
//		HAL_TIM_Base_Start_IT(&htim12); // 			2000 Hz
	//	HAL_TIM_Base_Start_IT(&htim14); // 			500Hz

	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer, Rx_BUFFER_SIZE);
 8003a88:	2214      	movs	r2, #20
 8003a8a:	4946      	ldr	r1, [pc, #280]	; (8003ba4 <main+0x32c>)
 8003a8c:	4846      	ldr	r0, [pc, #280]	; (8003ba8 <main+0x330>)
 8003a8e:	f00b fbac 	bl	800f1ea <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8003a92:	4b46      	ldr	r3, [pc, #280]	; (8003bac <main+0x334>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a46      	ldr	r2, [pc, #280]	; (8003bb0 <main+0x338>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d04a      	beq.n	8003b32 <main+0x2ba>
 8003a9c:	4b43      	ldr	r3, [pc, #268]	; (8003bac <main+0x334>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a44      	ldr	r2, [pc, #272]	; (8003bb4 <main+0x33c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d045      	beq.n	8003b32 <main+0x2ba>
 8003aa6:	4b41      	ldr	r3, [pc, #260]	; (8003bac <main+0x334>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a43      	ldr	r2, [pc, #268]	; (8003bb8 <main+0x340>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d040      	beq.n	8003b32 <main+0x2ba>
 8003ab0:	4b3e      	ldr	r3, [pc, #248]	; (8003bac <main+0x334>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a41      	ldr	r2, [pc, #260]	; (8003bbc <main+0x344>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d03b      	beq.n	8003b32 <main+0x2ba>
 8003aba:	4b3c      	ldr	r3, [pc, #240]	; (8003bac <main+0x334>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a40      	ldr	r2, [pc, #256]	; (8003bc0 <main+0x348>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d036      	beq.n	8003b32 <main+0x2ba>
 8003ac4:	4b39      	ldr	r3, [pc, #228]	; (8003bac <main+0x334>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a3e      	ldr	r2, [pc, #248]	; (8003bc4 <main+0x34c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d031      	beq.n	8003b32 <main+0x2ba>
 8003ace:	4b37      	ldr	r3, [pc, #220]	; (8003bac <main+0x334>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a3d      	ldr	r2, [pc, #244]	; (8003bc8 <main+0x350>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d02c      	beq.n	8003b32 <main+0x2ba>
 8003ad8:	4b34      	ldr	r3, [pc, #208]	; (8003bac <main+0x334>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a3b      	ldr	r2, [pc, #236]	; (8003bcc <main+0x354>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d027      	beq.n	8003b32 <main+0x2ba>
 8003ae2:	4b32      	ldr	r3, [pc, #200]	; (8003bac <main+0x334>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a3a      	ldr	r2, [pc, #232]	; (8003bd0 <main+0x358>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d022      	beq.n	8003b32 <main+0x2ba>
 8003aec:	4b2f      	ldr	r3, [pc, #188]	; (8003bac <main+0x334>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a38      	ldr	r2, [pc, #224]	; (8003bd4 <main+0x35c>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d01d      	beq.n	8003b32 <main+0x2ba>
 8003af6:	4b2d      	ldr	r3, [pc, #180]	; (8003bac <main+0x334>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a37      	ldr	r2, [pc, #220]	; (8003bd8 <main+0x360>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d018      	beq.n	8003b32 <main+0x2ba>
 8003b00:	4b2a      	ldr	r3, [pc, #168]	; (8003bac <main+0x334>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a35      	ldr	r2, [pc, #212]	; (8003bdc <main+0x364>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d013      	beq.n	8003b32 <main+0x2ba>
 8003b0a:	4b28      	ldr	r3, [pc, #160]	; (8003bac <main+0x334>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a34      	ldr	r2, [pc, #208]	; (8003be0 <main+0x368>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d00e      	beq.n	8003b32 <main+0x2ba>
 8003b14:	4b25      	ldr	r3, [pc, #148]	; (8003bac <main+0x334>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a32      	ldr	r2, [pc, #200]	; (8003be4 <main+0x36c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d009      	beq.n	8003b32 <main+0x2ba>
 8003b1e:	4b23      	ldr	r3, [pc, #140]	; (8003bac <main+0x334>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a31      	ldr	r2, [pc, #196]	; (8003be8 <main+0x370>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d004      	beq.n	8003b32 <main+0x2ba>
 8003b28:	4b20      	ldr	r3, [pc, #128]	; (8003bac <main+0x334>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a2f      	ldr	r2, [pc, #188]	; (8003bec <main+0x374>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d15e      	bne.n	8003bf0 <main+0x378>
 8003b32:	4b1e      	ldr	r3, [pc, #120]	; (8003bac <main+0x334>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	4b1c      	ldr	r3, [pc, #112]	; (8003bac <main+0x334>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0208 	bic.w	r2, r2, #8
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	e05d      	b.n	8003c00 <main+0x388>
 8003b44:	f3af 8000 	nop.w
 8003b48:	645a1cac 	.word	0x645a1cac
 8003b4c:	4004df3b 	.word	0x4004df3b
 8003b50:	58020400 	.word	0x58020400
 8003b54:	58021000 	.word	0x58021000
 8003b58:	00000000 	.word	0x00000000
 8003b5c:	24000264 	.word	0x24000264
 8003b60:	42280000 	.word	0x42280000
 8003b64:	2400028c 	.word	0x2400028c
 8003b68:	240002b4 	.word	0x240002b4
 8003b6c:	240002dc 	.word	0x240002dc
 8003b70:	2400085c 	.word	0x2400085c
 8003b74:	240004cc 	.word	0x240004cc
 8003b78:	3df5c28f 	.word	0x3df5c28f
 8003b7c:	38d1b717 	.word	0x38d1b717
 8003b80:	24000210 	.word	0x24000210
 8003b84:	24000878 	.word	0x24000878
 8003b88:	24000304 	.word	0x24000304
 8003b8c:	2400022c 	.word	0x2400022c
 8003b90:	24000879 	.word	0x24000879
 8003b94:	24000248 	.word	0x24000248
 8003b98:	2400087a 	.word	0x2400087a
 8003b9c:	240005b0 	.word	0x240005b0
 8003ba0:	24000e9c 	.word	0x24000e9c
 8003ba4:	240008b0 	.word	0x240008b0
 8003ba8:	24001068 	.word	0x24001068
 8003bac:	24000ff0 	.word	0x24000ff0
 8003bb0:	40020010 	.word	0x40020010
 8003bb4:	40020028 	.word	0x40020028
 8003bb8:	40020040 	.word	0x40020040
 8003bbc:	40020058 	.word	0x40020058
 8003bc0:	40020070 	.word	0x40020070
 8003bc4:	40020088 	.word	0x40020088
 8003bc8:	400200a0 	.word	0x400200a0
 8003bcc:	400200b8 	.word	0x400200b8
 8003bd0:	40020410 	.word	0x40020410
 8003bd4:	40020428 	.word	0x40020428
 8003bd8:	40020440 	.word	0x40020440
 8003bdc:	40020458 	.word	0x40020458
 8003be0:	40020470 	.word	0x40020470
 8003be4:	40020488 	.word	0x40020488
 8003be8:	400204a0 	.word	0x400204a0
 8003bec:	400204b8 	.word	0x400204b8
 8003bf0:	4b19      	ldr	r3, [pc, #100]	; (8003c58 <main+0x3e0>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	4b18      	ldr	r3, [pc, #96]	; (8003c58 <main+0x3e0>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 0204 	bic.w	r2, r2, #4
 8003bfe:	601a      	str	r2, [r3, #0]
	//	stepperJ1.StepperOpenLoopSpeed(1.00f);


//	fcb_joint1.UpdateQuinticCoff(5.0, fcb_joint1.Encoder, fcb_joint1.Encoder + 785, 0.0, 0.0, 0.0, 0.0);
//	fcb_joint3.UpdateQuinticCoff(5.0, fcb_joint3.Encoder, fcb_joint3.Encoder + 785, 0.0, 0.0, 0.0, 0.0);
	fcb_X.UpdateQuinticCoff(10.0, Robot_X * 1000.0, (Robot_X * 1000.0) +  20, 0, 0, 0, 0);
 8003c00:	4b16      	ldr	r3, [pc, #88]	; (8003c5c <main+0x3e4>)
 8003c02:	edd3 7a00 	vldr	s15, [r3]
 8003c06:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003c60 <main+0x3e8>
 8003c0a:	ee67 5a87 	vmul.f32	s11, s15, s14
 8003c0e:	4b13      	ldr	r3, [pc, #76]	; (8003c5c <main+0x3e4>)
 8003c10:	edd3 7a00 	vldr	s15, [r3]
 8003c14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c18:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8003c50 <main+0x3d8>
 8003c1c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003c20:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8003c24:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003c28:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003c2c:	ed9f 3a0d 	vldr	s6, [pc, #52]	; 8003c64 <main+0x3ec>
 8003c30:	eddf 2a0c 	vldr	s5, [pc, #48]	; 8003c64 <main+0x3ec>
 8003c34:	ed9f 2a0b 	vldr	s4, [pc, #44]	; 8003c64 <main+0x3ec>
 8003c38:	eddf 1a0a 	vldr	s3, [pc, #40]	; 8003c64 <main+0x3ec>
 8003c3c:	eeb0 1a67 	vmov.f32	s2, s15
 8003c40:	eef0 0a65 	vmov.f32	s1, s11
 8003c44:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003c48:	4807      	ldr	r0, [pc, #28]	; (8003c68 <main+0x3f0>)
 8003c4a:	f7fd f921 	bl	8000e90 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>

			/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8003c4e:	e7fe      	b.n	8003c4e <main+0x3d6>
 8003c50:	00000000 	.word	0x00000000
 8003c54:	408f4000 	.word	0x408f4000
 8003c58:	24000ff0 	.word	0x24000ff0
 8003c5c:	240008fc 	.word	0x240008fc
 8003c60:	447a0000 	.word	0x447a0000
 8003c64:	00000000 	.word	0x00000000
 8003c68:	24000778 	.word	0x24000778

08003c6c <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b09c      	sub	sp, #112	; 0x70
 8003c70:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c76:	224c      	movs	r2, #76	; 0x4c
 8003c78:	2100      	movs	r1, #0
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f00c fec0 	bl	8010a00 <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c80:	1d3b      	adds	r3, r7, #4
 8003c82:	2220      	movs	r2, #32
 8003c84:	2100      	movs	r1, #0
 8003c86:	4618      	mov	r0, r3
 8003c88:	f00c feba 	bl	8010a00 <memset>

/** Supply configuration update enable
 */
HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003c8c:	2002      	movs	r0, #2
 8003c8e:	f005 fa39 	bl	8009104 <HAL_PWREx_ConfigSupply>
/** Configure the main internal regulator output voltage
 */
__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003c92:	2300      	movs	r3, #0
 8003c94:	603b      	str	r3, [r7, #0]
 8003c96:	4b38      	ldr	r3, [pc, #224]	; (8003d78 <_Z18SystemClock_Configv+0x10c>)
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	4a37      	ldr	r2, [pc, #220]	; (8003d78 <_Z18SystemClock_Configv+0x10c>)
 8003c9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ca0:	6193      	str	r3, [r2, #24]
 8003ca2:	4b35      	ldr	r3, [pc, #212]	; (8003d78 <_Z18SystemClock_Configv+0x10c>)
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003caa:	603b      	str	r3, [r7, #0]
 8003cac:	4b33      	ldr	r3, [pc, #204]	; (8003d7c <_Z18SystemClock_Configv+0x110>)
 8003cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb0:	4a32      	ldr	r2, [pc, #200]	; (8003d7c <_Z18SystemClock_Configv+0x110>)
 8003cb2:	f043 0301 	orr.w	r3, r3, #1
 8003cb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003cb8:	4b30      	ldr	r3, [pc, #192]	; (8003d7c <_Z18SystemClock_Configv+0x110>)
 8003cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	603b      	str	r3, [r7, #0]
 8003cc2:	683b      	ldr	r3, [r7, #0]

while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003cc4:	4b2c      	ldr	r3, [pc, #176]	; (8003d78 <_Z18SystemClock_Configv+0x10c>)
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ccc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cd0:	bf14      	ite	ne
 8003cd2:	2301      	movne	r3, #1
 8003cd4:	2300      	moveq	r3, #0
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d000      	beq.n	8003cde <_Z18SystemClock_Configv+0x72>
 8003cdc:	e7f2      	b.n	8003cc4 <_Z18SystemClock_Configv+0x58>
/** Initializes the RCC Oscillators according to the specified parameters
 * in the RCC_OscInitTypeDef structure.
 */
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003cde:	2302      	movs	r3, #2
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24
RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	633b      	str	r3, [r7, #48]	; 0x30
RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ce6:	2340      	movs	r3, #64	; 0x40
 8003ce8:	637b      	str	r3, [r7, #52]	; 0x34
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003cea:	2302      	movs	r3, #2
 8003cec:	64bb      	str	r3, [r7, #72]	; 0x48
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
RCC_OscInitStruct.PLL.PLLM = 4;
 8003cf2:	2304      	movs	r3, #4
 8003cf4:	653b      	str	r3, [r7, #80]	; 0x50
RCC_OscInitStruct.PLL.PLLN = 60;
 8003cf6:	233c      	movs	r3, #60	; 0x3c
 8003cf8:	657b      	str	r3, [r7, #84]	; 0x54
RCC_OscInitStruct.PLL.PLLP = 2;
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	65bb      	str	r3, [r7, #88]	; 0x58
RCC_OscInitStruct.PLL.PLLQ = 6;
 8003cfe:	2306      	movs	r3, #6
 8003d00:	65fb      	str	r3, [r7, #92]	; 0x5c
RCC_OscInitStruct.PLL.PLLR = 2;
 8003d02:	2302      	movs	r3, #2
 8003d04:	663b      	str	r3, [r7, #96]	; 0x60
RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003d06:	230c      	movs	r3, #12
 8003d08:	667b      	str	r3, [r7, #100]	; 0x64
RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	66bb      	str	r3, [r7, #104]	; 0x68
RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	66fb      	str	r3, [r7, #108]	; 0x6c
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d16:	4618      	mov	r0, r3
 8003d18:	f005 fa2e 	bl	8009178 <HAL_RCC_OscConfig>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	bf14      	ite	ne
 8003d22:	2301      	movne	r3, #1
 8003d24:	2300      	moveq	r3, #0
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <_Z18SystemClock_Configv+0xc4>
{
	Error_Handler();
 8003d2c:	f000 f83e 	bl	8003dac <Error_Handler>
}
/** Initializes the CPU, AHB and APB buses clocks
 */
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d30:	233f      	movs	r3, #63	; 0x3f
 8003d32:	607b      	str	r3, [r7, #4]
|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d34:	2303      	movs	r3, #3
 8003d36:	60bb      	str	r3, [r7, #8]
RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	60fb      	str	r3, [r7, #12]
RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003d3c:	2308      	movs	r3, #8
 8003d3e:	613b      	str	r3, [r7, #16]
RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003d40:	2340      	movs	r3, #64	; 0x40
 8003d42:	617b      	str	r3, [r7, #20]
RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003d44:	2340      	movs	r3, #64	; 0x40
 8003d46:	61bb      	str	r3, [r7, #24]
RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003d48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d4c:	61fb      	str	r3, [r7, #28]
RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003d4e:	2340      	movs	r3, #64	; 0x40
 8003d50:	623b      	str	r3, [r7, #32]

if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003d52:	1d3b      	adds	r3, r7, #4
 8003d54:	2104      	movs	r1, #4
 8003d56:	4618      	mov	r0, r3
 8003d58:	f005 fe3a 	bl	80099d0 <HAL_RCC_ClockConfig>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	bf14      	ite	ne
 8003d62:	2301      	movne	r3, #1
 8003d64:	2300      	moveq	r3, #0
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <_Z18SystemClock_Configv+0x104>
{
	Error_Handler();
 8003d6c:	f000 f81e 	bl	8003dac <Error_Handler>
}
}
 8003d70:	bf00      	nop
 8003d72:	3770      	adds	r7, #112	; 0x70
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	58024800 	.word	0x58024800
 8003d7c:	58000400 	.word	0x58000400

08003d80 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]

}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	80fb      	strh	r3, [r7, #6]

}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
	...

08003dac <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Error_Handler_Debug */
HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8003db0:	2200      	movs	r2, #0
 8003db2:	2101      	movs	r1, #1
 8003db4:	4808      	ldr	r0, [pc, #32]	; (8003dd8 <Error_Handler+0x2c>)
 8003db6:	f005 f971 	bl	800909c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003dba:	2200      	movs	r2, #0
 8003dbc:	2102      	movs	r1, #2
 8003dbe:	4807      	ldr	r0, [pc, #28]	; (8003ddc <Error_Handler+0x30>)
 8003dc0:	f005 f96c 	bl	800909c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003dca:	4803      	ldr	r0, [pc, #12]	; (8003dd8 <Error_Handler+0x2c>)
 8003dcc:	f005 f966 	bl	800909c <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003dd0:	b672      	cpsid	i
}
 8003dd2:	bf00      	nop
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 8003dd4:	e7fe      	b.n	8003dd4 <Error_Handler+0x28>
 8003dd6:	bf00      	nop
 8003dd8:	58020400 	.word	0x58020400
 8003ddc:	58021000 	.word	0x58021000

08003de0 <_Z41__static_initialization_and_destruction_0ii>:
}
/* USER CODE END Error_Handler_Debug */
}
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af02      	add	r7, sp, #8
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	f040 80bd 	bne.w	8003f6c <_Z41__static_initialization_and_destruction_0ii+0x18c>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	f040 80b7 	bne.w	8003f6c <_Z41__static_initialization_and_destruction_0ii+0x18c>
AMT21 encoderJ1(&huart4, 0xD4);
 8003dfe:	22d4      	movs	r2, #212	; 0xd4
 8003e00:	4975      	ldr	r1, [pc, #468]	; (8003fd8 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 8003e02:	4876      	ldr	r0, [pc, #472]	; (8003fdc <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8003e04:	f7fc fdfc 	bl	8000a00 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ3(&huart4, 0xC4);
 8003e08:	22c4      	movs	r2, #196	; 0xc4
 8003e0a:	4973      	ldr	r1, [pc, #460]	; (8003fd8 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 8003e0c:	4874      	ldr	r0, [pc, #464]	; (8003fe0 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 8003e0e:	f7fc fdf7 	bl	8000a00 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ4(&huart4, 0xA4);
 8003e12:	22a4      	movs	r2, #164	; 0xa4
 8003e14:	4970      	ldr	r1, [pc, #448]	; (8003fd8 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 8003e16:	4873      	ldr	r0, [pc, #460]	; (8003fe4 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 8003e18:	f7fc fdf2 	bl	8000a00 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8003e1c:	2320      	movs	r3, #32
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	4b71      	ldr	r3, [pc, #452]	; (8003fe8 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	4971      	ldr	r1, [pc, #452]	; (8003fec <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 8003e26:	4872      	ldr	r0, [pc, #456]	; (8003ff0 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8003e28:	f7fe f82e 	bl	8001e88 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8003e2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	4b70      	ldr	r3, [pc, #448]	; (8003ff4 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8003e34:	2204      	movs	r2, #4
 8003e36:	4970      	ldr	r1, [pc, #448]	; (8003ff8 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8003e38:	4870      	ldr	r0, [pc, #448]	; (8003ffc <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8003e3a:	f7fe f825 	bl	8001e88 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8003e3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	4b6b      	ldr	r3, [pc, #428]	; (8003ff4 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8003e46:	2204      	movs	r2, #4
 8003e48:	496d      	ldr	r1, [pc, #436]	; (8004000 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 8003e4a:	486e      	ldr	r0, [pc, #440]	; (8004004 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8003e4c:	f7fe f81c 	bl	8001e88 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 8003e50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	4b64      	ldr	r3, [pc, #400]	; (8003fe8 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 8003e58:	2208      	movs	r2, #8
 8003e5a:	496b      	ldr	r1, [pc, #428]	; (8004008 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8003e5c:	486b      	ldr	r0, [pc, #428]	; (800400c <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 8003e5e:	f7fe f813 	bl	8001e88 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
RobotJoint fcb_joint1;
 8003e62:	486b      	ldr	r0, [pc, #428]	; (8004010 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8003e64:	f7fc fec0 	bl	8000be8 <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint2;
 8003e68:	486a      	ldr	r0, [pc, #424]	; (8004014 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8003e6a:	f7fc febd 	bl	8000be8 <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint3;
 8003e6e:	486a      	ldr	r0, [pc, #424]	; (8004018 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8003e70:	f7fc feba 	bl	8000be8 <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint4;
 8003e74:	4869      	ldr	r0, [pc, #420]	; (800401c <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003e76:	f7fc feb7 	bl	8000be8 <_ZN10RobotJointC1Ev>
RobotJoint fcb_Y;
 8003e7a:	4869      	ldr	r0, [pc, #420]	; (8004020 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8003e7c:	f7fc feb4 	bl	8000be8 <_ZN10RobotJointC1Ev>
RobotJoint fcb_X;
 8003e80:	4868      	ldr	r0, [pc, #416]	; (8004024 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8003e82:	f7fc feb1 	bl	8000be8 <_ZN10RobotJointC1Ev>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 8003e86:	2208      	movs	r2, #8
 8003e88:	4967      	ldr	r1, [pc, #412]	; (8004028 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8003e8a:	4868      	ldr	r0, [pc, #416]	; (800402c <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8003e8c:	f7fd fd72 	bl	8001974 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>
volatile const float C2_q1 = (3.0 * C0_q1) / (Time * Time);
 8003e90:	4b67      	ldr	r3, [pc, #412]	; (8004030 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8003e92:	edd3 7a00 	vldr	s15, [r3]
 8003e96:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e9a:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8003e9e:	ee27 5b06 	vmul.f64	d5, d7, d6
 8003ea2:	4b64      	ldr	r3, [pc, #400]	; (8004034 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003ea4:	ed93 7a00 	vldr	s14, [r3]
 8003ea8:	4b62      	ldr	r3, [pc, #392]	; (8004034 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003eaa:	edd3 7a00 	vldr	s15, [r3]
 8003eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003eb6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003eba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003ebe:	4b5e      	ldr	r3, [pc, #376]	; (8004038 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8003ec0:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q1 = (2.0 * C0_q1) / (Time * Time * Time);
 8003ec4:	4b5a      	ldr	r3, [pc, #360]	; (8004030 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8003ec6:	edd3 7a00 	vldr	s15, [r3]
 8003eca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ece:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003ed2:	4b58      	ldr	r3, [pc, #352]	; (8004034 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003ed4:	ed93 7a00 	vldr	s14, [r3]
 8003ed8:	4b56      	ldr	r3, [pc, #344]	; (8004034 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003eda:	edd3 7a00 	vldr	s15, [r3]
 8003ede:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ee2:	4b54      	ldr	r3, [pc, #336]	; (8004034 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003ee4:	edd3 7a00 	vldr	s15, [r3]
 8003ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eec:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003ef0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003ef4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003ef8:	4b50      	ldr	r3, [pc, #320]	; (800403c <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8003efa:	edc3 7a00 	vstr	s15, [r3]
volatile const float C2_q3 = (3.0 * C0_q3) / (Time * Time);
 8003efe:	4b50      	ldr	r3, [pc, #320]	; (8004040 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8003f00:	edd3 7a00 	vldr	s15, [r3]
 8003f04:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f08:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8003f0c:	ee27 5b06 	vmul.f64	d5, d7, d6
 8003f10:	4b48      	ldr	r3, [pc, #288]	; (8004034 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003f12:	ed93 7a00 	vldr	s14, [r3]
 8003f16:	4b47      	ldr	r3, [pc, #284]	; (8004034 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003f18:	edd3 7a00 	vldr	s15, [r3]
 8003f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f20:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003f24:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003f28:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003f2c:	4b45      	ldr	r3, [pc, #276]	; (8004044 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 8003f2e:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q3 = (2.0 * C0_q3) / (Time * Time * Time);
 8003f32:	4b43      	ldr	r3, [pc, #268]	; (8004040 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8003f34:	edd3 7a00 	vldr	s15, [r3]
 8003f38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f3c:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003f40:	4b3c      	ldr	r3, [pc, #240]	; (8004034 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003f42:	ed93 7a00 	vldr	s14, [r3]
 8003f46:	4b3b      	ldr	r3, [pc, #236]	; (8004034 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003f48:	edd3 7a00 	vldr	s15, [r3]
 8003f4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f50:	4b38      	ldr	r3, [pc, #224]	; (8004034 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003f52:	edd3 7a00 	vldr	s15, [r3]
 8003f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f5a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003f5e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003f62:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003f66:	4b38      	ldr	r3, [pc, #224]	; (8004048 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8003f68:	edc3 7a00 	vstr	s15, [r3]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d12e      	bne.n	8003fd0 <_Z41__static_initialization_and_destruction_0ii+0x1f0>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d129      	bne.n	8003fd0 <_Z41__static_initialization_and_destruction_0ii+0x1f0>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 8003f7c:	482b      	ldr	r0, [pc, #172]	; (800402c <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8003f7e:	f7fd fd29 	bl	80019d4 <_ZN10ServoMotorD1Ev>
RobotJoint fcb_X;
 8003f82:	4828      	ldr	r0, [pc, #160]	; (8004024 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8003f84:	f7fc fe9e 	bl	8000cc4 <_ZN10RobotJointD1Ev>
RobotJoint fcb_Y;
 8003f88:	4825      	ldr	r0, [pc, #148]	; (8004020 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8003f8a:	f7fc fe9b 	bl	8000cc4 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint4;
 8003f8e:	4823      	ldr	r0, [pc, #140]	; (800401c <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003f90:	f7fc fe98 	bl	8000cc4 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint3;
 8003f94:	4820      	ldr	r0, [pc, #128]	; (8004018 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8003f96:	f7fc fe95 	bl	8000cc4 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint2;
 8003f9a:	481e      	ldr	r0, [pc, #120]	; (8004014 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8003f9c:	f7fc fe92 	bl	8000cc4 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint1;
 8003fa0:	481b      	ldr	r0, [pc, #108]	; (8004010 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8003fa2:	f7fc fe8f 	bl	8000cc4 <_ZN10RobotJointD1Ev>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 8003fa6:	4819      	ldr	r0, [pc, #100]	; (800400c <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 8003fa8:	f7fd ffb2 	bl	8001f10 <_ZN7StepperD1Ev>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8003fac:	4815      	ldr	r0, [pc, #84]	; (8004004 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8003fae:	f7fd ffaf 	bl	8001f10 <_ZN7StepperD1Ev>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8003fb2:	4812      	ldr	r0, [pc, #72]	; (8003ffc <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8003fb4:	f7fd ffac 	bl	8001f10 <_ZN7StepperD1Ev>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8003fb8:	480d      	ldr	r0, [pc, #52]	; (8003ff0 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8003fba:	f7fd ffa9 	bl	8001f10 <_ZN7StepperD1Ev>
AMT21 encoderJ4(&huart4, 0xA4);
 8003fbe:	4809      	ldr	r0, [pc, #36]	; (8003fe4 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 8003fc0:	f7fc fd32 	bl	8000a28 <_ZN5AMT21D1Ev>
AMT21 encoderJ3(&huart4, 0xC4);
 8003fc4:	4806      	ldr	r0, [pc, #24]	; (8003fe0 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 8003fc6:	f7fc fd2f 	bl	8000a28 <_ZN5AMT21D1Ev>
AMT21 encoderJ1(&huart4, 0xD4);
 8003fca:	4804      	ldr	r0, [pc, #16]	; (8003fdc <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8003fcc:	f7fc fd2c 	bl	8000a28 <_ZN5AMT21D1Ev>
}
 8003fd0:	bf00      	nop
 8003fd2:	3708      	adds	r7, #8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	240011e8 	.word	0x240011e8
 8003fdc:	24000210 	.word	0x24000210
 8003fe0:	2400022c 	.word	0x2400022c
 8003fe4:	24000248 	.word	0x24000248
 8003fe8:	58020400 	.word	0x58020400
 8003fec:	24000c88 	.word	0x24000c88
 8003ff0:	24000264 	.word	0x24000264
 8003ff4:	58021000 	.word	0x58021000
 8003ff8:	24000d6c 	.word	0x24000d6c
 8003ffc:	2400028c 	.word	0x2400028c
 8004000:	24000bf0 	.word	0x24000bf0
 8004004:	240002b4 	.word	0x240002b4
 8004008:	24000db8 	.word	0x24000db8
 800400c:	240002dc 	.word	0x240002dc
 8004010:	24000304 	.word	0x24000304
 8004014:	240003e8 	.word	0x240003e8
 8004018:	240004cc 	.word	0x240004cc
 800401c:	240005b0 	.word	0x240005b0
 8004020:	24000694 	.word	0x24000694
 8004024:	24000778 	.word	0x24000778
 8004028:	24000ba4 	.word	0x24000ba4
 800402c:	2400085c 	.word	0x2400085c
 8004030:	24000004 	.word	0x24000004
 8004034:	24000000 	.word	0x24000000
 8004038:	240008d0 	.word	0x240008d0
 800403c:	240008d4 	.word	0x240008d4
 8004040:	24000008 	.word	0x24000008
 8004044:	240008d8 	.word	0x240008d8
 8004048:	240008dc 	.word	0x240008dc

0800404c <_GLOBAL__sub_I_TIM_MS>:
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
 8004050:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004054:	2001      	movs	r0, #1
 8004056:	f7ff fec3 	bl	8003de0 <_Z41__static_initialization_and_destruction_0ii>
 800405a:	bd80      	pop	{r7, pc}

0800405c <_GLOBAL__sub_D_TIM_MS>:
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
 8004060:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004064:	2000      	movs	r0, #0
 8004066:	f7ff febb 	bl	8003de0 <_Z41__static_initialization_and_destruction_0ii>
 800406a:	bd80      	pop	{r7, pc}

0800406c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8004070:	4b27      	ldr	r3, [pc, #156]	; (8004110 <MX_SPI3_Init+0xa4>)
 8004072:	4a28      	ldr	r2, [pc, #160]	; (8004114 <MX_SPI3_Init+0xa8>)
 8004074:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004076:	4b26      	ldr	r3, [pc, #152]	; (8004110 <MX_SPI3_Init+0xa4>)
 8004078:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800407c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800407e:	4b24      	ldr	r3, [pc, #144]	; (8004110 <MX_SPI3_Init+0xa4>)
 8004080:	2200      	movs	r2, #0
 8004082:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8004084:	4b22      	ldr	r3, [pc, #136]	; (8004110 <MX_SPI3_Init+0xa4>)
 8004086:	2203      	movs	r2, #3
 8004088:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800408a:	4b21      	ldr	r3, [pc, #132]	; (8004110 <MX_SPI3_Init+0xa4>)
 800408c:	2200      	movs	r2, #0
 800408e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004090:	4b1f      	ldr	r3, [pc, #124]	; (8004110 <MX_SPI3_Init+0xa4>)
 8004092:	2200      	movs	r2, #0
 8004094:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004096:	4b1e      	ldr	r3, [pc, #120]	; (8004110 <MX_SPI3_Init+0xa4>)
 8004098:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800409c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800409e:	4b1c      	ldr	r3, [pc, #112]	; (8004110 <MX_SPI3_Init+0xa4>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80040a4:	4b1a      	ldr	r3, [pc, #104]	; (8004110 <MX_SPI3_Init+0xa4>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80040aa:	4b19      	ldr	r3, [pc, #100]	; (8004110 <MX_SPI3_Init+0xa4>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040b0:	4b17      	ldr	r3, [pc, #92]	; (8004110 <MX_SPI3_Init+0xa4>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80040b6:	4b16      	ldr	r3, [pc, #88]	; (8004110 <MX_SPI3_Init+0xa4>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80040bc:	4b14      	ldr	r3, [pc, #80]	; (8004110 <MX_SPI3_Init+0xa4>)
 80040be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80040c2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80040c4:	4b12      	ldr	r3, [pc, #72]	; (8004110 <MX_SPI3_Init+0xa4>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80040ca:	4b11      	ldr	r3, [pc, #68]	; (8004110 <MX_SPI3_Init+0xa4>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80040d0:	4b0f      	ldr	r3, [pc, #60]	; (8004110 <MX_SPI3_Init+0xa4>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80040d6:	4b0e      	ldr	r3, [pc, #56]	; (8004110 <MX_SPI3_Init+0xa4>)
 80040d8:	2200      	movs	r2, #0
 80040da:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80040dc:	4b0c      	ldr	r3, [pc, #48]	; (8004110 <MX_SPI3_Init+0xa4>)
 80040de:	2200      	movs	r2, #0
 80040e0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80040e2:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <MX_SPI3_Init+0xa4>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80040e8:	4b09      	ldr	r3, [pc, #36]	; (8004110 <MX_SPI3_Init+0xa4>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80040ee:	4b08      	ldr	r3, [pc, #32]	; (8004110 <MX_SPI3_Init+0xa4>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80040f4:	4b06      	ldr	r3, [pc, #24]	; (8004110 <MX_SPI3_Init+0xa4>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80040fa:	4805      	ldr	r0, [pc, #20]	; (8004110 <MX_SPI3_Init+0xa4>)
 80040fc:	f007 fb56 	bl	800b7ac <HAL_SPI_Init>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8004106:	f7ff fe51 	bl	8003dac <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800410a:	bf00      	nop
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	24000b1c 	.word	0x24000b1c
 8004114:	40003c00 	.word	0x40003c00

08004118 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b0b8      	sub	sp, #224	; 0xe0
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004120:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	605a      	str	r2, [r3, #4]
 800412a:	609a      	str	r2, [r3, #8]
 800412c:	60da      	str	r2, [r3, #12]
 800412e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004130:	f107 0310 	add.w	r3, r7, #16
 8004134:	22bc      	movs	r2, #188	; 0xbc
 8004136:	2100      	movs	r1, #0
 8004138:	4618      	mov	r0, r3
 800413a:	f00c fc61 	bl	8010a00 <memset>
  if(spiHandle->Instance==SPI3)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a25      	ldr	r2, [pc, #148]	; (80041d8 <HAL_SPI_MspInit+0xc0>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d142      	bne.n	80041ce <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8004148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800414c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800414e:	2300      	movs	r3, #0
 8004150:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004152:	f107 0310 	add.w	r3, r7, #16
 8004156:	4618      	mov	r0, r3
 8004158:	f005 ffc6 	bl	800a0e8 <HAL_RCCEx_PeriphCLKConfig>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8004162:	f7ff fe23 	bl	8003dac <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004166:	4b1d      	ldr	r3, [pc, #116]	; (80041dc <HAL_SPI_MspInit+0xc4>)
 8004168:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800416c:	4a1b      	ldr	r2, [pc, #108]	; (80041dc <HAL_SPI_MspInit+0xc4>)
 800416e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004172:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004176:	4b19      	ldr	r3, [pc, #100]	; (80041dc <HAL_SPI_MspInit+0xc4>)
 8004178:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800417c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004184:	4b15      	ldr	r3, [pc, #84]	; (80041dc <HAL_SPI_MspInit+0xc4>)
 8004186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800418a:	4a14      	ldr	r2, [pc, #80]	; (80041dc <HAL_SPI_MspInit+0xc4>)
 800418c:	f043 0304 	orr.w	r3, r3, #4
 8004190:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004194:	4b11      	ldr	r3, [pc, #68]	; (80041dc <HAL_SPI_MspInit+0xc4>)
 8004196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800419a:	f003 0304 	and.w	r3, r3, #4
 800419e:	60bb      	str	r3, [r7, #8]
 80041a0:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80041a2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80041a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041aa:	2302      	movs	r3, #2
 80041ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b0:	2300      	movs	r3, #0
 80041b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041b6:	2300      	movs	r3, #0
 80041b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80041bc:	2306      	movs	r3, #6
 80041be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041c2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80041c6:	4619      	mov	r1, r3
 80041c8:	4805      	ldr	r0, [pc, #20]	; (80041e0 <HAL_SPI_MspInit+0xc8>)
 80041ca:	f004 fdb7 	bl	8008d3c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80041ce:	bf00      	nop
 80041d0:	37e0      	adds	r7, #224	; 0xe0
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40003c00 	.word	0x40003c00
 80041dc:	58024400 	.word	0x58024400
 80041e0:	58020800 	.word	0x58020800

080041e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041ea:	4b0a      	ldr	r3, [pc, #40]	; (8004214 <HAL_MspInit+0x30>)
 80041ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80041f0:	4a08      	ldr	r2, [pc, #32]	; (8004214 <HAL_MspInit+0x30>)
 80041f2:	f043 0302 	orr.w	r3, r3, #2
 80041f6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80041fa:	4b06      	ldr	r3, [pc, #24]	; (8004214 <HAL_MspInit+0x30>)
 80041fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	607b      	str	r3, [r7, #4]
 8004206:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	58024400 	.word	0x58024400

08004218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800421c:	e7fe      	b.n	800421c <NMI_Handler+0x4>

0800421e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800421e:	b480      	push	{r7}
 8004220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004222:	e7fe      	b.n	8004222 <HardFault_Handler+0x4>

08004224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004228:	e7fe      	b.n	8004228 <MemManage_Handler+0x4>

0800422a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800422a:	b480      	push	{r7}
 800422c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800422e:	e7fe      	b.n	800422e <BusFault_Handler+0x4>

08004230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004234:	e7fe      	b.n	8004234 <UsageFault_Handler+0x4>

08004236 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004236:	b480      	push	{r7}
 8004238:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800423a:	bf00      	nop
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004248:	bf00      	nop
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004252:	b480      	push	{r7}
 8004254:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004256:	bf00      	nop
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004264:	f001 fbc6 	bl	80059f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8004268:	f001 fd23 	bl	8005cb2 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 800426c:	bf00      	nop
 800426e:	bd80      	pop	{r7, pc}

08004270 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8004274:	4802      	ldr	r0, [pc, #8]	; (8004280 <DMA1_Stream0_IRQHandler+0x10>)
 8004276:	f003 fa4f 	bl	8007718 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800427a:	bf00      	nop
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	24001170 	.word	0x24001170

08004284 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004288:	4802      	ldr	r0, [pc, #8]	; (8004294 <DMA1_Stream1_IRQHandler+0x10>)
 800428a:	f003 fa45 	bl	8007718 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800428e:	bf00      	nop
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	24000ff0 	.word	0x24000ff0

08004298 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800429c:	4802      	ldr	r0, [pc, #8]	; (80042a8 <DMA1_Stream2_IRQHandler+0x10>)
 800429e:	f003 fa3b 	bl	8007718 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80042a2:	bf00      	nop
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	240010f8 	.word	0x240010f8

080042ac <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80042b0:	4802      	ldr	r0, [pc, #8]	; (80042bc <DMA1_Stream3_IRQHandler+0x10>)
 80042b2:	f003 fa31 	bl	8007718 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80042b6:	bf00      	nop
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	24000ee8 	.word	0x24000ee8

080042c0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80042c4:	4802      	ldr	r0, [pc, #8]	; (80042d0 <DMA1_Stream4_IRQHandler+0x10>)
 80042c6:	f003 fa27 	bl	8007718 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80042ca:	bf00      	nop
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	24001278 	.word	0x24001278

080042d4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 80042d8:	2040      	movs	r0, #64	; 0x40
 80042da:	f004 fef8 	bl	80090ce <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM3_Pin);
 80042de:	2080      	movs	r0, #128	; 0x80
 80042e0:	f004 fef5 	bl	80090ce <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80042e4:	bf00      	nop
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80042ec:	4802      	ldr	r0, [pc, #8]	; (80042f8 <USART3_IRQHandler+0x10>)
 80042ee:	f009 f8bb 	bl	800d468 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80042f2:	bf00      	nop
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	24001068 	.word	0x24001068

080042fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 8004300:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004304:	f004 fee3 	bl	80090ce <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 8004308:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800430c:	f004 fedf 	bl	80090ce <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin_Pin);
 8004310:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004314:	f004 fedb 	bl	80090ce <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 8004318:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800431c:	f004 fed7 	bl	80090ce <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004320:	bf00      	nop
 8004322:	bd80      	pop	{r7, pc}

08004324 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8004328:	4802      	ldr	r0, [pc, #8]	; (8004334 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800432a:	f007 fd9f 	bl	800be6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800432e:	bf00      	nop
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	24000e50 	.word	0x24000e50

08004338 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 800433c:	4802      	ldr	r0, [pc, #8]	; (8004348 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800433e:	f007 fd95 	bl	800be6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004342:	bf00      	nop
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	24000cd4 	.word	0x24000cd4

0800434c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004350:	4802      	ldr	r0, [pc, #8]	; (800435c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004352:	f007 fd8b 	bl	800be6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004356:	bf00      	nop
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	24000e04 	.word	0x24000e04

08004360 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004364:	4802      	ldr	r0, [pc, #8]	; (8004370 <TIM5_IRQHandler+0x10>)
 8004366:	f007 fd81 	bl	800be6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800436a:	bf00      	nop
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	24000c3c 	.word	0x24000c3c

08004374 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004378:	4802      	ldr	r0, [pc, #8]	; (8004384 <UART4_IRQHandler+0x10>)
 800437a:	f009 f875 	bl	800d468 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800437e:	bf00      	nop
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	240011e8 	.word	0x240011e8

08004388 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800438c:	4802      	ldr	r0, [pc, #8]	; (8004398 <TIM6_DAC_IRQHandler+0x10>)
 800438e:	f007 fd6d 	bl	800be6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004392:	bf00      	nop
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	24000d20 	.word	0x24000d20

0800439c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80043a0:	4802      	ldr	r0, [pc, #8]	; (80043ac <TIM7_IRQHandler+0x10>)
 80043a2:	f007 fd63 	bl	800be6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80043a6:	bf00      	nop
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	24000e9c 	.word	0x24000e9c

080043b0 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80043b4:	4802      	ldr	r0, [pc, #8]	; (80043c0 <UART7_IRQHandler+0x10>)
 80043b6:	f009 f857 	bl	800d468 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80043ba:	bf00      	nop
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	24000f60 	.word	0x24000f60

080043c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
	return 1;
 80043c8:	2301      	movs	r3, #1
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <_kill>:

int _kill(int pid, int sig)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80043de:	f00c fae5 	bl	80109ac <__errno>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2216      	movs	r2, #22
 80043e6:	601a      	str	r2, [r3, #0]
	return -1;
 80043e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <_exit>:

void _exit (int status)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80043fc:	f04f 31ff 	mov.w	r1, #4294967295
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7ff ffe7 	bl	80043d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004406:	e7fe      	b.n	8004406 <_exit+0x12>

08004408 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004414:	2300      	movs	r3, #0
 8004416:	617b      	str	r3, [r7, #20]
 8004418:	e00a      	b.n	8004430 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800441a:	f3af 8000 	nop.w
 800441e:	4601      	mov	r1, r0
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	1c5a      	adds	r2, r3, #1
 8004424:	60ba      	str	r2, [r7, #8]
 8004426:	b2ca      	uxtb	r2, r1
 8004428:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	3301      	adds	r3, #1
 800442e:	617b      	str	r3, [r7, #20]
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	429a      	cmp	r2, r3
 8004436:	dbf0      	blt.n	800441a <_read+0x12>
	}

return len;
 8004438:	687b      	ldr	r3, [r7, #4]
}
 800443a:	4618      	mov	r0, r3
 800443c:	3718      	adds	r7, #24
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b086      	sub	sp, #24
 8004446:	af00      	add	r7, sp, #0
 8004448:	60f8      	str	r0, [r7, #12]
 800444a:	60b9      	str	r1, [r7, #8]
 800444c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800444e:	2300      	movs	r3, #0
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	e009      	b.n	8004468 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	60ba      	str	r2, [r7, #8]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	4618      	mov	r0, r3
 800445e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	3301      	adds	r3, #1
 8004466:	617b      	str	r3, [r7, #20]
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	429a      	cmp	r2, r3
 800446e:	dbf1      	blt.n	8004454 <_write+0x12>
	}
	return len;
 8004470:	687b      	ldr	r3, [r7, #4]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <_close>:

int _close(int file)
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
	return -1;
 8004482:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004486:	4618      	mov	r0, r3
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004492:	b480      	push	{r7}
 8004494:	b083      	sub	sp, #12
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
 800449a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80044a2:	605a      	str	r2, [r3, #4]
	return 0;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <_isatty>:

int _isatty(int file)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b083      	sub	sp, #12
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
	return 1;
 80044ba:	2301      	movs	r3, #1
}
 80044bc:	4618      	mov	r0, r3
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
	return 0;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
	...

080044e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044ec:	4a14      	ldr	r2, [pc, #80]	; (8004540 <_sbrk+0x5c>)
 80044ee:	4b15      	ldr	r3, [pc, #84]	; (8004544 <_sbrk+0x60>)
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80044f8:	4b13      	ldr	r3, [pc, #76]	; (8004548 <_sbrk+0x64>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d102      	bne.n	8004506 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004500:	4b11      	ldr	r3, [pc, #68]	; (8004548 <_sbrk+0x64>)
 8004502:	4a12      	ldr	r2, [pc, #72]	; (800454c <_sbrk+0x68>)
 8004504:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004506:	4b10      	ldr	r3, [pc, #64]	; (8004548 <_sbrk+0x64>)
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4413      	add	r3, r2
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	429a      	cmp	r2, r3
 8004512:	d207      	bcs.n	8004524 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004514:	f00c fa4a 	bl	80109ac <__errno>
 8004518:	4603      	mov	r3, r0
 800451a:	220c      	movs	r2, #12
 800451c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800451e:	f04f 33ff 	mov.w	r3, #4294967295
 8004522:	e009      	b.n	8004538 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004524:	4b08      	ldr	r3, [pc, #32]	; (8004548 <_sbrk+0x64>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800452a:	4b07      	ldr	r3, [pc, #28]	; (8004548 <_sbrk+0x64>)
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4413      	add	r3, r2
 8004532:	4a05      	ldr	r2, [pc, #20]	; (8004548 <_sbrk+0x64>)
 8004534:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004536:	68fb      	ldr	r3, [r7, #12]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3718      	adds	r7, #24
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	24001908 	.word	0x24001908
 8004544:	00000400 	.word	0x00000400
 8004548:	24000aec 	.word	0x24000aec
 800454c:	24001308 	.word	0x24001308

08004550 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004554:	4b39      	ldr	r3, [pc, #228]	; (800463c <SystemInit+0xec>)
 8004556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455a:	4a38      	ldr	r2, [pc, #224]	; (800463c <SystemInit+0xec>)
 800455c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004560:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004564:	4b36      	ldr	r3, [pc, #216]	; (8004640 <SystemInit+0xf0>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 030f 	and.w	r3, r3, #15
 800456c:	2b06      	cmp	r3, #6
 800456e:	d807      	bhi.n	8004580 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004570:	4b33      	ldr	r3, [pc, #204]	; (8004640 <SystemInit+0xf0>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f023 030f 	bic.w	r3, r3, #15
 8004578:	4a31      	ldr	r2, [pc, #196]	; (8004640 <SystemInit+0xf0>)
 800457a:	f043 0307 	orr.w	r3, r3, #7
 800457e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004580:	4b30      	ldr	r3, [pc, #192]	; (8004644 <SystemInit+0xf4>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a2f      	ldr	r2, [pc, #188]	; (8004644 <SystemInit+0xf4>)
 8004586:	f043 0301 	orr.w	r3, r3, #1
 800458a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800458c:	4b2d      	ldr	r3, [pc, #180]	; (8004644 <SystemInit+0xf4>)
 800458e:	2200      	movs	r2, #0
 8004590:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004592:	4b2c      	ldr	r3, [pc, #176]	; (8004644 <SystemInit+0xf4>)
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	492b      	ldr	r1, [pc, #172]	; (8004644 <SystemInit+0xf4>)
 8004598:	4b2b      	ldr	r3, [pc, #172]	; (8004648 <SystemInit+0xf8>)
 800459a:	4013      	ands	r3, r2
 800459c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800459e:	4b28      	ldr	r3, [pc, #160]	; (8004640 <SystemInit+0xf0>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0308 	and.w	r3, r3, #8
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d007      	beq.n	80045ba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80045aa:	4b25      	ldr	r3, [pc, #148]	; (8004640 <SystemInit+0xf0>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f023 030f 	bic.w	r3, r3, #15
 80045b2:	4a23      	ldr	r2, [pc, #140]	; (8004640 <SystemInit+0xf0>)
 80045b4:	f043 0307 	orr.w	r3, r3, #7
 80045b8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80045ba:	4b22      	ldr	r3, [pc, #136]	; (8004644 <SystemInit+0xf4>)
 80045bc:	2200      	movs	r2, #0
 80045be:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80045c0:	4b20      	ldr	r3, [pc, #128]	; (8004644 <SystemInit+0xf4>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80045c6:	4b1f      	ldr	r3, [pc, #124]	; (8004644 <SystemInit+0xf4>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80045cc:	4b1d      	ldr	r3, [pc, #116]	; (8004644 <SystemInit+0xf4>)
 80045ce:	4a1f      	ldr	r2, [pc, #124]	; (800464c <SystemInit+0xfc>)
 80045d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80045d2:	4b1c      	ldr	r3, [pc, #112]	; (8004644 <SystemInit+0xf4>)
 80045d4:	4a1e      	ldr	r2, [pc, #120]	; (8004650 <SystemInit+0x100>)
 80045d6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80045d8:	4b1a      	ldr	r3, [pc, #104]	; (8004644 <SystemInit+0xf4>)
 80045da:	4a1e      	ldr	r2, [pc, #120]	; (8004654 <SystemInit+0x104>)
 80045dc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80045de:	4b19      	ldr	r3, [pc, #100]	; (8004644 <SystemInit+0xf4>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80045e4:	4b17      	ldr	r3, [pc, #92]	; (8004644 <SystemInit+0xf4>)
 80045e6:	4a1b      	ldr	r2, [pc, #108]	; (8004654 <SystemInit+0x104>)
 80045e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80045ea:	4b16      	ldr	r3, [pc, #88]	; (8004644 <SystemInit+0xf4>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80045f0:	4b14      	ldr	r3, [pc, #80]	; (8004644 <SystemInit+0xf4>)
 80045f2:	4a18      	ldr	r2, [pc, #96]	; (8004654 <SystemInit+0x104>)
 80045f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80045f6:	4b13      	ldr	r3, [pc, #76]	; (8004644 <SystemInit+0xf4>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80045fc:	4b11      	ldr	r3, [pc, #68]	; (8004644 <SystemInit+0xf4>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a10      	ldr	r2, [pc, #64]	; (8004644 <SystemInit+0xf4>)
 8004602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004606:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004608:	4b0e      	ldr	r3, [pc, #56]	; (8004644 <SystemInit+0xf4>)
 800460a:	2200      	movs	r2, #0
 800460c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800460e:	4b12      	ldr	r3, [pc, #72]	; (8004658 <SystemInit+0x108>)
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	4b12      	ldr	r3, [pc, #72]	; (800465c <SystemInit+0x10c>)
 8004614:	4013      	ands	r3, r2
 8004616:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800461a:	d202      	bcs.n	8004622 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800461c:	4b10      	ldr	r3, [pc, #64]	; (8004660 <SystemInit+0x110>)
 800461e:	2201      	movs	r2, #1
 8004620:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004622:	4b10      	ldr	r3, [pc, #64]	; (8004664 <SystemInit+0x114>)
 8004624:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004628:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800462a:	4b04      	ldr	r3, [pc, #16]	; (800463c <SystemInit+0xec>)
 800462c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004630:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004632:	bf00      	nop
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	e000ed00 	.word	0xe000ed00
 8004640:	52002000 	.word	0x52002000
 8004644:	58024400 	.word	0x58024400
 8004648:	eaf6ed7f 	.word	0xeaf6ed7f
 800464c:	02020200 	.word	0x02020200
 8004650:	01ff0000 	.word	0x01ff0000
 8004654:	01010280 	.word	0x01010280
 8004658:	5c001000 	.word	0x5c001000
 800465c:	ffff0000 	.word	0xffff0000
 8004660:	51008108 	.word	0x51008108
 8004664:	52004000 	.word	0x52004000

08004668 <MX_TIM1_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b09a      	sub	sp, #104	; 0x68
 800466c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800466e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004672:	2200      	movs	r2, #0
 8004674:	601a      	str	r2, [r3, #0]
 8004676:	605a      	str	r2, [r3, #4]
 8004678:	609a      	str	r2, [r3, #8]
 800467a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800467c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004680:	2200      	movs	r2, #0
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	605a      	str	r2, [r3, #4]
 8004686:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004688:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	605a      	str	r2, [r3, #4]
 8004692:	609a      	str	r2, [r3, #8]
 8004694:	60da      	str	r2, [r3, #12]
 8004696:	611a      	str	r2, [r3, #16]
 8004698:	615a      	str	r2, [r3, #20]
 800469a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800469c:	1d3b      	adds	r3, r7, #4
 800469e:	222c      	movs	r2, #44	; 0x2c
 80046a0:	2100      	movs	r1, #0
 80046a2:	4618      	mov	r0, r3
 80046a4:	f00c f9ac 	bl	8010a00 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80046a8:	4b44      	ldr	r3, [pc, #272]	; (80047bc <MX_TIM1_Init+0x154>)
 80046aa:	4a45      	ldr	r2, [pc, #276]	; (80047c0 <MX_TIM1_Init+0x158>)
 80046ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 80046ae:	4b43      	ldr	r3, [pc, #268]	; (80047bc <MX_TIM1_Init+0x154>)
 80046b0:	22c7      	movs	r2, #199	; 0xc7
 80046b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046b4:	4b41      	ldr	r3, [pc, #260]	; (80047bc <MX_TIM1_Init+0x154>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 80046ba:	4b40      	ldr	r3, [pc, #256]	; (80047bc <MX_TIM1_Init+0x154>)
 80046bc:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80046c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046c2:	4b3e      	ldr	r3, [pc, #248]	; (80047bc <MX_TIM1_Init+0x154>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80046c8:	4b3c      	ldr	r3, [pc, #240]	; (80047bc <MX_TIM1_Init+0x154>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80046ce:	4b3b      	ldr	r3, [pc, #236]	; (80047bc <MX_TIM1_Init+0x154>)
 80046d0:	2280      	movs	r2, #128	; 0x80
 80046d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80046d4:	4839      	ldr	r0, [pc, #228]	; (80047bc <MX_TIM1_Init+0x154>)
 80046d6:	f007 f98a 	bl	800b9ee <HAL_TIM_Base_Init>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d001      	beq.n	80046e4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80046e0:	f7ff fb64 	bl	8003dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046e8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80046ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80046ee:	4619      	mov	r1, r3
 80046f0:	4832      	ldr	r0, [pc, #200]	; (80047bc <MX_TIM1_Init+0x154>)
 80046f2:	f007 fdef 	bl	800c2d4 <HAL_TIM_ConfigClockSource>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80046fc:	f7ff fb56 	bl	8003dac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004700:	482e      	ldr	r0, [pc, #184]	; (80047bc <MX_TIM1_Init+0x154>)
 8004702:	f007 fa43 	bl	800bb8c <HAL_TIM_PWM_Init>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800470c:	f7ff fb4e 	bl	8003dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004710:	2300      	movs	r3, #0
 8004712:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004714:	2300      	movs	r3, #0
 8004716:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004718:	2300      	movs	r3, #0
 800471a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800471c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004720:	4619      	mov	r1, r3
 8004722:	4826      	ldr	r0, [pc, #152]	; (80047bc <MX_TIM1_Init+0x154>)
 8004724:	f008 fb2a 	bl	800cd7c <HAL_TIMEx_MasterConfigSynchronization>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800472e:	f7ff fb3d 	bl	8003dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004732:	2360      	movs	r3, #96	; 0x60
 8004734:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8004736:	f240 1339 	movw	r3, #313	; 0x139
 800473a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800473c:	2300      	movs	r3, #0
 800473e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004740:	2300      	movs	r3, #0
 8004742:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004744:	2300      	movs	r3, #0
 8004746:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004748:	2300      	movs	r3, #0
 800474a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800474c:	2300      	movs	r3, #0
 800474e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004750:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004754:	2204      	movs	r2, #4
 8004756:	4619      	mov	r1, r3
 8004758:	4818      	ldr	r0, [pc, #96]	; (80047bc <MX_TIM1_Init+0x154>)
 800475a:	f007 fca7 	bl	800c0ac <HAL_TIM_PWM_ConfigChannel>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8004764:	f7ff fb22 	bl	8003dac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004768:	2300      	movs	r3, #0
 800476a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800476c:	2300      	movs	r3, #0
 800476e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004770:	2300      	movs	r3, #0
 8004772:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004774:	2300      	movs	r3, #0
 8004776:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004778:	2300      	movs	r3, #0
 800477a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800477c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004780:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004782:	2300      	movs	r3, #0
 8004784:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004786:	2300      	movs	r3, #0
 8004788:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800478a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800478e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004790:	2300      	movs	r3, #0
 8004792:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004794:	2300      	movs	r3, #0
 8004796:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004798:	1d3b      	adds	r3, r7, #4
 800479a:	4619      	mov	r1, r3
 800479c:	4807      	ldr	r0, [pc, #28]	; (80047bc <MX_TIM1_Init+0x154>)
 800479e:	f008 fb7b 	bl	800ce98 <HAL_TIMEx_ConfigBreakDeadTime>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80047a8:	f7ff fb00 	bl	8003dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80047ac:	4803      	ldr	r0, [pc, #12]	; (80047bc <MX_TIM1_Init+0x154>)
 80047ae:	f000 fc85 	bl	80050bc <HAL_TIM_MspPostInit>

}
 80047b2:	bf00      	nop
 80047b4:	3768      	adds	r7, #104	; 0x68
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	24000d6c 	.word	0x24000d6c
 80047c0:	40010000 	.word	0x40010000

080047c4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b08e      	sub	sp, #56	; 0x38
 80047c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80047ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047ce:	2200      	movs	r2, #0
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	605a      	str	r2, [r3, #4]
 80047d4:	609a      	str	r2, [r3, #8]
 80047d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047d8:	f107 031c 	add.w	r3, r7, #28
 80047dc:	2200      	movs	r2, #0
 80047de:	601a      	str	r2, [r3, #0]
 80047e0:	605a      	str	r2, [r3, #4]
 80047e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80047e4:	463b      	mov	r3, r7
 80047e6:	2200      	movs	r2, #0
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	605a      	str	r2, [r3, #4]
 80047ec:	609a      	str	r2, [r3, #8]
 80047ee:	60da      	str	r2, [r3, #12]
 80047f0:	611a      	str	r2, [r3, #16]
 80047f2:	615a      	str	r2, [r3, #20]
 80047f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80047f6:	4b2e      	ldr	r3, [pc, #184]	; (80048b0 <MX_TIM2_Init+0xec>)
 80047f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80047fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 80047fe:	4b2c      	ldr	r3, [pc, #176]	; (80048b0 <MX_TIM2_Init+0xec>)
 8004800:	22c7      	movs	r2, #199	; 0xc7
 8004802:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004804:	4b2a      	ldr	r3, [pc, #168]	; (80048b0 <MX_TIM2_Init+0xec>)
 8004806:	2200      	movs	r2, #0
 8004808:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 800480a:	4b29      	ldr	r3, [pc, #164]	; (80048b0 <MX_TIM2_Init+0xec>)
 800480c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8004810:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004812:	4b27      	ldr	r3, [pc, #156]	; (80048b0 <MX_TIM2_Init+0xec>)
 8004814:	2200      	movs	r2, #0
 8004816:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004818:	4b25      	ldr	r3, [pc, #148]	; (80048b0 <MX_TIM2_Init+0xec>)
 800481a:	2280      	movs	r2, #128	; 0x80
 800481c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800481e:	4824      	ldr	r0, [pc, #144]	; (80048b0 <MX_TIM2_Init+0xec>)
 8004820:	f007 f8e5 	bl	800b9ee <HAL_TIM_Base_Init>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800482a:	f7ff fabf 	bl	8003dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800482e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004832:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004834:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004838:	4619      	mov	r1, r3
 800483a:	481d      	ldr	r0, [pc, #116]	; (80048b0 <MX_TIM2_Init+0xec>)
 800483c:	f007 fd4a 	bl	800c2d4 <HAL_TIM_ConfigClockSource>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8004846:	f7ff fab1 	bl	8003dac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800484a:	4819      	ldr	r0, [pc, #100]	; (80048b0 <MX_TIM2_Init+0xec>)
 800484c:	f007 f99e 	bl	800bb8c <HAL_TIM_PWM_Init>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8004856:	f7ff faa9 	bl	8003dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800485a:	2300      	movs	r3, #0
 800485c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800485e:	2300      	movs	r3, #0
 8004860:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004862:	f107 031c 	add.w	r3, r7, #28
 8004866:	4619      	mov	r1, r3
 8004868:	4811      	ldr	r0, [pc, #68]	; (80048b0 <MX_TIM2_Init+0xec>)
 800486a:	f008 fa87 	bl	800cd7c <HAL_TIMEx_MasterConfigSynchronization>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d001      	beq.n	8004878 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004874:	f7ff fa9a 	bl	8003dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004878:	2360      	movs	r3, #96	; 0x60
 800487a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 800487c:	f240 1339 	movw	r3, #313	; 0x139
 8004880:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004882:	2300      	movs	r3, #0
 8004884:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004886:	2300      	movs	r3, #0
 8004888:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800488a:	463b      	mov	r3, r7
 800488c:	2208      	movs	r2, #8
 800488e:	4619      	mov	r1, r3
 8004890:	4807      	ldr	r0, [pc, #28]	; (80048b0 <MX_TIM2_Init+0xec>)
 8004892:	f007 fc0b 	bl	800c0ac <HAL_TIM_PWM_ConfigChannel>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800489c:	f7ff fa86 	bl	8003dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80048a0:	4803      	ldr	r0, [pc, #12]	; (80048b0 <MX_TIM2_Init+0xec>)
 80048a2:	f000 fc0b 	bl	80050bc <HAL_TIM_MspPostInit>

}
 80048a6:	bf00      	nop
 80048a8:	3738      	adds	r7, #56	; 0x38
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	24000db8 	.word	0x24000db8

080048b4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08e      	sub	sp, #56	; 0x38
 80048b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80048ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]
 80048c2:	605a      	str	r2, [r3, #4]
 80048c4:	609a      	str	r2, [r3, #8]
 80048c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048c8:	f107 031c 	add.w	r3, r7, #28
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	605a      	str	r2, [r3, #4]
 80048d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80048d4:	463b      	mov	r3, r7
 80048d6:	2200      	movs	r2, #0
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	605a      	str	r2, [r3, #4]
 80048dc:	609a      	str	r2, [r3, #8]
 80048de:	60da      	str	r2, [r3, #12]
 80048e0:	611a      	str	r2, [r3, #16]
 80048e2:	615a      	str	r2, [r3, #20]
 80048e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80048e6:	4b2d      	ldr	r3, [pc, #180]	; (800499c <MX_TIM3_Init+0xe8>)
 80048e8:	4a2d      	ldr	r2, [pc, #180]	; (80049a0 <MX_TIM3_Init+0xec>)
 80048ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 80048ec:	4b2b      	ldr	r3, [pc, #172]	; (800499c <MX_TIM3_Init+0xe8>)
 80048ee:	22c7      	movs	r2, #199	; 0xc7
 80048f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048f2:	4b2a      	ldr	r3, [pc, #168]	; (800499c <MX_TIM3_Init+0xe8>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2400-1;
 80048f8:	4b28      	ldr	r3, [pc, #160]	; (800499c <MX_TIM3_Init+0xe8>)
 80048fa:	f640 125f 	movw	r2, #2399	; 0x95f
 80048fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004900:	4b26      	ldr	r3, [pc, #152]	; (800499c <MX_TIM3_Init+0xe8>)
 8004902:	2200      	movs	r2, #0
 8004904:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004906:	4b25      	ldr	r3, [pc, #148]	; (800499c <MX_TIM3_Init+0xe8>)
 8004908:	2280      	movs	r2, #128	; 0x80
 800490a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800490c:	4823      	ldr	r0, [pc, #140]	; (800499c <MX_TIM3_Init+0xe8>)
 800490e:	f007 f86e 	bl	800b9ee <HAL_TIM_Base_Init>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004918:	f7ff fa48 	bl	8003dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800491c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004920:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004922:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004926:	4619      	mov	r1, r3
 8004928:	481c      	ldr	r0, [pc, #112]	; (800499c <MX_TIM3_Init+0xe8>)
 800492a:	f007 fcd3 	bl	800c2d4 <HAL_TIM_ConfigClockSource>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8004934:	f7ff fa3a 	bl	8003dac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004938:	4818      	ldr	r0, [pc, #96]	; (800499c <MX_TIM3_Init+0xe8>)
 800493a:	f007 f927 	bl	800bb8c <HAL_TIM_PWM_Init>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8004944:	f7ff fa32 	bl	8003dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004948:	2300      	movs	r3, #0
 800494a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800494c:	2300      	movs	r3, #0
 800494e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004950:	f107 031c 	add.w	r3, r7, #28
 8004954:	4619      	mov	r1, r3
 8004956:	4811      	ldr	r0, [pc, #68]	; (800499c <MX_TIM3_Init+0xe8>)
 8004958:	f008 fa10 	bl	800cd7c <HAL_TIMEx_MasterConfigSynchronization>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004962:	f7ff fa23 	bl	8003dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004966:	2360      	movs	r3, #96	; 0x60
 8004968:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800496a:	2300      	movs	r3, #0
 800496c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800496e:	2300      	movs	r3, #0
 8004970:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004972:	2300      	movs	r3, #0
 8004974:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004976:	463b      	mov	r3, r7
 8004978:	2200      	movs	r2, #0
 800497a:	4619      	mov	r1, r3
 800497c:	4807      	ldr	r0, [pc, #28]	; (800499c <MX_TIM3_Init+0xe8>)
 800497e:	f007 fb95 	bl	800c0ac <HAL_TIM_PWM_ConfigChannel>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8004988:	f7ff fa10 	bl	8003dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800498c:	4803      	ldr	r0, [pc, #12]	; (800499c <MX_TIM3_Init+0xe8>)
 800498e:	f000 fb95 	bl	80050bc <HAL_TIM_MspPostInit>

}
 8004992:	bf00      	nop
 8004994:	3738      	adds	r7, #56	; 0x38
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	24000c88 	.word	0x24000c88
 80049a0:	40000400 	.word	0x40000400

080049a4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b08e      	sub	sp, #56	; 0x38
 80049a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80049aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049ae:	2200      	movs	r2, #0
 80049b0:	601a      	str	r2, [r3, #0]
 80049b2:	605a      	str	r2, [r3, #4]
 80049b4:	609a      	str	r2, [r3, #8]
 80049b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049b8:	f107 031c 	add.w	r3, r7, #28
 80049bc:	2200      	movs	r2, #0
 80049be:	601a      	str	r2, [r3, #0]
 80049c0:	605a      	str	r2, [r3, #4]
 80049c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80049c4:	463b      	mov	r3, r7
 80049c6:	2200      	movs	r2, #0
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	605a      	str	r2, [r3, #4]
 80049cc:	609a      	str	r2, [r3, #8]
 80049ce:	60da      	str	r2, [r3, #12]
 80049d0:	611a      	str	r2, [r3, #16]
 80049d2:	615a      	str	r2, [r3, #20]
 80049d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80049d6:	4b2d      	ldr	r3, [pc, #180]	; (8004a8c <MX_TIM4_Init+0xe8>)
 80049d8:	4a2d      	ldr	r2, [pc, #180]	; (8004a90 <MX_TIM4_Init+0xec>)
 80049da:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 80049dc:	4b2b      	ldr	r3, [pc, #172]	; (8004a8c <MX_TIM4_Init+0xe8>)
 80049de:	22ef      	movs	r2, #239	; 0xef
 80049e0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049e2:	4b2a      	ldr	r3, [pc, #168]	; (8004a8c <MX_TIM4_Init+0xe8>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 80049e8:	4b28      	ldr	r3, [pc, #160]	; (8004a8c <MX_TIM4_Init+0xe8>)
 80049ea:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80049ee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049f0:	4b26      	ldr	r3, [pc, #152]	; (8004a8c <MX_TIM4_Init+0xe8>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80049f6:	4b25      	ldr	r3, [pc, #148]	; (8004a8c <MX_TIM4_Init+0xe8>)
 80049f8:	2280      	movs	r2, #128	; 0x80
 80049fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80049fc:	4823      	ldr	r0, [pc, #140]	; (8004a8c <MX_TIM4_Init+0xe8>)
 80049fe:	f006 fff6 	bl	800b9ee <HAL_TIM_Base_Init>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8004a08:	f7ff f9d0 	bl	8003dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a10:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004a12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a16:	4619      	mov	r1, r3
 8004a18:	481c      	ldr	r0, [pc, #112]	; (8004a8c <MX_TIM4_Init+0xe8>)
 8004a1a:	f007 fc5b 	bl	800c2d4 <HAL_TIM_ConfigClockSource>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8004a24:	f7ff f9c2 	bl	8003dac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004a28:	4818      	ldr	r0, [pc, #96]	; (8004a8c <MX_TIM4_Init+0xe8>)
 8004a2a:	f007 f8af 	bl	800bb8c <HAL_TIM_PWM_Init>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8004a34:	f7ff f9ba 	bl	8003dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004a40:	f107 031c 	add.w	r3, r7, #28
 8004a44:	4619      	mov	r1, r3
 8004a46:	4811      	ldr	r0, [pc, #68]	; (8004a8c <MX_TIM4_Init+0xe8>)
 8004a48:	f008 f998 	bl	800cd7c <HAL_TIMEx_MasterConfigSynchronization>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8004a52:	f7ff f9ab 	bl	8003dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a56:	2360      	movs	r3, #96	; 0x60
 8004a58:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a62:	2300      	movs	r3, #0
 8004a64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004a66:	463b      	mov	r3, r7
 8004a68:	2208      	movs	r2, #8
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	4807      	ldr	r0, [pc, #28]	; (8004a8c <MX_TIM4_Init+0xe8>)
 8004a6e:	f007 fb1d 	bl	800c0ac <HAL_TIM_PWM_ConfigChannel>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8004a78:	f7ff f998 	bl	8003dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004a7c:	4803      	ldr	r0, [pc, #12]	; (8004a8c <MX_TIM4_Init+0xe8>)
 8004a7e:	f000 fb1d 	bl	80050bc <HAL_TIM_MspPostInit>

}
 8004a82:	bf00      	nop
 8004a84:	3738      	adds	r7, #56	; 0x38
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	24000ba4 	.word	0x24000ba4
 8004a90:	40000800 	.word	0x40000800

08004a94 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b088      	sub	sp, #32
 8004a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a9a:	f107 0310 	add.w	r3, r7, #16
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	605a      	str	r2, [r3, #4]
 8004aa4:	609a      	str	r2, [r3, #8]
 8004aa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004aa8:	1d3b      	adds	r3, r7, #4
 8004aaa:	2200      	movs	r2, #0
 8004aac:	601a      	str	r2, [r3, #0]
 8004aae:	605a      	str	r2, [r3, #4]
 8004ab0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004ab2:	4b1d      	ldr	r3, [pc, #116]	; (8004b28 <MX_TIM5_Init+0x94>)
 8004ab4:	4a1d      	ldr	r2, [pc, #116]	; (8004b2c <MX_TIM5_Init+0x98>)
 8004ab6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 8004ab8:	4b1b      	ldr	r3, [pc, #108]	; (8004b28 <MX_TIM5_Init+0x94>)
 8004aba:	22c7      	movs	r2, #199	; 0xc7
 8004abc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004abe:	4b1a      	ldr	r3, [pc, #104]	; (8004b28 <MX_TIM5_Init+0x94>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 8004ac4:	4b18      	ldr	r3, [pc, #96]	; (8004b28 <MX_TIM5_Init+0x94>)
 8004ac6:	f642 62df 	movw	r2, #11999	; 0x2edf
 8004aca:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004acc:	4b16      	ldr	r3, [pc, #88]	; (8004b28 <MX_TIM5_Init+0x94>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004ad2:	4b15      	ldr	r3, [pc, #84]	; (8004b28 <MX_TIM5_Init+0x94>)
 8004ad4:	2280      	movs	r2, #128	; 0x80
 8004ad6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004ad8:	4813      	ldr	r0, [pc, #76]	; (8004b28 <MX_TIM5_Init+0x94>)
 8004ada:	f006 ff88 	bl	800b9ee <HAL_TIM_Base_Init>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8004ae4:	f7ff f962 	bl	8003dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ae8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004aec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004aee:	f107 0310 	add.w	r3, r7, #16
 8004af2:	4619      	mov	r1, r3
 8004af4:	480c      	ldr	r0, [pc, #48]	; (8004b28 <MX_TIM5_Init+0x94>)
 8004af6:	f007 fbed 	bl	800c2d4 <HAL_TIM_ConfigClockSource>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8004b00:	f7ff f954 	bl	8003dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b04:	2300      	movs	r3, #0
 8004b06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004b0c:	1d3b      	adds	r3, r7, #4
 8004b0e:	4619      	mov	r1, r3
 8004b10:	4805      	ldr	r0, [pc, #20]	; (8004b28 <MX_TIM5_Init+0x94>)
 8004b12:	f008 f933 	bl	800cd7c <HAL_TIMEx_MasterConfigSynchronization>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8004b1c:	f7ff f946 	bl	8003dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004b20:	bf00      	nop
 8004b22:	3720      	adds	r7, #32
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	24000c3c 	.word	0x24000c3c
 8004b2c:	40000c00 	.word	0x40000c00

08004b30 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b36:	1d3b      	adds	r3, r7, #4
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]
 8004b3c:	605a      	str	r2, [r3, #4]
 8004b3e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004b40:	4b14      	ldr	r3, [pc, #80]	; (8004b94 <MX_TIM6_Init+0x64>)
 8004b42:	4a15      	ldr	r2, [pc, #84]	; (8004b98 <MX_TIM6_Init+0x68>)
 8004b44:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 8004b46:	4b13      	ldr	r3, [pc, #76]	; (8004b94 <MX_TIM6_Init+0x64>)
 8004b48:	22c7      	movs	r2, #199	; 0xc7
 8004b4a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b4c:	4b11      	ldr	r3, [pc, #68]	; (8004b94 <MX_TIM6_Init+0x64>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6000-1;
 8004b52:	4b10      	ldr	r3, [pc, #64]	; (8004b94 <MX_TIM6_Init+0x64>)
 8004b54:	f241 726f 	movw	r2, #5999	; 0x176f
 8004b58:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004b5a:	4b0e      	ldr	r3, [pc, #56]	; (8004b94 <MX_TIM6_Init+0x64>)
 8004b5c:	2280      	movs	r2, #128	; 0x80
 8004b5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004b60:	480c      	ldr	r0, [pc, #48]	; (8004b94 <MX_TIM6_Init+0x64>)
 8004b62:	f006 ff44 	bl	800b9ee <HAL_TIM_Base_Init>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d001      	beq.n	8004b70 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8004b6c:	f7ff f91e 	bl	8003dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b70:	2300      	movs	r3, #0
 8004b72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b74:	2300      	movs	r3, #0
 8004b76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004b78:	1d3b      	adds	r3, r7, #4
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4805      	ldr	r0, [pc, #20]	; (8004b94 <MX_TIM6_Init+0x64>)
 8004b7e:	f008 f8fd 	bl	800cd7c <HAL_TIMEx_MasterConfigSynchronization>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d001      	beq.n	8004b8c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8004b88:	f7ff f910 	bl	8003dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004b8c:	bf00      	nop
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	24000d20 	.word	0x24000d20
 8004b98:	40001000 	.word	0x40001000

08004b9c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ba2:	1d3b      	adds	r3, r7, #4
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	601a      	str	r2, [r3, #0]
 8004ba8:	605a      	str	r2, [r3, #4]
 8004baa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004bac:	4b14      	ldr	r3, [pc, #80]	; (8004c00 <MX_TIM7_Init+0x64>)
 8004bae:	4a15      	ldr	r2, [pc, #84]	; (8004c04 <MX_TIM7_Init+0x68>)
 8004bb0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 8004bb2:	4b13      	ldr	r3, [pc, #76]	; (8004c00 <MX_TIM7_Init+0x64>)
 8004bb4:	22c7      	movs	r2, #199	; 0xc7
 8004bb6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bb8:	4b11      	ldr	r3, [pc, #68]	; (8004c00 <MX_TIM7_Init+0x64>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1200-1;
 8004bbe:	4b10      	ldr	r3, [pc, #64]	; (8004c00 <MX_TIM7_Init+0x64>)
 8004bc0:	f240 42af 	movw	r2, #1199	; 0x4af
 8004bc4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004bc6:	4b0e      	ldr	r3, [pc, #56]	; (8004c00 <MX_TIM7_Init+0x64>)
 8004bc8:	2280      	movs	r2, #128	; 0x80
 8004bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004bcc:	480c      	ldr	r0, [pc, #48]	; (8004c00 <MX_TIM7_Init+0x64>)
 8004bce:	f006 ff0e 	bl	800b9ee <HAL_TIM_Base_Init>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004bd8:	f7ff f8e8 	bl	8003dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004be0:	2300      	movs	r3, #0
 8004be2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004be4:	1d3b      	adds	r3, r7, #4
 8004be6:	4619      	mov	r1, r3
 8004be8:	4805      	ldr	r0, [pc, #20]	; (8004c00 <MX_TIM7_Init+0x64>)
 8004bea:	f008 f8c7 	bl	800cd7c <HAL_TIMEx_MasterConfigSynchronization>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8004bf4:	f7ff f8da 	bl	8003dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004bf8:	bf00      	nop
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	24000e9c 	.word	0x24000e9c
 8004c04:	40001400 	.word	0x40001400

08004c08 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c0e:	463b      	mov	r3, r7
 8004c10:	2200      	movs	r2, #0
 8004c12:	601a      	str	r2, [r3, #0]
 8004c14:	605a      	str	r2, [r3, #4]
 8004c16:	609a      	str	r2, [r3, #8]
 8004c18:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8004c1a:	4b16      	ldr	r3, [pc, #88]	; (8004c74 <MX_TIM12_Init+0x6c>)
 8004c1c:	4a16      	ldr	r2, [pc, #88]	; (8004c78 <MX_TIM12_Init+0x70>)
 8004c1e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 8004c20:	4b14      	ldr	r3, [pc, #80]	; (8004c74 <MX_TIM12_Init+0x6c>)
 8004c22:	22c7      	movs	r2, #199	; 0xc7
 8004c24:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c26:	4b13      	ldr	r3, [pc, #76]	; (8004c74 <MX_TIM12_Init+0x6c>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 600-1;
 8004c2c:	4b11      	ldr	r3, [pc, #68]	; (8004c74 <MX_TIM12_Init+0x6c>)
 8004c2e:	f240 2257 	movw	r2, #599	; 0x257
 8004c32:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c34:	4b0f      	ldr	r3, [pc, #60]	; (8004c74 <MX_TIM12_Init+0x6c>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004c3a:	4b0e      	ldr	r3, [pc, #56]	; (8004c74 <MX_TIM12_Init+0x6c>)
 8004c3c:	2280      	movs	r2, #128	; 0x80
 8004c3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8004c40:	480c      	ldr	r0, [pc, #48]	; (8004c74 <MX_TIM12_Init+0x6c>)
 8004c42:	f006 fed4 	bl	800b9ee <HAL_TIM_Base_Init>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d001      	beq.n	8004c50 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8004c4c:	f7ff f8ae 	bl	8003dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c54:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8004c56:	463b      	mov	r3, r7
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4806      	ldr	r0, [pc, #24]	; (8004c74 <MX_TIM12_Init+0x6c>)
 8004c5c:	f007 fb3a 	bl	800c2d4 <HAL_TIM_ConfigClockSource>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8004c66:	f7ff f8a1 	bl	8003dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8004c6a:	bf00      	nop
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	24000e50 	.word	0x24000e50
 8004c78:	40001800 	.word	0x40001800

08004c7c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004c80:	4b0e      	ldr	r3, [pc, #56]	; (8004cbc <MX_TIM13_Init+0x40>)
 8004c82:	4a0f      	ldr	r2, [pc, #60]	; (8004cc0 <MX_TIM13_Init+0x44>)
 8004c84:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 200-1;
 8004c86:	4b0d      	ldr	r3, [pc, #52]	; (8004cbc <MX_TIM13_Init+0x40>)
 8004c88:	22c7      	movs	r2, #199	; 0xc7
 8004c8a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c8c:	4b0b      	ldr	r3, [pc, #44]	; (8004cbc <MX_TIM13_Init+0x40>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 600-1;
 8004c92:	4b0a      	ldr	r3, [pc, #40]	; (8004cbc <MX_TIM13_Init+0x40>)
 8004c94:	f240 2257 	movw	r2, #599	; 0x257
 8004c98:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c9a:	4b08      	ldr	r3, [pc, #32]	; (8004cbc <MX_TIM13_Init+0x40>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004ca0:	4b06      	ldr	r3, [pc, #24]	; (8004cbc <MX_TIM13_Init+0x40>)
 8004ca2:	2280      	movs	r2, #128	; 0x80
 8004ca4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004ca6:	4805      	ldr	r0, [pc, #20]	; (8004cbc <MX_TIM13_Init+0x40>)
 8004ca8:	f006 fea1 	bl	800b9ee <HAL_TIM_Base_Init>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8004cb2:	f7ff f87b 	bl	8003dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004cb6:	bf00      	nop
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	24000cd4 	.word	0x24000cd4
 8004cc0:	40001c00 	.word	0x40001c00

08004cc4 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004cc8:	4b0e      	ldr	r3, [pc, #56]	; (8004d04 <MX_TIM14_Init+0x40>)
 8004cca:	4a0f      	ldr	r2, [pc, #60]	; (8004d08 <MX_TIM14_Init+0x44>)
 8004ccc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 200-1;
 8004cce:	4b0d      	ldr	r3, [pc, #52]	; (8004d04 <MX_TIM14_Init+0x40>)
 8004cd0:	22c7      	movs	r2, #199	; 0xc7
 8004cd2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cd4:	4b0b      	ldr	r3, [pc, #44]	; (8004d04 <MX_TIM14_Init+0x40>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2400-1;
 8004cda:	4b0a      	ldr	r3, [pc, #40]	; (8004d04 <MX_TIM14_Init+0x40>)
 8004cdc:	f640 125f 	movw	r2, #2399	; 0x95f
 8004ce0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ce2:	4b08      	ldr	r3, [pc, #32]	; (8004d04 <MX_TIM14_Init+0x40>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004ce8:	4b06      	ldr	r3, [pc, #24]	; (8004d04 <MX_TIM14_Init+0x40>)
 8004cea:	2280      	movs	r2, #128	; 0x80
 8004cec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004cee:	4805      	ldr	r0, [pc, #20]	; (8004d04 <MX_TIM14_Init+0x40>)
 8004cf0:	f006 fe7d 	bl	800b9ee <HAL_TIM_Base_Init>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8004cfa:	f7ff f857 	bl	8003dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8004cfe:	bf00      	nop
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	24000e04 	.word	0x24000e04
 8004d08:	40002000 	.word	0x40002000

08004d0c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b09a      	sub	sp, #104	; 0x68
 8004d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d12:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004d16:	2200      	movs	r2, #0
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	605a      	str	r2, [r3, #4]
 8004d1c:	609a      	str	r2, [r3, #8]
 8004d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d20:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004d24:	2200      	movs	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	605a      	str	r2, [r3, #4]
 8004d2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004d2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004d30:	2200      	movs	r2, #0
 8004d32:	601a      	str	r2, [r3, #0]
 8004d34:	605a      	str	r2, [r3, #4]
 8004d36:	609a      	str	r2, [r3, #8]
 8004d38:	60da      	str	r2, [r3, #12]
 8004d3a:	611a      	str	r2, [r3, #16]
 8004d3c:	615a      	str	r2, [r3, #20]
 8004d3e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004d40:	1d3b      	adds	r3, r7, #4
 8004d42:	222c      	movs	r2, #44	; 0x2c
 8004d44:	2100      	movs	r1, #0
 8004d46:	4618      	mov	r0, r3
 8004d48:	f00b fe5a 	bl	8010a00 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8004d4c:	4b3f      	ldr	r3, [pc, #252]	; (8004e4c <MX_TIM15_Init+0x140>)
 8004d4e:	4a40      	ldr	r2, [pc, #256]	; (8004e50 <MX_TIM15_Init+0x144>)
 8004d50:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8004d52:	4b3e      	ldr	r3, [pc, #248]	; (8004e4c <MX_TIM15_Init+0x140>)
 8004d54:	22ef      	movs	r2, #239	; 0xef
 8004d56:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d58:	4b3c      	ldr	r3, [pc, #240]	; (8004e4c <MX_TIM15_Init+0x140>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 8004d5e:	4b3b      	ldr	r3, [pc, #236]	; (8004e4c <MX_TIM15_Init+0x140>)
 8004d60:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004d64:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d66:	4b39      	ldr	r3, [pc, #228]	; (8004e4c <MX_TIM15_Init+0x140>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8004d6c:	4b37      	ldr	r3, [pc, #220]	; (8004e4c <MX_TIM15_Init+0x140>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004d72:	4b36      	ldr	r3, [pc, #216]	; (8004e4c <MX_TIM15_Init+0x140>)
 8004d74:	2280      	movs	r2, #128	; 0x80
 8004d76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8004d78:	4834      	ldr	r0, [pc, #208]	; (8004e4c <MX_TIM15_Init+0x140>)
 8004d7a:	f006 fe38 	bl	800b9ee <HAL_TIM_Base_Init>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8004d84:	f7ff f812 	bl	8003dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d8c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004d8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004d92:	4619      	mov	r1, r3
 8004d94:	482d      	ldr	r0, [pc, #180]	; (8004e4c <MX_TIM15_Init+0x140>)
 8004d96:	f007 fa9d 	bl	800c2d4 <HAL_TIM_ConfigClockSource>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8004da0:	f7ff f804 	bl	8003dac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8004da4:	4829      	ldr	r0, [pc, #164]	; (8004e4c <MX_TIM15_Init+0x140>)
 8004da6:	f006 fef1 	bl	800bb8c <HAL_TIM_PWM_Init>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8004db0:	f7fe fffc 	bl	8003dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004db4:	2300      	movs	r3, #0
 8004db6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004db8:	2300      	movs	r3, #0
 8004dba:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004dbc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4822      	ldr	r0, [pc, #136]	; (8004e4c <MX_TIM15_Init+0x140>)
 8004dc4:	f007 ffda 	bl	800cd7c <HAL_TIMEx_MasterConfigSynchronization>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8004dce:	f7fe ffed 	bl	8003dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004dd2:	2360      	movs	r3, #96	; 0x60
 8004dd4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8004dd6:	f240 1339 	movw	r3, #313	; 0x139
 8004dda:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004de0:	2300      	movs	r3, #0
 8004de2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004de4:	2300      	movs	r3, #0
 8004de6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004de8:	2300      	movs	r3, #0
 8004dea:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004dec:	2300      	movs	r3, #0
 8004dee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004df0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004df4:	2204      	movs	r2, #4
 8004df6:	4619      	mov	r1, r3
 8004df8:	4814      	ldr	r0, [pc, #80]	; (8004e4c <MX_TIM15_Init+0x140>)
 8004dfa:	f007 f957 	bl	800c0ac <HAL_TIM_PWM_ConfigChannel>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8004e04:	f7fe ffd2 	bl	8003dac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004e10:	2300      	movs	r3, #0
 8004e12:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004e14:	2300      	movs	r3, #0
 8004e16:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004e1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e20:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004e22:	2300      	movs	r3, #0
 8004e24:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004e26:	2300      	movs	r3, #0
 8004e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8004e2a:	1d3b      	adds	r3, r7, #4
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4807      	ldr	r0, [pc, #28]	; (8004e4c <MX_TIM15_Init+0x140>)
 8004e30:	f008 f832 	bl	800ce98 <HAL_TIMEx_ConfigBreakDeadTime>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8004e3a:	f7fe ffb7 	bl	8003dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8004e3e:	4803      	ldr	r0, [pc, #12]	; (8004e4c <MX_TIM15_Init+0x140>)
 8004e40:	f000 f93c 	bl	80050bc <HAL_TIM_MspPostInit>

}
 8004e44:	bf00      	nop
 8004e46:	3768      	adds	r7, #104	; 0x68
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	24000bf0 	.word	0x24000bf0
 8004e50:	40014000 	.word	0x40014000

08004e54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b08e      	sub	sp, #56	; 0x38
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a8b      	ldr	r2, [pc, #556]	; (8005090 <HAL_TIM_Base_MspInit+0x23c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d10f      	bne.n	8004e86 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004e66:	4b8b      	ldr	r3, [pc, #556]	; (8005094 <HAL_TIM_Base_MspInit+0x240>)
 8004e68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e6c:	4a89      	ldr	r2, [pc, #548]	; (8005094 <HAL_TIM_Base_MspInit+0x240>)
 8004e6e:	f043 0301 	orr.w	r3, r3, #1
 8004e72:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004e76:	4b87      	ldr	r3, [pc, #540]	; (8005094 <HAL_TIM_Base_MspInit+0x240>)
 8004e78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	637b      	str	r3, [r7, #52]	; 0x34
 8004e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8004e84:	e100      	b.n	8005088 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM2)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e8e:	d10f      	bne.n	8004eb0 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004e90:	4b80      	ldr	r3, [pc, #512]	; (8005094 <HAL_TIM_Base_MspInit+0x240>)
 8004e92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e96:	4a7f      	ldr	r2, [pc, #508]	; (8005094 <HAL_TIM_Base_MspInit+0x240>)
 8004e98:	f043 0301 	orr.w	r3, r3, #1
 8004e9c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004ea0:	4b7c      	ldr	r3, [pc, #496]	; (8005094 <HAL_TIM_Base_MspInit+0x240>)
 8004ea2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	633b      	str	r3, [r7, #48]	; 0x30
 8004eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004eae:	e0eb      	b.n	8005088 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM3)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a78      	ldr	r2, [pc, #480]	; (8005098 <HAL_TIM_Base_MspInit+0x244>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d10f      	bne.n	8004eda <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004eba:	4b76      	ldr	r3, [pc, #472]	; (8005094 <HAL_TIM_Base_MspInit+0x240>)
 8004ebc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ec0:	4a74      	ldr	r2, [pc, #464]	; (8005094 <HAL_TIM_Base_MspInit+0x240>)
 8004ec2:	f043 0302 	orr.w	r3, r3, #2
 8004ec6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004eca:	4b72      	ldr	r3, [pc, #456]	; (8005094 <HAL_TIM_Base_MspInit+0x240>)
 8004ecc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004ed8:	e0d6      	b.n	8005088 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM4)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a6f      	ldr	r2, [pc, #444]	; (800509c <HAL_TIM_Base_MspInit+0x248>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d10f      	bne.n	8004f04 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004ee4:	4b6b      	ldr	r3, [pc, #428]	; (8005094 <HAL_TIM_Base_MspInit+0x240>)
 8004ee6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004eea:	4a6a      	ldr	r2, [pc, #424]	; (8005094 <HAL_TIM_Base_MspInit+0x240>)
 8004eec:	f043 0304 	orr.w	r3, r3, #4
 8004ef0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004ef4:	4b67      	ldr	r3, [pc, #412]	; (8005094 <HAL_TIM_Base_MspInit+0x240>)
 8004ef6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004efa:	f003 0304 	and.w	r3, r3, #4
 8004efe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004f02:	e0c1      	b.n	8005088 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM5)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a65      	ldr	r2, [pc, #404]	; (80050a0 <HAL_TIM_Base_MspInit+0x24c>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d117      	bne.n	8004f3e <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004f0e:	4b61      	ldr	r3, [pc, #388]	; (8005094 <HAL_TIM_Base_MspInit+0x240>)
 8004f10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f14:	4a5f      	ldr	r2, [pc, #380]	; (8005094 <HAL_TIM_Base_MspInit+0x240>)
 8004f16:	f043 0308 	orr.w	r3, r3, #8
 8004f1a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004f1e:	4b5d      	ldr	r3, [pc, #372]	; (8005094 <HAL_TIM_Base_MspInit+0x240>)
 8004f20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f24:	f003 0308 	and.w	r3, r3, #8
 8004f28:	627b      	str	r3, [r7, #36]	; 0x24
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	2100      	movs	r1, #0
 8004f30:	2032      	movs	r0, #50	; 0x32
 8004f32:	f000 fe8a 	bl	8005c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004f36:	2032      	movs	r0, #50	; 0x32
 8004f38:	f000 fea1 	bl	8005c7e <HAL_NVIC_EnableIRQ>
}
 8004f3c:	e0a4      	b.n	8005088 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM6)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a58      	ldr	r2, [pc, #352]	; (80050a4 <HAL_TIM_Base_MspInit+0x250>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d117      	bne.n	8004f78 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004f48:	4b52      	ldr	r3, [pc, #328]	; (8005094 <HAL_TIM_Base_MspInit+0x240>)
 8004f4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f4e:	4a51      	ldr	r2, [pc, #324]	; (8005094 <HAL_TIM_Base_MspInit+0x240>)
 8004f50:	f043 0310 	orr.w	r3, r3, #16
 8004f54:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004f58:	4b4e      	ldr	r3, [pc, #312]	; (8005094 <HAL_TIM_Base_MspInit+0x240>)
 8004f5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f5e:	f003 0310 	and.w	r3, r3, #16
 8004f62:	623b      	str	r3, [r7, #32]
 8004f64:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004f66:	2200      	movs	r2, #0
 8004f68:	2100      	movs	r1, #0
 8004f6a:	2036      	movs	r0, #54	; 0x36
 8004f6c:	f000 fe6d 	bl	8005c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004f70:	2036      	movs	r0, #54	; 0x36
 8004f72:	f000 fe84 	bl	8005c7e <HAL_NVIC_EnableIRQ>
}
 8004f76:	e087      	b.n	8005088 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM7)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a4a      	ldr	r2, [pc, #296]	; (80050a8 <HAL_TIM_Base_MspInit+0x254>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d117      	bne.n	8004fb2 <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004f82:	4b44      	ldr	r3, [pc, #272]	; (8005094 <HAL_TIM_Base_MspInit+0x240>)
 8004f84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f88:	4a42      	ldr	r2, [pc, #264]	; (8005094 <HAL_TIM_Base_MspInit+0x240>)
 8004f8a:	f043 0320 	orr.w	r3, r3, #32
 8004f8e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004f92:	4b40      	ldr	r3, [pc, #256]	; (8005094 <HAL_TIM_Base_MspInit+0x240>)
 8004f94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f98:	f003 0320 	and.w	r3, r3, #32
 8004f9c:	61fb      	str	r3, [r7, #28]
 8004f9e:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	2037      	movs	r0, #55	; 0x37
 8004fa6:	f000 fe50 	bl	8005c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004faa:	2037      	movs	r0, #55	; 0x37
 8004fac:	f000 fe67 	bl	8005c7e <HAL_NVIC_EnableIRQ>
}
 8004fb0:	e06a      	b.n	8005088 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM12)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a3d      	ldr	r2, [pc, #244]	; (80050ac <HAL_TIM_Base_MspInit+0x258>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d117      	bne.n	8004fec <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004fbc:	4b35      	ldr	r3, [pc, #212]	; (8005094 <HAL_TIM_Base_MspInit+0x240>)
 8004fbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004fc2:	4a34      	ldr	r2, [pc, #208]	; (8005094 <HAL_TIM_Base_MspInit+0x240>)
 8004fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fc8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004fcc:	4b31      	ldr	r3, [pc, #196]	; (8005094 <HAL_TIM_Base_MspInit+0x240>)
 8004fce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd6:	61bb      	str	r3, [r7, #24]
 8004fd8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8004fda:	2200      	movs	r2, #0
 8004fdc:	2100      	movs	r1, #0
 8004fde:	202b      	movs	r0, #43	; 0x2b
 8004fe0:	f000 fe33 	bl	8005c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8004fe4:	202b      	movs	r0, #43	; 0x2b
 8004fe6:	f000 fe4a 	bl	8005c7e <HAL_NVIC_EnableIRQ>
}
 8004fea:	e04d      	b.n	8005088 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM13)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a2f      	ldr	r2, [pc, #188]	; (80050b0 <HAL_TIM_Base_MspInit+0x25c>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d117      	bne.n	8005026 <HAL_TIM_Base_MspInit+0x1d2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004ff6:	4b27      	ldr	r3, [pc, #156]	; (8005094 <HAL_TIM_Base_MspInit+0x240>)
 8004ff8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ffc:	4a25      	ldr	r2, [pc, #148]	; (8005094 <HAL_TIM_Base_MspInit+0x240>)
 8004ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005002:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005006:	4b23      	ldr	r3, [pc, #140]	; (8005094 <HAL_TIM_Base_MspInit+0x240>)
 8005008:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800500c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005010:	617b      	str	r3, [r7, #20]
 8005012:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005014:	2200      	movs	r2, #0
 8005016:	2100      	movs	r1, #0
 8005018:	202c      	movs	r0, #44	; 0x2c
 800501a:	f000 fe16 	bl	8005c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800501e:	202c      	movs	r0, #44	; 0x2c
 8005020:	f000 fe2d 	bl	8005c7e <HAL_NVIC_EnableIRQ>
}
 8005024:	e030      	b.n	8005088 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM14)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a22      	ldr	r2, [pc, #136]	; (80050b4 <HAL_TIM_Base_MspInit+0x260>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d117      	bne.n	8005060 <HAL_TIM_Base_MspInit+0x20c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8005030:	4b18      	ldr	r3, [pc, #96]	; (8005094 <HAL_TIM_Base_MspInit+0x240>)
 8005032:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005036:	4a17      	ldr	r2, [pc, #92]	; (8005094 <HAL_TIM_Base_MspInit+0x240>)
 8005038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800503c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005040:	4b14      	ldr	r3, [pc, #80]	; (8005094 <HAL_TIM_Base_MspInit+0x240>)
 8005042:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800504a:	613b      	str	r3, [r7, #16]
 800504c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800504e:	2200      	movs	r2, #0
 8005050:	2100      	movs	r1, #0
 8005052:	202d      	movs	r0, #45	; 0x2d
 8005054:	f000 fdf9 	bl	8005c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8005058:	202d      	movs	r0, #45	; 0x2d
 800505a:	f000 fe10 	bl	8005c7e <HAL_NVIC_EnableIRQ>
}
 800505e:	e013      	b.n	8005088 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM15)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a14      	ldr	r2, [pc, #80]	; (80050b8 <HAL_TIM_Base_MspInit+0x264>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d10e      	bne.n	8005088 <HAL_TIM_Base_MspInit+0x234>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800506a:	4b0a      	ldr	r3, [pc, #40]	; (8005094 <HAL_TIM_Base_MspInit+0x240>)
 800506c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005070:	4a08      	ldr	r2, [pc, #32]	; (8005094 <HAL_TIM_Base_MspInit+0x240>)
 8005072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005076:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800507a:	4b06      	ldr	r3, [pc, #24]	; (8005094 <HAL_TIM_Base_MspInit+0x240>)
 800507c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005084:	60fb      	str	r3, [r7, #12]
 8005086:	68fb      	ldr	r3, [r7, #12]
}
 8005088:	bf00      	nop
 800508a:	3738      	adds	r7, #56	; 0x38
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	40010000 	.word	0x40010000
 8005094:	58024400 	.word	0x58024400
 8005098:	40000400 	.word	0x40000400
 800509c:	40000800 	.word	0x40000800
 80050a0:	40000c00 	.word	0x40000c00
 80050a4:	40001000 	.word	0x40001000
 80050a8:	40001400 	.word	0x40001400
 80050ac:	40001800 	.word	0x40001800
 80050b0:	40001c00 	.word	0x40001c00
 80050b4:	40002000 	.word	0x40002000
 80050b8:	40014000 	.word	0x40014000

080050bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b08c      	sub	sp, #48	; 0x30
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050c4:	f107 031c 	add.w	r3, r7, #28
 80050c8:	2200      	movs	r2, #0
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	605a      	str	r2, [r3, #4]
 80050ce:	609a      	str	r2, [r3, #8]
 80050d0:	60da      	str	r2, [r3, #12]
 80050d2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a5e      	ldr	r2, [pc, #376]	; (8005254 <HAL_TIM_MspPostInit+0x198>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d120      	bne.n	8005120 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80050de:	4b5e      	ldr	r3, [pc, #376]	; (8005258 <HAL_TIM_MspPostInit+0x19c>)
 80050e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050e4:	4a5c      	ldr	r2, [pc, #368]	; (8005258 <HAL_TIM_MspPostInit+0x19c>)
 80050e6:	f043 0310 	orr.w	r3, r3, #16
 80050ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80050ee:	4b5a      	ldr	r3, [pc, #360]	; (8005258 <HAL_TIM_MspPostInit+0x19c>)
 80050f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050f4:	f003 0310 	and.w	r3, r3, #16
 80050f8:	61bb      	str	r3, [r7, #24]
 80050fa:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 80050fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005102:	2302      	movs	r3, #2
 8005104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005106:	2300      	movs	r3, #0
 8005108:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800510a:	2300      	movs	r3, #0
 800510c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800510e:	2301      	movs	r3, #1
 8005110:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8005112:	f107 031c 	add.w	r3, r7, #28
 8005116:	4619      	mov	r1, r3
 8005118:	4850      	ldr	r0, [pc, #320]	; (800525c <HAL_TIM_MspPostInit+0x1a0>)
 800511a:	f003 fe0f 	bl	8008d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800511e:	e094      	b.n	800524a <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM2)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005128:	d120      	bne.n	800516c <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800512a:	4b4b      	ldr	r3, [pc, #300]	; (8005258 <HAL_TIM_MspPostInit+0x19c>)
 800512c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005130:	4a49      	ldr	r2, [pc, #292]	; (8005258 <HAL_TIM_MspPostInit+0x19c>)
 8005132:	f043 0302 	orr.w	r3, r3, #2
 8005136:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800513a:	4b47      	ldr	r3, [pc, #284]	; (8005258 <HAL_TIM_MspPostInit+0x19c>)
 800513c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	617b      	str	r3, [r7, #20]
 8005146:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 8005148:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800514c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800514e:	2302      	movs	r3, #2
 8005150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005152:	2300      	movs	r3, #0
 8005154:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005156:	2300      	movs	r3, #0
 8005158:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800515a:	2301      	movs	r3, #1
 800515c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 800515e:	f107 031c 	add.w	r3, r7, #28
 8005162:	4619      	mov	r1, r3
 8005164:	483e      	ldr	r0, [pc, #248]	; (8005260 <HAL_TIM_MspPostInit+0x1a4>)
 8005166:	f003 fde9 	bl	8008d3c <HAL_GPIO_Init>
}
 800516a:	e06e      	b.n	800524a <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM3)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a3c      	ldr	r2, [pc, #240]	; (8005264 <HAL_TIM_MspPostInit+0x1a8>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d11f      	bne.n	80051b6 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005176:	4b38      	ldr	r3, [pc, #224]	; (8005258 <HAL_TIM_MspPostInit+0x19c>)
 8005178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800517c:	4a36      	ldr	r2, [pc, #216]	; (8005258 <HAL_TIM_MspPostInit+0x19c>)
 800517e:	f043 0301 	orr.w	r3, r3, #1
 8005182:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005186:	4b34      	ldr	r3, [pc, #208]	; (8005258 <HAL_TIM_MspPostInit+0x19c>)
 8005188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	613b      	str	r3, [r7, #16]
 8005192:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8005194:	2340      	movs	r3, #64	; 0x40
 8005196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005198:	2302      	movs	r3, #2
 800519a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800519c:	2300      	movs	r3, #0
 800519e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051a0:	2300      	movs	r3, #0
 80051a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80051a4:	2302      	movs	r3, #2
 80051a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 80051a8:	f107 031c 	add.w	r3, r7, #28
 80051ac:	4619      	mov	r1, r3
 80051ae:	482e      	ldr	r0, [pc, #184]	; (8005268 <HAL_TIM_MspPostInit+0x1ac>)
 80051b0:	f003 fdc4 	bl	8008d3c <HAL_GPIO_Init>
}
 80051b4:	e049      	b.n	800524a <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM4)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a2c      	ldr	r2, [pc, #176]	; (800526c <HAL_TIM_MspPostInit+0x1b0>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d120      	bne.n	8005202 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051c0:	4b25      	ldr	r3, [pc, #148]	; (8005258 <HAL_TIM_MspPostInit+0x19c>)
 80051c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051c6:	4a24      	ldr	r2, [pc, #144]	; (8005258 <HAL_TIM_MspPostInit+0x19c>)
 80051c8:	f043 0302 	orr.w	r3, r3, #2
 80051cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80051d0:	4b21      	ldr	r3, [pc, #132]	; (8005258 <HAL_TIM_MspPostInit+0x19c>)
 80051d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 80051de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051e4:	2302      	movs	r3, #2
 80051e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051e8:	2300      	movs	r3, #0
 80051ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051ec:	2300      	movs	r3, #0
 80051ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80051f0:	2302      	movs	r3, #2
 80051f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 80051f4:	f107 031c 	add.w	r3, r7, #28
 80051f8:	4619      	mov	r1, r3
 80051fa:	4819      	ldr	r0, [pc, #100]	; (8005260 <HAL_TIM_MspPostInit+0x1a4>)
 80051fc:	f003 fd9e 	bl	8008d3c <HAL_GPIO_Init>
}
 8005200:	e023      	b.n	800524a <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM15)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a1a      	ldr	r2, [pc, #104]	; (8005270 <HAL_TIM_MspPostInit+0x1b4>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d11e      	bne.n	800524a <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800520c:	4b12      	ldr	r3, [pc, #72]	; (8005258 <HAL_TIM_MspPostInit+0x19c>)
 800520e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005212:	4a11      	ldr	r2, [pc, #68]	; (8005258 <HAL_TIM_MspPostInit+0x19c>)
 8005214:	f043 0310 	orr.w	r3, r3, #16
 8005218:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800521c:	4b0e      	ldr	r3, [pc, #56]	; (8005258 <HAL_TIM_MspPostInit+0x19c>)
 800521e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005222:	f003 0310 	and.w	r3, r3, #16
 8005226:	60bb      	str	r3, [r7, #8]
 8005228:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 800522a:	2340      	movs	r3, #64	; 0x40
 800522c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800522e:	2302      	movs	r3, #2
 8005230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005232:	2300      	movs	r3, #0
 8005234:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005236:	2300      	movs	r3, #0
 8005238:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800523a:	2304      	movs	r3, #4
 800523c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 800523e:	f107 031c 	add.w	r3, r7, #28
 8005242:	4619      	mov	r1, r3
 8005244:	4805      	ldr	r0, [pc, #20]	; (800525c <HAL_TIM_MspPostInit+0x1a0>)
 8005246:	f003 fd79 	bl	8008d3c <HAL_GPIO_Init>
}
 800524a:	bf00      	nop
 800524c:	3730      	adds	r7, #48	; 0x30
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	40010000 	.word	0x40010000
 8005258:	58024400 	.word	0x58024400
 800525c:	58021000 	.word	0x58021000
 8005260:	58020400 	.word	0x58020400
 8005264:	40000400 	.word	0x40000400
 8005268:	58020000 	.word	0x58020000
 800526c:	40000800 	.word	0x40000800
 8005270:	40014000 	.word	0x40014000

08005274 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005278:	4b25      	ldr	r3, [pc, #148]	; (8005310 <MX_UART4_Init+0x9c>)
 800527a:	4a26      	ldr	r2, [pc, #152]	; (8005314 <MX_UART4_Init+0xa0>)
 800527c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 800527e:	4b24      	ldr	r3, [pc, #144]	; (8005310 <MX_UART4_Init+0x9c>)
 8005280:	4a25      	ldr	r2, [pc, #148]	; (8005318 <MX_UART4_Init+0xa4>)
 8005282:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005284:	4b22      	ldr	r3, [pc, #136]	; (8005310 <MX_UART4_Init+0x9c>)
 8005286:	2200      	movs	r2, #0
 8005288:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800528a:	4b21      	ldr	r3, [pc, #132]	; (8005310 <MX_UART4_Init+0x9c>)
 800528c:	2200      	movs	r2, #0
 800528e:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005290:	4b1f      	ldr	r3, [pc, #124]	; (8005310 <MX_UART4_Init+0x9c>)
 8005292:	2200      	movs	r2, #0
 8005294:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005296:	4b1e      	ldr	r3, [pc, #120]	; (8005310 <MX_UART4_Init+0x9c>)
 8005298:	220c      	movs	r2, #12
 800529a:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800529c:	4b1c      	ldr	r3, [pc, #112]	; (8005310 <MX_UART4_Init+0x9c>)
 800529e:	2200      	movs	r2, #0
 80052a0:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80052a2:	4b1b      	ldr	r3, [pc, #108]	; (8005310 <MX_UART4_Init+0x9c>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80052a8:	4b19      	ldr	r3, [pc, #100]	; (8005310 <MX_UART4_Init+0x9c>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80052ae:	4b18      	ldr	r3, [pc, #96]	; (8005310 <MX_UART4_Init+0x9c>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80052b4:	4b16      	ldr	r3, [pc, #88]	; (8005310 <MX_UART4_Init+0x9c>)
 80052b6:	2208      	movs	r2, #8
 80052b8:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80052ba:	4b15      	ldr	r3, [pc, #84]	; (8005310 <MX_UART4_Init+0x9c>)
 80052bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80052c0:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80052c2:	4813      	ldr	r0, [pc, #76]	; (8005310 <MX_UART4_Init+0x9c>)
 80052c4:	f007 fe84 	bl	800cfd0 <HAL_UART_Init>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 80052ce:	f7fe fd6d 	bl	8003dac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 80052d2:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 80052d6:	480e      	ldr	r0, [pc, #56]	; (8005310 <MX_UART4_Init+0x9c>)
 80052d8:	f009 ff0b 	bl	800f0f2 <HAL_UARTEx_SetTxFifoThreshold>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <MX_UART4_Init+0x72>
  {
    Error_Handler();
 80052e2:	f7fe fd63 	bl	8003dac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 80052e6:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 80052ea:	4809      	ldr	r0, [pc, #36]	; (8005310 <MX_UART4_Init+0x9c>)
 80052ec:	f009 ff3f 	bl	800f16e <HAL_UARTEx_SetRxFifoThreshold>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <MX_UART4_Init+0x86>
  {
    Error_Handler();
 80052f6:	f7fe fd59 	bl	8003dac <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 80052fa:	4805      	ldr	r0, [pc, #20]	; (8005310 <MX_UART4_Init+0x9c>)
 80052fc:	f009 fe85 	bl	800f00a <HAL_UARTEx_EnableFifoMode>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <MX_UART4_Init+0x96>
  {
    Error_Handler();
 8005306:	f7fe fd51 	bl	8003dac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800530a:	bf00      	nop
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	240011e8 	.word	0x240011e8
 8005314:	40004c00 	.word	0x40004c00
 8005318:	001e8480 	.word	0x001e8480

0800531c <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8005320:	4b23      	ldr	r3, [pc, #140]	; (80053b0 <MX_UART7_Init+0x94>)
 8005322:	4a24      	ldr	r2, [pc, #144]	; (80053b4 <MX_UART7_Init+0x98>)
 8005324:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8005326:	4b22      	ldr	r3, [pc, #136]	; (80053b0 <MX_UART7_Init+0x94>)
 8005328:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800532c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800532e:	4b20      	ldr	r3, [pc, #128]	; (80053b0 <MX_UART7_Init+0x94>)
 8005330:	2200      	movs	r2, #0
 8005332:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8005334:	4b1e      	ldr	r3, [pc, #120]	; (80053b0 <MX_UART7_Init+0x94>)
 8005336:	2200      	movs	r2, #0
 8005338:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800533a:	4b1d      	ldr	r3, [pc, #116]	; (80053b0 <MX_UART7_Init+0x94>)
 800533c:	2200      	movs	r2, #0
 800533e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8005340:	4b1b      	ldr	r3, [pc, #108]	; (80053b0 <MX_UART7_Init+0x94>)
 8005342:	220c      	movs	r2, #12
 8005344:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005346:	4b1a      	ldr	r3, [pc, #104]	; (80053b0 <MX_UART7_Init+0x94>)
 8005348:	2200      	movs	r2, #0
 800534a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800534c:	4b18      	ldr	r3, [pc, #96]	; (80053b0 <MX_UART7_Init+0x94>)
 800534e:	2200      	movs	r2, #0
 8005350:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005352:	4b17      	ldr	r3, [pc, #92]	; (80053b0 <MX_UART7_Init+0x94>)
 8005354:	2200      	movs	r2, #0
 8005356:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005358:	4b15      	ldr	r3, [pc, #84]	; (80053b0 <MX_UART7_Init+0x94>)
 800535a:	2200      	movs	r2, #0
 800535c:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800535e:	4b14      	ldr	r3, [pc, #80]	; (80053b0 <MX_UART7_Init+0x94>)
 8005360:	2200      	movs	r2, #0
 8005362:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8005364:	4812      	ldr	r0, [pc, #72]	; (80053b0 <MX_UART7_Init+0x94>)
 8005366:	f007 fe33 	bl	800cfd0 <HAL_UART_Init>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d001      	beq.n	8005374 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8005370:	f7fe fd1c 	bl	8003dac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8005374:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8005378:	480d      	ldr	r0, [pc, #52]	; (80053b0 <MX_UART7_Init+0x94>)
 800537a:	f009 feba 	bl	800f0f2 <HAL_UARTEx_SetTxFifoThreshold>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d001      	beq.n	8005388 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 8005384:	f7fe fd12 	bl	8003dac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8005388:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 800538c:	4808      	ldr	r0, [pc, #32]	; (80053b0 <MX_UART7_Init+0x94>)
 800538e:	f009 feee 	bl	800f16e <HAL_UARTEx_SetRxFifoThreshold>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d001      	beq.n	800539c <MX_UART7_Init+0x80>
  {
    Error_Handler();
 8005398:	f7fe fd08 	bl	8003dac <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 800539c:	4804      	ldr	r0, [pc, #16]	; (80053b0 <MX_UART7_Init+0x94>)
 800539e:	f009 fe34 	bl	800f00a <HAL_UARTEx_EnableFifoMode>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <MX_UART7_Init+0x90>
  {
    Error_Handler();
 80053a8:	f7fe fd00 	bl	8003dac <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80053ac:	bf00      	nop
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	24000f60 	.word	0x24000f60
 80053b4:	40007800 	.word	0x40007800

080053b8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80053bc:	4b22      	ldr	r3, [pc, #136]	; (8005448 <MX_USART3_UART_Init+0x90>)
 80053be:	4a23      	ldr	r2, [pc, #140]	; (800544c <MX_USART3_UART_Init+0x94>)
 80053c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80053c2:	4b21      	ldr	r3, [pc, #132]	; (8005448 <MX_USART3_UART_Init+0x90>)
 80053c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80053c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80053ca:	4b1f      	ldr	r3, [pc, #124]	; (8005448 <MX_USART3_UART_Init+0x90>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80053d0:	4b1d      	ldr	r3, [pc, #116]	; (8005448 <MX_USART3_UART_Init+0x90>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80053d6:	4b1c      	ldr	r3, [pc, #112]	; (8005448 <MX_USART3_UART_Init+0x90>)
 80053d8:	2200      	movs	r2, #0
 80053da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80053dc:	4b1a      	ldr	r3, [pc, #104]	; (8005448 <MX_USART3_UART_Init+0x90>)
 80053de:	220c      	movs	r2, #12
 80053e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80053e2:	4b19      	ldr	r3, [pc, #100]	; (8005448 <MX_USART3_UART_Init+0x90>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80053e8:	4b17      	ldr	r3, [pc, #92]	; (8005448 <MX_USART3_UART_Init+0x90>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80053ee:	4b16      	ldr	r3, [pc, #88]	; (8005448 <MX_USART3_UART_Init+0x90>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80053f4:	4b14      	ldr	r3, [pc, #80]	; (8005448 <MX_USART3_UART_Init+0x90>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80053fa:	4b13      	ldr	r3, [pc, #76]	; (8005448 <MX_USART3_UART_Init+0x90>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005400:	4811      	ldr	r0, [pc, #68]	; (8005448 <MX_USART3_UART_Init+0x90>)
 8005402:	f007 fde5 	bl	800cfd0 <HAL_UART_Init>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800540c:	f7fe fcce 	bl	8003dac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005410:	2100      	movs	r1, #0
 8005412:	480d      	ldr	r0, [pc, #52]	; (8005448 <MX_USART3_UART_Init+0x90>)
 8005414:	f009 fe6d 	bl	800f0f2 <HAL_UARTEx_SetTxFifoThreshold>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800541e:	f7fe fcc5 	bl	8003dac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005422:	2100      	movs	r1, #0
 8005424:	4808      	ldr	r0, [pc, #32]	; (8005448 <MX_USART3_UART_Init+0x90>)
 8005426:	f009 fea2 	bl	800f16e <HAL_UARTEx_SetRxFifoThreshold>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d001      	beq.n	8005434 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8005430:	f7fe fcbc 	bl	8003dac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005434:	4804      	ldr	r0, [pc, #16]	; (8005448 <MX_USART3_UART_Init+0x90>)
 8005436:	f009 fe23 	bl	800f080 <HAL_UARTEx_DisableFifoMode>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8005440:	f7fe fcb4 	bl	8003dac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005444:	bf00      	nop
 8005446:	bd80      	pop	{r7, pc}
 8005448:	24001068 	.word	0x24001068
 800544c:	40004800 	.word	0x40004800

08005450 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b0bc      	sub	sp, #240	; 0xf0
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005458:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800545c:	2200      	movs	r2, #0
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	605a      	str	r2, [r3, #4]
 8005462:	609a      	str	r2, [r3, #8]
 8005464:	60da      	str	r2, [r3, #12]
 8005466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005468:	f107 0320 	add.w	r3, r7, #32
 800546c:	22bc      	movs	r2, #188	; 0xbc
 800546e:	2100      	movs	r1, #0
 8005470:	4618      	mov	r0, r3
 8005472:	f00b fac5 	bl	8010a00 <memset>
  if(uartHandle->Instance==UART4)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4aa1      	ldr	r2, [pc, #644]	; (8005700 <HAL_UART_MspInit+0x2b0>)
 800547c:	4293      	cmp	r3, r2
 800547e:	f040 80b7 	bne.w	80055f0 <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005482:	2302      	movs	r3, #2
 8005484:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005486:	2300      	movs	r3, #0
 8005488:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800548c:	f107 0320 	add.w	r3, r7, #32
 8005490:	4618      	mov	r0, r3
 8005492:	f004 fe29 	bl	800a0e8 <HAL_RCCEx_PeriphCLKConfig>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d001      	beq.n	80054a0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800549c:	f7fe fc86 	bl	8003dac <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80054a0:	4b98      	ldr	r3, [pc, #608]	; (8005704 <HAL_UART_MspInit+0x2b4>)
 80054a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80054a6:	4a97      	ldr	r2, [pc, #604]	; (8005704 <HAL_UART_MspInit+0x2b4>)
 80054a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80054b0:	4b94      	ldr	r3, [pc, #592]	; (8005704 <HAL_UART_MspInit+0x2b4>)
 80054b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80054b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054ba:	61fb      	str	r3, [r7, #28]
 80054bc:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80054be:	4b91      	ldr	r3, [pc, #580]	; (8005704 <HAL_UART_MspInit+0x2b4>)
 80054c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054c4:	4a8f      	ldr	r2, [pc, #572]	; (8005704 <HAL_UART_MspInit+0x2b4>)
 80054c6:	f043 0308 	orr.w	r3, r3, #8
 80054ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80054ce:	4b8d      	ldr	r3, [pc, #564]	; (8005704 <HAL_UART_MspInit+0x2b4>)
 80054d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054d4:	f003 0308 	and.w	r3, r3, #8
 80054d8:	61bb      	str	r3, [r7, #24]
 80054da:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80054dc:	2303      	movs	r3, #3
 80054de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054e2:	2302      	movs	r3, #2
 80054e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054e8:	2300      	movs	r3, #0
 80054ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054ee:	2300      	movs	r3, #0
 80054f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80054f4:	2308      	movs	r3, #8
 80054f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80054fa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80054fe:	4619      	mov	r1, r3
 8005500:	4881      	ldr	r0, [pc, #516]	; (8005708 <HAL_UART_MspInit+0x2b8>)
 8005502:	f003 fc1b 	bl	8008d3c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 8005506:	4b81      	ldr	r3, [pc, #516]	; (800570c <HAL_UART_MspInit+0x2bc>)
 8005508:	4a81      	ldr	r2, [pc, #516]	; (8005710 <HAL_UART_MspInit+0x2c0>)
 800550a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 800550c:	4b7f      	ldr	r3, [pc, #508]	; (800570c <HAL_UART_MspInit+0x2bc>)
 800550e:	223f      	movs	r2, #63	; 0x3f
 8005510:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005512:	4b7e      	ldr	r3, [pc, #504]	; (800570c <HAL_UART_MspInit+0x2bc>)
 8005514:	2200      	movs	r2, #0
 8005516:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005518:	4b7c      	ldr	r3, [pc, #496]	; (800570c <HAL_UART_MspInit+0x2bc>)
 800551a:	2200      	movs	r2, #0
 800551c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800551e:	4b7b      	ldr	r3, [pc, #492]	; (800570c <HAL_UART_MspInit+0x2bc>)
 8005520:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005524:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005526:	4b79      	ldr	r3, [pc, #484]	; (800570c <HAL_UART_MspInit+0x2bc>)
 8005528:	2200      	movs	r2, #0
 800552a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800552c:	4b77      	ldr	r3, [pc, #476]	; (800570c <HAL_UART_MspInit+0x2bc>)
 800552e:	2200      	movs	r2, #0
 8005530:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8005532:	4b76      	ldr	r3, [pc, #472]	; (800570c <HAL_UART_MspInit+0x2bc>)
 8005534:	2200      	movs	r2, #0
 8005536:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005538:	4b74      	ldr	r3, [pc, #464]	; (800570c <HAL_UART_MspInit+0x2bc>)
 800553a:	2200      	movs	r2, #0
 800553c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800553e:	4b73      	ldr	r3, [pc, #460]	; (800570c <HAL_UART_MspInit+0x2bc>)
 8005540:	2204      	movs	r2, #4
 8005542:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005544:	4b71      	ldr	r3, [pc, #452]	; (800570c <HAL_UART_MspInit+0x2bc>)
 8005546:	2203      	movs	r2, #3
 8005548:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800554a:	4b70      	ldr	r3, [pc, #448]	; (800570c <HAL_UART_MspInit+0x2bc>)
 800554c:	2200      	movs	r2, #0
 800554e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005550:	4b6e      	ldr	r3, [pc, #440]	; (800570c <HAL_UART_MspInit+0x2bc>)
 8005552:	2200      	movs	r2, #0
 8005554:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8005556:	486d      	ldr	r0, [pc, #436]	; (800570c <HAL_UART_MspInit+0x2bc>)
 8005558:	f000 fdb6 	bl	80060c8 <HAL_DMA_Init>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8005562:	f7fe fc23 	bl	8003dac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a68      	ldr	r2, [pc, #416]	; (800570c <HAL_UART_MspInit+0x2bc>)
 800556a:	67da      	str	r2, [r3, #124]	; 0x7c
 800556c:	4a67      	ldr	r2, [pc, #412]	; (800570c <HAL_UART_MspInit+0x2bc>)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8005572:	4b68      	ldr	r3, [pc, #416]	; (8005714 <HAL_UART_MspInit+0x2c4>)
 8005574:	4a68      	ldr	r2, [pc, #416]	; (8005718 <HAL_UART_MspInit+0x2c8>)
 8005576:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8005578:	4b66      	ldr	r3, [pc, #408]	; (8005714 <HAL_UART_MspInit+0x2c4>)
 800557a:	2240      	movs	r2, #64	; 0x40
 800557c:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800557e:	4b65      	ldr	r3, [pc, #404]	; (8005714 <HAL_UART_MspInit+0x2c4>)
 8005580:	2240      	movs	r2, #64	; 0x40
 8005582:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005584:	4b63      	ldr	r3, [pc, #396]	; (8005714 <HAL_UART_MspInit+0x2c4>)
 8005586:	2200      	movs	r2, #0
 8005588:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800558a:	4b62      	ldr	r3, [pc, #392]	; (8005714 <HAL_UART_MspInit+0x2c4>)
 800558c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005590:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005592:	4b60      	ldr	r3, [pc, #384]	; (8005714 <HAL_UART_MspInit+0x2c4>)
 8005594:	2200      	movs	r2, #0
 8005596:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005598:	4b5e      	ldr	r3, [pc, #376]	; (8005714 <HAL_UART_MspInit+0x2c4>)
 800559a:	2200      	movs	r2, #0
 800559c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800559e:	4b5d      	ldr	r3, [pc, #372]	; (8005714 <HAL_UART_MspInit+0x2c4>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80055a4:	4b5b      	ldr	r3, [pc, #364]	; (8005714 <HAL_UART_MspInit+0x2c4>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80055aa:	4b5a      	ldr	r3, [pc, #360]	; (8005714 <HAL_UART_MspInit+0x2c4>)
 80055ac:	2204      	movs	r2, #4
 80055ae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80055b0:	4b58      	ldr	r3, [pc, #352]	; (8005714 <HAL_UART_MspInit+0x2c4>)
 80055b2:	2203      	movs	r2, #3
 80055b4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80055b6:	4b57      	ldr	r3, [pc, #348]	; (8005714 <HAL_UART_MspInit+0x2c4>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80055bc:	4b55      	ldr	r3, [pc, #340]	; (8005714 <HAL_UART_MspInit+0x2c4>)
 80055be:	2200      	movs	r2, #0
 80055c0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80055c2:	4854      	ldr	r0, [pc, #336]	; (8005714 <HAL_UART_MspInit+0x2c4>)
 80055c4:	f000 fd80 	bl	80060c8 <HAL_DMA_Init>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 80055ce:	f7fe fbed 	bl	8003dac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a4f      	ldr	r2, [pc, #316]	; (8005714 <HAL_UART_MspInit+0x2c4>)
 80055d6:	679a      	str	r2, [r3, #120]	; 0x78
 80055d8:	4a4e      	ldr	r2, [pc, #312]	; (8005714 <HAL_UART_MspInit+0x2c4>)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80055de:	2200      	movs	r2, #0
 80055e0:	2100      	movs	r1, #0
 80055e2:	2034      	movs	r0, #52	; 0x34
 80055e4:	f000 fb31 	bl	8005c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80055e8:	2034      	movs	r0, #52	; 0x34
 80055ea:	f000 fb48 	bl	8005c7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80055ee:	e153      	b.n	8005898 <HAL_UART_MspInit+0x448>
  else if(uartHandle->Instance==UART7)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a49      	ldr	r2, [pc, #292]	; (800571c <HAL_UART_MspInit+0x2cc>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	f040 8098 	bne.w	800572c <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80055fc:	2302      	movs	r3, #2
 80055fe:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005600:	2300      	movs	r3, #0
 8005602:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005606:	f107 0320 	add.w	r3, r7, #32
 800560a:	4618      	mov	r0, r3
 800560c:	f004 fd6c 	bl	800a0e8 <HAL_RCCEx_PeriphCLKConfig>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 8005616:	f7fe fbc9 	bl	8003dac <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800561a:	4b3a      	ldr	r3, [pc, #232]	; (8005704 <HAL_UART_MspInit+0x2b4>)
 800561c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005620:	4a38      	ldr	r2, [pc, #224]	; (8005704 <HAL_UART_MspInit+0x2b4>)
 8005622:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005626:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800562a:	4b36      	ldr	r3, [pc, #216]	; (8005704 <HAL_UART_MspInit+0x2b4>)
 800562c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005630:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005634:	617b      	str	r3, [r7, #20]
 8005636:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005638:	4b32      	ldr	r3, [pc, #200]	; (8005704 <HAL_UART_MspInit+0x2b4>)
 800563a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800563e:	4a31      	ldr	r2, [pc, #196]	; (8005704 <HAL_UART_MspInit+0x2b4>)
 8005640:	f043 0310 	orr.w	r3, r3, #16
 8005644:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005648:	4b2e      	ldr	r3, [pc, #184]	; (8005704 <HAL_UART_MspInit+0x2b4>)
 800564a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800564e:	f003 0310 	and.w	r3, r3, #16
 8005652:	613b      	str	r3, [r7, #16]
 8005654:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8005656:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800565a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800565e:	2302      	movs	r3, #2
 8005660:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005664:	2300      	movs	r3, #0
 8005666:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800566a:	2300      	movs	r3, #0
 800566c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8005670:	2307      	movs	r3, #7
 8005672:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005676:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800567a:	4619      	mov	r1, r3
 800567c:	4828      	ldr	r0, [pc, #160]	; (8005720 <HAL_UART_MspInit+0x2d0>)
 800567e:	f003 fb5d 	bl	8008d3c <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 8005682:	4b28      	ldr	r3, [pc, #160]	; (8005724 <HAL_UART_MspInit+0x2d4>)
 8005684:	4a28      	ldr	r2, [pc, #160]	; (8005728 <HAL_UART_MspInit+0x2d8>)
 8005686:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8005688:	4b26      	ldr	r3, [pc, #152]	; (8005724 <HAL_UART_MspInit+0x2d4>)
 800568a:	2250      	movs	r2, #80	; 0x50
 800568c:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800568e:	4b25      	ldr	r3, [pc, #148]	; (8005724 <HAL_UART_MspInit+0x2d4>)
 8005690:	2240      	movs	r2, #64	; 0x40
 8005692:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005694:	4b23      	ldr	r3, [pc, #140]	; (8005724 <HAL_UART_MspInit+0x2d4>)
 8005696:	2200      	movs	r2, #0
 8005698:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 800569a:	4b22      	ldr	r3, [pc, #136]	; (8005724 <HAL_UART_MspInit+0x2d4>)
 800569c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056a0:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80056a2:	4b20      	ldr	r3, [pc, #128]	; (8005724 <HAL_UART_MspInit+0x2d4>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80056a8:	4b1e      	ldr	r3, [pc, #120]	; (8005724 <HAL_UART_MspInit+0x2d4>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 80056ae:	4b1d      	ldr	r3, [pc, #116]	; (8005724 <HAL_UART_MspInit+0x2d4>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 80056b4:	4b1b      	ldr	r3, [pc, #108]	; (8005724 <HAL_UART_MspInit+0x2d4>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80056ba:	4b1a      	ldr	r3, [pc, #104]	; (8005724 <HAL_UART_MspInit+0x2d4>)
 80056bc:	2204      	movs	r2, #4
 80056be:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80056c0:	4b18      	ldr	r3, [pc, #96]	; (8005724 <HAL_UART_MspInit+0x2d4>)
 80056c2:	2203      	movs	r2, #3
 80056c4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80056c6:	4b17      	ldr	r3, [pc, #92]	; (8005724 <HAL_UART_MspInit+0x2d4>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80056cc:	4b15      	ldr	r3, [pc, #84]	; (8005724 <HAL_UART_MspInit+0x2d4>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 80056d2:	4814      	ldr	r0, [pc, #80]	; (8005724 <HAL_UART_MspInit+0x2d4>)
 80056d4:	f000 fcf8 	bl	80060c8 <HAL_DMA_Init>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <HAL_UART_MspInit+0x292>
      Error_Handler();
 80056de:	f7fe fb65 	bl	8003dac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a0f      	ldr	r2, [pc, #60]	; (8005724 <HAL_UART_MspInit+0x2d4>)
 80056e6:	679a      	str	r2, [r3, #120]	; 0x78
 80056e8:	4a0e      	ldr	r2, [pc, #56]	; (8005724 <HAL_UART_MspInit+0x2d4>)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 80056ee:	2200      	movs	r2, #0
 80056f0:	2100      	movs	r1, #0
 80056f2:	2052      	movs	r0, #82	; 0x52
 80056f4:	f000 faa9 	bl	8005c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80056f8:	2052      	movs	r0, #82	; 0x52
 80056fa:	f000 fac0 	bl	8005c7e <HAL_NVIC_EnableIRQ>
}
 80056fe:	e0cb      	b.n	8005898 <HAL_UART_MspInit+0x448>
 8005700:	40004c00 	.word	0x40004c00
 8005704:	58024400 	.word	0x58024400
 8005708:	58020c00 	.word	0x58020c00
 800570c:	24000ee8 	.word	0x24000ee8
 8005710:	40020058 	.word	0x40020058
 8005714:	24001278 	.word	0x24001278
 8005718:	40020070 	.word	0x40020070
 800571c:	40007800 	.word	0x40007800
 8005720:	58021000 	.word	0x58021000
 8005724:	24001170 	.word	0x24001170
 8005728:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART3)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a5b      	ldr	r2, [pc, #364]	; (80058a0 <HAL_UART_MspInit+0x450>)
 8005732:	4293      	cmp	r3, r2
 8005734:	f040 80b0 	bne.w	8005898 <HAL_UART_MspInit+0x448>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005738:	2302      	movs	r3, #2
 800573a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800573c:	2300      	movs	r3, #0
 800573e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005742:	f107 0320 	add.w	r3, r7, #32
 8005746:	4618      	mov	r0, r3
 8005748:	f004 fcce 	bl	800a0e8 <HAL_RCCEx_PeriphCLKConfig>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <HAL_UART_MspInit+0x306>
      Error_Handler();
 8005752:	f7fe fb2b 	bl	8003dac <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005756:	4b53      	ldr	r3, [pc, #332]	; (80058a4 <HAL_UART_MspInit+0x454>)
 8005758:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800575c:	4a51      	ldr	r2, [pc, #324]	; (80058a4 <HAL_UART_MspInit+0x454>)
 800575e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005762:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005766:	4b4f      	ldr	r3, [pc, #316]	; (80058a4 <HAL_UART_MspInit+0x454>)
 8005768:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800576c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005770:	60fb      	str	r3, [r7, #12]
 8005772:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005774:	4b4b      	ldr	r3, [pc, #300]	; (80058a4 <HAL_UART_MspInit+0x454>)
 8005776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800577a:	4a4a      	ldr	r2, [pc, #296]	; (80058a4 <HAL_UART_MspInit+0x454>)
 800577c:	f043 0308 	orr.w	r3, r3, #8
 8005780:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005784:	4b47      	ldr	r3, [pc, #284]	; (80058a4 <HAL_UART_MspInit+0x454>)
 8005786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800578a:	f003 0308 	and.w	r3, r3, #8
 800578e:	60bb      	str	r3, [r7, #8]
 8005790:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005792:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005796:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800579a:	2302      	movs	r3, #2
 800579c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057a0:	2300      	movs	r3, #0
 80057a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057a6:	2300      	movs	r3, #0
 80057a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80057ac:	2307      	movs	r3, #7
 80057ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80057b2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80057b6:	4619      	mov	r1, r3
 80057b8:	483b      	ldr	r0, [pc, #236]	; (80058a8 <HAL_UART_MspInit+0x458>)
 80057ba:	f003 fabf 	bl	8008d3c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80057be:	4b3b      	ldr	r3, [pc, #236]	; (80058ac <HAL_UART_MspInit+0x45c>)
 80057c0:	4a3b      	ldr	r2, [pc, #236]	; (80058b0 <HAL_UART_MspInit+0x460>)
 80057c2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80057c4:	4b39      	ldr	r3, [pc, #228]	; (80058ac <HAL_UART_MspInit+0x45c>)
 80057c6:	222d      	movs	r2, #45	; 0x2d
 80057c8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80057ca:	4b38      	ldr	r3, [pc, #224]	; (80058ac <HAL_UART_MspInit+0x45c>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80057d0:	4b36      	ldr	r3, [pc, #216]	; (80058ac <HAL_UART_MspInit+0x45c>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80057d6:	4b35      	ldr	r3, [pc, #212]	; (80058ac <HAL_UART_MspInit+0x45c>)
 80057d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057dc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80057de:	4b33      	ldr	r3, [pc, #204]	; (80058ac <HAL_UART_MspInit+0x45c>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80057e4:	4b31      	ldr	r3, [pc, #196]	; (80058ac <HAL_UART_MspInit+0x45c>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80057ea:	4b30      	ldr	r3, [pc, #192]	; (80058ac <HAL_UART_MspInit+0x45c>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80057f0:	4b2e      	ldr	r3, [pc, #184]	; (80058ac <HAL_UART_MspInit+0x45c>)
 80057f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80057f6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80057f8:	4b2c      	ldr	r3, [pc, #176]	; (80058ac <HAL_UART_MspInit+0x45c>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80057fe:	482b      	ldr	r0, [pc, #172]	; (80058ac <HAL_UART_MspInit+0x45c>)
 8005800:	f000 fc62 	bl	80060c8 <HAL_DMA_Init>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d001      	beq.n	800580e <HAL_UART_MspInit+0x3be>
      Error_Handler();
 800580a:	f7fe facf 	bl	8003dac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a26      	ldr	r2, [pc, #152]	; (80058ac <HAL_UART_MspInit+0x45c>)
 8005812:	67da      	str	r2, [r3, #124]	; 0x7c
 8005814:	4a25      	ldr	r2, [pc, #148]	; (80058ac <HAL_UART_MspInit+0x45c>)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 800581a:	4b26      	ldr	r3, [pc, #152]	; (80058b4 <HAL_UART_MspInit+0x464>)
 800581c:	4a26      	ldr	r2, [pc, #152]	; (80058b8 <HAL_UART_MspInit+0x468>)
 800581e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8005820:	4b24      	ldr	r3, [pc, #144]	; (80058b4 <HAL_UART_MspInit+0x464>)
 8005822:	222e      	movs	r2, #46	; 0x2e
 8005824:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005826:	4b23      	ldr	r3, [pc, #140]	; (80058b4 <HAL_UART_MspInit+0x464>)
 8005828:	2240      	movs	r2, #64	; 0x40
 800582a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800582c:	4b21      	ldr	r3, [pc, #132]	; (80058b4 <HAL_UART_MspInit+0x464>)
 800582e:	2200      	movs	r2, #0
 8005830:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005832:	4b20      	ldr	r3, [pc, #128]	; (80058b4 <HAL_UART_MspInit+0x464>)
 8005834:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005838:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800583a:	4b1e      	ldr	r3, [pc, #120]	; (80058b4 <HAL_UART_MspInit+0x464>)
 800583c:	2200      	movs	r2, #0
 800583e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005840:	4b1c      	ldr	r3, [pc, #112]	; (80058b4 <HAL_UART_MspInit+0x464>)
 8005842:	2200      	movs	r2, #0
 8005844:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8005846:	4b1b      	ldr	r3, [pc, #108]	; (80058b4 <HAL_UART_MspInit+0x464>)
 8005848:	2200      	movs	r2, #0
 800584a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800584c:	4b19      	ldr	r3, [pc, #100]	; (80058b4 <HAL_UART_MspInit+0x464>)
 800584e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005852:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005854:	4b17      	ldr	r3, [pc, #92]	; (80058b4 <HAL_UART_MspInit+0x464>)
 8005856:	2204      	movs	r2, #4
 8005858:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800585a:	4b16      	ldr	r3, [pc, #88]	; (80058b4 <HAL_UART_MspInit+0x464>)
 800585c:	2203      	movs	r2, #3
 800585e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8005860:	4b14      	ldr	r3, [pc, #80]	; (80058b4 <HAL_UART_MspInit+0x464>)
 8005862:	2200      	movs	r2, #0
 8005864:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005866:	4b13      	ldr	r3, [pc, #76]	; (80058b4 <HAL_UART_MspInit+0x464>)
 8005868:	2200      	movs	r2, #0
 800586a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800586c:	4811      	ldr	r0, [pc, #68]	; (80058b4 <HAL_UART_MspInit+0x464>)
 800586e:	f000 fc2b 	bl	80060c8 <HAL_DMA_Init>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d001      	beq.n	800587c <HAL_UART_MspInit+0x42c>
      Error_Handler();
 8005878:	f7fe fa98 	bl	8003dac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a0d      	ldr	r2, [pc, #52]	; (80058b4 <HAL_UART_MspInit+0x464>)
 8005880:	679a      	str	r2, [r3, #120]	; 0x78
 8005882:	4a0c      	ldr	r2, [pc, #48]	; (80058b4 <HAL_UART_MspInit+0x464>)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005888:	2200      	movs	r2, #0
 800588a:	2100      	movs	r1, #0
 800588c:	2027      	movs	r0, #39	; 0x27
 800588e:	f000 f9dc 	bl	8005c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005892:	2027      	movs	r0, #39	; 0x27
 8005894:	f000 f9f3 	bl	8005c7e <HAL_NVIC_EnableIRQ>
}
 8005898:	bf00      	nop
 800589a:	37f0      	adds	r7, #240	; 0xf0
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	40004800 	.word	0x40004800
 80058a4:	58024400 	.word	0x58024400
 80058a8:	58020c00 	.word	0x58020c00
 80058ac:	24000ff0 	.word	0x24000ff0
 80058b0:	40020028 	.word	0x40020028
 80058b4:	240010f8 	.word	0x240010f8
 80058b8:	40020040 	.word	0x40020040

080058bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
ldr   sp, =_estack      /* set stack pointer */
 80058bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80058f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80058c0:	f7fe fe46 	bl	8004550 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80058c4:	480c      	ldr	r0, [pc, #48]	; (80058f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80058c6:	490d      	ldr	r1, [pc, #52]	; (80058fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80058c8:	4a0d      	ldr	r2, [pc, #52]	; (8005900 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80058ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80058cc:	e002      	b.n	80058d4 <LoopCopyDataInit>

080058ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80058ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80058d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80058d2:	3304      	adds	r3, #4

080058d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80058d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80058d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80058d8:	d3f9      	bcc.n	80058ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80058da:	4a0a      	ldr	r2, [pc, #40]	; (8005904 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80058dc:	4c0a      	ldr	r4, [pc, #40]	; (8005908 <LoopFillZerobss+0x22>)
  movs r3, #0
 80058de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80058e0:	e001      	b.n	80058e6 <LoopFillZerobss>

080058e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80058e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80058e4:	3204      	adds	r2, #4

080058e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80058e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80058e8:	d3fb      	bcc.n	80058e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80058ea:	f00b f865 	bl	80109b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80058ee:	f7fd ffc3 	bl	8003878 <main>
  bx  lr
 80058f2:	4770      	bx	lr
ldr   sp, =_estack      /* set stack pointer */
 80058f4:	24001908 	.word	0x24001908
  ldr r0, =_sdata
 80058f8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80058fc:	240001f4 	.word	0x240001f4
  ldr r2, =_sidata
 8005900:	080152dc 	.word	0x080152dc
  ldr r2, =_sbss
 8005904:	240001f4 	.word	0x240001f4
  ldr r4, =_ebss
 8005908:	24001304 	.word	0x24001304

0800590c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800590c:	e7fe      	b.n	800590c <ADC3_IRQHandler>
	...

08005910 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005916:	2003      	movs	r0, #3
 8005918:	f000 f98c 	bl	8005c34 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800591c:	f004 fa0e 	bl	8009d3c <HAL_RCC_GetSysClockFreq>
 8005920:	4602      	mov	r2, r0
 8005922:	4b15      	ldr	r3, [pc, #84]	; (8005978 <HAL_Init+0x68>)
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	0a1b      	lsrs	r3, r3, #8
 8005928:	f003 030f 	and.w	r3, r3, #15
 800592c:	4913      	ldr	r1, [pc, #76]	; (800597c <HAL_Init+0x6c>)
 800592e:	5ccb      	ldrb	r3, [r1, r3]
 8005930:	f003 031f 	and.w	r3, r3, #31
 8005934:	fa22 f303 	lsr.w	r3, r2, r3
 8005938:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800593a:	4b0f      	ldr	r3, [pc, #60]	; (8005978 <HAL_Init+0x68>)
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	f003 030f 	and.w	r3, r3, #15
 8005942:	4a0e      	ldr	r2, [pc, #56]	; (800597c <HAL_Init+0x6c>)
 8005944:	5cd3      	ldrb	r3, [r2, r3]
 8005946:	f003 031f 	and.w	r3, r3, #31
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	fa22 f303 	lsr.w	r3, r2, r3
 8005950:	4a0b      	ldr	r2, [pc, #44]	; (8005980 <HAL_Init+0x70>)
 8005952:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005954:	4a0b      	ldr	r2, [pc, #44]	; (8005984 <HAL_Init+0x74>)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800595a:	2000      	movs	r0, #0
 800595c:	f000 f814 	bl	8005988 <HAL_InitTick>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e002      	b.n	8005970 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800596a:	f7fe fc3b 	bl	80041e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3708      	adds	r7, #8
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	58024400 	.word	0x58024400
 800597c:	080132d0 	.word	0x080132d0
 8005980:	24000018 	.word	0x24000018
 8005984:	24000014 	.word	0x24000014

08005988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005990:	4b15      	ldr	r3, [pc, #84]	; (80059e8 <HAL_InitTick+0x60>)
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e021      	b.n	80059e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800599c:	4b13      	ldr	r3, [pc, #76]	; (80059ec <HAL_InitTick+0x64>)
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	4b11      	ldr	r3, [pc, #68]	; (80059e8 <HAL_InitTick+0x60>)
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	4619      	mov	r1, r3
 80059a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80059ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 f971 	bl	8005c9a <HAL_SYSTICK_Config>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d001      	beq.n	80059c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e00e      	b.n	80059e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b0f      	cmp	r3, #15
 80059c6:	d80a      	bhi.n	80059de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80059c8:	2200      	movs	r2, #0
 80059ca:	6879      	ldr	r1, [r7, #4]
 80059cc:	f04f 30ff 	mov.w	r0, #4294967295
 80059d0:	f000 f93b 	bl	8005c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80059d4:	4a06      	ldr	r2, [pc, #24]	; (80059f0 <HAL_InitTick+0x68>)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80059da:	2300      	movs	r3, #0
 80059dc:	e000      	b.n	80059e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	24000020 	.word	0x24000020
 80059ec:	24000014 	.word	0x24000014
 80059f0:	2400001c 	.word	0x2400001c

080059f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059f4:	b480      	push	{r7}
 80059f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80059f8:	4b06      	ldr	r3, [pc, #24]	; (8005a14 <HAL_IncTick+0x20>)
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	461a      	mov	r2, r3
 80059fe:	4b06      	ldr	r3, [pc, #24]	; (8005a18 <HAL_IncTick+0x24>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4413      	add	r3, r2
 8005a04:	4a04      	ldr	r2, [pc, #16]	; (8005a18 <HAL_IncTick+0x24>)
 8005a06:	6013      	str	r3, [r2, #0]
}
 8005a08:	bf00      	nop
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	24000020 	.word	0x24000020
 8005a18:	240012f0 	.word	0x240012f0

08005a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8005a20:	4b03      	ldr	r3, [pc, #12]	; (8005a30 <HAL_GetTick+0x14>)
 8005a22:	681b      	ldr	r3, [r3, #0]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	240012f0 	.word	0x240012f0

08005a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005a3c:	f7ff ffee 	bl	8005a1c <HAL_GetTick>
 8005a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4c:	d005      	beq.n	8005a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005a4e:	4b0a      	ldr	r3, [pc, #40]	; (8005a78 <HAL_Delay+0x44>)
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	461a      	mov	r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	4413      	add	r3, r2
 8005a58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005a5a:	bf00      	nop
 8005a5c:	f7ff ffde 	bl	8005a1c <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d8f7      	bhi.n	8005a5c <HAL_Delay+0x28>
  {
  }
}
 8005a6c:	bf00      	nop
 8005a6e:	bf00      	nop
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	24000020 	.word	0x24000020

08005a7c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005a80:	4b03      	ldr	r3, [pc, #12]	; (8005a90 <HAL_GetREVID+0x14>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	0c1b      	lsrs	r3, r3, #16
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr
 8005a90:	5c001000 	.word	0x5c001000

08005a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f003 0307 	and.w	r3, r3, #7
 8005aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005aa4:	4b0b      	ldr	r3, [pc, #44]	; (8005ad4 <__NVIC_SetPriorityGrouping+0x40>)
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005abc:	4b06      	ldr	r3, [pc, #24]	; (8005ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ac2:	4a04      	ldr	r2, [pc, #16]	; (8005ad4 <__NVIC_SetPriorityGrouping+0x40>)
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	60d3      	str	r3, [r2, #12]
}
 8005ac8:	bf00      	nop
 8005aca:	3714      	adds	r7, #20
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr
 8005ad4:	e000ed00 	.word	0xe000ed00
 8005ad8:	05fa0000 	.word	0x05fa0000

08005adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005adc:	b480      	push	{r7}
 8005ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ae0:	4b04      	ldr	r3, [pc, #16]	; (8005af4 <__NVIC_GetPriorityGrouping+0x18>)
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	0a1b      	lsrs	r3, r3, #8
 8005ae6:	f003 0307 	and.w	r3, r3, #7
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	e000ed00 	.word	0xe000ed00

08005af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	4603      	mov	r3, r0
 8005b00:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005b02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	db0b      	blt.n	8005b22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b0a:	88fb      	ldrh	r3, [r7, #6]
 8005b0c:	f003 021f 	and.w	r2, r3, #31
 8005b10:	4907      	ldr	r1, [pc, #28]	; (8005b30 <__NVIC_EnableIRQ+0x38>)
 8005b12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b16:	095b      	lsrs	r3, r3, #5
 8005b18:	2001      	movs	r0, #1
 8005b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8005b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005b22:	bf00      	nop
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	e000e100 	.word	0xe000e100

08005b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	6039      	str	r1, [r7, #0]
 8005b3e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005b40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	db0a      	blt.n	8005b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	490c      	ldr	r1, [pc, #48]	; (8005b80 <__NVIC_SetPriority+0x4c>)
 8005b4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b52:	0112      	lsls	r2, r2, #4
 8005b54:	b2d2      	uxtb	r2, r2
 8005b56:	440b      	add	r3, r1
 8005b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b5c:	e00a      	b.n	8005b74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	4908      	ldr	r1, [pc, #32]	; (8005b84 <__NVIC_SetPriority+0x50>)
 8005b64:	88fb      	ldrh	r3, [r7, #6]
 8005b66:	f003 030f 	and.w	r3, r3, #15
 8005b6a:	3b04      	subs	r3, #4
 8005b6c:	0112      	lsls	r2, r2, #4
 8005b6e:	b2d2      	uxtb	r2, r2
 8005b70:	440b      	add	r3, r1
 8005b72:	761a      	strb	r2, [r3, #24]
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr
 8005b80:	e000e100 	.word	0xe000e100
 8005b84:	e000ed00 	.word	0xe000ed00

08005b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b089      	sub	sp, #36	; 0x24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f003 0307 	and.w	r3, r3, #7
 8005b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	f1c3 0307 	rsb	r3, r3, #7
 8005ba2:	2b04      	cmp	r3, #4
 8005ba4:	bf28      	it	cs
 8005ba6:	2304      	movcs	r3, #4
 8005ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	3304      	adds	r3, #4
 8005bae:	2b06      	cmp	r3, #6
 8005bb0:	d902      	bls.n	8005bb8 <NVIC_EncodePriority+0x30>
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	3b03      	subs	r3, #3
 8005bb6:	e000      	b.n	8005bba <NVIC_EncodePriority+0x32>
 8005bb8:	2300      	movs	r3, #0
 8005bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc6:	43da      	mvns	r2, r3
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	401a      	ands	r2, r3
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8005bda:	43d9      	mvns	r1, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005be0:	4313      	orrs	r3, r2
         );
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3724      	adds	r7, #36	; 0x24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
	...

08005bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c00:	d301      	bcc.n	8005c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005c02:	2301      	movs	r3, #1
 8005c04:	e00f      	b.n	8005c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c06:	4a0a      	ldr	r2, [pc, #40]	; (8005c30 <SysTick_Config+0x40>)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c0e:	210f      	movs	r1, #15
 8005c10:	f04f 30ff 	mov.w	r0, #4294967295
 8005c14:	f7ff ff8e 	bl	8005b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c18:	4b05      	ldr	r3, [pc, #20]	; (8005c30 <SysTick_Config+0x40>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c1e:	4b04      	ldr	r3, [pc, #16]	; (8005c30 <SysTick_Config+0x40>)
 8005c20:	2207      	movs	r2, #7
 8005c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	e000e010 	.word	0xe000e010

08005c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f7ff ff29 	bl	8005a94 <__NVIC_SetPriorityGrouping>
}
 8005c42:	bf00      	nop
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b086      	sub	sp, #24
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	4603      	mov	r3, r0
 8005c52:	60b9      	str	r1, [r7, #8]
 8005c54:	607a      	str	r2, [r7, #4]
 8005c56:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005c58:	f7ff ff40 	bl	8005adc <__NVIC_GetPriorityGrouping>
 8005c5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	68b9      	ldr	r1, [r7, #8]
 8005c62:	6978      	ldr	r0, [r7, #20]
 8005c64:	f7ff ff90 	bl	8005b88 <NVIC_EncodePriority>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005c6e:	4611      	mov	r1, r2
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7ff ff5f 	bl	8005b34 <__NVIC_SetPriority>
}
 8005c76:	bf00      	nop
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b082      	sub	sp, #8
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	4603      	mov	r3, r0
 8005c86:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7ff ff33 	bl	8005af8 <__NVIC_EnableIRQ>
}
 8005c92:	bf00      	nop
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b082      	sub	sp, #8
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f7ff ffa4 	bl	8005bf0 <SysTick_Config>
 8005ca8:	4603      	mov	r3, r0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3708      	adds	r7, #8
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8005cb6:	f000 f802 	bl	8005cbe <HAL_SYSTICK_Callback>
}
 8005cba:	bf00      	nop
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8005cc2:	bf00      	nop
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d101      	bne.n	8005cde <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e054      	b.n	8005d88 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	7f5b      	ldrb	r3, [r3, #29]
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d105      	bne.n	8005cf4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f7fc fc48 	bl	8002584 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	791b      	ldrb	r3, [r3, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10c      	bne.n	8005d1c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a22      	ldr	r2, [pc, #136]	; (8005d90 <HAL_CRC_Init+0xc4>)
 8005d08:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	689a      	ldr	r2, [r3, #8]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f022 0218 	bic.w	r2, r2, #24
 8005d18:	609a      	str	r2, [r3, #8]
 8005d1a:	e00c      	b.n	8005d36 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6899      	ldr	r1, [r3, #8]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	461a      	mov	r2, r3
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f948 	bl	8005fbc <HAL_CRCEx_Polynomial_Set>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e028      	b.n	8005d88 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	795b      	ldrb	r3, [r3, #5]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d105      	bne.n	8005d4a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f04f 32ff 	mov.w	r2, #4294967295
 8005d46:	611a      	str	r2, [r3, #16]
 8005d48:	e004      	b.n	8005d54 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	6912      	ldr	r2, [r2, #16]
 8005d52:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	695a      	ldr	r2, [r3, #20]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	430a      	orrs	r2, r1
 8005d68:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	699a      	ldr	r2, [r3, #24]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3708      	adds	r7, #8
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	04c11db7 	.word	0x04c11db7

08005d94 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8005da0:	2300      	movs	r3, #0
 8005da2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2202      	movs	r2, #2
 8005da8:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	689a      	ldr	r2, [r3, #8]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f042 0201 	orr.w	r2, r2, #1
 8005db8:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	2b03      	cmp	r3, #3
 8005dc0:	d006      	beq.n	8005dd0 <HAL_CRC_Calculate+0x3c>
 8005dc2:	2b03      	cmp	r3, #3
 8005dc4:	d829      	bhi.n	8005e1a <HAL_CRC_Calculate+0x86>
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d019      	beq.n	8005dfe <HAL_CRC_Calculate+0x6a>
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d01e      	beq.n	8005e0c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8005dce:	e024      	b.n	8005e1a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	617b      	str	r3, [r7, #20]
 8005dd4:	e00a      	b.n	8005dec <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	441a      	add	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6812      	ldr	r2, [r2, #0]
 8005de4:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	3301      	adds	r3, #1
 8005dea:	617b      	str	r3, [r7, #20]
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d3f0      	bcc.n	8005dd6 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	613b      	str	r3, [r7, #16]
      break;
 8005dfc:	e00e      	b.n	8005e1c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	68b9      	ldr	r1, [r7, #8]
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f000 f812 	bl	8005e2c <CRC_Handle_8>
 8005e08:	6138      	str	r0, [r7, #16]
      break;
 8005e0a:	e007      	b.n	8005e1c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	68b9      	ldr	r1, [r7, #8]
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f000 f899 	bl	8005f48 <CRC_Handle_16>
 8005e16:	6138      	str	r0, [r7, #16]
      break;
 8005e18:	e000      	b.n	8005e1c <HAL_CRC_Calculate+0x88>
      break;
 8005e1a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8005e22:	693b      	ldr	r3, [r7, #16]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3718      	adds	r7, #24
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b089      	sub	sp, #36	; 0x24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8005e38:	2300      	movs	r3, #0
 8005e3a:	61fb      	str	r3, [r7, #28]
 8005e3c:	e023      	b.n	8005e86 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	4413      	add	r3, r2
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	3301      	adds	r3, #1
 8005e50:	68b9      	ldr	r1, [r7, #8]
 8005e52:	440b      	add	r3, r1
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005e58:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	3302      	adds	r3, #2
 8005e60:	68b9      	ldr	r1, [r7, #8]
 8005e62:	440b      	add	r3, r1
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8005e68:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	3303      	adds	r3, #3
 8005e70:	68b9      	ldr	r1, [r7, #8]
 8005e72:	440b      	add	r3, r1
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8005e7c:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005e7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	3301      	adds	r3, #1
 8005e84:	61fb      	str	r3, [r7, #28]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	089b      	lsrs	r3, r3, #2
 8005e8a:	69fa      	ldr	r2, [r7, #28]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d3d6      	bcc.n	8005e3e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f003 0303 	and.w	r3, r3, #3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d04d      	beq.n	8005f36 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f003 0303 	and.w	r3, r3, #3
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d107      	bne.n	8005eb4 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	4413      	add	r3, r2
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	6812      	ldr	r2, [r2, #0]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f003 0303 	and.w	r3, r3, #3
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d116      	bne.n	8005eec <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	021b      	lsls	r3, r3, #8
 8005eca:	b21a      	sxth	r2, r3
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	68b9      	ldr	r1, [r7, #8]
 8005ed4:	440b      	add	r3, r1
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	b21b      	sxth	r3, r3
 8005eda:	4313      	orrs	r3, r2
 8005edc:	b21b      	sxth	r3, r3
 8005ede:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	8b7a      	ldrh	r2, [r7, #26]
 8005eea:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f003 0303 	and.w	r3, r3, #3
 8005ef2:	2b03      	cmp	r3, #3
 8005ef4:	d11f      	bne.n	8005f36 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	4413      	add	r3, r2
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	021b      	lsls	r3, r3, #8
 8005f02:	b21a      	sxth	r2, r3
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	3301      	adds	r3, #1
 8005f0a:	68b9      	ldr	r1, [r7, #8]
 8005f0c:	440b      	add	r3, r1
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	b21b      	sxth	r3, r3
 8005f12:	4313      	orrs	r3, r2
 8005f14:	b21b      	sxth	r3, r3
 8005f16:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	8b7a      	ldrh	r2, [r7, #26]
 8005f22:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	3302      	adds	r3, #2
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	6812      	ldr	r2, [r2, #0]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3724      	adds	r7, #36	; 0x24
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b087      	sub	sp, #28
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8005f54:	2300      	movs	r3, #0
 8005f56:	617b      	str	r3, [r7, #20]
 8005f58:	e013      	b.n	8005f82 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	4413      	add	r3, r2
 8005f62:	881b      	ldrh	r3, [r3, #0]
 8005f64:	041a      	lsls	r2, r3, #16
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	3302      	adds	r3, #2
 8005f6c:	68b9      	ldr	r1, [r7, #8]
 8005f6e:	440b      	add	r3, r1
 8005f70:	881b      	ldrh	r3, [r3, #0]
 8005f72:	4619      	mov	r1, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	617b      	str	r3, [r7, #20]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	085b      	lsrs	r3, r3, #1
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d3e6      	bcc.n	8005f5a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d009      	beq.n	8005faa <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	68ba      	ldr	r2, [r7, #8]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	881a      	ldrh	r2, [r3, #0]
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	371c      	adds	r7, #28
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005fcc:	231f      	movs	r3, #31
 8005fce:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005fd0:	bf00      	nop
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	1e5a      	subs	r2, r3, #1
 8005fd6:	613a      	str	r2, [r7, #16]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d009      	beq.n	8005ff0 <HAL_CRCEx_Polynomial_Set+0x34>
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f003 031f 	and.w	r3, r3, #31
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d0f0      	beq.n	8005fd2 <HAL_CRCEx_Polynomial_Set+0x16>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b18      	cmp	r3, #24
 8005ff4:	d846      	bhi.n	8006084 <HAL_CRCEx_Polynomial_Set+0xc8>
 8005ff6:	a201      	add	r2, pc, #4	; (adr r2, 8005ffc <HAL_CRCEx_Polynomial_Set+0x40>)
 8005ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffc:	0800608b 	.word	0x0800608b
 8006000:	08006085 	.word	0x08006085
 8006004:	08006085 	.word	0x08006085
 8006008:	08006085 	.word	0x08006085
 800600c:	08006085 	.word	0x08006085
 8006010:	08006085 	.word	0x08006085
 8006014:	08006085 	.word	0x08006085
 8006018:	08006085 	.word	0x08006085
 800601c:	08006079 	.word	0x08006079
 8006020:	08006085 	.word	0x08006085
 8006024:	08006085 	.word	0x08006085
 8006028:	08006085 	.word	0x08006085
 800602c:	08006085 	.word	0x08006085
 8006030:	08006085 	.word	0x08006085
 8006034:	08006085 	.word	0x08006085
 8006038:	08006085 	.word	0x08006085
 800603c:	0800606d 	.word	0x0800606d
 8006040:	08006085 	.word	0x08006085
 8006044:	08006085 	.word	0x08006085
 8006048:	08006085 	.word	0x08006085
 800604c:	08006085 	.word	0x08006085
 8006050:	08006085 	.word	0x08006085
 8006054:	08006085 	.word	0x08006085
 8006058:	08006085 	.word	0x08006085
 800605c:	08006061 	.word	0x08006061
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	2b06      	cmp	r3, #6
 8006064:	d913      	bls.n	800608e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800606a:	e010      	b.n	800608e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	2b07      	cmp	r3, #7
 8006070:	d90f      	bls.n	8006092 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006076:	e00c      	b.n	8006092 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	2b0f      	cmp	r3, #15
 800607c:	d90b      	bls.n	8006096 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006082:	e008      	b.n	8006096 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	75fb      	strb	r3, [r7, #23]
      break;
 8006088:	e006      	b.n	8006098 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800608a:	bf00      	nop
 800608c:	e004      	b.n	8006098 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800608e:	bf00      	nop
 8006090:	e002      	b.n	8006098 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006092:	bf00      	nop
 8006094:	e000      	b.n	8006098 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006096:	bf00      	nop
  }
  if (status == HAL_OK)
 8006098:	7dfb      	ldrb	r3, [r7, #23]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10d      	bne.n	80060ba <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f023 0118 	bic.w	r1, r3, #24
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	430a      	orrs	r2, r1
 80060b8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80060ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80060bc:	4618      	mov	r0, r3
 80060be:	371c      	adds	r7, #28
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80060d0:	f7ff fca4 	bl	8005a1c <HAL_GetTick>
 80060d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d101      	bne.n	80060e0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e316      	b.n	800670e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a66      	ldr	r2, [pc, #408]	; (8006280 <HAL_DMA_Init+0x1b8>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d04a      	beq.n	8006180 <HAL_DMA_Init+0xb8>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a65      	ldr	r2, [pc, #404]	; (8006284 <HAL_DMA_Init+0x1bc>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d045      	beq.n	8006180 <HAL_DMA_Init+0xb8>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a63      	ldr	r2, [pc, #396]	; (8006288 <HAL_DMA_Init+0x1c0>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d040      	beq.n	8006180 <HAL_DMA_Init+0xb8>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a62      	ldr	r2, [pc, #392]	; (800628c <HAL_DMA_Init+0x1c4>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d03b      	beq.n	8006180 <HAL_DMA_Init+0xb8>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a60      	ldr	r2, [pc, #384]	; (8006290 <HAL_DMA_Init+0x1c8>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d036      	beq.n	8006180 <HAL_DMA_Init+0xb8>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a5f      	ldr	r2, [pc, #380]	; (8006294 <HAL_DMA_Init+0x1cc>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d031      	beq.n	8006180 <HAL_DMA_Init+0xb8>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a5d      	ldr	r2, [pc, #372]	; (8006298 <HAL_DMA_Init+0x1d0>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d02c      	beq.n	8006180 <HAL_DMA_Init+0xb8>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a5c      	ldr	r2, [pc, #368]	; (800629c <HAL_DMA_Init+0x1d4>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d027      	beq.n	8006180 <HAL_DMA_Init+0xb8>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a5a      	ldr	r2, [pc, #360]	; (80062a0 <HAL_DMA_Init+0x1d8>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d022      	beq.n	8006180 <HAL_DMA_Init+0xb8>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a59      	ldr	r2, [pc, #356]	; (80062a4 <HAL_DMA_Init+0x1dc>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d01d      	beq.n	8006180 <HAL_DMA_Init+0xb8>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a57      	ldr	r2, [pc, #348]	; (80062a8 <HAL_DMA_Init+0x1e0>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d018      	beq.n	8006180 <HAL_DMA_Init+0xb8>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a56      	ldr	r2, [pc, #344]	; (80062ac <HAL_DMA_Init+0x1e4>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d013      	beq.n	8006180 <HAL_DMA_Init+0xb8>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a54      	ldr	r2, [pc, #336]	; (80062b0 <HAL_DMA_Init+0x1e8>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d00e      	beq.n	8006180 <HAL_DMA_Init+0xb8>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a53      	ldr	r2, [pc, #332]	; (80062b4 <HAL_DMA_Init+0x1ec>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d009      	beq.n	8006180 <HAL_DMA_Init+0xb8>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a51      	ldr	r2, [pc, #324]	; (80062b8 <HAL_DMA_Init+0x1f0>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d004      	beq.n	8006180 <HAL_DMA_Init+0xb8>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a50      	ldr	r2, [pc, #320]	; (80062bc <HAL_DMA_Init+0x1f4>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d101      	bne.n	8006184 <HAL_DMA_Init+0xbc>
 8006180:	2301      	movs	r3, #1
 8006182:	e000      	b.n	8006186 <HAL_DMA_Init+0xbe>
 8006184:	2300      	movs	r3, #0
 8006186:	2b00      	cmp	r3, #0
 8006188:	f000 813b 	beq.w	8006402 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2202      	movs	r2, #2
 8006190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a37      	ldr	r2, [pc, #220]	; (8006280 <HAL_DMA_Init+0x1b8>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d04a      	beq.n	800623c <HAL_DMA_Init+0x174>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a36      	ldr	r2, [pc, #216]	; (8006284 <HAL_DMA_Init+0x1bc>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d045      	beq.n	800623c <HAL_DMA_Init+0x174>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a34      	ldr	r2, [pc, #208]	; (8006288 <HAL_DMA_Init+0x1c0>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d040      	beq.n	800623c <HAL_DMA_Init+0x174>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a33      	ldr	r2, [pc, #204]	; (800628c <HAL_DMA_Init+0x1c4>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d03b      	beq.n	800623c <HAL_DMA_Init+0x174>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a31      	ldr	r2, [pc, #196]	; (8006290 <HAL_DMA_Init+0x1c8>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d036      	beq.n	800623c <HAL_DMA_Init+0x174>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a30      	ldr	r2, [pc, #192]	; (8006294 <HAL_DMA_Init+0x1cc>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d031      	beq.n	800623c <HAL_DMA_Init+0x174>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a2e      	ldr	r2, [pc, #184]	; (8006298 <HAL_DMA_Init+0x1d0>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d02c      	beq.n	800623c <HAL_DMA_Init+0x174>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a2d      	ldr	r2, [pc, #180]	; (800629c <HAL_DMA_Init+0x1d4>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d027      	beq.n	800623c <HAL_DMA_Init+0x174>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a2b      	ldr	r2, [pc, #172]	; (80062a0 <HAL_DMA_Init+0x1d8>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d022      	beq.n	800623c <HAL_DMA_Init+0x174>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a2a      	ldr	r2, [pc, #168]	; (80062a4 <HAL_DMA_Init+0x1dc>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d01d      	beq.n	800623c <HAL_DMA_Init+0x174>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a28      	ldr	r2, [pc, #160]	; (80062a8 <HAL_DMA_Init+0x1e0>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d018      	beq.n	800623c <HAL_DMA_Init+0x174>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a27      	ldr	r2, [pc, #156]	; (80062ac <HAL_DMA_Init+0x1e4>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d013      	beq.n	800623c <HAL_DMA_Init+0x174>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a25      	ldr	r2, [pc, #148]	; (80062b0 <HAL_DMA_Init+0x1e8>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d00e      	beq.n	800623c <HAL_DMA_Init+0x174>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a24      	ldr	r2, [pc, #144]	; (80062b4 <HAL_DMA_Init+0x1ec>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d009      	beq.n	800623c <HAL_DMA_Init+0x174>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a22      	ldr	r2, [pc, #136]	; (80062b8 <HAL_DMA_Init+0x1f0>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d004      	beq.n	800623c <HAL_DMA_Init+0x174>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a21      	ldr	r2, [pc, #132]	; (80062bc <HAL_DMA_Init+0x1f4>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d108      	bne.n	800624e <HAL_DMA_Init+0x186>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 0201 	bic.w	r2, r2, #1
 800624a:	601a      	str	r2, [r3, #0]
 800624c:	e007      	b.n	800625e <HAL_DMA_Init+0x196>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 0201 	bic.w	r2, r2, #1
 800625c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800625e:	e02f      	b.n	80062c0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006260:	f7ff fbdc 	bl	8005a1c <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	2b05      	cmp	r3, #5
 800626c:	d928      	bls.n	80062c0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2220      	movs	r2, #32
 8006272:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2203      	movs	r2, #3
 8006278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e246      	b.n	800670e <HAL_DMA_Init+0x646>
 8006280:	40020010 	.word	0x40020010
 8006284:	40020028 	.word	0x40020028
 8006288:	40020040 	.word	0x40020040
 800628c:	40020058 	.word	0x40020058
 8006290:	40020070 	.word	0x40020070
 8006294:	40020088 	.word	0x40020088
 8006298:	400200a0 	.word	0x400200a0
 800629c:	400200b8 	.word	0x400200b8
 80062a0:	40020410 	.word	0x40020410
 80062a4:	40020428 	.word	0x40020428
 80062a8:	40020440 	.word	0x40020440
 80062ac:	40020458 	.word	0x40020458
 80062b0:	40020470 	.word	0x40020470
 80062b4:	40020488 	.word	0x40020488
 80062b8:	400204a0 	.word	0x400204a0
 80062bc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1c8      	bne.n	8006260 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	4b83      	ldr	r3, [pc, #524]	; (80064e8 <HAL_DMA_Init+0x420>)
 80062da:	4013      	ands	r3, r2
 80062dc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80062e6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062f2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062fe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a1b      	ldr	r3, [r3, #32]
 8006304:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	4313      	orrs	r3, r2
 800630a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006310:	2b04      	cmp	r3, #4
 8006312:	d107      	bne.n	8006324 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631c:	4313      	orrs	r3, r2
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	4313      	orrs	r3, r2
 8006322:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006324:	4b71      	ldr	r3, [pc, #452]	; (80064ec <HAL_DMA_Init+0x424>)
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	4b71      	ldr	r3, [pc, #452]	; (80064f0 <HAL_DMA_Init+0x428>)
 800632a:	4013      	ands	r3, r2
 800632c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006330:	d328      	bcc.n	8006384 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	2b28      	cmp	r3, #40	; 0x28
 8006338:	d903      	bls.n	8006342 <HAL_DMA_Init+0x27a>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	2b2e      	cmp	r3, #46	; 0x2e
 8006340:	d917      	bls.n	8006372 <HAL_DMA_Init+0x2aa>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	2b3e      	cmp	r3, #62	; 0x3e
 8006348:	d903      	bls.n	8006352 <HAL_DMA_Init+0x28a>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	2b42      	cmp	r3, #66	; 0x42
 8006350:	d90f      	bls.n	8006372 <HAL_DMA_Init+0x2aa>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	2b46      	cmp	r3, #70	; 0x46
 8006358:	d903      	bls.n	8006362 <HAL_DMA_Init+0x29a>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	2b48      	cmp	r3, #72	; 0x48
 8006360:	d907      	bls.n	8006372 <HAL_DMA_Init+0x2aa>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	2b4e      	cmp	r3, #78	; 0x4e
 8006368:	d905      	bls.n	8006376 <HAL_DMA_Init+0x2ae>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	2b52      	cmp	r3, #82	; 0x52
 8006370:	d801      	bhi.n	8006376 <HAL_DMA_Init+0x2ae>
 8006372:	2301      	movs	r3, #1
 8006374:	e000      	b.n	8006378 <HAL_DMA_Init+0x2b0>
 8006376:	2300      	movs	r3, #0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d003      	beq.n	8006384 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006382:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	697a      	ldr	r2, [r7, #20]
 800638a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	f023 0307 	bic.w	r3, r3, #7
 800639a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063aa:	2b04      	cmp	r3, #4
 80063ac:	d117      	bne.n	80063de <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00e      	beq.n	80063de <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f002 fb31 	bl	8008a28 <DMA_CheckFifoParam>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d008      	beq.n	80063de <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2240      	movs	r2, #64	; 0x40
 80063d0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e197      	b.n	800670e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	697a      	ldr	r2, [r7, #20]
 80063e4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f002 fa6c 	bl	80088c4 <DMA_CalcBaseAndBitshift>
 80063ec:	4603      	mov	r3, r0
 80063ee:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063f4:	f003 031f 	and.w	r3, r3, #31
 80063f8:	223f      	movs	r2, #63	; 0x3f
 80063fa:	409a      	lsls	r2, r3
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	609a      	str	r2, [r3, #8]
 8006400:	e0cd      	b.n	800659e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a3b      	ldr	r2, [pc, #236]	; (80064f4 <HAL_DMA_Init+0x42c>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d022      	beq.n	8006452 <HAL_DMA_Init+0x38a>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a39      	ldr	r2, [pc, #228]	; (80064f8 <HAL_DMA_Init+0x430>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d01d      	beq.n	8006452 <HAL_DMA_Init+0x38a>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a38      	ldr	r2, [pc, #224]	; (80064fc <HAL_DMA_Init+0x434>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d018      	beq.n	8006452 <HAL_DMA_Init+0x38a>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a36      	ldr	r2, [pc, #216]	; (8006500 <HAL_DMA_Init+0x438>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d013      	beq.n	8006452 <HAL_DMA_Init+0x38a>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a35      	ldr	r2, [pc, #212]	; (8006504 <HAL_DMA_Init+0x43c>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d00e      	beq.n	8006452 <HAL_DMA_Init+0x38a>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a33      	ldr	r2, [pc, #204]	; (8006508 <HAL_DMA_Init+0x440>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d009      	beq.n	8006452 <HAL_DMA_Init+0x38a>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a32      	ldr	r2, [pc, #200]	; (800650c <HAL_DMA_Init+0x444>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d004      	beq.n	8006452 <HAL_DMA_Init+0x38a>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a30      	ldr	r2, [pc, #192]	; (8006510 <HAL_DMA_Init+0x448>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d101      	bne.n	8006456 <HAL_DMA_Init+0x38e>
 8006452:	2301      	movs	r3, #1
 8006454:	e000      	b.n	8006458 <HAL_DMA_Init+0x390>
 8006456:	2300      	movs	r3, #0
 8006458:	2b00      	cmp	r3, #0
 800645a:	f000 8097 	beq.w	800658c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a24      	ldr	r2, [pc, #144]	; (80064f4 <HAL_DMA_Init+0x42c>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d021      	beq.n	80064ac <HAL_DMA_Init+0x3e4>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a22      	ldr	r2, [pc, #136]	; (80064f8 <HAL_DMA_Init+0x430>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d01c      	beq.n	80064ac <HAL_DMA_Init+0x3e4>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a21      	ldr	r2, [pc, #132]	; (80064fc <HAL_DMA_Init+0x434>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d017      	beq.n	80064ac <HAL_DMA_Init+0x3e4>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a1f      	ldr	r2, [pc, #124]	; (8006500 <HAL_DMA_Init+0x438>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d012      	beq.n	80064ac <HAL_DMA_Init+0x3e4>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a1e      	ldr	r2, [pc, #120]	; (8006504 <HAL_DMA_Init+0x43c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d00d      	beq.n	80064ac <HAL_DMA_Init+0x3e4>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a1c      	ldr	r2, [pc, #112]	; (8006508 <HAL_DMA_Init+0x440>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d008      	beq.n	80064ac <HAL_DMA_Init+0x3e4>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a1b      	ldr	r2, [pc, #108]	; (800650c <HAL_DMA_Init+0x444>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d003      	beq.n	80064ac <HAL_DMA_Init+0x3e4>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a19      	ldr	r2, [pc, #100]	; (8006510 <HAL_DMA_Init+0x448>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2202      	movs	r2, #2
 80064b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	4b12      	ldr	r3, [pc, #72]	; (8006514 <HAL_DMA_Init+0x44c>)
 80064ca:	4013      	ands	r3, r2
 80064cc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	2b40      	cmp	r3, #64	; 0x40
 80064d4:	d020      	beq.n	8006518 <HAL_DMA_Init+0x450>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	2b80      	cmp	r3, #128	; 0x80
 80064dc:	d102      	bne.n	80064e4 <HAL_DMA_Init+0x41c>
 80064de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80064e2:	e01a      	b.n	800651a <HAL_DMA_Init+0x452>
 80064e4:	2300      	movs	r3, #0
 80064e6:	e018      	b.n	800651a <HAL_DMA_Init+0x452>
 80064e8:	fe10803f 	.word	0xfe10803f
 80064ec:	5c001000 	.word	0x5c001000
 80064f0:	ffff0000 	.word	0xffff0000
 80064f4:	58025408 	.word	0x58025408
 80064f8:	5802541c 	.word	0x5802541c
 80064fc:	58025430 	.word	0x58025430
 8006500:	58025444 	.word	0x58025444
 8006504:	58025458 	.word	0x58025458
 8006508:	5802546c 	.word	0x5802546c
 800650c:	58025480 	.word	0x58025480
 8006510:	58025494 	.word	0x58025494
 8006514:	fffe000f 	.word	0xfffe000f
 8006518:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	68d2      	ldr	r2, [r2, #12]
 800651e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006520:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006528:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006530:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006538:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	69db      	ldr	r3, [r3, #28]
 800653e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006540:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006548:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	4313      	orrs	r3, r2
 800654e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	461a      	mov	r2, r3
 800655e:	4b6e      	ldr	r3, [pc, #440]	; (8006718 <HAL_DMA_Init+0x650>)
 8006560:	4413      	add	r3, r2
 8006562:	4a6e      	ldr	r2, [pc, #440]	; (800671c <HAL_DMA_Init+0x654>)
 8006564:	fba2 2303 	umull	r2, r3, r2, r3
 8006568:	091b      	lsrs	r3, r3, #4
 800656a:	009a      	lsls	r2, r3, #2
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f002 f9a7 	bl	80088c4 <DMA_CalcBaseAndBitshift>
 8006576:	4603      	mov	r3, r0
 8006578:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800657e:	f003 031f 	and.w	r3, r3, #31
 8006582:	2201      	movs	r2, #1
 8006584:	409a      	lsls	r2, r3
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	605a      	str	r2, [r3, #4]
 800658a:	e008      	b.n	800659e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2240      	movs	r2, #64	; 0x40
 8006590:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2203      	movs	r2, #3
 8006596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e0b7      	b.n	800670e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a5f      	ldr	r2, [pc, #380]	; (8006720 <HAL_DMA_Init+0x658>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d072      	beq.n	800668e <HAL_DMA_Init+0x5c6>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a5d      	ldr	r2, [pc, #372]	; (8006724 <HAL_DMA_Init+0x65c>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d06d      	beq.n	800668e <HAL_DMA_Init+0x5c6>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a5c      	ldr	r2, [pc, #368]	; (8006728 <HAL_DMA_Init+0x660>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d068      	beq.n	800668e <HAL_DMA_Init+0x5c6>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a5a      	ldr	r2, [pc, #360]	; (800672c <HAL_DMA_Init+0x664>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d063      	beq.n	800668e <HAL_DMA_Init+0x5c6>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a59      	ldr	r2, [pc, #356]	; (8006730 <HAL_DMA_Init+0x668>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d05e      	beq.n	800668e <HAL_DMA_Init+0x5c6>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a57      	ldr	r2, [pc, #348]	; (8006734 <HAL_DMA_Init+0x66c>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d059      	beq.n	800668e <HAL_DMA_Init+0x5c6>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a56      	ldr	r2, [pc, #344]	; (8006738 <HAL_DMA_Init+0x670>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d054      	beq.n	800668e <HAL_DMA_Init+0x5c6>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a54      	ldr	r2, [pc, #336]	; (800673c <HAL_DMA_Init+0x674>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d04f      	beq.n	800668e <HAL_DMA_Init+0x5c6>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a53      	ldr	r2, [pc, #332]	; (8006740 <HAL_DMA_Init+0x678>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d04a      	beq.n	800668e <HAL_DMA_Init+0x5c6>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a51      	ldr	r2, [pc, #324]	; (8006744 <HAL_DMA_Init+0x67c>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d045      	beq.n	800668e <HAL_DMA_Init+0x5c6>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a50      	ldr	r2, [pc, #320]	; (8006748 <HAL_DMA_Init+0x680>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d040      	beq.n	800668e <HAL_DMA_Init+0x5c6>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a4e      	ldr	r2, [pc, #312]	; (800674c <HAL_DMA_Init+0x684>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d03b      	beq.n	800668e <HAL_DMA_Init+0x5c6>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a4d      	ldr	r2, [pc, #308]	; (8006750 <HAL_DMA_Init+0x688>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d036      	beq.n	800668e <HAL_DMA_Init+0x5c6>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a4b      	ldr	r2, [pc, #300]	; (8006754 <HAL_DMA_Init+0x68c>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d031      	beq.n	800668e <HAL_DMA_Init+0x5c6>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a4a      	ldr	r2, [pc, #296]	; (8006758 <HAL_DMA_Init+0x690>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d02c      	beq.n	800668e <HAL_DMA_Init+0x5c6>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a48      	ldr	r2, [pc, #288]	; (800675c <HAL_DMA_Init+0x694>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d027      	beq.n	800668e <HAL_DMA_Init+0x5c6>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a47      	ldr	r2, [pc, #284]	; (8006760 <HAL_DMA_Init+0x698>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d022      	beq.n	800668e <HAL_DMA_Init+0x5c6>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a45      	ldr	r2, [pc, #276]	; (8006764 <HAL_DMA_Init+0x69c>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d01d      	beq.n	800668e <HAL_DMA_Init+0x5c6>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a44      	ldr	r2, [pc, #272]	; (8006768 <HAL_DMA_Init+0x6a0>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d018      	beq.n	800668e <HAL_DMA_Init+0x5c6>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a42      	ldr	r2, [pc, #264]	; (800676c <HAL_DMA_Init+0x6a4>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d013      	beq.n	800668e <HAL_DMA_Init+0x5c6>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a41      	ldr	r2, [pc, #260]	; (8006770 <HAL_DMA_Init+0x6a8>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d00e      	beq.n	800668e <HAL_DMA_Init+0x5c6>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a3f      	ldr	r2, [pc, #252]	; (8006774 <HAL_DMA_Init+0x6ac>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d009      	beq.n	800668e <HAL_DMA_Init+0x5c6>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a3e      	ldr	r2, [pc, #248]	; (8006778 <HAL_DMA_Init+0x6b0>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d004      	beq.n	800668e <HAL_DMA_Init+0x5c6>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a3c      	ldr	r2, [pc, #240]	; (800677c <HAL_DMA_Init+0x6b4>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d101      	bne.n	8006692 <HAL_DMA_Init+0x5ca>
 800668e:	2301      	movs	r3, #1
 8006690:	e000      	b.n	8006694 <HAL_DMA_Init+0x5cc>
 8006692:	2300      	movs	r3, #0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d032      	beq.n	80066fe <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f002 fa41 	bl	8008b20 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	2b80      	cmp	r3, #128	; 0x80
 80066a4:	d102      	bne.n	80066ac <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685a      	ldr	r2, [r3, #4]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066b4:	b2d2      	uxtb	r2, r2
 80066b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80066c0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d010      	beq.n	80066ec <HAL_DMA_Init+0x624>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	2b08      	cmp	r3, #8
 80066d0:	d80c      	bhi.n	80066ec <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f002 fabe 	bl	8008c54 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066dc:	2200      	movs	r2, #0
 80066de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80066e8:	605a      	str	r2, [r3, #4]
 80066ea:	e008      	b.n	80066fe <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3718      	adds	r7, #24
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	a7fdabf8 	.word	0xa7fdabf8
 800671c:	cccccccd 	.word	0xcccccccd
 8006720:	40020010 	.word	0x40020010
 8006724:	40020028 	.word	0x40020028
 8006728:	40020040 	.word	0x40020040
 800672c:	40020058 	.word	0x40020058
 8006730:	40020070 	.word	0x40020070
 8006734:	40020088 	.word	0x40020088
 8006738:	400200a0 	.word	0x400200a0
 800673c:	400200b8 	.word	0x400200b8
 8006740:	40020410 	.word	0x40020410
 8006744:	40020428 	.word	0x40020428
 8006748:	40020440 	.word	0x40020440
 800674c:	40020458 	.word	0x40020458
 8006750:	40020470 	.word	0x40020470
 8006754:	40020488 	.word	0x40020488
 8006758:	400204a0 	.word	0x400204a0
 800675c:	400204b8 	.word	0x400204b8
 8006760:	58025408 	.word	0x58025408
 8006764:	5802541c 	.word	0x5802541c
 8006768:	58025430 	.word	0x58025430
 800676c:	58025444 	.word	0x58025444
 8006770:	58025458 	.word	0x58025458
 8006774:	5802546c 	.word	0x5802546c
 8006778:	58025480 	.word	0x58025480
 800677c:	58025494 	.word	0x58025494

08006780 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
 800678c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d101      	bne.n	800679c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e226      	b.n	8006bea <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d101      	bne.n	80067aa <HAL_DMA_Start_IT+0x2a>
 80067a6:	2302      	movs	r3, #2
 80067a8:	e21f      	b.n	8006bea <HAL_DMA_Start_IT+0x46a>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2201      	movs	r2, #1
 80067ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	f040 820a 	bne.w	8006bd4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2202      	movs	r2, #2
 80067c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a68      	ldr	r2, [pc, #416]	; (8006974 <HAL_DMA_Start_IT+0x1f4>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d04a      	beq.n	800686e <HAL_DMA_Start_IT+0xee>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a66      	ldr	r2, [pc, #408]	; (8006978 <HAL_DMA_Start_IT+0x1f8>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d045      	beq.n	800686e <HAL_DMA_Start_IT+0xee>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a65      	ldr	r2, [pc, #404]	; (800697c <HAL_DMA_Start_IT+0x1fc>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d040      	beq.n	800686e <HAL_DMA_Start_IT+0xee>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a63      	ldr	r2, [pc, #396]	; (8006980 <HAL_DMA_Start_IT+0x200>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d03b      	beq.n	800686e <HAL_DMA_Start_IT+0xee>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a62      	ldr	r2, [pc, #392]	; (8006984 <HAL_DMA_Start_IT+0x204>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d036      	beq.n	800686e <HAL_DMA_Start_IT+0xee>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a60      	ldr	r2, [pc, #384]	; (8006988 <HAL_DMA_Start_IT+0x208>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d031      	beq.n	800686e <HAL_DMA_Start_IT+0xee>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a5f      	ldr	r2, [pc, #380]	; (800698c <HAL_DMA_Start_IT+0x20c>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d02c      	beq.n	800686e <HAL_DMA_Start_IT+0xee>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a5d      	ldr	r2, [pc, #372]	; (8006990 <HAL_DMA_Start_IT+0x210>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d027      	beq.n	800686e <HAL_DMA_Start_IT+0xee>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a5c      	ldr	r2, [pc, #368]	; (8006994 <HAL_DMA_Start_IT+0x214>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d022      	beq.n	800686e <HAL_DMA_Start_IT+0xee>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a5a      	ldr	r2, [pc, #360]	; (8006998 <HAL_DMA_Start_IT+0x218>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d01d      	beq.n	800686e <HAL_DMA_Start_IT+0xee>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a59      	ldr	r2, [pc, #356]	; (800699c <HAL_DMA_Start_IT+0x21c>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d018      	beq.n	800686e <HAL_DMA_Start_IT+0xee>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a57      	ldr	r2, [pc, #348]	; (80069a0 <HAL_DMA_Start_IT+0x220>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d013      	beq.n	800686e <HAL_DMA_Start_IT+0xee>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a56      	ldr	r2, [pc, #344]	; (80069a4 <HAL_DMA_Start_IT+0x224>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d00e      	beq.n	800686e <HAL_DMA_Start_IT+0xee>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a54      	ldr	r2, [pc, #336]	; (80069a8 <HAL_DMA_Start_IT+0x228>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d009      	beq.n	800686e <HAL_DMA_Start_IT+0xee>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a53      	ldr	r2, [pc, #332]	; (80069ac <HAL_DMA_Start_IT+0x22c>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d004      	beq.n	800686e <HAL_DMA_Start_IT+0xee>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a51      	ldr	r2, [pc, #324]	; (80069b0 <HAL_DMA_Start_IT+0x230>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d108      	bne.n	8006880 <HAL_DMA_Start_IT+0x100>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 0201 	bic.w	r2, r2, #1
 800687c:	601a      	str	r2, [r3, #0]
 800687e:	e007      	b.n	8006890 <HAL_DMA_Start_IT+0x110>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f022 0201 	bic.w	r2, r2, #1
 800688e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	68b9      	ldr	r1, [r7, #8]
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f001 fe68 	bl	800856c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a34      	ldr	r2, [pc, #208]	; (8006974 <HAL_DMA_Start_IT+0x1f4>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d04a      	beq.n	800693c <HAL_DMA_Start_IT+0x1bc>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a33      	ldr	r2, [pc, #204]	; (8006978 <HAL_DMA_Start_IT+0x1f8>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d045      	beq.n	800693c <HAL_DMA_Start_IT+0x1bc>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a31      	ldr	r2, [pc, #196]	; (800697c <HAL_DMA_Start_IT+0x1fc>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d040      	beq.n	800693c <HAL_DMA_Start_IT+0x1bc>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a30      	ldr	r2, [pc, #192]	; (8006980 <HAL_DMA_Start_IT+0x200>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d03b      	beq.n	800693c <HAL_DMA_Start_IT+0x1bc>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a2e      	ldr	r2, [pc, #184]	; (8006984 <HAL_DMA_Start_IT+0x204>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d036      	beq.n	800693c <HAL_DMA_Start_IT+0x1bc>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a2d      	ldr	r2, [pc, #180]	; (8006988 <HAL_DMA_Start_IT+0x208>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d031      	beq.n	800693c <HAL_DMA_Start_IT+0x1bc>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a2b      	ldr	r2, [pc, #172]	; (800698c <HAL_DMA_Start_IT+0x20c>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d02c      	beq.n	800693c <HAL_DMA_Start_IT+0x1bc>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a2a      	ldr	r2, [pc, #168]	; (8006990 <HAL_DMA_Start_IT+0x210>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d027      	beq.n	800693c <HAL_DMA_Start_IT+0x1bc>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a28      	ldr	r2, [pc, #160]	; (8006994 <HAL_DMA_Start_IT+0x214>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d022      	beq.n	800693c <HAL_DMA_Start_IT+0x1bc>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a27      	ldr	r2, [pc, #156]	; (8006998 <HAL_DMA_Start_IT+0x218>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d01d      	beq.n	800693c <HAL_DMA_Start_IT+0x1bc>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a25      	ldr	r2, [pc, #148]	; (800699c <HAL_DMA_Start_IT+0x21c>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d018      	beq.n	800693c <HAL_DMA_Start_IT+0x1bc>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a24      	ldr	r2, [pc, #144]	; (80069a0 <HAL_DMA_Start_IT+0x220>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d013      	beq.n	800693c <HAL_DMA_Start_IT+0x1bc>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a22      	ldr	r2, [pc, #136]	; (80069a4 <HAL_DMA_Start_IT+0x224>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d00e      	beq.n	800693c <HAL_DMA_Start_IT+0x1bc>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a21      	ldr	r2, [pc, #132]	; (80069a8 <HAL_DMA_Start_IT+0x228>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d009      	beq.n	800693c <HAL_DMA_Start_IT+0x1bc>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a1f      	ldr	r2, [pc, #124]	; (80069ac <HAL_DMA_Start_IT+0x22c>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d004      	beq.n	800693c <HAL_DMA_Start_IT+0x1bc>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a1e      	ldr	r2, [pc, #120]	; (80069b0 <HAL_DMA_Start_IT+0x230>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d101      	bne.n	8006940 <HAL_DMA_Start_IT+0x1c0>
 800693c:	2301      	movs	r3, #1
 800693e:	e000      	b.n	8006942 <HAL_DMA_Start_IT+0x1c2>
 8006940:	2300      	movs	r3, #0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d036      	beq.n	80069b4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f023 021e 	bic.w	r2, r3, #30
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f042 0216 	orr.w	r2, r2, #22
 8006958:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695e:	2b00      	cmp	r3, #0
 8006960:	d03e      	beq.n	80069e0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f042 0208 	orr.w	r2, r2, #8
 8006970:	601a      	str	r2, [r3, #0]
 8006972:	e035      	b.n	80069e0 <HAL_DMA_Start_IT+0x260>
 8006974:	40020010 	.word	0x40020010
 8006978:	40020028 	.word	0x40020028
 800697c:	40020040 	.word	0x40020040
 8006980:	40020058 	.word	0x40020058
 8006984:	40020070 	.word	0x40020070
 8006988:	40020088 	.word	0x40020088
 800698c:	400200a0 	.word	0x400200a0
 8006990:	400200b8 	.word	0x400200b8
 8006994:	40020410 	.word	0x40020410
 8006998:	40020428 	.word	0x40020428
 800699c:	40020440 	.word	0x40020440
 80069a0:	40020458 	.word	0x40020458
 80069a4:	40020470 	.word	0x40020470
 80069a8:	40020488 	.word	0x40020488
 80069ac:	400204a0 	.word	0x400204a0
 80069b0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f023 020e 	bic.w	r2, r3, #14
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f042 020a 	orr.w	r2, r2, #10
 80069c6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d007      	beq.n	80069e0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f042 0204 	orr.w	r2, r2, #4
 80069de:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a83      	ldr	r2, [pc, #524]	; (8006bf4 <HAL_DMA_Start_IT+0x474>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d072      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x350>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a82      	ldr	r2, [pc, #520]	; (8006bf8 <HAL_DMA_Start_IT+0x478>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d06d      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x350>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a80      	ldr	r2, [pc, #512]	; (8006bfc <HAL_DMA_Start_IT+0x47c>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d068      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x350>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a7f      	ldr	r2, [pc, #508]	; (8006c00 <HAL_DMA_Start_IT+0x480>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d063      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x350>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a7d      	ldr	r2, [pc, #500]	; (8006c04 <HAL_DMA_Start_IT+0x484>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d05e      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x350>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a7c      	ldr	r2, [pc, #496]	; (8006c08 <HAL_DMA_Start_IT+0x488>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d059      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x350>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a7a      	ldr	r2, [pc, #488]	; (8006c0c <HAL_DMA_Start_IT+0x48c>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d054      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x350>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a79      	ldr	r2, [pc, #484]	; (8006c10 <HAL_DMA_Start_IT+0x490>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d04f      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x350>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a77      	ldr	r2, [pc, #476]	; (8006c14 <HAL_DMA_Start_IT+0x494>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d04a      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x350>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a76      	ldr	r2, [pc, #472]	; (8006c18 <HAL_DMA_Start_IT+0x498>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d045      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x350>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a74      	ldr	r2, [pc, #464]	; (8006c1c <HAL_DMA_Start_IT+0x49c>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d040      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x350>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a73      	ldr	r2, [pc, #460]	; (8006c20 <HAL_DMA_Start_IT+0x4a0>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d03b      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x350>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a71      	ldr	r2, [pc, #452]	; (8006c24 <HAL_DMA_Start_IT+0x4a4>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d036      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x350>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a70      	ldr	r2, [pc, #448]	; (8006c28 <HAL_DMA_Start_IT+0x4a8>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d031      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x350>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a6e      	ldr	r2, [pc, #440]	; (8006c2c <HAL_DMA_Start_IT+0x4ac>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d02c      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x350>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a6d      	ldr	r2, [pc, #436]	; (8006c30 <HAL_DMA_Start_IT+0x4b0>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d027      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x350>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a6b      	ldr	r2, [pc, #428]	; (8006c34 <HAL_DMA_Start_IT+0x4b4>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d022      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x350>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a6a      	ldr	r2, [pc, #424]	; (8006c38 <HAL_DMA_Start_IT+0x4b8>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d01d      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x350>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a68      	ldr	r2, [pc, #416]	; (8006c3c <HAL_DMA_Start_IT+0x4bc>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d018      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x350>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a67      	ldr	r2, [pc, #412]	; (8006c40 <HAL_DMA_Start_IT+0x4c0>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d013      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x350>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a65      	ldr	r2, [pc, #404]	; (8006c44 <HAL_DMA_Start_IT+0x4c4>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d00e      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x350>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a64      	ldr	r2, [pc, #400]	; (8006c48 <HAL_DMA_Start_IT+0x4c8>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d009      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x350>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a62      	ldr	r2, [pc, #392]	; (8006c4c <HAL_DMA_Start_IT+0x4cc>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d004      	beq.n	8006ad0 <HAL_DMA_Start_IT+0x350>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a61      	ldr	r2, [pc, #388]	; (8006c50 <HAL_DMA_Start_IT+0x4d0>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d101      	bne.n	8006ad4 <HAL_DMA_Start_IT+0x354>
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e000      	b.n	8006ad6 <HAL_DMA_Start_IT+0x356>
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d01a      	beq.n	8006b10 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d007      	beq.n	8006af8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006af2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006af6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d007      	beq.n	8006b10 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b0e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a37      	ldr	r2, [pc, #220]	; (8006bf4 <HAL_DMA_Start_IT+0x474>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d04a      	beq.n	8006bb0 <HAL_DMA_Start_IT+0x430>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a36      	ldr	r2, [pc, #216]	; (8006bf8 <HAL_DMA_Start_IT+0x478>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d045      	beq.n	8006bb0 <HAL_DMA_Start_IT+0x430>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a34      	ldr	r2, [pc, #208]	; (8006bfc <HAL_DMA_Start_IT+0x47c>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d040      	beq.n	8006bb0 <HAL_DMA_Start_IT+0x430>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a33      	ldr	r2, [pc, #204]	; (8006c00 <HAL_DMA_Start_IT+0x480>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d03b      	beq.n	8006bb0 <HAL_DMA_Start_IT+0x430>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a31      	ldr	r2, [pc, #196]	; (8006c04 <HAL_DMA_Start_IT+0x484>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d036      	beq.n	8006bb0 <HAL_DMA_Start_IT+0x430>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a30      	ldr	r2, [pc, #192]	; (8006c08 <HAL_DMA_Start_IT+0x488>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d031      	beq.n	8006bb0 <HAL_DMA_Start_IT+0x430>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a2e      	ldr	r2, [pc, #184]	; (8006c0c <HAL_DMA_Start_IT+0x48c>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d02c      	beq.n	8006bb0 <HAL_DMA_Start_IT+0x430>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a2d      	ldr	r2, [pc, #180]	; (8006c10 <HAL_DMA_Start_IT+0x490>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d027      	beq.n	8006bb0 <HAL_DMA_Start_IT+0x430>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a2b      	ldr	r2, [pc, #172]	; (8006c14 <HAL_DMA_Start_IT+0x494>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d022      	beq.n	8006bb0 <HAL_DMA_Start_IT+0x430>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a2a      	ldr	r2, [pc, #168]	; (8006c18 <HAL_DMA_Start_IT+0x498>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d01d      	beq.n	8006bb0 <HAL_DMA_Start_IT+0x430>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a28      	ldr	r2, [pc, #160]	; (8006c1c <HAL_DMA_Start_IT+0x49c>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d018      	beq.n	8006bb0 <HAL_DMA_Start_IT+0x430>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a27      	ldr	r2, [pc, #156]	; (8006c20 <HAL_DMA_Start_IT+0x4a0>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d013      	beq.n	8006bb0 <HAL_DMA_Start_IT+0x430>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a25      	ldr	r2, [pc, #148]	; (8006c24 <HAL_DMA_Start_IT+0x4a4>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d00e      	beq.n	8006bb0 <HAL_DMA_Start_IT+0x430>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a24      	ldr	r2, [pc, #144]	; (8006c28 <HAL_DMA_Start_IT+0x4a8>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d009      	beq.n	8006bb0 <HAL_DMA_Start_IT+0x430>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a22      	ldr	r2, [pc, #136]	; (8006c2c <HAL_DMA_Start_IT+0x4ac>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d004      	beq.n	8006bb0 <HAL_DMA_Start_IT+0x430>
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a21      	ldr	r2, [pc, #132]	; (8006c30 <HAL_DMA_Start_IT+0x4b0>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d108      	bne.n	8006bc2 <HAL_DMA_Start_IT+0x442>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f042 0201 	orr.w	r2, r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]
 8006bc0:	e012      	b.n	8006be8 <HAL_DMA_Start_IT+0x468>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f042 0201 	orr.w	r2, r2, #1
 8006bd0:	601a      	str	r2, [r3, #0]
 8006bd2:	e009      	b.n	8006be8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bda:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3718      	adds	r7, #24
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	40020010 	.word	0x40020010
 8006bf8:	40020028 	.word	0x40020028
 8006bfc:	40020040 	.word	0x40020040
 8006c00:	40020058 	.word	0x40020058
 8006c04:	40020070 	.word	0x40020070
 8006c08:	40020088 	.word	0x40020088
 8006c0c:	400200a0 	.word	0x400200a0
 8006c10:	400200b8 	.word	0x400200b8
 8006c14:	40020410 	.word	0x40020410
 8006c18:	40020428 	.word	0x40020428
 8006c1c:	40020440 	.word	0x40020440
 8006c20:	40020458 	.word	0x40020458
 8006c24:	40020470 	.word	0x40020470
 8006c28:	40020488 	.word	0x40020488
 8006c2c:	400204a0 	.word	0x400204a0
 8006c30:	400204b8 	.word	0x400204b8
 8006c34:	58025408 	.word	0x58025408
 8006c38:	5802541c 	.word	0x5802541c
 8006c3c:	58025430 	.word	0x58025430
 8006c40:	58025444 	.word	0x58025444
 8006c44:	58025458 	.word	0x58025458
 8006c48:	5802546c 	.word	0x5802546c
 8006c4c:	58025480 	.word	0x58025480
 8006c50:	58025494 	.word	0x58025494

08006c54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b086      	sub	sp, #24
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006c5c:	f7fe fede 	bl	8005a1c <HAL_GetTick>
 8006c60:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d101      	bne.n	8006c6c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e2dc      	b.n	8007226 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d008      	beq.n	8006c8a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2280      	movs	r2, #128	; 0x80
 8006c7c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e2cd      	b.n	8007226 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a76      	ldr	r2, [pc, #472]	; (8006e68 <HAL_DMA_Abort+0x214>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d04a      	beq.n	8006d2a <HAL_DMA_Abort+0xd6>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a74      	ldr	r2, [pc, #464]	; (8006e6c <HAL_DMA_Abort+0x218>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d045      	beq.n	8006d2a <HAL_DMA_Abort+0xd6>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a73      	ldr	r2, [pc, #460]	; (8006e70 <HAL_DMA_Abort+0x21c>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d040      	beq.n	8006d2a <HAL_DMA_Abort+0xd6>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a71      	ldr	r2, [pc, #452]	; (8006e74 <HAL_DMA_Abort+0x220>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d03b      	beq.n	8006d2a <HAL_DMA_Abort+0xd6>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a70      	ldr	r2, [pc, #448]	; (8006e78 <HAL_DMA_Abort+0x224>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d036      	beq.n	8006d2a <HAL_DMA_Abort+0xd6>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a6e      	ldr	r2, [pc, #440]	; (8006e7c <HAL_DMA_Abort+0x228>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d031      	beq.n	8006d2a <HAL_DMA_Abort+0xd6>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a6d      	ldr	r2, [pc, #436]	; (8006e80 <HAL_DMA_Abort+0x22c>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d02c      	beq.n	8006d2a <HAL_DMA_Abort+0xd6>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a6b      	ldr	r2, [pc, #428]	; (8006e84 <HAL_DMA_Abort+0x230>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d027      	beq.n	8006d2a <HAL_DMA_Abort+0xd6>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a6a      	ldr	r2, [pc, #424]	; (8006e88 <HAL_DMA_Abort+0x234>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d022      	beq.n	8006d2a <HAL_DMA_Abort+0xd6>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a68      	ldr	r2, [pc, #416]	; (8006e8c <HAL_DMA_Abort+0x238>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d01d      	beq.n	8006d2a <HAL_DMA_Abort+0xd6>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a67      	ldr	r2, [pc, #412]	; (8006e90 <HAL_DMA_Abort+0x23c>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d018      	beq.n	8006d2a <HAL_DMA_Abort+0xd6>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a65      	ldr	r2, [pc, #404]	; (8006e94 <HAL_DMA_Abort+0x240>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d013      	beq.n	8006d2a <HAL_DMA_Abort+0xd6>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a64      	ldr	r2, [pc, #400]	; (8006e98 <HAL_DMA_Abort+0x244>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d00e      	beq.n	8006d2a <HAL_DMA_Abort+0xd6>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a62      	ldr	r2, [pc, #392]	; (8006e9c <HAL_DMA_Abort+0x248>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d009      	beq.n	8006d2a <HAL_DMA_Abort+0xd6>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a61      	ldr	r2, [pc, #388]	; (8006ea0 <HAL_DMA_Abort+0x24c>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d004      	beq.n	8006d2a <HAL_DMA_Abort+0xd6>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a5f      	ldr	r2, [pc, #380]	; (8006ea4 <HAL_DMA_Abort+0x250>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d101      	bne.n	8006d2e <HAL_DMA_Abort+0xda>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e000      	b.n	8006d30 <HAL_DMA_Abort+0xdc>
 8006d2e:	2300      	movs	r3, #0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d013      	beq.n	8006d5c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f022 021e 	bic.w	r2, r2, #30
 8006d42:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	695a      	ldr	r2, [r3, #20]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d52:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	617b      	str	r3, [r7, #20]
 8006d5a:	e00a      	b.n	8006d72 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 020e 	bic.w	r2, r2, #14
 8006d6a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a3c      	ldr	r2, [pc, #240]	; (8006e68 <HAL_DMA_Abort+0x214>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d072      	beq.n	8006e62 <HAL_DMA_Abort+0x20e>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a3a      	ldr	r2, [pc, #232]	; (8006e6c <HAL_DMA_Abort+0x218>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d06d      	beq.n	8006e62 <HAL_DMA_Abort+0x20e>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a39      	ldr	r2, [pc, #228]	; (8006e70 <HAL_DMA_Abort+0x21c>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d068      	beq.n	8006e62 <HAL_DMA_Abort+0x20e>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a37      	ldr	r2, [pc, #220]	; (8006e74 <HAL_DMA_Abort+0x220>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d063      	beq.n	8006e62 <HAL_DMA_Abort+0x20e>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a36      	ldr	r2, [pc, #216]	; (8006e78 <HAL_DMA_Abort+0x224>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d05e      	beq.n	8006e62 <HAL_DMA_Abort+0x20e>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a34      	ldr	r2, [pc, #208]	; (8006e7c <HAL_DMA_Abort+0x228>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d059      	beq.n	8006e62 <HAL_DMA_Abort+0x20e>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a33      	ldr	r2, [pc, #204]	; (8006e80 <HAL_DMA_Abort+0x22c>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d054      	beq.n	8006e62 <HAL_DMA_Abort+0x20e>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a31      	ldr	r2, [pc, #196]	; (8006e84 <HAL_DMA_Abort+0x230>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d04f      	beq.n	8006e62 <HAL_DMA_Abort+0x20e>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a30      	ldr	r2, [pc, #192]	; (8006e88 <HAL_DMA_Abort+0x234>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d04a      	beq.n	8006e62 <HAL_DMA_Abort+0x20e>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a2e      	ldr	r2, [pc, #184]	; (8006e8c <HAL_DMA_Abort+0x238>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d045      	beq.n	8006e62 <HAL_DMA_Abort+0x20e>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a2d      	ldr	r2, [pc, #180]	; (8006e90 <HAL_DMA_Abort+0x23c>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d040      	beq.n	8006e62 <HAL_DMA_Abort+0x20e>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a2b      	ldr	r2, [pc, #172]	; (8006e94 <HAL_DMA_Abort+0x240>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d03b      	beq.n	8006e62 <HAL_DMA_Abort+0x20e>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a2a      	ldr	r2, [pc, #168]	; (8006e98 <HAL_DMA_Abort+0x244>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d036      	beq.n	8006e62 <HAL_DMA_Abort+0x20e>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a28      	ldr	r2, [pc, #160]	; (8006e9c <HAL_DMA_Abort+0x248>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d031      	beq.n	8006e62 <HAL_DMA_Abort+0x20e>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a27      	ldr	r2, [pc, #156]	; (8006ea0 <HAL_DMA_Abort+0x24c>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d02c      	beq.n	8006e62 <HAL_DMA_Abort+0x20e>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a25      	ldr	r2, [pc, #148]	; (8006ea4 <HAL_DMA_Abort+0x250>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d027      	beq.n	8006e62 <HAL_DMA_Abort+0x20e>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a24      	ldr	r2, [pc, #144]	; (8006ea8 <HAL_DMA_Abort+0x254>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d022      	beq.n	8006e62 <HAL_DMA_Abort+0x20e>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a22      	ldr	r2, [pc, #136]	; (8006eac <HAL_DMA_Abort+0x258>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d01d      	beq.n	8006e62 <HAL_DMA_Abort+0x20e>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a21      	ldr	r2, [pc, #132]	; (8006eb0 <HAL_DMA_Abort+0x25c>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d018      	beq.n	8006e62 <HAL_DMA_Abort+0x20e>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a1f      	ldr	r2, [pc, #124]	; (8006eb4 <HAL_DMA_Abort+0x260>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d013      	beq.n	8006e62 <HAL_DMA_Abort+0x20e>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a1e      	ldr	r2, [pc, #120]	; (8006eb8 <HAL_DMA_Abort+0x264>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d00e      	beq.n	8006e62 <HAL_DMA_Abort+0x20e>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a1c      	ldr	r2, [pc, #112]	; (8006ebc <HAL_DMA_Abort+0x268>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d009      	beq.n	8006e62 <HAL_DMA_Abort+0x20e>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a1b      	ldr	r2, [pc, #108]	; (8006ec0 <HAL_DMA_Abort+0x26c>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d004      	beq.n	8006e62 <HAL_DMA_Abort+0x20e>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a19      	ldr	r2, [pc, #100]	; (8006ec4 <HAL_DMA_Abort+0x270>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d132      	bne.n	8006ec8 <HAL_DMA_Abort+0x274>
 8006e62:	2301      	movs	r3, #1
 8006e64:	e031      	b.n	8006eca <HAL_DMA_Abort+0x276>
 8006e66:	bf00      	nop
 8006e68:	40020010 	.word	0x40020010
 8006e6c:	40020028 	.word	0x40020028
 8006e70:	40020040 	.word	0x40020040
 8006e74:	40020058 	.word	0x40020058
 8006e78:	40020070 	.word	0x40020070
 8006e7c:	40020088 	.word	0x40020088
 8006e80:	400200a0 	.word	0x400200a0
 8006e84:	400200b8 	.word	0x400200b8
 8006e88:	40020410 	.word	0x40020410
 8006e8c:	40020428 	.word	0x40020428
 8006e90:	40020440 	.word	0x40020440
 8006e94:	40020458 	.word	0x40020458
 8006e98:	40020470 	.word	0x40020470
 8006e9c:	40020488 	.word	0x40020488
 8006ea0:	400204a0 	.word	0x400204a0
 8006ea4:	400204b8 	.word	0x400204b8
 8006ea8:	58025408 	.word	0x58025408
 8006eac:	5802541c 	.word	0x5802541c
 8006eb0:	58025430 	.word	0x58025430
 8006eb4:	58025444 	.word	0x58025444
 8006eb8:	58025458 	.word	0x58025458
 8006ebc:	5802546c 	.word	0x5802546c
 8006ec0:	58025480 	.word	0x58025480
 8006ec4:	58025494 	.word	0x58025494
 8006ec8:	2300      	movs	r3, #0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d007      	beq.n	8006ede <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ed8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006edc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a6d      	ldr	r2, [pc, #436]	; (8007098 <HAL_DMA_Abort+0x444>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d04a      	beq.n	8006f7e <HAL_DMA_Abort+0x32a>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a6b      	ldr	r2, [pc, #428]	; (800709c <HAL_DMA_Abort+0x448>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d045      	beq.n	8006f7e <HAL_DMA_Abort+0x32a>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a6a      	ldr	r2, [pc, #424]	; (80070a0 <HAL_DMA_Abort+0x44c>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d040      	beq.n	8006f7e <HAL_DMA_Abort+0x32a>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a68      	ldr	r2, [pc, #416]	; (80070a4 <HAL_DMA_Abort+0x450>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d03b      	beq.n	8006f7e <HAL_DMA_Abort+0x32a>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a67      	ldr	r2, [pc, #412]	; (80070a8 <HAL_DMA_Abort+0x454>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d036      	beq.n	8006f7e <HAL_DMA_Abort+0x32a>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a65      	ldr	r2, [pc, #404]	; (80070ac <HAL_DMA_Abort+0x458>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d031      	beq.n	8006f7e <HAL_DMA_Abort+0x32a>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a64      	ldr	r2, [pc, #400]	; (80070b0 <HAL_DMA_Abort+0x45c>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d02c      	beq.n	8006f7e <HAL_DMA_Abort+0x32a>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a62      	ldr	r2, [pc, #392]	; (80070b4 <HAL_DMA_Abort+0x460>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d027      	beq.n	8006f7e <HAL_DMA_Abort+0x32a>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a61      	ldr	r2, [pc, #388]	; (80070b8 <HAL_DMA_Abort+0x464>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d022      	beq.n	8006f7e <HAL_DMA_Abort+0x32a>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a5f      	ldr	r2, [pc, #380]	; (80070bc <HAL_DMA_Abort+0x468>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d01d      	beq.n	8006f7e <HAL_DMA_Abort+0x32a>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a5e      	ldr	r2, [pc, #376]	; (80070c0 <HAL_DMA_Abort+0x46c>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d018      	beq.n	8006f7e <HAL_DMA_Abort+0x32a>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a5c      	ldr	r2, [pc, #368]	; (80070c4 <HAL_DMA_Abort+0x470>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d013      	beq.n	8006f7e <HAL_DMA_Abort+0x32a>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a5b      	ldr	r2, [pc, #364]	; (80070c8 <HAL_DMA_Abort+0x474>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d00e      	beq.n	8006f7e <HAL_DMA_Abort+0x32a>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a59      	ldr	r2, [pc, #356]	; (80070cc <HAL_DMA_Abort+0x478>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d009      	beq.n	8006f7e <HAL_DMA_Abort+0x32a>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a58      	ldr	r2, [pc, #352]	; (80070d0 <HAL_DMA_Abort+0x47c>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d004      	beq.n	8006f7e <HAL_DMA_Abort+0x32a>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a56      	ldr	r2, [pc, #344]	; (80070d4 <HAL_DMA_Abort+0x480>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d108      	bne.n	8006f90 <HAL_DMA_Abort+0x33c>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f022 0201 	bic.w	r2, r2, #1
 8006f8c:	601a      	str	r2, [r3, #0]
 8006f8e:	e007      	b.n	8006fa0 <HAL_DMA_Abort+0x34c>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f022 0201 	bic.w	r2, r2, #1
 8006f9e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006fa0:	e013      	b.n	8006fca <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006fa2:	f7fe fd3b 	bl	8005a1c <HAL_GetTick>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	2b05      	cmp	r3, #5
 8006fae:	d90c      	bls.n	8006fca <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2220      	movs	r2, #32
 8006fb4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2203      	movs	r2, #3
 8006fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e12d      	b.n	8007226 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1e5      	bne.n	8006fa2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a2f      	ldr	r2, [pc, #188]	; (8007098 <HAL_DMA_Abort+0x444>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d04a      	beq.n	8007076 <HAL_DMA_Abort+0x422>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a2d      	ldr	r2, [pc, #180]	; (800709c <HAL_DMA_Abort+0x448>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d045      	beq.n	8007076 <HAL_DMA_Abort+0x422>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a2c      	ldr	r2, [pc, #176]	; (80070a0 <HAL_DMA_Abort+0x44c>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d040      	beq.n	8007076 <HAL_DMA_Abort+0x422>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a2a      	ldr	r2, [pc, #168]	; (80070a4 <HAL_DMA_Abort+0x450>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d03b      	beq.n	8007076 <HAL_DMA_Abort+0x422>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a29      	ldr	r2, [pc, #164]	; (80070a8 <HAL_DMA_Abort+0x454>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d036      	beq.n	8007076 <HAL_DMA_Abort+0x422>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a27      	ldr	r2, [pc, #156]	; (80070ac <HAL_DMA_Abort+0x458>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d031      	beq.n	8007076 <HAL_DMA_Abort+0x422>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a26      	ldr	r2, [pc, #152]	; (80070b0 <HAL_DMA_Abort+0x45c>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d02c      	beq.n	8007076 <HAL_DMA_Abort+0x422>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a24      	ldr	r2, [pc, #144]	; (80070b4 <HAL_DMA_Abort+0x460>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d027      	beq.n	8007076 <HAL_DMA_Abort+0x422>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a23      	ldr	r2, [pc, #140]	; (80070b8 <HAL_DMA_Abort+0x464>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d022      	beq.n	8007076 <HAL_DMA_Abort+0x422>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a21      	ldr	r2, [pc, #132]	; (80070bc <HAL_DMA_Abort+0x468>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d01d      	beq.n	8007076 <HAL_DMA_Abort+0x422>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a20      	ldr	r2, [pc, #128]	; (80070c0 <HAL_DMA_Abort+0x46c>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d018      	beq.n	8007076 <HAL_DMA_Abort+0x422>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a1e      	ldr	r2, [pc, #120]	; (80070c4 <HAL_DMA_Abort+0x470>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d013      	beq.n	8007076 <HAL_DMA_Abort+0x422>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a1d      	ldr	r2, [pc, #116]	; (80070c8 <HAL_DMA_Abort+0x474>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d00e      	beq.n	8007076 <HAL_DMA_Abort+0x422>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a1b      	ldr	r2, [pc, #108]	; (80070cc <HAL_DMA_Abort+0x478>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d009      	beq.n	8007076 <HAL_DMA_Abort+0x422>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a1a      	ldr	r2, [pc, #104]	; (80070d0 <HAL_DMA_Abort+0x47c>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d004      	beq.n	8007076 <HAL_DMA_Abort+0x422>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a18      	ldr	r2, [pc, #96]	; (80070d4 <HAL_DMA_Abort+0x480>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d101      	bne.n	800707a <HAL_DMA_Abort+0x426>
 8007076:	2301      	movs	r3, #1
 8007078:	e000      	b.n	800707c <HAL_DMA_Abort+0x428>
 800707a:	2300      	movs	r3, #0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d02b      	beq.n	80070d8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007084:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800708a:	f003 031f 	and.w	r3, r3, #31
 800708e:	223f      	movs	r2, #63	; 0x3f
 8007090:	409a      	lsls	r2, r3
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	609a      	str	r2, [r3, #8]
 8007096:	e02a      	b.n	80070ee <HAL_DMA_Abort+0x49a>
 8007098:	40020010 	.word	0x40020010
 800709c:	40020028 	.word	0x40020028
 80070a0:	40020040 	.word	0x40020040
 80070a4:	40020058 	.word	0x40020058
 80070a8:	40020070 	.word	0x40020070
 80070ac:	40020088 	.word	0x40020088
 80070b0:	400200a0 	.word	0x400200a0
 80070b4:	400200b8 	.word	0x400200b8
 80070b8:	40020410 	.word	0x40020410
 80070bc:	40020428 	.word	0x40020428
 80070c0:	40020440 	.word	0x40020440
 80070c4:	40020458 	.word	0x40020458
 80070c8:	40020470 	.word	0x40020470
 80070cc:	40020488 	.word	0x40020488
 80070d0:	400204a0 	.word	0x400204a0
 80070d4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070dc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070e2:	f003 031f 	and.w	r3, r3, #31
 80070e6:	2201      	movs	r2, #1
 80070e8:	409a      	lsls	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a4f      	ldr	r2, [pc, #316]	; (8007230 <HAL_DMA_Abort+0x5dc>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d072      	beq.n	80071de <HAL_DMA_Abort+0x58a>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a4d      	ldr	r2, [pc, #308]	; (8007234 <HAL_DMA_Abort+0x5e0>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d06d      	beq.n	80071de <HAL_DMA_Abort+0x58a>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a4c      	ldr	r2, [pc, #304]	; (8007238 <HAL_DMA_Abort+0x5e4>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d068      	beq.n	80071de <HAL_DMA_Abort+0x58a>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a4a      	ldr	r2, [pc, #296]	; (800723c <HAL_DMA_Abort+0x5e8>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d063      	beq.n	80071de <HAL_DMA_Abort+0x58a>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a49      	ldr	r2, [pc, #292]	; (8007240 <HAL_DMA_Abort+0x5ec>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d05e      	beq.n	80071de <HAL_DMA_Abort+0x58a>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a47      	ldr	r2, [pc, #284]	; (8007244 <HAL_DMA_Abort+0x5f0>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d059      	beq.n	80071de <HAL_DMA_Abort+0x58a>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a46      	ldr	r2, [pc, #280]	; (8007248 <HAL_DMA_Abort+0x5f4>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d054      	beq.n	80071de <HAL_DMA_Abort+0x58a>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a44      	ldr	r2, [pc, #272]	; (800724c <HAL_DMA_Abort+0x5f8>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d04f      	beq.n	80071de <HAL_DMA_Abort+0x58a>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a43      	ldr	r2, [pc, #268]	; (8007250 <HAL_DMA_Abort+0x5fc>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d04a      	beq.n	80071de <HAL_DMA_Abort+0x58a>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a41      	ldr	r2, [pc, #260]	; (8007254 <HAL_DMA_Abort+0x600>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d045      	beq.n	80071de <HAL_DMA_Abort+0x58a>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a40      	ldr	r2, [pc, #256]	; (8007258 <HAL_DMA_Abort+0x604>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d040      	beq.n	80071de <HAL_DMA_Abort+0x58a>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a3e      	ldr	r2, [pc, #248]	; (800725c <HAL_DMA_Abort+0x608>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d03b      	beq.n	80071de <HAL_DMA_Abort+0x58a>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a3d      	ldr	r2, [pc, #244]	; (8007260 <HAL_DMA_Abort+0x60c>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d036      	beq.n	80071de <HAL_DMA_Abort+0x58a>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a3b      	ldr	r2, [pc, #236]	; (8007264 <HAL_DMA_Abort+0x610>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d031      	beq.n	80071de <HAL_DMA_Abort+0x58a>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a3a      	ldr	r2, [pc, #232]	; (8007268 <HAL_DMA_Abort+0x614>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d02c      	beq.n	80071de <HAL_DMA_Abort+0x58a>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a38      	ldr	r2, [pc, #224]	; (800726c <HAL_DMA_Abort+0x618>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d027      	beq.n	80071de <HAL_DMA_Abort+0x58a>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a37      	ldr	r2, [pc, #220]	; (8007270 <HAL_DMA_Abort+0x61c>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d022      	beq.n	80071de <HAL_DMA_Abort+0x58a>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a35      	ldr	r2, [pc, #212]	; (8007274 <HAL_DMA_Abort+0x620>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d01d      	beq.n	80071de <HAL_DMA_Abort+0x58a>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a34      	ldr	r2, [pc, #208]	; (8007278 <HAL_DMA_Abort+0x624>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d018      	beq.n	80071de <HAL_DMA_Abort+0x58a>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a32      	ldr	r2, [pc, #200]	; (800727c <HAL_DMA_Abort+0x628>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d013      	beq.n	80071de <HAL_DMA_Abort+0x58a>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a31      	ldr	r2, [pc, #196]	; (8007280 <HAL_DMA_Abort+0x62c>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d00e      	beq.n	80071de <HAL_DMA_Abort+0x58a>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a2f      	ldr	r2, [pc, #188]	; (8007284 <HAL_DMA_Abort+0x630>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d009      	beq.n	80071de <HAL_DMA_Abort+0x58a>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a2e      	ldr	r2, [pc, #184]	; (8007288 <HAL_DMA_Abort+0x634>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d004      	beq.n	80071de <HAL_DMA_Abort+0x58a>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a2c      	ldr	r2, [pc, #176]	; (800728c <HAL_DMA_Abort+0x638>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d101      	bne.n	80071e2 <HAL_DMA_Abort+0x58e>
 80071de:	2301      	movs	r3, #1
 80071e0:	e000      	b.n	80071e4 <HAL_DMA_Abort+0x590>
 80071e2:	2300      	movs	r3, #0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d015      	beq.n	8007214 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80071f0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00c      	beq.n	8007214 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007204:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007208:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007212:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3718      	adds	r7, #24
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	40020010 	.word	0x40020010
 8007234:	40020028 	.word	0x40020028
 8007238:	40020040 	.word	0x40020040
 800723c:	40020058 	.word	0x40020058
 8007240:	40020070 	.word	0x40020070
 8007244:	40020088 	.word	0x40020088
 8007248:	400200a0 	.word	0x400200a0
 800724c:	400200b8 	.word	0x400200b8
 8007250:	40020410 	.word	0x40020410
 8007254:	40020428 	.word	0x40020428
 8007258:	40020440 	.word	0x40020440
 800725c:	40020458 	.word	0x40020458
 8007260:	40020470 	.word	0x40020470
 8007264:	40020488 	.word	0x40020488
 8007268:	400204a0 	.word	0x400204a0
 800726c:	400204b8 	.word	0x400204b8
 8007270:	58025408 	.word	0x58025408
 8007274:	5802541c 	.word	0x5802541c
 8007278:	58025430 	.word	0x58025430
 800727c:	58025444 	.word	0x58025444
 8007280:	58025458 	.word	0x58025458
 8007284:	5802546c 	.word	0x5802546c
 8007288:	58025480 	.word	0x58025480
 800728c:	58025494 	.word	0x58025494

08007290 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d101      	bne.n	80072a2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e205      	b.n	80076ae <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d004      	beq.n	80072b8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2280      	movs	r2, #128	; 0x80
 80072b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e1fa      	b.n	80076ae <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a8c      	ldr	r2, [pc, #560]	; (80074f0 <HAL_DMA_Abort_IT+0x260>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d04a      	beq.n	8007358 <HAL_DMA_Abort_IT+0xc8>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a8b      	ldr	r2, [pc, #556]	; (80074f4 <HAL_DMA_Abort_IT+0x264>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d045      	beq.n	8007358 <HAL_DMA_Abort_IT+0xc8>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a89      	ldr	r2, [pc, #548]	; (80074f8 <HAL_DMA_Abort_IT+0x268>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d040      	beq.n	8007358 <HAL_DMA_Abort_IT+0xc8>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a88      	ldr	r2, [pc, #544]	; (80074fc <HAL_DMA_Abort_IT+0x26c>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d03b      	beq.n	8007358 <HAL_DMA_Abort_IT+0xc8>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a86      	ldr	r2, [pc, #536]	; (8007500 <HAL_DMA_Abort_IT+0x270>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d036      	beq.n	8007358 <HAL_DMA_Abort_IT+0xc8>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a85      	ldr	r2, [pc, #532]	; (8007504 <HAL_DMA_Abort_IT+0x274>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d031      	beq.n	8007358 <HAL_DMA_Abort_IT+0xc8>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a83      	ldr	r2, [pc, #524]	; (8007508 <HAL_DMA_Abort_IT+0x278>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d02c      	beq.n	8007358 <HAL_DMA_Abort_IT+0xc8>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a82      	ldr	r2, [pc, #520]	; (800750c <HAL_DMA_Abort_IT+0x27c>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d027      	beq.n	8007358 <HAL_DMA_Abort_IT+0xc8>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a80      	ldr	r2, [pc, #512]	; (8007510 <HAL_DMA_Abort_IT+0x280>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d022      	beq.n	8007358 <HAL_DMA_Abort_IT+0xc8>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a7f      	ldr	r2, [pc, #508]	; (8007514 <HAL_DMA_Abort_IT+0x284>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d01d      	beq.n	8007358 <HAL_DMA_Abort_IT+0xc8>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a7d      	ldr	r2, [pc, #500]	; (8007518 <HAL_DMA_Abort_IT+0x288>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d018      	beq.n	8007358 <HAL_DMA_Abort_IT+0xc8>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a7c      	ldr	r2, [pc, #496]	; (800751c <HAL_DMA_Abort_IT+0x28c>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d013      	beq.n	8007358 <HAL_DMA_Abort_IT+0xc8>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a7a      	ldr	r2, [pc, #488]	; (8007520 <HAL_DMA_Abort_IT+0x290>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d00e      	beq.n	8007358 <HAL_DMA_Abort_IT+0xc8>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a79      	ldr	r2, [pc, #484]	; (8007524 <HAL_DMA_Abort_IT+0x294>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d009      	beq.n	8007358 <HAL_DMA_Abort_IT+0xc8>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a77      	ldr	r2, [pc, #476]	; (8007528 <HAL_DMA_Abort_IT+0x298>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d004      	beq.n	8007358 <HAL_DMA_Abort_IT+0xc8>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a76      	ldr	r2, [pc, #472]	; (800752c <HAL_DMA_Abort_IT+0x29c>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d101      	bne.n	800735c <HAL_DMA_Abort_IT+0xcc>
 8007358:	2301      	movs	r3, #1
 800735a:	e000      	b.n	800735e <HAL_DMA_Abort_IT+0xce>
 800735c:	2300      	movs	r3, #0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d065      	beq.n	800742e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2204      	movs	r2, #4
 8007366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a60      	ldr	r2, [pc, #384]	; (80074f0 <HAL_DMA_Abort_IT+0x260>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d04a      	beq.n	800740a <HAL_DMA_Abort_IT+0x17a>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a5e      	ldr	r2, [pc, #376]	; (80074f4 <HAL_DMA_Abort_IT+0x264>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d045      	beq.n	800740a <HAL_DMA_Abort_IT+0x17a>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a5d      	ldr	r2, [pc, #372]	; (80074f8 <HAL_DMA_Abort_IT+0x268>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d040      	beq.n	800740a <HAL_DMA_Abort_IT+0x17a>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a5b      	ldr	r2, [pc, #364]	; (80074fc <HAL_DMA_Abort_IT+0x26c>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d03b      	beq.n	800740a <HAL_DMA_Abort_IT+0x17a>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a5a      	ldr	r2, [pc, #360]	; (8007500 <HAL_DMA_Abort_IT+0x270>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d036      	beq.n	800740a <HAL_DMA_Abort_IT+0x17a>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a58      	ldr	r2, [pc, #352]	; (8007504 <HAL_DMA_Abort_IT+0x274>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d031      	beq.n	800740a <HAL_DMA_Abort_IT+0x17a>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a57      	ldr	r2, [pc, #348]	; (8007508 <HAL_DMA_Abort_IT+0x278>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d02c      	beq.n	800740a <HAL_DMA_Abort_IT+0x17a>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a55      	ldr	r2, [pc, #340]	; (800750c <HAL_DMA_Abort_IT+0x27c>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d027      	beq.n	800740a <HAL_DMA_Abort_IT+0x17a>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a54      	ldr	r2, [pc, #336]	; (8007510 <HAL_DMA_Abort_IT+0x280>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d022      	beq.n	800740a <HAL_DMA_Abort_IT+0x17a>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a52      	ldr	r2, [pc, #328]	; (8007514 <HAL_DMA_Abort_IT+0x284>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d01d      	beq.n	800740a <HAL_DMA_Abort_IT+0x17a>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a51      	ldr	r2, [pc, #324]	; (8007518 <HAL_DMA_Abort_IT+0x288>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d018      	beq.n	800740a <HAL_DMA_Abort_IT+0x17a>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a4f      	ldr	r2, [pc, #316]	; (800751c <HAL_DMA_Abort_IT+0x28c>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d013      	beq.n	800740a <HAL_DMA_Abort_IT+0x17a>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a4e      	ldr	r2, [pc, #312]	; (8007520 <HAL_DMA_Abort_IT+0x290>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d00e      	beq.n	800740a <HAL_DMA_Abort_IT+0x17a>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a4c      	ldr	r2, [pc, #304]	; (8007524 <HAL_DMA_Abort_IT+0x294>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d009      	beq.n	800740a <HAL_DMA_Abort_IT+0x17a>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a4b      	ldr	r2, [pc, #300]	; (8007528 <HAL_DMA_Abort_IT+0x298>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d004      	beq.n	800740a <HAL_DMA_Abort_IT+0x17a>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a49      	ldr	r2, [pc, #292]	; (800752c <HAL_DMA_Abort_IT+0x29c>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d108      	bne.n	800741c <HAL_DMA_Abort_IT+0x18c>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f022 0201 	bic.w	r2, r2, #1
 8007418:	601a      	str	r2, [r3, #0]
 800741a:	e147      	b.n	80076ac <HAL_DMA_Abort_IT+0x41c>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f022 0201 	bic.w	r2, r2, #1
 800742a:	601a      	str	r2, [r3, #0]
 800742c:	e13e      	b.n	80076ac <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f022 020e 	bic.w	r2, r2, #14
 800743c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a2b      	ldr	r2, [pc, #172]	; (80074f0 <HAL_DMA_Abort_IT+0x260>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d04a      	beq.n	80074de <HAL_DMA_Abort_IT+0x24e>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a29      	ldr	r2, [pc, #164]	; (80074f4 <HAL_DMA_Abort_IT+0x264>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d045      	beq.n	80074de <HAL_DMA_Abort_IT+0x24e>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a28      	ldr	r2, [pc, #160]	; (80074f8 <HAL_DMA_Abort_IT+0x268>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d040      	beq.n	80074de <HAL_DMA_Abort_IT+0x24e>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a26      	ldr	r2, [pc, #152]	; (80074fc <HAL_DMA_Abort_IT+0x26c>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d03b      	beq.n	80074de <HAL_DMA_Abort_IT+0x24e>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a25      	ldr	r2, [pc, #148]	; (8007500 <HAL_DMA_Abort_IT+0x270>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d036      	beq.n	80074de <HAL_DMA_Abort_IT+0x24e>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a23      	ldr	r2, [pc, #140]	; (8007504 <HAL_DMA_Abort_IT+0x274>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d031      	beq.n	80074de <HAL_DMA_Abort_IT+0x24e>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a22      	ldr	r2, [pc, #136]	; (8007508 <HAL_DMA_Abort_IT+0x278>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d02c      	beq.n	80074de <HAL_DMA_Abort_IT+0x24e>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a20      	ldr	r2, [pc, #128]	; (800750c <HAL_DMA_Abort_IT+0x27c>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d027      	beq.n	80074de <HAL_DMA_Abort_IT+0x24e>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a1f      	ldr	r2, [pc, #124]	; (8007510 <HAL_DMA_Abort_IT+0x280>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d022      	beq.n	80074de <HAL_DMA_Abort_IT+0x24e>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a1d      	ldr	r2, [pc, #116]	; (8007514 <HAL_DMA_Abort_IT+0x284>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d01d      	beq.n	80074de <HAL_DMA_Abort_IT+0x24e>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a1c      	ldr	r2, [pc, #112]	; (8007518 <HAL_DMA_Abort_IT+0x288>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d018      	beq.n	80074de <HAL_DMA_Abort_IT+0x24e>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a1a      	ldr	r2, [pc, #104]	; (800751c <HAL_DMA_Abort_IT+0x28c>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d013      	beq.n	80074de <HAL_DMA_Abort_IT+0x24e>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a19      	ldr	r2, [pc, #100]	; (8007520 <HAL_DMA_Abort_IT+0x290>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d00e      	beq.n	80074de <HAL_DMA_Abort_IT+0x24e>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a17      	ldr	r2, [pc, #92]	; (8007524 <HAL_DMA_Abort_IT+0x294>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d009      	beq.n	80074de <HAL_DMA_Abort_IT+0x24e>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a16      	ldr	r2, [pc, #88]	; (8007528 <HAL_DMA_Abort_IT+0x298>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d004      	beq.n	80074de <HAL_DMA_Abort_IT+0x24e>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a14      	ldr	r2, [pc, #80]	; (800752c <HAL_DMA_Abort_IT+0x29c>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d128      	bne.n	8007530 <HAL_DMA_Abort_IT+0x2a0>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f022 0201 	bic.w	r2, r2, #1
 80074ec:	601a      	str	r2, [r3, #0]
 80074ee:	e027      	b.n	8007540 <HAL_DMA_Abort_IT+0x2b0>
 80074f0:	40020010 	.word	0x40020010
 80074f4:	40020028 	.word	0x40020028
 80074f8:	40020040 	.word	0x40020040
 80074fc:	40020058 	.word	0x40020058
 8007500:	40020070 	.word	0x40020070
 8007504:	40020088 	.word	0x40020088
 8007508:	400200a0 	.word	0x400200a0
 800750c:	400200b8 	.word	0x400200b8
 8007510:	40020410 	.word	0x40020410
 8007514:	40020428 	.word	0x40020428
 8007518:	40020440 	.word	0x40020440
 800751c:	40020458 	.word	0x40020458
 8007520:	40020470 	.word	0x40020470
 8007524:	40020488 	.word	0x40020488
 8007528:	400204a0 	.word	0x400204a0
 800752c:	400204b8 	.word	0x400204b8
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f022 0201 	bic.w	r2, r2, #1
 800753e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a5c      	ldr	r2, [pc, #368]	; (80076b8 <HAL_DMA_Abort_IT+0x428>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d072      	beq.n	8007630 <HAL_DMA_Abort_IT+0x3a0>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a5b      	ldr	r2, [pc, #364]	; (80076bc <HAL_DMA_Abort_IT+0x42c>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d06d      	beq.n	8007630 <HAL_DMA_Abort_IT+0x3a0>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a59      	ldr	r2, [pc, #356]	; (80076c0 <HAL_DMA_Abort_IT+0x430>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d068      	beq.n	8007630 <HAL_DMA_Abort_IT+0x3a0>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a58      	ldr	r2, [pc, #352]	; (80076c4 <HAL_DMA_Abort_IT+0x434>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d063      	beq.n	8007630 <HAL_DMA_Abort_IT+0x3a0>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a56      	ldr	r2, [pc, #344]	; (80076c8 <HAL_DMA_Abort_IT+0x438>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d05e      	beq.n	8007630 <HAL_DMA_Abort_IT+0x3a0>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a55      	ldr	r2, [pc, #340]	; (80076cc <HAL_DMA_Abort_IT+0x43c>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d059      	beq.n	8007630 <HAL_DMA_Abort_IT+0x3a0>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a53      	ldr	r2, [pc, #332]	; (80076d0 <HAL_DMA_Abort_IT+0x440>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d054      	beq.n	8007630 <HAL_DMA_Abort_IT+0x3a0>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a52      	ldr	r2, [pc, #328]	; (80076d4 <HAL_DMA_Abort_IT+0x444>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d04f      	beq.n	8007630 <HAL_DMA_Abort_IT+0x3a0>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a50      	ldr	r2, [pc, #320]	; (80076d8 <HAL_DMA_Abort_IT+0x448>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d04a      	beq.n	8007630 <HAL_DMA_Abort_IT+0x3a0>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a4f      	ldr	r2, [pc, #316]	; (80076dc <HAL_DMA_Abort_IT+0x44c>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d045      	beq.n	8007630 <HAL_DMA_Abort_IT+0x3a0>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a4d      	ldr	r2, [pc, #308]	; (80076e0 <HAL_DMA_Abort_IT+0x450>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d040      	beq.n	8007630 <HAL_DMA_Abort_IT+0x3a0>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a4c      	ldr	r2, [pc, #304]	; (80076e4 <HAL_DMA_Abort_IT+0x454>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d03b      	beq.n	8007630 <HAL_DMA_Abort_IT+0x3a0>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a4a      	ldr	r2, [pc, #296]	; (80076e8 <HAL_DMA_Abort_IT+0x458>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d036      	beq.n	8007630 <HAL_DMA_Abort_IT+0x3a0>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a49      	ldr	r2, [pc, #292]	; (80076ec <HAL_DMA_Abort_IT+0x45c>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d031      	beq.n	8007630 <HAL_DMA_Abort_IT+0x3a0>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a47      	ldr	r2, [pc, #284]	; (80076f0 <HAL_DMA_Abort_IT+0x460>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d02c      	beq.n	8007630 <HAL_DMA_Abort_IT+0x3a0>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a46      	ldr	r2, [pc, #280]	; (80076f4 <HAL_DMA_Abort_IT+0x464>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d027      	beq.n	8007630 <HAL_DMA_Abort_IT+0x3a0>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a44      	ldr	r2, [pc, #272]	; (80076f8 <HAL_DMA_Abort_IT+0x468>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d022      	beq.n	8007630 <HAL_DMA_Abort_IT+0x3a0>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a43      	ldr	r2, [pc, #268]	; (80076fc <HAL_DMA_Abort_IT+0x46c>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d01d      	beq.n	8007630 <HAL_DMA_Abort_IT+0x3a0>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a41      	ldr	r2, [pc, #260]	; (8007700 <HAL_DMA_Abort_IT+0x470>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d018      	beq.n	8007630 <HAL_DMA_Abort_IT+0x3a0>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a40      	ldr	r2, [pc, #256]	; (8007704 <HAL_DMA_Abort_IT+0x474>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d013      	beq.n	8007630 <HAL_DMA_Abort_IT+0x3a0>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a3e      	ldr	r2, [pc, #248]	; (8007708 <HAL_DMA_Abort_IT+0x478>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d00e      	beq.n	8007630 <HAL_DMA_Abort_IT+0x3a0>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a3d      	ldr	r2, [pc, #244]	; (800770c <HAL_DMA_Abort_IT+0x47c>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d009      	beq.n	8007630 <HAL_DMA_Abort_IT+0x3a0>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a3b      	ldr	r2, [pc, #236]	; (8007710 <HAL_DMA_Abort_IT+0x480>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d004      	beq.n	8007630 <HAL_DMA_Abort_IT+0x3a0>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a3a      	ldr	r2, [pc, #232]	; (8007714 <HAL_DMA_Abort_IT+0x484>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d101      	bne.n	8007634 <HAL_DMA_Abort_IT+0x3a4>
 8007630:	2301      	movs	r3, #1
 8007632:	e000      	b.n	8007636 <HAL_DMA_Abort_IT+0x3a6>
 8007634:	2300      	movs	r3, #0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d028      	beq.n	800768c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007644:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007648:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800764e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007654:	f003 031f 	and.w	r3, r3, #31
 8007658:	2201      	movs	r2, #1
 800765a:	409a      	lsls	r2, r3
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007668:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00c      	beq.n	800768c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800767c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007680:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800768a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d003      	beq.n	80076ac <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	40020010 	.word	0x40020010
 80076bc:	40020028 	.word	0x40020028
 80076c0:	40020040 	.word	0x40020040
 80076c4:	40020058 	.word	0x40020058
 80076c8:	40020070 	.word	0x40020070
 80076cc:	40020088 	.word	0x40020088
 80076d0:	400200a0 	.word	0x400200a0
 80076d4:	400200b8 	.word	0x400200b8
 80076d8:	40020410 	.word	0x40020410
 80076dc:	40020428 	.word	0x40020428
 80076e0:	40020440 	.word	0x40020440
 80076e4:	40020458 	.word	0x40020458
 80076e8:	40020470 	.word	0x40020470
 80076ec:	40020488 	.word	0x40020488
 80076f0:	400204a0 	.word	0x400204a0
 80076f4:	400204b8 	.word	0x400204b8
 80076f8:	58025408 	.word	0x58025408
 80076fc:	5802541c 	.word	0x5802541c
 8007700:	58025430 	.word	0x58025430
 8007704:	58025444 	.word	0x58025444
 8007708:	58025458 	.word	0x58025458
 800770c:	5802546c 	.word	0x5802546c
 8007710:	58025480 	.word	0x58025480
 8007714:	58025494 	.word	0x58025494

08007718 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b08a      	sub	sp, #40	; 0x28
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007720:	2300      	movs	r3, #0
 8007722:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007724:	4b67      	ldr	r3, [pc, #412]	; (80078c4 <HAL_DMA_IRQHandler+0x1ac>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a67      	ldr	r2, [pc, #412]	; (80078c8 <HAL_DMA_IRQHandler+0x1b0>)
 800772a:	fba2 2303 	umull	r2, r3, r2, r3
 800772e:	0a9b      	lsrs	r3, r3, #10
 8007730:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007736:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800773c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800773e:	6a3b      	ldr	r3, [r7, #32]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a5f      	ldr	r2, [pc, #380]	; (80078cc <HAL_DMA_IRQHandler+0x1b4>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d04a      	beq.n	80077ea <HAL_DMA_IRQHandler+0xd2>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a5d      	ldr	r2, [pc, #372]	; (80078d0 <HAL_DMA_IRQHandler+0x1b8>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d045      	beq.n	80077ea <HAL_DMA_IRQHandler+0xd2>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a5c      	ldr	r2, [pc, #368]	; (80078d4 <HAL_DMA_IRQHandler+0x1bc>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d040      	beq.n	80077ea <HAL_DMA_IRQHandler+0xd2>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a5a      	ldr	r2, [pc, #360]	; (80078d8 <HAL_DMA_IRQHandler+0x1c0>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d03b      	beq.n	80077ea <HAL_DMA_IRQHandler+0xd2>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a59      	ldr	r2, [pc, #356]	; (80078dc <HAL_DMA_IRQHandler+0x1c4>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d036      	beq.n	80077ea <HAL_DMA_IRQHandler+0xd2>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a57      	ldr	r2, [pc, #348]	; (80078e0 <HAL_DMA_IRQHandler+0x1c8>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d031      	beq.n	80077ea <HAL_DMA_IRQHandler+0xd2>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a56      	ldr	r2, [pc, #344]	; (80078e4 <HAL_DMA_IRQHandler+0x1cc>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d02c      	beq.n	80077ea <HAL_DMA_IRQHandler+0xd2>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a54      	ldr	r2, [pc, #336]	; (80078e8 <HAL_DMA_IRQHandler+0x1d0>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d027      	beq.n	80077ea <HAL_DMA_IRQHandler+0xd2>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a53      	ldr	r2, [pc, #332]	; (80078ec <HAL_DMA_IRQHandler+0x1d4>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d022      	beq.n	80077ea <HAL_DMA_IRQHandler+0xd2>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a51      	ldr	r2, [pc, #324]	; (80078f0 <HAL_DMA_IRQHandler+0x1d8>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d01d      	beq.n	80077ea <HAL_DMA_IRQHandler+0xd2>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a50      	ldr	r2, [pc, #320]	; (80078f4 <HAL_DMA_IRQHandler+0x1dc>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d018      	beq.n	80077ea <HAL_DMA_IRQHandler+0xd2>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a4e      	ldr	r2, [pc, #312]	; (80078f8 <HAL_DMA_IRQHandler+0x1e0>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d013      	beq.n	80077ea <HAL_DMA_IRQHandler+0xd2>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a4d      	ldr	r2, [pc, #308]	; (80078fc <HAL_DMA_IRQHandler+0x1e4>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d00e      	beq.n	80077ea <HAL_DMA_IRQHandler+0xd2>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a4b      	ldr	r2, [pc, #300]	; (8007900 <HAL_DMA_IRQHandler+0x1e8>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d009      	beq.n	80077ea <HAL_DMA_IRQHandler+0xd2>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a4a      	ldr	r2, [pc, #296]	; (8007904 <HAL_DMA_IRQHandler+0x1ec>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d004      	beq.n	80077ea <HAL_DMA_IRQHandler+0xd2>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a48      	ldr	r2, [pc, #288]	; (8007908 <HAL_DMA_IRQHandler+0x1f0>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d101      	bne.n	80077ee <HAL_DMA_IRQHandler+0xd6>
 80077ea:	2301      	movs	r3, #1
 80077ec:	e000      	b.n	80077f0 <HAL_DMA_IRQHandler+0xd8>
 80077ee:	2300      	movs	r3, #0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f000 842b 	beq.w	800804c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077fa:	f003 031f 	and.w	r3, r3, #31
 80077fe:	2208      	movs	r2, #8
 8007800:	409a      	lsls	r2, r3
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	4013      	ands	r3, r2
 8007806:	2b00      	cmp	r3, #0
 8007808:	f000 80a2 	beq.w	8007950 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a2e      	ldr	r2, [pc, #184]	; (80078cc <HAL_DMA_IRQHandler+0x1b4>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d04a      	beq.n	80078ac <HAL_DMA_IRQHandler+0x194>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a2d      	ldr	r2, [pc, #180]	; (80078d0 <HAL_DMA_IRQHandler+0x1b8>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d045      	beq.n	80078ac <HAL_DMA_IRQHandler+0x194>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a2b      	ldr	r2, [pc, #172]	; (80078d4 <HAL_DMA_IRQHandler+0x1bc>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d040      	beq.n	80078ac <HAL_DMA_IRQHandler+0x194>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a2a      	ldr	r2, [pc, #168]	; (80078d8 <HAL_DMA_IRQHandler+0x1c0>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d03b      	beq.n	80078ac <HAL_DMA_IRQHandler+0x194>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a28      	ldr	r2, [pc, #160]	; (80078dc <HAL_DMA_IRQHandler+0x1c4>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d036      	beq.n	80078ac <HAL_DMA_IRQHandler+0x194>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a27      	ldr	r2, [pc, #156]	; (80078e0 <HAL_DMA_IRQHandler+0x1c8>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d031      	beq.n	80078ac <HAL_DMA_IRQHandler+0x194>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a25      	ldr	r2, [pc, #148]	; (80078e4 <HAL_DMA_IRQHandler+0x1cc>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d02c      	beq.n	80078ac <HAL_DMA_IRQHandler+0x194>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a24      	ldr	r2, [pc, #144]	; (80078e8 <HAL_DMA_IRQHandler+0x1d0>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d027      	beq.n	80078ac <HAL_DMA_IRQHandler+0x194>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a22      	ldr	r2, [pc, #136]	; (80078ec <HAL_DMA_IRQHandler+0x1d4>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d022      	beq.n	80078ac <HAL_DMA_IRQHandler+0x194>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a21      	ldr	r2, [pc, #132]	; (80078f0 <HAL_DMA_IRQHandler+0x1d8>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d01d      	beq.n	80078ac <HAL_DMA_IRQHandler+0x194>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a1f      	ldr	r2, [pc, #124]	; (80078f4 <HAL_DMA_IRQHandler+0x1dc>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d018      	beq.n	80078ac <HAL_DMA_IRQHandler+0x194>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a1e      	ldr	r2, [pc, #120]	; (80078f8 <HAL_DMA_IRQHandler+0x1e0>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d013      	beq.n	80078ac <HAL_DMA_IRQHandler+0x194>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a1c      	ldr	r2, [pc, #112]	; (80078fc <HAL_DMA_IRQHandler+0x1e4>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d00e      	beq.n	80078ac <HAL_DMA_IRQHandler+0x194>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a1b      	ldr	r2, [pc, #108]	; (8007900 <HAL_DMA_IRQHandler+0x1e8>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d009      	beq.n	80078ac <HAL_DMA_IRQHandler+0x194>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a19      	ldr	r2, [pc, #100]	; (8007904 <HAL_DMA_IRQHandler+0x1ec>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d004      	beq.n	80078ac <HAL_DMA_IRQHandler+0x194>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a18      	ldr	r2, [pc, #96]	; (8007908 <HAL_DMA_IRQHandler+0x1f0>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d12f      	bne.n	800790c <HAL_DMA_IRQHandler+0x1f4>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f003 0304 	and.w	r3, r3, #4
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	bf14      	ite	ne
 80078ba:	2301      	movne	r3, #1
 80078bc:	2300      	moveq	r3, #0
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	e02e      	b.n	8007920 <HAL_DMA_IRQHandler+0x208>
 80078c2:	bf00      	nop
 80078c4:	24000014 	.word	0x24000014
 80078c8:	1b4e81b5 	.word	0x1b4e81b5
 80078cc:	40020010 	.word	0x40020010
 80078d0:	40020028 	.word	0x40020028
 80078d4:	40020040 	.word	0x40020040
 80078d8:	40020058 	.word	0x40020058
 80078dc:	40020070 	.word	0x40020070
 80078e0:	40020088 	.word	0x40020088
 80078e4:	400200a0 	.word	0x400200a0
 80078e8:	400200b8 	.word	0x400200b8
 80078ec:	40020410 	.word	0x40020410
 80078f0:	40020428 	.word	0x40020428
 80078f4:	40020440 	.word	0x40020440
 80078f8:	40020458 	.word	0x40020458
 80078fc:	40020470 	.word	0x40020470
 8007900:	40020488 	.word	0x40020488
 8007904:	400204a0 	.word	0x400204a0
 8007908:	400204b8 	.word	0x400204b8
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 0308 	and.w	r3, r3, #8
 8007916:	2b00      	cmp	r3, #0
 8007918:	bf14      	ite	ne
 800791a:	2301      	movne	r3, #1
 800791c:	2300      	moveq	r3, #0
 800791e:	b2db      	uxtb	r3, r3
 8007920:	2b00      	cmp	r3, #0
 8007922:	d015      	beq.n	8007950 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f022 0204 	bic.w	r2, r2, #4
 8007932:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007938:	f003 031f 	and.w	r3, r3, #31
 800793c:	2208      	movs	r2, #8
 800793e:	409a      	lsls	r2, r3
 8007940:	6a3b      	ldr	r3, [r7, #32]
 8007942:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007948:	f043 0201 	orr.w	r2, r3, #1
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007954:	f003 031f 	and.w	r3, r3, #31
 8007958:	69ba      	ldr	r2, [r7, #24]
 800795a:	fa22 f303 	lsr.w	r3, r2, r3
 800795e:	f003 0301 	and.w	r3, r3, #1
 8007962:	2b00      	cmp	r3, #0
 8007964:	d06e      	beq.n	8007a44 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a69      	ldr	r2, [pc, #420]	; (8007b10 <HAL_DMA_IRQHandler+0x3f8>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d04a      	beq.n	8007a06 <HAL_DMA_IRQHandler+0x2ee>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a67      	ldr	r2, [pc, #412]	; (8007b14 <HAL_DMA_IRQHandler+0x3fc>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d045      	beq.n	8007a06 <HAL_DMA_IRQHandler+0x2ee>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a66      	ldr	r2, [pc, #408]	; (8007b18 <HAL_DMA_IRQHandler+0x400>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d040      	beq.n	8007a06 <HAL_DMA_IRQHandler+0x2ee>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a64      	ldr	r2, [pc, #400]	; (8007b1c <HAL_DMA_IRQHandler+0x404>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d03b      	beq.n	8007a06 <HAL_DMA_IRQHandler+0x2ee>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a63      	ldr	r2, [pc, #396]	; (8007b20 <HAL_DMA_IRQHandler+0x408>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d036      	beq.n	8007a06 <HAL_DMA_IRQHandler+0x2ee>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a61      	ldr	r2, [pc, #388]	; (8007b24 <HAL_DMA_IRQHandler+0x40c>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d031      	beq.n	8007a06 <HAL_DMA_IRQHandler+0x2ee>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a60      	ldr	r2, [pc, #384]	; (8007b28 <HAL_DMA_IRQHandler+0x410>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d02c      	beq.n	8007a06 <HAL_DMA_IRQHandler+0x2ee>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a5e      	ldr	r2, [pc, #376]	; (8007b2c <HAL_DMA_IRQHandler+0x414>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d027      	beq.n	8007a06 <HAL_DMA_IRQHandler+0x2ee>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a5d      	ldr	r2, [pc, #372]	; (8007b30 <HAL_DMA_IRQHandler+0x418>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d022      	beq.n	8007a06 <HAL_DMA_IRQHandler+0x2ee>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a5b      	ldr	r2, [pc, #364]	; (8007b34 <HAL_DMA_IRQHandler+0x41c>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d01d      	beq.n	8007a06 <HAL_DMA_IRQHandler+0x2ee>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a5a      	ldr	r2, [pc, #360]	; (8007b38 <HAL_DMA_IRQHandler+0x420>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d018      	beq.n	8007a06 <HAL_DMA_IRQHandler+0x2ee>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a58      	ldr	r2, [pc, #352]	; (8007b3c <HAL_DMA_IRQHandler+0x424>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d013      	beq.n	8007a06 <HAL_DMA_IRQHandler+0x2ee>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a57      	ldr	r2, [pc, #348]	; (8007b40 <HAL_DMA_IRQHandler+0x428>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d00e      	beq.n	8007a06 <HAL_DMA_IRQHandler+0x2ee>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a55      	ldr	r2, [pc, #340]	; (8007b44 <HAL_DMA_IRQHandler+0x42c>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d009      	beq.n	8007a06 <HAL_DMA_IRQHandler+0x2ee>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a54      	ldr	r2, [pc, #336]	; (8007b48 <HAL_DMA_IRQHandler+0x430>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d004      	beq.n	8007a06 <HAL_DMA_IRQHandler+0x2ee>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a52      	ldr	r2, [pc, #328]	; (8007b4c <HAL_DMA_IRQHandler+0x434>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d10a      	bne.n	8007a1c <HAL_DMA_IRQHandler+0x304>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	695b      	ldr	r3, [r3, #20]
 8007a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	bf14      	ite	ne
 8007a14:	2301      	movne	r3, #1
 8007a16:	2300      	moveq	r3, #0
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	e003      	b.n	8007a24 <HAL_DMA_IRQHandler+0x30c>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2300      	movs	r3, #0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00d      	beq.n	8007a44 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a2c:	f003 031f 	and.w	r3, r3, #31
 8007a30:	2201      	movs	r2, #1
 8007a32:	409a      	lsls	r2, r3
 8007a34:	6a3b      	ldr	r3, [r7, #32]
 8007a36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a3c:	f043 0202 	orr.w	r2, r3, #2
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a48:	f003 031f 	and.w	r3, r3, #31
 8007a4c:	2204      	movs	r2, #4
 8007a4e:	409a      	lsls	r2, r3
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	4013      	ands	r3, r2
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f000 808f 	beq.w	8007b78 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a2c      	ldr	r2, [pc, #176]	; (8007b10 <HAL_DMA_IRQHandler+0x3f8>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d04a      	beq.n	8007afa <HAL_DMA_IRQHandler+0x3e2>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a2a      	ldr	r2, [pc, #168]	; (8007b14 <HAL_DMA_IRQHandler+0x3fc>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d045      	beq.n	8007afa <HAL_DMA_IRQHandler+0x3e2>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a29      	ldr	r2, [pc, #164]	; (8007b18 <HAL_DMA_IRQHandler+0x400>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d040      	beq.n	8007afa <HAL_DMA_IRQHandler+0x3e2>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a27      	ldr	r2, [pc, #156]	; (8007b1c <HAL_DMA_IRQHandler+0x404>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d03b      	beq.n	8007afa <HAL_DMA_IRQHandler+0x3e2>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a26      	ldr	r2, [pc, #152]	; (8007b20 <HAL_DMA_IRQHandler+0x408>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d036      	beq.n	8007afa <HAL_DMA_IRQHandler+0x3e2>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a24      	ldr	r2, [pc, #144]	; (8007b24 <HAL_DMA_IRQHandler+0x40c>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d031      	beq.n	8007afa <HAL_DMA_IRQHandler+0x3e2>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a23      	ldr	r2, [pc, #140]	; (8007b28 <HAL_DMA_IRQHandler+0x410>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d02c      	beq.n	8007afa <HAL_DMA_IRQHandler+0x3e2>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a21      	ldr	r2, [pc, #132]	; (8007b2c <HAL_DMA_IRQHandler+0x414>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d027      	beq.n	8007afa <HAL_DMA_IRQHandler+0x3e2>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a20      	ldr	r2, [pc, #128]	; (8007b30 <HAL_DMA_IRQHandler+0x418>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d022      	beq.n	8007afa <HAL_DMA_IRQHandler+0x3e2>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a1e      	ldr	r2, [pc, #120]	; (8007b34 <HAL_DMA_IRQHandler+0x41c>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d01d      	beq.n	8007afa <HAL_DMA_IRQHandler+0x3e2>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a1d      	ldr	r2, [pc, #116]	; (8007b38 <HAL_DMA_IRQHandler+0x420>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d018      	beq.n	8007afa <HAL_DMA_IRQHandler+0x3e2>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a1b      	ldr	r2, [pc, #108]	; (8007b3c <HAL_DMA_IRQHandler+0x424>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d013      	beq.n	8007afa <HAL_DMA_IRQHandler+0x3e2>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a1a      	ldr	r2, [pc, #104]	; (8007b40 <HAL_DMA_IRQHandler+0x428>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d00e      	beq.n	8007afa <HAL_DMA_IRQHandler+0x3e2>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a18      	ldr	r2, [pc, #96]	; (8007b44 <HAL_DMA_IRQHandler+0x42c>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d009      	beq.n	8007afa <HAL_DMA_IRQHandler+0x3e2>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a17      	ldr	r2, [pc, #92]	; (8007b48 <HAL_DMA_IRQHandler+0x430>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d004      	beq.n	8007afa <HAL_DMA_IRQHandler+0x3e2>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a15      	ldr	r2, [pc, #84]	; (8007b4c <HAL_DMA_IRQHandler+0x434>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d12a      	bne.n	8007b50 <HAL_DMA_IRQHandler+0x438>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 0302 	and.w	r3, r3, #2
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	bf14      	ite	ne
 8007b08:	2301      	movne	r3, #1
 8007b0a:	2300      	moveq	r3, #0
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	e023      	b.n	8007b58 <HAL_DMA_IRQHandler+0x440>
 8007b10:	40020010 	.word	0x40020010
 8007b14:	40020028 	.word	0x40020028
 8007b18:	40020040 	.word	0x40020040
 8007b1c:	40020058 	.word	0x40020058
 8007b20:	40020070 	.word	0x40020070
 8007b24:	40020088 	.word	0x40020088
 8007b28:	400200a0 	.word	0x400200a0
 8007b2c:	400200b8 	.word	0x400200b8
 8007b30:	40020410 	.word	0x40020410
 8007b34:	40020428 	.word	0x40020428
 8007b38:	40020440 	.word	0x40020440
 8007b3c:	40020458 	.word	0x40020458
 8007b40:	40020470 	.word	0x40020470
 8007b44:	40020488 	.word	0x40020488
 8007b48:	400204a0 	.word	0x400204a0
 8007b4c:	400204b8 	.word	0x400204b8
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2300      	movs	r3, #0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00d      	beq.n	8007b78 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b60:	f003 031f 	and.w	r3, r3, #31
 8007b64:	2204      	movs	r2, #4
 8007b66:	409a      	lsls	r2, r3
 8007b68:	6a3b      	ldr	r3, [r7, #32]
 8007b6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b70:	f043 0204 	orr.w	r2, r3, #4
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b7c:	f003 031f 	and.w	r3, r3, #31
 8007b80:	2210      	movs	r2, #16
 8007b82:	409a      	lsls	r2, r3
 8007b84:	69bb      	ldr	r3, [r7, #24]
 8007b86:	4013      	ands	r3, r2
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f000 80a6 	beq.w	8007cda <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a85      	ldr	r2, [pc, #532]	; (8007da8 <HAL_DMA_IRQHandler+0x690>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d04a      	beq.n	8007c2e <HAL_DMA_IRQHandler+0x516>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a83      	ldr	r2, [pc, #524]	; (8007dac <HAL_DMA_IRQHandler+0x694>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d045      	beq.n	8007c2e <HAL_DMA_IRQHandler+0x516>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a82      	ldr	r2, [pc, #520]	; (8007db0 <HAL_DMA_IRQHandler+0x698>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d040      	beq.n	8007c2e <HAL_DMA_IRQHandler+0x516>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a80      	ldr	r2, [pc, #512]	; (8007db4 <HAL_DMA_IRQHandler+0x69c>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d03b      	beq.n	8007c2e <HAL_DMA_IRQHandler+0x516>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a7f      	ldr	r2, [pc, #508]	; (8007db8 <HAL_DMA_IRQHandler+0x6a0>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d036      	beq.n	8007c2e <HAL_DMA_IRQHandler+0x516>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a7d      	ldr	r2, [pc, #500]	; (8007dbc <HAL_DMA_IRQHandler+0x6a4>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d031      	beq.n	8007c2e <HAL_DMA_IRQHandler+0x516>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a7c      	ldr	r2, [pc, #496]	; (8007dc0 <HAL_DMA_IRQHandler+0x6a8>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d02c      	beq.n	8007c2e <HAL_DMA_IRQHandler+0x516>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a7a      	ldr	r2, [pc, #488]	; (8007dc4 <HAL_DMA_IRQHandler+0x6ac>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d027      	beq.n	8007c2e <HAL_DMA_IRQHandler+0x516>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a79      	ldr	r2, [pc, #484]	; (8007dc8 <HAL_DMA_IRQHandler+0x6b0>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d022      	beq.n	8007c2e <HAL_DMA_IRQHandler+0x516>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a77      	ldr	r2, [pc, #476]	; (8007dcc <HAL_DMA_IRQHandler+0x6b4>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d01d      	beq.n	8007c2e <HAL_DMA_IRQHandler+0x516>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a76      	ldr	r2, [pc, #472]	; (8007dd0 <HAL_DMA_IRQHandler+0x6b8>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d018      	beq.n	8007c2e <HAL_DMA_IRQHandler+0x516>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a74      	ldr	r2, [pc, #464]	; (8007dd4 <HAL_DMA_IRQHandler+0x6bc>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d013      	beq.n	8007c2e <HAL_DMA_IRQHandler+0x516>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a73      	ldr	r2, [pc, #460]	; (8007dd8 <HAL_DMA_IRQHandler+0x6c0>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d00e      	beq.n	8007c2e <HAL_DMA_IRQHandler+0x516>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a71      	ldr	r2, [pc, #452]	; (8007ddc <HAL_DMA_IRQHandler+0x6c4>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d009      	beq.n	8007c2e <HAL_DMA_IRQHandler+0x516>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a70      	ldr	r2, [pc, #448]	; (8007de0 <HAL_DMA_IRQHandler+0x6c8>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d004      	beq.n	8007c2e <HAL_DMA_IRQHandler+0x516>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a6e      	ldr	r2, [pc, #440]	; (8007de4 <HAL_DMA_IRQHandler+0x6cc>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d10a      	bne.n	8007c44 <HAL_DMA_IRQHandler+0x52c>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 0308 	and.w	r3, r3, #8
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	bf14      	ite	ne
 8007c3c:	2301      	movne	r3, #1
 8007c3e:	2300      	moveq	r3, #0
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	e009      	b.n	8007c58 <HAL_DMA_IRQHandler+0x540>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f003 0304 	and.w	r3, r3, #4
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	bf14      	ite	ne
 8007c52:	2301      	movne	r3, #1
 8007c54:	2300      	moveq	r3, #0
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d03e      	beq.n	8007cda <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c60:	f003 031f 	and.w	r3, r3, #31
 8007c64:	2210      	movs	r2, #16
 8007c66:	409a      	lsls	r2, r3
 8007c68:	6a3b      	ldr	r3, [r7, #32]
 8007c6a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d018      	beq.n	8007cac <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d108      	bne.n	8007c9a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d024      	beq.n	8007cda <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	4798      	blx	r3
 8007c98:	e01f      	b.n	8007cda <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d01b      	beq.n	8007cda <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	4798      	blx	r3
 8007caa:	e016      	b.n	8007cda <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d107      	bne.n	8007cca <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f022 0208 	bic.w	r2, r2, #8
 8007cc8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d003      	beq.n	8007cda <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cde:	f003 031f 	and.w	r3, r3, #31
 8007ce2:	2220      	movs	r2, #32
 8007ce4:	409a      	lsls	r2, r3
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	4013      	ands	r3, r2
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f000 8110 	beq.w	8007f10 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a2c      	ldr	r2, [pc, #176]	; (8007da8 <HAL_DMA_IRQHandler+0x690>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d04a      	beq.n	8007d90 <HAL_DMA_IRQHandler+0x678>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a2b      	ldr	r2, [pc, #172]	; (8007dac <HAL_DMA_IRQHandler+0x694>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d045      	beq.n	8007d90 <HAL_DMA_IRQHandler+0x678>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a29      	ldr	r2, [pc, #164]	; (8007db0 <HAL_DMA_IRQHandler+0x698>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d040      	beq.n	8007d90 <HAL_DMA_IRQHandler+0x678>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a28      	ldr	r2, [pc, #160]	; (8007db4 <HAL_DMA_IRQHandler+0x69c>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d03b      	beq.n	8007d90 <HAL_DMA_IRQHandler+0x678>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a26      	ldr	r2, [pc, #152]	; (8007db8 <HAL_DMA_IRQHandler+0x6a0>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d036      	beq.n	8007d90 <HAL_DMA_IRQHandler+0x678>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a25      	ldr	r2, [pc, #148]	; (8007dbc <HAL_DMA_IRQHandler+0x6a4>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d031      	beq.n	8007d90 <HAL_DMA_IRQHandler+0x678>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a23      	ldr	r2, [pc, #140]	; (8007dc0 <HAL_DMA_IRQHandler+0x6a8>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d02c      	beq.n	8007d90 <HAL_DMA_IRQHandler+0x678>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a22      	ldr	r2, [pc, #136]	; (8007dc4 <HAL_DMA_IRQHandler+0x6ac>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d027      	beq.n	8007d90 <HAL_DMA_IRQHandler+0x678>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a20      	ldr	r2, [pc, #128]	; (8007dc8 <HAL_DMA_IRQHandler+0x6b0>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d022      	beq.n	8007d90 <HAL_DMA_IRQHandler+0x678>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a1f      	ldr	r2, [pc, #124]	; (8007dcc <HAL_DMA_IRQHandler+0x6b4>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d01d      	beq.n	8007d90 <HAL_DMA_IRQHandler+0x678>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a1d      	ldr	r2, [pc, #116]	; (8007dd0 <HAL_DMA_IRQHandler+0x6b8>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d018      	beq.n	8007d90 <HAL_DMA_IRQHandler+0x678>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a1c      	ldr	r2, [pc, #112]	; (8007dd4 <HAL_DMA_IRQHandler+0x6bc>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d013      	beq.n	8007d90 <HAL_DMA_IRQHandler+0x678>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a1a      	ldr	r2, [pc, #104]	; (8007dd8 <HAL_DMA_IRQHandler+0x6c0>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d00e      	beq.n	8007d90 <HAL_DMA_IRQHandler+0x678>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a19      	ldr	r2, [pc, #100]	; (8007ddc <HAL_DMA_IRQHandler+0x6c4>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d009      	beq.n	8007d90 <HAL_DMA_IRQHandler+0x678>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a17      	ldr	r2, [pc, #92]	; (8007de0 <HAL_DMA_IRQHandler+0x6c8>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d004      	beq.n	8007d90 <HAL_DMA_IRQHandler+0x678>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a16      	ldr	r2, [pc, #88]	; (8007de4 <HAL_DMA_IRQHandler+0x6cc>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d12b      	bne.n	8007de8 <HAL_DMA_IRQHandler+0x6d0>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 0310 	and.w	r3, r3, #16
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	bf14      	ite	ne
 8007d9e:	2301      	movne	r3, #1
 8007da0:	2300      	moveq	r3, #0
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	e02a      	b.n	8007dfc <HAL_DMA_IRQHandler+0x6e4>
 8007da6:	bf00      	nop
 8007da8:	40020010 	.word	0x40020010
 8007dac:	40020028 	.word	0x40020028
 8007db0:	40020040 	.word	0x40020040
 8007db4:	40020058 	.word	0x40020058
 8007db8:	40020070 	.word	0x40020070
 8007dbc:	40020088 	.word	0x40020088
 8007dc0:	400200a0 	.word	0x400200a0
 8007dc4:	400200b8 	.word	0x400200b8
 8007dc8:	40020410 	.word	0x40020410
 8007dcc:	40020428 	.word	0x40020428
 8007dd0:	40020440 	.word	0x40020440
 8007dd4:	40020458 	.word	0x40020458
 8007dd8:	40020470 	.word	0x40020470
 8007ddc:	40020488 	.word	0x40020488
 8007de0:	400204a0 	.word	0x400204a0
 8007de4:	400204b8 	.word	0x400204b8
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 0302 	and.w	r3, r3, #2
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	bf14      	ite	ne
 8007df6:	2301      	movne	r3, #1
 8007df8:	2300      	moveq	r3, #0
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f000 8087 	beq.w	8007f10 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e06:	f003 031f 	and.w	r3, r3, #31
 8007e0a:	2220      	movs	r2, #32
 8007e0c:	409a      	lsls	r2, r3
 8007e0e:	6a3b      	ldr	r3, [r7, #32]
 8007e10:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	2b04      	cmp	r3, #4
 8007e1c:	d139      	bne.n	8007e92 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f022 0216 	bic.w	r2, r2, #22
 8007e2c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	695a      	ldr	r2, [r3, #20]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e3c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d103      	bne.n	8007e4e <HAL_DMA_IRQHandler+0x736>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d007      	beq.n	8007e5e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f022 0208 	bic.w	r2, r2, #8
 8007e5c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e62:	f003 031f 	and.w	r3, r3, #31
 8007e66:	223f      	movs	r2, #63	; 0x3f
 8007e68:	409a      	lsls	r2, r3
 8007e6a:	6a3b      	ldr	r3, [r7, #32]
 8007e6c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2201      	movs	r2, #1
 8007e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f000 834a 	beq.w	800851c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	4798      	blx	r3
          }
          return;
 8007e90:	e344      	b.n	800851c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d018      	beq.n	8007ed2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d108      	bne.n	8007ec0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d02c      	beq.n	8007f10 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	4798      	blx	r3
 8007ebe:	e027      	b.n	8007f10 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d023      	beq.n	8007f10 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	4798      	blx	r3
 8007ed0:	e01e      	b.n	8007f10 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d10f      	bne.n	8007f00 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f022 0210 	bic.w	r2, r2, #16
 8007eee:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d003      	beq.n	8007f10 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f000 8306 	beq.w	8008526 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f1e:	f003 0301 	and.w	r3, r3, #1
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	f000 8088 	beq.w	8008038 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2204      	movs	r2, #4
 8007f2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a7a      	ldr	r2, [pc, #488]	; (8008120 <HAL_DMA_IRQHandler+0xa08>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d04a      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x8b8>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a79      	ldr	r2, [pc, #484]	; (8008124 <HAL_DMA_IRQHandler+0xa0c>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d045      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x8b8>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a77      	ldr	r2, [pc, #476]	; (8008128 <HAL_DMA_IRQHandler+0xa10>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d040      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x8b8>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a76      	ldr	r2, [pc, #472]	; (800812c <HAL_DMA_IRQHandler+0xa14>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d03b      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x8b8>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a74      	ldr	r2, [pc, #464]	; (8008130 <HAL_DMA_IRQHandler+0xa18>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d036      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x8b8>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a73      	ldr	r2, [pc, #460]	; (8008134 <HAL_DMA_IRQHandler+0xa1c>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d031      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x8b8>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a71      	ldr	r2, [pc, #452]	; (8008138 <HAL_DMA_IRQHandler+0xa20>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d02c      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x8b8>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a70      	ldr	r2, [pc, #448]	; (800813c <HAL_DMA_IRQHandler+0xa24>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d027      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x8b8>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a6e      	ldr	r2, [pc, #440]	; (8008140 <HAL_DMA_IRQHandler+0xa28>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d022      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x8b8>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a6d      	ldr	r2, [pc, #436]	; (8008144 <HAL_DMA_IRQHandler+0xa2c>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d01d      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x8b8>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a6b      	ldr	r2, [pc, #428]	; (8008148 <HAL_DMA_IRQHandler+0xa30>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d018      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x8b8>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a6a      	ldr	r2, [pc, #424]	; (800814c <HAL_DMA_IRQHandler+0xa34>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d013      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x8b8>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a68      	ldr	r2, [pc, #416]	; (8008150 <HAL_DMA_IRQHandler+0xa38>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d00e      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x8b8>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a67      	ldr	r2, [pc, #412]	; (8008154 <HAL_DMA_IRQHandler+0xa3c>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d009      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x8b8>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a65      	ldr	r2, [pc, #404]	; (8008158 <HAL_DMA_IRQHandler+0xa40>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d004      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x8b8>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a64      	ldr	r2, [pc, #400]	; (800815c <HAL_DMA_IRQHandler+0xa44>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d108      	bne.n	8007fe2 <HAL_DMA_IRQHandler+0x8ca>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f022 0201 	bic.w	r2, r2, #1
 8007fde:	601a      	str	r2, [r3, #0]
 8007fe0:	e007      	b.n	8007ff2 <HAL_DMA_IRQHandler+0x8da>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f022 0201 	bic.w	r2, r2, #1
 8007ff0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	60fb      	str	r3, [r7, #12]
 8007ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d307      	bcc.n	800800e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 0301 	and.w	r3, r3, #1
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1f2      	bne.n	8007ff2 <HAL_DMA_IRQHandler+0x8da>
 800800c:	e000      	b.n	8008010 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800800e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f003 0301 	and.w	r3, r3, #1
 800801a:	2b00      	cmp	r3, #0
 800801c:	d004      	beq.n	8008028 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2203      	movs	r2, #3
 8008022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8008026:	e003      	b.n	8008030 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800803c:	2b00      	cmp	r3, #0
 800803e:	f000 8272 	beq.w	8008526 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	4798      	blx	r3
 800804a:	e26c      	b.n	8008526 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a43      	ldr	r2, [pc, #268]	; (8008160 <HAL_DMA_IRQHandler+0xa48>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d022      	beq.n	800809c <HAL_DMA_IRQHandler+0x984>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a42      	ldr	r2, [pc, #264]	; (8008164 <HAL_DMA_IRQHandler+0xa4c>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d01d      	beq.n	800809c <HAL_DMA_IRQHandler+0x984>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a40      	ldr	r2, [pc, #256]	; (8008168 <HAL_DMA_IRQHandler+0xa50>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d018      	beq.n	800809c <HAL_DMA_IRQHandler+0x984>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a3f      	ldr	r2, [pc, #252]	; (800816c <HAL_DMA_IRQHandler+0xa54>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d013      	beq.n	800809c <HAL_DMA_IRQHandler+0x984>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a3d      	ldr	r2, [pc, #244]	; (8008170 <HAL_DMA_IRQHandler+0xa58>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d00e      	beq.n	800809c <HAL_DMA_IRQHandler+0x984>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a3c      	ldr	r2, [pc, #240]	; (8008174 <HAL_DMA_IRQHandler+0xa5c>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d009      	beq.n	800809c <HAL_DMA_IRQHandler+0x984>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a3a      	ldr	r2, [pc, #232]	; (8008178 <HAL_DMA_IRQHandler+0xa60>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d004      	beq.n	800809c <HAL_DMA_IRQHandler+0x984>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a39      	ldr	r2, [pc, #228]	; (800817c <HAL_DMA_IRQHandler+0xa64>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d101      	bne.n	80080a0 <HAL_DMA_IRQHandler+0x988>
 800809c:	2301      	movs	r3, #1
 800809e:	e000      	b.n	80080a2 <HAL_DMA_IRQHandler+0x98a>
 80080a0:	2300      	movs	r3, #0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f000 823f 	beq.w	8008526 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080b4:	f003 031f 	and.w	r3, r3, #31
 80080b8:	2204      	movs	r2, #4
 80080ba:	409a      	lsls	r2, r3
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	4013      	ands	r3, r2
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f000 80cd 	beq.w	8008260 <HAL_DMA_IRQHandler+0xb48>
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	f003 0304 	and.w	r3, r3, #4
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f000 80c7 	beq.w	8008260 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080d6:	f003 031f 	and.w	r3, r3, #31
 80080da:	2204      	movs	r2, #4
 80080dc:	409a      	lsls	r2, r3
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d049      	beq.n	8008180 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d109      	bne.n	800810a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	f000 8210 	beq.w	8008520 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008108:	e20a      	b.n	8008520 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810e:	2b00      	cmp	r3, #0
 8008110:	f000 8206 	beq.w	8008520 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800811c:	e200      	b.n	8008520 <HAL_DMA_IRQHandler+0xe08>
 800811e:	bf00      	nop
 8008120:	40020010 	.word	0x40020010
 8008124:	40020028 	.word	0x40020028
 8008128:	40020040 	.word	0x40020040
 800812c:	40020058 	.word	0x40020058
 8008130:	40020070 	.word	0x40020070
 8008134:	40020088 	.word	0x40020088
 8008138:	400200a0 	.word	0x400200a0
 800813c:	400200b8 	.word	0x400200b8
 8008140:	40020410 	.word	0x40020410
 8008144:	40020428 	.word	0x40020428
 8008148:	40020440 	.word	0x40020440
 800814c:	40020458 	.word	0x40020458
 8008150:	40020470 	.word	0x40020470
 8008154:	40020488 	.word	0x40020488
 8008158:	400204a0 	.word	0x400204a0
 800815c:	400204b8 	.word	0x400204b8
 8008160:	58025408 	.word	0x58025408
 8008164:	5802541c 	.word	0x5802541c
 8008168:	58025430 	.word	0x58025430
 800816c:	58025444 	.word	0x58025444
 8008170:	58025458 	.word	0x58025458
 8008174:	5802546c 	.word	0x5802546c
 8008178:	58025480 	.word	0x58025480
 800817c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	f003 0320 	and.w	r3, r3, #32
 8008186:	2b00      	cmp	r3, #0
 8008188:	d160      	bne.n	800824c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a8c      	ldr	r2, [pc, #560]	; (80083c0 <HAL_DMA_IRQHandler+0xca8>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d04a      	beq.n	800822a <HAL_DMA_IRQHandler+0xb12>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a8a      	ldr	r2, [pc, #552]	; (80083c4 <HAL_DMA_IRQHandler+0xcac>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d045      	beq.n	800822a <HAL_DMA_IRQHandler+0xb12>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a89      	ldr	r2, [pc, #548]	; (80083c8 <HAL_DMA_IRQHandler+0xcb0>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d040      	beq.n	800822a <HAL_DMA_IRQHandler+0xb12>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a87      	ldr	r2, [pc, #540]	; (80083cc <HAL_DMA_IRQHandler+0xcb4>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d03b      	beq.n	800822a <HAL_DMA_IRQHandler+0xb12>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a86      	ldr	r2, [pc, #536]	; (80083d0 <HAL_DMA_IRQHandler+0xcb8>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d036      	beq.n	800822a <HAL_DMA_IRQHandler+0xb12>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a84      	ldr	r2, [pc, #528]	; (80083d4 <HAL_DMA_IRQHandler+0xcbc>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d031      	beq.n	800822a <HAL_DMA_IRQHandler+0xb12>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a83      	ldr	r2, [pc, #524]	; (80083d8 <HAL_DMA_IRQHandler+0xcc0>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d02c      	beq.n	800822a <HAL_DMA_IRQHandler+0xb12>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a81      	ldr	r2, [pc, #516]	; (80083dc <HAL_DMA_IRQHandler+0xcc4>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d027      	beq.n	800822a <HAL_DMA_IRQHandler+0xb12>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a80      	ldr	r2, [pc, #512]	; (80083e0 <HAL_DMA_IRQHandler+0xcc8>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d022      	beq.n	800822a <HAL_DMA_IRQHandler+0xb12>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a7e      	ldr	r2, [pc, #504]	; (80083e4 <HAL_DMA_IRQHandler+0xccc>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d01d      	beq.n	800822a <HAL_DMA_IRQHandler+0xb12>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a7d      	ldr	r2, [pc, #500]	; (80083e8 <HAL_DMA_IRQHandler+0xcd0>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d018      	beq.n	800822a <HAL_DMA_IRQHandler+0xb12>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a7b      	ldr	r2, [pc, #492]	; (80083ec <HAL_DMA_IRQHandler+0xcd4>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d013      	beq.n	800822a <HAL_DMA_IRQHandler+0xb12>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a7a      	ldr	r2, [pc, #488]	; (80083f0 <HAL_DMA_IRQHandler+0xcd8>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d00e      	beq.n	800822a <HAL_DMA_IRQHandler+0xb12>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a78      	ldr	r2, [pc, #480]	; (80083f4 <HAL_DMA_IRQHandler+0xcdc>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d009      	beq.n	800822a <HAL_DMA_IRQHandler+0xb12>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a77      	ldr	r2, [pc, #476]	; (80083f8 <HAL_DMA_IRQHandler+0xce0>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d004      	beq.n	800822a <HAL_DMA_IRQHandler+0xb12>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a75      	ldr	r2, [pc, #468]	; (80083fc <HAL_DMA_IRQHandler+0xce4>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d108      	bne.n	800823c <HAL_DMA_IRQHandler+0xb24>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f022 0208 	bic.w	r2, r2, #8
 8008238:	601a      	str	r2, [r3, #0]
 800823a:	e007      	b.n	800824c <HAL_DMA_IRQHandler+0xb34>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f022 0204 	bic.w	r2, r2, #4
 800824a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008250:	2b00      	cmp	r3, #0
 8008252:	f000 8165 	beq.w	8008520 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800825e:	e15f      	b.n	8008520 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008264:	f003 031f 	and.w	r3, r3, #31
 8008268:	2202      	movs	r2, #2
 800826a:	409a      	lsls	r2, r3
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	4013      	ands	r3, r2
 8008270:	2b00      	cmp	r3, #0
 8008272:	f000 80c5 	beq.w	8008400 <HAL_DMA_IRQHandler+0xce8>
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	f003 0302 	and.w	r3, r3, #2
 800827c:	2b00      	cmp	r3, #0
 800827e:	f000 80bf 	beq.w	8008400 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008286:	f003 031f 	and.w	r3, r3, #31
 800828a:	2202      	movs	r2, #2
 800828c:	409a      	lsls	r2, r3
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008298:	2b00      	cmp	r3, #0
 800829a:	d018      	beq.n	80082ce <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d109      	bne.n	80082ba <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	f000 813a 	beq.w	8008524 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082b8:	e134      	b.n	8008524 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082be:	2b00      	cmp	r3, #0
 80082c0:	f000 8130 	beq.w	8008524 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082cc:	e12a      	b.n	8008524 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	f003 0320 	and.w	r3, r3, #32
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d168      	bne.n	80083aa <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a38      	ldr	r2, [pc, #224]	; (80083c0 <HAL_DMA_IRQHandler+0xca8>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d04a      	beq.n	8008378 <HAL_DMA_IRQHandler+0xc60>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a37      	ldr	r2, [pc, #220]	; (80083c4 <HAL_DMA_IRQHandler+0xcac>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d045      	beq.n	8008378 <HAL_DMA_IRQHandler+0xc60>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a35      	ldr	r2, [pc, #212]	; (80083c8 <HAL_DMA_IRQHandler+0xcb0>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d040      	beq.n	8008378 <HAL_DMA_IRQHandler+0xc60>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a34      	ldr	r2, [pc, #208]	; (80083cc <HAL_DMA_IRQHandler+0xcb4>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d03b      	beq.n	8008378 <HAL_DMA_IRQHandler+0xc60>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a32      	ldr	r2, [pc, #200]	; (80083d0 <HAL_DMA_IRQHandler+0xcb8>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d036      	beq.n	8008378 <HAL_DMA_IRQHandler+0xc60>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a31      	ldr	r2, [pc, #196]	; (80083d4 <HAL_DMA_IRQHandler+0xcbc>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d031      	beq.n	8008378 <HAL_DMA_IRQHandler+0xc60>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a2f      	ldr	r2, [pc, #188]	; (80083d8 <HAL_DMA_IRQHandler+0xcc0>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d02c      	beq.n	8008378 <HAL_DMA_IRQHandler+0xc60>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a2e      	ldr	r2, [pc, #184]	; (80083dc <HAL_DMA_IRQHandler+0xcc4>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d027      	beq.n	8008378 <HAL_DMA_IRQHandler+0xc60>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a2c      	ldr	r2, [pc, #176]	; (80083e0 <HAL_DMA_IRQHandler+0xcc8>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d022      	beq.n	8008378 <HAL_DMA_IRQHandler+0xc60>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a2b      	ldr	r2, [pc, #172]	; (80083e4 <HAL_DMA_IRQHandler+0xccc>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d01d      	beq.n	8008378 <HAL_DMA_IRQHandler+0xc60>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a29      	ldr	r2, [pc, #164]	; (80083e8 <HAL_DMA_IRQHandler+0xcd0>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d018      	beq.n	8008378 <HAL_DMA_IRQHandler+0xc60>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a28      	ldr	r2, [pc, #160]	; (80083ec <HAL_DMA_IRQHandler+0xcd4>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d013      	beq.n	8008378 <HAL_DMA_IRQHandler+0xc60>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a26      	ldr	r2, [pc, #152]	; (80083f0 <HAL_DMA_IRQHandler+0xcd8>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d00e      	beq.n	8008378 <HAL_DMA_IRQHandler+0xc60>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a25      	ldr	r2, [pc, #148]	; (80083f4 <HAL_DMA_IRQHandler+0xcdc>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d009      	beq.n	8008378 <HAL_DMA_IRQHandler+0xc60>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a23      	ldr	r2, [pc, #140]	; (80083f8 <HAL_DMA_IRQHandler+0xce0>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d004      	beq.n	8008378 <HAL_DMA_IRQHandler+0xc60>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a22      	ldr	r2, [pc, #136]	; (80083fc <HAL_DMA_IRQHandler+0xce4>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d108      	bne.n	800838a <HAL_DMA_IRQHandler+0xc72>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f022 0214 	bic.w	r2, r2, #20
 8008386:	601a      	str	r2, [r3, #0]
 8008388:	e007      	b.n	800839a <HAL_DMA_IRQHandler+0xc82>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f022 020a 	bic.w	r2, r2, #10
 8008398:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2201      	movs	r2, #1
 800839e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	f000 80b8 	beq.w	8008524 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80083bc:	e0b2      	b.n	8008524 <HAL_DMA_IRQHandler+0xe0c>
 80083be:	bf00      	nop
 80083c0:	40020010 	.word	0x40020010
 80083c4:	40020028 	.word	0x40020028
 80083c8:	40020040 	.word	0x40020040
 80083cc:	40020058 	.word	0x40020058
 80083d0:	40020070 	.word	0x40020070
 80083d4:	40020088 	.word	0x40020088
 80083d8:	400200a0 	.word	0x400200a0
 80083dc:	400200b8 	.word	0x400200b8
 80083e0:	40020410 	.word	0x40020410
 80083e4:	40020428 	.word	0x40020428
 80083e8:	40020440 	.word	0x40020440
 80083ec:	40020458 	.word	0x40020458
 80083f0:	40020470 	.word	0x40020470
 80083f4:	40020488 	.word	0x40020488
 80083f8:	400204a0 	.word	0x400204a0
 80083fc:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008404:	f003 031f 	and.w	r3, r3, #31
 8008408:	2208      	movs	r2, #8
 800840a:	409a      	lsls	r2, r3
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	4013      	ands	r3, r2
 8008410:	2b00      	cmp	r3, #0
 8008412:	f000 8088 	beq.w	8008526 <HAL_DMA_IRQHandler+0xe0e>
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	f003 0308 	and.w	r3, r3, #8
 800841c:	2b00      	cmp	r3, #0
 800841e:	f000 8082 	beq.w	8008526 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a41      	ldr	r2, [pc, #260]	; (800852c <HAL_DMA_IRQHandler+0xe14>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d04a      	beq.n	80084c2 <HAL_DMA_IRQHandler+0xdaa>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a3f      	ldr	r2, [pc, #252]	; (8008530 <HAL_DMA_IRQHandler+0xe18>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d045      	beq.n	80084c2 <HAL_DMA_IRQHandler+0xdaa>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a3e      	ldr	r2, [pc, #248]	; (8008534 <HAL_DMA_IRQHandler+0xe1c>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d040      	beq.n	80084c2 <HAL_DMA_IRQHandler+0xdaa>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a3c      	ldr	r2, [pc, #240]	; (8008538 <HAL_DMA_IRQHandler+0xe20>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d03b      	beq.n	80084c2 <HAL_DMA_IRQHandler+0xdaa>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a3b      	ldr	r2, [pc, #236]	; (800853c <HAL_DMA_IRQHandler+0xe24>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d036      	beq.n	80084c2 <HAL_DMA_IRQHandler+0xdaa>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a39      	ldr	r2, [pc, #228]	; (8008540 <HAL_DMA_IRQHandler+0xe28>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d031      	beq.n	80084c2 <HAL_DMA_IRQHandler+0xdaa>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a38      	ldr	r2, [pc, #224]	; (8008544 <HAL_DMA_IRQHandler+0xe2c>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d02c      	beq.n	80084c2 <HAL_DMA_IRQHandler+0xdaa>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a36      	ldr	r2, [pc, #216]	; (8008548 <HAL_DMA_IRQHandler+0xe30>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d027      	beq.n	80084c2 <HAL_DMA_IRQHandler+0xdaa>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a35      	ldr	r2, [pc, #212]	; (800854c <HAL_DMA_IRQHandler+0xe34>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d022      	beq.n	80084c2 <HAL_DMA_IRQHandler+0xdaa>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a33      	ldr	r2, [pc, #204]	; (8008550 <HAL_DMA_IRQHandler+0xe38>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d01d      	beq.n	80084c2 <HAL_DMA_IRQHandler+0xdaa>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a32      	ldr	r2, [pc, #200]	; (8008554 <HAL_DMA_IRQHandler+0xe3c>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d018      	beq.n	80084c2 <HAL_DMA_IRQHandler+0xdaa>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a30      	ldr	r2, [pc, #192]	; (8008558 <HAL_DMA_IRQHandler+0xe40>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d013      	beq.n	80084c2 <HAL_DMA_IRQHandler+0xdaa>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a2f      	ldr	r2, [pc, #188]	; (800855c <HAL_DMA_IRQHandler+0xe44>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d00e      	beq.n	80084c2 <HAL_DMA_IRQHandler+0xdaa>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a2d      	ldr	r2, [pc, #180]	; (8008560 <HAL_DMA_IRQHandler+0xe48>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d009      	beq.n	80084c2 <HAL_DMA_IRQHandler+0xdaa>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a2c      	ldr	r2, [pc, #176]	; (8008564 <HAL_DMA_IRQHandler+0xe4c>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d004      	beq.n	80084c2 <HAL_DMA_IRQHandler+0xdaa>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a2a      	ldr	r2, [pc, #168]	; (8008568 <HAL_DMA_IRQHandler+0xe50>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d108      	bne.n	80084d4 <HAL_DMA_IRQHandler+0xdbc>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f022 021c 	bic.w	r2, r2, #28
 80084d0:	601a      	str	r2, [r3, #0]
 80084d2:	e007      	b.n	80084e4 <HAL_DMA_IRQHandler+0xdcc>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f022 020e 	bic.w	r2, r2, #14
 80084e2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084e8:	f003 031f 	and.w	r3, r3, #31
 80084ec:	2201      	movs	r2, #1
 80084ee:	409a      	lsls	r2, r3
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2201      	movs	r2, #1
 80084fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800850e:	2b00      	cmp	r3, #0
 8008510:	d009      	beq.n	8008526 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	4798      	blx	r3
 800851a:	e004      	b.n	8008526 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800851c:	bf00      	nop
 800851e:	e002      	b.n	8008526 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008520:	bf00      	nop
 8008522:	e000      	b.n	8008526 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008524:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008526:	3728      	adds	r7, #40	; 0x28
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	40020010 	.word	0x40020010
 8008530:	40020028 	.word	0x40020028
 8008534:	40020040 	.word	0x40020040
 8008538:	40020058 	.word	0x40020058
 800853c:	40020070 	.word	0x40020070
 8008540:	40020088 	.word	0x40020088
 8008544:	400200a0 	.word	0x400200a0
 8008548:	400200b8 	.word	0x400200b8
 800854c:	40020410 	.word	0x40020410
 8008550:	40020428 	.word	0x40020428
 8008554:	40020440 	.word	0x40020440
 8008558:	40020458 	.word	0x40020458
 800855c:	40020470 	.word	0x40020470
 8008560:	40020488 	.word	0x40020488
 8008564:	400204a0 	.word	0x400204a0
 8008568:	400204b8 	.word	0x400204b8

0800856c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800856c:	b480      	push	{r7}
 800856e:	b087      	sub	sp, #28
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	607a      	str	r2, [r7, #4]
 8008578:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800857e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008584:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a84      	ldr	r2, [pc, #528]	; (800879c <DMA_SetConfig+0x230>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d072      	beq.n	8008676 <DMA_SetConfig+0x10a>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a82      	ldr	r2, [pc, #520]	; (80087a0 <DMA_SetConfig+0x234>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d06d      	beq.n	8008676 <DMA_SetConfig+0x10a>
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a81      	ldr	r2, [pc, #516]	; (80087a4 <DMA_SetConfig+0x238>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d068      	beq.n	8008676 <DMA_SetConfig+0x10a>
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a7f      	ldr	r2, [pc, #508]	; (80087a8 <DMA_SetConfig+0x23c>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d063      	beq.n	8008676 <DMA_SetConfig+0x10a>
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a7e      	ldr	r2, [pc, #504]	; (80087ac <DMA_SetConfig+0x240>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d05e      	beq.n	8008676 <DMA_SetConfig+0x10a>
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a7c      	ldr	r2, [pc, #496]	; (80087b0 <DMA_SetConfig+0x244>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d059      	beq.n	8008676 <DMA_SetConfig+0x10a>
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a7b      	ldr	r2, [pc, #492]	; (80087b4 <DMA_SetConfig+0x248>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d054      	beq.n	8008676 <DMA_SetConfig+0x10a>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a79      	ldr	r2, [pc, #484]	; (80087b8 <DMA_SetConfig+0x24c>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d04f      	beq.n	8008676 <DMA_SetConfig+0x10a>
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a78      	ldr	r2, [pc, #480]	; (80087bc <DMA_SetConfig+0x250>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d04a      	beq.n	8008676 <DMA_SetConfig+0x10a>
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a76      	ldr	r2, [pc, #472]	; (80087c0 <DMA_SetConfig+0x254>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d045      	beq.n	8008676 <DMA_SetConfig+0x10a>
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a75      	ldr	r2, [pc, #468]	; (80087c4 <DMA_SetConfig+0x258>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d040      	beq.n	8008676 <DMA_SetConfig+0x10a>
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a73      	ldr	r2, [pc, #460]	; (80087c8 <DMA_SetConfig+0x25c>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d03b      	beq.n	8008676 <DMA_SetConfig+0x10a>
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a72      	ldr	r2, [pc, #456]	; (80087cc <DMA_SetConfig+0x260>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d036      	beq.n	8008676 <DMA_SetConfig+0x10a>
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a70      	ldr	r2, [pc, #448]	; (80087d0 <DMA_SetConfig+0x264>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d031      	beq.n	8008676 <DMA_SetConfig+0x10a>
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a6f      	ldr	r2, [pc, #444]	; (80087d4 <DMA_SetConfig+0x268>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d02c      	beq.n	8008676 <DMA_SetConfig+0x10a>
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a6d      	ldr	r2, [pc, #436]	; (80087d8 <DMA_SetConfig+0x26c>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d027      	beq.n	8008676 <DMA_SetConfig+0x10a>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a6c      	ldr	r2, [pc, #432]	; (80087dc <DMA_SetConfig+0x270>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d022      	beq.n	8008676 <DMA_SetConfig+0x10a>
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a6a      	ldr	r2, [pc, #424]	; (80087e0 <DMA_SetConfig+0x274>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d01d      	beq.n	8008676 <DMA_SetConfig+0x10a>
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a69      	ldr	r2, [pc, #420]	; (80087e4 <DMA_SetConfig+0x278>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d018      	beq.n	8008676 <DMA_SetConfig+0x10a>
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a67      	ldr	r2, [pc, #412]	; (80087e8 <DMA_SetConfig+0x27c>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d013      	beq.n	8008676 <DMA_SetConfig+0x10a>
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a66      	ldr	r2, [pc, #408]	; (80087ec <DMA_SetConfig+0x280>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d00e      	beq.n	8008676 <DMA_SetConfig+0x10a>
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a64      	ldr	r2, [pc, #400]	; (80087f0 <DMA_SetConfig+0x284>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d009      	beq.n	8008676 <DMA_SetConfig+0x10a>
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a63      	ldr	r2, [pc, #396]	; (80087f4 <DMA_SetConfig+0x288>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d004      	beq.n	8008676 <DMA_SetConfig+0x10a>
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a61      	ldr	r2, [pc, #388]	; (80087f8 <DMA_SetConfig+0x28c>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d101      	bne.n	800867a <DMA_SetConfig+0x10e>
 8008676:	2301      	movs	r3, #1
 8008678:	e000      	b.n	800867c <DMA_SetConfig+0x110>
 800867a:	2300      	movs	r3, #0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00d      	beq.n	800869c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008688:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800868e:	2b00      	cmp	r3, #0
 8008690:	d004      	beq.n	800869c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008696:	68fa      	ldr	r2, [r7, #12]
 8008698:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800869a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a3e      	ldr	r2, [pc, #248]	; (800879c <DMA_SetConfig+0x230>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d04a      	beq.n	800873c <DMA_SetConfig+0x1d0>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a3d      	ldr	r2, [pc, #244]	; (80087a0 <DMA_SetConfig+0x234>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d045      	beq.n	800873c <DMA_SetConfig+0x1d0>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a3b      	ldr	r2, [pc, #236]	; (80087a4 <DMA_SetConfig+0x238>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d040      	beq.n	800873c <DMA_SetConfig+0x1d0>
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a3a      	ldr	r2, [pc, #232]	; (80087a8 <DMA_SetConfig+0x23c>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d03b      	beq.n	800873c <DMA_SetConfig+0x1d0>
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a38      	ldr	r2, [pc, #224]	; (80087ac <DMA_SetConfig+0x240>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d036      	beq.n	800873c <DMA_SetConfig+0x1d0>
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a37      	ldr	r2, [pc, #220]	; (80087b0 <DMA_SetConfig+0x244>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d031      	beq.n	800873c <DMA_SetConfig+0x1d0>
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a35      	ldr	r2, [pc, #212]	; (80087b4 <DMA_SetConfig+0x248>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d02c      	beq.n	800873c <DMA_SetConfig+0x1d0>
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a34      	ldr	r2, [pc, #208]	; (80087b8 <DMA_SetConfig+0x24c>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d027      	beq.n	800873c <DMA_SetConfig+0x1d0>
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a32      	ldr	r2, [pc, #200]	; (80087bc <DMA_SetConfig+0x250>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d022      	beq.n	800873c <DMA_SetConfig+0x1d0>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a31      	ldr	r2, [pc, #196]	; (80087c0 <DMA_SetConfig+0x254>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d01d      	beq.n	800873c <DMA_SetConfig+0x1d0>
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a2f      	ldr	r2, [pc, #188]	; (80087c4 <DMA_SetConfig+0x258>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d018      	beq.n	800873c <DMA_SetConfig+0x1d0>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a2e      	ldr	r2, [pc, #184]	; (80087c8 <DMA_SetConfig+0x25c>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d013      	beq.n	800873c <DMA_SetConfig+0x1d0>
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a2c      	ldr	r2, [pc, #176]	; (80087cc <DMA_SetConfig+0x260>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d00e      	beq.n	800873c <DMA_SetConfig+0x1d0>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a2b      	ldr	r2, [pc, #172]	; (80087d0 <DMA_SetConfig+0x264>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d009      	beq.n	800873c <DMA_SetConfig+0x1d0>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a29      	ldr	r2, [pc, #164]	; (80087d4 <DMA_SetConfig+0x268>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d004      	beq.n	800873c <DMA_SetConfig+0x1d0>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a28      	ldr	r2, [pc, #160]	; (80087d8 <DMA_SetConfig+0x26c>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d101      	bne.n	8008740 <DMA_SetConfig+0x1d4>
 800873c:	2301      	movs	r3, #1
 800873e:	e000      	b.n	8008742 <DMA_SetConfig+0x1d6>
 8008740:	2300      	movs	r3, #0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d05a      	beq.n	80087fc <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800874a:	f003 031f 	and.w	r3, r3, #31
 800874e:	223f      	movs	r2, #63	; 0x3f
 8008750:	409a      	lsls	r2, r3
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008764:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	683a      	ldr	r2, [r7, #0]
 800876c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	2b40      	cmp	r3, #64	; 0x40
 8008774:	d108      	bne.n	8008788 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	68ba      	ldr	r2, [r7, #8]
 8008784:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008786:	e087      	b.n	8008898 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	68ba      	ldr	r2, [r7, #8]
 800878e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	60da      	str	r2, [r3, #12]
}
 8008798:	e07e      	b.n	8008898 <DMA_SetConfig+0x32c>
 800879a:	bf00      	nop
 800879c:	40020010 	.word	0x40020010
 80087a0:	40020028 	.word	0x40020028
 80087a4:	40020040 	.word	0x40020040
 80087a8:	40020058 	.word	0x40020058
 80087ac:	40020070 	.word	0x40020070
 80087b0:	40020088 	.word	0x40020088
 80087b4:	400200a0 	.word	0x400200a0
 80087b8:	400200b8 	.word	0x400200b8
 80087bc:	40020410 	.word	0x40020410
 80087c0:	40020428 	.word	0x40020428
 80087c4:	40020440 	.word	0x40020440
 80087c8:	40020458 	.word	0x40020458
 80087cc:	40020470 	.word	0x40020470
 80087d0:	40020488 	.word	0x40020488
 80087d4:	400204a0 	.word	0x400204a0
 80087d8:	400204b8 	.word	0x400204b8
 80087dc:	58025408 	.word	0x58025408
 80087e0:	5802541c 	.word	0x5802541c
 80087e4:	58025430 	.word	0x58025430
 80087e8:	58025444 	.word	0x58025444
 80087ec:	58025458 	.word	0x58025458
 80087f0:	5802546c 	.word	0x5802546c
 80087f4:	58025480 	.word	0x58025480
 80087f8:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a28      	ldr	r2, [pc, #160]	; (80088a4 <DMA_SetConfig+0x338>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d022      	beq.n	800884c <DMA_SetConfig+0x2e0>
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a27      	ldr	r2, [pc, #156]	; (80088a8 <DMA_SetConfig+0x33c>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d01d      	beq.n	800884c <DMA_SetConfig+0x2e0>
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a25      	ldr	r2, [pc, #148]	; (80088ac <DMA_SetConfig+0x340>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d018      	beq.n	800884c <DMA_SetConfig+0x2e0>
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a24      	ldr	r2, [pc, #144]	; (80088b0 <DMA_SetConfig+0x344>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d013      	beq.n	800884c <DMA_SetConfig+0x2e0>
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a22      	ldr	r2, [pc, #136]	; (80088b4 <DMA_SetConfig+0x348>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d00e      	beq.n	800884c <DMA_SetConfig+0x2e0>
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a21      	ldr	r2, [pc, #132]	; (80088b8 <DMA_SetConfig+0x34c>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d009      	beq.n	800884c <DMA_SetConfig+0x2e0>
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a1f      	ldr	r2, [pc, #124]	; (80088bc <DMA_SetConfig+0x350>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d004      	beq.n	800884c <DMA_SetConfig+0x2e0>
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a1e      	ldr	r2, [pc, #120]	; (80088c0 <DMA_SetConfig+0x354>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d101      	bne.n	8008850 <DMA_SetConfig+0x2e4>
 800884c:	2301      	movs	r3, #1
 800884e:	e000      	b.n	8008852 <DMA_SetConfig+0x2e6>
 8008850:	2300      	movs	r3, #0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d020      	beq.n	8008898 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800885a:	f003 031f 	and.w	r3, r3, #31
 800885e:	2201      	movs	r2, #1
 8008860:	409a      	lsls	r2, r3
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	683a      	ldr	r2, [r7, #0]
 800886c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	2b40      	cmp	r3, #64	; 0x40
 8008874:	d108      	bne.n	8008888 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	68ba      	ldr	r2, [r7, #8]
 8008884:	60da      	str	r2, [r3, #12]
}
 8008886:	e007      	b.n	8008898 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68ba      	ldr	r2, [r7, #8]
 800888e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	60da      	str	r2, [r3, #12]
}
 8008898:	bf00      	nop
 800889a:	371c      	adds	r7, #28
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr
 80088a4:	58025408 	.word	0x58025408
 80088a8:	5802541c 	.word	0x5802541c
 80088ac:	58025430 	.word	0x58025430
 80088b0:	58025444 	.word	0x58025444
 80088b4:	58025458 	.word	0x58025458
 80088b8:	5802546c 	.word	0x5802546c
 80088bc:	58025480 	.word	0x58025480
 80088c0:	58025494 	.word	0x58025494

080088c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b085      	sub	sp, #20
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a42      	ldr	r2, [pc, #264]	; (80089dc <DMA_CalcBaseAndBitshift+0x118>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d04a      	beq.n	800896c <DMA_CalcBaseAndBitshift+0xa8>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a41      	ldr	r2, [pc, #260]	; (80089e0 <DMA_CalcBaseAndBitshift+0x11c>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d045      	beq.n	800896c <DMA_CalcBaseAndBitshift+0xa8>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a3f      	ldr	r2, [pc, #252]	; (80089e4 <DMA_CalcBaseAndBitshift+0x120>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d040      	beq.n	800896c <DMA_CalcBaseAndBitshift+0xa8>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a3e      	ldr	r2, [pc, #248]	; (80089e8 <DMA_CalcBaseAndBitshift+0x124>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d03b      	beq.n	800896c <DMA_CalcBaseAndBitshift+0xa8>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a3c      	ldr	r2, [pc, #240]	; (80089ec <DMA_CalcBaseAndBitshift+0x128>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d036      	beq.n	800896c <DMA_CalcBaseAndBitshift+0xa8>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a3b      	ldr	r2, [pc, #236]	; (80089f0 <DMA_CalcBaseAndBitshift+0x12c>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d031      	beq.n	800896c <DMA_CalcBaseAndBitshift+0xa8>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a39      	ldr	r2, [pc, #228]	; (80089f4 <DMA_CalcBaseAndBitshift+0x130>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d02c      	beq.n	800896c <DMA_CalcBaseAndBitshift+0xa8>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a38      	ldr	r2, [pc, #224]	; (80089f8 <DMA_CalcBaseAndBitshift+0x134>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d027      	beq.n	800896c <DMA_CalcBaseAndBitshift+0xa8>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a36      	ldr	r2, [pc, #216]	; (80089fc <DMA_CalcBaseAndBitshift+0x138>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d022      	beq.n	800896c <DMA_CalcBaseAndBitshift+0xa8>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a35      	ldr	r2, [pc, #212]	; (8008a00 <DMA_CalcBaseAndBitshift+0x13c>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d01d      	beq.n	800896c <DMA_CalcBaseAndBitshift+0xa8>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a33      	ldr	r2, [pc, #204]	; (8008a04 <DMA_CalcBaseAndBitshift+0x140>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d018      	beq.n	800896c <DMA_CalcBaseAndBitshift+0xa8>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a32      	ldr	r2, [pc, #200]	; (8008a08 <DMA_CalcBaseAndBitshift+0x144>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d013      	beq.n	800896c <DMA_CalcBaseAndBitshift+0xa8>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a30      	ldr	r2, [pc, #192]	; (8008a0c <DMA_CalcBaseAndBitshift+0x148>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d00e      	beq.n	800896c <DMA_CalcBaseAndBitshift+0xa8>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a2f      	ldr	r2, [pc, #188]	; (8008a10 <DMA_CalcBaseAndBitshift+0x14c>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d009      	beq.n	800896c <DMA_CalcBaseAndBitshift+0xa8>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a2d      	ldr	r2, [pc, #180]	; (8008a14 <DMA_CalcBaseAndBitshift+0x150>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d004      	beq.n	800896c <DMA_CalcBaseAndBitshift+0xa8>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a2c      	ldr	r2, [pc, #176]	; (8008a18 <DMA_CalcBaseAndBitshift+0x154>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d101      	bne.n	8008970 <DMA_CalcBaseAndBitshift+0xac>
 800896c:	2301      	movs	r3, #1
 800896e:	e000      	b.n	8008972 <DMA_CalcBaseAndBitshift+0xae>
 8008970:	2300      	movs	r3, #0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d024      	beq.n	80089c0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	b2db      	uxtb	r3, r3
 800897c:	3b10      	subs	r3, #16
 800897e:	4a27      	ldr	r2, [pc, #156]	; (8008a1c <DMA_CalcBaseAndBitshift+0x158>)
 8008980:	fba2 2303 	umull	r2, r3, r2, r3
 8008984:	091b      	lsrs	r3, r3, #4
 8008986:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f003 0307 	and.w	r3, r3, #7
 800898e:	4a24      	ldr	r2, [pc, #144]	; (8008a20 <DMA_CalcBaseAndBitshift+0x15c>)
 8008990:	5cd3      	ldrb	r3, [r2, r3]
 8008992:	461a      	mov	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2b03      	cmp	r3, #3
 800899c:	d908      	bls.n	80089b0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	461a      	mov	r2, r3
 80089a4:	4b1f      	ldr	r3, [pc, #124]	; (8008a24 <DMA_CalcBaseAndBitshift+0x160>)
 80089a6:	4013      	ands	r3, r2
 80089a8:	1d1a      	adds	r2, r3, #4
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	659a      	str	r2, [r3, #88]	; 0x58
 80089ae:	e00d      	b.n	80089cc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	461a      	mov	r2, r3
 80089b6:	4b1b      	ldr	r3, [pc, #108]	; (8008a24 <DMA_CalcBaseAndBitshift+0x160>)
 80089b8:	4013      	ands	r3, r2
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	6593      	str	r3, [r2, #88]	; 0x58
 80089be:	e005      	b.n	80089cc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3714      	adds	r7, #20
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr
 80089dc:	40020010 	.word	0x40020010
 80089e0:	40020028 	.word	0x40020028
 80089e4:	40020040 	.word	0x40020040
 80089e8:	40020058 	.word	0x40020058
 80089ec:	40020070 	.word	0x40020070
 80089f0:	40020088 	.word	0x40020088
 80089f4:	400200a0 	.word	0x400200a0
 80089f8:	400200b8 	.word	0x400200b8
 80089fc:	40020410 	.word	0x40020410
 8008a00:	40020428 	.word	0x40020428
 8008a04:	40020440 	.word	0x40020440
 8008a08:	40020458 	.word	0x40020458
 8008a0c:	40020470 	.word	0x40020470
 8008a10:	40020488 	.word	0x40020488
 8008a14:	400204a0 	.word	0x400204a0
 8008a18:	400204b8 	.word	0x400204b8
 8008a1c:	aaaaaaab 	.word	0xaaaaaaab
 8008a20:	080132e0 	.word	0x080132e0
 8008a24:	fffffc00 	.word	0xfffffc00

08008a28 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b085      	sub	sp, #20
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a30:	2300      	movs	r3, #0
 8008a32:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	699b      	ldr	r3, [r3, #24]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d120      	bne.n	8008a7e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a40:	2b03      	cmp	r3, #3
 8008a42:	d858      	bhi.n	8008af6 <DMA_CheckFifoParam+0xce>
 8008a44:	a201      	add	r2, pc, #4	; (adr r2, 8008a4c <DMA_CheckFifoParam+0x24>)
 8008a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a4a:	bf00      	nop
 8008a4c:	08008a5d 	.word	0x08008a5d
 8008a50:	08008a6f 	.word	0x08008a6f
 8008a54:	08008a5d 	.word	0x08008a5d
 8008a58:	08008af7 	.word	0x08008af7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d048      	beq.n	8008afa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008a6c:	e045      	b.n	8008afa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008a76:	d142      	bne.n	8008afe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008a7c:	e03f      	b.n	8008afe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	699b      	ldr	r3, [r3, #24]
 8008a82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a86:	d123      	bne.n	8008ad0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a8c:	2b03      	cmp	r3, #3
 8008a8e:	d838      	bhi.n	8008b02 <DMA_CheckFifoParam+0xda>
 8008a90:	a201      	add	r2, pc, #4	; (adr r2, 8008a98 <DMA_CheckFifoParam+0x70>)
 8008a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a96:	bf00      	nop
 8008a98:	08008aa9 	.word	0x08008aa9
 8008a9c:	08008aaf 	.word	0x08008aaf
 8008aa0:	08008aa9 	.word	0x08008aa9
 8008aa4:	08008ac1 	.word	0x08008ac1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	73fb      	strb	r3, [r7, #15]
        break;
 8008aac:	e030      	b.n	8008b10 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d025      	beq.n	8008b06 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008abe:	e022      	b.n	8008b06 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008ac8:	d11f      	bne.n	8008b0a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008aca:	2301      	movs	r3, #1
 8008acc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008ace:	e01c      	b.n	8008b0a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ad4:	2b02      	cmp	r3, #2
 8008ad6:	d902      	bls.n	8008ade <DMA_CheckFifoParam+0xb6>
 8008ad8:	2b03      	cmp	r3, #3
 8008ada:	d003      	beq.n	8008ae4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008adc:	e018      	b.n	8008b10 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	73fb      	strb	r3, [r7, #15]
        break;
 8008ae2:	e015      	b.n	8008b10 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00e      	beq.n	8008b0e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	73fb      	strb	r3, [r7, #15]
    break;
 8008af4:	e00b      	b.n	8008b0e <DMA_CheckFifoParam+0xe6>
        break;
 8008af6:	bf00      	nop
 8008af8:	e00a      	b.n	8008b10 <DMA_CheckFifoParam+0xe8>
        break;
 8008afa:	bf00      	nop
 8008afc:	e008      	b.n	8008b10 <DMA_CheckFifoParam+0xe8>
        break;
 8008afe:	bf00      	nop
 8008b00:	e006      	b.n	8008b10 <DMA_CheckFifoParam+0xe8>
        break;
 8008b02:	bf00      	nop
 8008b04:	e004      	b.n	8008b10 <DMA_CheckFifoParam+0xe8>
        break;
 8008b06:	bf00      	nop
 8008b08:	e002      	b.n	8008b10 <DMA_CheckFifoParam+0xe8>
        break;
 8008b0a:	bf00      	nop
 8008b0c:	e000      	b.n	8008b10 <DMA_CheckFifoParam+0xe8>
    break;
 8008b0e:	bf00      	nop
    }
  }

  return status;
 8008b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3714      	adds	r7, #20
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop

08008b20 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b085      	sub	sp, #20
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a38      	ldr	r2, [pc, #224]	; (8008c14 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d022      	beq.n	8008b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a36      	ldr	r2, [pc, #216]	; (8008c18 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d01d      	beq.n	8008b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a35      	ldr	r2, [pc, #212]	; (8008c1c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d018      	beq.n	8008b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a33      	ldr	r2, [pc, #204]	; (8008c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d013      	beq.n	8008b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a32      	ldr	r2, [pc, #200]	; (8008c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d00e      	beq.n	8008b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a30      	ldr	r2, [pc, #192]	; (8008c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d009      	beq.n	8008b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a2f      	ldr	r2, [pc, #188]	; (8008c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d004      	beq.n	8008b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a2d      	ldr	r2, [pc, #180]	; (8008c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d101      	bne.n	8008b82 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e000      	b.n	8008b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008b82:	2300      	movs	r3, #0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d01a      	beq.n	8008bbe <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	3b08      	subs	r3, #8
 8008b90:	4a28      	ldr	r2, [pc, #160]	; (8008c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008b92:	fba2 2303 	umull	r2, r3, r2, r3
 8008b96:	091b      	lsrs	r3, r3, #4
 8008b98:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	4b26      	ldr	r3, [pc, #152]	; (8008c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008b9e:	4413      	add	r3, r2
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	4a24      	ldr	r2, [pc, #144]	; (8008c3c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008bac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f003 031f 	and.w	r3, r3, #31
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	409a      	lsls	r2, r3
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008bbc:	e024      	b.n	8008c08 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	3b10      	subs	r3, #16
 8008bc6:	4a1e      	ldr	r2, [pc, #120]	; (8008c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8008bcc:	091b      	lsrs	r3, r3, #4
 8008bce:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	4a1c      	ldr	r2, [pc, #112]	; (8008c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d806      	bhi.n	8008be6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	4a1b      	ldr	r2, [pc, #108]	; (8008c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d902      	bls.n	8008be6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	3308      	adds	r3, #8
 8008be4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	4b18      	ldr	r3, [pc, #96]	; (8008c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008bea:	4413      	add	r3, r2
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	461a      	mov	r2, r3
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4a16      	ldr	r2, [pc, #88]	; (8008c50 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008bf8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f003 031f 	and.w	r3, r3, #31
 8008c00:	2201      	movs	r2, #1
 8008c02:	409a      	lsls	r2, r3
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008c08:	bf00      	nop
 8008c0a:	3714      	adds	r7, #20
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr
 8008c14:	58025408 	.word	0x58025408
 8008c18:	5802541c 	.word	0x5802541c
 8008c1c:	58025430 	.word	0x58025430
 8008c20:	58025444 	.word	0x58025444
 8008c24:	58025458 	.word	0x58025458
 8008c28:	5802546c 	.word	0x5802546c
 8008c2c:	58025480 	.word	0x58025480
 8008c30:	58025494 	.word	0x58025494
 8008c34:	cccccccd 	.word	0xcccccccd
 8008c38:	16009600 	.word	0x16009600
 8008c3c:	58025880 	.word	0x58025880
 8008c40:	aaaaaaab 	.word	0xaaaaaaab
 8008c44:	400204b8 	.word	0x400204b8
 8008c48:	4002040f 	.word	0x4002040f
 8008c4c:	10008200 	.word	0x10008200
 8008c50:	40020880 	.word	0x40020880

08008c54 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d04a      	beq.n	8008d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2b08      	cmp	r3, #8
 8008c6e:	d847      	bhi.n	8008d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a25      	ldr	r2, [pc, #148]	; (8008d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d022      	beq.n	8008cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a24      	ldr	r2, [pc, #144]	; (8008d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d01d      	beq.n	8008cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a22      	ldr	r2, [pc, #136]	; (8008d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d018      	beq.n	8008cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a21      	ldr	r2, [pc, #132]	; (8008d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d013      	beq.n	8008cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a1f      	ldr	r2, [pc, #124]	; (8008d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d00e      	beq.n	8008cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a1e      	ldr	r2, [pc, #120]	; (8008d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d009      	beq.n	8008cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a1c      	ldr	r2, [pc, #112]	; (8008d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d004      	beq.n	8008cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a1b      	ldr	r2, [pc, #108]	; (8008d28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d101      	bne.n	8008cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	e000      	b.n	8008cc6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00a      	beq.n	8008ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	4b17      	ldr	r3, [pc, #92]	; (8008d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008cce:	4413      	add	r3, r2
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4a15      	ldr	r2, [pc, #84]	; (8008d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008cdc:	671a      	str	r2, [r3, #112]	; 0x70
 8008cde:	e009      	b.n	8008cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008ce0:	68fa      	ldr	r2, [r7, #12]
 8008ce2:	4b14      	ldr	r3, [pc, #80]	; (8008d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008ce4:	4413      	add	r3, r2
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	461a      	mov	r2, r3
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a11      	ldr	r2, [pc, #68]	; (8008d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008cf2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	3b01      	subs	r3, #1
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	409a      	lsls	r2, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008d00:	bf00      	nop
 8008d02:	3714      	adds	r7, #20
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr
 8008d0c:	58025408 	.word	0x58025408
 8008d10:	5802541c 	.word	0x5802541c
 8008d14:	58025430 	.word	0x58025430
 8008d18:	58025444 	.word	0x58025444
 8008d1c:	58025458 	.word	0x58025458
 8008d20:	5802546c 	.word	0x5802546c
 8008d24:	58025480 	.word	0x58025480
 8008d28:	58025494 	.word	0x58025494
 8008d2c:	1600963f 	.word	0x1600963f
 8008d30:	58025940 	.word	0x58025940
 8008d34:	1000823f 	.word	0x1000823f
 8008d38:	40020940 	.word	0x40020940

08008d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b089      	sub	sp, #36	; 0x24
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008d46:	2300      	movs	r3, #0
 8008d48:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008d4a:	4b89      	ldr	r3, [pc, #548]	; (8008f70 <HAL_GPIO_Init+0x234>)
 8008d4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008d4e:	e194      	b.n	800907a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	2101      	movs	r1, #1
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	fa01 f303 	lsl.w	r3, r1, r3
 8008d5c:	4013      	ands	r3, r2
 8008d5e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	f000 8186 	beq.w	8009074 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	f003 0303 	and.w	r3, r3, #3
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d005      	beq.n	8008d80 <HAL_GPIO_Init+0x44>
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	f003 0303 	and.w	r3, r3, #3
 8008d7c:	2b02      	cmp	r3, #2
 8008d7e:	d130      	bne.n	8008de2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	005b      	lsls	r3, r3, #1
 8008d8a:	2203      	movs	r2, #3
 8008d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d90:	43db      	mvns	r3, r3
 8008d92:	69ba      	ldr	r2, [r7, #24]
 8008d94:	4013      	ands	r3, r2
 8008d96:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	68da      	ldr	r2, [r3, #12]
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	005b      	lsls	r3, r3, #1
 8008da0:	fa02 f303 	lsl.w	r3, r2, r3
 8008da4:	69ba      	ldr	r2, [r7, #24]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	69ba      	ldr	r2, [r7, #24]
 8008dae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008db6:	2201      	movs	r2, #1
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	fa02 f303 	lsl.w	r3, r2, r3
 8008dbe:	43db      	mvns	r3, r3
 8008dc0:	69ba      	ldr	r2, [r7, #24]
 8008dc2:	4013      	ands	r3, r2
 8008dc4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	091b      	lsrs	r3, r3, #4
 8008dcc:	f003 0201 	and.w	r2, r3, #1
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8008dd6:	69ba      	ldr	r2, [r7, #24]
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	69ba      	ldr	r2, [r7, #24]
 8008de0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	f003 0303 	and.w	r3, r3, #3
 8008dea:	2b03      	cmp	r3, #3
 8008dec:	d017      	beq.n	8008e1e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	005b      	lsls	r3, r3, #1
 8008df8:	2203      	movs	r2, #3
 8008dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8008dfe:	43db      	mvns	r3, r3
 8008e00:	69ba      	ldr	r2, [r7, #24]
 8008e02:	4013      	ands	r3, r2
 8008e04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	689a      	ldr	r2, [r3, #8]
 8008e0a:	69fb      	ldr	r3, [r7, #28]
 8008e0c:	005b      	lsls	r3, r3, #1
 8008e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e12:	69ba      	ldr	r2, [r7, #24]
 8008e14:	4313      	orrs	r3, r2
 8008e16:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	69ba      	ldr	r2, [r7, #24]
 8008e1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	f003 0303 	and.w	r3, r3, #3
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	d123      	bne.n	8008e72 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	08da      	lsrs	r2, r3, #3
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	3208      	adds	r2, #8
 8008e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	f003 0307 	and.w	r3, r3, #7
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	220f      	movs	r2, #15
 8008e42:	fa02 f303 	lsl.w	r3, r2, r3
 8008e46:	43db      	mvns	r3, r3
 8008e48:	69ba      	ldr	r2, [r7, #24]
 8008e4a:	4013      	ands	r3, r2
 8008e4c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	691a      	ldr	r2, [r3, #16]
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	f003 0307 	and.w	r3, r3, #7
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e5e:	69ba      	ldr	r2, [r7, #24]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	08da      	lsrs	r2, r3, #3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	3208      	adds	r2, #8
 8008e6c:	69b9      	ldr	r1, [r7, #24]
 8008e6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	005b      	lsls	r3, r3, #1
 8008e7c:	2203      	movs	r2, #3
 8008e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e82:	43db      	mvns	r3, r3
 8008e84:	69ba      	ldr	r2, [r7, #24]
 8008e86:	4013      	ands	r3, r2
 8008e88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	f003 0203 	and.w	r2, r3, #3
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	005b      	lsls	r3, r3, #1
 8008e96:	fa02 f303 	lsl.w	r3, r2, r3
 8008e9a:	69ba      	ldr	r2, [r7, #24]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	69ba      	ldr	r2, [r7, #24]
 8008ea4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	f000 80e0 	beq.w	8009074 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008eb4:	4b2f      	ldr	r3, [pc, #188]	; (8008f74 <HAL_GPIO_Init+0x238>)
 8008eb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008eba:	4a2e      	ldr	r2, [pc, #184]	; (8008f74 <HAL_GPIO_Init+0x238>)
 8008ebc:	f043 0302 	orr.w	r3, r3, #2
 8008ec0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008ec4:	4b2b      	ldr	r3, [pc, #172]	; (8008f74 <HAL_GPIO_Init+0x238>)
 8008ec6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008eca:	f003 0302 	and.w	r3, r3, #2
 8008ece:	60fb      	str	r3, [r7, #12]
 8008ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008ed2:	4a29      	ldr	r2, [pc, #164]	; (8008f78 <HAL_GPIO_Init+0x23c>)
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	089b      	lsrs	r3, r3, #2
 8008ed8:	3302      	adds	r3, #2
 8008eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	f003 0303 	and.w	r3, r3, #3
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	220f      	movs	r2, #15
 8008eea:	fa02 f303 	lsl.w	r3, r2, r3
 8008eee:	43db      	mvns	r3, r3
 8008ef0:	69ba      	ldr	r2, [r7, #24]
 8008ef2:	4013      	ands	r3, r2
 8008ef4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	4a20      	ldr	r2, [pc, #128]	; (8008f7c <HAL_GPIO_Init+0x240>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d052      	beq.n	8008fa4 <HAL_GPIO_Init+0x268>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4a1f      	ldr	r2, [pc, #124]	; (8008f80 <HAL_GPIO_Init+0x244>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d031      	beq.n	8008f6a <HAL_GPIO_Init+0x22e>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4a1e      	ldr	r2, [pc, #120]	; (8008f84 <HAL_GPIO_Init+0x248>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d02b      	beq.n	8008f66 <HAL_GPIO_Init+0x22a>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	4a1d      	ldr	r2, [pc, #116]	; (8008f88 <HAL_GPIO_Init+0x24c>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d025      	beq.n	8008f62 <HAL_GPIO_Init+0x226>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4a1c      	ldr	r2, [pc, #112]	; (8008f8c <HAL_GPIO_Init+0x250>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d01f      	beq.n	8008f5e <HAL_GPIO_Init+0x222>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	4a1b      	ldr	r2, [pc, #108]	; (8008f90 <HAL_GPIO_Init+0x254>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d019      	beq.n	8008f5a <HAL_GPIO_Init+0x21e>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4a1a      	ldr	r2, [pc, #104]	; (8008f94 <HAL_GPIO_Init+0x258>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d013      	beq.n	8008f56 <HAL_GPIO_Init+0x21a>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4a19      	ldr	r2, [pc, #100]	; (8008f98 <HAL_GPIO_Init+0x25c>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d00d      	beq.n	8008f52 <HAL_GPIO_Init+0x216>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	4a18      	ldr	r2, [pc, #96]	; (8008f9c <HAL_GPIO_Init+0x260>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d007      	beq.n	8008f4e <HAL_GPIO_Init+0x212>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	4a17      	ldr	r2, [pc, #92]	; (8008fa0 <HAL_GPIO_Init+0x264>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d101      	bne.n	8008f4a <HAL_GPIO_Init+0x20e>
 8008f46:	2309      	movs	r3, #9
 8008f48:	e02d      	b.n	8008fa6 <HAL_GPIO_Init+0x26a>
 8008f4a:	230a      	movs	r3, #10
 8008f4c:	e02b      	b.n	8008fa6 <HAL_GPIO_Init+0x26a>
 8008f4e:	2308      	movs	r3, #8
 8008f50:	e029      	b.n	8008fa6 <HAL_GPIO_Init+0x26a>
 8008f52:	2307      	movs	r3, #7
 8008f54:	e027      	b.n	8008fa6 <HAL_GPIO_Init+0x26a>
 8008f56:	2306      	movs	r3, #6
 8008f58:	e025      	b.n	8008fa6 <HAL_GPIO_Init+0x26a>
 8008f5a:	2305      	movs	r3, #5
 8008f5c:	e023      	b.n	8008fa6 <HAL_GPIO_Init+0x26a>
 8008f5e:	2304      	movs	r3, #4
 8008f60:	e021      	b.n	8008fa6 <HAL_GPIO_Init+0x26a>
 8008f62:	2303      	movs	r3, #3
 8008f64:	e01f      	b.n	8008fa6 <HAL_GPIO_Init+0x26a>
 8008f66:	2302      	movs	r3, #2
 8008f68:	e01d      	b.n	8008fa6 <HAL_GPIO_Init+0x26a>
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e01b      	b.n	8008fa6 <HAL_GPIO_Init+0x26a>
 8008f6e:	bf00      	nop
 8008f70:	58000080 	.word	0x58000080
 8008f74:	58024400 	.word	0x58024400
 8008f78:	58000400 	.word	0x58000400
 8008f7c:	58020000 	.word	0x58020000
 8008f80:	58020400 	.word	0x58020400
 8008f84:	58020800 	.word	0x58020800
 8008f88:	58020c00 	.word	0x58020c00
 8008f8c:	58021000 	.word	0x58021000
 8008f90:	58021400 	.word	0x58021400
 8008f94:	58021800 	.word	0x58021800
 8008f98:	58021c00 	.word	0x58021c00
 8008f9c:	58022000 	.word	0x58022000
 8008fa0:	58022400 	.word	0x58022400
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	69fa      	ldr	r2, [r7, #28]
 8008fa8:	f002 0203 	and.w	r2, r2, #3
 8008fac:	0092      	lsls	r2, r2, #2
 8008fae:	4093      	lsls	r3, r2
 8008fb0:	69ba      	ldr	r2, [r7, #24]
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008fb6:	4938      	ldr	r1, [pc, #224]	; (8009098 <HAL_GPIO_Init+0x35c>)
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	089b      	lsrs	r3, r3, #2
 8008fbc:	3302      	adds	r3, #2
 8008fbe:	69ba      	ldr	r2, [r7, #24]
 8008fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	43db      	mvns	r3, r3
 8008fd0:	69ba      	ldr	r2, [r7, #24]
 8008fd2:	4013      	ands	r3, r2
 8008fd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d003      	beq.n	8008fea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008fe2:	69ba      	ldr	r2, [r7, #24]
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008fea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	43db      	mvns	r3, r3
 8008ffe:	69ba      	ldr	r2, [r7, #24]
 8009000:	4013      	ands	r3, r2
 8009002:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800900c:	2b00      	cmp	r3, #0
 800900e:	d003      	beq.n	8009018 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009010:	69ba      	ldr	r2, [r7, #24]
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	4313      	orrs	r3, r2
 8009016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009018:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800901c:	69bb      	ldr	r3, [r7, #24]
 800901e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	43db      	mvns	r3, r3
 800902a:	69ba      	ldr	r2, [r7, #24]
 800902c:	4013      	ands	r3, r2
 800902e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009038:	2b00      	cmp	r3, #0
 800903a:	d003      	beq.n	8009044 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800903c:	69ba      	ldr	r2, [r7, #24]
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	4313      	orrs	r3, r2
 8009042:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	69ba      	ldr	r2, [r7, #24]
 8009048:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	43db      	mvns	r3, r3
 8009054:	69ba      	ldr	r2, [r7, #24]
 8009056:	4013      	ands	r3, r2
 8009058:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009062:	2b00      	cmp	r3, #0
 8009064:	d003      	beq.n	800906e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8009066:	69ba      	ldr	r2, [r7, #24]
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	4313      	orrs	r3, r2
 800906c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	69ba      	ldr	r2, [r7, #24]
 8009072:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	3301      	adds	r3, #1
 8009078:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	69fb      	ldr	r3, [r7, #28]
 8009080:	fa22 f303 	lsr.w	r3, r2, r3
 8009084:	2b00      	cmp	r3, #0
 8009086:	f47f ae63 	bne.w	8008d50 <HAL_GPIO_Init+0x14>
  }
}
 800908a:	bf00      	nop
 800908c:	bf00      	nop
 800908e:	3724      	adds	r7, #36	; 0x24
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr
 8009098:	58000400 	.word	0x58000400

0800909c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	460b      	mov	r3, r1
 80090a6:	807b      	strh	r3, [r7, #2]
 80090a8:	4613      	mov	r3, r2
 80090aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80090ac:	787b      	ldrb	r3, [r7, #1]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d003      	beq.n	80090ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80090b2:	887a      	ldrh	r2, [r7, #2]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80090b8:	e003      	b.n	80090c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80090ba:	887b      	ldrh	r3, [r7, #2]
 80090bc:	041a      	lsls	r2, r3, #16
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	619a      	str	r2, [r3, #24]
}
 80090c2:	bf00      	nop
 80090c4:	370c      	adds	r7, #12
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr

080090ce <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b082      	sub	sp, #8
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	4603      	mov	r3, r0
 80090d6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80090d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80090dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80090e0:	88fb      	ldrh	r3, [r7, #6]
 80090e2:	4013      	ands	r3, r2
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d008      	beq.n	80090fa <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80090e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80090ec:	88fb      	ldrh	r3, [r7, #6]
 80090ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80090f2:	88fb      	ldrh	r3, [r7, #6]
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7fa fe4d 	bl	8003d94 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80090fa:	bf00      	nop
 80090fc:	3708      	adds	r7, #8
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
	...

08009104 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800910c:	4b19      	ldr	r3, [pc, #100]	; (8009174 <HAL_PWREx_ConfigSupply+0x70>)
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	f003 0304 	and.w	r3, r3, #4
 8009114:	2b04      	cmp	r3, #4
 8009116:	d00a      	beq.n	800912e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009118:	4b16      	ldr	r3, [pc, #88]	; (8009174 <HAL_PWREx_ConfigSupply+0x70>)
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	f003 0307 	and.w	r3, r3, #7
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	429a      	cmp	r2, r3
 8009124:	d001      	beq.n	800912a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	e01f      	b.n	800916a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800912a:	2300      	movs	r3, #0
 800912c:	e01d      	b.n	800916a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800912e:	4b11      	ldr	r3, [pc, #68]	; (8009174 <HAL_PWREx_ConfigSupply+0x70>)
 8009130:	68db      	ldr	r3, [r3, #12]
 8009132:	f023 0207 	bic.w	r2, r3, #7
 8009136:	490f      	ldr	r1, [pc, #60]	; (8009174 <HAL_PWREx_ConfigSupply+0x70>)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4313      	orrs	r3, r2
 800913c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800913e:	f7fc fc6d 	bl	8005a1c <HAL_GetTick>
 8009142:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009144:	e009      	b.n	800915a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009146:	f7fc fc69 	bl	8005a1c <HAL_GetTick>
 800914a:	4602      	mov	r2, r0
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	1ad3      	subs	r3, r2, r3
 8009150:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009154:	d901      	bls.n	800915a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	e007      	b.n	800916a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800915a:	4b06      	ldr	r3, [pc, #24]	; (8009174 <HAL_PWREx_ConfigSupply+0x70>)
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009166:	d1ee      	bne.n	8009146 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009168:	2300      	movs	r3, #0
}
 800916a:	4618      	mov	r0, r3
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	58024800 	.word	0x58024800

08009178 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b08c      	sub	sp, #48	; 0x30
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d102      	bne.n	800918c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	f000 bc1c 	b.w	80099c4 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f003 0301 	and.w	r3, r3, #1
 8009194:	2b00      	cmp	r3, #0
 8009196:	f000 8087 	beq.w	80092a8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800919a:	4b9e      	ldr	r3, [pc, #632]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 800919c:	691b      	ldr	r3, [r3, #16]
 800919e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80091a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80091a4:	4b9b      	ldr	r3, [pc, #620]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 80091a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091a8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80091aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ac:	2b10      	cmp	r3, #16
 80091ae:	d007      	beq.n	80091c0 <HAL_RCC_OscConfig+0x48>
 80091b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b2:	2b18      	cmp	r3, #24
 80091b4:	d110      	bne.n	80091d8 <HAL_RCC_OscConfig+0x60>
 80091b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b8:	f003 0303 	and.w	r3, r3, #3
 80091bc:	2b02      	cmp	r3, #2
 80091be:	d10b      	bne.n	80091d8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091c0:	4b94      	ldr	r3, [pc, #592]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d06c      	beq.n	80092a6 <HAL_RCC_OscConfig+0x12e>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d168      	bne.n	80092a6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80091d4:	2301      	movs	r3, #1
 80091d6:	e3f5      	b.n	80099c4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091e0:	d106      	bne.n	80091f0 <HAL_RCC_OscConfig+0x78>
 80091e2:	4b8c      	ldr	r3, [pc, #560]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a8b      	ldr	r2, [pc, #556]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 80091e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091ec:	6013      	str	r3, [r2, #0]
 80091ee:	e02e      	b.n	800924e <HAL_RCC_OscConfig+0xd6>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d10c      	bne.n	8009212 <HAL_RCC_OscConfig+0x9a>
 80091f8:	4b86      	ldr	r3, [pc, #536]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a85      	ldr	r2, [pc, #532]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 80091fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009202:	6013      	str	r3, [r2, #0]
 8009204:	4b83      	ldr	r3, [pc, #524]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a82      	ldr	r2, [pc, #520]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 800920a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800920e:	6013      	str	r3, [r2, #0]
 8009210:	e01d      	b.n	800924e <HAL_RCC_OscConfig+0xd6>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800921a:	d10c      	bne.n	8009236 <HAL_RCC_OscConfig+0xbe>
 800921c:	4b7d      	ldr	r3, [pc, #500]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a7c      	ldr	r2, [pc, #496]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 8009222:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009226:	6013      	str	r3, [r2, #0]
 8009228:	4b7a      	ldr	r3, [pc, #488]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a79      	ldr	r2, [pc, #484]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 800922e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009232:	6013      	str	r3, [r2, #0]
 8009234:	e00b      	b.n	800924e <HAL_RCC_OscConfig+0xd6>
 8009236:	4b77      	ldr	r3, [pc, #476]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a76      	ldr	r2, [pc, #472]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 800923c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009240:	6013      	str	r3, [r2, #0]
 8009242:	4b74      	ldr	r3, [pc, #464]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a73      	ldr	r2, [pc, #460]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 8009248:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800924c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d013      	beq.n	800927e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009256:	f7fc fbe1 	bl	8005a1c <HAL_GetTick>
 800925a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800925c:	e008      	b.n	8009270 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800925e:	f7fc fbdd 	bl	8005a1c <HAL_GetTick>
 8009262:	4602      	mov	r2, r0
 8009264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009266:	1ad3      	subs	r3, r2, r3
 8009268:	2b64      	cmp	r3, #100	; 0x64
 800926a:	d901      	bls.n	8009270 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800926c:	2303      	movs	r3, #3
 800926e:	e3a9      	b.n	80099c4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009270:	4b68      	ldr	r3, [pc, #416]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009278:	2b00      	cmp	r3, #0
 800927a:	d0f0      	beq.n	800925e <HAL_RCC_OscConfig+0xe6>
 800927c:	e014      	b.n	80092a8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800927e:	f7fc fbcd 	bl	8005a1c <HAL_GetTick>
 8009282:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009284:	e008      	b.n	8009298 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009286:	f7fc fbc9 	bl	8005a1c <HAL_GetTick>
 800928a:	4602      	mov	r2, r0
 800928c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928e:	1ad3      	subs	r3, r2, r3
 8009290:	2b64      	cmp	r3, #100	; 0x64
 8009292:	d901      	bls.n	8009298 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8009294:	2303      	movs	r3, #3
 8009296:	e395      	b.n	80099c4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009298:	4b5e      	ldr	r3, [pc, #376]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1f0      	bne.n	8009286 <HAL_RCC_OscConfig+0x10e>
 80092a4:	e000      	b.n	80092a8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80092a6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f003 0302 	and.w	r3, r3, #2
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	f000 80ca 	beq.w	800944a <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80092b6:	4b57      	ldr	r3, [pc, #348]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 80092b8:	691b      	ldr	r3, [r3, #16]
 80092ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80092be:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80092c0:	4b54      	ldr	r3, [pc, #336]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 80092c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092c4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80092c6:	6a3b      	ldr	r3, [r7, #32]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d007      	beq.n	80092dc <HAL_RCC_OscConfig+0x164>
 80092cc:	6a3b      	ldr	r3, [r7, #32]
 80092ce:	2b18      	cmp	r3, #24
 80092d0:	d156      	bne.n	8009380 <HAL_RCC_OscConfig+0x208>
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	f003 0303 	and.w	r3, r3, #3
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d151      	bne.n	8009380 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80092dc:	4b4d      	ldr	r3, [pc, #308]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f003 0304 	and.w	r3, r3, #4
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d005      	beq.n	80092f4 <HAL_RCC_OscConfig+0x17c>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d101      	bne.n	80092f4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	e367      	b.n	80099c4 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80092f4:	4b47      	ldr	r3, [pc, #284]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f023 0219 	bic.w	r2, r3, #25
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	4944      	ldr	r1, [pc, #272]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 8009302:	4313      	orrs	r3, r2
 8009304:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009306:	f7fc fb89 	bl	8005a1c <HAL_GetTick>
 800930a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800930c:	e008      	b.n	8009320 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800930e:	f7fc fb85 	bl	8005a1c <HAL_GetTick>
 8009312:	4602      	mov	r2, r0
 8009314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009316:	1ad3      	subs	r3, r2, r3
 8009318:	2b02      	cmp	r3, #2
 800931a:	d901      	bls.n	8009320 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800931c:	2303      	movs	r3, #3
 800931e:	e351      	b.n	80099c4 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009320:	4b3c      	ldr	r3, [pc, #240]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 0304 	and.w	r3, r3, #4
 8009328:	2b00      	cmp	r3, #0
 800932a:	d0f0      	beq.n	800930e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800932c:	f7fc fba6 	bl	8005a7c <HAL_GetREVID>
 8009330:	4603      	mov	r3, r0
 8009332:	f241 0203 	movw	r2, #4099	; 0x1003
 8009336:	4293      	cmp	r3, r2
 8009338:	d817      	bhi.n	800936a <HAL_RCC_OscConfig+0x1f2>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	2b40      	cmp	r3, #64	; 0x40
 8009340:	d108      	bne.n	8009354 <HAL_RCC_OscConfig+0x1dc>
 8009342:	4b34      	ldr	r3, [pc, #208]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800934a:	4a32      	ldr	r2, [pc, #200]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 800934c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009350:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009352:	e07a      	b.n	800944a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009354:	4b2f      	ldr	r3, [pc, #188]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	691b      	ldr	r3, [r3, #16]
 8009360:	031b      	lsls	r3, r3, #12
 8009362:	492c      	ldr	r1, [pc, #176]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 8009364:	4313      	orrs	r3, r2
 8009366:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009368:	e06f      	b.n	800944a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800936a:	4b2a      	ldr	r3, [pc, #168]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	691b      	ldr	r3, [r3, #16]
 8009376:	061b      	lsls	r3, r3, #24
 8009378:	4926      	ldr	r1, [pc, #152]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 800937a:	4313      	orrs	r3, r2
 800937c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800937e:	e064      	b.n	800944a <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d047      	beq.n	8009418 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009388:	4b22      	ldr	r3, [pc, #136]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f023 0219 	bic.w	r2, r3, #25
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	491f      	ldr	r1, [pc, #124]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 8009396:	4313      	orrs	r3, r2
 8009398:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800939a:	f7fc fb3f 	bl	8005a1c <HAL_GetTick>
 800939e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80093a0:	e008      	b.n	80093b4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80093a2:	f7fc fb3b 	bl	8005a1c <HAL_GetTick>
 80093a6:	4602      	mov	r2, r0
 80093a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093aa:	1ad3      	subs	r3, r2, r3
 80093ac:	2b02      	cmp	r3, #2
 80093ae:	d901      	bls.n	80093b4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80093b0:	2303      	movs	r3, #3
 80093b2:	e307      	b.n	80099c4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80093b4:	4b17      	ldr	r3, [pc, #92]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f003 0304 	and.w	r3, r3, #4
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d0f0      	beq.n	80093a2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093c0:	f7fc fb5c 	bl	8005a7c <HAL_GetREVID>
 80093c4:	4603      	mov	r3, r0
 80093c6:	f241 0203 	movw	r2, #4099	; 0x1003
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d817      	bhi.n	80093fe <HAL_RCC_OscConfig+0x286>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	691b      	ldr	r3, [r3, #16]
 80093d2:	2b40      	cmp	r3, #64	; 0x40
 80093d4:	d108      	bne.n	80093e8 <HAL_RCC_OscConfig+0x270>
 80093d6:	4b0f      	ldr	r3, [pc, #60]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80093de:	4a0d      	ldr	r2, [pc, #52]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 80093e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093e4:	6053      	str	r3, [r2, #4]
 80093e6:	e030      	b.n	800944a <HAL_RCC_OscConfig+0x2d2>
 80093e8:	4b0a      	ldr	r3, [pc, #40]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	691b      	ldr	r3, [r3, #16]
 80093f4:	031b      	lsls	r3, r3, #12
 80093f6:	4907      	ldr	r1, [pc, #28]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 80093f8:	4313      	orrs	r3, r2
 80093fa:	604b      	str	r3, [r1, #4]
 80093fc:	e025      	b.n	800944a <HAL_RCC_OscConfig+0x2d2>
 80093fe:	4b05      	ldr	r3, [pc, #20]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	061b      	lsls	r3, r3, #24
 800940c:	4901      	ldr	r1, [pc, #4]	; (8009414 <HAL_RCC_OscConfig+0x29c>)
 800940e:	4313      	orrs	r3, r2
 8009410:	604b      	str	r3, [r1, #4]
 8009412:	e01a      	b.n	800944a <HAL_RCC_OscConfig+0x2d2>
 8009414:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009418:	4b9e      	ldr	r3, [pc, #632]	; (8009694 <HAL_RCC_OscConfig+0x51c>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a9d      	ldr	r2, [pc, #628]	; (8009694 <HAL_RCC_OscConfig+0x51c>)
 800941e:	f023 0301 	bic.w	r3, r3, #1
 8009422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009424:	f7fc fafa 	bl	8005a1c <HAL_GetTick>
 8009428:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800942a:	e008      	b.n	800943e <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800942c:	f7fc faf6 	bl	8005a1c <HAL_GetTick>
 8009430:	4602      	mov	r2, r0
 8009432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009434:	1ad3      	subs	r3, r2, r3
 8009436:	2b02      	cmp	r3, #2
 8009438:	d901      	bls.n	800943e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800943a:	2303      	movs	r3, #3
 800943c:	e2c2      	b.n	80099c4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800943e:	4b95      	ldr	r3, [pc, #596]	; (8009694 <HAL_RCC_OscConfig+0x51c>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f003 0304 	and.w	r3, r3, #4
 8009446:	2b00      	cmp	r3, #0
 8009448:	d1f0      	bne.n	800942c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f003 0310 	and.w	r3, r3, #16
 8009452:	2b00      	cmp	r3, #0
 8009454:	f000 80a9 	beq.w	80095aa <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009458:	4b8e      	ldr	r3, [pc, #568]	; (8009694 <HAL_RCC_OscConfig+0x51c>)
 800945a:	691b      	ldr	r3, [r3, #16]
 800945c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009460:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009462:	4b8c      	ldr	r3, [pc, #560]	; (8009694 <HAL_RCC_OscConfig+0x51c>)
 8009464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009466:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009468:	69bb      	ldr	r3, [r7, #24]
 800946a:	2b08      	cmp	r3, #8
 800946c:	d007      	beq.n	800947e <HAL_RCC_OscConfig+0x306>
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	2b18      	cmp	r3, #24
 8009472:	d13a      	bne.n	80094ea <HAL_RCC_OscConfig+0x372>
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	f003 0303 	and.w	r3, r3, #3
 800947a:	2b01      	cmp	r3, #1
 800947c:	d135      	bne.n	80094ea <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800947e:	4b85      	ldr	r3, [pc, #532]	; (8009694 <HAL_RCC_OscConfig+0x51c>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009486:	2b00      	cmp	r3, #0
 8009488:	d005      	beq.n	8009496 <HAL_RCC_OscConfig+0x31e>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	69db      	ldr	r3, [r3, #28]
 800948e:	2b80      	cmp	r3, #128	; 0x80
 8009490:	d001      	beq.n	8009496 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	e296      	b.n	80099c4 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009496:	f7fc faf1 	bl	8005a7c <HAL_GetREVID>
 800949a:	4603      	mov	r3, r0
 800949c:	f241 0203 	movw	r2, #4099	; 0x1003
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d817      	bhi.n	80094d4 <HAL_RCC_OscConfig+0x35c>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6a1b      	ldr	r3, [r3, #32]
 80094a8:	2b20      	cmp	r3, #32
 80094aa:	d108      	bne.n	80094be <HAL_RCC_OscConfig+0x346>
 80094ac:	4b79      	ldr	r3, [pc, #484]	; (8009694 <HAL_RCC_OscConfig+0x51c>)
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80094b4:	4a77      	ldr	r2, [pc, #476]	; (8009694 <HAL_RCC_OscConfig+0x51c>)
 80094b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80094ba:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80094bc:	e075      	b.n	80095aa <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80094be:	4b75      	ldr	r3, [pc, #468]	; (8009694 <HAL_RCC_OscConfig+0x51c>)
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6a1b      	ldr	r3, [r3, #32]
 80094ca:	069b      	lsls	r3, r3, #26
 80094cc:	4971      	ldr	r1, [pc, #452]	; (8009694 <HAL_RCC_OscConfig+0x51c>)
 80094ce:	4313      	orrs	r3, r2
 80094d0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80094d2:	e06a      	b.n	80095aa <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80094d4:	4b6f      	ldr	r3, [pc, #444]	; (8009694 <HAL_RCC_OscConfig+0x51c>)
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6a1b      	ldr	r3, [r3, #32]
 80094e0:	061b      	lsls	r3, r3, #24
 80094e2:	496c      	ldr	r1, [pc, #432]	; (8009694 <HAL_RCC_OscConfig+0x51c>)
 80094e4:	4313      	orrs	r3, r2
 80094e6:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80094e8:	e05f      	b.n	80095aa <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	69db      	ldr	r3, [r3, #28]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d042      	beq.n	8009578 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80094f2:	4b68      	ldr	r3, [pc, #416]	; (8009694 <HAL_RCC_OscConfig+0x51c>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a67      	ldr	r2, [pc, #412]	; (8009694 <HAL_RCC_OscConfig+0x51c>)
 80094f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094fe:	f7fc fa8d 	bl	8005a1c <HAL_GetTick>
 8009502:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009504:	e008      	b.n	8009518 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009506:	f7fc fa89 	bl	8005a1c <HAL_GetTick>
 800950a:	4602      	mov	r2, r0
 800950c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800950e:	1ad3      	subs	r3, r2, r3
 8009510:	2b02      	cmp	r3, #2
 8009512:	d901      	bls.n	8009518 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8009514:	2303      	movs	r3, #3
 8009516:	e255      	b.n	80099c4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009518:	4b5e      	ldr	r3, [pc, #376]	; (8009694 <HAL_RCC_OscConfig+0x51c>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009520:	2b00      	cmp	r3, #0
 8009522:	d0f0      	beq.n	8009506 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009524:	f7fc faaa 	bl	8005a7c <HAL_GetREVID>
 8009528:	4603      	mov	r3, r0
 800952a:	f241 0203 	movw	r2, #4099	; 0x1003
 800952e:	4293      	cmp	r3, r2
 8009530:	d817      	bhi.n	8009562 <HAL_RCC_OscConfig+0x3ea>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a1b      	ldr	r3, [r3, #32]
 8009536:	2b20      	cmp	r3, #32
 8009538:	d108      	bne.n	800954c <HAL_RCC_OscConfig+0x3d4>
 800953a:	4b56      	ldr	r3, [pc, #344]	; (8009694 <HAL_RCC_OscConfig+0x51c>)
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009542:	4a54      	ldr	r2, [pc, #336]	; (8009694 <HAL_RCC_OscConfig+0x51c>)
 8009544:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009548:	6053      	str	r3, [r2, #4]
 800954a:	e02e      	b.n	80095aa <HAL_RCC_OscConfig+0x432>
 800954c:	4b51      	ldr	r3, [pc, #324]	; (8009694 <HAL_RCC_OscConfig+0x51c>)
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6a1b      	ldr	r3, [r3, #32]
 8009558:	069b      	lsls	r3, r3, #26
 800955a:	494e      	ldr	r1, [pc, #312]	; (8009694 <HAL_RCC_OscConfig+0x51c>)
 800955c:	4313      	orrs	r3, r2
 800955e:	604b      	str	r3, [r1, #4]
 8009560:	e023      	b.n	80095aa <HAL_RCC_OscConfig+0x432>
 8009562:	4b4c      	ldr	r3, [pc, #304]	; (8009694 <HAL_RCC_OscConfig+0x51c>)
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6a1b      	ldr	r3, [r3, #32]
 800956e:	061b      	lsls	r3, r3, #24
 8009570:	4948      	ldr	r1, [pc, #288]	; (8009694 <HAL_RCC_OscConfig+0x51c>)
 8009572:	4313      	orrs	r3, r2
 8009574:	60cb      	str	r3, [r1, #12]
 8009576:	e018      	b.n	80095aa <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009578:	4b46      	ldr	r3, [pc, #280]	; (8009694 <HAL_RCC_OscConfig+0x51c>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a45      	ldr	r2, [pc, #276]	; (8009694 <HAL_RCC_OscConfig+0x51c>)
 800957e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009584:	f7fc fa4a 	bl	8005a1c <HAL_GetTick>
 8009588:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800958a:	e008      	b.n	800959e <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800958c:	f7fc fa46 	bl	8005a1c <HAL_GetTick>
 8009590:	4602      	mov	r2, r0
 8009592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009594:	1ad3      	subs	r3, r2, r3
 8009596:	2b02      	cmp	r3, #2
 8009598:	d901      	bls.n	800959e <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 800959a:	2303      	movs	r3, #3
 800959c:	e212      	b.n	80099c4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800959e:	4b3d      	ldr	r3, [pc, #244]	; (8009694 <HAL_RCC_OscConfig+0x51c>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d1f0      	bne.n	800958c <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f003 0308 	and.w	r3, r3, #8
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d036      	beq.n	8009624 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	695b      	ldr	r3, [r3, #20]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d019      	beq.n	80095f2 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80095be:	4b35      	ldr	r3, [pc, #212]	; (8009694 <HAL_RCC_OscConfig+0x51c>)
 80095c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095c2:	4a34      	ldr	r2, [pc, #208]	; (8009694 <HAL_RCC_OscConfig+0x51c>)
 80095c4:	f043 0301 	orr.w	r3, r3, #1
 80095c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095ca:	f7fc fa27 	bl	8005a1c <HAL_GetTick>
 80095ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80095d0:	e008      	b.n	80095e4 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80095d2:	f7fc fa23 	bl	8005a1c <HAL_GetTick>
 80095d6:	4602      	mov	r2, r0
 80095d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095da:	1ad3      	subs	r3, r2, r3
 80095dc:	2b02      	cmp	r3, #2
 80095de:	d901      	bls.n	80095e4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80095e0:	2303      	movs	r3, #3
 80095e2:	e1ef      	b.n	80099c4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80095e4:	4b2b      	ldr	r3, [pc, #172]	; (8009694 <HAL_RCC_OscConfig+0x51c>)
 80095e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095e8:	f003 0302 	and.w	r3, r3, #2
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d0f0      	beq.n	80095d2 <HAL_RCC_OscConfig+0x45a>
 80095f0:	e018      	b.n	8009624 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80095f2:	4b28      	ldr	r3, [pc, #160]	; (8009694 <HAL_RCC_OscConfig+0x51c>)
 80095f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095f6:	4a27      	ldr	r2, [pc, #156]	; (8009694 <HAL_RCC_OscConfig+0x51c>)
 80095f8:	f023 0301 	bic.w	r3, r3, #1
 80095fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095fe:	f7fc fa0d 	bl	8005a1c <HAL_GetTick>
 8009602:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009604:	e008      	b.n	8009618 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009606:	f7fc fa09 	bl	8005a1c <HAL_GetTick>
 800960a:	4602      	mov	r2, r0
 800960c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960e:	1ad3      	subs	r3, r2, r3
 8009610:	2b02      	cmp	r3, #2
 8009612:	d901      	bls.n	8009618 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8009614:	2303      	movs	r3, #3
 8009616:	e1d5      	b.n	80099c4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009618:	4b1e      	ldr	r3, [pc, #120]	; (8009694 <HAL_RCC_OscConfig+0x51c>)
 800961a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800961c:	f003 0302 	and.w	r3, r3, #2
 8009620:	2b00      	cmp	r3, #0
 8009622:	d1f0      	bne.n	8009606 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f003 0320 	and.w	r3, r3, #32
 800962c:	2b00      	cmp	r3, #0
 800962e:	d039      	beq.n	80096a4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	699b      	ldr	r3, [r3, #24]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d019      	beq.n	800966c <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009638:	4b16      	ldr	r3, [pc, #88]	; (8009694 <HAL_RCC_OscConfig+0x51c>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a15      	ldr	r2, [pc, #84]	; (8009694 <HAL_RCC_OscConfig+0x51c>)
 800963e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009642:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009644:	f7fc f9ea 	bl	8005a1c <HAL_GetTick>
 8009648:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800964a:	e008      	b.n	800965e <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800964c:	f7fc f9e6 	bl	8005a1c <HAL_GetTick>
 8009650:	4602      	mov	r2, r0
 8009652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009654:	1ad3      	subs	r3, r2, r3
 8009656:	2b02      	cmp	r3, #2
 8009658:	d901      	bls.n	800965e <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 800965a:	2303      	movs	r3, #3
 800965c:	e1b2      	b.n	80099c4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800965e:	4b0d      	ldr	r3, [pc, #52]	; (8009694 <HAL_RCC_OscConfig+0x51c>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009666:	2b00      	cmp	r3, #0
 8009668:	d0f0      	beq.n	800964c <HAL_RCC_OscConfig+0x4d4>
 800966a:	e01b      	b.n	80096a4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800966c:	4b09      	ldr	r3, [pc, #36]	; (8009694 <HAL_RCC_OscConfig+0x51c>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a08      	ldr	r2, [pc, #32]	; (8009694 <HAL_RCC_OscConfig+0x51c>)
 8009672:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009676:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009678:	f7fc f9d0 	bl	8005a1c <HAL_GetTick>
 800967c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800967e:	e00b      	b.n	8009698 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009680:	f7fc f9cc 	bl	8005a1c <HAL_GetTick>
 8009684:	4602      	mov	r2, r0
 8009686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009688:	1ad3      	subs	r3, r2, r3
 800968a:	2b02      	cmp	r3, #2
 800968c:	d904      	bls.n	8009698 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800968e:	2303      	movs	r3, #3
 8009690:	e198      	b.n	80099c4 <HAL_RCC_OscConfig+0x84c>
 8009692:	bf00      	nop
 8009694:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009698:	4ba3      	ldr	r3, [pc, #652]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d1ed      	bne.n	8009680 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f003 0304 	and.w	r3, r3, #4
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f000 8081 	beq.w	80097b4 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80096b2:	4b9e      	ldr	r3, [pc, #632]	; (800992c <HAL_RCC_OscConfig+0x7b4>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a9d      	ldr	r2, [pc, #628]	; (800992c <HAL_RCC_OscConfig+0x7b4>)
 80096b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80096be:	f7fc f9ad 	bl	8005a1c <HAL_GetTick>
 80096c2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80096c4:	e008      	b.n	80096d8 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80096c6:	f7fc f9a9 	bl	8005a1c <HAL_GetTick>
 80096ca:	4602      	mov	r2, r0
 80096cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ce:	1ad3      	subs	r3, r2, r3
 80096d0:	2b64      	cmp	r3, #100	; 0x64
 80096d2:	d901      	bls.n	80096d8 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80096d4:	2303      	movs	r3, #3
 80096d6:	e175      	b.n	80099c4 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80096d8:	4b94      	ldr	r3, [pc, #592]	; (800992c <HAL_RCC_OscConfig+0x7b4>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d0f0      	beq.n	80096c6 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d106      	bne.n	80096fa <HAL_RCC_OscConfig+0x582>
 80096ec:	4b8e      	ldr	r3, [pc, #568]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 80096ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096f0:	4a8d      	ldr	r2, [pc, #564]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 80096f2:	f043 0301 	orr.w	r3, r3, #1
 80096f6:	6713      	str	r3, [r2, #112]	; 0x70
 80096f8:	e02d      	b.n	8009756 <HAL_RCC_OscConfig+0x5de>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d10c      	bne.n	800971c <HAL_RCC_OscConfig+0x5a4>
 8009702:	4b89      	ldr	r3, [pc, #548]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 8009704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009706:	4a88      	ldr	r2, [pc, #544]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 8009708:	f023 0301 	bic.w	r3, r3, #1
 800970c:	6713      	str	r3, [r2, #112]	; 0x70
 800970e:	4b86      	ldr	r3, [pc, #536]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 8009710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009712:	4a85      	ldr	r2, [pc, #532]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 8009714:	f023 0304 	bic.w	r3, r3, #4
 8009718:	6713      	str	r3, [r2, #112]	; 0x70
 800971a:	e01c      	b.n	8009756 <HAL_RCC_OscConfig+0x5de>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	2b05      	cmp	r3, #5
 8009722:	d10c      	bne.n	800973e <HAL_RCC_OscConfig+0x5c6>
 8009724:	4b80      	ldr	r3, [pc, #512]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 8009726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009728:	4a7f      	ldr	r2, [pc, #508]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 800972a:	f043 0304 	orr.w	r3, r3, #4
 800972e:	6713      	str	r3, [r2, #112]	; 0x70
 8009730:	4b7d      	ldr	r3, [pc, #500]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 8009732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009734:	4a7c      	ldr	r2, [pc, #496]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 8009736:	f043 0301 	orr.w	r3, r3, #1
 800973a:	6713      	str	r3, [r2, #112]	; 0x70
 800973c:	e00b      	b.n	8009756 <HAL_RCC_OscConfig+0x5de>
 800973e:	4b7a      	ldr	r3, [pc, #488]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 8009740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009742:	4a79      	ldr	r2, [pc, #484]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 8009744:	f023 0301 	bic.w	r3, r3, #1
 8009748:	6713      	str	r3, [r2, #112]	; 0x70
 800974a:	4b77      	ldr	r3, [pc, #476]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 800974c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800974e:	4a76      	ldr	r2, [pc, #472]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 8009750:	f023 0304 	bic.w	r3, r3, #4
 8009754:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d015      	beq.n	800978a <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800975e:	f7fc f95d 	bl	8005a1c <HAL_GetTick>
 8009762:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009764:	e00a      	b.n	800977c <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009766:	f7fc f959 	bl	8005a1c <HAL_GetTick>
 800976a:	4602      	mov	r2, r0
 800976c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976e:	1ad3      	subs	r3, r2, r3
 8009770:	f241 3288 	movw	r2, #5000	; 0x1388
 8009774:	4293      	cmp	r3, r2
 8009776:	d901      	bls.n	800977c <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8009778:	2303      	movs	r3, #3
 800977a:	e123      	b.n	80099c4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800977c:	4b6a      	ldr	r3, [pc, #424]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 800977e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009780:	f003 0302 	and.w	r3, r3, #2
 8009784:	2b00      	cmp	r3, #0
 8009786:	d0ee      	beq.n	8009766 <HAL_RCC_OscConfig+0x5ee>
 8009788:	e014      	b.n	80097b4 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800978a:	f7fc f947 	bl	8005a1c <HAL_GetTick>
 800978e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009790:	e00a      	b.n	80097a8 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009792:	f7fc f943 	bl	8005a1c <HAL_GetTick>
 8009796:	4602      	mov	r2, r0
 8009798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979a:	1ad3      	subs	r3, r2, r3
 800979c:	f241 3288 	movw	r2, #5000	; 0x1388
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d901      	bls.n	80097a8 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80097a4:	2303      	movs	r3, #3
 80097a6:	e10d      	b.n	80099c4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80097a8:	4b5f      	ldr	r3, [pc, #380]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 80097aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ac:	f003 0302 	and.w	r3, r3, #2
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d1ee      	bne.n	8009792 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	f000 8102 	beq.w	80099c2 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80097be:	4b5a      	ldr	r3, [pc, #360]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097c6:	2b18      	cmp	r3, #24
 80097c8:	f000 80bd 	beq.w	8009946 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d0:	2b02      	cmp	r3, #2
 80097d2:	f040 8095 	bne.w	8009900 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80097d6:	4b54      	ldr	r3, [pc, #336]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a53      	ldr	r2, [pc, #332]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 80097dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80097e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097e2:	f7fc f91b 	bl	8005a1c <HAL_GetTick>
 80097e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80097e8:	e008      	b.n	80097fc <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80097ea:	f7fc f917 	bl	8005a1c <HAL_GetTick>
 80097ee:	4602      	mov	r2, r0
 80097f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f2:	1ad3      	subs	r3, r2, r3
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	d901      	bls.n	80097fc <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 80097f8:	2303      	movs	r3, #3
 80097fa:	e0e3      	b.n	80099c4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80097fc:	4b4a      	ldr	r3, [pc, #296]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009804:	2b00      	cmp	r3, #0
 8009806:	d1f0      	bne.n	80097ea <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009808:	4b47      	ldr	r3, [pc, #284]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 800980a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800980c:	4b48      	ldr	r3, [pc, #288]	; (8009930 <HAL_RCC_OscConfig+0x7b8>)
 800980e:	4013      	ands	r3, r2
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009818:	0112      	lsls	r2, r2, #4
 800981a:	430a      	orrs	r2, r1
 800981c:	4942      	ldr	r1, [pc, #264]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 800981e:	4313      	orrs	r3, r2
 8009820:	628b      	str	r3, [r1, #40]	; 0x28
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009826:	3b01      	subs	r3, #1
 8009828:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009830:	3b01      	subs	r3, #1
 8009832:	025b      	lsls	r3, r3, #9
 8009834:	b29b      	uxth	r3, r3
 8009836:	431a      	orrs	r2, r3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800983c:	3b01      	subs	r3, #1
 800983e:	041b      	lsls	r3, r3, #16
 8009840:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009844:	431a      	orrs	r2, r3
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800984a:	3b01      	subs	r3, #1
 800984c:	061b      	lsls	r3, r3, #24
 800984e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009852:	4935      	ldr	r1, [pc, #212]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 8009854:	4313      	orrs	r3, r2
 8009856:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009858:	4b33      	ldr	r3, [pc, #204]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 800985a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800985c:	4a32      	ldr	r2, [pc, #200]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 800985e:	f023 0301 	bic.w	r3, r3, #1
 8009862:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009864:	4b30      	ldr	r3, [pc, #192]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 8009866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009868:	4b32      	ldr	r3, [pc, #200]	; (8009934 <HAL_RCC_OscConfig+0x7bc>)
 800986a:	4013      	ands	r3, r2
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009870:	00d2      	lsls	r2, r2, #3
 8009872:	492d      	ldr	r1, [pc, #180]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 8009874:	4313      	orrs	r3, r2
 8009876:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009878:	4b2b      	ldr	r3, [pc, #172]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 800987a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987c:	f023 020c 	bic.w	r2, r3, #12
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009884:	4928      	ldr	r1, [pc, #160]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 8009886:	4313      	orrs	r3, r2
 8009888:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800988a:	4b27      	ldr	r3, [pc, #156]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 800988c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988e:	f023 0202 	bic.w	r2, r3, #2
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009896:	4924      	ldr	r1, [pc, #144]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 8009898:	4313      	orrs	r3, r2
 800989a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800989c:	4b22      	ldr	r3, [pc, #136]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 800989e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a0:	4a21      	ldr	r2, [pc, #132]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 80098a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098a8:	4b1f      	ldr	r3, [pc, #124]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 80098aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ac:	4a1e      	ldr	r2, [pc, #120]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 80098ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80098b4:	4b1c      	ldr	r3, [pc, #112]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 80098b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b8:	4a1b      	ldr	r2, [pc, #108]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 80098ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80098be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80098c0:	4b19      	ldr	r3, [pc, #100]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 80098c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c4:	4a18      	ldr	r2, [pc, #96]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 80098c6:	f043 0301 	orr.w	r3, r3, #1
 80098ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80098cc:	4b16      	ldr	r3, [pc, #88]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a15      	ldr	r2, [pc, #84]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 80098d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80098d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098d8:	f7fc f8a0 	bl	8005a1c <HAL_GetTick>
 80098dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80098de:	e008      	b.n	80098f2 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80098e0:	f7fc f89c 	bl	8005a1c <HAL_GetTick>
 80098e4:	4602      	mov	r2, r0
 80098e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e8:	1ad3      	subs	r3, r2, r3
 80098ea:	2b02      	cmp	r3, #2
 80098ec:	d901      	bls.n	80098f2 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 80098ee:	2303      	movs	r3, #3
 80098f0:	e068      	b.n	80099c4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80098f2:	4b0d      	ldr	r3, [pc, #52]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d0f0      	beq.n	80098e0 <HAL_RCC_OscConfig+0x768>
 80098fe:	e060      	b.n	80099c2 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009900:	4b09      	ldr	r3, [pc, #36]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a08      	ldr	r2, [pc, #32]	; (8009928 <HAL_RCC_OscConfig+0x7b0>)
 8009906:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800990a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800990c:	f7fc f886 	bl	8005a1c <HAL_GetTick>
 8009910:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009912:	e011      	b.n	8009938 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009914:	f7fc f882 	bl	8005a1c <HAL_GetTick>
 8009918:	4602      	mov	r2, r0
 800991a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991c:	1ad3      	subs	r3, r2, r3
 800991e:	2b02      	cmp	r3, #2
 8009920:	d90a      	bls.n	8009938 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8009922:	2303      	movs	r3, #3
 8009924:	e04e      	b.n	80099c4 <HAL_RCC_OscConfig+0x84c>
 8009926:	bf00      	nop
 8009928:	58024400 	.word	0x58024400
 800992c:	58024800 	.word	0x58024800
 8009930:	fffffc0c 	.word	0xfffffc0c
 8009934:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009938:	4b24      	ldr	r3, [pc, #144]	; (80099cc <HAL_RCC_OscConfig+0x854>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009940:	2b00      	cmp	r3, #0
 8009942:	d1e7      	bne.n	8009914 <HAL_RCC_OscConfig+0x79c>
 8009944:	e03d      	b.n	80099c2 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009946:	4b21      	ldr	r3, [pc, #132]	; (80099cc <HAL_RCC_OscConfig+0x854>)
 8009948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800994a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800994c:	4b1f      	ldr	r3, [pc, #124]	; (80099cc <HAL_RCC_OscConfig+0x854>)
 800994e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009950:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009956:	2b01      	cmp	r3, #1
 8009958:	d031      	beq.n	80099be <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	f003 0203 	and.w	r2, r3, #3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009964:	429a      	cmp	r2, r3
 8009966:	d12a      	bne.n	80099be <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	091b      	lsrs	r3, r3, #4
 800996c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009974:	429a      	cmp	r2, r3
 8009976:	d122      	bne.n	80099be <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009982:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009984:	429a      	cmp	r2, r3
 8009986:	d11a      	bne.n	80099be <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	0a5b      	lsrs	r3, r3, #9
 800998c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009994:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009996:	429a      	cmp	r2, r3
 8009998:	d111      	bne.n	80099be <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	0c1b      	lsrs	r3, r3, #16
 800999e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099a6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d108      	bne.n	80099be <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	0e1b      	lsrs	r3, r3, #24
 80099b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099b8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d001      	beq.n	80099c2 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80099be:	2301      	movs	r3, #1
 80099c0:	e000      	b.n	80099c4 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80099c2:	2300      	movs	r3, #0
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3730      	adds	r7, #48	; 0x30
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	58024400 	.word	0x58024400

080099d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b086      	sub	sp, #24
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d101      	bne.n	80099e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80099e0:	2301      	movs	r3, #1
 80099e2:	e19c      	b.n	8009d1e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80099e4:	4b8a      	ldr	r3, [pc, #552]	; (8009c10 <HAL_RCC_ClockConfig+0x240>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f003 030f 	and.w	r3, r3, #15
 80099ec:	683a      	ldr	r2, [r7, #0]
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d910      	bls.n	8009a14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099f2:	4b87      	ldr	r3, [pc, #540]	; (8009c10 <HAL_RCC_ClockConfig+0x240>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f023 020f 	bic.w	r2, r3, #15
 80099fa:	4985      	ldr	r1, [pc, #532]	; (8009c10 <HAL_RCC_ClockConfig+0x240>)
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	4313      	orrs	r3, r2
 8009a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a02:	4b83      	ldr	r3, [pc, #524]	; (8009c10 <HAL_RCC_ClockConfig+0x240>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f003 030f 	and.w	r3, r3, #15
 8009a0a:	683a      	ldr	r2, [r7, #0]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d001      	beq.n	8009a14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009a10:	2301      	movs	r3, #1
 8009a12:	e184      	b.n	8009d1e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f003 0304 	and.w	r3, r3, #4
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d010      	beq.n	8009a42 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	691a      	ldr	r2, [r3, #16]
 8009a24:	4b7b      	ldr	r3, [pc, #492]	; (8009c14 <HAL_RCC_ClockConfig+0x244>)
 8009a26:	699b      	ldr	r3, [r3, #24]
 8009a28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d908      	bls.n	8009a42 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009a30:	4b78      	ldr	r3, [pc, #480]	; (8009c14 <HAL_RCC_ClockConfig+0x244>)
 8009a32:	699b      	ldr	r3, [r3, #24]
 8009a34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	691b      	ldr	r3, [r3, #16]
 8009a3c:	4975      	ldr	r1, [pc, #468]	; (8009c14 <HAL_RCC_ClockConfig+0x244>)
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f003 0308 	and.w	r3, r3, #8
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d010      	beq.n	8009a70 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	695a      	ldr	r2, [r3, #20]
 8009a52:	4b70      	ldr	r3, [pc, #448]	; (8009c14 <HAL_RCC_ClockConfig+0x244>)
 8009a54:	69db      	ldr	r3, [r3, #28]
 8009a56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d908      	bls.n	8009a70 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009a5e:	4b6d      	ldr	r3, [pc, #436]	; (8009c14 <HAL_RCC_ClockConfig+0x244>)
 8009a60:	69db      	ldr	r3, [r3, #28]
 8009a62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	695b      	ldr	r3, [r3, #20]
 8009a6a:	496a      	ldr	r1, [pc, #424]	; (8009c14 <HAL_RCC_ClockConfig+0x244>)
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f003 0310 	and.w	r3, r3, #16
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d010      	beq.n	8009a9e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	699a      	ldr	r2, [r3, #24]
 8009a80:	4b64      	ldr	r3, [pc, #400]	; (8009c14 <HAL_RCC_ClockConfig+0x244>)
 8009a82:	69db      	ldr	r3, [r3, #28]
 8009a84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d908      	bls.n	8009a9e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009a8c:	4b61      	ldr	r3, [pc, #388]	; (8009c14 <HAL_RCC_ClockConfig+0x244>)
 8009a8e:	69db      	ldr	r3, [r3, #28]
 8009a90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	699b      	ldr	r3, [r3, #24]
 8009a98:	495e      	ldr	r1, [pc, #376]	; (8009c14 <HAL_RCC_ClockConfig+0x244>)
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f003 0320 	and.w	r3, r3, #32
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d010      	beq.n	8009acc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	69da      	ldr	r2, [r3, #28]
 8009aae:	4b59      	ldr	r3, [pc, #356]	; (8009c14 <HAL_RCC_ClockConfig+0x244>)
 8009ab0:	6a1b      	ldr	r3, [r3, #32]
 8009ab2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d908      	bls.n	8009acc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009aba:	4b56      	ldr	r3, [pc, #344]	; (8009c14 <HAL_RCC_ClockConfig+0x244>)
 8009abc:	6a1b      	ldr	r3, [r3, #32]
 8009abe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	69db      	ldr	r3, [r3, #28]
 8009ac6:	4953      	ldr	r1, [pc, #332]	; (8009c14 <HAL_RCC_ClockConfig+0x244>)
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f003 0302 	and.w	r3, r3, #2
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d010      	beq.n	8009afa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	68da      	ldr	r2, [r3, #12]
 8009adc:	4b4d      	ldr	r3, [pc, #308]	; (8009c14 <HAL_RCC_ClockConfig+0x244>)
 8009ade:	699b      	ldr	r3, [r3, #24]
 8009ae0:	f003 030f 	and.w	r3, r3, #15
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d908      	bls.n	8009afa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ae8:	4b4a      	ldr	r3, [pc, #296]	; (8009c14 <HAL_RCC_ClockConfig+0x244>)
 8009aea:	699b      	ldr	r3, [r3, #24]
 8009aec:	f023 020f 	bic.w	r2, r3, #15
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	68db      	ldr	r3, [r3, #12]
 8009af4:	4947      	ldr	r1, [pc, #284]	; (8009c14 <HAL_RCC_ClockConfig+0x244>)
 8009af6:	4313      	orrs	r3, r2
 8009af8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f003 0301 	and.w	r3, r3, #1
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d055      	beq.n	8009bb2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009b06:	4b43      	ldr	r3, [pc, #268]	; (8009c14 <HAL_RCC_ClockConfig+0x244>)
 8009b08:	699b      	ldr	r3, [r3, #24]
 8009b0a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	689b      	ldr	r3, [r3, #8]
 8009b12:	4940      	ldr	r1, [pc, #256]	; (8009c14 <HAL_RCC_ClockConfig+0x244>)
 8009b14:	4313      	orrs	r3, r2
 8009b16:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	2b02      	cmp	r3, #2
 8009b1e:	d107      	bne.n	8009b30 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b20:	4b3c      	ldr	r3, [pc, #240]	; (8009c14 <HAL_RCC_ClockConfig+0x244>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d121      	bne.n	8009b70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	e0f6      	b.n	8009d1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	2b03      	cmp	r3, #3
 8009b36:	d107      	bne.n	8009b48 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009b38:	4b36      	ldr	r3, [pc, #216]	; (8009c14 <HAL_RCC_ClockConfig+0x244>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d115      	bne.n	8009b70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009b44:	2301      	movs	r3, #1
 8009b46:	e0ea      	b.n	8009d1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d107      	bne.n	8009b60 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009b50:	4b30      	ldr	r3, [pc, #192]	; (8009c14 <HAL_RCC_ClockConfig+0x244>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d109      	bne.n	8009b70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	e0de      	b.n	8009d1e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b60:	4b2c      	ldr	r3, [pc, #176]	; (8009c14 <HAL_RCC_ClockConfig+0x244>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f003 0304 	and.w	r3, r3, #4
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d101      	bne.n	8009b70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	e0d6      	b.n	8009d1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009b70:	4b28      	ldr	r3, [pc, #160]	; (8009c14 <HAL_RCC_ClockConfig+0x244>)
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	f023 0207 	bic.w	r2, r3, #7
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	4925      	ldr	r1, [pc, #148]	; (8009c14 <HAL_RCC_ClockConfig+0x244>)
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b82:	f7fb ff4b 	bl	8005a1c <HAL_GetTick>
 8009b86:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b88:	e00a      	b.n	8009ba0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b8a:	f7fb ff47 	bl	8005a1c <HAL_GetTick>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	1ad3      	subs	r3, r2, r3
 8009b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d901      	bls.n	8009ba0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009b9c:	2303      	movs	r3, #3
 8009b9e:	e0be      	b.n	8009d1e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ba0:	4b1c      	ldr	r3, [pc, #112]	; (8009c14 <HAL_RCC_ClockConfig+0x244>)
 8009ba2:	691b      	ldr	r3, [r3, #16]
 8009ba4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	00db      	lsls	r3, r3, #3
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d1eb      	bne.n	8009b8a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f003 0302 	and.w	r3, r3, #2
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d010      	beq.n	8009be0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	68da      	ldr	r2, [r3, #12]
 8009bc2:	4b14      	ldr	r3, [pc, #80]	; (8009c14 <HAL_RCC_ClockConfig+0x244>)
 8009bc4:	699b      	ldr	r3, [r3, #24]
 8009bc6:	f003 030f 	and.w	r3, r3, #15
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d208      	bcs.n	8009be0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009bce:	4b11      	ldr	r3, [pc, #68]	; (8009c14 <HAL_RCC_ClockConfig+0x244>)
 8009bd0:	699b      	ldr	r3, [r3, #24]
 8009bd2:	f023 020f 	bic.w	r2, r3, #15
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	490e      	ldr	r1, [pc, #56]	; (8009c14 <HAL_RCC_ClockConfig+0x244>)
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009be0:	4b0b      	ldr	r3, [pc, #44]	; (8009c10 <HAL_RCC_ClockConfig+0x240>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f003 030f 	and.w	r3, r3, #15
 8009be8:	683a      	ldr	r2, [r7, #0]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d214      	bcs.n	8009c18 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009bee:	4b08      	ldr	r3, [pc, #32]	; (8009c10 <HAL_RCC_ClockConfig+0x240>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f023 020f 	bic.w	r2, r3, #15
 8009bf6:	4906      	ldr	r1, [pc, #24]	; (8009c10 <HAL_RCC_ClockConfig+0x240>)
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009bfe:	4b04      	ldr	r3, [pc, #16]	; (8009c10 <HAL_RCC_ClockConfig+0x240>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f003 030f 	and.w	r3, r3, #15
 8009c06:	683a      	ldr	r2, [r7, #0]
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d005      	beq.n	8009c18 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	e086      	b.n	8009d1e <HAL_RCC_ClockConfig+0x34e>
 8009c10:	52002000 	.word	0x52002000
 8009c14:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f003 0304 	and.w	r3, r3, #4
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d010      	beq.n	8009c46 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	691a      	ldr	r2, [r3, #16]
 8009c28:	4b3f      	ldr	r3, [pc, #252]	; (8009d28 <HAL_RCC_ClockConfig+0x358>)
 8009c2a:	699b      	ldr	r3, [r3, #24]
 8009c2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d208      	bcs.n	8009c46 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009c34:	4b3c      	ldr	r3, [pc, #240]	; (8009d28 <HAL_RCC_ClockConfig+0x358>)
 8009c36:	699b      	ldr	r3, [r3, #24]
 8009c38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	691b      	ldr	r3, [r3, #16]
 8009c40:	4939      	ldr	r1, [pc, #228]	; (8009d28 <HAL_RCC_ClockConfig+0x358>)
 8009c42:	4313      	orrs	r3, r2
 8009c44:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f003 0308 	and.w	r3, r3, #8
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d010      	beq.n	8009c74 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	695a      	ldr	r2, [r3, #20]
 8009c56:	4b34      	ldr	r3, [pc, #208]	; (8009d28 <HAL_RCC_ClockConfig+0x358>)
 8009c58:	69db      	ldr	r3, [r3, #28]
 8009c5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d208      	bcs.n	8009c74 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009c62:	4b31      	ldr	r3, [pc, #196]	; (8009d28 <HAL_RCC_ClockConfig+0x358>)
 8009c64:	69db      	ldr	r3, [r3, #28]
 8009c66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	695b      	ldr	r3, [r3, #20]
 8009c6e:	492e      	ldr	r1, [pc, #184]	; (8009d28 <HAL_RCC_ClockConfig+0x358>)
 8009c70:	4313      	orrs	r3, r2
 8009c72:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f003 0310 	and.w	r3, r3, #16
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d010      	beq.n	8009ca2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	699a      	ldr	r2, [r3, #24]
 8009c84:	4b28      	ldr	r3, [pc, #160]	; (8009d28 <HAL_RCC_ClockConfig+0x358>)
 8009c86:	69db      	ldr	r3, [r3, #28]
 8009c88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d208      	bcs.n	8009ca2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009c90:	4b25      	ldr	r3, [pc, #148]	; (8009d28 <HAL_RCC_ClockConfig+0x358>)
 8009c92:	69db      	ldr	r3, [r3, #28]
 8009c94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	699b      	ldr	r3, [r3, #24]
 8009c9c:	4922      	ldr	r1, [pc, #136]	; (8009d28 <HAL_RCC_ClockConfig+0x358>)
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f003 0320 	and.w	r3, r3, #32
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d010      	beq.n	8009cd0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	69da      	ldr	r2, [r3, #28]
 8009cb2:	4b1d      	ldr	r3, [pc, #116]	; (8009d28 <HAL_RCC_ClockConfig+0x358>)
 8009cb4:	6a1b      	ldr	r3, [r3, #32]
 8009cb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d208      	bcs.n	8009cd0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009cbe:	4b1a      	ldr	r3, [pc, #104]	; (8009d28 <HAL_RCC_ClockConfig+0x358>)
 8009cc0:	6a1b      	ldr	r3, [r3, #32]
 8009cc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	69db      	ldr	r3, [r3, #28]
 8009cca:	4917      	ldr	r1, [pc, #92]	; (8009d28 <HAL_RCC_ClockConfig+0x358>)
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009cd0:	f000 f834 	bl	8009d3c <HAL_RCC_GetSysClockFreq>
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	4b14      	ldr	r3, [pc, #80]	; (8009d28 <HAL_RCC_ClockConfig+0x358>)
 8009cd8:	699b      	ldr	r3, [r3, #24]
 8009cda:	0a1b      	lsrs	r3, r3, #8
 8009cdc:	f003 030f 	and.w	r3, r3, #15
 8009ce0:	4912      	ldr	r1, [pc, #72]	; (8009d2c <HAL_RCC_ClockConfig+0x35c>)
 8009ce2:	5ccb      	ldrb	r3, [r1, r3]
 8009ce4:	f003 031f 	and.w	r3, r3, #31
 8009ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8009cec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009cee:	4b0e      	ldr	r3, [pc, #56]	; (8009d28 <HAL_RCC_ClockConfig+0x358>)
 8009cf0:	699b      	ldr	r3, [r3, #24]
 8009cf2:	f003 030f 	and.w	r3, r3, #15
 8009cf6:	4a0d      	ldr	r2, [pc, #52]	; (8009d2c <HAL_RCC_ClockConfig+0x35c>)
 8009cf8:	5cd3      	ldrb	r3, [r2, r3]
 8009cfa:	f003 031f 	and.w	r3, r3, #31
 8009cfe:	693a      	ldr	r2, [r7, #16]
 8009d00:	fa22 f303 	lsr.w	r3, r2, r3
 8009d04:	4a0a      	ldr	r2, [pc, #40]	; (8009d30 <HAL_RCC_ClockConfig+0x360>)
 8009d06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009d08:	4a0a      	ldr	r2, [pc, #40]	; (8009d34 <HAL_RCC_ClockConfig+0x364>)
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009d0e:	4b0a      	ldr	r3, [pc, #40]	; (8009d38 <HAL_RCC_ClockConfig+0x368>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7fb fe38 	bl	8005988 <HAL_InitTick>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3718      	adds	r7, #24
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	58024400 	.word	0x58024400
 8009d2c:	080132d0 	.word	0x080132d0
 8009d30:	24000018 	.word	0x24000018
 8009d34:	24000014 	.word	0x24000014
 8009d38:	2400001c 	.word	0x2400001c

08009d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b089      	sub	sp, #36	; 0x24
 8009d40:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009d42:	4bb3      	ldr	r3, [pc, #716]	; (800a010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d44:	691b      	ldr	r3, [r3, #16]
 8009d46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d4a:	2b18      	cmp	r3, #24
 8009d4c:	f200 8155 	bhi.w	8009ffa <HAL_RCC_GetSysClockFreq+0x2be>
 8009d50:	a201      	add	r2, pc, #4	; (adr r2, 8009d58 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d56:	bf00      	nop
 8009d58:	08009dbd 	.word	0x08009dbd
 8009d5c:	08009ffb 	.word	0x08009ffb
 8009d60:	08009ffb 	.word	0x08009ffb
 8009d64:	08009ffb 	.word	0x08009ffb
 8009d68:	08009ffb 	.word	0x08009ffb
 8009d6c:	08009ffb 	.word	0x08009ffb
 8009d70:	08009ffb 	.word	0x08009ffb
 8009d74:	08009ffb 	.word	0x08009ffb
 8009d78:	08009de3 	.word	0x08009de3
 8009d7c:	08009ffb 	.word	0x08009ffb
 8009d80:	08009ffb 	.word	0x08009ffb
 8009d84:	08009ffb 	.word	0x08009ffb
 8009d88:	08009ffb 	.word	0x08009ffb
 8009d8c:	08009ffb 	.word	0x08009ffb
 8009d90:	08009ffb 	.word	0x08009ffb
 8009d94:	08009ffb 	.word	0x08009ffb
 8009d98:	08009de9 	.word	0x08009de9
 8009d9c:	08009ffb 	.word	0x08009ffb
 8009da0:	08009ffb 	.word	0x08009ffb
 8009da4:	08009ffb 	.word	0x08009ffb
 8009da8:	08009ffb 	.word	0x08009ffb
 8009dac:	08009ffb 	.word	0x08009ffb
 8009db0:	08009ffb 	.word	0x08009ffb
 8009db4:	08009ffb 	.word	0x08009ffb
 8009db8:	08009def 	.word	0x08009def
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dbc:	4b94      	ldr	r3, [pc, #592]	; (800a010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f003 0320 	and.w	r3, r3, #32
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d009      	beq.n	8009ddc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009dc8:	4b91      	ldr	r3, [pc, #580]	; (800a010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	08db      	lsrs	r3, r3, #3
 8009dce:	f003 0303 	and.w	r3, r3, #3
 8009dd2:	4a90      	ldr	r2, [pc, #576]	; (800a014 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8009dd8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009dda:	e111      	b.n	800a000 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009ddc:	4b8d      	ldr	r3, [pc, #564]	; (800a014 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009dde:	61bb      	str	r3, [r7, #24]
    break;
 8009de0:	e10e      	b.n	800a000 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009de2:	4b8d      	ldr	r3, [pc, #564]	; (800a018 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009de4:	61bb      	str	r3, [r7, #24]
    break;
 8009de6:	e10b      	b.n	800a000 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009de8:	4b8c      	ldr	r3, [pc, #560]	; (800a01c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009dea:	61bb      	str	r3, [r7, #24]
    break;
 8009dec:	e108      	b.n	800a000 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009dee:	4b88      	ldr	r3, [pc, #544]	; (800a010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009df2:	f003 0303 	and.w	r3, r3, #3
 8009df6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009df8:	4b85      	ldr	r3, [pc, #532]	; (800a010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dfc:	091b      	lsrs	r3, r3, #4
 8009dfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e02:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009e04:	4b82      	ldr	r3, [pc, #520]	; (800a010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e08:	f003 0301 	and.w	r3, r3, #1
 8009e0c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009e0e:	4b80      	ldr	r3, [pc, #512]	; (800a010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e12:	08db      	lsrs	r3, r3, #3
 8009e14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e18:	68fa      	ldr	r2, [r7, #12]
 8009e1a:	fb02 f303 	mul.w	r3, r2, r3
 8009e1e:	ee07 3a90 	vmov	s15, r3
 8009e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e26:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	f000 80e1 	beq.w	8009ff4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	2b02      	cmp	r3, #2
 8009e36:	f000 8083 	beq.w	8009f40 <HAL_RCC_GetSysClockFreq+0x204>
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	2b02      	cmp	r3, #2
 8009e3e:	f200 80a1 	bhi.w	8009f84 <HAL_RCC_GetSysClockFreq+0x248>
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d003      	beq.n	8009e50 <HAL_RCC_GetSysClockFreq+0x114>
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	2b01      	cmp	r3, #1
 8009e4c:	d056      	beq.n	8009efc <HAL_RCC_GetSysClockFreq+0x1c0>
 8009e4e:	e099      	b.n	8009f84 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e50:	4b6f      	ldr	r3, [pc, #444]	; (800a010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f003 0320 	and.w	r3, r3, #32
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d02d      	beq.n	8009eb8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009e5c:	4b6c      	ldr	r3, [pc, #432]	; (800a010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	08db      	lsrs	r3, r3, #3
 8009e62:	f003 0303 	and.w	r3, r3, #3
 8009e66:	4a6b      	ldr	r2, [pc, #428]	; (800a014 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009e68:	fa22 f303 	lsr.w	r3, r2, r3
 8009e6c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	ee07 3a90 	vmov	s15, r3
 8009e74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	ee07 3a90 	vmov	s15, r3
 8009e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e86:	4b62      	ldr	r3, [pc, #392]	; (800a010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e8e:	ee07 3a90 	vmov	s15, r3
 8009e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e96:	ed97 6a02 	vldr	s12, [r7, #8]
 8009e9a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a020 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eb2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009eb6:	e087      	b.n	8009fc8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	ee07 3a90 	vmov	s15, r3
 8009ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ec2:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a024 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eca:	4b51      	ldr	r3, [pc, #324]	; (800a010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ed2:	ee07 3a90 	vmov	s15, r3
 8009ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eda:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ede:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a020 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ef6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009efa:	e065      	b.n	8009fc8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	ee07 3a90 	vmov	s15, r3
 8009f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f06:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a028 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f0e:	4b40      	ldr	r3, [pc, #256]	; (800a010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f16:	ee07 3a90 	vmov	s15, r3
 8009f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009f22:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a020 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f3e:	e043      	b.n	8009fc8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	ee07 3a90 	vmov	s15, r3
 8009f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f4a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a02c <HAL_RCC_GetSysClockFreq+0x2f0>
 8009f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f52:	4b2f      	ldr	r3, [pc, #188]	; (800a010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f5a:	ee07 3a90 	vmov	s15, r3
 8009f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f62:	ed97 6a02 	vldr	s12, [r7, #8]
 8009f66:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a020 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f82:	e021      	b.n	8009fc8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	ee07 3a90 	vmov	s15, r3
 8009f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f8e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a028 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f96:	4b1e      	ldr	r3, [pc, #120]	; (800a010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f9e:	ee07 3a90 	vmov	s15, r3
 8009fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8009faa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a020 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009fc6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009fc8:	4b11      	ldr	r3, [pc, #68]	; (800a010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fcc:	0a5b      	lsrs	r3, r3, #9
 8009fce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	ee07 3a90 	vmov	s15, r3
 8009fdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009fe0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fec:	ee17 3a90 	vmov	r3, s15
 8009ff0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009ff2:	e005      	b.n	800a000 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	61bb      	str	r3, [r7, #24]
    break;
 8009ff8:	e002      	b.n	800a000 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009ffa:	4b07      	ldr	r3, [pc, #28]	; (800a018 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009ffc:	61bb      	str	r3, [r7, #24]
    break;
 8009ffe:	bf00      	nop
  }

  return sysclockfreq;
 800a000:	69bb      	ldr	r3, [r7, #24]
}
 800a002:	4618      	mov	r0, r3
 800a004:	3724      	adds	r7, #36	; 0x24
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr
 800a00e:	bf00      	nop
 800a010:	58024400 	.word	0x58024400
 800a014:	03d09000 	.word	0x03d09000
 800a018:	003d0900 	.word	0x003d0900
 800a01c:	02dc6c00 	.word	0x02dc6c00
 800a020:	46000000 	.word	0x46000000
 800a024:	4c742400 	.word	0x4c742400
 800a028:	4a742400 	.word	0x4a742400
 800a02c:	4c371b00 	.word	0x4c371b00

0800a030 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a036:	f7ff fe81 	bl	8009d3c <HAL_RCC_GetSysClockFreq>
 800a03a:	4602      	mov	r2, r0
 800a03c:	4b10      	ldr	r3, [pc, #64]	; (800a080 <HAL_RCC_GetHCLKFreq+0x50>)
 800a03e:	699b      	ldr	r3, [r3, #24]
 800a040:	0a1b      	lsrs	r3, r3, #8
 800a042:	f003 030f 	and.w	r3, r3, #15
 800a046:	490f      	ldr	r1, [pc, #60]	; (800a084 <HAL_RCC_GetHCLKFreq+0x54>)
 800a048:	5ccb      	ldrb	r3, [r1, r3]
 800a04a:	f003 031f 	and.w	r3, r3, #31
 800a04e:	fa22 f303 	lsr.w	r3, r2, r3
 800a052:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a054:	4b0a      	ldr	r3, [pc, #40]	; (800a080 <HAL_RCC_GetHCLKFreq+0x50>)
 800a056:	699b      	ldr	r3, [r3, #24]
 800a058:	f003 030f 	and.w	r3, r3, #15
 800a05c:	4a09      	ldr	r2, [pc, #36]	; (800a084 <HAL_RCC_GetHCLKFreq+0x54>)
 800a05e:	5cd3      	ldrb	r3, [r2, r3]
 800a060:	f003 031f 	and.w	r3, r3, #31
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	fa22 f303 	lsr.w	r3, r2, r3
 800a06a:	4a07      	ldr	r2, [pc, #28]	; (800a088 <HAL_RCC_GetHCLKFreq+0x58>)
 800a06c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a06e:	4a07      	ldr	r2, [pc, #28]	; (800a08c <HAL_RCC_GetHCLKFreq+0x5c>)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a074:	4b04      	ldr	r3, [pc, #16]	; (800a088 <HAL_RCC_GetHCLKFreq+0x58>)
 800a076:	681b      	ldr	r3, [r3, #0]
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3708      	adds	r7, #8
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	58024400 	.word	0x58024400
 800a084:	080132d0 	.word	0x080132d0
 800a088:	24000018 	.word	0x24000018
 800a08c:	24000014 	.word	0x24000014

0800a090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a094:	f7ff ffcc 	bl	800a030 <HAL_RCC_GetHCLKFreq>
 800a098:	4602      	mov	r2, r0
 800a09a:	4b06      	ldr	r3, [pc, #24]	; (800a0b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a09c:	69db      	ldr	r3, [r3, #28]
 800a09e:	091b      	lsrs	r3, r3, #4
 800a0a0:	f003 0307 	and.w	r3, r3, #7
 800a0a4:	4904      	ldr	r1, [pc, #16]	; (800a0b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a0a6:	5ccb      	ldrb	r3, [r1, r3]
 800a0a8:	f003 031f 	and.w	r3, r3, #31
 800a0ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	58024400 	.word	0x58024400
 800a0b8:	080132d0 	.word	0x080132d0

0800a0bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a0c0:	f7ff ffb6 	bl	800a030 <HAL_RCC_GetHCLKFreq>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	4b06      	ldr	r3, [pc, #24]	; (800a0e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a0c8:	69db      	ldr	r3, [r3, #28]
 800a0ca:	0a1b      	lsrs	r3, r3, #8
 800a0cc:	f003 0307 	and.w	r3, r3, #7
 800a0d0:	4904      	ldr	r1, [pc, #16]	; (800a0e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a0d2:	5ccb      	ldrb	r3, [r1, r3]
 800a0d4:	f003 031f 	and.w	r3, r3, #31
 800a0d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	58024400 	.word	0x58024400
 800a0e4:	080132d0 	.word	0x080132d0

0800a0e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b086      	sub	sp, #24
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a100:	2b00      	cmp	r3, #0
 800a102:	d03f      	beq.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a108:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a10c:	d02a      	beq.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a10e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a112:	d824      	bhi.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a114:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a118:	d018      	beq.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a11a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a11e:	d81e      	bhi.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a120:	2b00      	cmp	r3, #0
 800a122:	d003      	beq.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a124:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a128:	d007      	beq.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a12a:	e018      	b.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a12c:	4bab      	ldr	r3, [pc, #684]	; (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a130:	4aaa      	ldr	r2, [pc, #680]	; (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a132:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a136:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a138:	e015      	b.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	3304      	adds	r3, #4
 800a13e:	2102      	movs	r1, #2
 800a140:	4618      	mov	r0, r3
 800a142:	f001 f9cf 	bl	800b4e4 <RCCEx_PLL2_Config>
 800a146:	4603      	mov	r3, r0
 800a148:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a14a:	e00c      	b.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	3324      	adds	r3, #36	; 0x24
 800a150:	2102      	movs	r1, #2
 800a152:	4618      	mov	r0, r3
 800a154:	f001 fa78 	bl	800b648 <RCCEx_PLL3_Config>
 800a158:	4603      	mov	r3, r0
 800a15a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a15c:	e003      	b.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a15e:	2301      	movs	r3, #1
 800a160:	75fb      	strb	r3, [r7, #23]
      break;
 800a162:	e000      	b.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a164:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a166:	7dfb      	ldrb	r3, [r7, #23]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d109      	bne.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a16c:	4b9b      	ldr	r3, [pc, #620]	; (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a16e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a170:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a178:	4998      	ldr	r1, [pc, #608]	; (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a17a:	4313      	orrs	r3, r2
 800a17c:	650b      	str	r3, [r1, #80]	; 0x50
 800a17e:	e001      	b.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a180:	7dfb      	ldrb	r3, [r7, #23]
 800a182:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d03d      	beq.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a194:	2b04      	cmp	r3, #4
 800a196:	d826      	bhi.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a198:	a201      	add	r2, pc, #4	; (adr r2, 800a1a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800a19a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a19e:	bf00      	nop
 800a1a0:	0800a1b5 	.word	0x0800a1b5
 800a1a4:	0800a1c3 	.word	0x0800a1c3
 800a1a8:	0800a1d5 	.word	0x0800a1d5
 800a1ac:	0800a1ed 	.word	0x0800a1ed
 800a1b0:	0800a1ed 	.word	0x0800a1ed
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1b4:	4b89      	ldr	r3, [pc, #548]	; (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b8:	4a88      	ldr	r2, [pc, #544]	; (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a1ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a1c0:	e015      	b.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	3304      	adds	r3, #4
 800a1c6:	2100      	movs	r1, #0
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f001 f98b 	bl	800b4e4 <RCCEx_PLL2_Config>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a1d2:	e00c      	b.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	3324      	adds	r3, #36	; 0x24
 800a1d8:	2100      	movs	r1, #0
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f001 fa34 	bl	800b648 <RCCEx_PLL3_Config>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a1e4:	e003      	b.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	75fb      	strb	r3, [r7, #23]
      break;
 800a1ea:	e000      	b.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800a1ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1ee:	7dfb      	ldrb	r3, [r7, #23]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d109      	bne.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a1f4:	4b79      	ldr	r3, [pc, #484]	; (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a1f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1f8:	f023 0207 	bic.w	r2, r3, #7
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a200:	4976      	ldr	r1, [pc, #472]	; (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a202:	4313      	orrs	r3, r2
 800a204:	650b      	str	r3, [r1, #80]	; 0x50
 800a206:	e001      	b.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a208:	7dfb      	ldrb	r3, [r7, #23]
 800a20a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a214:	2b00      	cmp	r3, #0
 800a216:	d042      	beq.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a21c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a220:	d02b      	beq.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0x192>
 800a222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a226:	d825      	bhi.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a228:	2bc0      	cmp	r3, #192	; 0xc0
 800a22a:	d028      	beq.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a22c:	2bc0      	cmp	r3, #192	; 0xc0
 800a22e:	d821      	bhi.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a230:	2b80      	cmp	r3, #128	; 0x80
 800a232:	d016      	beq.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800a234:	2b80      	cmp	r3, #128	; 0x80
 800a236:	d81d      	bhi.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d002      	beq.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800a23c:	2b40      	cmp	r3, #64	; 0x40
 800a23e:	d007      	beq.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800a240:	e018      	b.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a242:	4b66      	ldr	r3, [pc, #408]	; (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a246:	4a65      	ldr	r2, [pc, #404]	; (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a24c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a24e:	e017      	b.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	3304      	adds	r3, #4
 800a254:	2100      	movs	r1, #0
 800a256:	4618      	mov	r0, r3
 800a258:	f001 f944 	bl	800b4e4 <RCCEx_PLL2_Config>
 800a25c:	4603      	mov	r3, r0
 800a25e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a260:	e00e      	b.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	3324      	adds	r3, #36	; 0x24
 800a266:	2100      	movs	r1, #0
 800a268:	4618      	mov	r0, r3
 800a26a:	f001 f9ed 	bl	800b648 <RCCEx_PLL3_Config>
 800a26e:	4603      	mov	r3, r0
 800a270:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a272:	e005      	b.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a274:	2301      	movs	r3, #1
 800a276:	75fb      	strb	r3, [r7, #23]
      break;
 800a278:	e002      	b.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a27a:	bf00      	nop
 800a27c:	e000      	b.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a27e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a280:	7dfb      	ldrb	r3, [r7, #23]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d109      	bne.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a286:	4b55      	ldr	r3, [pc, #340]	; (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a28a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a292:	4952      	ldr	r1, [pc, #328]	; (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a294:	4313      	orrs	r3, r2
 800a296:	650b      	str	r3, [r1, #80]	; 0x50
 800a298:	e001      	b.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a29a:	7dfb      	ldrb	r3, [r7, #23]
 800a29c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d049      	beq.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a2b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a2b4:	d030      	beq.n	800a318 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800a2b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a2ba:	d82a      	bhi.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a2bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a2c0:	d02c      	beq.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0x234>
 800a2c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a2c6:	d824      	bhi.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a2c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a2cc:	d018      	beq.n	800a300 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800a2ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a2d2:	d81e      	bhi.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d003      	beq.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800a2d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2dc:	d007      	beq.n	800a2ee <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a2de:	e018      	b.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2e0:	4b3e      	ldr	r3, [pc, #248]	; (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e4:	4a3d      	ldr	r2, [pc, #244]	; (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a2e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a2ec:	e017      	b.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	3304      	adds	r3, #4
 800a2f2:	2100      	movs	r1, #0
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f001 f8f5 	bl	800b4e4 <RCCEx_PLL2_Config>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a2fe:	e00e      	b.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	3324      	adds	r3, #36	; 0x24
 800a304:	2100      	movs	r1, #0
 800a306:	4618      	mov	r0, r3
 800a308:	f001 f99e 	bl	800b648 <RCCEx_PLL3_Config>
 800a30c:	4603      	mov	r3, r0
 800a30e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a310:	e005      	b.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a312:	2301      	movs	r3, #1
 800a314:	75fb      	strb	r3, [r7, #23]
      break;
 800a316:	e002      	b.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a318:	bf00      	nop
 800a31a:	e000      	b.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a31c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a31e:	7dfb      	ldrb	r3, [r7, #23]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d10a      	bne.n	800a33a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a324:	4b2d      	ldr	r3, [pc, #180]	; (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a328:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a332:	492a      	ldr	r1, [pc, #168]	; (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a334:	4313      	orrs	r3, r2
 800a336:	658b      	str	r3, [r1, #88]	; 0x58
 800a338:	e001      	b.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a33a:	7dfb      	ldrb	r3, [r7, #23]
 800a33c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a346:	2b00      	cmp	r3, #0
 800a348:	d04c      	beq.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a350:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a354:	d030      	beq.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800a356:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a35a:	d82a      	bhi.n	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a35c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a360:	d02c      	beq.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800a362:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a366:	d824      	bhi.n	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a368:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a36c:	d018      	beq.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800a36e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a372:	d81e      	bhi.n	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a374:	2b00      	cmp	r3, #0
 800a376:	d003      	beq.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a378:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a37c:	d007      	beq.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a37e:	e018      	b.n	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a380:	4b16      	ldr	r3, [pc, #88]	; (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a384:	4a15      	ldr	r2, [pc, #84]	; (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a38a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a38c:	e017      	b.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	3304      	adds	r3, #4
 800a392:	2100      	movs	r1, #0
 800a394:	4618      	mov	r0, r3
 800a396:	f001 f8a5 	bl	800b4e4 <RCCEx_PLL2_Config>
 800a39a:	4603      	mov	r3, r0
 800a39c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a39e:	e00e      	b.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	3324      	adds	r3, #36	; 0x24
 800a3a4:	2100      	movs	r1, #0
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f001 f94e 	bl	800b648 <RCCEx_PLL3_Config>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a3b0:	e005      	b.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	75fb      	strb	r3, [r7, #23]
      break;
 800a3b6:	e002      	b.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800a3b8:	bf00      	nop
 800a3ba:	e000      	b.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800a3bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3be:	7dfb      	ldrb	r3, [r7, #23]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d10d      	bne.n	800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a3c4:	4b05      	ldr	r3, [pc, #20]	; (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a3c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3c8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a3d2:	4902      	ldr	r1, [pc, #8]	; (800a3dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	658b      	str	r3, [r1, #88]	; 0x58
 800a3d8:	e004      	b.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800a3da:	bf00      	nop
 800a3dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3e0:	7dfb      	ldrb	r3, [r7, #23]
 800a3e2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d032      	beq.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3f4:	2b30      	cmp	r3, #48	; 0x30
 800a3f6:	d01c      	beq.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a3f8:	2b30      	cmp	r3, #48	; 0x30
 800a3fa:	d817      	bhi.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0x344>
 800a3fc:	2b20      	cmp	r3, #32
 800a3fe:	d00c      	beq.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800a400:	2b20      	cmp	r3, #32
 800a402:	d813      	bhi.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0x344>
 800a404:	2b00      	cmp	r3, #0
 800a406:	d016      	beq.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a408:	2b10      	cmp	r3, #16
 800a40a:	d10f      	bne.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a40c:	4baf      	ldr	r3, [pc, #700]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a410:	4aae      	ldr	r2, [pc, #696]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a416:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a418:	e00e      	b.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	3304      	adds	r3, #4
 800a41e:	2102      	movs	r1, #2
 800a420:	4618      	mov	r0, r3
 800a422:	f001 f85f 	bl	800b4e4 <RCCEx_PLL2_Config>
 800a426:	4603      	mov	r3, r0
 800a428:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a42a:	e005      	b.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a42c:	2301      	movs	r3, #1
 800a42e:	75fb      	strb	r3, [r7, #23]
      break;
 800a430:	e002      	b.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800a432:	bf00      	nop
 800a434:	e000      	b.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800a436:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a438:	7dfb      	ldrb	r3, [r7, #23]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d109      	bne.n	800a452 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a43e:	4ba3      	ldr	r3, [pc, #652]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a442:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a44a:	49a0      	ldr	r1, [pc, #640]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a44c:	4313      	orrs	r3, r2
 800a44e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a450:	e001      	b.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a452:	7dfb      	ldrb	r3, [r7, #23]
 800a454:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d047      	beq.n	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a466:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a46a:	d030      	beq.n	800a4ce <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800a46c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a470:	d82a      	bhi.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a472:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a476:	d02c      	beq.n	800a4d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800a478:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a47c:	d824      	bhi.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a47e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a482:	d018      	beq.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800a484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a488:	d81e      	bhi.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d003      	beq.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800a48e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a492:	d007      	beq.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800a494:	e018      	b.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a496:	4b8d      	ldr	r3, [pc, #564]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a49a:	4a8c      	ldr	r2, [pc, #560]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a49c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a4a2:	e017      	b.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	3304      	adds	r3, #4
 800a4a8:	2100      	movs	r1, #0
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f001 f81a 	bl	800b4e4 <RCCEx_PLL2_Config>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a4b4:	e00e      	b.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	3324      	adds	r3, #36	; 0x24
 800a4ba:	2100      	movs	r1, #0
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f001 f8c3 	bl	800b648 <RCCEx_PLL3_Config>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a4c6:	e005      	b.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	75fb      	strb	r3, [r7, #23]
      break;
 800a4cc:	e002      	b.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800a4ce:	bf00      	nop
 800a4d0:	e000      	b.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800a4d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a4d4:	7dfb      	ldrb	r3, [r7, #23]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d109      	bne.n	800a4ee <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a4da:	4b7c      	ldr	r3, [pc, #496]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a4dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4de:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4e6:	4979      	ldr	r1, [pc, #484]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	650b      	str	r3, [r1, #80]	; 0x50
 800a4ec:	e001      	b.n	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4ee:	7dfb      	ldrb	r3, [r7, #23]
 800a4f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d049      	beq.n	800a592 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a502:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a506:	d02e      	beq.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800a508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a50c:	d828      	bhi.n	800a560 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a50e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a512:	d02a      	beq.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0x482>
 800a514:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a518:	d822      	bhi.n	800a560 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a51a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a51e:	d026      	beq.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x486>
 800a520:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a524:	d81c      	bhi.n	800a560 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a526:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a52a:	d010      	beq.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800a52c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a530:	d816      	bhi.n	800a560 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a532:	2b00      	cmp	r3, #0
 800a534:	d01d      	beq.n	800a572 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800a536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a53a:	d111      	bne.n	800a560 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	3304      	adds	r3, #4
 800a540:	2101      	movs	r1, #1
 800a542:	4618      	mov	r0, r3
 800a544:	f000 ffce 	bl	800b4e4 <RCCEx_PLL2_Config>
 800a548:	4603      	mov	r3, r0
 800a54a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a54c:	e012      	b.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	3324      	adds	r3, #36	; 0x24
 800a552:	2101      	movs	r1, #1
 800a554:	4618      	mov	r0, r3
 800a556:	f001 f877 	bl	800b648 <RCCEx_PLL3_Config>
 800a55a:	4603      	mov	r3, r0
 800a55c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a55e:	e009      	b.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a560:	2301      	movs	r3, #1
 800a562:	75fb      	strb	r3, [r7, #23]
      break;
 800a564:	e006      	b.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a566:	bf00      	nop
 800a568:	e004      	b.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a56a:	bf00      	nop
 800a56c:	e002      	b.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a56e:	bf00      	nop
 800a570:	e000      	b.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a572:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a574:	7dfb      	ldrb	r3, [r7, #23]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d109      	bne.n	800a58e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a57a:	4b54      	ldr	r3, [pc, #336]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a57c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a57e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a586:	4951      	ldr	r1, [pc, #324]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a588:	4313      	orrs	r3, r2
 800a58a:	650b      	str	r3, [r1, #80]	; 0x50
 800a58c:	e001      	b.n	800a592 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a58e:	7dfb      	ldrb	r3, [r7, #23]
 800a590:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d04b      	beq.n	800a636 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a5a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a5a8:	d02e      	beq.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800a5aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a5ae:	d828      	bhi.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a5b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5b4:	d02a      	beq.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0x524>
 800a5b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5ba:	d822      	bhi.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a5bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a5c0:	d026      	beq.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a5c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a5c6:	d81c      	bhi.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a5c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5cc:	d010      	beq.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800a5ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5d2:	d816      	bhi.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d01d      	beq.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800a5d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a5dc:	d111      	bne.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	3304      	adds	r3, #4
 800a5e2:	2101      	movs	r1, #1
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f000 ff7d 	bl	800b4e4 <RCCEx_PLL2_Config>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a5ee:	e012      	b.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	3324      	adds	r3, #36	; 0x24
 800a5f4:	2101      	movs	r1, #1
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f001 f826 	bl	800b648 <RCCEx_PLL3_Config>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a600:	e009      	b.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a602:	2301      	movs	r3, #1
 800a604:	75fb      	strb	r3, [r7, #23]
      break;
 800a606:	e006      	b.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a608:	bf00      	nop
 800a60a:	e004      	b.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a60c:	bf00      	nop
 800a60e:	e002      	b.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a610:	bf00      	nop
 800a612:	e000      	b.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a614:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a616:	7dfb      	ldrb	r3, [r7, #23]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d10a      	bne.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a61c:	4b2b      	ldr	r3, [pc, #172]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a61e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a620:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a62a:	4928      	ldr	r1, [pc, #160]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a62c:	4313      	orrs	r3, r2
 800a62e:	658b      	str	r3, [r1, #88]	; 0x58
 800a630:	e001      	b.n	800a636 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a632:	7dfb      	ldrb	r3, [r7, #23]
 800a634:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d02f      	beq.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a646:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a64a:	d00e      	beq.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800a64c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a650:	d814      	bhi.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x594>
 800a652:	2b00      	cmp	r3, #0
 800a654:	d015      	beq.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a656:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a65a:	d10f      	bne.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a65c:	4b1b      	ldr	r3, [pc, #108]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a660:	4a1a      	ldr	r2, [pc, #104]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a666:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a668:	e00c      	b.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	3304      	adds	r3, #4
 800a66e:	2101      	movs	r1, #1
 800a670:	4618      	mov	r0, r3
 800a672:	f000 ff37 	bl	800b4e4 <RCCEx_PLL2_Config>
 800a676:	4603      	mov	r3, r0
 800a678:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a67a:	e003      	b.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a67c:	2301      	movs	r3, #1
 800a67e:	75fb      	strb	r3, [r7, #23]
      break;
 800a680:	e000      	b.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800a682:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a684:	7dfb      	ldrb	r3, [r7, #23]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d109      	bne.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a68a:	4b10      	ldr	r3, [pc, #64]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a68c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a68e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a696:	490d      	ldr	r1, [pc, #52]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a698:	4313      	orrs	r3, r2
 800a69a:	650b      	str	r3, [r1, #80]	; 0x50
 800a69c:	e001      	b.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a69e:	7dfb      	ldrb	r3, [r7, #23]
 800a6a0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d033      	beq.n	800a716 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6b2:	2b03      	cmp	r3, #3
 800a6b4:	d81c      	bhi.n	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800a6b6:	a201      	add	r2, pc, #4	; (adr r2, 800a6bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800a6b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6bc:	0800a6f7 	.word	0x0800a6f7
 800a6c0:	0800a6d1 	.word	0x0800a6d1
 800a6c4:	0800a6df 	.word	0x0800a6df
 800a6c8:	0800a6f7 	.word	0x0800a6f7
 800a6cc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6d0:	4bb8      	ldr	r3, [pc, #736]	; (800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d4:	4ab7      	ldr	r2, [pc, #732]	; (800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a6d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a6dc:	e00c      	b.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	3304      	adds	r3, #4
 800a6e2:	2102      	movs	r1, #2
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f000 fefd 	bl	800b4e4 <RCCEx_PLL2_Config>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a6ee:	e003      	b.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	75fb      	strb	r3, [r7, #23]
      break;
 800a6f4:	e000      	b.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800a6f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a6f8:	7dfb      	ldrb	r3, [r7, #23]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d109      	bne.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a6fe:	4bad      	ldr	r3, [pc, #692]	; (800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a702:	f023 0203 	bic.w	r2, r3, #3
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a70a:	49aa      	ldr	r1, [pc, #680]	; (800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a70c:	4313      	orrs	r3, r2
 800a70e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a710:	e001      	b.n	800a716 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a712:	7dfb      	ldrb	r3, [r7, #23]
 800a714:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a71e:	2b00      	cmp	r3, #0
 800a720:	f000 8086 	beq.w	800a830 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a724:	4ba4      	ldr	r3, [pc, #656]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4aa3      	ldr	r2, [pc, #652]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a72a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a72e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a730:	f7fb f974 	bl	8005a1c <HAL_GetTick>
 800a734:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a736:	e009      	b.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a738:	f7fb f970 	bl	8005a1c <HAL_GetTick>
 800a73c:	4602      	mov	r2, r0
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	1ad3      	subs	r3, r2, r3
 800a742:	2b64      	cmp	r3, #100	; 0x64
 800a744:	d902      	bls.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800a746:	2303      	movs	r3, #3
 800a748:	75fb      	strb	r3, [r7, #23]
        break;
 800a74a:	e005      	b.n	800a758 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a74c:	4b9a      	ldr	r3, [pc, #616]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a754:	2b00      	cmp	r3, #0
 800a756:	d0ef      	beq.n	800a738 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800a758:	7dfb      	ldrb	r3, [r7, #23]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d166      	bne.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a75e:	4b95      	ldr	r3, [pc, #596]	; (800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a760:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a768:	4053      	eors	r3, r2
 800a76a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d013      	beq.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a772:	4b90      	ldr	r3, [pc, #576]	; (800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a77a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a77c:	4b8d      	ldr	r3, [pc, #564]	; (800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a77e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a780:	4a8c      	ldr	r2, [pc, #560]	; (800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a786:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a788:	4b8a      	ldr	r3, [pc, #552]	; (800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a78a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a78c:	4a89      	ldr	r2, [pc, #548]	; (800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a78e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a792:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a794:	4a87      	ldr	r2, [pc, #540]	; (800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a7a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7a4:	d115      	bne.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7a6:	f7fb f939 	bl	8005a1c <HAL_GetTick>
 800a7aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a7ac:	e00b      	b.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a7ae:	f7fb f935 	bl	8005a1c <HAL_GetTick>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	1ad3      	subs	r3, r2, r3
 800a7b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d902      	bls.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800a7c0:	2303      	movs	r3, #3
 800a7c2:	75fb      	strb	r3, [r7, #23]
            break;
 800a7c4:	e005      	b.n	800a7d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a7c6:	4b7b      	ldr	r3, [pc, #492]	; (800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a7c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7ca:	f003 0302 	and.w	r3, r3, #2
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d0ed      	beq.n	800a7ae <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800a7d2:	7dfb      	ldrb	r3, [r7, #23]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d126      	bne.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a7de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7e6:	d10d      	bne.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800a7e8:	4b72      	ldr	r3, [pc, #456]	; (800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a7ea:	691b      	ldr	r3, [r3, #16]
 800a7ec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a7f6:	0919      	lsrs	r1, r3, #4
 800a7f8:	4b70      	ldr	r3, [pc, #448]	; (800a9bc <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800a7fa:	400b      	ands	r3, r1
 800a7fc:	496d      	ldr	r1, [pc, #436]	; (800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a7fe:	4313      	orrs	r3, r2
 800a800:	610b      	str	r3, [r1, #16]
 800a802:	e005      	b.n	800a810 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800a804:	4b6b      	ldr	r3, [pc, #428]	; (800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a806:	691b      	ldr	r3, [r3, #16]
 800a808:	4a6a      	ldr	r2, [pc, #424]	; (800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a80a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a80e:	6113      	str	r3, [r2, #16]
 800a810:	4b68      	ldr	r3, [pc, #416]	; (800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a812:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a81a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a81e:	4965      	ldr	r1, [pc, #404]	; (800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a820:	4313      	orrs	r3, r2
 800a822:	670b      	str	r3, [r1, #112]	; 0x70
 800a824:	e004      	b.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a826:	7dfb      	ldrb	r3, [r7, #23]
 800a828:	75bb      	strb	r3, [r7, #22]
 800a82a:	e001      	b.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a82c:	7dfb      	ldrb	r3, [r7, #23]
 800a82e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f003 0301 	and.w	r3, r3, #1
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d07e      	beq.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a840:	2b28      	cmp	r3, #40	; 0x28
 800a842:	d867      	bhi.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800a844:	a201      	add	r2, pc, #4	; (adr r2, 800a84c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800a846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a84a:	bf00      	nop
 800a84c:	0800a91b 	.word	0x0800a91b
 800a850:	0800a915 	.word	0x0800a915
 800a854:	0800a915 	.word	0x0800a915
 800a858:	0800a915 	.word	0x0800a915
 800a85c:	0800a915 	.word	0x0800a915
 800a860:	0800a915 	.word	0x0800a915
 800a864:	0800a915 	.word	0x0800a915
 800a868:	0800a915 	.word	0x0800a915
 800a86c:	0800a8f1 	.word	0x0800a8f1
 800a870:	0800a915 	.word	0x0800a915
 800a874:	0800a915 	.word	0x0800a915
 800a878:	0800a915 	.word	0x0800a915
 800a87c:	0800a915 	.word	0x0800a915
 800a880:	0800a915 	.word	0x0800a915
 800a884:	0800a915 	.word	0x0800a915
 800a888:	0800a915 	.word	0x0800a915
 800a88c:	0800a903 	.word	0x0800a903
 800a890:	0800a915 	.word	0x0800a915
 800a894:	0800a915 	.word	0x0800a915
 800a898:	0800a915 	.word	0x0800a915
 800a89c:	0800a915 	.word	0x0800a915
 800a8a0:	0800a915 	.word	0x0800a915
 800a8a4:	0800a915 	.word	0x0800a915
 800a8a8:	0800a915 	.word	0x0800a915
 800a8ac:	0800a91b 	.word	0x0800a91b
 800a8b0:	0800a915 	.word	0x0800a915
 800a8b4:	0800a915 	.word	0x0800a915
 800a8b8:	0800a915 	.word	0x0800a915
 800a8bc:	0800a915 	.word	0x0800a915
 800a8c0:	0800a915 	.word	0x0800a915
 800a8c4:	0800a915 	.word	0x0800a915
 800a8c8:	0800a915 	.word	0x0800a915
 800a8cc:	0800a91b 	.word	0x0800a91b
 800a8d0:	0800a915 	.word	0x0800a915
 800a8d4:	0800a915 	.word	0x0800a915
 800a8d8:	0800a915 	.word	0x0800a915
 800a8dc:	0800a915 	.word	0x0800a915
 800a8e0:	0800a915 	.word	0x0800a915
 800a8e4:	0800a915 	.word	0x0800a915
 800a8e8:	0800a915 	.word	0x0800a915
 800a8ec:	0800a91b 	.word	0x0800a91b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	3304      	adds	r3, #4
 800a8f4:	2101      	movs	r1, #1
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f000 fdf4 	bl	800b4e4 <RCCEx_PLL2_Config>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a900:	e00c      	b.n	800a91c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	3324      	adds	r3, #36	; 0x24
 800a906:	2101      	movs	r1, #1
 800a908:	4618      	mov	r0, r3
 800a90a:	f000 fe9d 	bl	800b648 <RCCEx_PLL3_Config>
 800a90e:	4603      	mov	r3, r0
 800a910:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a912:	e003      	b.n	800a91c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a914:	2301      	movs	r3, #1
 800a916:	75fb      	strb	r3, [r7, #23]
      break;
 800a918:	e000      	b.n	800a91c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800a91a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a91c:	7dfb      	ldrb	r3, [r7, #23]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d109      	bne.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a922:	4b24      	ldr	r3, [pc, #144]	; (800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a926:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a92e:	4921      	ldr	r1, [pc, #132]	; (800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a930:	4313      	orrs	r3, r2
 800a932:	654b      	str	r3, [r1, #84]	; 0x54
 800a934:	e001      	b.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a936:	7dfb      	ldrb	r3, [r7, #23]
 800a938:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f003 0302 	and.w	r3, r3, #2
 800a942:	2b00      	cmp	r3, #0
 800a944:	d03e      	beq.n	800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a94a:	2b05      	cmp	r3, #5
 800a94c:	d820      	bhi.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800a94e:	a201      	add	r2, pc, #4	; (adr r2, 800a954 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800a950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a954:	0800a997 	.word	0x0800a997
 800a958:	0800a96d 	.word	0x0800a96d
 800a95c:	0800a97f 	.word	0x0800a97f
 800a960:	0800a997 	.word	0x0800a997
 800a964:	0800a997 	.word	0x0800a997
 800a968:	0800a997 	.word	0x0800a997
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	3304      	adds	r3, #4
 800a970:	2101      	movs	r1, #1
 800a972:	4618      	mov	r0, r3
 800a974:	f000 fdb6 	bl	800b4e4 <RCCEx_PLL2_Config>
 800a978:	4603      	mov	r3, r0
 800a97a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a97c:	e00c      	b.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	3324      	adds	r3, #36	; 0x24
 800a982:	2101      	movs	r1, #1
 800a984:	4618      	mov	r0, r3
 800a986:	f000 fe5f 	bl	800b648 <RCCEx_PLL3_Config>
 800a98a:	4603      	mov	r3, r0
 800a98c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a98e:	e003      	b.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a990:	2301      	movs	r3, #1
 800a992:	75fb      	strb	r3, [r7, #23]
      break;
 800a994:	e000      	b.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800a996:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a998:	7dfb      	ldrb	r3, [r7, #23]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d110      	bne.n	800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a99e:	4b05      	ldr	r3, [pc, #20]	; (800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a9a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9a2:	f023 0207 	bic.w	r2, r3, #7
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9aa:	4902      	ldr	r1, [pc, #8]	; (800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	654b      	str	r3, [r1, #84]	; 0x54
 800a9b0:	e008      	b.n	800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800a9b2:	bf00      	nop
 800a9b4:	58024400 	.word	0x58024400
 800a9b8:	58024800 	.word	0x58024800
 800a9bc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9c0:	7dfb      	ldrb	r3, [r7, #23]
 800a9c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f003 0304 	and.w	r3, r3, #4
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d039      	beq.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9d6:	2b05      	cmp	r3, #5
 800a9d8:	d820      	bhi.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x934>
 800a9da:	a201      	add	r2, pc, #4	; (adr r2, 800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800a9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e0:	0800aa23 	.word	0x0800aa23
 800a9e4:	0800a9f9 	.word	0x0800a9f9
 800a9e8:	0800aa0b 	.word	0x0800aa0b
 800a9ec:	0800aa23 	.word	0x0800aa23
 800a9f0:	0800aa23 	.word	0x0800aa23
 800a9f4:	0800aa23 	.word	0x0800aa23
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	3304      	adds	r3, #4
 800a9fc:	2101      	movs	r1, #1
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f000 fd70 	bl	800b4e4 <RCCEx_PLL2_Config>
 800aa04:	4603      	mov	r3, r0
 800aa06:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800aa08:	e00c      	b.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	3324      	adds	r3, #36	; 0x24
 800aa0e:	2101      	movs	r1, #1
 800aa10:	4618      	mov	r0, r3
 800aa12:	f000 fe19 	bl	800b648 <RCCEx_PLL3_Config>
 800aa16:	4603      	mov	r3, r0
 800aa18:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800aa1a:	e003      	b.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	75fb      	strb	r3, [r7, #23]
      break;
 800aa20:	e000      	b.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800aa22:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa24:	7dfb      	ldrb	r3, [r7, #23]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d10a      	bne.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800aa2a:	4bb7      	ldr	r3, [pc, #732]	; (800ad08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800aa2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa2e:	f023 0207 	bic.w	r2, r3, #7
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa38:	49b3      	ldr	r1, [pc, #716]	; (800ad08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	658b      	str	r3, [r1, #88]	; 0x58
 800aa3e:	e001      	b.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa40:	7dfb      	ldrb	r3, [r7, #23]
 800aa42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f003 0320 	and.w	r3, r3, #32
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d04b      	beq.n	800aae8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa5a:	d02e      	beq.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800aa5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa60:	d828      	bhi.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800aa62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa66:	d02a      	beq.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800aa68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa6c:	d822      	bhi.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800aa6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aa72:	d026      	beq.n	800aac2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800aa74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aa78:	d81c      	bhi.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800aa7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa7e:	d010      	beq.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800aa80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa84:	d816      	bhi.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d01d      	beq.n	800aac6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800aa8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa8e:	d111      	bne.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	3304      	adds	r3, #4
 800aa94:	2100      	movs	r1, #0
 800aa96:	4618      	mov	r0, r3
 800aa98:	f000 fd24 	bl	800b4e4 <RCCEx_PLL2_Config>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800aaa0:	e012      	b.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	3324      	adds	r3, #36	; 0x24
 800aaa6:	2102      	movs	r1, #2
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f000 fdcd 	bl	800b648 <RCCEx_PLL3_Config>
 800aaae:	4603      	mov	r3, r0
 800aab0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800aab2:	e009      	b.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aab4:	2301      	movs	r3, #1
 800aab6:	75fb      	strb	r3, [r7, #23]
      break;
 800aab8:	e006      	b.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800aaba:	bf00      	nop
 800aabc:	e004      	b.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800aabe:	bf00      	nop
 800aac0:	e002      	b.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800aac2:	bf00      	nop
 800aac4:	e000      	b.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800aac6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aac8:	7dfb      	ldrb	r3, [r7, #23]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d10a      	bne.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800aace:	4b8e      	ldr	r3, [pc, #568]	; (800ad08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800aad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aad2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aadc:	498a      	ldr	r1, [pc, #552]	; (800ad08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800aade:	4313      	orrs	r3, r2
 800aae0:	654b      	str	r3, [r1, #84]	; 0x54
 800aae2:	e001      	b.n	800aae8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aae4:	7dfb      	ldrb	r3, [r7, #23]
 800aae6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d04b      	beq.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aafa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800aafe:	d02e      	beq.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800ab00:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ab04:	d828      	bhi.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800ab06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab0a:	d02a      	beq.n	800ab62 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800ab0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab10:	d822      	bhi.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800ab12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ab16:	d026      	beq.n	800ab66 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800ab18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ab1c:	d81c      	bhi.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800ab1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab22:	d010      	beq.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800ab24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab28:	d816      	bhi.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d01d      	beq.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800ab2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab32:	d111      	bne.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	3304      	adds	r3, #4
 800ab38:	2100      	movs	r1, #0
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f000 fcd2 	bl	800b4e4 <RCCEx_PLL2_Config>
 800ab40:	4603      	mov	r3, r0
 800ab42:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800ab44:	e012      	b.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	3324      	adds	r3, #36	; 0x24
 800ab4a:	2102      	movs	r1, #2
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f000 fd7b 	bl	800b648 <RCCEx_PLL3_Config>
 800ab52:	4603      	mov	r3, r0
 800ab54:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800ab56:	e009      	b.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	75fb      	strb	r3, [r7, #23]
      break;
 800ab5c:	e006      	b.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800ab5e:	bf00      	nop
 800ab60:	e004      	b.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800ab62:	bf00      	nop
 800ab64:	e002      	b.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800ab66:	bf00      	nop
 800ab68:	e000      	b.n	800ab6c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800ab6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab6c:	7dfb      	ldrb	r3, [r7, #23]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d10a      	bne.n	800ab88 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ab72:	4b65      	ldr	r3, [pc, #404]	; (800ad08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ab74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab76:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ab80:	4961      	ldr	r1, [pc, #388]	; (800ad08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ab82:	4313      	orrs	r3, r2
 800ab84:	658b      	str	r3, [r1, #88]	; 0x58
 800ab86:	e001      	b.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab88:	7dfb      	ldrb	r3, [r7, #23]
 800ab8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d04b      	beq.n	800ac30 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ab9e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800aba2:	d02e      	beq.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800aba4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800aba8:	d828      	bhi.n	800abfc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800abaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abae:	d02a      	beq.n	800ac06 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800abb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abb4:	d822      	bhi.n	800abfc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800abb6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800abba:	d026      	beq.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800abbc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800abc0:	d81c      	bhi.n	800abfc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800abc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abc6:	d010      	beq.n	800abea <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800abc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abcc:	d816      	bhi.n	800abfc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d01d      	beq.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800abd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abd6:	d111      	bne.n	800abfc <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	3304      	adds	r3, #4
 800abdc:	2100      	movs	r1, #0
 800abde:	4618      	mov	r0, r3
 800abe0:	f000 fc80 	bl	800b4e4 <RCCEx_PLL2_Config>
 800abe4:	4603      	mov	r3, r0
 800abe6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800abe8:	e012      	b.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	3324      	adds	r3, #36	; 0x24
 800abee:	2102      	movs	r1, #2
 800abf0:	4618      	mov	r0, r3
 800abf2:	f000 fd29 	bl	800b648 <RCCEx_PLL3_Config>
 800abf6:	4603      	mov	r3, r0
 800abf8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800abfa:	e009      	b.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800abfc:	2301      	movs	r3, #1
 800abfe:	75fb      	strb	r3, [r7, #23]
      break;
 800ac00:	e006      	b.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800ac02:	bf00      	nop
 800ac04:	e004      	b.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800ac06:	bf00      	nop
 800ac08:	e002      	b.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800ac0a:	bf00      	nop
 800ac0c:	e000      	b.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800ac0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac10:	7dfb      	ldrb	r3, [r7, #23]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d10a      	bne.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ac16:	4b3c      	ldr	r3, [pc, #240]	; (800ad08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ac18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ac24:	4938      	ldr	r1, [pc, #224]	; (800ad08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ac26:	4313      	orrs	r3, r2
 800ac28:	658b      	str	r3, [r1, #88]	; 0x58
 800ac2a:	e001      	b.n	800ac30 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac2c:	7dfb      	ldrb	r3, [r7, #23]
 800ac2e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f003 0308 	and.w	r3, r3, #8
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d01a      	beq.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac46:	d10a      	bne.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	3324      	adds	r3, #36	; 0x24
 800ac4c:	2102      	movs	r1, #2
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f000 fcfa 	bl	800b648 <RCCEx_PLL3_Config>
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d001      	beq.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800ac5e:	4b2a      	ldr	r3, [pc, #168]	; (800ad08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ac60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac62:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac6c:	4926      	ldr	r1, [pc, #152]	; (800ad08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f003 0310 	and.w	r3, r3, #16
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d01a      	beq.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ac84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac88:	d10a      	bne.n	800aca0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	3324      	adds	r3, #36	; 0x24
 800ac8e:	2102      	movs	r1, #2
 800ac90:	4618      	mov	r0, r3
 800ac92:	f000 fcd9 	bl	800b648 <RCCEx_PLL3_Config>
 800ac96:	4603      	mov	r3, r0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d001      	beq.n	800aca0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aca0:	4b19      	ldr	r3, [pc, #100]	; (800ad08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800aca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aca4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800acae:	4916      	ldr	r1, [pc, #88]	; (800ad08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800acb0:	4313      	orrs	r3, r2
 800acb2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d036      	beq.n	800ad2e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800acc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acca:	d01f      	beq.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800accc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acd0:	d817      	bhi.n	800ad02 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d003      	beq.n	800acde <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800acd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acda:	d009      	beq.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800acdc:	e011      	b.n	800ad02 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	3304      	adds	r3, #4
 800ace2:	2100      	movs	r1, #0
 800ace4:	4618      	mov	r0, r3
 800ace6:	f000 fbfd 	bl	800b4e4 <RCCEx_PLL2_Config>
 800acea:	4603      	mov	r3, r0
 800acec:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800acee:	e00e      	b.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	3324      	adds	r3, #36	; 0x24
 800acf4:	2102      	movs	r1, #2
 800acf6:	4618      	mov	r0, r3
 800acf8:	f000 fca6 	bl	800b648 <RCCEx_PLL3_Config>
 800acfc:	4603      	mov	r3, r0
 800acfe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ad00:	e005      	b.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ad02:	2301      	movs	r3, #1
 800ad04:	75fb      	strb	r3, [r7, #23]
      break;
 800ad06:	e002      	b.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800ad08:	58024400 	.word	0x58024400
      break;
 800ad0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad0e:	7dfb      	ldrb	r3, [r7, #23]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d10a      	bne.n	800ad2a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ad14:	4b93      	ldr	r3, [pc, #588]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ad16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ad22:	4990      	ldr	r1, [pc, #576]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ad24:	4313      	orrs	r3, r2
 800ad26:	658b      	str	r3, [r1, #88]	; 0x58
 800ad28:	e001      	b.n	800ad2e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad2a:	7dfb      	ldrb	r3, [r7, #23]
 800ad2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d033      	beq.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ad44:	d01c      	beq.n	800ad80 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800ad46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ad4a:	d816      	bhi.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800ad4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad50:	d003      	beq.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800ad52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad56:	d007      	beq.n	800ad68 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800ad58:	e00f      	b.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad5a:	4b82      	ldr	r3, [pc, #520]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ad5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad5e:	4a81      	ldr	r2, [pc, #516]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ad60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800ad66:	e00c      	b.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	3324      	adds	r3, #36	; 0x24
 800ad6c:	2101      	movs	r1, #1
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f000 fc6a 	bl	800b648 <RCCEx_PLL3_Config>
 800ad74:	4603      	mov	r3, r0
 800ad76:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800ad78:	e003      	b.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	75fb      	strb	r3, [r7, #23]
      break;
 800ad7e:	e000      	b.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800ad80:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad82:	7dfb      	ldrb	r3, [r7, #23]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d10a      	bne.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ad88:	4b76      	ldr	r3, [pc, #472]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ad8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad96:	4973      	ldr	r1, [pc, #460]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	654b      	str	r3, [r1, #84]	; 0x54
 800ad9c:	e001      	b.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad9e:	7dfb      	ldrb	r3, [r7, #23]
 800ada0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d029      	beq.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d003      	beq.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800adb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adba:	d007      	beq.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800adbc:	e00f      	b.n	800adde <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adbe:	4b69      	ldr	r3, [pc, #420]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800adc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc2:	4a68      	ldr	r2, [pc, #416]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800adc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800adc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800adca:	e00b      	b.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	3304      	adds	r3, #4
 800add0:	2102      	movs	r1, #2
 800add2:	4618      	mov	r0, r3
 800add4:	f000 fb86 	bl	800b4e4 <RCCEx_PLL2_Config>
 800add8:	4603      	mov	r3, r0
 800adda:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800addc:	e002      	b.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800adde:	2301      	movs	r3, #1
 800ade0:	75fb      	strb	r3, [r7, #23]
      break;
 800ade2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ade4:	7dfb      	ldrb	r3, [r7, #23]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d109      	bne.n	800adfe <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800adea:	4b5e      	ldr	r3, [pc, #376]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800adec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adf6:	495b      	ldr	r1, [pc, #364]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800adf8:	4313      	orrs	r3, r2
 800adfa:	64cb      	str	r3, [r1, #76]	; 0x4c
 800adfc:	e001      	b.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adfe:	7dfb      	ldrb	r3, [r7, #23]
 800ae00:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d00a      	beq.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	3324      	adds	r3, #36	; 0x24
 800ae12:	2102      	movs	r1, #2
 800ae14:	4618      	mov	r0, r3
 800ae16:	f000 fc17 	bl	800b648 <RCCEx_PLL3_Config>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d001      	beq.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800ae20:	2301      	movs	r3, #1
 800ae22:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d030      	beq.n	800ae92 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae38:	d017      	beq.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800ae3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae3e:	d811      	bhi.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800ae40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae44:	d013      	beq.n	800ae6e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800ae46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae4a:	d80b      	bhi.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d010      	beq.n	800ae72 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800ae50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae54:	d106      	bne.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae56:	4b43      	ldr	r3, [pc, #268]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ae58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae5a:	4a42      	ldr	r2, [pc, #264]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ae5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800ae62:	e007      	b.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ae64:	2301      	movs	r3, #1
 800ae66:	75fb      	strb	r3, [r7, #23]
      break;
 800ae68:	e004      	b.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800ae6a:	bf00      	nop
 800ae6c:	e002      	b.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800ae6e:	bf00      	nop
 800ae70:	e000      	b.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800ae72:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae74:	7dfb      	ldrb	r3, [r7, #23]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d109      	bne.n	800ae8e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ae7a:	4b3a      	ldr	r3, [pc, #232]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ae7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae86:	4937      	ldr	r1, [pc, #220]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	654b      	str	r3, [r1, #84]	; 0x54
 800ae8c:	e001      	b.n	800ae92 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae8e:	7dfb      	ldrb	r3, [r7, #23]
 800ae90:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d008      	beq.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ae9e:	4b31      	ldr	r3, [pc, #196]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aea2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeaa:	492e      	ldr	r1, [pc, #184]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aeac:	4313      	orrs	r3, r2
 800aeae:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d009      	beq.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800aebc:	4b29      	ldr	r3, [pc, #164]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aebe:	691b      	ldr	r3, [r3, #16]
 800aec0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800aeca:	4926      	ldr	r1, [pc, #152]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aecc:	4313      	orrs	r3, r2
 800aece:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d008      	beq.n	800aeee <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800aedc:	4b21      	ldr	r3, [pc, #132]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aee0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aee8:	491e      	ldr	r1, [pc, #120]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aeea:	4313      	orrs	r3, r2
 800aeec:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d00d      	beq.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800aefa:	4b1a      	ldr	r3, [pc, #104]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aefc:	691b      	ldr	r3, [r3, #16]
 800aefe:	4a19      	ldr	r2, [pc, #100]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800af00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800af04:	6113      	str	r3, [r2, #16]
 800af06:	4b17      	ldr	r3, [pc, #92]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800af08:	691a      	ldr	r2, [r3, #16]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800af10:	4914      	ldr	r1, [pc, #80]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800af12:	4313      	orrs	r3, r2
 800af14:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	da08      	bge.n	800af30 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800af1e:	4b11      	ldr	r3, [pc, #68]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800af20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af2a:	490e      	ldr	r1, [pc, #56]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800af2c:	4313      	orrs	r3, r2
 800af2e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d009      	beq.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800af3c:	4b09      	ldr	r3, [pc, #36]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800af3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af40:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af4a:	4906      	ldr	r1, [pc, #24]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800af4c:	4313      	orrs	r3, r2
 800af4e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800af50:	7dbb      	ldrb	r3, [r7, #22]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d101      	bne.n	800af5a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800af56:	2300      	movs	r3, #0
 800af58:	e000      	b.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800af5a:	2301      	movs	r3, #1
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3718      	adds	r7, #24
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}
 800af64:	58024400 	.word	0x58024400

0800af68 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800af6c:	f7ff f860 	bl	800a030 <HAL_RCC_GetHCLKFreq>
 800af70:	4602      	mov	r2, r0
 800af72:	4b06      	ldr	r3, [pc, #24]	; (800af8c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800af74:	6a1b      	ldr	r3, [r3, #32]
 800af76:	091b      	lsrs	r3, r3, #4
 800af78:	f003 0307 	and.w	r3, r3, #7
 800af7c:	4904      	ldr	r1, [pc, #16]	; (800af90 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800af7e:	5ccb      	ldrb	r3, [r1, r3]
 800af80:	f003 031f 	and.w	r3, r3, #31
 800af84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800af88:	4618      	mov	r0, r3
 800af8a:	bd80      	pop	{r7, pc}
 800af8c:	58024400 	.word	0x58024400
 800af90:	080132d0 	.word	0x080132d0

0800af94 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800af94:	b480      	push	{r7}
 800af96:	b089      	sub	sp, #36	; 0x24
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af9c:	4ba1      	ldr	r3, [pc, #644]	; (800b224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afa0:	f003 0303 	and.w	r3, r3, #3
 800afa4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800afa6:	4b9f      	ldr	r3, [pc, #636]	; (800b224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afaa:	0b1b      	lsrs	r3, r3, #12
 800afac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800afb0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800afb2:	4b9c      	ldr	r3, [pc, #624]	; (800b224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afb6:	091b      	lsrs	r3, r3, #4
 800afb8:	f003 0301 	and.w	r3, r3, #1
 800afbc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800afbe:	4b99      	ldr	r3, [pc, #612]	; (800b224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afc2:	08db      	lsrs	r3, r3, #3
 800afc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800afc8:	693a      	ldr	r2, [r7, #16]
 800afca:	fb02 f303 	mul.w	r3, r2, r3
 800afce:	ee07 3a90 	vmov	s15, r3
 800afd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afd6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	f000 8111 	beq.w	800b204 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800afe2:	69bb      	ldr	r3, [r7, #24]
 800afe4:	2b02      	cmp	r3, #2
 800afe6:	f000 8083 	beq.w	800b0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800afea:	69bb      	ldr	r3, [r7, #24]
 800afec:	2b02      	cmp	r3, #2
 800afee:	f200 80a1 	bhi.w	800b134 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800aff2:	69bb      	ldr	r3, [r7, #24]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d003      	beq.n	800b000 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800aff8:	69bb      	ldr	r3, [r7, #24]
 800affa:	2b01      	cmp	r3, #1
 800affc:	d056      	beq.n	800b0ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800affe:	e099      	b.n	800b134 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b000:	4b88      	ldr	r3, [pc, #544]	; (800b224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f003 0320 	and.w	r3, r3, #32
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d02d      	beq.n	800b068 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b00c:	4b85      	ldr	r3, [pc, #532]	; (800b224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	08db      	lsrs	r3, r3, #3
 800b012:	f003 0303 	and.w	r3, r3, #3
 800b016:	4a84      	ldr	r2, [pc, #528]	; (800b228 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b018:	fa22 f303 	lsr.w	r3, r2, r3
 800b01c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	ee07 3a90 	vmov	s15, r3
 800b024:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	ee07 3a90 	vmov	s15, r3
 800b02e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b036:	4b7b      	ldr	r3, [pc, #492]	; (800b224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b03a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b03e:	ee07 3a90 	vmov	s15, r3
 800b042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b046:	ed97 6a03 	vldr	s12, [r7, #12]
 800b04a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b22c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b04e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b056:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b05a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b05e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b062:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b066:	e087      	b.n	800b178 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	ee07 3a90 	vmov	s15, r3
 800b06e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b072:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b230 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b07a:	4b6a      	ldr	r3, [pc, #424]	; (800b224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b07e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b082:	ee07 3a90 	vmov	s15, r3
 800b086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b08a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b08e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b22c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b09a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b09e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b0aa:	e065      	b.n	800b178 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	ee07 3a90 	vmov	s15, r3
 800b0b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b234 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b0ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0be:	4b59      	ldr	r3, [pc, #356]	; (800b224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0c6:	ee07 3a90 	vmov	s15, r3
 800b0ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b22c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b0ee:	e043      	b.n	800b178 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	ee07 3a90 	vmov	s15, r3
 800b0f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b238 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b0fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b102:	4b48      	ldr	r3, [pc, #288]	; (800b224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b10a:	ee07 3a90 	vmov	s15, r3
 800b10e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b112:	ed97 6a03 	vldr	s12, [r7, #12]
 800b116:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b22c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b11a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b11e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b12a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b12e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b132:	e021      	b.n	800b178 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	ee07 3a90 	vmov	s15, r3
 800b13a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b13e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b234 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b146:	4b37      	ldr	r3, [pc, #220]	; (800b224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b14a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b14e:	ee07 3a90 	vmov	s15, r3
 800b152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b156:	ed97 6a03 	vldr	s12, [r7, #12]
 800b15a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b22c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b15e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b16a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b16e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b172:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b176:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b178:	4b2a      	ldr	r3, [pc, #168]	; (800b224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b17a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b17c:	0a5b      	lsrs	r3, r3, #9
 800b17e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b182:	ee07 3a90 	vmov	s15, r3
 800b186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b18a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b18e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b192:	edd7 6a07 	vldr	s13, [r7, #28]
 800b196:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b19a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b19e:	ee17 2a90 	vmov	r2, s15
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b1a6:	4b1f      	ldr	r3, [pc, #124]	; (800b224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1aa:	0c1b      	lsrs	r3, r3, #16
 800b1ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1b0:	ee07 3a90 	vmov	s15, r3
 800b1b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b1bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1cc:	ee17 2a90 	vmov	r2, s15
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b1d4:	4b13      	ldr	r3, [pc, #76]	; (800b224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1d8:	0e1b      	lsrs	r3, r3, #24
 800b1da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1de:	ee07 3a90 	vmov	s15, r3
 800b1e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b1ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1fa:	ee17 2a90 	vmov	r2, s15
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b202:	e008      	b.n	800b216 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2200      	movs	r2, #0
 800b208:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2200      	movs	r2, #0
 800b20e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2200      	movs	r2, #0
 800b214:	609a      	str	r2, [r3, #8]
}
 800b216:	bf00      	nop
 800b218:	3724      	adds	r7, #36	; 0x24
 800b21a:	46bd      	mov	sp, r7
 800b21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b220:	4770      	bx	lr
 800b222:	bf00      	nop
 800b224:	58024400 	.word	0x58024400
 800b228:	03d09000 	.word	0x03d09000
 800b22c:	46000000 	.word	0x46000000
 800b230:	4c742400 	.word	0x4c742400
 800b234:	4a742400 	.word	0x4a742400
 800b238:	4c371b00 	.word	0x4c371b00

0800b23c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b089      	sub	sp, #36	; 0x24
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b244:	4ba1      	ldr	r3, [pc, #644]	; (800b4cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b248:	f003 0303 	and.w	r3, r3, #3
 800b24c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b24e:	4b9f      	ldr	r3, [pc, #636]	; (800b4cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b252:	0d1b      	lsrs	r3, r3, #20
 800b254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b258:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b25a:	4b9c      	ldr	r3, [pc, #624]	; (800b4cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b25e:	0a1b      	lsrs	r3, r3, #8
 800b260:	f003 0301 	and.w	r3, r3, #1
 800b264:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b266:	4b99      	ldr	r3, [pc, #612]	; (800b4cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b26a:	08db      	lsrs	r3, r3, #3
 800b26c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b270:	693a      	ldr	r2, [r7, #16]
 800b272:	fb02 f303 	mul.w	r3, r2, r3
 800b276:	ee07 3a90 	vmov	s15, r3
 800b27a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b27e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	2b00      	cmp	r3, #0
 800b286:	f000 8111 	beq.w	800b4ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b28a:	69bb      	ldr	r3, [r7, #24]
 800b28c:	2b02      	cmp	r3, #2
 800b28e:	f000 8083 	beq.w	800b398 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	2b02      	cmp	r3, #2
 800b296:	f200 80a1 	bhi.w	800b3dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b29a:	69bb      	ldr	r3, [r7, #24]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d003      	beq.n	800b2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b2a0:	69bb      	ldr	r3, [r7, #24]
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d056      	beq.n	800b354 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b2a6:	e099      	b.n	800b3dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2a8:	4b88      	ldr	r3, [pc, #544]	; (800b4cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f003 0320 	and.w	r3, r3, #32
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d02d      	beq.n	800b310 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b2b4:	4b85      	ldr	r3, [pc, #532]	; (800b4cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	08db      	lsrs	r3, r3, #3
 800b2ba:	f003 0303 	and.w	r3, r3, #3
 800b2be:	4a84      	ldr	r2, [pc, #528]	; (800b4d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b2c0:	fa22 f303 	lsr.w	r3, r2, r3
 800b2c4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	ee07 3a90 	vmov	s15, r3
 800b2cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	ee07 3a90 	vmov	s15, r3
 800b2d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2de:	4b7b      	ldr	r3, [pc, #492]	; (800b4cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2e6:	ee07 3a90 	vmov	s15, r3
 800b2ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b4d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b2f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b30a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b30e:	e087      	b.n	800b420 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	ee07 3a90 	vmov	s15, r3
 800b316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b31a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b4d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b31e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b322:	4b6a      	ldr	r3, [pc, #424]	; (800b4cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b32a:	ee07 3a90 	vmov	s15, r3
 800b32e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b332:	ed97 6a03 	vldr	s12, [r7, #12]
 800b336:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b4d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b33a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b33e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b342:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b34a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b34e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b352:	e065      	b.n	800b420 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	ee07 3a90 	vmov	s15, r3
 800b35a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b35e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b4dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b366:	4b59      	ldr	r3, [pc, #356]	; (800b4cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b36a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b36e:	ee07 3a90 	vmov	s15, r3
 800b372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b376:	ed97 6a03 	vldr	s12, [r7, #12]
 800b37a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b4d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b37e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b38a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b38e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b392:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b396:	e043      	b.n	800b420 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	ee07 3a90 	vmov	s15, r3
 800b39e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b4e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b3a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3aa:	4b48      	ldr	r3, [pc, #288]	; (800b4cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3b2:	ee07 3a90 	vmov	s15, r3
 800b3b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3be:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b4d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b3c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b3da:	e021      	b.n	800b420 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	ee07 3a90 	vmov	s15, r3
 800b3e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b4dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b3ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3ee:	4b37      	ldr	r3, [pc, #220]	; (800b4cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3f6:	ee07 3a90 	vmov	s15, r3
 800b3fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800b402:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b4d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b40a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b40e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b41a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b41e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b420:	4b2a      	ldr	r3, [pc, #168]	; (800b4cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b424:	0a5b      	lsrs	r3, r3, #9
 800b426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b42a:	ee07 3a90 	vmov	s15, r3
 800b42e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b432:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b436:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b43a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b43e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b446:	ee17 2a90 	vmov	r2, s15
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b44e:	4b1f      	ldr	r3, [pc, #124]	; (800b4cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b452:	0c1b      	lsrs	r3, r3, #16
 800b454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b458:	ee07 3a90 	vmov	s15, r3
 800b45c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b460:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b464:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b468:	edd7 6a07 	vldr	s13, [r7, #28]
 800b46c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b474:	ee17 2a90 	vmov	r2, s15
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b47c:	4b13      	ldr	r3, [pc, #76]	; (800b4cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b47e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b480:	0e1b      	lsrs	r3, r3, #24
 800b482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b486:	ee07 3a90 	vmov	s15, r3
 800b48a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b48e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b492:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b496:	edd7 6a07 	vldr	s13, [r7, #28]
 800b49a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b49e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4a2:	ee17 2a90 	vmov	r2, s15
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b4aa:	e008      	b.n	800b4be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	609a      	str	r2, [r3, #8]
}
 800b4be:	bf00      	nop
 800b4c0:	3724      	adds	r7, #36	; 0x24
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c8:	4770      	bx	lr
 800b4ca:	bf00      	nop
 800b4cc:	58024400 	.word	0x58024400
 800b4d0:	03d09000 	.word	0x03d09000
 800b4d4:	46000000 	.word	0x46000000
 800b4d8:	4c742400 	.word	0x4c742400
 800b4dc:	4a742400 	.word	0x4a742400
 800b4e0:	4c371b00 	.word	0x4c371b00

0800b4e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b4f2:	4b53      	ldr	r3, [pc, #332]	; (800b640 <RCCEx_PLL2_Config+0x15c>)
 800b4f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4f6:	f003 0303 	and.w	r3, r3, #3
 800b4fa:	2b03      	cmp	r3, #3
 800b4fc:	d101      	bne.n	800b502 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b4fe:	2301      	movs	r3, #1
 800b500:	e099      	b.n	800b636 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b502:	4b4f      	ldr	r3, [pc, #316]	; (800b640 <RCCEx_PLL2_Config+0x15c>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4a4e      	ldr	r2, [pc, #312]	; (800b640 <RCCEx_PLL2_Config+0x15c>)
 800b508:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b50c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b50e:	f7fa fa85 	bl	8005a1c <HAL_GetTick>
 800b512:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b514:	e008      	b.n	800b528 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b516:	f7fa fa81 	bl	8005a1c <HAL_GetTick>
 800b51a:	4602      	mov	r2, r0
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	1ad3      	subs	r3, r2, r3
 800b520:	2b02      	cmp	r3, #2
 800b522:	d901      	bls.n	800b528 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b524:	2303      	movs	r3, #3
 800b526:	e086      	b.n	800b636 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b528:	4b45      	ldr	r3, [pc, #276]	; (800b640 <RCCEx_PLL2_Config+0x15c>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b530:	2b00      	cmp	r3, #0
 800b532:	d1f0      	bne.n	800b516 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b534:	4b42      	ldr	r3, [pc, #264]	; (800b640 <RCCEx_PLL2_Config+0x15c>)
 800b536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b538:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	031b      	lsls	r3, r3, #12
 800b542:	493f      	ldr	r1, [pc, #252]	; (800b640 <RCCEx_PLL2_Config+0x15c>)
 800b544:	4313      	orrs	r3, r2
 800b546:	628b      	str	r3, [r1, #40]	; 0x28
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	685b      	ldr	r3, [r3, #4]
 800b54c:	3b01      	subs	r3, #1
 800b54e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	689b      	ldr	r3, [r3, #8]
 800b556:	3b01      	subs	r3, #1
 800b558:	025b      	lsls	r3, r3, #9
 800b55a:	b29b      	uxth	r3, r3
 800b55c:	431a      	orrs	r2, r3
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	68db      	ldr	r3, [r3, #12]
 800b562:	3b01      	subs	r3, #1
 800b564:	041b      	lsls	r3, r3, #16
 800b566:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b56a:	431a      	orrs	r2, r3
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	691b      	ldr	r3, [r3, #16]
 800b570:	3b01      	subs	r3, #1
 800b572:	061b      	lsls	r3, r3, #24
 800b574:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b578:	4931      	ldr	r1, [pc, #196]	; (800b640 <RCCEx_PLL2_Config+0x15c>)
 800b57a:	4313      	orrs	r3, r2
 800b57c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b57e:	4b30      	ldr	r3, [pc, #192]	; (800b640 <RCCEx_PLL2_Config+0x15c>)
 800b580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b582:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	695b      	ldr	r3, [r3, #20]
 800b58a:	492d      	ldr	r1, [pc, #180]	; (800b640 <RCCEx_PLL2_Config+0x15c>)
 800b58c:	4313      	orrs	r3, r2
 800b58e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b590:	4b2b      	ldr	r3, [pc, #172]	; (800b640 <RCCEx_PLL2_Config+0x15c>)
 800b592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b594:	f023 0220 	bic.w	r2, r3, #32
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	699b      	ldr	r3, [r3, #24]
 800b59c:	4928      	ldr	r1, [pc, #160]	; (800b640 <RCCEx_PLL2_Config+0x15c>)
 800b59e:	4313      	orrs	r3, r2
 800b5a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b5a2:	4b27      	ldr	r3, [pc, #156]	; (800b640 <RCCEx_PLL2_Config+0x15c>)
 800b5a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a6:	4a26      	ldr	r2, [pc, #152]	; (800b640 <RCCEx_PLL2_Config+0x15c>)
 800b5a8:	f023 0310 	bic.w	r3, r3, #16
 800b5ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b5ae:	4b24      	ldr	r3, [pc, #144]	; (800b640 <RCCEx_PLL2_Config+0x15c>)
 800b5b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b5b2:	4b24      	ldr	r3, [pc, #144]	; (800b644 <RCCEx_PLL2_Config+0x160>)
 800b5b4:	4013      	ands	r3, r2
 800b5b6:	687a      	ldr	r2, [r7, #4]
 800b5b8:	69d2      	ldr	r2, [r2, #28]
 800b5ba:	00d2      	lsls	r2, r2, #3
 800b5bc:	4920      	ldr	r1, [pc, #128]	; (800b640 <RCCEx_PLL2_Config+0x15c>)
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b5c2:	4b1f      	ldr	r3, [pc, #124]	; (800b640 <RCCEx_PLL2_Config+0x15c>)
 800b5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c6:	4a1e      	ldr	r2, [pc, #120]	; (800b640 <RCCEx_PLL2_Config+0x15c>)
 800b5c8:	f043 0310 	orr.w	r3, r3, #16
 800b5cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d106      	bne.n	800b5e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b5d4:	4b1a      	ldr	r3, [pc, #104]	; (800b640 <RCCEx_PLL2_Config+0x15c>)
 800b5d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d8:	4a19      	ldr	r2, [pc, #100]	; (800b640 <RCCEx_PLL2_Config+0x15c>)
 800b5da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b5de:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b5e0:	e00f      	b.n	800b602 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	2b01      	cmp	r3, #1
 800b5e6:	d106      	bne.n	800b5f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b5e8:	4b15      	ldr	r3, [pc, #84]	; (800b640 <RCCEx_PLL2_Config+0x15c>)
 800b5ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ec:	4a14      	ldr	r2, [pc, #80]	; (800b640 <RCCEx_PLL2_Config+0x15c>)
 800b5ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b5f4:	e005      	b.n	800b602 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b5f6:	4b12      	ldr	r3, [pc, #72]	; (800b640 <RCCEx_PLL2_Config+0x15c>)
 800b5f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5fa:	4a11      	ldr	r2, [pc, #68]	; (800b640 <RCCEx_PLL2_Config+0x15c>)
 800b5fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b600:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b602:	4b0f      	ldr	r3, [pc, #60]	; (800b640 <RCCEx_PLL2_Config+0x15c>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	4a0e      	ldr	r2, [pc, #56]	; (800b640 <RCCEx_PLL2_Config+0x15c>)
 800b608:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b60c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b60e:	f7fa fa05 	bl	8005a1c <HAL_GetTick>
 800b612:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b614:	e008      	b.n	800b628 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b616:	f7fa fa01 	bl	8005a1c <HAL_GetTick>
 800b61a:	4602      	mov	r2, r0
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	1ad3      	subs	r3, r2, r3
 800b620:	2b02      	cmp	r3, #2
 800b622:	d901      	bls.n	800b628 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b624:	2303      	movs	r3, #3
 800b626:	e006      	b.n	800b636 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b628:	4b05      	ldr	r3, [pc, #20]	; (800b640 <RCCEx_PLL2_Config+0x15c>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b630:	2b00      	cmp	r3, #0
 800b632:	d0f0      	beq.n	800b616 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b634:	7bfb      	ldrb	r3, [r7, #15]
}
 800b636:	4618      	mov	r0, r3
 800b638:	3710      	adds	r7, #16
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}
 800b63e:	bf00      	nop
 800b640:	58024400 	.word	0x58024400
 800b644:	ffff0007 	.word	0xffff0007

0800b648 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b652:	2300      	movs	r3, #0
 800b654:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b656:	4b53      	ldr	r3, [pc, #332]	; (800b7a4 <RCCEx_PLL3_Config+0x15c>)
 800b658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b65a:	f003 0303 	and.w	r3, r3, #3
 800b65e:	2b03      	cmp	r3, #3
 800b660:	d101      	bne.n	800b666 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b662:	2301      	movs	r3, #1
 800b664:	e099      	b.n	800b79a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b666:	4b4f      	ldr	r3, [pc, #316]	; (800b7a4 <RCCEx_PLL3_Config+0x15c>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	4a4e      	ldr	r2, [pc, #312]	; (800b7a4 <RCCEx_PLL3_Config+0x15c>)
 800b66c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b670:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b672:	f7fa f9d3 	bl	8005a1c <HAL_GetTick>
 800b676:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b678:	e008      	b.n	800b68c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b67a:	f7fa f9cf 	bl	8005a1c <HAL_GetTick>
 800b67e:	4602      	mov	r2, r0
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	1ad3      	subs	r3, r2, r3
 800b684:	2b02      	cmp	r3, #2
 800b686:	d901      	bls.n	800b68c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b688:	2303      	movs	r3, #3
 800b68a:	e086      	b.n	800b79a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b68c:	4b45      	ldr	r3, [pc, #276]	; (800b7a4 <RCCEx_PLL3_Config+0x15c>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b694:	2b00      	cmp	r3, #0
 800b696:	d1f0      	bne.n	800b67a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b698:	4b42      	ldr	r3, [pc, #264]	; (800b7a4 <RCCEx_PLL3_Config+0x15c>)
 800b69a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b69c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	051b      	lsls	r3, r3, #20
 800b6a6:	493f      	ldr	r1, [pc, #252]	; (800b7a4 <RCCEx_PLL3_Config+0x15c>)
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	628b      	str	r3, [r1, #40]	; 0x28
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	685b      	ldr	r3, [r3, #4]
 800b6b0:	3b01      	subs	r3, #1
 800b6b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	689b      	ldr	r3, [r3, #8]
 800b6ba:	3b01      	subs	r3, #1
 800b6bc:	025b      	lsls	r3, r3, #9
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	431a      	orrs	r2, r3
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	68db      	ldr	r3, [r3, #12]
 800b6c6:	3b01      	subs	r3, #1
 800b6c8:	041b      	lsls	r3, r3, #16
 800b6ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b6ce:	431a      	orrs	r2, r3
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	691b      	ldr	r3, [r3, #16]
 800b6d4:	3b01      	subs	r3, #1
 800b6d6:	061b      	lsls	r3, r3, #24
 800b6d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b6dc:	4931      	ldr	r1, [pc, #196]	; (800b7a4 <RCCEx_PLL3_Config+0x15c>)
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b6e2:	4b30      	ldr	r3, [pc, #192]	; (800b7a4 <RCCEx_PLL3_Config+0x15c>)
 800b6e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	695b      	ldr	r3, [r3, #20]
 800b6ee:	492d      	ldr	r1, [pc, #180]	; (800b7a4 <RCCEx_PLL3_Config+0x15c>)
 800b6f0:	4313      	orrs	r3, r2
 800b6f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b6f4:	4b2b      	ldr	r3, [pc, #172]	; (800b7a4 <RCCEx_PLL3_Config+0x15c>)
 800b6f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	699b      	ldr	r3, [r3, #24]
 800b700:	4928      	ldr	r1, [pc, #160]	; (800b7a4 <RCCEx_PLL3_Config+0x15c>)
 800b702:	4313      	orrs	r3, r2
 800b704:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b706:	4b27      	ldr	r3, [pc, #156]	; (800b7a4 <RCCEx_PLL3_Config+0x15c>)
 800b708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b70a:	4a26      	ldr	r2, [pc, #152]	; (800b7a4 <RCCEx_PLL3_Config+0x15c>)
 800b70c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b710:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b712:	4b24      	ldr	r3, [pc, #144]	; (800b7a4 <RCCEx_PLL3_Config+0x15c>)
 800b714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b716:	4b24      	ldr	r3, [pc, #144]	; (800b7a8 <RCCEx_PLL3_Config+0x160>)
 800b718:	4013      	ands	r3, r2
 800b71a:	687a      	ldr	r2, [r7, #4]
 800b71c:	69d2      	ldr	r2, [r2, #28]
 800b71e:	00d2      	lsls	r2, r2, #3
 800b720:	4920      	ldr	r1, [pc, #128]	; (800b7a4 <RCCEx_PLL3_Config+0x15c>)
 800b722:	4313      	orrs	r3, r2
 800b724:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b726:	4b1f      	ldr	r3, [pc, #124]	; (800b7a4 <RCCEx_PLL3_Config+0x15c>)
 800b728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b72a:	4a1e      	ldr	r2, [pc, #120]	; (800b7a4 <RCCEx_PLL3_Config+0x15c>)
 800b72c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b730:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d106      	bne.n	800b746 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b738:	4b1a      	ldr	r3, [pc, #104]	; (800b7a4 <RCCEx_PLL3_Config+0x15c>)
 800b73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b73c:	4a19      	ldr	r2, [pc, #100]	; (800b7a4 <RCCEx_PLL3_Config+0x15c>)
 800b73e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b742:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b744:	e00f      	b.n	800b766 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d106      	bne.n	800b75a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b74c:	4b15      	ldr	r3, [pc, #84]	; (800b7a4 <RCCEx_PLL3_Config+0x15c>)
 800b74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b750:	4a14      	ldr	r2, [pc, #80]	; (800b7a4 <RCCEx_PLL3_Config+0x15c>)
 800b752:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b756:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b758:	e005      	b.n	800b766 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b75a:	4b12      	ldr	r3, [pc, #72]	; (800b7a4 <RCCEx_PLL3_Config+0x15c>)
 800b75c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b75e:	4a11      	ldr	r2, [pc, #68]	; (800b7a4 <RCCEx_PLL3_Config+0x15c>)
 800b760:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b764:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b766:	4b0f      	ldr	r3, [pc, #60]	; (800b7a4 <RCCEx_PLL3_Config+0x15c>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	4a0e      	ldr	r2, [pc, #56]	; (800b7a4 <RCCEx_PLL3_Config+0x15c>)
 800b76c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b770:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b772:	f7fa f953 	bl	8005a1c <HAL_GetTick>
 800b776:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b778:	e008      	b.n	800b78c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b77a:	f7fa f94f 	bl	8005a1c <HAL_GetTick>
 800b77e:	4602      	mov	r2, r0
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	1ad3      	subs	r3, r2, r3
 800b784:	2b02      	cmp	r3, #2
 800b786:	d901      	bls.n	800b78c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b788:	2303      	movs	r3, #3
 800b78a:	e006      	b.n	800b79a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b78c:	4b05      	ldr	r3, [pc, #20]	; (800b7a4 <RCCEx_PLL3_Config+0x15c>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b794:	2b00      	cmp	r3, #0
 800b796:	d0f0      	beq.n	800b77a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b798:	7bfb      	ldrb	r3, [r7, #15]
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3710      	adds	r7, #16
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}
 800b7a2:	bf00      	nop
 800b7a4:	58024400 	.word	0x58024400
 800b7a8:	ffff0007 	.word	0xffff0007

0800b7ac <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b084      	sub	sp, #16
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d101      	bne.n	800b7be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	e0f1      	b.n	800b9a2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4a78      	ldr	r2, [pc, #480]	; (800b9ac <HAL_SPI_Init+0x200>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d00f      	beq.n	800b7ee <HAL_SPI_Init+0x42>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	4a77      	ldr	r2, [pc, #476]	; (800b9b0 <HAL_SPI_Init+0x204>)
 800b7d4:	4293      	cmp	r3, r2
 800b7d6:	d00a      	beq.n	800b7ee <HAL_SPI_Init+0x42>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4a75      	ldr	r2, [pc, #468]	; (800b9b4 <HAL_SPI_Init+0x208>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d005      	beq.n	800b7ee <HAL_SPI_Init+0x42>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	68db      	ldr	r3, [r3, #12]
 800b7e6:	2b0f      	cmp	r3, #15
 800b7e8:	d901      	bls.n	800b7ee <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	e0d9      	b.n	800b9a2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f000 f8e2 	bl	800b9b8 <SPI_GetPacketSize>
 800b7f4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	4a6c      	ldr	r2, [pc, #432]	; (800b9ac <HAL_SPI_Init+0x200>)
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	d00c      	beq.n	800b81a <HAL_SPI_Init+0x6e>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4a6a      	ldr	r2, [pc, #424]	; (800b9b0 <HAL_SPI_Init+0x204>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d007      	beq.n	800b81a <HAL_SPI_Init+0x6e>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	4a69      	ldr	r2, [pc, #420]	; (800b9b4 <HAL_SPI_Init+0x208>)
 800b810:	4293      	cmp	r3, r2
 800b812:	d002      	beq.n	800b81a <HAL_SPI_Init+0x6e>
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2b08      	cmp	r3, #8
 800b818:	d811      	bhi.n	800b83e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b81e:	4a63      	ldr	r2, [pc, #396]	; (800b9ac <HAL_SPI_Init+0x200>)
 800b820:	4293      	cmp	r3, r2
 800b822:	d009      	beq.n	800b838 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	4a61      	ldr	r2, [pc, #388]	; (800b9b0 <HAL_SPI_Init+0x204>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d004      	beq.n	800b838 <HAL_SPI_Init+0x8c>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	4a60      	ldr	r2, [pc, #384]	; (800b9b4 <HAL_SPI_Init+0x208>)
 800b834:	4293      	cmp	r3, r2
 800b836:	d104      	bne.n	800b842 <HAL_SPI_Init+0x96>
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2b10      	cmp	r3, #16
 800b83c:	d901      	bls.n	800b842 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b83e:	2301      	movs	r3, #1
 800b840:	e0af      	b.n	800b9a2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b848:	b2db      	uxtb	r3, r3
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d106      	bne.n	800b85c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2200      	movs	r2, #0
 800b852:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f7f8 fc5e 	bl	8004118 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2202      	movs	r2, #2
 800b860:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	681a      	ldr	r2, [r3, #0]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f022 0201 	bic.w	r2, r2, #1
 800b872:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	689b      	ldr	r3, [r3, #8]
 800b87a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b87e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	699b      	ldr	r3, [r3, #24]
 800b884:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b888:	d119      	bne.n	800b8be <HAL_SPI_Init+0x112>
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b892:	d103      	bne.n	800b89c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d008      	beq.n	800b8ae <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d10c      	bne.n	800b8be <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b8a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8ac:	d107      	bne.n	800b8be <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	681a      	ldr	r2, [r3, #0]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b8bc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	69da      	ldr	r2, [r3, #28]
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8c6:	431a      	orrs	r2, r3
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	431a      	orrs	r2, r3
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8d0:	ea42 0103 	orr.w	r1, r2, r3
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	68da      	ldr	r2, [r3, #12]
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	430a      	orrs	r2, r1
 800b8de:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e8:	431a      	orrs	r2, r3
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ee:	431a      	orrs	r2, r3
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	699b      	ldr	r3, [r3, #24]
 800b8f4:	431a      	orrs	r2, r3
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	691b      	ldr	r3, [r3, #16]
 800b8fa:	431a      	orrs	r2, r3
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	695b      	ldr	r3, [r3, #20]
 800b900:	431a      	orrs	r2, r3
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6a1b      	ldr	r3, [r3, #32]
 800b906:	431a      	orrs	r2, r3
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	431a      	orrs	r2, r3
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b912:	431a      	orrs	r2, r3
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	689b      	ldr	r3, [r3, #8]
 800b918:	431a      	orrs	r2, r3
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b91e:	ea42 0103 	orr.w	r1, r2, r3
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	430a      	orrs	r2, r1
 800b92c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	685b      	ldr	r3, [r3, #4]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d113      	bne.n	800b95e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	689b      	ldr	r3, [r3, #8]
 800b93c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b948:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	689b      	ldr	r3, [r3, #8]
 800b950:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b95c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f022 0201 	bic.w	r2, r2, #1
 800b96c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	685b      	ldr	r3, [r3, #4]
 800b972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b976:	2b00      	cmp	r3, #0
 800b978:	d00a      	beq.n	800b990 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	68db      	ldr	r3, [r3, #12]
 800b980:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	430a      	orrs	r2, r1
 800b98e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2200      	movs	r2, #0
 800b994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2201      	movs	r2, #1
 800b99c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b9a0:	2300      	movs	r3, #0
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3710      	adds	r7, #16
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}
 800b9aa:	bf00      	nop
 800b9ac:	40013000 	.word	0x40013000
 800b9b0:	40003800 	.word	0x40003800
 800b9b4:	40003c00 	.word	0x40003c00

0800b9b8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b085      	sub	sp, #20
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9c4:	095b      	lsrs	r3, r3, #5
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	68db      	ldr	r3, [r3, #12]
 800b9ce:	3301      	adds	r3, #1
 800b9d0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	3307      	adds	r3, #7
 800b9d6:	08db      	lsrs	r3, r3, #3
 800b9d8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	68fa      	ldr	r2, [r7, #12]
 800b9de:	fb02 f303 	mul.w	r3, r2, r3
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3714      	adds	r7, #20
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ec:	4770      	bx	lr

0800b9ee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b9ee:	b580      	push	{r7, lr}
 800b9f0:	b082      	sub	sp, #8
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d101      	bne.n	800ba00 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	e049      	b.n	800ba94 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba06:	b2db      	uxtb	r3, r3
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d106      	bne.n	800ba1a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f7f9 fa1d 	bl	8004e54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2202      	movs	r2, #2
 800ba1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681a      	ldr	r2, [r3, #0]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	3304      	adds	r3, #4
 800ba2a:	4619      	mov	r1, r3
 800ba2c:	4610      	mov	r0, r2
 800ba2e:	f000 fd71 	bl	800c514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2201      	movs	r2, #1
 800ba36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2201      	movs	r2, #1
 800ba46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2201      	movs	r2, #1
 800ba56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2201      	movs	r2, #1
 800ba5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2201      	movs	r2, #1
 800ba66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2201      	movs	r2, #1
 800ba6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2201      	movs	r2, #1
 800ba76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2201      	movs	r2, #1
 800ba86:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ba92:	2300      	movs	r3, #0
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	3708      	adds	r7, #8
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}

0800ba9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b085      	sub	sp, #20
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	2b01      	cmp	r3, #1
 800baae:	d001      	beq.n	800bab4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bab0:	2301      	movs	r3, #1
 800bab2:	e054      	b.n	800bb5e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2202      	movs	r2, #2
 800bab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	68da      	ldr	r2, [r3, #12]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f042 0201 	orr.w	r2, r2, #1
 800baca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	4a26      	ldr	r2, [pc, #152]	; (800bb6c <HAL_TIM_Base_Start_IT+0xd0>)
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d022      	beq.n	800bb1c <HAL_TIM_Base_Start_IT+0x80>
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bade:	d01d      	beq.n	800bb1c <HAL_TIM_Base_Start_IT+0x80>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	4a22      	ldr	r2, [pc, #136]	; (800bb70 <HAL_TIM_Base_Start_IT+0xd4>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d018      	beq.n	800bb1c <HAL_TIM_Base_Start_IT+0x80>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	4a21      	ldr	r2, [pc, #132]	; (800bb74 <HAL_TIM_Base_Start_IT+0xd8>)
 800baf0:	4293      	cmp	r3, r2
 800baf2:	d013      	beq.n	800bb1c <HAL_TIM_Base_Start_IT+0x80>
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	4a1f      	ldr	r2, [pc, #124]	; (800bb78 <HAL_TIM_Base_Start_IT+0xdc>)
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d00e      	beq.n	800bb1c <HAL_TIM_Base_Start_IT+0x80>
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	4a1e      	ldr	r2, [pc, #120]	; (800bb7c <HAL_TIM_Base_Start_IT+0xe0>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d009      	beq.n	800bb1c <HAL_TIM_Base_Start_IT+0x80>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4a1c      	ldr	r2, [pc, #112]	; (800bb80 <HAL_TIM_Base_Start_IT+0xe4>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d004      	beq.n	800bb1c <HAL_TIM_Base_Start_IT+0x80>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	4a1b      	ldr	r2, [pc, #108]	; (800bb84 <HAL_TIM_Base_Start_IT+0xe8>)
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	d115      	bne.n	800bb48 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	689a      	ldr	r2, [r3, #8]
 800bb22:	4b19      	ldr	r3, [pc, #100]	; (800bb88 <HAL_TIM_Base_Start_IT+0xec>)
 800bb24:	4013      	ands	r3, r2
 800bb26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	2b06      	cmp	r3, #6
 800bb2c:	d015      	beq.n	800bb5a <HAL_TIM_Base_Start_IT+0xbe>
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb34:	d011      	beq.n	800bb5a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	681a      	ldr	r2, [r3, #0]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f042 0201 	orr.w	r2, r2, #1
 800bb44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb46:	e008      	b.n	800bb5a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	681a      	ldr	r2, [r3, #0]
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f042 0201 	orr.w	r2, r2, #1
 800bb56:	601a      	str	r2, [r3, #0]
 800bb58:	e000      	b.n	800bb5c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bb5c:	2300      	movs	r3, #0
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3714      	adds	r7, #20
 800bb62:	46bd      	mov	sp, r7
 800bb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb68:	4770      	bx	lr
 800bb6a:	bf00      	nop
 800bb6c:	40010000 	.word	0x40010000
 800bb70:	40000400 	.word	0x40000400
 800bb74:	40000800 	.word	0x40000800
 800bb78:	40000c00 	.word	0x40000c00
 800bb7c:	40010400 	.word	0x40010400
 800bb80:	40001800 	.word	0x40001800
 800bb84:	40014000 	.word	0x40014000
 800bb88:	00010007 	.word	0x00010007

0800bb8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b082      	sub	sp, #8
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d101      	bne.n	800bb9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	e049      	b.n	800bc32 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bba4:	b2db      	uxtb	r3, r3
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d106      	bne.n	800bbb8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2200      	movs	r2, #0
 800bbae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 f841 	bl	800bc3a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2202      	movs	r2, #2
 800bbbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681a      	ldr	r2, [r3, #0]
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	3304      	adds	r3, #4
 800bbc8:	4619      	mov	r1, r3
 800bbca:	4610      	mov	r0, r2
 800bbcc:	f000 fca2 	bl	800c514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2201      	movs	r2, #1
 800bbdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2201      	movs	r2, #1
 800bbe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2201      	movs	r2, #1
 800bbec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2201      	movs	r2, #1
 800bbfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2201      	movs	r2, #1
 800bc04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2201      	movs	r2, #1
 800bc14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2201      	movs	r2, #1
 800bc24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bc30:	2300      	movs	r3, #0
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3708      	adds	r7, #8
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}

0800bc3a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bc3a:	b480      	push	{r7}
 800bc3c:	b083      	sub	sp, #12
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bc42:	bf00      	nop
 800bc44:	370c      	adds	r7, #12
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr
	...

0800bc50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b084      	sub	sp, #16
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d109      	bne.n	800bc74 <HAL_TIM_PWM_Start+0x24>
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bc66:	b2db      	uxtb	r3, r3
 800bc68:	2b01      	cmp	r3, #1
 800bc6a:	bf14      	ite	ne
 800bc6c:	2301      	movne	r3, #1
 800bc6e:	2300      	moveq	r3, #0
 800bc70:	b2db      	uxtb	r3, r3
 800bc72:	e03c      	b.n	800bcee <HAL_TIM_PWM_Start+0x9e>
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	2b04      	cmp	r3, #4
 800bc78:	d109      	bne.n	800bc8e <HAL_TIM_PWM_Start+0x3e>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bc80:	b2db      	uxtb	r3, r3
 800bc82:	2b01      	cmp	r3, #1
 800bc84:	bf14      	ite	ne
 800bc86:	2301      	movne	r3, #1
 800bc88:	2300      	moveq	r3, #0
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	e02f      	b.n	800bcee <HAL_TIM_PWM_Start+0x9e>
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	2b08      	cmp	r3, #8
 800bc92:	d109      	bne.n	800bca8 <HAL_TIM_PWM_Start+0x58>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bc9a:	b2db      	uxtb	r3, r3
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	bf14      	ite	ne
 800bca0:	2301      	movne	r3, #1
 800bca2:	2300      	moveq	r3, #0
 800bca4:	b2db      	uxtb	r3, r3
 800bca6:	e022      	b.n	800bcee <HAL_TIM_PWM_Start+0x9e>
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	2b0c      	cmp	r3, #12
 800bcac:	d109      	bne.n	800bcc2 <HAL_TIM_PWM_Start+0x72>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bcb4:	b2db      	uxtb	r3, r3
 800bcb6:	2b01      	cmp	r3, #1
 800bcb8:	bf14      	ite	ne
 800bcba:	2301      	movne	r3, #1
 800bcbc:	2300      	moveq	r3, #0
 800bcbe:	b2db      	uxtb	r3, r3
 800bcc0:	e015      	b.n	800bcee <HAL_TIM_PWM_Start+0x9e>
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	2b10      	cmp	r3, #16
 800bcc6:	d109      	bne.n	800bcdc <HAL_TIM_PWM_Start+0x8c>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bcce:	b2db      	uxtb	r3, r3
 800bcd0:	2b01      	cmp	r3, #1
 800bcd2:	bf14      	ite	ne
 800bcd4:	2301      	movne	r3, #1
 800bcd6:	2300      	moveq	r3, #0
 800bcd8:	b2db      	uxtb	r3, r3
 800bcda:	e008      	b.n	800bcee <HAL_TIM_PWM_Start+0x9e>
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bce2:	b2db      	uxtb	r3, r3
 800bce4:	2b01      	cmp	r3, #1
 800bce6:	bf14      	ite	ne
 800bce8:	2301      	movne	r3, #1
 800bcea:	2300      	moveq	r3, #0
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d001      	beq.n	800bcf6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	e0a1      	b.n	800be3a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d104      	bne.n	800bd06 <HAL_TIM_PWM_Start+0xb6>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2202      	movs	r2, #2
 800bd00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bd04:	e023      	b.n	800bd4e <HAL_TIM_PWM_Start+0xfe>
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	2b04      	cmp	r3, #4
 800bd0a:	d104      	bne.n	800bd16 <HAL_TIM_PWM_Start+0xc6>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2202      	movs	r2, #2
 800bd10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bd14:	e01b      	b.n	800bd4e <HAL_TIM_PWM_Start+0xfe>
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	2b08      	cmp	r3, #8
 800bd1a:	d104      	bne.n	800bd26 <HAL_TIM_PWM_Start+0xd6>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2202      	movs	r2, #2
 800bd20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bd24:	e013      	b.n	800bd4e <HAL_TIM_PWM_Start+0xfe>
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	2b0c      	cmp	r3, #12
 800bd2a:	d104      	bne.n	800bd36 <HAL_TIM_PWM_Start+0xe6>
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2202      	movs	r2, #2
 800bd30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bd34:	e00b      	b.n	800bd4e <HAL_TIM_PWM_Start+0xfe>
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	2b10      	cmp	r3, #16
 800bd3a:	d104      	bne.n	800bd46 <HAL_TIM_PWM_Start+0xf6>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2202      	movs	r2, #2
 800bd40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bd44:	e003      	b.n	800bd4e <HAL_TIM_PWM_Start+0xfe>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2202      	movs	r2, #2
 800bd4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	2201      	movs	r2, #1
 800bd54:	6839      	ldr	r1, [r7, #0]
 800bd56:	4618      	mov	r0, r3
 800bd58:	f000 ffea 	bl	800cd30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	4a38      	ldr	r2, [pc, #224]	; (800be44 <HAL_TIM_PWM_Start+0x1f4>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d013      	beq.n	800bd8e <HAL_TIM_PWM_Start+0x13e>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	4a37      	ldr	r2, [pc, #220]	; (800be48 <HAL_TIM_PWM_Start+0x1f8>)
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	d00e      	beq.n	800bd8e <HAL_TIM_PWM_Start+0x13e>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	4a35      	ldr	r2, [pc, #212]	; (800be4c <HAL_TIM_PWM_Start+0x1fc>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	d009      	beq.n	800bd8e <HAL_TIM_PWM_Start+0x13e>
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	4a34      	ldr	r2, [pc, #208]	; (800be50 <HAL_TIM_PWM_Start+0x200>)
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d004      	beq.n	800bd8e <HAL_TIM_PWM_Start+0x13e>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	4a32      	ldr	r2, [pc, #200]	; (800be54 <HAL_TIM_PWM_Start+0x204>)
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	d101      	bne.n	800bd92 <HAL_TIM_PWM_Start+0x142>
 800bd8e:	2301      	movs	r3, #1
 800bd90:	e000      	b.n	800bd94 <HAL_TIM_PWM_Start+0x144>
 800bd92:	2300      	movs	r3, #0
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d007      	beq.n	800bda8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bda6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4a25      	ldr	r2, [pc, #148]	; (800be44 <HAL_TIM_PWM_Start+0x1f4>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d022      	beq.n	800bdf8 <HAL_TIM_PWM_Start+0x1a8>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdba:	d01d      	beq.n	800bdf8 <HAL_TIM_PWM_Start+0x1a8>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4a25      	ldr	r2, [pc, #148]	; (800be58 <HAL_TIM_PWM_Start+0x208>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d018      	beq.n	800bdf8 <HAL_TIM_PWM_Start+0x1a8>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	4a24      	ldr	r2, [pc, #144]	; (800be5c <HAL_TIM_PWM_Start+0x20c>)
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	d013      	beq.n	800bdf8 <HAL_TIM_PWM_Start+0x1a8>
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	4a22      	ldr	r2, [pc, #136]	; (800be60 <HAL_TIM_PWM_Start+0x210>)
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d00e      	beq.n	800bdf8 <HAL_TIM_PWM_Start+0x1a8>
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	4a1a      	ldr	r2, [pc, #104]	; (800be48 <HAL_TIM_PWM_Start+0x1f8>)
 800bde0:	4293      	cmp	r3, r2
 800bde2:	d009      	beq.n	800bdf8 <HAL_TIM_PWM_Start+0x1a8>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	4a1e      	ldr	r2, [pc, #120]	; (800be64 <HAL_TIM_PWM_Start+0x214>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d004      	beq.n	800bdf8 <HAL_TIM_PWM_Start+0x1a8>
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	4a16      	ldr	r2, [pc, #88]	; (800be4c <HAL_TIM_PWM_Start+0x1fc>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d115      	bne.n	800be24 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	689a      	ldr	r2, [r3, #8]
 800bdfe:	4b1a      	ldr	r3, [pc, #104]	; (800be68 <HAL_TIM_PWM_Start+0x218>)
 800be00:	4013      	ands	r3, r2
 800be02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	2b06      	cmp	r3, #6
 800be08:	d015      	beq.n	800be36 <HAL_TIM_PWM_Start+0x1e6>
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be10:	d011      	beq.n	800be36 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	681a      	ldr	r2, [r3, #0]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f042 0201 	orr.w	r2, r2, #1
 800be20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be22:	e008      	b.n	800be36 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	681a      	ldr	r2, [r3, #0]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f042 0201 	orr.w	r2, r2, #1
 800be32:	601a      	str	r2, [r3, #0]
 800be34:	e000      	b.n	800be38 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800be38:	2300      	movs	r3, #0
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3710      	adds	r7, #16
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
 800be42:	bf00      	nop
 800be44:	40010000 	.word	0x40010000
 800be48:	40010400 	.word	0x40010400
 800be4c:	40014000 	.word	0x40014000
 800be50:	40014400 	.word	0x40014400
 800be54:	40014800 	.word	0x40014800
 800be58:	40000400 	.word	0x40000400
 800be5c:	40000800 	.word	0x40000800
 800be60:	40000c00 	.word	0x40000c00
 800be64:	40001800 	.word	0x40001800
 800be68:	00010007 	.word	0x00010007

0800be6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b082      	sub	sp, #8
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	691b      	ldr	r3, [r3, #16]
 800be7a:	f003 0302 	and.w	r3, r3, #2
 800be7e:	2b02      	cmp	r3, #2
 800be80:	d122      	bne.n	800bec8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	68db      	ldr	r3, [r3, #12]
 800be88:	f003 0302 	and.w	r3, r3, #2
 800be8c:	2b02      	cmp	r3, #2
 800be8e:	d11b      	bne.n	800bec8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	f06f 0202 	mvn.w	r2, #2
 800be98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2201      	movs	r2, #1
 800be9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	699b      	ldr	r3, [r3, #24]
 800bea6:	f003 0303 	and.w	r3, r3, #3
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d003      	beq.n	800beb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f000 fb12 	bl	800c4d8 <HAL_TIM_IC_CaptureCallback>
 800beb4:	e005      	b.n	800bec2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f000 fb04 	bl	800c4c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f000 fb15 	bl	800c4ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2200      	movs	r2, #0
 800bec6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	691b      	ldr	r3, [r3, #16]
 800bece:	f003 0304 	and.w	r3, r3, #4
 800bed2:	2b04      	cmp	r3, #4
 800bed4:	d122      	bne.n	800bf1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	68db      	ldr	r3, [r3, #12]
 800bedc:	f003 0304 	and.w	r3, r3, #4
 800bee0:	2b04      	cmp	r3, #4
 800bee2:	d11b      	bne.n	800bf1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f06f 0204 	mvn.w	r2, #4
 800beec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2202      	movs	r2, #2
 800bef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	699b      	ldr	r3, [r3, #24]
 800befa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d003      	beq.n	800bf0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f000 fae8 	bl	800c4d8 <HAL_TIM_IC_CaptureCallback>
 800bf08:	e005      	b.n	800bf16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f000 fada 	bl	800c4c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f000 faeb 	bl	800c4ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	691b      	ldr	r3, [r3, #16]
 800bf22:	f003 0308 	and.w	r3, r3, #8
 800bf26:	2b08      	cmp	r3, #8
 800bf28:	d122      	bne.n	800bf70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	68db      	ldr	r3, [r3, #12]
 800bf30:	f003 0308 	and.w	r3, r3, #8
 800bf34:	2b08      	cmp	r3, #8
 800bf36:	d11b      	bne.n	800bf70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f06f 0208 	mvn.w	r2, #8
 800bf40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2204      	movs	r2, #4
 800bf46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	69db      	ldr	r3, [r3, #28]
 800bf4e:	f003 0303 	and.w	r3, r3, #3
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d003      	beq.n	800bf5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f000 fabe 	bl	800c4d8 <HAL_TIM_IC_CaptureCallback>
 800bf5c:	e005      	b.n	800bf6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 fab0 	bl	800c4c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f000 fac1 	bl	800c4ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	691b      	ldr	r3, [r3, #16]
 800bf76:	f003 0310 	and.w	r3, r3, #16
 800bf7a:	2b10      	cmp	r3, #16
 800bf7c:	d122      	bne.n	800bfc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	68db      	ldr	r3, [r3, #12]
 800bf84:	f003 0310 	and.w	r3, r3, #16
 800bf88:	2b10      	cmp	r3, #16
 800bf8a:	d11b      	bne.n	800bfc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f06f 0210 	mvn.w	r2, #16
 800bf94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2208      	movs	r2, #8
 800bf9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	69db      	ldr	r3, [r3, #28]
 800bfa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d003      	beq.n	800bfb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f000 fa94 	bl	800c4d8 <HAL_TIM_IC_CaptureCallback>
 800bfb0:	e005      	b.n	800bfbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f000 fa86 	bl	800c4c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 fa97 	bl	800c4ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	691b      	ldr	r3, [r3, #16]
 800bfca:	f003 0301 	and.w	r3, r3, #1
 800bfce:	2b01      	cmp	r3, #1
 800bfd0:	d10e      	bne.n	800bff0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	68db      	ldr	r3, [r3, #12]
 800bfd8:	f003 0301 	and.w	r3, r3, #1
 800bfdc:	2b01      	cmp	r3, #1
 800bfde:	d107      	bne.n	800bff0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	f06f 0201 	mvn.w	r2, #1
 800bfe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f7f7 f810 	bl	8003010 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	691b      	ldr	r3, [r3, #16]
 800bff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bffa:	2b80      	cmp	r3, #128	; 0x80
 800bffc:	d10e      	bne.n	800c01c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	68db      	ldr	r3, [r3, #12]
 800c004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c008:	2b80      	cmp	r3, #128	; 0x80
 800c00a:	d107      	bne.n	800c01c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f000 ffc6 	bl	800cfa8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	691b      	ldr	r3, [r3, #16]
 800c022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c02a:	d10e      	bne.n	800c04a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	68db      	ldr	r3, [r3, #12]
 800c032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c036:	2b80      	cmp	r3, #128	; 0x80
 800c038:	d107      	bne.n	800c04a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c042:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f000 ffb9 	bl	800cfbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	691b      	ldr	r3, [r3, #16]
 800c050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c054:	2b40      	cmp	r3, #64	; 0x40
 800c056:	d10e      	bne.n	800c076 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	68db      	ldr	r3, [r3, #12]
 800c05e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c062:	2b40      	cmp	r3, #64	; 0x40
 800c064:	d107      	bne.n	800c076 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c06e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f000 fa45 	bl	800c500 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	691b      	ldr	r3, [r3, #16]
 800c07c:	f003 0320 	and.w	r3, r3, #32
 800c080:	2b20      	cmp	r3, #32
 800c082:	d10e      	bne.n	800c0a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	68db      	ldr	r3, [r3, #12]
 800c08a:	f003 0320 	and.w	r3, r3, #32
 800c08e:	2b20      	cmp	r3, #32
 800c090:	d107      	bne.n	800c0a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	f06f 0220 	mvn.w	r2, #32
 800c09a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f000 ff79 	bl	800cf94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c0a2:	bf00      	nop
 800c0a4:	3708      	adds	r7, #8
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}
	...

0800c0ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b086      	sub	sp, #24
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	60f8      	str	r0, [r7, #12]
 800c0b4:	60b9      	str	r1, [r7, #8]
 800c0b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0c2:	2b01      	cmp	r3, #1
 800c0c4:	d101      	bne.n	800c0ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c0c6:	2302      	movs	r3, #2
 800c0c8:	e0ff      	b.n	800c2ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	2201      	movs	r2, #1
 800c0ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2b14      	cmp	r3, #20
 800c0d6:	f200 80f0 	bhi.w	800c2ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c0da:	a201      	add	r2, pc, #4	; (adr r2, 800c0e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0e0:	0800c135 	.word	0x0800c135
 800c0e4:	0800c2bb 	.word	0x0800c2bb
 800c0e8:	0800c2bb 	.word	0x0800c2bb
 800c0ec:	0800c2bb 	.word	0x0800c2bb
 800c0f0:	0800c175 	.word	0x0800c175
 800c0f4:	0800c2bb 	.word	0x0800c2bb
 800c0f8:	0800c2bb 	.word	0x0800c2bb
 800c0fc:	0800c2bb 	.word	0x0800c2bb
 800c100:	0800c1b7 	.word	0x0800c1b7
 800c104:	0800c2bb 	.word	0x0800c2bb
 800c108:	0800c2bb 	.word	0x0800c2bb
 800c10c:	0800c2bb 	.word	0x0800c2bb
 800c110:	0800c1f7 	.word	0x0800c1f7
 800c114:	0800c2bb 	.word	0x0800c2bb
 800c118:	0800c2bb 	.word	0x0800c2bb
 800c11c:	0800c2bb 	.word	0x0800c2bb
 800c120:	0800c239 	.word	0x0800c239
 800c124:	0800c2bb 	.word	0x0800c2bb
 800c128:	0800c2bb 	.word	0x0800c2bb
 800c12c:	0800c2bb 	.word	0x0800c2bb
 800c130:	0800c279 	.word	0x0800c279
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	68b9      	ldr	r1, [r7, #8]
 800c13a:	4618      	mov	r0, r3
 800c13c:	f000 fa84 	bl	800c648 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	699a      	ldr	r2, [r3, #24]
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f042 0208 	orr.w	r2, r2, #8
 800c14e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	699a      	ldr	r2, [r3, #24]
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f022 0204 	bic.w	r2, r2, #4
 800c15e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	6999      	ldr	r1, [r3, #24]
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	691a      	ldr	r2, [r3, #16]
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	430a      	orrs	r2, r1
 800c170:	619a      	str	r2, [r3, #24]
      break;
 800c172:	e0a5      	b.n	800c2c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	68b9      	ldr	r1, [r7, #8]
 800c17a:	4618      	mov	r0, r3
 800c17c:	f000 faf4 	bl	800c768 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	699a      	ldr	r2, [r3, #24]
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c18e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	699a      	ldr	r2, [r3, #24]
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c19e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	6999      	ldr	r1, [r3, #24]
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	691b      	ldr	r3, [r3, #16]
 800c1aa:	021a      	lsls	r2, r3, #8
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	430a      	orrs	r2, r1
 800c1b2:	619a      	str	r2, [r3, #24]
      break;
 800c1b4:	e084      	b.n	800c2c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	68b9      	ldr	r1, [r7, #8]
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f000 fb5d 	bl	800c87c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	69da      	ldr	r2, [r3, #28]
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f042 0208 	orr.w	r2, r2, #8
 800c1d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	69da      	ldr	r2, [r3, #28]
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f022 0204 	bic.w	r2, r2, #4
 800c1e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	69d9      	ldr	r1, [r3, #28]
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	691a      	ldr	r2, [r3, #16]
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	430a      	orrs	r2, r1
 800c1f2:	61da      	str	r2, [r3, #28]
      break;
 800c1f4:	e064      	b.n	800c2c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	68b9      	ldr	r1, [r7, #8]
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f000 fbc5 	bl	800c98c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	69da      	ldr	r2, [r3, #28]
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	69da      	ldr	r2, [r3, #28]
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	69d9      	ldr	r1, [r3, #28]
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	691b      	ldr	r3, [r3, #16]
 800c22c:	021a      	lsls	r2, r3, #8
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	430a      	orrs	r2, r1
 800c234:	61da      	str	r2, [r3, #28]
      break;
 800c236:	e043      	b.n	800c2c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	68b9      	ldr	r1, [r7, #8]
 800c23e:	4618      	mov	r0, r3
 800c240:	f000 fc0e 	bl	800ca60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	f042 0208 	orr.w	r2, r2, #8
 800c252:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f022 0204 	bic.w	r2, r2, #4
 800c262:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	691a      	ldr	r2, [r3, #16]
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	430a      	orrs	r2, r1
 800c274:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c276:	e023      	b.n	800c2c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	68b9      	ldr	r1, [r7, #8]
 800c27e:	4618      	mov	r0, r3
 800c280:	f000 fc52 	bl	800cb28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c292:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c2a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	691b      	ldr	r3, [r3, #16]
 800c2ae:	021a      	lsls	r2, r3, #8
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	430a      	orrs	r2, r1
 800c2b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c2b8:	e002      	b.n	800c2c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	75fb      	strb	r3, [r7, #23]
      break;
 800c2be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c2c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3718      	adds	r7, #24
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
 800c2d2:	bf00      	nop

0800c2d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b084      	sub	sp, #16
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c2e8:	2b01      	cmp	r3, #1
 800c2ea:	d101      	bne.n	800c2f0 <HAL_TIM_ConfigClockSource+0x1c>
 800c2ec:	2302      	movs	r3, #2
 800c2ee:	e0dc      	b.n	800c4aa <HAL_TIM_ConfigClockSource+0x1d6>
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2201      	movs	r2, #1
 800c2f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2202      	movs	r2, #2
 800c2fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	689b      	ldr	r3, [r3, #8]
 800c306:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c308:	68ba      	ldr	r2, [r7, #8]
 800c30a:	4b6a      	ldr	r3, [pc, #424]	; (800c4b4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c30c:	4013      	ands	r3, r2
 800c30e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c316:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	68ba      	ldr	r2, [r7, #8]
 800c31e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	4a64      	ldr	r2, [pc, #400]	; (800c4b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c326:	4293      	cmp	r3, r2
 800c328:	f000 80a9 	beq.w	800c47e <HAL_TIM_ConfigClockSource+0x1aa>
 800c32c:	4a62      	ldr	r2, [pc, #392]	; (800c4b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c32e:	4293      	cmp	r3, r2
 800c330:	f200 80ae 	bhi.w	800c490 <HAL_TIM_ConfigClockSource+0x1bc>
 800c334:	4a61      	ldr	r2, [pc, #388]	; (800c4bc <HAL_TIM_ConfigClockSource+0x1e8>)
 800c336:	4293      	cmp	r3, r2
 800c338:	f000 80a1 	beq.w	800c47e <HAL_TIM_ConfigClockSource+0x1aa>
 800c33c:	4a5f      	ldr	r2, [pc, #380]	; (800c4bc <HAL_TIM_ConfigClockSource+0x1e8>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	f200 80a6 	bhi.w	800c490 <HAL_TIM_ConfigClockSource+0x1bc>
 800c344:	4a5e      	ldr	r2, [pc, #376]	; (800c4c0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c346:	4293      	cmp	r3, r2
 800c348:	f000 8099 	beq.w	800c47e <HAL_TIM_ConfigClockSource+0x1aa>
 800c34c:	4a5c      	ldr	r2, [pc, #368]	; (800c4c0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c34e:	4293      	cmp	r3, r2
 800c350:	f200 809e 	bhi.w	800c490 <HAL_TIM_ConfigClockSource+0x1bc>
 800c354:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c358:	f000 8091 	beq.w	800c47e <HAL_TIM_ConfigClockSource+0x1aa>
 800c35c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c360:	f200 8096 	bhi.w	800c490 <HAL_TIM_ConfigClockSource+0x1bc>
 800c364:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c368:	f000 8089 	beq.w	800c47e <HAL_TIM_ConfigClockSource+0x1aa>
 800c36c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c370:	f200 808e 	bhi.w	800c490 <HAL_TIM_ConfigClockSource+0x1bc>
 800c374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c378:	d03e      	beq.n	800c3f8 <HAL_TIM_ConfigClockSource+0x124>
 800c37a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c37e:	f200 8087 	bhi.w	800c490 <HAL_TIM_ConfigClockSource+0x1bc>
 800c382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c386:	f000 8086 	beq.w	800c496 <HAL_TIM_ConfigClockSource+0x1c2>
 800c38a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c38e:	d87f      	bhi.n	800c490 <HAL_TIM_ConfigClockSource+0x1bc>
 800c390:	2b70      	cmp	r3, #112	; 0x70
 800c392:	d01a      	beq.n	800c3ca <HAL_TIM_ConfigClockSource+0xf6>
 800c394:	2b70      	cmp	r3, #112	; 0x70
 800c396:	d87b      	bhi.n	800c490 <HAL_TIM_ConfigClockSource+0x1bc>
 800c398:	2b60      	cmp	r3, #96	; 0x60
 800c39a:	d050      	beq.n	800c43e <HAL_TIM_ConfigClockSource+0x16a>
 800c39c:	2b60      	cmp	r3, #96	; 0x60
 800c39e:	d877      	bhi.n	800c490 <HAL_TIM_ConfigClockSource+0x1bc>
 800c3a0:	2b50      	cmp	r3, #80	; 0x50
 800c3a2:	d03c      	beq.n	800c41e <HAL_TIM_ConfigClockSource+0x14a>
 800c3a4:	2b50      	cmp	r3, #80	; 0x50
 800c3a6:	d873      	bhi.n	800c490 <HAL_TIM_ConfigClockSource+0x1bc>
 800c3a8:	2b40      	cmp	r3, #64	; 0x40
 800c3aa:	d058      	beq.n	800c45e <HAL_TIM_ConfigClockSource+0x18a>
 800c3ac:	2b40      	cmp	r3, #64	; 0x40
 800c3ae:	d86f      	bhi.n	800c490 <HAL_TIM_ConfigClockSource+0x1bc>
 800c3b0:	2b30      	cmp	r3, #48	; 0x30
 800c3b2:	d064      	beq.n	800c47e <HAL_TIM_ConfigClockSource+0x1aa>
 800c3b4:	2b30      	cmp	r3, #48	; 0x30
 800c3b6:	d86b      	bhi.n	800c490 <HAL_TIM_ConfigClockSource+0x1bc>
 800c3b8:	2b20      	cmp	r3, #32
 800c3ba:	d060      	beq.n	800c47e <HAL_TIM_ConfigClockSource+0x1aa>
 800c3bc:	2b20      	cmp	r3, #32
 800c3be:	d867      	bhi.n	800c490 <HAL_TIM_ConfigClockSource+0x1bc>
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d05c      	beq.n	800c47e <HAL_TIM_ConfigClockSource+0x1aa>
 800c3c4:	2b10      	cmp	r3, #16
 800c3c6:	d05a      	beq.n	800c47e <HAL_TIM_ConfigClockSource+0x1aa>
 800c3c8:	e062      	b.n	800c490 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6818      	ldr	r0, [r3, #0]
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	6899      	ldr	r1, [r3, #8]
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	685a      	ldr	r2, [r3, #4]
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	68db      	ldr	r3, [r3, #12]
 800c3da:	f000 fc89 	bl	800ccf0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	689b      	ldr	r3, [r3, #8]
 800c3e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c3ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	68ba      	ldr	r2, [r7, #8]
 800c3f4:	609a      	str	r2, [r3, #8]
      break;
 800c3f6:	e04f      	b.n	800c498 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6818      	ldr	r0, [r3, #0]
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	6899      	ldr	r1, [r3, #8]
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	685a      	ldr	r2, [r3, #4]
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	68db      	ldr	r3, [r3, #12]
 800c408:	f000 fc72 	bl	800ccf0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	689a      	ldr	r2, [r3, #8]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c41a:	609a      	str	r2, [r3, #8]
      break;
 800c41c:	e03c      	b.n	800c498 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6818      	ldr	r0, [r3, #0]
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	6859      	ldr	r1, [r3, #4]
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	68db      	ldr	r3, [r3, #12]
 800c42a:	461a      	mov	r2, r3
 800c42c:	f000 fbe2 	bl	800cbf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	2150      	movs	r1, #80	; 0x50
 800c436:	4618      	mov	r0, r3
 800c438:	f000 fc3c 	bl	800ccb4 <TIM_ITRx_SetConfig>
      break;
 800c43c:	e02c      	b.n	800c498 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6818      	ldr	r0, [r3, #0]
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	6859      	ldr	r1, [r3, #4]
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	68db      	ldr	r3, [r3, #12]
 800c44a:	461a      	mov	r2, r3
 800c44c:	f000 fc01 	bl	800cc52 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	2160      	movs	r1, #96	; 0x60
 800c456:	4618      	mov	r0, r3
 800c458:	f000 fc2c 	bl	800ccb4 <TIM_ITRx_SetConfig>
      break;
 800c45c:	e01c      	b.n	800c498 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6818      	ldr	r0, [r3, #0]
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	6859      	ldr	r1, [r3, #4]
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	68db      	ldr	r3, [r3, #12]
 800c46a:	461a      	mov	r2, r3
 800c46c:	f000 fbc2 	bl	800cbf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	2140      	movs	r1, #64	; 0x40
 800c476:	4618      	mov	r0, r3
 800c478:	f000 fc1c 	bl	800ccb4 <TIM_ITRx_SetConfig>
      break;
 800c47c:	e00c      	b.n	800c498 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681a      	ldr	r2, [r3, #0]
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	4619      	mov	r1, r3
 800c488:	4610      	mov	r0, r2
 800c48a:	f000 fc13 	bl	800ccb4 <TIM_ITRx_SetConfig>
      break;
 800c48e:	e003      	b.n	800c498 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c490:	2301      	movs	r3, #1
 800c492:	73fb      	strb	r3, [r7, #15]
      break;
 800c494:	e000      	b.n	800c498 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c496:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2201      	movs	r2, #1
 800c49c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c4a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3710      	adds	r7, #16
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}
 800c4b2:	bf00      	nop
 800c4b4:	ffceff88 	.word	0xffceff88
 800c4b8:	00100040 	.word	0x00100040
 800c4bc:	00100030 	.word	0x00100030
 800c4c0:	00100020 	.word	0x00100020

0800c4c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b083      	sub	sp, #12
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c4cc:	bf00      	nop
 800c4ce:	370c      	adds	r7, #12
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr

0800c4d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b083      	sub	sp, #12
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c4e0:	bf00      	nop
 800c4e2:	370c      	adds	r7, #12
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ea:	4770      	bx	lr

0800c4ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b083      	sub	sp, #12
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c4f4:	bf00      	nop
 800c4f6:	370c      	adds	r7, #12
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fe:	4770      	bx	lr

0800c500 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c500:	b480      	push	{r7}
 800c502:	b083      	sub	sp, #12
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c508:	bf00      	nop
 800c50a:	370c      	adds	r7, #12
 800c50c:	46bd      	mov	sp, r7
 800c50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c512:	4770      	bx	lr

0800c514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c514:	b480      	push	{r7}
 800c516:	b085      	sub	sp, #20
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	4a40      	ldr	r2, [pc, #256]	; (800c628 <TIM_Base_SetConfig+0x114>)
 800c528:	4293      	cmp	r3, r2
 800c52a:	d013      	beq.n	800c554 <TIM_Base_SetConfig+0x40>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c532:	d00f      	beq.n	800c554 <TIM_Base_SetConfig+0x40>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	4a3d      	ldr	r2, [pc, #244]	; (800c62c <TIM_Base_SetConfig+0x118>)
 800c538:	4293      	cmp	r3, r2
 800c53a:	d00b      	beq.n	800c554 <TIM_Base_SetConfig+0x40>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	4a3c      	ldr	r2, [pc, #240]	; (800c630 <TIM_Base_SetConfig+0x11c>)
 800c540:	4293      	cmp	r3, r2
 800c542:	d007      	beq.n	800c554 <TIM_Base_SetConfig+0x40>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	4a3b      	ldr	r2, [pc, #236]	; (800c634 <TIM_Base_SetConfig+0x120>)
 800c548:	4293      	cmp	r3, r2
 800c54a:	d003      	beq.n	800c554 <TIM_Base_SetConfig+0x40>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	4a3a      	ldr	r2, [pc, #232]	; (800c638 <TIM_Base_SetConfig+0x124>)
 800c550:	4293      	cmp	r3, r2
 800c552:	d108      	bne.n	800c566 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c55a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	685b      	ldr	r3, [r3, #4]
 800c560:	68fa      	ldr	r2, [r7, #12]
 800c562:	4313      	orrs	r3, r2
 800c564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	4a2f      	ldr	r2, [pc, #188]	; (800c628 <TIM_Base_SetConfig+0x114>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d01f      	beq.n	800c5ae <TIM_Base_SetConfig+0x9a>
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c574:	d01b      	beq.n	800c5ae <TIM_Base_SetConfig+0x9a>
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	4a2c      	ldr	r2, [pc, #176]	; (800c62c <TIM_Base_SetConfig+0x118>)
 800c57a:	4293      	cmp	r3, r2
 800c57c:	d017      	beq.n	800c5ae <TIM_Base_SetConfig+0x9a>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	4a2b      	ldr	r2, [pc, #172]	; (800c630 <TIM_Base_SetConfig+0x11c>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d013      	beq.n	800c5ae <TIM_Base_SetConfig+0x9a>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	4a2a      	ldr	r2, [pc, #168]	; (800c634 <TIM_Base_SetConfig+0x120>)
 800c58a:	4293      	cmp	r3, r2
 800c58c:	d00f      	beq.n	800c5ae <TIM_Base_SetConfig+0x9a>
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	4a29      	ldr	r2, [pc, #164]	; (800c638 <TIM_Base_SetConfig+0x124>)
 800c592:	4293      	cmp	r3, r2
 800c594:	d00b      	beq.n	800c5ae <TIM_Base_SetConfig+0x9a>
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	4a28      	ldr	r2, [pc, #160]	; (800c63c <TIM_Base_SetConfig+0x128>)
 800c59a:	4293      	cmp	r3, r2
 800c59c:	d007      	beq.n	800c5ae <TIM_Base_SetConfig+0x9a>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	4a27      	ldr	r2, [pc, #156]	; (800c640 <TIM_Base_SetConfig+0x12c>)
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d003      	beq.n	800c5ae <TIM_Base_SetConfig+0x9a>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	4a26      	ldr	r2, [pc, #152]	; (800c644 <TIM_Base_SetConfig+0x130>)
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	d108      	bne.n	800c5c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c5b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	68db      	ldr	r3, [r3, #12]
 800c5ba:	68fa      	ldr	r2, [r7, #12]
 800c5bc:	4313      	orrs	r3, r2
 800c5be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	695b      	ldr	r3, [r3, #20]
 800c5ca:	4313      	orrs	r3, r2
 800c5cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	68fa      	ldr	r2, [r7, #12]
 800c5d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	689a      	ldr	r2, [r3, #8]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	681a      	ldr	r2, [r3, #0]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	4a10      	ldr	r2, [pc, #64]	; (800c628 <TIM_Base_SetConfig+0x114>)
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d00f      	beq.n	800c60c <TIM_Base_SetConfig+0xf8>
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	4a12      	ldr	r2, [pc, #72]	; (800c638 <TIM_Base_SetConfig+0x124>)
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	d00b      	beq.n	800c60c <TIM_Base_SetConfig+0xf8>
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	4a11      	ldr	r2, [pc, #68]	; (800c63c <TIM_Base_SetConfig+0x128>)
 800c5f8:	4293      	cmp	r3, r2
 800c5fa:	d007      	beq.n	800c60c <TIM_Base_SetConfig+0xf8>
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	4a10      	ldr	r2, [pc, #64]	; (800c640 <TIM_Base_SetConfig+0x12c>)
 800c600:	4293      	cmp	r3, r2
 800c602:	d003      	beq.n	800c60c <TIM_Base_SetConfig+0xf8>
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	4a0f      	ldr	r2, [pc, #60]	; (800c644 <TIM_Base_SetConfig+0x130>)
 800c608:	4293      	cmp	r3, r2
 800c60a:	d103      	bne.n	800c614 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	691a      	ldr	r2, [r3, #16]
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2201      	movs	r2, #1
 800c618:	615a      	str	r2, [r3, #20]
}
 800c61a:	bf00      	nop
 800c61c:	3714      	adds	r7, #20
 800c61e:	46bd      	mov	sp, r7
 800c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c624:	4770      	bx	lr
 800c626:	bf00      	nop
 800c628:	40010000 	.word	0x40010000
 800c62c:	40000400 	.word	0x40000400
 800c630:	40000800 	.word	0x40000800
 800c634:	40000c00 	.word	0x40000c00
 800c638:	40010400 	.word	0x40010400
 800c63c:	40014000 	.word	0x40014000
 800c640:	40014400 	.word	0x40014400
 800c644:	40014800 	.word	0x40014800

0800c648 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c648:	b480      	push	{r7}
 800c64a:	b087      	sub	sp, #28
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6a1b      	ldr	r3, [r3, #32]
 800c656:	f023 0201 	bic.w	r2, r3, #1
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6a1b      	ldr	r3, [r3, #32]
 800c662:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	685b      	ldr	r3, [r3, #4]
 800c668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	699b      	ldr	r3, [r3, #24]
 800c66e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c670:	68fa      	ldr	r2, [r7, #12]
 800c672:	4b37      	ldr	r3, [pc, #220]	; (800c750 <TIM_OC1_SetConfig+0x108>)
 800c674:	4013      	ands	r3, r2
 800c676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	f023 0303 	bic.w	r3, r3, #3
 800c67e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	68fa      	ldr	r2, [r7, #12]
 800c686:	4313      	orrs	r3, r2
 800c688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	f023 0302 	bic.w	r3, r3, #2
 800c690:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	689b      	ldr	r3, [r3, #8]
 800c696:	697a      	ldr	r2, [r7, #20]
 800c698:	4313      	orrs	r3, r2
 800c69a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	4a2d      	ldr	r2, [pc, #180]	; (800c754 <TIM_OC1_SetConfig+0x10c>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d00f      	beq.n	800c6c4 <TIM_OC1_SetConfig+0x7c>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	4a2c      	ldr	r2, [pc, #176]	; (800c758 <TIM_OC1_SetConfig+0x110>)
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	d00b      	beq.n	800c6c4 <TIM_OC1_SetConfig+0x7c>
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	4a2b      	ldr	r2, [pc, #172]	; (800c75c <TIM_OC1_SetConfig+0x114>)
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d007      	beq.n	800c6c4 <TIM_OC1_SetConfig+0x7c>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	4a2a      	ldr	r2, [pc, #168]	; (800c760 <TIM_OC1_SetConfig+0x118>)
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	d003      	beq.n	800c6c4 <TIM_OC1_SetConfig+0x7c>
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	4a29      	ldr	r2, [pc, #164]	; (800c764 <TIM_OC1_SetConfig+0x11c>)
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d10c      	bne.n	800c6de <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	f023 0308 	bic.w	r3, r3, #8
 800c6ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	68db      	ldr	r3, [r3, #12]
 800c6d0:	697a      	ldr	r2, [r7, #20]
 800c6d2:	4313      	orrs	r3, r2
 800c6d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	f023 0304 	bic.w	r3, r3, #4
 800c6dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	4a1c      	ldr	r2, [pc, #112]	; (800c754 <TIM_OC1_SetConfig+0x10c>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d00f      	beq.n	800c706 <TIM_OC1_SetConfig+0xbe>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	4a1b      	ldr	r2, [pc, #108]	; (800c758 <TIM_OC1_SetConfig+0x110>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d00b      	beq.n	800c706 <TIM_OC1_SetConfig+0xbe>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	4a1a      	ldr	r2, [pc, #104]	; (800c75c <TIM_OC1_SetConfig+0x114>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d007      	beq.n	800c706 <TIM_OC1_SetConfig+0xbe>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	4a19      	ldr	r2, [pc, #100]	; (800c760 <TIM_OC1_SetConfig+0x118>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d003      	beq.n	800c706 <TIM_OC1_SetConfig+0xbe>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	4a18      	ldr	r2, [pc, #96]	; (800c764 <TIM_OC1_SetConfig+0x11c>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d111      	bne.n	800c72a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c706:	693b      	ldr	r3, [r7, #16]
 800c708:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c70c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c714:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	695b      	ldr	r3, [r3, #20]
 800c71a:	693a      	ldr	r2, [r7, #16]
 800c71c:	4313      	orrs	r3, r2
 800c71e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	699b      	ldr	r3, [r3, #24]
 800c724:	693a      	ldr	r2, [r7, #16]
 800c726:	4313      	orrs	r3, r2
 800c728:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	693a      	ldr	r2, [r7, #16]
 800c72e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	68fa      	ldr	r2, [r7, #12]
 800c734:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	685a      	ldr	r2, [r3, #4]
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	697a      	ldr	r2, [r7, #20]
 800c742:	621a      	str	r2, [r3, #32]
}
 800c744:	bf00      	nop
 800c746:	371c      	adds	r7, #28
 800c748:	46bd      	mov	sp, r7
 800c74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74e:	4770      	bx	lr
 800c750:	fffeff8f 	.word	0xfffeff8f
 800c754:	40010000 	.word	0x40010000
 800c758:	40010400 	.word	0x40010400
 800c75c:	40014000 	.word	0x40014000
 800c760:	40014400 	.word	0x40014400
 800c764:	40014800 	.word	0x40014800

0800c768 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c768:	b480      	push	{r7}
 800c76a:	b087      	sub	sp, #28
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6a1b      	ldr	r3, [r3, #32]
 800c776:	f023 0210 	bic.w	r2, r3, #16
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6a1b      	ldr	r3, [r3, #32]
 800c782:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	685b      	ldr	r3, [r3, #4]
 800c788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	699b      	ldr	r3, [r3, #24]
 800c78e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c790:	68fa      	ldr	r2, [r7, #12]
 800c792:	4b34      	ldr	r3, [pc, #208]	; (800c864 <TIM_OC2_SetConfig+0xfc>)
 800c794:	4013      	ands	r3, r2
 800c796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c79e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	021b      	lsls	r3, r3, #8
 800c7a6:	68fa      	ldr	r2, [r7, #12]
 800c7a8:	4313      	orrs	r3, r2
 800c7aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	f023 0320 	bic.w	r3, r3, #32
 800c7b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	689b      	ldr	r3, [r3, #8]
 800c7b8:	011b      	lsls	r3, r3, #4
 800c7ba:	697a      	ldr	r2, [r7, #20]
 800c7bc:	4313      	orrs	r3, r2
 800c7be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	4a29      	ldr	r2, [pc, #164]	; (800c868 <TIM_OC2_SetConfig+0x100>)
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d003      	beq.n	800c7d0 <TIM_OC2_SetConfig+0x68>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	4a28      	ldr	r2, [pc, #160]	; (800c86c <TIM_OC2_SetConfig+0x104>)
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	d10d      	bne.n	800c7ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c7d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	68db      	ldr	r3, [r3, #12]
 800c7dc:	011b      	lsls	r3, r3, #4
 800c7de:	697a      	ldr	r2, [r7, #20]
 800c7e0:	4313      	orrs	r3, r2
 800c7e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	4a1e      	ldr	r2, [pc, #120]	; (800c868 <TIM_OC2_SetConfig+0x100>)
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	d00f      	beq.n	800c814 <TIM_OC2_SetConfig+0xac>
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	4a1d      	ldr	r2, [pc, #116]	; (800c86c <TIM_OC2_SetConfig+0x104>)
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d00b      	beq.n	800c814 <TIM_OC2_SetConfig+0xac>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	4a1c      	ldr	r2, [pc, #112]	; (800c870 <TIM_OC2_SetConfig+0x108>)
 800c800:	4293      	cmp	r3, r2
 800c802:	d007      	beq.n	800c814 <TIM_OC2_SetConfig+0xac>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	4a1b      	ldr	r2, [pc, #108]	; (800c874 <TIM_OC2_SetConfig+0x10c>)
 800c808:	4293      	cmp	r3, r2
 800c80a:	d003      	beq.n	800c814 <TIM_OC2_SetConfig+0xac>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	4a1a      	ldr	r2, [pc, #104]	; (800c878 <TIM_OC2_SetConfig+0x110>)
 800c810:	4293      	cmp	r3, r2
 800c812:	d113      	bne.n	800c83c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c814:	693b      	ldr	r3, [r7, #16]
 800c816:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c81a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c822:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	695b      	ldr	r3, [r3, #20]
 800c828:	009b      	lsls	r3, r3, #2
 800c82a:	693a      	ldr	r2, [r7, #16]
 800c82c:	4313      	orrs	r3, r2
 800c82e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	699b      	ldr	r3, [r3, #24]
 800c834:	009b      	lsls	r3, r3, #2
 800c836:	693a      	ldr	r2, [r7, #16]
 800c838:	4313      	orrs	r3, r2
 800c83a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	693a      	ldr	r2, [r7, #16]
 800c840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	68fa      	ldr	r2, [r7, #12]
 800c846:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	685a      	ldr	r2, [r3, #4]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	697a      	ldr	r2, [r7, #20]
 800c854:	621a      	str	r2, [r3, #32]
}
 800c856:	bf00      	nop
 800c858:	371c      	adds	r7, #28
 800c85a:	46bd      	mov	sp, r7
 800c85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c860:	4770      	bx	lr
 800c862:	bf00      	nop
 800c864:	feff8fff 	.word	0xfeff8fff
 800c868:	40010000 	.word	0x40010000
 800c86c:	40010400 	.word	0x40010400
 800c870:	40014000 	.word	0x40014000
 800c874:	40014400 	.word	0x40014400
 800c878:	40014800 	.word	0x40014800

0800c87c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c87c:	b480      	push	{r7}
 800c87e:	b087      	sub	sp, #28
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6a1b      	ldr	r3, [r3, #32]
 800c88a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6a1b      	ldr	r3, [r3, #32]
 800c896:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	685b      	ldr	r3, [r3, #4]
 800c89c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	69db      	ldr	r3, [r3, #28]
 800c8a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c8a4:	68fa      	ldr	r2, [r7, #12]
 800c8a6:	4b33      	ldr	r3, [pc, #204]	; (800c974 <TIM_OC3_SetConfig+0xf8>)
 800c8a8:	4013      	ands	r3, r2
 800c8aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	f023 0303 	bic.w	r3, r3, #3
 800c8b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	68fa      	ldr	r2, [r7, #12]
 800c8ba:	4313      	orrs	r3, r2
 800c8bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c8c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	689b      	ldr	r3, [r3, #8]
 800c8ca:	021b      	lsls	r3, r3, #8
 800c8cc:	697a      	ldr	r2, [r7, #20]
 800c8ce:	4313      	orrs	r3, r2
 800c8d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	4a28      	ldr	r2, [pc, #160]	; (800c978 <TIM_OC3_SetConfig+0xfc>)
 800c8d6:	4293      	cmp	r3, r2
 800c8d8:	d003      	beq.n	800c8e2 <TIM_OC3_SetConfig+0x66>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	4a27      	ldr	r2, [pc, #156]	; (800c97c <TIM_OC3_SetConfig+0x100>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d10d      	bne.n	800c8fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c8e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	68db      	ldr	r3, [r3, #12]
 800c8ee:	021b      	lsls	r3, r3, #8
 800c8f0:	697a      	ldr	r2, [r7, #20]
 800c8f2:	4313      	orrs	r3, r2
 800c8f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c8fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	4a1d      	ldr	r2, [pc, #116]	; (800c978 <TIM_OC3_SetConfig+0xfc>)
 800c902:	4293      	cmp	r3, r2
 800c904:	d00f      	beq.n	800c926 <TIM_OC3_SetConfig+0xaa>
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	4a1c      	ldr	r2, [pc, #112]	; (800c97c <TIM_OC3_SetConfig+0x100>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d00b      	beq.n	800c926 <TIM_OC3_SetConfig+0xaa>
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	4a1b      	ldr	r2, [pc, #108]	; (800c980 <TIM_OC3_SetConfig+0x104>)
 800c912:	4293      	cmp	r3, r2
 800c914:	d007      	beq.n	800c926 <TIM_OC3_SetConfig+0xaa>
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	4a1a      	ldr	r2, [pc, #104]	; (800c984 <TIM_OC3_SetConfig+0x108>)
 800c91a:	4293      	cmp	r3, r2
 800c91c:	d003      	beq.n	800c926 <TIM_OC3_SetConfig+0xaa>
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	4a19      	ldr	r2, [pc, #100]	; (800c988 <TIM_OC3_SetConfig+0x10c>)
 800c922:	4293      	cmp	r3, r2
 800c924:	d113      	bne.n	800c94e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c92c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c934:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	695b      	ldr	r3, [r3, #20]
 800c93a:	011b      	lsls	r3, r3, #4
 800c93c:	693a      	ldr	r2, [r7, #16]
 800c93e:	4313      	orrs	r3, r2
 800c940:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	699b      	ldr	r3, [r3, #24]
 800c946:	011b      	lsls	r3, r3, #4
 800c948:	693a      	ldr	r2, [r7, #16]
 800c94a:	4313      	orrs	r3, r2
 800c94c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	693a      	ldr	r2, [r7, #16]
 800c952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	68fa      	ldr	r2, [r7, #12]
 800c958:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	685a      	ldr	r2, [r3, #4]
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	697a      	ldr	r2, [r7, #20]
 800c966:	621a      	str	r2, [r3, #32]
}
 800c968:	bf00      	nop
 800c96a:	371c      	adds	r7, #28
 800c96c:	46bd      	mov	sp, r7
 800c96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c972:	4770      	bx	lr
 800c974:	fffeff8f 	.word	0xfffeff8f
 800c978:	40010000 	.word	0x40010000
 800c97c:	40010400 	.word	0x40010400
 800c980:	40014000 	.word	0x40014000
 800c984:	40014400 	.word	0x40014400
 800c988:	40014800 	.word	0x40014800

0800c98c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c98c:	b480      	push	{r7}
 800c98e:	b087      	sub	sp, #28
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6a1b      	ldr	r3, [r3, #32]
 800c99a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6a1b      	ldr	r3, [r3, #32]
 800c9a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	685b      	ldr	r3, [r3, #4]
 800c9ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	69db      	ldr	r3, [r3, #28]
 800c9b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c9b4:	68fa      	ldr	r2, [r7, #12]
 800c9b6:	4b24      	ldr	r3, [pc, #144]	; (800ca48 <TIM_OC4_SetConfig+0xbc>)
 800c9b8:	4013      	ands	r3, r2
 800c9ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	021b      	lsls	r3, r3, #8
 800c9ca:	68fa      	ldr	r2, [r7, #12]
 800c9cc:	4313      	orrs	r3, r2
 800c9ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c9d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	689b      	ldr	r3, [r3, #8]
 800c9dc:	031b      	lsls	r3, r3, #12
 800c9de:	693a      	ldr	r2, [r7, #16]
 800c9e0:	4313      	orrs	r3, r2
 800c9e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	4a19      	ldr	r2, [pc, #100]	; (800ca4c <TIM_OC4_SetConfig+0xc0>)
 800c9e8:	4293      	cmp	r3, r2
 800c9ea:	d00f      	beq.n	800ca0c <TIM_OC4_SetConfig+0x80>
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	4a18      	ldr	r2, [pc, #96]	; (800ca50 <TIM_OC4_SetConfig+0xc4>)
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	d00b      	beq.n	800ca0c <TIM_OC4_SetConfig+0x80>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	4a17      	ldr	r2, [pc, #92]	; (800ca54 <TIM_OC4_SetConfig+0xc8>)
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	d007      	beq.n	800ca0c <TIM_OC4_SetConfig+0x80>
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	4a16      	ldr	r2, [pc, #88]	; (800ca58 <TIM_OC4_SetConfig+0xcc>)
 800ca00:	4293      	cmp	r3, r2
 800ca02:	d003      	beq.n	800ca0c <TIM_OC4_SetConfig+0x80>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	4a15      	ldr	r2, [pc, #84]	; (800ca5c <TIM_OC4_SetConfig+0xd0>)
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d109      	bne.n	800ca20 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ca12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	695b      	ldr	r3, [r3, #20]
 800ca18:	019b      	lsls	r3, r3, #6
 800ca1a:	697a      	ldr	r2, [r7, #20]
 800ca1c:	4313      	orrs	r3, r2
 800ca1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	697a      	ldr	r2, [r7, #20]
 800ca24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	68fa      	ldr	r2, [r7, #12]
 800ca2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	685a      	ldr	r2, [r3, #4]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	693a      	ldr	r2, [r7, #16]
 800ca38:	621a      	str	r2, [r3, #32]
}
 800ca3a:	bf00      	nop
 800ca3c:	371c      	adds	r7, #28
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca44:	4770      	bx	lr
 800ca46:	bf00      	nop
 800ca48:	feff8fff 	.word	0xfeff8fff
 800ca4c:	40010000 	.word	0x40010000
 800ca50:	40010400 	.word	0x40010400
 800ca54:	40014000 	.word	0x40014000
 800ca58:	40014400 	.word	0x40014400
 800ca5c:	40014800 	.word	0x40014800

0800ca60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ca60:	b480      	push	{r7}
 800ca62:	b087      	sub	sp, #28
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
 800ca68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6a1b      	ldr	r3, [r3, #32]
 800ca6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6a1b      	ldr	r3, [r3, #32]
 800ca7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	685b      	ldr	r3, [r3, #4]
 800ca80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ca88:	68fa      	ldr	r2, [r7, #12]
 800ca8a:	4b21      	ldr	r3, [pc, #132]	; (800cb10 <TIM_OC5_SetConfig+0xb0>)
 800ca8c:	4013      	ands	r3, r2
 800ca8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	68fa      	ldr	r2, [r7, #12]
 800ca96:	4313      	orrs	r3, r2
 800ca98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800caa0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	689b      	ldr	r3, [r3, #8]
 800caa6:	041b      	lsls	r3, r3, #16
 800caa8:	693a      	ldr	r2, [r7, #16]
 800caaa:	4313      	orrs	r3, r2
 800caac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	4a18      	ldr	r2, [pc, #96]	; (800cb14 <TIM_OC5_SetConfig+0xb4>)
 800cab2:	4293      	cmp	r3, r2
 800cab4:	d00f      	beq.n	800cad6 <TIM_OC5_SetConfig+0x76>
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	4a17      	ldr	r2, [pc, #92]	; (800cb18 <TIM_OC5_SetConfig+0xb8>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d00b      	beq.n	800cad6 <TIM_OC5_SetConfig+0x76>
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	4a16      	ldr	r2, [pc, #88]	; (800cb1c <TIM_OC5_SetConfig+0xbc>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d007      	beq.n	800cad6 <TIM_OC5_SetConfig+0x76>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	4a15      	ldr	r2, [pc, #84]	; (800cb20 <TIM_OC5_SetConfig+0xc0>)
 800caca:	4293      	cmp	r3, r2
 800cacc:	d003      	beq.n	800cad6 <TIM_OC5_SetConfig+0x76>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	4a14      	ldr	r2, [pc, #80]	; (800cb24 <TIM_OC5_SetConfig+0xc4>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d109      	bne.n	800caea <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cad6:	697b      	ldr	r3, [r7, #20]
 800cad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cadc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	695b      	ldr	r3, [r3, #20]
 800cae2:	021b      	lsls	r3, r3, #8
 800cae4:	697a      	ldr	r2, [r7, #20]
 800cae6:	4313      	orrs	r3, r2
 800cae8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	697a      	ldr	r2, [r7, #20]
 800caee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	68fa      	ldr	r2, [r7, #12]
 800caf4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	685a      	ldr	r2, [r3, #4]
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	693a      	ldr	r2, [r7, #16]
 800cb02:	621a      	str	r2, [r3, #32]
}
 800cb04:	bf00      	nop
 800cb06:	371c      	adds	r7, #28
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0e:	4770      	bx	lr
 800cb10:	fffeff8f 	.word	0xfffeff8f
 800cb14:	40010000 	.word	0x40010000
 800cb18:	40010400 	.word	0x40010400
 800cb1c:	40014000 	.word	0x40014000
 800cb20:	40014400 	.word	0x40014400
 800cb24:	40014800 	.word	0x40014800

0800cb28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b087      	sub	sp, #28
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
 800cb30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6a1b      	ldr	r3, [r3, #32]
 800cb36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6a1b      	ldr	r3, [r3, #32]
 800cb42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cb50:	68fa      	ldr	r2, [r7, #12]
 800cb52:	4b22      	ldr	r3, [pc, #136]	; (800cbdc <TIM_OC6_SetConfig+0xb4>)
 800cb54:	4013      	ands	r3, r2
 800cb56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	021b      	lsls	r3, r3, #8
 800cb5e:	68fa      	ldr	r2, [r7, #12]
 800cb60:	4313      	orrs	r3, r2
 800cb62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cb64:	693b      	ldr	r3, [r7, #16]
 800cb66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cb6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	689b      	ldr	r3, [r3, #8]
 800cb70:	051b      	lsls	r3, r3, #20
 800cb72:	693a      	ldr	r2, [r7, #16]
 800cb74:	4313      	orrs	r3, r2
 800cb76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	4a19      	ldr	r2, [pc, #100]	; (800cbe0 <TIM_OC6_SetConfig+0xb8>)
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	d00f      	beq.n	800cba0 <TIM_OC6_SetConfig+0x78>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	4a18      	ldr	r2, [pc, #96]	; (800cbe4 <TIM_OC6_SetConfig+0xbc>)
 800cb84:	4293      	cmp	r3, r2
 800cb86:	d00b      	beq.n	800cba0 <TIM_OC6_SetConfig+0x78>
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	4a17      	ldr	r2, [pc, #92]	; (800cbe8 <TIM_OC6_SetConfig+0xc0>)
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d007      	beq.n	800cba0 <TIM_OC6_SetConfig+0x78>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	4a16      	ldr	r2, [pc, #88]	; (800cbec <TIM_OC6_SetConfig+0xc4>)
 800cb94:	4293      	cmp	r3, r2
 800cb96:	d003      	beq.n	800cba0 <TIM_OC6_SetConfig+0x78>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	4a15      	ldr	r2, [pc, #84]	; (800cbf0 <TIM_OC6_SetConfig+0xc8>)
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	d109      	bne.n	800cbb4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cba6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	695b      	ldr	r3, [r3, #20]
 800cbac:	029b      	lsls	r3, r3, #10
 800cbae:	697a      	ldr	r2, [r7, #20]
 800cbb0:	4313      	orrs	r3, r2
 800cbb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	697a      	ldr	r2, [r7, #20]
 800cbb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	68fa      	ldr	r2, [r7, #12]
 800cbbe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	685a      	ldr	r2, [r3, #4]
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	693a      	ldr	r2, [r7, #16]
 800cbcc:	621a      	str	r2, [r3, #32]
}
 800cbce:	bf00      	nop
 800cbd0:	371c      	adds	r7, #28
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd8:	4770      	bx	lr
 800cbda:	bf00      	nop
 800cbdc:	feff8fff 	.word	0xfeff8fff
 800cbe0:	40010000 	.word	0x40010000
 800cbe4:	40010400 	.word	0x40010400
 800cbe8:	40014000 	.word	0x40014000
 800cbec:	40014400 	.word	0x40014400
 800cbf0:	40014800 	.word	0x40014800

0800cbf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b087      	sub	sp, #28
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	60f8      	str	r0, [r7, #12]
 800cbfc:	60b9      	str	r1, [r7, #8]
 800cbfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	6a1b      	ldr	r3, [r3, #32]
 800cc04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	6a1b      	ldr	r3, [r3, #32]
 800cc0a:	f023 0201 	bic.w	r2, r3, #1
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	699b      	ldr	r3, [r3, #24]
 800cc16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cc1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	011b      	lsls	r3, r3, #4
 800cc24:	693a      	ldr	r2, [r7, #16]
 800cc26:	4313      	orrs	r3, r2
 800cc28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	f023 030a 	bic.w	r3, r3, #10
 800cc30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cc32:	697a      	ldr	r2, [r7, #20]
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	4313      	orrs	r3, r2
 800cc38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	693a      	ldr	r2, [r7, #16]
 800cc3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	697a      	ldr	r2, [r7, #20]
 800cc44:	621a      	str	r2, [r3, #32]
}
 800cc46:	bf00      	nop
 800cc48:	371c      	adds	r7, #28
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc50:	4770      	bx	lr

0800cc52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc52:	b480      	push	{r7}
 800cc54:	b087      	sub	sp, #28
 800cc56:	af00      	add	r7, sp, #0
 800cc58:	60f8      	str	r0, [r7, #12]
 800cc5a:	60b9      	str	r1, [r7, #8]
 800cc5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	6a1b      	ldr	r3, [r3, #32]
 800cc62:	f023 0210 	bic.w	r2, r3, #16
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	699b      	ldr	r3, [r3, #24]
 800cc6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	6a1b      	ldr	r3, [r3, #32]
 800cc74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cc7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	031b      	lsls	r3, r3, #12
 800cc82:	697a      	ldr	r2, [r7, #20]
 800cc84:	4313      	orrs	r3, r2
 800cc86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cc8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	011b      	lsls	r3, r3, #4
 800cc94:	693a      	ldr	r2, [r7, #16]
 800cc96:	4313      	orrs	r3, r2
 800cc98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	697a      	ldr	r2, [r7, #20]
 800cc9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	693a      	ldr	r2, [r7, #16]
 800cca4:	621a      	str	r2, [r3, #32]
}
 800cca6:	bf00      	nop
 800cca8:	371c      	adds	r7, #28
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb0:	4770      	bx	lr
	...

0800ccb4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b085      	sub	sp, #20
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	689b      	ldr	r3, [r3, #8]
 800ccc2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ccc4:	68fa      	ldr	r2, [r7, #12]
 800ccc6:	4b09      	ldr	r3, [pc, #36]	; (800ccec <TIM_ITRx_SetConfig+0x38>)
 800ccc8:	4013      	ands	r3, r2
 800ccca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cccc:	683a      	ldr	r2, [r7, #0]
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	4313      	orrs	r3, r2
 800ccd2:	f043 0307 	orr.w	r3, r3, #7
 800ccd6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	68fa      	ldr	r2, [r7, #12]
 800ccdc:	609a      	str	r2, [r3, #8]
}
 800ccde:	bf00      	nop
 800cce0:	3714      	adds	r7, #20
 800cce2:	46bd      	mov	sp, r7
 800cce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce8:	4770      	bx	lr
 800ccea:	bf00      	nop
 800ccec:	ffcfff8f 	.word	0xffcfff8f

0800ccf0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ccf0:	b480      	push	{r7}
 800ccf2:	b087      	sub	sp, #28
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	60f8      	str	r0, [r7, #12]
 800ccf8:	60b9      	str	r1, [r7, #8]
 800ccfa:	607a      	str	r2, [r7, #4]
 800ccfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	689b      	ldr	r3, [r3, #8]
 800cd02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cd0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	021a      	lsls	r2, r3, #8
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	431a      	orrs	r2, r3
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	4313      	orrs	r3, r2
 800cd18:	697a      	ldr	r2, [r7, #20]
 800cd1a:	4313      	orrs	r3, r2
 800cd1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	697a      	ldr	r2, [r7, #20]
 800cd22:	609a      	str	r2, [r3, #8]
}
 800cd24:	bf00      	nop
 800cd26:	371c      	adds	r7, #28
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2e:	4770      	bx	lr

0800cd30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cd30:	b480      	push	{r7}
 800cd32:	b087      	sub	sp, #28
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	60f8      	str	r0, [r7, #12]
 800cd38:	60b9      	str	r1, [r7, #8]
 800cd3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	f003 031f 	and.w	r3, r3, #31
 800cd42:	2201      	movs	r2, #1
 800cd44:	fa02 f303 	lsl.w	r3, r2, r3
 800cd48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	6a1a      	ldr	r2, [r3, #32]
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	43db      	mvns	r3, r3
 800cd52:	401a      	ands	r2, r3
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	6a1a      	ldr	r2, [r3, #32]
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	f003 031f 	and.w	r3, r3, #31
 800cd62:	6879      	ldr	r1, [r7, #4]
 800cd64:	fa01 f303 	lsl.w	r3, r1, r3
 800cd68:	431a      	orrs	r2, r3
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	621a      	str	r2, [r3, #32]
}
 800cd6e:	bf00      	nop
 800cd70:	371c      	adds	r7, #28
 800cd72:	46bd      	mov	sp, r7
 800cd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd78:	4770      	bx	lr
	...

0800cd7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b085      	sub	sp, #20
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd8c:	2b01      	cmp	r3, #1
 800cd8e:	d101      	bne.n	800cd94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cd90:	2302      	movs	r3, #2
 800cd92:	e06d      	b.n	800ce70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2201      	movs	r2, #1
 800cd98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2202      	movs	r2, #2
 800cda0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	685b      	ldr	r3, [r3, #4]
 800cdaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	689b      	ldr	r3, [r3, #8]
 800cdb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	4a30      	ldr	r2, [pc, #192]	; (800ce7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cdba:	4293      	cmp	r3, r2
 800cdbc:	d004      	beq.n	800cdc8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	4a2f      	ldr	r2, [pc, #188]	; (800ce80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cdc4:	4293      	cmp	r3, r2
 800cdc6:	d108      	bne.n	800cdda <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cdce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	685b      	ldr	r3, [r3, #4]
 800cdd4:	68fa      	ldr	r2, [r7, #12]
 800cdd6:	4313      	orrs	r3, r2
 800cdd8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cde0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	68fa      	ldr	r2, [r7, #12]
 800cde8:	4313      	orrs	r3, r2
 800cdea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	68fa      	ldr	r2, [r7, #12]
 800cdf2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	4a20      	ldr	r2, [pc, #128]	; (800ce7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cdfa:	4293      	cmp	r3, r2
 800cdfc:	d022      	beq.n	800ce44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce06:	d01d      	beq.n	800ce44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	4a1d      	ldr	r2, [pc, #116]	; (800ce84 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ce0e:	4293      	cmp	r3, r2
 800ce10:	d018      	beq.n	800ce44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	4a1c      	ldr	r2, [pc, #112]	; (800ce88 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ce18:	4293      	cmp	r3, r2
 800ce1a:	d013      	beq.n	800ce44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	4a1a      	ldr	r2, [pc, #104]	; (800ce8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ce22:	4293      	cmp	r3, r2
 800ce24:	d00e      	beq.n	800ce44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	4a15      	ldr	r2, [pc, #84]	; (800ce80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d009      	beq.n	800ce44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	4a16      	ldr	r2, [pc, #88]	; (800ce90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ce36:	4293      	cmp	r3, r2
 800ce38:	d004      	beq.n	800ce44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	4a15      	ldr	r2, [pc, #84]	; (800ce94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ce40:	4293      	cmp	r3, r2
 800ce42:	d10c      	bne.n	800ce5e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	689b      	ldr	r3, [r3, #8]
 800ce50:	68ba      	ldr	r2, [r7, #8]
 800ce52:	4313      	orrs	r3, r2
 800ce54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	68ba      	ldr	r2, [r7, #8]
 800ce5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2201      	movs	r2, #1
 800ce62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2200      	movs	r2, #0
 800ce6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ce6e:	2300      	movs	r3, #0
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3714      	adds	r7, #20
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr
 800ce7c:	40010000 	.word	0x40010000
 800ce80:	40010400 	.word	0x40010400
 800ce84:	40000400 	.word	0x40000400
 800ce88:	40000800 	.word	0x40000800
 800ce8c:	40000c00 	.word	0x40000c00
 800ce90:	40001800 	.word	0x40001800
 800ce94:	40014000 	.word	0x40014000

0800ce98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b085      	sub	sp, #20
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cea2:	2300      	movs	r3, #0
 800cea4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ceac:	2b01      	cmp	r3, #1
 800ceae:	d101      	bne.n	800ceb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ceb0:	2302      	movs	r3, #2
 800ceb2:	e065      	b.n	800cf80 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2201      	movs	r2, #1
 800ceb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	68db      	ldr	r3, [r3, #12]
 800cec6:	4313      	orrs	r3, r2
 800cec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	689b      	ldr	r3, [r3, #8]
 800ced4:	4313      	orrs	r3, r2
 800ced6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	685b      	ldr	r3, [r3, #4]
 800cee2:	4313      	orrs	r3, r2
 800cee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	4313      	orrs	r3, r2
 800cef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	691b      	ldr	r3, [r3, #16]
 800cefe:	4313      	orrs	r3, r2
 800cf00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	695b      	ldr	r3, [r3, #20]
 800cf0c:	4313      	orrs	r3, r2
 800cf0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf1a:	4313      	orrs	r3, r2
 800cf1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	699b      	ldr	r3, [r3, #24]
 800cf28:	041b      	lsls	r3, r3, #16
 800cf2a:	4313      	orrs	r3, r2
 800cf2c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	4a16      	ldr	r2, [pc, #88]	; (800cf8c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800cf34:	4293      	cmp	r3, r2
 800cf36:	d004      	beq.n	800cf42 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	4a14      	ldr	r2, [pc, #80]	; (800cf90 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d115      	bne.n	800cf6e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf4c:	051b      	lsls	r3, r3, #20
 800cf4e:	4313      	orrs	r3, r2
 800cf50:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	69db      	ldr	r3, [r3, #28]
 800cf5c:	4313      	orrs	r3, r2
 800cf5e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	6a1b      	ldr	r3, [r3, #32]
 800cf6a:	4313      	orrs	r3, r2
 800cf6c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	68fa      	ldr	r2, [r7, #12]
 800cf74:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cf7e:	2300      	movs	r3, #0
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	3714      	adds	r7, #20
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr
 800cf8c:	40010000 	.word	0x40010000
 800cf90:	40010400 	.word	0x40010400

0800cf94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cf94:	b480      	push	{r7}
 800cf96:	b083      	sub	sp, #12
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cf9c:	bf00      	nop
 800cf9e:	370c      	adds	r7, #12
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa6:	4770      	bx	lr

0800cfa8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b083      	sub	sp, #12
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cfb0:	bf00      	nop
 800cfb2:	370c      	adds	r7, #12
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfba:	4770      	bx	lr

0800cfbc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b083      	sub	sp, #12
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cfc4:	bf00      	nop
 800cfc6:	370c      	adds	r7, #12
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfce:	4770      	bx	lr

0800cfd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b082      	sub	sp, #8
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d101      	bne.n	800cfe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cfde:	2301      	movs	r3, #1
 800cfe0:	e042      	b.n	800d068 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d106      	bne.n	800cffa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2200      	movs	r2, #0
 800cff0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f7f8 fa2b 	bl	8005450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2224      	movs	r2, #36	; 0x24
 800cffe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	681a      	ldr	r2, [r3, #0]
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f022 0201 	bic.w	r2, r2, #1
 800d010:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f000 fdee 	bl	800dbf4 <UART_SetConfig>
 800d018:	4603      	mov	r3, r0
 800d01a:	2b01      	cmp	r3, #1
 800d01c:	d101      	bne.n	800d022 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d01e:	2301      	movs	r3, #1
 800d020:	e022      	b.n	800d068 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d026:	2b00      	cmp	r3, #0
 800d028:	d002      	beq.n	800d030 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f001 fb42 	bl	800e6b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	685a      	ldr	r2, [r3, #4]
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d03e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	689a      	ldr	r2, [r3, #8]
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d04e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	681a      	ldr	r2, [r3, #0]
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f042 0201 	orr.w	r2, r2, #1
 800d05e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f001 fbc9 	bl	800e7f8 <UART_CheckIdleState>
 800d066:	4603      	mov	r3, r0
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3708      	adds	r7, #8
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b08a      	sub	sp, #40	; 0x28
 800d074:	af02      	add	r7, sp, #8
 800d076:	60f8      	str	r0, [r7, #12]
 800d078:	60b9      	str	r1, [r7, #8]
 800d07a:	603b      	str	r3, [r7, #0]
 800d07c:	4613      	mov	r3, r2
 800d07e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d086:	2b20      	cmp	r3, #32
 800d088:	f040 8083 	bne.w	800d192 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d002      	beq.n	800d098 <HAL_UART_Transmit+0x28>
 800d092:	88fb      	ldrh	r3, [r7, #6]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d101      	bne.n	800d09c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d098:	2301      	movs	r3, #1
 800d09a:	e07b      	b.n	800d194 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d0a2:	2b01      	cmp	r3, #1
 800d0a4:	d101      	bne.n	800d0aa <HAL_UART_Transmit+0x3a>
 800d0a6:	2302      	movs	r3, #2
 800d0a8:	e074      	b.n	800d194 <HAL_UART_Transmit+0x124>
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	2201      	movs	r2, #1
 800d0ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	2221      	movs	r2, #33	; 0x21
 800d0be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d0c2:	f7f8 fcab 	bl	8005a1c <HAL_GetTick>
 800d0c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	88fa      	ldrh	r2, [r7, #6]
 800d0cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	88fa      	ldrh	r2, [r7, #6]
 800d0d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	689b      	ldr	r3, [r3, #8]
 800d0dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0e0:	d108      	bne.n	800d0f4 <HAL_UART_Transmit+0x84>
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	691b      	ldr	r3, [r3, #16]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d104      	bne.n	800d0f4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	61bb      	str	r3, [r7, #24]
 800d0f2:	e003      	b.n	800d0fc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800d0f4:	68bb      	ldr	r3, [r7, #8]
 800d0f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	2200      	movs	r2, #0
 800d100:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800d104:	e02c      	b.n	800d160 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	9300      	str	r3, [sp, #0]
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	2200      	movs	r2, #0
 800d10e:	2180      	movs	r1, #128	; 0x80
 800d110:	68f8      	ldr	r0, [r7, #12]
 800d112:	f001 fbbc 	bl	800e88e <UART_WaitOnFlagUntilTimeout>
 800d116:	4603      	mov	r3, r0
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d001      	beq.n	800d120 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800d11c:	2303      	movs	r3, #3
 800d11e:	e039      	b.n	800d194 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800d120:	69fb      	ldr	r3, [r7, #28]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d10b      	bne.n	800d13e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d126:	69bb      	ldr	r3, [r7, #24]
 800d128:	881b      	ldrh	r3, [r3, #0]
 800d12a:	461a      	mov	r2, r3
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d134:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d136:	69bb      	ldr	r3, [r7, #24]
 800d138:	3302      	adds	r3, #2
 800d13a:	61bb      	str	r3, [r7, #24]
 800d13c:	e007      	b.n	800d14e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d13e:	69fb      	ldr	r3, [r7, #28]
 800d140:	781a      	ldrb	r2, [r3, #0]
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d148:	69fb      	ldr	r3, [r7, #28]
 800d14a:	3301      	adds	r3, #1
 800d14c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d154:	b29b      	uxth	r3, r3
 800d156:	3b01      	subs	r3, #1
 800d158:	b29a      	uxth	r2, r3
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d166:	b29b      	uxth	r3, r3
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d1cc      	bne.n	800d106 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	9300      	str	r3, [sp, #0]
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	2200      	movs	r2, #0
 800d174:	2140      	movs	r1, #64	; 0x40
 800d176:	68f8      	ldr	r0, [r7, #12]
 800d178:	f001 fb89 	bl	800e88e <UART_WaitOnFlagUntilTimeout>
 800d17c:	4603      	mov	r3, r0
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d001      	beq.n	800d186 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800d182:	2303      	movs	r3, #3
 800d184:	e006      	b.n	800d194 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	2220      	movs	r2, #32
 800d18a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800d18e:	2300      	movs	r3, #0
 800d190:	e000      	b.n	800d194 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800d192:	2302      	movs	r3, #2
  }
}
 800d194:	4618      	mov	r0, r3
 800d196:	3720      	adds	r7, #32
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}

0800d19c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b08a      	sub	sp, #40	; 0x28
 800d1a0:	af02      	add	r7, sp, #8
 800d1a2:	60f8      	str	r0, [r7, #12]
 800d1a4:	60b9      	str	r1, [r7, #8]
 800d1a6:	603b      	str	r3, [r7, #0]
 800d1a8:	4613      	mov	r3, r2
 800d1aa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1b2:	2b20      	cmp	r3, #32
 800d1b4:	f040 80c0 	bne.w	800d338 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d002      	beq.n	800d1c4 <HAL_UART_Receive+0x28>
 800d1be:	88fb      	ldrh	r3, [r7, #6]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d101      	bne.n	800d1c8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	e0b8      	b.n	800d33a <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d1ce:	2b01      	cmp	r3, #1
 800d1d0:	d101      	bne.n	800d1d6 <HAL_UART_Receive+0x3a>
 800d1d2:	2302      	movs	r3, #2
 800d1d4:	e0b1      	b.n	800d33a <HAL_UART_Receive+0x19e>
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	2201      	movs	r2, #1
 800d1da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	2222      	movs	r2, #34	; 0x22
 800d1ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d1f4:	f7f8 fc12 	bl	8005a1c <HAL_GetTick>
 800d1f8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	88fa      	ldrh	r2, [r7, #6]
 800d1fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	88fa      	ldrh	r2, [r7, #6]
 800d206:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	689b      	ldr	r3, [r3, #8]
 800d20e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d212:	d10e      	bne.n	800d232 <HAL_UART_Receive+0x96>
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	691b      	ldr	r3, [r3, #16]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d105      	bne.n	800d228 <HAL_UART_Receive+0x8c>
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d222:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d226:	e02d      	b.n	800d284 <HAL_UART_Receive+0xe8>
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	22ff      	movs	r2, #255	; 0xff
 800d22c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d230:	e028      	b.n	800d284 <HAL_UART_Receive+0xe8>
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	689b      	ldr	r3, [r3, #8]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d10d      	bne.n	800d256 <HAL_UART_Receive+0xba>
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	691b      	ldr	r3, [r3, #16]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d104      	bne.n	800d24c <HAL_UART_Receive+0xb0>
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	22ff      	movs	r2, #255	; 0xff
 800d246:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d24a:	e01b      	b.n	800d284 <HAL_UART_Receive+0xe8>
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	227f      	movs	r2, #127	; 0x7f
 800d250:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d254:	e016      	b.n	800d284 <HAL_UART_Receive+0xe8>
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	689b      	ldr	r3, [r3, #8]
 800d25a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d25e:	d10d      	bne.n	800d27c <HAL_UART_Receive+0xe0>
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	691b      	ldr	r3, [r3, #16]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d104      	bne.n	800d272 <HAL_UART_Receive+0xd6>
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	227f      	movs	r2, #127	; 0x7f
 800d26c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d270:	e008      	b.n	800d284 <HAL_UART_Receive+0xe8>
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	223f      	movs	r2, #63	; 0x3f
 800d276:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d27a:	e003      	b.n	800d284 <HAL_UART_Receive+0xe8>
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	2200      	movs	r2, #0
 800d280:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d28a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	689b      	ldr	r3, [r3, #8]
 800d290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d294:	d108      	bne.n	800d2a8 <HAL_UART_Receive+0x10c>
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	691b      	ldr	r3, [r3, #16]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d104      	bne.n	800d2a8 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	61bb      	str	r3, [r7, #24]
 800d2a6:	e003      	b.n	800d2b0 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800d2b8:	e032      	b.n	800d320 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	9300      	str	r3, [sp, #0]
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	2120      	movs	r1, #32
 800d2c4:	68f8      	ldr	r0, [r7, #12]
 800d2c6:	f001 fae2 	bl	800e88e <UART_WaitOnFlagUntilTimeout>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d001      	beq.n	800d2d4 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800d2d0:	2303      	movs	r3, #3
 800d2d2:	e032      	b.n	800d33a <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800d2d4:	69fb      	ldr	r3, [r7, #28]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d10c      	bne.n	800d2f4 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2e0:	b29a      	uxth	r2, r3
 800d2e2:	8a7b      	ldrh	r3, [r7, #18]
 800d2e4:	4013      	ands	r3, r2
 800d2e6:	b29a      	uxth	r2, r3
 800d2e8:	69bb      	ldr	r3, [r7, #24]
 800d2ea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d2ec:	69bb      	ldr	r3, [r7, #24]
 800d2ee:	3302      	adds	r3, #2
 800d2f0:	61bb      	str	r3, [r7, #24]
 800d2f2:	e00c      	b.n	800d30e <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2fa:	b2da      	uxtb	r2, r3
 800d2fc:	8a7b      	ldrh	r3, [r7, #18]
 800d2fe:	b2db      	uxtb	r3, r3
 800d300:	4013      	ands	r3, r2
 800d302:	b2da      	uxtb	r2, r3
 800d304:	69fb      	ldr	r3, [r7, #28]
 800d306:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800d308:	69fb      	ldr	r3, [r7, #28]
 800d30a:	3301      	adds	r3, #1
 800d30c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d314:	b29b      	uxth	r3, r3
 800d316:	3b01      	subs	r3, #1
 800d318:	b29a      	uxth	r2, r3
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d326:	b29b      	uxth	r3, r3
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d1c6      	bne.n	800d2ba <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	2220      	movs	r2, #32
 800d330:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d334:	2300      	movs	r3, #0
 800d336:	e000      	b.n	800d33a <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800d338:	2302      	movs	r3, #2
  }
}
 800d33a:	4618      	mov	r0, r3
 800d33c:	3720      	adds	r7, #32
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}
	...

0800d344 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b08a      	sub	sp, #40	; 0x28
 800d348:	af00      	add	r7, sp, #0
 800d34a:	60f8      	str	r0, [r7, #12]
 800d34c:	60b9      	str	r1, [r7, #8]
 800d34e:	4613      	mov	r3, r2
 800d350:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d358:	2b20      	cmp	r3, #32
 800d35a:	d17a      	bne.n	800d452 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d35c:	68bb      	ldr	r3, [r7, #8]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d002      	beq.n	800d368 <HAL_UART_Transmit_DMA+0x24>
 800d362:	88fb      	ldrh	r3, [r7, #6]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d101      	bne.n	800d36c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800d368:	2301      	movs	r3, #1
 800d36a:	e073      	b.n	800d454 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d372:	2b01      	cmp	r3, #1
 800d374:	d101      	bne.n	800d37a <HAL_UART_Transmit_DMA+0x36>
 800d376:	2302      	movs	r3, #2
 800d378:	e06c      	b.n	800d454 <HAL_UART_Transmit_DMA+0x110>
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	2201      	movs	r2, #1
 800d37e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	68ba      	ldr	r2, [r7, #8]
 800d386:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	88fa      	ldrh	r2, [r7, #6]
 800d38c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	88fa      	ldrh	r2, [r7, #6]
 800d394:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	2200      	movs	r2, #0
 800d39c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	2221      	movs	r2, #33	; 0x21
 800d3a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d02c      	beq.n	800d40a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3b4:	4a29      	ldr	r2, [pc, #164]	; (800d45c <HAL_UART_Transmit_DMA+0x118>)
 800d3b6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3bc:	4a28      	ldr	r2, [pc, #160]	; (800d460 <HAL_UART_Transmit_DMA+0x11c>)
 800d3be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3c4:	4a27      	ldr	r2, [pc, #156]	; (800d464 <HAL_UART_Transmit_DMA+0x120>)
 800d3c6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3d8:	4619      	mov	r1, r3
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	3328      	adds	r3, #40	; 0x28
 800d3e0:	461a      	mov	r2, r3
 800d3e2:	88fb      	ldrh	r3, [r7, #6]
 800d3e4:	f7f9 f9cc 	bl	8006780 <HAL_DMA_Start_IT>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d00d      	beq.n	800d40a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	2210      	movs	r2, #16
 800d3f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	2220      	movs	r2, #32
 800d402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800d406:	2301      	movs	r3, #1
 800d408:	e024      	b.n	800d454 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	2240      	movs	r2, #64	; 0x40
 800d410:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	2200      	movs	r2, #0
 800d416:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	3308      	adds	r3, #8
 800d420:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	e853 3f00 	ldrex	r3, [r3]
 800d428:	613b      	str	r3, [r7, #16]
   return(result);
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d430:	627b      	str	r3, [r7, #36]	; 0x24
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	3308      	adds	r3, #8
 800d438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d43a:	623a      	str	r2, [r7, #32]
 800d43c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d43e:	69f9      	ldr	r1, [r7, #28]
 800d440:	6a3a      	ldr	r2, [r7, #32]
 800d442:	e841 2300 	strex	r3, r2, [r1]
 800d446:	61bb      	str	r3, [r7, #24]
   return(result);
 800d448:	69bb      	ldr	r3, [r7, #24]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d1e5      	bne.n	800d41a <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800d44e:	2300      	movs	r3, #0
 800d450:	e000      	b.n	800d454 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800d452:	2302      	movs	r3, #2
  }
}
 800d454:	4618      	mov	r0, r3
 800d456:	3728      	adds	r7, #40	; 0x28
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}
 800d45c:	0800ecc1 	.word	0x0800ecc1
 800d460:	0800ed57 	.word	0x0800ed57
 800d464:	0800eecd 	.word	0x0800eecd

0800d468 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b0ba      	sub	sp, #232	; 0xe8
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	69db      	ldr	r3, [r3, #28]
 800d476:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	689b      	ldr	r3, [r3, #8]
 800d48a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d48e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d492:	f640 030f 	movw	r3, #2063	; 0x80f
 800d496:	4013      	ands	r3, r2
 800d498:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d49c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d11b      	bne.n	800d4dc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d4a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4a8:	f003 0320 	and.w	r3, r3, #32
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d015      	beq.n	800d4dc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d4b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4b4:	f003 0320 	and.w	r3, r3, #32
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d105      	bne.n	800d4c8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d4bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d4c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d009      	beq.n	800d4dc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	f000 835a 	beq.w	800db86 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	4798      	blx	r3
      }
      return;
 800d4da:	e354      	b.n	800db86 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d4dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	f000 811f 	beq.w	800d724 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d4e6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d4ea:	4b8b      	ldr	r3, [pc, #556]	; (800d718 <HAL_UART_IRQHandler+0x2b0>)
 800d4ec:	4013      	ands	r3, r2
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d106      	bne.n	800d500 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d4f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d4f6:	4b89      	ldr	r3, [pc, #548]	; (800d71c <HAL_UART_IRQHandler+0x2b4>)
 800d4f8:	4013      	ands	r3, r2
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	f000 8112 	beq.w	800d724 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d504:	f003 0301 	and.w	r3, r3, #1
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d011      	beq.n	800d530 <HAL_UART_IRQHandler+0xc8>
 800d50c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d514:	2b00      	cmp	r3, #0
 800d516:	d00b      	beq.n	800d530 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	2201      	movs	r2, #1
 800d51e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d526:	f043 0201 	orr.w	r2, r3, #1
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d534:	f003 0302 	and.w	r3, r3, #2
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d011      	beq.n	800d560 <HAL_UART_IRQHandler+0xf8>
 800d53c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d540:	f003 0301 	and.w	r3, r3, #1
 800d544:	2b00      	cmp	r3, #0
 800d546:	d00b      	beq.n	800d560 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	2202      	movs	r2, #2
 800d54e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d556:	f043 0204 	orr.w	r2, r3, #4
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d564:	f003 0304 	and.w	r3, r3, #4
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d011      	beq.n	800d590 <HAL_UART_IRQHandler+0x128>
 800d56c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d570:	f003 0301 	and.w	r3, r3, #1
 800d574:	2b00      	cmp	r3, #0
 800d576:	d00b      	beq.n	800d590 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	2204      	movs	r2, #4
 800d57e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d586:	f043 0202 	orr.w	r2, r3, #2
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d594:	f003 0308 	and.w	r3, r3, #8
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d017      	beq.n	800d5cc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d59c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5a0:	f003 0320 	and.w	r3, r3, #32
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d105      	bne.n	800d5b4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d5a8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d5ac:	4b5a      	ldr	r3, [pc, #360]	; (800d718 <HAL_UART_IRQHandler+0x2b0>)
 800d5ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d00b      	beq.n	800d5cc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	2208      	movs	r2, #8
 800d5ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d5c2:	f043 0208 	orr.w	r2, r3, #8
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d5cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d012      	beq.n	800d5fe <HAL_UART_IRQHandler+0x196>
 800d5d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d00c      	beq.n	800d5fe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d5ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d5f4:	f043 0220 	orr.w	r2, r3, #32
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d604:	2b00      	cmp	r3, #0
 800d606:	f000 82c0 	beq.w	800db8a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d60a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d60e:	f003 0320 	and.w	r3, r3, #32
 800d612:	2b00      	cmp	r3, #0
 800d614:	d013      	beq.n	800d63e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d61a:	f003 0320 	and.w	r3, r3, #32
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d105      	bne.n	800d62e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d622:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d007      	beq.n	800d63e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d632:	2b00      	cmp	r3, #0
 800d634:	d003      	beq.n	800d63e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d644:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	689b      	ldr	r3, [r3, #8]
 800d64e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d652:	2b40      	cmp	r3, #64	; 0x40
 800d654:	d005      	beq.n	800d662 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d656:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d65a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d04f      	beq.n	800d702 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f001 fac6 	bl	800ebf4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	689b      	ldr	r3, [r3, #8]
 800d66e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d672:	2b40      	cmp	r3, #64	; 0x40
 800d674:	d141      	bne.n	800d6fa <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	3308      	adds	r3, #8
 800d67c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d680:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d684:	e853 3f00 	ldrex	r3, [r3]
 800d688:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d68c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d690:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d694:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	3308      	adds	r3, #8
 800d69e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d6a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d6a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d6ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d6b2:	e841 2300 	strex	r3, r2, [r1]
 800d6b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d6ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d1d9      	bne.n	800d676 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d013      	beq.n	800d6f2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6ce:	4a14      	ldr	r2, [pc, #80]	; (800d720 <HAL_UART_IRQHandler+0x2b8>)
 800d6d0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f7f9 fdda 	bl	8007290 <HAL_DMA_Abort_IT>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d017      	beq.n	800d712 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6e8:	687a      	ldr	r2, [r7, #4]
 800d6ea:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d6ec:	4610      	mov	r0, r2
 800d6ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6f0:	e00f      	b.n	800d712 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f000 fa74 	bl	800dbe0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6f8:	e00b      	b.n	800d712 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f000 fa70 	bl	800dbe0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d700:	e007      	b.n	800d712 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f000 fa6c 	bl	800dbe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2200      	movs	r2, #0
 800d70c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d710:	e23b      	b.n	800db8a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d712:	bf00      	nop
    return;
 800d714:	e239      	b.n	800db8a <HAL_UART_IRQHandler+0x722>
 800d716:	bf00      	nop
 800d718:	10000001 	.word	0x10000001
 800d71c:	04000120 	.word	0x04000120
 800d720:	0800ef4d 	.word	0x0800ef4d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d728:	2b01      	cmp	r3, #1
 800d72a:	f040 81ce 	bne.w	800daca <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d72e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d732:	f003 0310 	and.w	r3, r3, #16
 800d736:	2b00      	cmp	r3, #0
 800d738:	f000 81c7 	beq.w	800daca <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d73c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d740:	f003 0310 	and.w	r3, r3, #16
 800d744:	2b00      	cmp	r3, #0
 800d746:	f000 81c0 	beq.w	800daca <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	2210      	movs	r2, #16
 800d750:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	689b      	ldr	r3, [r3, #8]
 800d758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d75c:	2b40      	cmp	r3, #64	; 0x40
 800d75e:	f040 813b 	bne.w	800d9d8 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	4a8b      	ldr	r2, [pc, #556]	; (800d998 <HAL_UART_IRQHandler+0x530>)
 800d76a:	4293      	cmp	r3, r2
 800d76c:	d059      	beq.n	800d822 <HAL_UART_IRQHandler+0x3ba>
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	4a89      	ldr	r2, [pc, #548]	; (800d99c <HAL_UART_IRQHandler+0x534>)
 800d776:	4293      	cmp	r3, r2
 800d778:	d053      	beq.n	800d822 <HAL_UART_IRQHandler+0x3ba>
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	4a87      	ldr	r2, [pc, #540]	; (800d9a0 <HAL_UART_IRQHandler+0x538>)
 800d782:	4293      	cmp	r3, r2
 800d784:	d04d      	beq.n	800d822 <HAL_UART_IRQHandler+0x3ba>
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	4a85      	ldr	r2, [pc, #532]	; (800d9a4 <HAL_UART_IRQHandler+0x53c>)
 800d78e:	4293      	cmp	r3, r2
 800d790:	d047      	beq.n	800d822 <HAL_UART_IRQHandler+0x3ba>
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	4a83      	ldr	r2, [pc, #524]	; (800d9a8 <HAL_UART_IRQHandler+0x540>)
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d041      	beq.n	800d822 <HAL_UART_IRQHandler+0x3ba>
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	4a81      	ldr	r2, [pc, #516]	; (800d9ac <HAL_UART_IRQHandler+0x544>)
 800d7a6:	4293      	cmp	r3, r2
 800d7a8:	d03b      	beq.n	800d822 <HAL_UART_IRQHandler+0x3ba>
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	4a7f      	ldr	r2, [pc, #508]	; (800d9b0 <HAL_UART_IRQHandler+0x548>)
 800d7b2:	4293      	cmp	r3, r2
 800d7b4:	d035      	beq.n	800d822 <HAL_UART_IRQHandler+0x3ba>
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	4a7d      	ldr	r2, [pc, #500]	; (800d9b4 <HAL_UART_IRQHandler+0x54c>)
 800d7be:	4293      	cmp	r3, r2
 800d7c0:	d02f      	beq.n	800d822 <HAL_UART_IRQHandler+0x3ba>
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	4a7b      	ldr	r2, [pc, #492]	; (800d9b8 <HAL_UART_IRQHandler+0x550>)
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	d029      	beq.n	800d822 <HAL_UART_IRQHandler+0x3ba>
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	4a79      	ldr	r2, [pc, #484]	; (800d9bc <HAL_UART_IRQHandler+0x554>)
 800d7d6:	4293      	cmp	r3, r2
 800d7d8:	d023      	beq.n	800d822 <HAL_UART_IRQHandler+0x3ba>
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	4a77      	ldr	r2, [pc, #476]	; (800d9c0 <HAL_UART_IRQHandler+0x558>)
 800d7e2:	4293      	cmp	r3, r2
 800d7e4:	d01d      	beq.n	800d822 <HAL_UART_IRQHandler+0x3ba>
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	4a75      	ldr	r2, [pc, #468]	; (800d9c4 <HAL_UART_IRQHandler+0x55c>)
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	d017      	beq.n	800d822 <HAL_UART_IRQHandler+0x3ba>
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	4a73      	ldr	r2, [pc, #460]	; (800d9c8 <HAL_UART_IRQHandler+0x560>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d011      	beq.n	800d822 <HAL_UART_IRQHandler+0x3ba>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	4a71      	ldr	r2, [pc, #452]	; (800d9cc <HAL_UART_IRQHandler+0x564>)
 800d806:	4293      	cmp	r3, r2
 800d808:	d00b      	beq.n	800d822 <HAL_UART_IRQHandler+0x3ba>
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	4a6f      	ldr	r2, [pc, #444]	; (800d9d0 <HAL_UART_IRQHandler+0x568>)
 800d812:	4293      	cmp	r3, r2
 800d814:	d005      	beq.n	800d822 <HAL_UART_IRQHandler+0x3ba>
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	4a6d      	ldr	r2, [pc, #436]	; (800d9d4 <HAL_UART_IRQHandler+0x56c>)
 800d81e:	4293      	cmp	r3, r2
 800d820:	d105      	bne.n	800d82e <HAL_UART_IRQHandler+0x3c6>
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	685b      	ldr	r3, [r3, #4]
 800d82a:	b29b      	uxth	r3, r3
 800d82c:	e004      	b.n	800d838 <HAL_UART_IRQHandler+0x3d0>
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	685b      	ldr	r3, [r3, #4]
 800d836:	b29b      	uxth	r3, r3
 800d838:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d83c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d840:	2b00      	cmp	r3, #0
 800d842:	f000 81a4 	beq.w	800db8e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d84c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d850:	429a      	cmp	r2, r3
 800d852:	f080 819c 	bcs.w	800db8e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d85c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d864:	69db      	ldr	r3, [r3, #28]
 800d866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d86a:	f000 8086 	beq.w	800d97a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d876:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d87a:	e853 3f00 	ldrex	r3, [r3]
 800d87e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d882:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d886:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d88a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	461a      	mov	r2, r3
 800d894:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d898:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d89c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8a0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d8a4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d8a8:	e841 2300 	strex	r3, r2, [r1]
 800d8ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d8b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d1da      	bne.n	800d86e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	3308      	adds	r3, #8
 800d8be:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d8c2:	e853 3f00 	ldrex	r3, [r3]
 800d8c6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d8c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d8ca:	f023 0301 	bic.w	r3, r3, #1
 800d8ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	3308      	adds	r3, #8
 800d8d8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d8dc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d8e0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8e2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d8e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d8e8:	e841 2300 	strex	r3, r2, [r1]
 800d8ec:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d8ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d1e1      	bne.n	800d8b8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	3308      	adds	r3, #8
 800d8fa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d8fe:	e853 3f00 	ldrex	r3, [r3]
 800d902:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d904:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d906:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d90a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	3308      	adds	r3, #8
 800d914:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d918:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d91a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d91c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d91e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d920:	e841 2300 	strex	r3, r2, [r1]
 800d924:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d926:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d1e3      	bne.n	800d8f4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2220      	movs	r2, #32
 800d930:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2200      	movs	r2, #0
 800d938:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d942:	e853 3f00 	ldrex	r3, [r3]
 800d946:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d94a:	f023 0310 	bic.w	r3, r3, #16
 800d94e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	461a      	mov	r2, r3
 800d958:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d95c:	65bb      	str	r3, [r7, #88]	; 0x58
 800d95e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d960:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d962:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d964:	e841 2300 	strex	r3, r2, [r1]
 800d968:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d96a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d1e4      	bne.n	800d93a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d974:	4618      	mov	r0, r3
 800d976:	f7f9 f96d 	bl	8006c54 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d986:	b29b      	uxth	r3, r3
 800d988:	1ad3      	subs	r3, r2, r3
 800d98a:	b29b      	uxth	r3, r3
 800d98c:	4619      	mov	r1, r3
 800d98e:	6878      	ldr	r0, [r7, #4]
 800d990:	f7f4 ff90 	bl	80028b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d994:	e0fb      	b.n	800db8e <HAL_UART_IRQHandler+0x726>
 800d996:	bf00      	nop
 800d998:	40020010 	.word	0x40020010
 800d99c:	40020028 	.word	0x40020028
 800d9a0:	40020040 	.word	0x40020040
 800d9a4:	40020058 	.word	0x40020058
 800d9a8:	40020070 	.word	0x40020070
 800d9ac:	40020088 	.word	0x40020088
 800d9b0:	400200a0 	.word	0x400200a0
 800d9b4:	400200b8 	.word	0x400200b8
 800d9b8:	40020410 	.word	0x40020410
 800d9bc:	40020428 	.word	0x40020428
 800d9c0:	40020440 	.word	0x40020440
 800d9c4:	40020458 	.word	0x40020458
 800d9c8:	40020470 	.word	0x40020470
 800d9cc:	40020488 	.word	0x40020488
 800d9d0:	400204a0 	.word	0x400204a0
 800d9d4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d9e4:	b29b      	uxth	r3, r3
 800d9e6:	1ad3      	subs	r3, r2, r3
 800d9e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d9f2:	b29b      	uxth	r3, r3
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	f000 80cc 	beq.w	800db92 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800d9fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	f000 80c7 	beq.w	800db92 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da0c:	e853 3f00 	ldrex	r3, [r3]
 800da10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800da12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800da18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	461a      	mov	r2, r3
 800da22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800da26:	647b      	str	r3, [r7, #68]	; 0x44
 800da28:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800da2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da2e:	e841 2300 	strex	r3, r2, [r1]
 800da32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800da34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da36:	2b00      	cmp	r3, #0
 800da38:	d1e4      	bne.n	800da04 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	3308      	adds	r3, #8
 800da40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da44:	e853 3f00 	ldrex	r3, [r3]
 800da48:	623b      	str	r3, [r7, #32]
   return(result);
 800da4a:	6a3a      	ldr	r2, [r7, #32]
 800da4c:	4b54      	ldr	r3, [pc, #336]	; (800dba0 <HAL_UART_IRQHandler+0x738>)
 800da4e:	4013      	ands	r3, r2
 800da50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	3308      	adds	r3, #8
 800da5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800da5e:	633a      	str	r2, [r7, #48]	; 0x30
 800da60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800da64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da66:	e841 2300 	strex	r3, r2, [r1]
 800da6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800da6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d1e3      	bne.n	800da3a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2220      	movs	r2, #32
 800da76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2200      	movs	r2, #0
 800da7e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2200      	movs	r2, #0
 800da84:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da8c:	693b      	ldr	r3, [r7, #16]
 800da8e:	e853 3f00 	ldrex	r3, [r3]
 800da92:	60fb      	str	r3, [r7, #12]
   return(result);
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	f023 0310 	bic.w	r3, r3, #16
 800da9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	461a      	mov	r2, r3
 800daa4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800daa8:	61fb      	str	r3, [r7, #28]
 800daaa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daac:	69b9      	ldr	r1, [r7, #24]
 800daae:	69fa      	ldr	r2, [r7, #28]
 800dab0:	e841 2300 	strex	r3, r2, [r1]
 800dab4:	617b      	str	r3, [r7, #20]
   return(result);
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d1e4      	bne.n	800da86 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dabc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800dac0:	4619      	mov	r1, r3
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f7f4 fef6 	bl	80028b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dac8:	e063      	b.n	800db92 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800daca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d00e      	beq.n	800daf4 <HAL_UART_IRQHandler+0x68c>
 800dad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d008      	beq.n	800daf4 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800daea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f001 fa6e 	bl	800efce <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800daf2:	e051      	b.n	800db98 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800daf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800daf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d014      	beq.n	800db2a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800db00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d105      	bne.n	800db18 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800db0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800db14:	2b00      	cmp	r3, #0
 800db16:	d008      	beq.n	800db2a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d03a      	beq.n	800db96 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	4798      	blx	r3
    }
    return;
 800db28:	e035      	b.n	800db96 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800db2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db32:	2b00      	cmp	r3, #0
 800db34:	d009      	beq.n	800db4a <HAL_UART_IRQHandler+0x6e2>
 800db36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d003      	beq.n	800db4a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f001 fa18 	bl	800ef78 <UART_EndTransmit_IT>
    return;
 800db48:	e026      	b.n	800db98 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800db4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800db52:	2b00      	cmp	r3, #0
 800db54:	d009      	beq.n	800db6a <HAL_UART_IRQHandler+0x702>
 800db56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db5a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d003      	beq.n	800db6a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f001 fa47 	bl	800eff6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800db68:	e016      	b.n	800db98 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800db6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800db72:	2b00      	cmp	r3, #0
 800db74:	d010      	beq.n	800db98 <HAL_UART_IRQHandler+0x730>
 800db76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	da0c      	bge.n	800db98 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f001 fa2f 	bl	800efe2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800db84:	e008      	b.n	800db98 <HAL_UART_IRQHandler+0x730>
      return;
 800db86:	bf00      	nop
 800db88:	e006      	b.n	800db98 <HAL_UART_IRQHandler+0x730>
    return;
 800db8a:	bf00      	nop
 800db8c:	e004      	b.n	800db98 <HAL_UART_IRQHandler+0x730>
      return;
 800db8e:	bf00      	nop
 800db90:	e002      	b.n	800db98 <HAL_UART_IRQHandler+0x730>
      return;
 800db92:	bf00      	nop
 800db94:	e000      	b.n	800db98 <HAL_UART_IRQHandler+0x730>
    return;
 800db96:	bf00      	nop
  }
}
 800db98:	37e8      	adds	r7, #232	; 0xe8
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}
 800db9e:	bf00      	nop
 800dba0:	effffffe 	.word	0xeffffffe

0800dba4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dba4:	b480      	push	{r7}
 800dba6:	b083      	sub	sp, #12
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800dbac:	bf00      	nop
 800dbae:	370c      	adds	r7, #12
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb6:	4770      	bx	lr

0800dbb8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800dbb8:	b480      	push	{r7}
 800dbba:	b083      	sub	sp, #12
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800dbc0:	bf00      	nop
 800dbc2:	370c      	adds	r7, #12
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbca:	4770      	bx	lr

0800dbcc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800dbcc:	b480      	push	{r7}
 800dbce:	b083      	sub	sp, #12
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800dbd4:	bf00      	nop
 800dbd6:	370c      	adds	r7, #12
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbde:	4770      	bx	lr

0800dbe0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dbe0:	b480      	push	{r7}
 800dbe2:	b083      	sub	sp, #12
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800dbe8:	bf00      	nop
 800dbea:	370c      	adds	r7, #12
 800dbec:	46bd      	mov	sp, r7
 800dbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf2:	4770      	bx	lr

0800dbf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dbf4:	b5b0      	push	{r4, r5, r7, lr}
 800dbf6:	b08e      	sub	sp, #56	; 0x38
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	689a      	ldr	r2, [r3, #8]
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	691b      	ldr	r3, [r3, #16]
 800dc0a:	431a      	orrs	r2, r3
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	695b      	ldr	r3, [r3, #20]
 800dc10:	431a      	orrs	r2, r3
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	69db      	ldr	r3, [r3, #28]
 800dc16:	4313      	orrs	r3, r2
 800dc18:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	681a      	ldr	r2, [r3, #0]
 800dc20:	4bbf      	ldr	r3, [pc, #764]	; (800df20 <UART_SetConfig+0x32c>)
 800dc22:	4013      	ands	r3, r2
 800dc24:	687a      	ldr	r2, [r7, #4]
 800dc26:	6812      	ldr	r2, [r2, #0]
 800dc28:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dc2a:	430b      	orrs	r3, r1
 800dc2c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	685b      	ldr	r3, [r3, #4]
 800dc34:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	68da      	ldr	r2, [r3, #12]
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	430a      	orrs	r2, r1
 800dc42:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	699b      	ldr	r3, [r3, #24]
 800dc48:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	4ab5      	ldr	r2, [pc, #724]	; (800df24 <UART_SetConfig+0x330>)
 800dc50:	4293      	cmp	r3, r2
 800dc52:	d004      	beq.n	800dc5e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	6a1b      	ldr	r3, [r3, #32]
 800dc58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc5a:	4313      	orrs	r3, r2
 800dc5c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	689a      	ldr	r2, [r3, #8]
 800dc64:	4bb0      	ldr	r3, [pc, #704]	; (800df28 <UART_SetConfig+0x334>)
 800dc66:	4013      	ands	r3, r2
 800dc68:	687a      	ldr	r2, [r7, #4]
 800dc6a:	6812      	ldr	r2, [r2, #0]
 800dc6c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dc6e:	430b      	orrs	r3, r1
 800dc70:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc78:	f023 010f 	bic.w	r1, r3, #15
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	430a      	orrs	r2, r1
 800dc86:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	4aa7      	ldr	r2, [pc, #668]	; (800df2c <UART_SetConfig+0x338>)
 800dc8e:	4293      	cmp	r3, r2
 800dc90:	d176      	bne.n	800dd80 <UART_SetConfig+0x18c>
 800dc92:	4ba7      	ldr	r3, [pc, #668]	; (800df30 <UART_SetConfig+0x33c>)
 800dc94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dc9a:	2b28      	cmp	r3, #40	; 0x28
 800dc9c:	d86c      	bhi.n	800dd78 <UART_SetConfig+0x184>
 800dc9e:	a201      	add	r2, pc, #4	; (adr r2, 800dca4 <UART_SetConfig+0xb0>)
 800dca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dca4:	0800dd49 	.word	0x0800dd49
 800dca8:	0800dd79 	.word	0x0800dd79
 800dcac:	0800dd79 	.word	0x0800dd79
 800dcb0:	0800dd79 	.word	0x0800dd79
 800dcb4:	0800dd79 	.word	0x0800dd79
 800dcb8:	0800dd79 	.word	0x0800dd79
 800dcbc:	0800dd79 	.word	0x0800dd79
 800dcc0:	0800dd79 	.word	0x0800dd79
 800dcc4:	0800dd51 	.word	0x0800dd51
 800dcc8:	0800dd79 	.word	0x0800dd79
 800dccc:	0800dd79 	.word	0x0800dd79
 800dcd0:	0800dd79 	.word	0x0800dd79
 800dcd4:	0800dd79 	.word	0x0800dd79
 800dcd8:	0800dd79 	.word	0x0800dd79
 800dcdc:	0800dd79 	.word	0x0800dd79
 800dce0:	0800dd79 	.word	0x0800dd79
 800dce4:	0800dd59 	.word	0x0800dd59
 800dce8:	0800dd79 	.word	0x0800dd79
 800dcec:	0800dd79 	.word	0x0800dd79
 800dcf0:	0800dd79 	.word	0x0800dd79
 800dcf4:	0800dd79 	.word	0x0800dd79
 800dcf8:	0800dd79 	.word	0x0800dd79
 800dcfc:	0800dd79 	.word	0x0800dd79
 800dd00:	0800dd79 	.word	0x0800dd79
 800dd04:	0800dd61 	.word	0x0800dd61
 800dd08:	0800dd79 	.word	0x0800dd79
 800dd0c:	0800dd79 	.word	0x0800dd79
 800dd10:	0800dd79 	.word	0x0800dd79
 800dd14:	0800dd79 	.word	0x0800dd79
 800dd18:	0800dd79 	.word	0x0800dd79
 800dd1c:	0800dd79 	.word	0x0800dd79
 800dd20:	0800dd79 	.word	0x0800dd79
 800dd24:	0800dd69 	.word	0x0800dd69
 800dd28:	0800dd79 	.word	0x0800dd79
 800dd2c:	0800dd79 	.word	0x0800dd79
 800dd30:	0800dd79 	.word	0x0800dd79
 800dd34:	0800dd79 	.word	0x0800dd79
 800dd38:	0800dd79 	.word	0x0800dd79
 800dd3c:	0800dd79 	.word	0x0800dd79
 800dd40:	0800dd79 	.word	0x0800dd79
 800dd44:	0800dd71 	.word	0x0800dd71
 800dd48:	2301      	movs	r3, #1
 800dd4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd4e:	e222      	b.n	800e196 <UART_SetConfig+0x5a2>
 800dd50:	2304      	movs	r3, #4
 800dd52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd56:	e21e      	b.n	800e196 <UART_SetConfig+0x5a2>
 800dd58:	2308      	movs	r3, #8
 800dd5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd5e:	e21a      	b.n	800e196 <UART_SetConfig+0x5a2>
 800dd60:	2310      	movs	r3, #16
 800dd62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd66:	e216      	b.n	800e196 <UART_SetConfig+0x5a2>
 800dd68:	2320      	movs	r3, #32
 800dd6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd6e:	e212      	b.n	800e196 <UART_SetConfig+0x5a2>
 800dd70:	2340      	movs	r3, #64	; 0x40
 800dd72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd76:	e20e      	b.n	800e196 <UART_SetConfig+0x5a2>
 800dd78:	2380      	movs	r3, #128	; 0x80
 800dd7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd7e:	e20a      	b.n	800e196 <UART_SetConfig+0x5a2>
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	4a6b      	ldr	r2, [pc, #428]	; (800df34 <UART_SetConfig+0x340>)
 800dd86:	4293      	cmp	r3, r2
 800dd88:	d130      	bne.n	800ddec <UART_SetConfig+0x1f8>
 800dd8a:	4b69      	ldr	r3, [pc, #420]	; (800df30 <UART_SetConfig+0x33c>)
 800dd8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd8e:	f003 0307 	and.w	r3, r3, #7
 800dd92:	2b05      	cmp	r3, #5
 800dd94:	d826      	bhi.n	800dde4 <UART_SetConfig+0x1f0>
 800dd96:	a201      	add	r2, pc, #4	; (adr r2, 800dd9c <UART_SetConfig+0x1a8>)
 800dd98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd9c:	0800ddb5 	.word	0x0800ddb5
 800dda0:	0800ddbd 	.word	0x0800ddbd
 800dda4:	0800ddc5 	.word	0x0800ddc5
 800dda8:	0800ddcd 	.word	0x0800ddcd
 800ddac:	0800ddd5 	.word	0x0800ddd5
 800ddb0:	0800dddd 	.word	0x0800dddd
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ddba:	e1ec      	b.n	800e196 <UART_SetConfig+0x5a2>
 800ddbc:	2304      	movs	r3, #4
 800ddbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ddc2:	e1e8      	b.n	800e196 <UART_SetConfig+0x5a2>
 800ddc4:	2308      	movs	r3, #8
 800ddc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ddca:	e1e4      	b.n	800e196 <UART_SetConfig+0x5a2>
 800ddcc:	2310      	movs	r3, #16
 800ddce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ddd2:	e1e0      	b.n	800e196 <UART_SetConfig+0x5a2>
 800ddd4:	2320      	movs	r3, #32
 800ddd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ddda:	e1dc      	b.n	800e196 <UART_SetConfig+0x5a2>
 800dddc:	2340      	movs	r3, #64	; 0x40
 800ddde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dde2:	e1d8      	b.n	800e196 <UART_SetConfig+0x5a2>
 800dde4:	2380      	movs	r3, #128	; 0x80
 800dde6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ddea:	e1d4      	b.n	800e196 <UART_SetConfig+0x5a2>
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	4a51      	ldr	r2, [pc, #324]	; (800df38 <UART_SetConfig+0x344>)
 800ddf2:	4293      	cmp	r3, r2
 800ddf4:	d130      	bne.n	800de58 <UART_SetConfig+0x264>
 800ddf6:	4b4e      	ldr	r3, [pc, #312]	; (800df30 <UART_SetConfig+0x33c>)
 800ddf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddfa:	f003 0307 	and.w	r3, r3, #7
 800ddfe:	2b05      	cmp	r3, #5
 800de00:	d826      	bhi.n	800de50 <UART_SetConfig+0x25c>
 800de02:	a201      	add	r2, pc, #4	; (adr r2, 800de08 <UART_SetConfig+0x214>)
 800de04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de08:	0800de21 	.word	0x0800de21
 800de0c:	0800de29 	.word	0x0800de29
 800de10:	0800de31 	.word	0x0800de31
 800de14:	0800de39 	.word	0x0800de39
 800de18:	0800de41 	.word	0x0800de41
 800de1c:	0800de49 	.word	0x0800de49
 800de20:	2300      	movs	r3, #0
 800de22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de26:	e1b6      	b.n	800e196 <UART_SetConfig+0x5a2>
 800de28:	2304      	movs	r3, #4
 800de2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de2e:	e1b2      	b.n	800e196 <UART_SetConfig+0x5a2>
 800de30:	2308      	movs	r3, #8
 800de32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de36:	e1ae      	b.n	800e196 <UART_SetConfig+0x5a2>
 800de38:	2310      	movs	r3, #16
 800de3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de3e:	e1aa      	b.n	800e196 <UART_SetConfig+0x5a2>
 800de40:	2320      	movs	r3, #32
 800de42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de46:	e1a6      	b.n	800e196 <UART_SetConfig+0x5a2>
 800de48:	2340      	movs	r3, #64	; 0x40
 800de4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de4e:	e1a2      	b.n	800e196 <UART_SetConfig+0x5a2>
 800de50:	2380      	movs	r3, #128	; 0x80
 800de52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de56:	e19e      	b.n	800e196 <UART_SetConfig+0x5a2>
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	4a37      	ldr	r2, [pc, #220]	; (800df3c <UART_SetConfig+0x348>)
 800de5e:	4293      	cmp	r3, r2
 800de60:	d130      	bne.n	800dec4 <UART_SetConfig+0x2d0>
 800de62:	4b33      	ldr	r3, [pc, #204]	; (800df30 <UART_SetConfig+0x33c>)
 800de64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de66:	f003 0307 	and.w	r3, r3, #7
 800de6a:	2b05      	cmp	r3, #5
 800de6c:	d826      	bhi.n	800debc <UART_SetConfig+0x2c8>
 800de6e:	a201      	add	r2, pc, #4	; (adr r2, 800de74 <UART_SetConfig+0x280>)
 800de70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de74:	0800de8d 	.word	0x0800de8d
 800de78:	0800de95 	.word	0x0800de95
 800de7c:	0800de9d 	.word	0x0800de9d
 800de80:	0800dea5 	.word	0x0800dea5
 800de84:	0800dead 	.word	0x0800dead
 800de88:	0800deb5 	.word	0x0800deb5
 800de8c:	2300      	movs	r3, #0
 800de8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de92:	e180      	b.n	800e196 <UART_SetConfig+0x5a2>
 800de94:	2304      	movs	r3, #4
 800de96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de9a:	e17c      	b.n	800e196 <UART_SetConfig+0x5a2>
 800de9c:	2308      	movs	r3, #8
 800de9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dea2:	e178      	b.n	800e196 <UART_SetConfig+0x5a2>
 800dea4:	2310      	movs	r3, #16
 800dea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800deaa:	e174      	b.n	800e196 <UART_SetConfig+0x5a2>
 800deac:	2320      	movs	r3, #32
 800deae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800deb2:	e170      	b.n	800e196 <UART_SetConfig+0x5a2>
 800deb4:	2340      	movs	r3, #64	; 0x40
 800deb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800deba:	e16c      	b.n	800e196 <UART_SetConfig+0x5a2>
 800debc:	2380      	movs	r3, #128	; 0x80
 800debe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dec2:	e168      	b.n	800e196 <UART_SetConfig+0x5a2>
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	4a1d      	ldr	r2, [pc, #116]	; (800df40 <UART_SetConfig+0x34c>)
 800deca:	4293      	cmp	r3, r2
 800decc:	d142      	bne.n	800df54 <UART_SetConfig+0x360>
 800dece:	4b18      	ldr	r3, [pc, #96]	; (800df30 <UART_SetConfig+0x33c>)
 800ded0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ded2:	f003 0307 	and.w	r3, r3, #7
 800ded6:	2b05      	cmp	r3, #5
 800ded8:	d838      	bhi.n	800df4c <UART_SetConfig+0x358>
 800deda:	a201      	add	r2, pc, #4	; (adr r2, 800dee0 <UART_SetConfig+0x2ec>)
 800dedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dee0:	0800def9 	.word	0x0800def9
 800dee4:	0800df01 	.word	0x0800df01
 800dee8:	0800df09 	.word	0x0800df09
 800deec:	0800df11 	.word	0x0800df11
 800def0:	0800df19 	.word	0x0800df19
 800def4:	0800df45 	.word	0x0800df45
 800def8:	2300      	movs	r3, #0
 800defa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800defe:	e14a      	b.n	800e196 <UART_SetConfig+0x5a2>
 800df00:	2304      	movs	r3, #4
 800df02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df06:	e146      	b.n	800e196 <UART_SetConfig+0x5a2>
 800df08:	2308      	movs	r3, #8
 800df0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df0e:	e142      	b.n	800e196 <UART_SetConfig+0x5a2>
 800df10:	2310      	movs	r3, #16
 800df12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df16:	e13e      	b.n	800e196 <UART_SetConfig+0x5a2>
 800df18:	2320      	movs	r3, #32
 800df1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df1e:	e13a      	b.n	800e196 <UART_SetConfig+0x5a2>
 800df20:	cfff69f3 	.word	0xcfff69f3
 800df24:	58000c00 	.word	0x58000c00
 800df28:	11fff4ff 	.word	0x11fff4ff
 800df2c:	40011000 	.word	0x40011000
 800df30:	58024400 	.word	0x58024400
 800df34:	40004400 	.word	0x40004400
 800df38:	40004800 	.word	0x40004800
 800df3c:	40004c00 	.word	0x40004c00
 800df40:	40005000 	.word	0x40005000
 800df44:	2340      	movs	r3, #64	; 0x40
 800df46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df4a:	e124      	b.n	800e196 <UART_SetConfig+0x5a2>
 800df4c:	2380      	movs	r3, #128	; 0x80
 800df4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df52:	e120      	b.n	800e196 <UART_SetConfig+0x5a2>
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	4acc      	ldr	r2, [pc, #816]	; (800e28c <UART_SetConfig+0x698>)
 800df5a:	4293      	cmp	r3, r2
 800df5c:	d176      	bne.n	800e04c <UART_SetConfig+0x458>
 800df5e:	4bcc      	ldr	r3, [pc, #816]	; (800e290 <UART_SetConfig+0x69c>)
 800df60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800df66:	2b28      	cmp	r3, #40	; 0x28
 800df68:	d86c      	bhi.n	800e044 <UART_SetConfig+0x450>
 800df6a:	a201      	add	r2, pc, #4	; (adr r2, 800df70 <UART_SetConfig+0x37c>)
 800df6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df70:	0800e015 	.word	0x0800e015
 800df74:	0800e045 	.word	0x0800e045
 800df78:	0800e045 	.word	0x0800e045
 800df7c:	0800e045 	.word	0x0800e045
 800df80:	0800e045 	.word	0x0800e045
 800df84:	0800e045 	.word	0x0800e045
 800df88:	0800e045 	.word	0x0800e045
 800df8c:	0800e045 	.word	0x0800e045
 800df90:	0800e01d 	.word	0x0800e01d
 800df94:	0800e045 	.word	0x0800e045
 800df98:	0800e045 	.word	0x0800e045
 800df9c:	0800e045 	.word	0x0800e045
 800dfa0:	0800e045 	.word	0x0800e045
 800dfa4:	0800e045 	.word	0x0800e045
 800dfa8:	0800e045 	.word	0x0800e045
 800dfac:	0800e045 	.word	0x0800e045
 800dfb0:	0800e025 	.word	0x0800e025
 800dfb4:	0800e045 	.word	0x0800e045
 800dfb8:	0800e045 	.word	0x0800e045
 800dfbc:	0800e045 	.word	0x0800e045
 800dfc0:	0800e045 	.word	0x0800e045
 800dfc4:	0800e045 	.word	0x0800e045
 800dfc8:	0800e045 	.word	0x0800e045
 800dfcc:	0800e045 	.word	0x0800e045
 800dfd0:	0800e02d 	.word	0x0800e02d
 800dfd4:	0800e045 	.word	0x0800e045
 800dfd8:	0800e045 	.word	0x0800e045
 800dfdc:	0800e045 	.word	0x0800e045
 800dfe0:	0800e045 	.word	0x0800e045
 800dfe4:	0800e045 	.word	0x0800e045
 800dfe8:	0800e045 	.word	0x0800e045
 800dfec:	0800e045 	.word	0x0800e045
 800dff0:	0800e035 	.word	0x0800e035
 800dff4:	0800e045 	.word	0x0800e045
 800dff8:	0800e045 	.word	0x0800e045
 800dffc:	0800e045 	.word	0x0800e045
 800e000:	0800e045 	.word	0x0800e045
 800e004:	0800e045 	.word	0x0800e045
 800e008:	0800e045 	.word	0x0800e045
 800e00c:	0800e045 	.word	0x0800e045
 800e010:	0800e03d 	.word	0x0800e03d
 800e014:	2301      	movs	r3, #1
 800e016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e01a:	e0bc      	b.n	800e196 <UART_SetConfig+0x5a2>
 800e01c:	2304      	movs	r3, #4
 800e01e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e022:	e0b8      	b.n	800e196 <UART_SetConfig+0x5a2>
 800e024:	2308      	movs	r3, #8
 800e026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e02a:	e0b4      	b.n	800e196 <UART_SetConfig+0x5a2>
 800e02c:	2310      	movs	r3, #16
 800e02e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e032:	e0b0      	b.n	800e196 <UART_SetConfig+0x5a2>
 800e034:	2320      	movs	r3, #32
 800e036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e03a:	e0ac      	b.n	800e196 <UART_SetConfig+0x5a2>
 800e03c:	2340      	movs	r3, #64	; 0x40
 800e03e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e042:	e0a8      	b.n	800e196 <UART_SetConfig+0x5a2>
 800e044:	2380      	movs	r3, #128	; 0x80
 800e046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e04a:	e0a4      	b.n	800e196 <UART_SetConfig+0x5a2>
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	4a90      	ldr	r2, [pc, #576]	; (800e294 <UART_SetConfig+0x6a0>)
 800e052:	4293      	cmp	r3, r2
 800e054:	d130      	bne.n	800e0b8 <UART_SetConfig+0x4c4>
 800e056:	4b8e      	ldr	r3, [pc, #568]	; (800e290 <UART_SetConfig+0x69c>)
 800e058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e05a:	f003 0307 	and.w	r3, r3, #7
 800e05e:	2b05      	cmp	r3, #5
 800e060:	d826      	bhi.n	800e0b0 <UART_SetConfig+0x4bc>
 800e062:	a201      	add	r2, pc, #4	; (adr r2, 800e068 <UART_SetConfig+0x474>)
 800e064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e068:	0800e081 	.word	0x0800e081
 800e06c:	0800e089 	.word	0x0800e089
 800e070:	0800e091 	.word	0x0800e091
 800e074:	0800e099 	.word	0x0800e099
 800e078:	0800e0a1 	.word	0x0800e0a1
 800e07c:	0800e0a9 	.word	0x0800e0a9
 800e080:	2300      	movs	r3, #0
 800e082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e086:	e086      	b.n	800e196 <UART_SetConfig+0x5a2>
 800e088:	2304      	movs	r3, #4
 800e08a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e08e:	e082      	b.n	800e196 <UART_SetConfig+0x5a2>
 800e090:	2308      	movs	r3, #8
 800e092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e096:	e07e      	b.n	800e196 <UART_SetConfig+0x5a2>
 800e098:	2310      	movs	r3, #16
 800e09a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e09e:	e07a      	b.n	800e196 <UART_SetConfig+0x5a2>
 800e0a0:	2320      	movs	r3, #32
 800e0a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0a6:	e076      	b.n	800e196 <UART_SetConfig+0x5a2>
 800e0a8:	2340      	movs	r3, #64	; 0x40
 800e0aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0ae:	e072      	b.n	800e196 <UART_SetConfig+0x5a2>
 800e0b0:	2380      	movs	r3, #128	; 0x80
 800e0b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0b6:	e06e      	b.n	800e196 <UART_SetConfig+0x5a2>
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	4a76      	ldr	r2, [pc, #472]	; (800e298 <UART_SetConfig+0x6a4>)
 800e0be:	4293      	cmp	r3, r2
 800e0c0:	d130      	bne.n	800e124 <UART_SetConfig+0x530>
 800e0c2:	4b73      	ldr	r3, [pc, #460]	; (800e290 <UART_SetConfig+0x69c>)
 800e0c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0c6:	f003 0307 	and.w	r3, r3, #7
 800e0ca:	2b05      	cmp	r3, #5
 800e0cc:	d826      	bhi.n	800e11c <UART_SetConfig+0x528>
 800e0ce:	a201      	add	r2, pc, #4	; (adr r2, 800e0d4 <UART_SetConfig+0x4e0>)
 800e0d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0d4:	0800e0ed 	.word	0x0800e0ed
 800e0d8:	0800e0f5 	.word	0x0800e0f5
 800e0dc:	0800e0fd 	.word	0x0800e0fd
 800e0e0:	0800e105 	.word	0x0800e105
 800e0e4:	0800e10d 	.word	0x0800e10d
 800e0e8:	0800e115 	.word	0x0800e115
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0f2:	e050      	b.n	800e196 <UART_SetConfig+0x5a2>
 800e0f4:	2304      	movs	r3, #4
 800e0f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0fa:	e04c      	b.n	800e196 <UART_SetConfig+0x5a2>
 800e0fc:	2308      	movs	r3, #8
 800e0fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e102:	e048      	b.n	800e196 <UART_SetConfig+0x5a2>
 800e104:	2310      	movs	r3, #16
 800e106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e10a:	e044      	b.n	800e196 <UART_SetConfig+0x5a2>
 800e10c:	2320      	movs	r3, #32
 800e10e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e112:	e040      	b.n	800e196 <UART_SetConfig+0x5a2>
 800e114:	2340      	movs	r3, #64	; 0x40
 800e116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e11a:	e03c      	b.n	800e196 <UART_SetConfig+0x5a2>
 800e11c:	2380      	movs	r3, #128	; 0x80
 800e11e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e122:	e038      	b.n	800e196 <UART_SetConfig+0x5a2>
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	4a5c      	ldr	r2, [pc, #368]	; (800e29c <UART_SetConfig+0x6a8>)
 800e12a:	4293      	cmp	r3, r2
 800e12c:	d130      	bne.n	800e190 <UART_SetConfig+0x59c>
 800e12e:	4b58      	ldr	r3, [pc, #352]	; (800e290 <UART_SetConfig+0x69c>)
 800e130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e132:	f003 0307 	and.w	r3, r3, #7
 800e136:	2b05      	cmp	r3, #5
 800e138:	d826      	bhi.n	800e188 <UART_SetConfig+0x594>
 800e13a:	a201      	add	r2, pc, #4	; (adr r2, 800e140 <UART_SetConfig+0x54c>)
 800e13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e140:	0800e159 	.word	0x0800e159
 800e144:	0800e161 	.word	0x0800e161
 800e148:	0800e169 	.word	0x0800e169
 800e14c:	0800e171 	.word	0x0800e171
 800e150:	0800e179 	.word	0x0800e179
 800e154:	0800e181 	.word	0x0800e181
 800e158:	2302      	movs	r3, #2
 800e15a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e15e:	e01a      	b.n	800e196 <UART_SetConfig+0x5a2>
 800e160:	2304      	movs	r3, #4
 800e162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e166:	e016      	b.n	800e196 <UART_SetConfig+0x5a2>
 800e168:	2308      	movs	r3, #8
 800e16a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e16e:	e012      	b.n	800e196 <UART_SetConfig+0x5a2>
 800e170:	2310      	movs	r3, #16
 800e172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e176:	e00e      	b.n	800e196 <UART_SetConfig+0x5a2>
 800e178:	2320      	movs	r3, #32
 800e17a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e17e:	e00a      	b.n	800e196 <UART_SetConfig+0x5a2>
 800e180:	2340      	movs	r3, #64	; 0x40
 800e182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e186:	e006      	b.n	800e196 <UART_SetConfig+0x5a2>
 800e188:	2380      	movs	r3, #128	; 0x80
 800e18a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e18e:	e002      	b.n	800e196 <UART_SetConfig+0x5a2>
 800e190:	2380      	movs	r3, #128	; 0x80
 800e192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	4a40      	ldr	r2, [pc, #256]	; (800e29c <UART_SetConfig+0x6a8>)
 800e19c:	4293      	cmp	r3, r2
 800e19e:	f040 80ef 	bne.w	800e380 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e1a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e1a6:	2b20      	cmp	r3, #32
 800e1a8:	dc46      	bgt.n	800e238 <UART_SetConfig+0x644>
 800e1aa:	2b02      	cmp	r3, #2
 800e1ac:	f2c0 8081 	blt.w	800e2b2 <UART_SetConfig+0x6be>
 800e1b0:	3b02      	subs	r3, #2
 800e1b2:	2b1e      	cmp	r3, #30
 800e1b4:	d87d      	bhi.n	800e2b2 <UART_SetConfig+0x6be>
 800e1b6:	a201      	add	r2, pc, #4	; (adr r2, 800e1bc <UART_SetConfig+0x5c8>)
 800e1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1bc:	0800e23f 	.word	0x0800e23f
 800e1c0:	0800e2b3 	.word	0x0800e2b3
 800e1c4:	0800e247 	.word	0x0800e247
 800e1c8:	0800e2b3 	.word	0x0800e2b3
 800e1cc:	0800e2b3 	.word	0x0800e2b3
 800e1d0:	0800e2b3 	.word	0x0800e2b3
 800e1d4:	0800e257 	.word	0x0800e257
 800e1d8:	0800e2b3 	.word	0x0800e2b3
 800e1dc:	0800e2b3 	.word	0x0800e2b3
 800e1e0:	0800e2b3 	.word	0x0800e2b3
 800e1e4:	0800e2b3 	.word	0x0800e2b3
 800e1e8:	0800e2b3 	.word	0x0800e2b3
 800e1ec:	0800e2b3 	.word	0x0800e2b3
 800e1f0:	0800e2b3 	.word	0x0800e2b3
 800e1f4:	0800e267 	.word	0x0800e267
 800e1f8:	0800e2b3 	.word	0x0800e2b3
 800e1fc:	0800e2b3 	.word	0x0800e2b3
 800e200:	0800e2b3 	.word	0x0800e2b3
 800e204:	0800e2b3 	.word	0x0800e2b3
 800e208:	0800e2b3 	.word	0x0800e2b3
 800e20c:	0800e2b3 	.word	0x0800e2b3
 800e210:	0800e2b3 	.word	0x0800e2b3
 800e214:	0800e2b3 	.word	0x0800e2b3
 800e218:	0800e2b3 	.word	0x0800e2b3
 800e21c:	0800e2b3 	.word	0x0800e2b3
 800e220:	0800e2b3 	.word	0x0800e2b3
 800e224:	0800e2b3 	.word	0x0800e2b3
 800e228:	0800e2b3 	.word	0x0800e2b3
 800e22c:	0800e2b3 	.word	0x0800e2b3
 800e230:	0800e2b3 	.word	0x0800e2b3
 800e234:	0800e2a5 	.word	0x0800e2a5
 800e238:	2b40      	cmp	r3, #64	; 0x40
 800e23a:	d036      	beq.n	800e2aa <UART_SetConfig+0x6b6>
 800e23c:	e039      	b.n	800e2b2 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e23e:	f7fc fe93 	bl	800af68 <HAL_RCCEx_GetD3PCLK1Freq>
 800e242:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e244:	e03b      	b.n	800e2be <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e246:	f107 0314 	add.w	r3, r7, #20
 800e24a:	4618      	mov	r0, r3
 800e24c:	f7fc fea2 	bl	800af94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e250:	69bb      	ldr	r3, [r7, #24]
 800e252:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e254:	e033      	b.n	800e2be <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e256:	f107 0308 	add.w	r3, r7, #8
 800e25a:	4618      	mov	r0, r3
 800e25c:	f7fc ffee 	bl	800b23c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e264:	e02b      	b.n	800e2be <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e266:	4b0a      	ldr	r3, [pc, #40]	; (800e290 <UART_SetConfig+0x69c>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	f003 0320 	and.w	r3, r3, #32
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d009      	beq.n	800e286 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e272:	4b07      	ldr	r3, [pc, #28]	; (800e290 <UART_SetConfig+0x69c>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	08db      	lsrs	r3, r3, #3
 800e278:	f003 0303 	and.w	r3, r3, #3
 800e27c:	4a08      	ldr	r2, [pc, #32]	; (800e2a0 <UART_SetConfig+0x6ac>)
 800e27e:	fa22 f303 	lsr.w	r3, r2, r3
 800e282:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e284:	e01b      	b.n	800e2be <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800e286:	4b06      	ldr	r3, [pc, #24]	; (800e2a0 <UART_SetConfig+0x6ac>)
 800e288:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e28a:	e018      	b.n	800e2be <UART_SetConfig+0x6ca>
 800e28c:	40011400 	.word	0x40011400
 800e290:	58024400 	.word	0x58024400
 800e294:	40007800 	.word	0x40007800
 800e298:	40007c00 	.word	0x40007c00
 800e29c:	58000c00 	.word	0x58000c00
 800e2a0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e2a4:	4bc4      	ldr	r3, [pc, #784]	; (800e5b8 <UART_SetConfig+0x9c4>)
 800e2a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e2a8:	e009      	b.n	800e2be <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e2aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e2ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e2b0:	e005      	b.n	800e2be <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e2bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	f000 81da 	beq.w	800e67a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2ca:	4abc      	ldr	r2, [pc, #752]	; (800e5bc <UART_SetConfig+0x9c8>)
 800e2cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e2d0:	461a      	mov	r2, r3
 800e2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800e2d8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	685a      	ldr	r2, [r3, #4]
 800e2de:	4613      	mov	r3, r2
 800e2e0:	005b      	lsls	r3, r3, #1
 800e2e2:	4413      	add	r3, r2
 800e2e4:	6a3a      	ldr	r2, [r7, #32]
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	d305      	bcc.n	800e2f6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	685b      	ldr	r3, [r3, #4]
 800e2ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e2f0:	6a3a      	ldr	r2, [r7, #32]
 800e2f2:	429a      	cmp	r2, r3
 800e2f4:	d903      	bls.n	800e2fe <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800e2f6:	2301      	movs	r3, #1
 800e2f8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e2fc:	e1bd      	b.n	800e67a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e300:	4618      	mov	r0, r3
 800e302:	f04f 0100 	mov.w	r1, #0
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e30a:	4aac      	ldr	r2, [pc, #688]	; (800e5bc <UART_SetConfig+0x9c8>)
 800e30c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e310:	b29a      	uxth	r2, r3
 800e312:	f04f 0300 	mov.w	r3, #0
 800e316:	f7f2 f9f7 	bl	8000708 <__aeabi_uldivmod>
 800e31a:	4602      	mov	r2, r0
 800e31c:	460b      	mov	r3, r1
 800e31e:	4610      	mov	r0, r2
 800e320:	4619      	mov	r1, r3
 800e322:	f04f 0200 	mov.w	r2, #0
 800e326:	f04f 0300 	mov.w	r3, #0
 800e32a:	020b      	lsls	r3, r1, #8
 800e32c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e330:	0202      	lsls	r2, r0, #8
 800e332:	6879      	ldr	r1, [r7, #4]
 800e334:	6849      	ldr	r1, [r1, #4]
 800e336:	0849      	lsrs	r1, r1, #1
 800e338:	4608      	mov	r0, r1
 800e33a:	f04f 0100 	mov.w	r1, #0
 800e33e:	1814      	adds	r4, r2, r0
 800e340:	eb43 0501 	adc.w	r5, r3, r1
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	685b      	ldr	r3, [r3, #4]
 800e348:	461a      	mov	r2, r3
 800e34a:	f04f 0300 	mov.w	r3, #0
 800e34e:	4620      	mov	r0, r4
 800e350:	4629      	mov	r1, r5
 800e352:	f7f2 f9d9 	bl	8000708 <__aeabi_uldivmod>
 800e356:	4602      	mov	r2, r0
 800e358:	460b      	mov	r3, r1
 800e35a:	4613      	mov	r3, r2
 800e35c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e360:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e364:	d308      	bcc.n	800e378 <UART_SetConfig+0x784>
 800e366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e368:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e36c:	d204      	bcs.n	800e378 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e374:	60da      	str	r2, [r3, #12]
 800e376:	e180      	b.n	800e67a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800e378:	2301      	movs	r3, #1
 800e37a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e37e:	e17c      	b.n	800e67a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	69db      	ldr	r3, [r3, #28]
 800e384:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e388:	f040 80be 	bne.w	800e508 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800e38c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e390:	2b20      	cmp	r3, #32
 800e392:	dc49      	bgt.n	800e428 <UART_SetConfig+0x834>
 800e394:	2b00      	cmp	r3, #0
 800e396:	db7c      	blt.n	800e492 <UART_SetConfig+0x89e>
 800e398:	2b20      	cmp	r3, #32
 800e39a:	d87a      	bhi.n	800e492 <UART_SetConfig+0x89e>
 800e39c:	a201      	add	r2, pc, #4	; (adr r2, 800e3a4 <UART_SetConfig+0x7b0>)
 800e39e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3a2:	bf00      	nop
 800e3a4:	0800e42f 	.word	0x0800e42f
 800e3a8:	0800e437 	.word	0x0800e437
 800e3ac:	0800e493 	.word	0x0800e493
 800e3b0:	0800e493 	.word	0x0800e493
 800e3b4:	0800e43f 	.word	0x0800e43f
 800e3b8:	0800e493 	.word	0x0800e493
 800e3bc:	0800e493 	.word	0x0800e493
 800e3c0:	0800e493 	.word	0x0800e493
 800e3c4:	0800e44f 	.word	0x0800e44f
 800e3c8:	0800e493 	.word	0x0800e493
 800e3cc:	0800e493 	.word	0x0800e493
 800e3d0:	0800e493 	.word	0x0800e493
 800e3d4:	0800e493 	.word	0x0800e493
 800e3d8:	0800e493 	.word	0x0800e493
 800e3dc:	0800e493 	.word	0x0800e493
 800e3e0:	0800e493 	.word	0x0800e493
 800e3e4:	0800e45f 	.word	0x0800e45f
 800e3e8:	0800e493 	.word	0x0800e493
 800e3ec:	0800e493 	.word	0x0800e493
 800e3f0:	0800e493 	.word	0x0800e493
 800e3f4:	0800e493 	.word	0x0800e493
 800e3f8:	0800e493 	.word	0x0800e493
 800e3fc:	0800e493 	.word	0x0800e493
 800e400:	0800e493 	.word	0x0800e493
 800e404:	0800e493 	.word	0x0800e493
 800e408:	0800e493 	.word	0x0800e493
 800e40c:	0800e493 	.word	0x0800e493
 800e410:	0800e493 	.word	0x0800e493
 800e414:	0800e493 	.word	0x0800e493
 800e418:	0800e493 	.word	0x0800e493
 800e41c:	0800e493 	.word	0x0800e493
 800e420:	0800e493 	.word	0x0800e493
 800e424:	0800e485 	.word	0x0800e485
 800e428:	2b40      	cmp	r3, #64	; 0x40
 800e42a:	d02e      	beq.n	800e48a <UART_SetConfig+0x896>
 800e42c:	e031      	b.n	800e492 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e42e:	f7fb fe2f 	bl	800a090 <HAL_RCC_GetPCLK1Freq>
 800e432:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e434:	e033      	b.n	800e49e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e436:	f7fb fe41 	bl	800a0bc <HAL_RCC_GetPCLK2Freq>
 800e43a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e43c:	e02f      	b.n	800e49e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e43e:	f107 0314 	add.w	r3, r7, #20
 800e442:	4618      	mov	r0, r3
 800e444:	f7fc fda6 	bl	800af94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e448:	69bb      	ldr	r3, [r7, #24]
 800e44a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e44c:	e027      	b.n	800e49e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e44e:	f107 0308 	add.w	r3, r7, #8
 800e452:	4618      	mov	r0, r3
 800e454:	f7fc fef2 	bl	800b23c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e45c:	e01f      	b.n	800e49e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e45e:	4b58      	ldr	r3, [pc, #352]	; (800e5c0 <UART_SetConfig+0x9cc>)
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	f003 0320 	and.w	r3, r3, #32
 800e466:	2b00      	cmp	r3, #0
 800e468:	d009      	beq.n	800e47e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e46a:	4b55      	ldr	r3, [pc, #340]	; (800e5c0 <UART_SetConfig+0x9cc>)
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	08db      	lsrs	r3, r3, #3
 800e470:	f003 0303 	and.w	r3, r3, #3
 800e474:	4a53      	ldr	r2, [pc, #332]	; (800e5c4 <UART_SetConfig+0x9d0>)
 800e476:	fa22 f303 	lsr.w	r3, r2, r3
 800e47a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e47c:	e00f      	b.n	800e49e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800e47e:	4b51      	ldr	r3, [pc, #324]	; (800e5c4 <UART_SetConfig+0x9d0>)
 800e480:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e482:	e00c      	b.n	800e49e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e484:	4b4c      	ldr	r3, [pc, #304]	; (800e5b8 <UART_SetConfig+0x9c4>)
 800e486:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e488:	e009      	b.n	800e49e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e48a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e48e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e490:	e005      	b.n	800e49e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800e492:	2300      	movs	r3, #0
 800e494:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e496:	2301      	movs	r3, #1
 800e498:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e49c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	f000 80ea 	beq.w	800e67a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4aa:	4a44      	ldr	r2, [pc, #272]	; (800e5bc <UART_SetConfig+0x9c8>)
 800e4ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e4b0:	461a      	mov	r2, r3
 800e4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800e4b8:	005a      	lsls	r2, r3, #1
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	685b      	ldr	r3, [r3, #4]
 800e4be:	085b      	lsrs	r3, r3, #1
 800e4c0:	441a      	add	r2, r3
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	685b      	ldr	r3, [r3, #4]
 800e4c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4ca:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ce:	2b0f      	cmp	r3, #15
 800e4d0:	d916      	bls.n	800e500 <UART_SetConfig+0x90c>
 800e4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e4d8:	d212      	bcs.n	800e500 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4dc:	b29b      	uxth	r3, r3
 800e4de:	f023 030f 	bic.w	r3, r3, #15
 800e4e2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e6:	085b      	lsrs	r3, r3, #1
 800e4e8:	b29b      	uxth	r3, r3
 800e4ea:	f003 0307 	and.w	r3, r3, #7
 800e4ee:	b29a      	uxth	r2, r3
 800e4f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e4f2:	4313      	orrs	r3, r2
 800e4f4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e4fc:	60da      	str	r2, [r3, #12]
 800e4fe:	e0bc      	b.n	800e67a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800e500:	2301      	movs	r3, #1
 800e502:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e506:	e0b8      	b.n	800e67a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e508:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e50c:	2b20      	cmp	r3, #32
 800e50e:	dc4b      	bgt.n	800e5a8 <UART_SetConfig+0x9b4>
 800e510:	2b00      	cmp	r3, #0
 800e512:	f2c0 8087 	blt.w	800e624 <UART_SetConfig+0xa30>
 800e516:	2b20      	cmp	r3, #32
 800e518:	f200 8084 	bhi.w	800e624 <UART_SetConfig+0xa30>
 800e51c:	a201      	add	r2, pc, #4	; (adr r2, 800e524 <UART_SetConfig+0x930>)
 800e51e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e522:	bf00      	nop
 800e524:	0800e5af 	.word	0x0800e5af
 800e528:	0800e5c9 	.word	0x0800e5c9
 800e52c:	0800e625 	.word	0x0800e625
 800e530:	0800e625 	.word	0x0800e625
 800e534:	0800e5d1 	.word	0x0800e5d1
 800e538:	0800e625 	.word	0x0800e625
 800e53c:	0800e625 	.word	0x0800e625
 800e540:	0800e625 	.word	0x0800e625
 800e544:	0800e5e1 	.word	0x0800e5e1
 800e548:	0800e625 	.word	0x0800e625
 800e54c:	0800e625 	.word	0x0800e625
 800e550:	0800e625 	.word	0x0800e625
 800e554:	0800e625 	.word	0x0800e625
 800e558:	0800e625 	.word	0x0800e625
 800e55c:	0800e625 	.word	0x0800e625
 800e560:	0800e625 	.word	0x0800e625
 800e564:	0800e5f1 	.word	0x0800e5f1
 800e568:	0800e625 	.word	0x0800e625
 800e56c:	0800e625 	.word	0x0800e625
 800e570:	0800e625 	.word	0x0800e625
 800e574:	0800e625 	.word	0x0800e625
 800e578:	0800e625 	.word	0x0800e625
 800e57c:	0800e625 	.word	0x0800e625
 800e580:	0800e625 	.word	0x0800e625
 800e584:	0800e625 	.word	0x0800e625
 800e588:	0800e625 	.word	0x0800e625
 800e58c:	0800e625 	.word	0x0800e625
 800e590:	0800e625 	.word	0x0800e625
 800e594:	0800e625 	.word	0x0800e625
 800e598:	0800e625 	.word	0x0800e625
 800e59c:	0800e625 	.word	0x0800e625
 800e5a0:	0800e625 	.word	0x0800e625
 800e5a4:	0800e617 	.word	0x0800e617
 800e5a8:	2b40      	cmp	r3, #64	; 0x40
 800e5aa:	d037      	beq.n	800e61c <UART_SetConfig+0xa28>
 800e5ac:	e03a      	b.n	800e624 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e5ae:	f7fb fd6f 	bl	800a090 <HAL_RCC_GetPCLK1Freq>
 800e5b2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e5b4:	e03c      	b.n	800e630 <UART_SetConfig+0xa3c>
 800e5b6:	bf00      	nop
 800e5b8:	003d0900 	.word	0x003d0900
 800e5bc:	080132e8 	.word	0x080132e8
 800e5c0:	58024400 	.word	0x58024400
 800e5c4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e5c8:	f7fb fd78 	bl	800a0bc <HAL_RCC_GetPCLK2Freq>
 800e5cc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e5ce:	e02f      	b.n	800e630 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e5d0:	f107 0314 	add.w	r3, r7, #20
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	f7fc fcdd 	bl	800af94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e5da:	69bb      	ldr	r3, [r7, #24]
 800e5dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e5de:	e027      	b.n	800e630 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e5e0:	f107 0308 	add.w	r3, r7, #8
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f7fc fe29 	bl	800b23c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e5ee:	e01f      	b.n	800e630 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e5f0:	4b2c      	ldr	r3, [pc, #176]	; (800e6a4 <UART_SetConfig+0xab0>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	f003 0320 	and.w	r3, r3, #32
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d009      	beq.n	800e610 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e5fc:	4b29      	ldr	r3, [pc, #164]	; (800e6a4 <UART_SetConfig+0xab0>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	08db      	lsrs	r3, r3, #3
 800e602:	f003 0303 	and.w	r3, r3, #3
 800e606:	4a28      	ldr	r2, [pc, #160]	; (800e6a8 <UART_SetConfig+0xab4>)
 800e608:	fa22 f303 	lsr.w	r3, r2, r3
 800e60c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e60e:	e00f      	b.n	800e630 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800e610:	4b25      	ldr	r3, [pc, #148]	; (800e6a8 <UART_SetConfig+0xab4>)
 800e612:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e614:	e00c      	b.n	800e630 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e616:	4b25      	ldr	r3, [pc, #148]	; (800e6ac <UART_SetConfig+0xab8>)
 800e618:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e61a:	e009      	b.n	800e630 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e61c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e620:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e622:	e005      	b.n	800e630 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800e624:	2300      	movs	r3, #0
 800e626:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e628:	2301      	movs	r3, #1
 800e62a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e62e:	bf00      	nop
    }

    if (pclk != 0U)
 800e630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e632:	2b00      	cmp	r3, #0
 800e634:	d021      	beq.n	800e67a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e63a:	4a1d      	ldr	r2, [pc, #116]	; (800e6b0 <UART_SetConfig+0xabc>)
 800e63c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e640:	461a      	mov	r2, r3
 800e642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e644:	fbb3 f2f2 	udiv	r2, r3, r2
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	685b      	ldr	r3, [r3, #4]
 800e64c:	085b      	lsrs	r3, r3, #1
 800e64e:	441a      	add	r2, r3
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	685b      	ldr	r3, [r3, #4]
 800e654:	fbb2 f3f3 	udiv	r3, r2, r3
 800e658:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e65c:	2b0f      	cmp	r3, #15
 800e65e:	d909      	bls.n	800e674 <UART_SetConfig+0xa80>
 800e660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e666:	d205      	bcs.n	800e674 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e66a:	b29a      	uxth	r2, r3
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	60da      	str	r2, [r3, #12]
 800e672:	e002      	b.n	800e67a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800e674:	2301      	movs	r3, #1
 800e676:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2201      	movs	r2, #1
 800e67e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2201      	movs	r2, #1
 800e686:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2200      	movs	r2, #0
 800e68e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2200      	movs	r2, #0
 800e694:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e696:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800e69a:	4618      	mov	r0, r3
 800e69c:	3738      	adds	r7, #56	; 0x38
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bdb0      	pop	{r4, r5, r7, pc}
 800e6a2:	bf00      	nop
 800e6a4:	58024400 	.word	0x58024400
 800e6a8:	03d09000 	.word	0x03d09000
 800e6ac:	003d0900 	.word	0x003d0900
 800e6b0:	080132e8 	.word	0x080132e8

0800e6b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e6b4:	b480      	push	{r7}
 800e6b6:	b083      	sub	sp, #12
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6c0:	f003 0301 	and.w	r3, r3, #1
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d00a      	beq.n	800e6de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	685b      	ldr	r3, [r3, #4]
 800e6ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	430a      	orrs	r2, r1
 800e6dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6e2:	f003 0302 	and.w	r3, r3, #2
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d00a      	beq.n	800e700 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	685b      	ldr	r3, [r3, #4]
 800e6f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	430a      	orrs	r2, r1
 800e6fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e704:	f003 0304 	and.w	r3, r3, #4
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d00a      	beq.n	800e722 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	685b      	ldr	r3, [r3, #4]
 800e712:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	430a      	orrs	r2, r1
 800e720:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e726:	f003 0308 	and.w	r3, r3, #8
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d00a      	beq.n	800e744 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	685b      	ldr	r3, [r3, #4]
 800e734:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	430a      	orrs	r2, r1
 800e742:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e748:	f003 0310 	and.w	r3, r3, #16
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d00a      	beq.n	800e766 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	689b      	ldr	r3, [r3, #8]
 800e756:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	430a      	orrs	r2, r1
 800e764:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e76a:	f003 0320 	and.w	r3, r3, #32
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d00a      	beq.n	800e788 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	689b      	ldr	r3, [r3, #8]
 800e778:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	430a      	orrs	r2, r1
 800e786:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e78c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e790:	2b00      	cmp	r3, #0
 800e792:	d01a      	beq.n	800e7ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	685b      	ldr	r3, [r3, #4]
 800e79a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	430a      	orrs	r2, r1
 800e7a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e7b2:	d10a      	bne.n	800e7ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	685b      	ldr	r3, [r3, #4]
 800e7ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	430a      	orrs	r2, r1
 800e7c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d00a      	beq.n	800e7ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	685b      	ldr	r3, [r3, #4]
 800e7dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	430a      	orrs	r2, r1
 800e7ea:	605a      	str	r2, [r3, #4]
  }
}
 800e7ec:	bf00      	nop
 800e7ee:	370c      	adds	r7, #12
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f6:	4770      	bx	lr

0800e7f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b086      	sub	sp, #24
 800e7fc:	af02      	add	r7, sp, #8
 800e7fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2200      	movs	r2, #0
 800e804:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e808:	f7f7 f908 	bl	8005a1c <HAL_GetTick>
 800e80c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	f003 0308 	and.w	r3, r3, #8
 800e818:	2b08      	cmp	r3, #8
 800e81a:	d10e      	bne.n	800e83a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e81c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e820:	9300      	str	r3, [sp, #0]
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	2200      	movs	r2, #0
 800e826:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f000 f82f 	bl	800e88e <UART_WaitOnFlagUntilTimeout>
 800e830:	4603      	mov	r3, r0
 800e832:	2b00      	cmp	r3, #0
 800e834:	d001      	beq.n	800e83a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e836:	2303      	movs	r3, #3
 800e838:	e025      	b.n	800e886 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	f003 0304 	and.w	r3, r3, #4
 800e844:	2b04      	cmp	r3, #4
 800e846:	d10e      	bne.n	800e866 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e848:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e84c:	9300      	str	r3, [sp, #0]
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	2200      	movs	r2, #0
 800e852:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e856:	6878      	ldr	r0, [r7, #4]
 800e858:	f000 f819 	bl	800e88e <UART_WaitOnFlagUntilTimeout>
 800e85c:	4603      	mov	r3, r0
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d001      	beq.n	800e866 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e862:	2303      	movs	r3, #3
 800e864:	e00f      	b.n	800e886 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2220      	movs	r2, #32
 800e86a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2220      	movs	r2, #32
 800e872:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2200      	movs	r2, #0
 800e87a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	2200      	movs	r2, #0
 800e880:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e884:	2300      	movs	r3, #0
}
 800e886:	4618      	mov	r0, r3
 800e888:	3710      	adds	r7, #16
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bd80      	pop	{r7, pc}

0800e88e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e88e:	b580      	push	{r7, lr}
 800e890:	b09c      	sub	sp, #112	; 0x70
 800e892:	af00      	add	r7, sp, #0
 800e894:	60f8      	str	r0, [r7, #12]
 800e896:	60b9      	str	r1, [r7, #8]
 800e898:	603b      	str	r3, [r7, #0]
 800e89a:	4613      	mov	r3, r2
 800e89c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e89e:	e0a9      	b.n	800e9f4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e8a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e8a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8a6:	f000 80a5 	beq.w	800e9f4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e8aa:	f7f7 f8b7 	bl	8005a1c <HAL_GetTick>
 800e8ae:	4602      	mov	r2, r0
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	1ad3      	subs	r3, r2, r3
 800e8b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e8b6:	429a      	cmp	r2, r3
 800e8b8:	d302      	bcc.n	800e8c0 <UART_WaitOnFlagUntilTimeout+0x32>
 800e8ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d140      	bne.n	800e942 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8c8:	e853 3f00 	ldrex	r3, [r3]
 800e8cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e8ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e8d4:	667b      	str	r3, [r7, #100]	; 0x64
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	461a      	mov	r2, r3
 800e8dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e8de:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e8e0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e8e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e8e6:	e841 2300 	strex	r3, r2, [r1]
 800e8ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e8ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d1e6      	bne.n	800e8c0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	3308      	adds	r3, #8
 800e8f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8fc:	e853 3f00 	ldrex	r3, [r3]
 800e900:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e904:	f023 0301 	bic.w	r3, r3, #1
 800e908:	663b      	str	r3, [r7, #96]	; 0x60
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	3308      	adds	r3, #8
 800e910:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e912:	64ba      	str	r2, [r7, #72]	; 0x48
 800e914:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e916:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e918:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e91a:	e841 2300 	strex	r3, r2, [r1]
 800e91e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e922:	2b00      	cmp	r3, #0
 800e924:	d1e5      	bne.n	800e8f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	2220      	movs	r2, #32
 800e92a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	2220      	movs	r2, #32
 800e932:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	2200      	movs	r2, #0
 800e93a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e93e:	2303      	movs	r3, #3
 800e940:	e069      	b.n	800ea16 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	f003 0304 	and.w	r3, r3, #4
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d051      	beq.n	800e9f4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	69db      	ldr	r3, [r3, #28]
 800e956:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e95a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e95e:	d149      	bne.n	800e9f4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e968:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e972:	e853 3f00 	ldrex	r3, [r3]
 800e976:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e97a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e97e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	461a      	mov	r2, r3
 800e986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e988:	637b      	str	r3, [r7, #52]	; 0x34
 800e98a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e98c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e98e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e990:	e841 2300 	strex	r3, r2, [r1]
 800e994:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d1e6      	bne.n	800e96a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	3308      	adds	r3, #8
 800e9a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9a4:	697b      	ldr	r3, [r7, #20]
 800e9a6:	e853 3f00 	ldrex	r3, [r3]
 800e9aa:	613b      	str	r3, [r7, #16]
   return(result);
 800e9ac:	693b      	ldr	r3, [r7, #16]
 800e9ae:	f023 0301 	bic.w	r3, r3, #1
 800e9b2:	66bb      	str	r3, [r7, #104]	; 0x68
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	3308      	adds	r3, #8
 800e9ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e9bc:	623a      	str	r2, [r7, #32]
 800e9be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9c0:	69f9      	ldr	r1, [r7, #28]
 800e9c2:	6a3a      	ldr	r2, [r7, #32]
 800e9c4:	e841 2300 	strex	r3, r2, [r1]
 800e9c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800e9ca:	69bb      	ldr	r3, [r7, #24]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d1e5      	bne.n	800e99c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	2220      	movs	r2, #32
 800e9d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	2220      	movs	r2, #32
 800e9dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	2220      	movs	r2, #32
 800e9e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e9f0:	2303      	movs	r3, #3
 800e9f2:	e010      	b.n	800ea16 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	69da      	ldr	r2, [r3, #28]
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	4013      	ands	r3, r2
 800e9fe:	68ba      	ldr	r2, [r7, #8]
 800ea00:	429a      	cmp	r2, r3
 800ea02:	bf0c      	ite	eq
 800ea04:	2301      	moveq	r3, #1
 800ea06:	2300      	movne	r3, #0
 800ea08:	b2db      	uxtb	r3, r3
 800ea0a:	461a      	mov	r2, r3
 800ea0c:	79fb      	ldrb	r3, [r7, #7]
 800ea0e:	429a      	cmp	r2, r3
 800ea10:	f43f af46 	beq.w	800e8a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ea14:	2300      	movs	r3, #0
}
 800ea16:	4618      	mov	r0, r3
 800ea18:	3770      	adds	r7, #112	; 0x70
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	bd80      	pop	{r7, pc}
	...

0800ea20 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b096      	sub	sp, #88	; 0x58
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	60f8      	str	r0, [r7, #12]
 800ea28:	60b9      	str	r1, [r7, #8]
 800ea2a:	4613      	mov	r3, r2
 800ea2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	68ba      	ldr	r2, [r7, #8]
 800ea32:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	88fa      	ldrh	r2, [r7, #6]
 800ea38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	2200      	movs	r2, #0
 800ea40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	2222      	movs	r2, #34	; 0x22
 800ea48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d02c      	beq.n	800eaae <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea58:	4a42      	ldr	r2, [pc, #264]	; (800eb64 <UART_Start_Receive_DMA+0x144>)
 800ea5a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea60:	4a41      	ldr	r2, [pc, #260]	; (800eb68 <UART_Start_Receive_DMA+0x148>)
 800ea62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea68:	4a40      	ldr	r2, [pc, #256]	; (800eb6c <UART_Start_Receive_DMA+0x14c>)
 800ea6a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea70:	2200      	movs	r2, #0
 800ea72:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	3324      	adds	r3, #36	; 0x24
 800ea7e:	4619      	mov	r1, r3
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea84:	461a      	mov	r2, r3
 800ea86:	88fb      	ldrh	r3, [r7, #6]
 800ea88:	f7f7 fe7a 	bl	8006780 <HAL_DMA_Start_IT>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d00d      	beq.n	800eaae <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	2210      	movs	r2, #16
 800ea96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	2220      	movs	r2, #32
 800eaa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800eaaa:	2301      	movs	r3, #1
 800eaac:	e055      	b.n	800eb5a <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	2200      	movs	r2, #0
 800eab2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	691b      	ldr	r3, [r3, #16]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d018      	beq.n	800eaf0 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eac6:	e853 3f00 	ldrex	r3, [r3]
 800eaca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ead2:	657b      	str	r3, [r7, #84]	; 0x54
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	461a      	mov	r2, r3
 800eada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eadc:	64bb      	str	r3, [r7, #72]	; 0x48
 800eade:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eae0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eae2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eae4:	e841 2300 	strex	r3, r2, [r1]
 800eae8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800eaea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d1e6      	bne.n	800eabe <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	3308      	adds	r3, #8
 800eaf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eafa:	e853 3f00 	ldrex	r3, [r3]
 800eafe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb02:	f043 0301 	orr.w	r3, r3, #1
 800eb06:	653b      	str	r3, [r7, #80]	; 0x50
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	3308      	adds	r3, #8
 800eb0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eb10:	637a      	str	r2, [r7, #52]	; 0x34
 800eb12:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eb16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eb18:	e841 2300 	strex	r3, r2, [r1]
 800eb1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800eb1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d1e5      	bne.n	800eaf0 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	3308      	adds	r3, #8
 800eb2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb2c:	697b      	ldr	r3, [r7, #20]
 800eb2e:	e853 3f00 	ldrex	r3, [r3]
 800eb32:	613b      	str	r3, [r7, #16]
   return(result);
 800eb34:	693b      	ldr	r3, [r7, #16]
 800eb36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	3308      	adds	r3, #8
 800eb42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eb44:	623a      	str	r2, [r7, #32]
 800eb46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb48:	69f9      	ldr	r1, [r7, #28]
 800eb4a:	6a3a      	ldr	r2, [r7, #32]
 800eb4c:	e841 2300 	strex	r3, r2, [r1]
 800eb50:	61bb      	str	r3, [r7, #24]
   return(result);
 800eb52:	69bb      	ldr	r3, [r7, #24]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d1e5      	bne.n	800eb24 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800eb58:	2300      	movs	r3, #0
}
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	3758      	adds	r7, #88	; 0x58
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	bd80      	pop	{r7, pc}
 800eb62:	bf00      	nop
 800eb64:	0800ed73 	.word	0x0800ed73
 800eb68:	0800ee95 	.word	0x0800ee95
 800eb6c:	0800eecd 	.word	0x0800eecd

0800eb70 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800eb70:	b480      	push	{r7}
 800eb72:	b08f      	sub	sp, #60	; 0x3c
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb7e:	6a3b      	ldr	r3, [r7, #32]
 800eb80:	e853 3f00 	ldrex	r3, [r3]
 800eb84:	61fb      	str	r3, [r7, #28]
   return(result);
 800eb86:	69fb      	ldr	r3, [r7, #28]
 800eb88:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800eb8c:	637b      	str	r3, [r7, #52]	; 0x34
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	461a      	mov	r2, r3
 800eb94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb96:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb98:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eb9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb9e:	e841 2300 	strex	r3, r2, [r1]
 800eba2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d1e6      	bne.n	800eb78 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	3308      	adds	r3, #8
 800ebb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	e853 3f00 	ldrex	r3, [r3]
 800ebb8:	60bb      	str	r3, [r7, #8]
   return(result);
 800ebba:	68bb      	ldr	r3, [r7, #8]
 800ebbc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ebc0:	633b      	str	r3, [r7, #48]	; 0x30
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	3308      	adds	r3, #8
 800ebc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebca:	61ba      	str	r2, [r7, #24]
 800ebcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebce:	6979      	ldr	r1, [r7, #20]
 800ebd0:	69ba      	ldr	r2, [r7, #24]
 800ebd2:	e841 2300 	strex	r3, r2, [r1]
 800ebd6:	613b      	str	r3, [r7, #16]
   return(result);
 800ebd8:	693b      	ldr	r3, [r7, #16]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d1e5      	bne.n	800ebaa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	2220      	movs	r2, #32
 800ebe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800ebe6:	bf00      	nop
 800ebe8:	373c      	adds	r7, #60	; 0x3c
 800ebea:	46bd      	mov	sp, r7
 800ebec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf0:	4770      	bx	lr
	...

0800ebf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ebf4:	b480      	push	{r7}
 800ebf6:	b095      	sub	sp, #84	; 0x54
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec04:	e853 3f00 	ldrex	r3, [r3]
 800ec08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ec0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ec10:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	461a      	mov	r2, r3
 800ec18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec1a:	643b      	str	r3, [r7, #64]	; 0x40
 800ec1c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ec20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ec22:	e841 2300 	strex	r3, r2, [r1]
 800ec26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ec28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d1e6      	bne.n	800ebfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	3308      	adds	r3, #8
 800ec34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec36:	6a3b      	ldr	r3, [r7, #32]
 800ec38:	e853 3f00 	ldrex	r3, [r3]
 800ec3c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ec3e:	69fa      	ldr	r2, [r7, #28]
 800ec40:	4b1e      	ldr	r3, [pc, #120]	; (800ecbc <UART_EndRxTransfer+0xc8>)
 800ec42:	4013      	ands	r3, r2
 800ec44:	64bb      	str	r3, [r7, #72]	; 0x48
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	3308      	adds	r3, #8
 800ec4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ec50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ec54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec56:	e841 2300 	strex	r3, r2, [r1]
 800ec5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ec5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d1e5      	bne.n	800ec2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec66:	2b01      	cmp	r3, #1
 800ec68:	d118      	bne.n	800ec9c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	e853 3f00 	ldrex	r3, [r3]
 800ec76:	60bb      	str	r3, [r7, #8]
   return(result);
 800ec78:	68bb      	ldr	r3, [r7, #8]
 800ec7a:	f023 0310 	bic.w	r3, r3, #16
 800ec7e:	647b      	str	r3, [r7, #68]	; 0x44
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	461a      	mov	r2, r3
 800ec86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec88:	61bb      	str	r3, [r7, #24]
 800ec8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec8c:	6979      	ldr	r1, [r7, #20]
 800ec8e:	69ba      	ldr	r2, [r7, #24]
 800ec90:	e841 2300 	strex	r3, r2, [r1]
 800ec94:	613b      	str	r3, [r7, #16]
   return(result);
 800ec96:	693b      	ldr	r3, [r7, #16]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d1e6      	bne.n	800ec6a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2220      	movs	r2, #32
 800eca0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2200      	movs	r2, #0
 800eca8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2200      	movs	r2, #0
 800ecae:	671a      	str	r2, [r3, #112]	; 0x70
}
 800ecb0:	bf00      	nop
 800ecb2:	3754      	adds	r7, #84	; 0x54
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecba:	4770      	bx	lr
 800ecbc:	effffffe 	.word	0xeffffffe

0800ecc0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b090      	sub	sp, #64	; 0x40
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eccc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	69db      	ldr	r3, [r3, #28]
 800ecd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ecd6:	d037      	beq.n	800ed48 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800ecd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecda:	2200      	movs	r2, #0
 800ecdc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ece0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	3308      	adds	r3, #8
 800ece6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ece8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecea:	e853 3f00 	ldrex	r3, [r3]
 800ecee:	623b      	str	r3, [r7, #32]
   return(result);
 800ecf0:	6a3b      	ldr	r3, [r7, #32]
 800ecf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ecf6:	63bb      	str	r3, [r7, #56]	; 0x38
 800ecf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	3308      	adds	r3, #8
 800ecfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed00:	633a      	str	r2, [r7, #48]	; 0x30
 800ed02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ed06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed08:	e841 2300 	strex	r3, r2, [r1]
 800ed0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ed0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d1e5      	bne.n	800ece0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ed14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed1a:	693b      	ldr	r3, [r7, #16]
 800ed1c:	e853 3f00 	ldrex	r3, [r3]
 800ed20:	60fb      	str	r3, [r7, #12]
   return(result);
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed28:	637b      	str	r3, [r7, #52]	; 0x34
 800ed2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	461a      	mov	r2, r3
 800ed30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed32:	61fb      	str	r3, [r7, #28]
 800ed34:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed36:	69b9      	ldr	r1, [r7, #24]
 800ed38:	69fa      	ldr	r2, [r7, #28]
 800ed3a:	e841 2300 	strex	r3, r2, [r1]
 800ed3e:	617b      	str	r3, [r7, #20]
   return(result);
 800ed40:	697b      	ldr	r3, [r7, #20]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d1e6      	bne.n	800ed14 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ed46:	e002      	b.n	800ed4e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800ed48:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ed4a:	f7fe ff2b 	bl	800dba4 <HAL_UART_TxCpltCallback>
}
 800ed4e:	bf00      	nop
 800ed50:	3740      	adds	r7, #64	; 0x40
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}

0800ed56 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ed56:	b580      	push	{r7, lr}
 800ed58:	b084      	sub	sp, #16
 800ed5a:	af00      	add	r7, sp, #0
 800ed5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed62:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ed64:	68f8      	ldr	r0, [r7, #12]
 800ed66:	f7fe ff27 	bl	800dbb8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ed6a:	bf00      	nop
 800ed6c:	3710      	adds	r7, #16
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}

0800ed72 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ed72:	b580      	push	{r7, lr}
 800ed74:	b09c      	sub	sp, #112	; 0x70
 800ed76:	af00      	add	r7, sp, #0
 800ed78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed7e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	69db      	ldr	r3, [r3, #28]
 800ed84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed88:	d071      	beq.n	800ee6e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ed8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ed92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed9a:	e853 3f00 	ldrex	r3, [r3]
 800ed9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800eda0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eda2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eda6:	66bb      	str	r3, [r7, #104]	; 0x68
 800eda8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	461a      	mov	r2, r3
 800edae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800edb0:	65bb      	str	r3, [r7, #88]	; 0x58
 800edb2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edb4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800edb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800edb8:	e841 2300 	strex	r3, r2, [r1]
 800edbc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800edbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d1e6      	bne.n	800ed92 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800edc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	3308      	adds	r3, #8
 800edca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edce:	e853 3f00 	ldrex	r3, [r3]
 800edd2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800edd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edd6:	f023 0301 	bic.w	r3, r3, #1
 800edda:	667b      	str	r3, [r7, #100]	; 0x64
 800eddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	3308      	adds	r3, #8
 800ede2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ede4:	647a      	str	r2, [r7, #68]	; 0x44
 800ede6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ede8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800edea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800edec:	e841 2300 	strex	r3, r2, [r1]
 800edf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800edf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d1e5      	bne.n	800edc4 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800edf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	3308      	adds	r3, #8
 800edfe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee02:	e853 3f00 	ldrex	r3, [r3]
 800ee06:	623b      	str	r3, [r7, #32]
   return(result);
 800ee08:	6a3b      	ldr	r3, [r7, #32]
 800ee0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ee0e:	663b      	str	r3, [r7, #96]	; 0x60
 800ee10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	3308      	adds	r3, #8
 800ee16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ee18:	633a      	str	r2, [r7, #48]	; 0x30
 800ee1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ee1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee20:	e841 2300 	strex	r3, r2, [r1]
 800ee24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ee26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d1e5      	bne.n	800edf8 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ee2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee2e:	2220      	movs	r2, #32
 800ee30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee38:	2b01      	cmp	r3, #1
 800ee3a:	d118      	bne.n	800ee6e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee42:	693b      	ldr	r3, [r7, #16]
 800ee44:	e853 3f00 	ldrex	r3, [r3]
 800ee48:	60fb      	str	r3, [r7, #12]
   return(result);
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	f023 0310 	bic.w	r3, r3, #16
 800ee50:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ee52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	461a      	mov	r2, r3
 800ee58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee5a:	61fb      	str	r3, [r7, #28]
 800ee5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee5e:	69b9      	ldr	r1, [r7, #24]
 800ee60:	69fa      	ldr	r2, [r7, #28]
 800ee62:	e841 2300 	strex	r3, r2, [r1]
 800ee66:	617b      	str	r3, [r7, #20]
   return(result);
 800ee68:	697b      	ldr	r3, [r7, #20]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d1e6      	bne.n	800ee3c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee72:	2b01      	cmp	r3, #1
 800ee74:	d107      	bne.n	800ee86 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ee76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ee7c:	4619      	mov	r1, r3
 800ee7e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ee80:	f7f3 fd18 	bl	80028b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ee84:	e002      	b.n	800ee8c <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800ee86:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ee88:	f7f4 ff7a 	bl	8003d80 <HAL_UART_RxCpltCallback>
}
 800ee8c:	bf00      	nop
 800ee8e:	3770      	adds	r7, #112	; 0x70
 800ee90:	46bd      	mov	sp, r7
 800ee92:	bd80      	pop	{r7, pc}

0800ee94 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b084      	sub	sp, #16
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eea0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eea6:	2b01      	cmp	r3, #1
 800eea8:	d109      	bne.n	800eebe <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eeb0:	085b      	lsrs	r3, r3, #1
 800eeb2:	b29b      	uxth	r3, r3
 800eeb4:	4619      	mov	r1, r3
 800eeb6:	68f8      	ldr	r0, [r7, #12]
 800eeb8:	f7f3 fcfc 	bl	80028b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800eebc:	e002      	b.n	800eec4 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800eebe:	68f8      	ldr	r0, [r7, #12]
 800eec0:	f7fe fe84 	bl	800dbcc <HAL_UART_RxHalfCpltCallback>
}
 800eec4:	bf00      	nop
 800eec6:	3710      	adds	r7, #16
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}

0800eecc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b086      	sub	sp, #24
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eed8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eee0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800eee2:	697b      	ldr	r3, [r7, #20]
 800eee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eee8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800eeea:	697b      	ldr	r3, [r7, #20]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	689b      	ldr	r3, [r3, #8]
 800eef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eef4:	2b80      	cmp	r3, #128	; 0x80
 800eef6:	d109      	bne.n	800ef0c <UART_DMAError+0x40>
 800eef8:	693b      	ldr	r3, [r7, #16]
 800eefa:	2b21      	cmp	r3, #33	; 0x21
 800eefc:	d106      	bne.n	800ef0c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800eefe:	697b      	ldr	r3, [r7, #20]
 800ef00:	2200      	movs	r2, #0
 800ef02:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800ef06:	6978      	ldr	r0, [r7, #20]
 800ef08:	f7ff fe32 	bl	800eb70 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ef0c:	697b      	ldr	r3, [r7, #20]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	689b      	ldr	r3, [r3, #8]
 800ef12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef16:	2b40      	cmp	r3, #64	; 0x40
 800ef18:	d109      	bne.n	800ef2e <UART_DMAError+0x62>
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	2b22      	cmp	r3, #34	; 0x22
 800ef1e:	d106      	bne.n	800ef2e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ef20:	697b      	ldr	r3, [r7, #20]
 800ef22:	2200      	movs	r2, #0
 800ef24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800ef28:	6978      	ldr	r0, [r7, #20]
 800ef2a:	f7ff fe63 	bl	800ebf4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ef2e:	697b      	ldr	r3, [r7, #20]
 800ef30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef34:	f043 0210 	orr.w	r2, r3, #16
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ef3e:	6978      	ldr	r0, [r7, #20]
 800ef40:	f7fe fe4e 	bl	800dbe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ef44:	bf00      	nop
 800ef46:	3718      	adds	r7, #24
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}

0800ef4c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b084      	sub	sp, #16
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	2200      	movs	r2, #0
 800ef66:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ef6a:	68f8      	ldr	r0, [r7, #12]
 800ef6c:	f7fe fe38 	bl	800dbe0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ef70:	bf00      	nop
 800ef72:	3710      	adds	r7, #16
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}

0800ef78 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b088      	sub	sp, #32
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	e853 3f00 	ldrex	r3, [r3]
 800ef8c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ef8e:	68bb      	ldr	r3, [r7, #8]
 800ef90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef94:	61fb      	str	r3, [r7, #28]
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	461a      	mov	r2, r3
 800ef9c:	69fb      	ldr	r3, [r7, #28]
 800ef9e:	61bb      	str	r3, [r7, #24]
 800efa0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efa2:	6979      	ldr	r1, [r7, #20]
 800efa4:	69ba      	ldr	r2, [r7, #24]
 800efa6:	e841 2300 	strex	r3, r2, [r1]
 800efaa:	613b      	str	r3, [r7, #16]
   return(result);
 800efac:	693b      	ldr	r3, [r7, #16]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d1e6      	bne.n	800ef80 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	2220      	movs	r2, #32
 800efb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2200      	movs	r2, #0
 800efbe:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f7fe fdef 	bl	800dba4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800efc6:	bf00      	nop
 800efc8:	3720      	adds	r7, #32
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}

0800efce <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800efce:	b480      	push	{r7}
 800efd0:	b083      	sub	sp, #12
 800efd2:	af00      	add	r7, sp, #0
 800efd4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800efd6:	bf00      	nop
 800efd8:	370c      	adds	r7, #12
 800efda:	46bd      	mov	sp, r7
 800efdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe0:	4770      	bx	lr

0800efe2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800efe2:	b480      	push	{r7}
 800efe4:	b083      	sub	sp, #12
 800efe6:	af00      	add	r7, sp, #0
 800efe8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800efea:	bf00      	nop
 800efec:	370c      	adds	r7, #12
 800efee:	46bd      	mov	sp, r7
 800eff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff4:	4770      	bx	lr

0800eff6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800eff6:	b480      	push	{r7}
 800eff8:	b083      	sub	sp, #12
 800effa:	af00      	add	r7, sp, #0
 800effc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800effe:	bf00      	nop
 800f000:	370c      	adds	r7, #12
 800f002:	46bd      	mov	sp, r7
 800f004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f008:	4770      	bx	lr

0800f00a <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800f00a:	b580      	push	{r7, lr}
 800f00c:	b084      	sub	sp, #16
 800f00e:	af00      	add	r7, sp, #0
 800f010:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f018:	2b01      	cmp	r3, #1
 800f01a:	d101      	bne.n	800f020 <HAL_UARTEx_EnableFifoMode+0x16>
 800f01c:	2302      	movs	r3, #2
 800f01e:	e02b      	b.n	800f078 <HAL_UARTEx_EnableFifoMode+0x6e>
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2201      	movs	r2, #1
 800f024:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2224      	movs	r2, #36	; 0x24
 800f02c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	681a      	ldr	r2, [r3, #0]
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	f022 0201 	bic.w	r2, r2, #1
 800f046:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f04e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800f056:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	68fa      	ldr	r2, [r7, #12]
 800f05e:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f060:	6878      	ldr	r0, [r7, #4]
 800f062:	f000 f91f 	bl	800f2a4 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	2220      	movs	r2, #32
 800f06a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	2200      	movs	r2, #0
 800f072:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f076:	2300      	movs	r3, #0
}
 800f078:	4618      	mov	r0, r3
 800f07a:	3710      	adds	r7, #16
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}

0800f080 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f080:	b480      	push	{r7}
 800f082:	b085      	sub	sp, #20
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f08e:	2b01      	cmp	r3, #1
 800f090:	d101      	bne.n	800f096 <HAL_UARTEx_DisableFifoMode+0x16>
 800f092:	2302      	movs	r3, #2
 800f094:	e027      	b.n	800f0e6 <HAL_UARTEx_DisableFifoMode+0x66>
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	2201      	movs	r2, #1
 800f09a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	2224      	movs	r2, #36	; 0x24
 800f0a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	681a      	ldr	r2, [r3, #0]
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	f022 0201 	bic.w	r2, r2, #1
 800f0bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f0c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	68fa      	ldr	r2, [r7, #12]
 800f0d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	2220      	movs	r2, #32
 800f0d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2200      	movs	r2, #0
 800f0e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f0e4:	2300      	movs	r3, #0
}
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	3714      	adds	r7, #20
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f0:	4770      	bx	lr

0800f0f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f0f2:	b580      	push	{r7, lr}
 800f0f4:	b084      	sub	sp, #16
 800f0f6:	af00      	add	r7, sp, #0
 800f0f8:	6078      	str	r0, [r7, #4]
 800f0fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f102:	2b01      	cmp	r3, #1
 800f104:	d101      	bne.n	800f10a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f106:	2302      	movs	r3, #2
 800f108:	e02d      	b.n	800f166 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	2201      	movs	r2, #1
 800f10e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	2224      	movs	r2, #36	; 0x24
 800f116:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	681a      	ldr	r2, [r3, #0]
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	f022 0201 	bic.w	r2, r2, #1
 800f130:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	689b      	ldr	r3, [r3, #8]
 800f138:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	683a      	ldr	r2, [r7, #0]
 800f142:	430a      	orrs	r2, r1
 800f144:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f000 f8ac 	bl	800f2a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	68fa      	ldr	r2, [r7, #12]
 800f152:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	2220      	movs	r2, #32
 800f158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	2200      	movs	r2, #0
 800f160:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f164:	2300      	movs	r3, #0
}
 800f166:	4618      	mov	r0, r3
 800f168:	3710      	adds	r7, #16
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bd80      	pop	{r7, pc}

0800f16e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f16e:	b580      	push	{r7, lr}
 800f170:	b084      	sub	sp, #16
 800f172:	af00      	add	r7, sp, #0
 800f174:	6078      	str	r0, [r7, #4]
 800f176:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f17e:	2b01      	cmp	r3, #1
 800f180:	d101      	bne.n	800f186 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f182:	2302      	movs	r3, #2
 800f184:	e02d      	b.n	800f1e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2201      	movs	r2, #1
 800f18a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2224      	movs	r2, #36	; 0x24
 800f192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	681a      	ldr	r2, [r3, #0]
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	f022 0201 	bic.w	r2, r2, #1
 800f1ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	689b      	ldr	r3, [r3, #8]
 800f1b4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	683a      	ldr	r2, [r7, #0]
 800f1be:	430a      	orrs	r2, r1
 800f1c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f1c2:	6878      	ldr	r0, [r7, #4]
 800f1c4:	f000 f86e 	bl	800f2a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	68fa      	ldr	r2, [r7, #12]
 800f1ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	2220      	movs	r2, #32
 800f1d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2200      	movs	r2, #0
 800f1dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f1e0:	2300      	movs	r3, #0
}
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	3710      	adds	r7, #16
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	bd80      	pop	{r7, pc}

0800f1ea <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f1ea:	b580      	push	{r7, lr}
 800f1ec:	b08c      	sub	sp, #48	; 0x30
 800f1ee:	af00      	add	r7, sp, #0
 800f1f0:	60f8      	str	r0, [r7, #12]
 800f1f2:	60b9      	str	r1, [r7, #8]
 800f1f4:	4613      	mov	r3, r2
 800f1f6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f1fe:	2b20      	cmp	r3, #32
 800f200:	d14a      	bne.n	800f298 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800f202:	68bb      	ldr	r3, [r7, #8]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d002      	beq.n	800f20e <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800f208:	88fb      	ldrh	r3, [r7, #6]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d101      	bne.n	800f212 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800f20e:	2301      	movs	r3, #1
 800f210:	e043      	b.n	800f29a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f218:	2b01      	cmp	r3, #1
 800f21a:	d101      	bne.n	800f220 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800f21c:	2302      	movs	r3, #2
 800f21e:	e03c      	b.n	800f29a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	2201      	movs	r2, #1
 800f224:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	2201      	movs	r2, #1
 800f22c:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800f22e:	88fb      	ldrh	r3, [r7, #6]
 800f230:	461a      	mov	r2, r3
 800f232:	68b9      	ldr	r1, [r7, #8]
 800f234:	68f8      	ldr	r0, [r7, #12]
 800f236:	f7ff fbf3 	bl	800ea20 <UART_Start_Receive_DMA>
 800f23a:	4603      	mov	r3, r0
 800f23c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800f240:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f244:	2b00      	cmp	r3, #0
 800f246:	d124      	bne.n	800f292 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f24c:	2b01      	cmp	r3, #1
 800f24e:	d11d      	bne.n	800f28c <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	2210      	movs	r2, #16
 800f256:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f25e:	69bb      	ldr	r3, [r7, #24]
 800f260:	e853 3f00 	ldrex	r3, [r3]
 800f264:	617b      	str	r3, [r7, #20]
   return(result);
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	f043 0310 	orr.w	r3, r3, #16
 800f26c:	62bb      	str	r3, [r7, #40]	; 0x28
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	461a      	mov	r2, r3
 800f274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f276:	627b      	str	r3, [r7, #36]	; 0x24
 800f278:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f27a:	6a39      	ldr	r1, [r7, #32]
 800f27c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f27e:	e841 2300 	strex	r3, r2, [r1]
 800f282:	61fb      	str	r3, [r7, #28]
   return(result);
 800f284:	69fb      	ldr	r3, [r7, #28]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d1e6      	bne.n	800f258 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800f28a:	e002      	b.n	800f292 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800f28c:	2301      	movs	r3, #1
 800f28e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800f292:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f296:	e000      	b.n	800f29a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800f298:	2302      	movs	r3, #2
  }
}
 800f29a:	4618      	mov	r0, r3
 800f29c:	3730      	adds	r7, #48	; 0x30
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd80      	pop	{r7, pc}
	...

0800f2a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f2a4:	b480      	push	{r7}
 800f2a6:	b085      	sub	sp, #20
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d108      	bne.n	800f2c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2201      	movs	r2, #1
 800f2b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2201      	movs	r2, #1
 800f2c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f2c4:	e031      	b.n	800f32a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f2c6:	2310      	movs	r3, #16
 800f2c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f2ca:	2310      	movs	r3, #16
 800f2cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	689b      	ldr	r3, [r3, #8]
 800f2d4:	0e5b      	lsrs	r3, r3, #25
 800f2d6:	b2db      	uxtb	r3, r3
 800f2d8:	f003 0307 	and.w	r3, r3, #7
 800f2dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	689b      	ldr	r3, [r3, #8]
 800f2e4:	0f5b      	lsrs	r3, r3, #29
 800f2e6:	b2db      	uxtb	r3, r3
 800f2e8:	f003 0307 	and.w	r3, r3, #7
 800f2ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f2ee:	7bbb      	ldrb	r3, [r7, #14]
 800f2f0:	7b3a      	ldrb	r2, [r7, #12]
 800f2f2:	4911      	ldr	r1, [pc, #68]	; (800f338 <UARTEx_SetNbDataToProcess+0x94>)
 800f2f4:	5c8a      	ldrb	r2, [r1, r2]
 800f2f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f2fa:	7b3a      	ldrb	r2, [r7, #12]
 800f2fc:	490f      	ldr	r1, [pc, #60]	; (800f33c <UARTEx_SetNbDataToProcess+0x98>)
 800f2fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f300:	fb93 f3f2 	sdiv	r3, r3, r2
 800f304:	b29a      	uxth	r2, r3
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f30c:	7bfb      	ldrb	r3, [r7, #15]
 800f30e:	7b7a      	ldrb	r2, [r7, #13]
 800f310:	4909      	ldr	r1, [pc, #36]	; (800f338 <UARTEx_SetNbDataToProcess+0x94>)
 800f312:	5c8a      	ldrb	r2, [r1, r2]
 800f314:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f318:	7b7a      	ldrb	r2, [r7, #13]
 800f31a:	4908      	ldr	r1, [pc, #32]	; (800f33c <UARTEx_SetNbDataToProcess+0x98>)
 800f31c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f31e:	fb93 f3f2 	sdiv	r3, r3, r2
 800f322:	b29a      	uxth	r2, r3
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f32a:	bf00      	nop
 800f32c:	3714      	adds	r7, #20
 800f32e:	46bd      	mov	sp, r7
 800f330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f334:	4770      	bx	lr
 800f336:	bf00      	nop
 800f338:	08013300 	.word	0x08013300
 800f33c:	08013308 	.word	0x08013308

0800f340 <sinf_poly>:
 800f340:	07cb      	lsls	r3, r1, #31
 800f342:	d412      	bmi.n	800f36a <sinf_poly+0x2a>
 800f344:	ee21 6b00 	vmul.f64	d6, d1, d0
 800f348:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 800f34c:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800f350:	eea5 7b01 	vfma.f64	d7, d5, d1
 800f354:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 800f358:	ee21 1b06 	vmul.f64	d1, d1, d6
 800f35c:	eea5 0b06 	vfma.f64	d0, d5, d6
 800f360:	eea7 0b01 	vfma.f64	d0, d7, d1
 800f364:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800f368:	4770      	bx	lr
 800f36a:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 800f36e:	ee21 6b01 	vmul.f64	d6, d1, d1
 800f372:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800f376:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800f37a:	eea1 7b05 	vfma.f64	d7, d1, d5
 800f37e:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 800f382:	eea1 0b05 	vfma.f64	d0, d1, d5
 800f386:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 800f38a:	ee21 1b06 	vmul.f64	d1, d1, d6
 800f38e:	eea6 0b05 	vfma.f64	d0, d6, d5
 800f392:	e7e5      	b.n	800f360 <sinf_poly+0x20>
 800f394:	0000      	movs	r0, r0
	...

0800f398 <cosf>:
 800f398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f39a:	ee10 4a10 	vmov	r4, s0
 800f39e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800f3a2:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800f3a6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800f3aa:	d20c      	bcs.n	800f3c6 <cosf+0x2e>
 800f3ac:	ee26 1b06 	vmul.f64	d1, d6, d6
 800f3b0:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800f3b4:	d378      	bcc.n	800f4a8 <cosf+0x110>
 800f3b6:	eeb0 0b46 	vmov.f64	d0, d6
 800f3ba:	483f      	ldr	r0, [pc, #252]	; (800f4b8 <cosf+0x120>)
 800f3bc:	2101      	movs	r1, #1
 800f3be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f3c2:	f7ff bfbd 	b.w	800f340 <sinf_poly>
 800f3c6:	f240 422e 	movw	r2, #1070	; 0x42e
 800f3ca:	4293      	cmp	r3, r2
 800f3cc:	d826      	bhi.n	800f41c <cosf+0x84>
 800f3ce:	4b3a      	ldr	r3, [pc, #232]	; (800f4b8 <cosf+0x120>)
 800f3d0:	ed93 7b08 	vldr	d7, [r3, #32]
 800f3d4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f3d8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800f3dc:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800f3e0:	ee17 1a90 	vmov	r1, s15
 800f3e4:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800f3e8:	1609      	asrs	r1, r1, #24
 800f3ea:	ee07 1a90 	vmov	s15, r1
 800f3ee:	f001 0203 	and.w	r2, r1, #3
 800f3f2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800f3f6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800f3fa:	ed92 0b00 	vldr	d0, [r2]
 800f3fe:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800f402:	f011 0f02 	tst.w	r1, #2
 800f406:	eea5 6b47 	vfms.f64	d6, d5, d7
 800f40a:	f081 0101 	eor.w	r1, r1, #1
 800f40e:	bf08      	it	eq
 800f410:	4618      	moveq	r0, r3
 800f412:	ee26 1b06 	vmul.f64	d1, d6, d6
 800f416:	ee20 0b06 	vmul.f64	d0, d0, d6
 800f41a:	e7d0      	b.n	800f3be <cosf+0x26>
 800f41c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800f420:	d23e      	bcs.n	800f4a0 <cosf+0x108>
 800f422:	4b26      	ldr	r3, [pc, #152]	; (800f4bc <cosf+0x124>)
 800f424:	f3c4 6283 	ubfx	r2, r4, #26, #4
 800f428:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800f42c:	f3c4 0116 	ubfx	r1, r4, #0, #23
 800f430:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800f434:	6a06      	ldr	r6, [r0, #32]
 800f436:	6900      	ldr	r0, [r0, #16]
 800f438:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800f43c:	40a9      	lsls	r1, r5
 800f43e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800f442:	fba1 6706 	umull	r6, r7, r1, r6
 800f446:	fb05 f301 	mul.w	r3, r5, r1
 800f44a:	463a      	mov	r2, r7
 800f44c:	fbe0 2301 	umlal	r2, r3, r0, r1
 800f450:	1c11      	adds	r1, r2, #0
 800f452:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 800f456:	2000      	movs	r0, #0
 800f458:	1a10      	subs	r0, r2, r0
 800f45a:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 800f45e:	eb63 0101 	sbc.w	r1, r3, r1
 800f462:	f7f1 f923 	bl	80006ac <__aeabi_l2d>
 800f466:	0fb5      	lsrs	r5, r6, #30
 800f468:	4b13      	ldr	r3, [pc, #76]	; (800f4b8 <cosf+0x120>)
 800f46a:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800f46e:	ed9f 0b10 	vldr	d0, [pc, #64]	; 800f4b0 <cosf+0x118>
 800f472:	ec41 0b17 	vmov	d7, r0, r1
 800f476:	f004 0203 	and.w	r2, r4, #3
 800f47a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800f47e:	ee27 0b00 	vmul.f64	d0, d7, d0
 800f482:	ed92 7b00 	vldr	d7, [r2]
 800f486:	ee20 1b00 	vmul.f64	d1, d0, d0
 800f48a:	f014 0f02 	tst.w	r4, #2
 800f48e:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800f492:	f085 0101 	eor.w	r1, r5, #1
 800f496:	bf08      	it	eq
 800f498:	4618      	moveq	r0, r3
 800f49a:	ee27 0b00 	vmul.f64	d0, d7, d0
 800f49e:	e78e      	b.n	800f3be <cosf+0x26>
 800f4a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f4a4:	f000 b817 	b.w	800f4d6 <__math_invalidf>
 800f4a8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f4ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4ae:	bf00      	nop
 800f4b0:	54442d18 	.word	0x54442d18
 800f4b4:	3c1921fb 	.word	0x3c1921fb
 800f4b8:	080143b8 	.word	0x080143b8
 800f4bc:	08014358 	.word	0x08014358

0800f4c0 <with_errnof>:
 800f4c0:	b513      	push	{r0, r1, r4, lr}
 800f4c2:	4604      	mov	r4, r0
 800f4c4:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f4c8:	f001 fa70 	bl	80109ac <__errno>
 800f4cc:	ed9d 0a01 	vldr	s0, [sp, #4]
 800f4d0:	6004      	str	r4, [r0, #0]
 800f4d2:	b002      	add	sp, #8
 800f4d4:	bd10      	pop	{r4, pc}

0800f4d6 <__math_invalidf>:
 800f4d6:	eef0 7a40 	vmov.f32	s15, s0
 800f4da:	ee30 7a40 	vsub.f32	s14, s0, s0
 800f4de:	eef4 7a67 	vcmp.f32	s15, s15
 800f4e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4e6:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800f4ea:	d602      	bvs.n	800f4f2 <__math_invalidf+0x1c>
 800f4ec:	2021      	movs	r0, #33	; 0x21
 800f4ee:	f7ff bfe7 	b.w	800f4c0 <with_errnof>
 800f4f2:	4770      	bx	lr

0800f4f4 <checkint>:
 800f4f4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f4f8:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800f4fc:	429a      	cmp	r2, r3
 800f4fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f500:	dd2b      	ble.n	800f55a <checkint+0x66>
 800f502:	f240 4333 	movw	r3, #1075	; 0x433
 800f506:	429a      	cmp	r2, r3
 800f508:	dc25      	bgt.n	800f556 <checkint+0x62>
 800f50a:	1a9b      	subs	r3, r3, r2
 800f50c:	f1a3 0620 	sub.w	r6, r3, #32
 800f510:	f04f 32ff 	mov.w	r2, #4294967295
 800f514:	fa02 f606 	lsl.w	r6, r2, r6
 800f518:	fa02 f403 	lsl.w	r4, r2, r3
 800f51c:	f1c3 0520 	rsb	r5, r3, #32
 800f520:	4334      	orrs	r4, r6
 800f522:	fa22 f505 	lsr.w	r5, r2, r5
 800f526:	432c      	orrs	r4, r5
 800f528:	409a      	lsls	r2, r3
 800f52a:	ea20 0602 	bic.w	r6, r0, r2
 800f52e:	ea21 0704 	bic.w	r7, r1, r4
 800f532:	ea56 0207 	orrs.w	r2, r6, r7
 800f536:	f1a3 0420 	sub.w	r4, r3, #32
 800f53a:	f1c3 0220 	rsb	r2, r3, #32
 800f53e:	d10c      	bne.n	800f55a <checkint+0x66>
 800f540:	40d8      	lsrs	r0, r3
 800f542:	fa01 f302 	lsl.w	r3, r1, r2
 800f546:	4318      	orrs	r0, r3
 800f548:	40e1      	lsrs	r1, r4
 800f54a:	4308      	orrs	r0, r1
 800f54c:	f000 0301 	and.w	r3, r0, #1
 800f550:	f1c3 0002 	rsb	r0, r3, #2
 800f554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f556:	2002      	movs	r0, #2
 800f558:	e7fc      	b.n	800f554 <checkint+0x60>
 800f55a:	2000      	movs	r0, #0
 800f55c:	e7fa      	b.n	800f554 <checkint+0x60>
	...

0800f560 <pow>:
 800f560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f564:	ed2d 8b0a 	vpush	{d8-d12}
 800f568:	b09b      	sub	sp, #108	; 0x6c
 800f56a:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f56e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f572:	ed8d 1b00 	vstr	d1, [sp]
 800f576:	ea4f 5915 	mov.w	r9, r5, lsr #20
 800f57a:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f57e:	f109 30ff 	add.w	r0, r9, #4294967295
 800f582:	f240 71fd 	movw	r1, #2045	; 0x7fd
 800f586:	4288      	cmp	r0, r1
 800f588:	46cc      	mov	ip, r9
 800f58a:	ea4f 5817 	mov.w	r8, r7, lsr #20
 800f58e:	d806      	bhi.n	800f59e <pow+0x3e>
 800f590:	f3c8 010a 	ubfx	r1, r8, #0, #11
 800f594:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 800f598:	297f      	cmp	r1, #127	; 0x7f
 800f59a:	f240 81ab 	bls.w	800f8f4 <pow+0x394>
 800f59e:	19b1      	adds	r1, r6, r6
 800f5a0:	9104      	str	r1, [sp, #16]
 800f5a2:	eb47 0107 	adc.w	r1, r7, r7
 800f5a6:	9105      	str	r1, [sp, #20]
 800f5a8:	9904      	ldr	r1, [sp, #16]
 800f5aa:	f111 31ff 	adds.w	r1, r1, #4294967295
 800f5ae:	460a      	mov	r2, r1
 800f5b0:	9905      	ldr	r1, [sp, #20]
 800f5b2:	f141 31ff 	adc.w	r1, r1, #4294967295
 800f5b6:	460b      	mov	r3, r1
 800f5b8:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 800f5bc:	f06f 0001 	mvn.w	r0, #1
 800f5c0:	4299      	cmp	r1, r3
 800f5c2:	bf08      	it	eq
 800f5c4:	4290      	cmpeq	r0, r2
 800f5c6:	d260      	bcs.n	800f68a <pow+0x12a>
 800f5c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f5cc:	4313      	orrs	r3, r2
 800f5ce:	d11a      	bne.n	800f606 <pow+0xa6>
 800f5d0:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 800f5d4:	1923      	adds	r3, r4, r4
 800f5d6:	930c      	str	r3, [sp, #48]	; 0x30
 800f5d8:	eb42 0302 	adc.w	r3, r2, r2
 800f5dc:	930d      	str	r3, [sp, #52]	; 0x34
 800f5de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f5e2:	4bcf      	ldr	r3, [pc, #828]	; (800f920 <pow+0x3c0>)
 800f5e4:	2200      	movs	r2, #0
 800f5e6:	428b      	cmp	r3, r1
 800f5e8:	bf08      	it	eq
 800f5ea:	4282      	cmpeq	r2, r0
 800f5ec:	f080 8265 	bcs.w	800faba <pow+0x55a>
 800f5f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f5f4:	ed9d 6b00 	vldr	d6, [sp]
 800f5f8:	ee37 0b06 	vadd.f64	d0, d7, d6
 800f5fc:	b01b      	add	sp, #108	; 0x6c
 800f5fe:	ecbd 8b0a 	vpop	{d8-d12}
 800f602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f606:	49c7      	ldr	r1, [pc, #796]	; (800f924 <pow+0x3c4>)
 800f608:	2000      	movs	r0, #0
 800f60a:	428d      	cmp	r5, r1
 800f60c:	bf08      	it	eq
 800f60e:	4284      	cmpeq	r4, r0
 800f610:	d10b      	bne.n	800f62a <pow+0xca>
 800f612:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800f616:	19b3      	adds	r3, r6, r6
 800f618:	930e      	str	r3, [sp, #56]	; 0x38
 800f61a:	eb42 0302 	adc.w	r3, r2, r2
 800f61e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f620:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800f624:	4bbe      	ldr	r3, [pc, #760]	; (800f920 <pow+0x3c0>)
 800f626:	2200      	movs	r2, #0
 800f628:	e7dd      	b.n	800f5e6 <pow+0x86>
 800f62a:	1921      	adds	r1, r4, r4
 800f62c:	9106      	str	r1, [sp, #24]
 800f62e:	eb45 0105 	adc.w	r1, r5, r5
 800f632:	9107      	str	r1, [sp, #28]
 800f634:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800f638:	49bb      	ldr	r1, [pc, #748]	; (800f928 <pow+0x3c8>)
 800f63a:	2000      	movs	r0, #0
 800f63c:	42a1      	cmp	r1, r4
 800f63e:	bf08      	it	eq
 800f640:	4298      	cmpeq	r0, r3
 800f642:	d3d5      	bcc.n	800f5f0 <pow+0x90>
 800f644:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800f648:	428c      	cmp	r4, r1
 800f64a:	bf08      	it	eq
 800f64c:	4283      	cmpeq	r3, r0
 800f64e:	d1cf      	bne.n	800f5f0 <pow+0x90>
 800f650:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800f654:	49b5      	ldr	r1, [pc, #724]	; (800f92c <pow+0x3cc>)
 800f656:	2000      	movs	r0, #0
 800f658:	428c      	cmp	r4, r1
 800f65a:	bf08      	it	eq
 800f65c:	4283      	cmpeq	r3, r0
 800f65e:	f000 822c 	beq.w	800faba <pow+0x55a>
 800f662:	49b3      	ldr	r1, [pc, #716]	; (800f930 <pow+0x3d0>)
 800f664:	f04f 30ff 	mov.w	r0, #4294967295
 800f668:	42a1      	cmp	r1, r4
 800f66a:	bf08      	it	eq
 800f66c:	4298      	cmpeq	r0, r3
 800f66e:	ea6f 0307 	mvn.w	r3, r7
 800f672:	bf34      	ite	cc
 800f674:	2201      	movcc	r2, #1
 800f676:	2200      	movcs	r2, #0
 800f678:	0fdb      	lsrs	r3, r3, #31
 800f67a:	429a      	cmp	r2, r3
 800f67c:	f040 821a 	bne.w	800fab4 <pow+0x554>
 800f680:	ed9d 7b00 	vldr	d7, [sp]
 800f684:	ee27 0b07 	vmul.f64	d0, d7, d7
 800f688:	e7b8      	b.n	800f5fc <pow+0x9c>
 800f68a:	1923      	adds	r3, r4, r4
 800f68c:	9308      	str	r3, [sp, #32]
 800f68e:	eb45 0305 	adc.w	r3, r5, r5
 800f692:	9309      	str	r3, [sp, #36]	; 0x24
 800f694:	9b08      	ldr	r3, [sp, #32]
 800f696:	f113 33ff 	adds.w	r3, r3, #4294967295
 800f69a:	9310      	str	r3, [sp, #64]	; 0x40
 800f69c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f69e:	f143 33ff 	adc.w	r3, r3, #4294967295
 800f6a2:	9311      	str	r3, [sp, #68]	; 0x44
 800f6a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f6a8:	4299      	cmp	r1, r3
 800f6aa:	bf08      	it	eq
 800f6ac:	4290      	cmpeq	r0, r2
 800f6ae:	d22d      	bcs.n	800f70c <pow+0x1ac>
 800f6b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f6b4:	2c00      	cmp	r4, #0
 800f6b6:	f175 0300 	sbcs.w	r3, r5, #0
 800f6ba:	ee27 0b07 	vmul.f64	d0, d7, d7
 800f6be:	da16      	bge.n	800f6ee <pow+0x18e>
 800f6c0:	4630      	mov	r0, r6
 800f6c2:	4639      	mov	r1, r7
 800f6c4:	f7ff ff16 	bl	800f4f4 <checkint>
 800f6c8:	2801      	cmp	r0, #1
 800f6ca:	d110      	bne.n	800f6ee <pow+0x18e>
 800f6cc:	eeb1 0b40 	vneg.f64	d0, d0
 800f6d0:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800f6d4:	4323      	orrs	r3, r4
 800f6d6:	d10c      	bne.n	800f6f2 <pow+0x192>
 800f6d8:	2e00      	cmp	r6, #0
 800f6da:	f177 0300 	sbcs.w	r3, r7, #0
 800f6de:	da8d      	bge.n	800f5fc <pow+0x9c>
 800f6e0:	b01b      	add	sp, #108	; 0x6c
 800f6e2:	ecbd 8b0a 	vpop	{d8-d12}
 800f6e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6ea:	f001 b809 	b.w	8010700 <__math_divzero>
 800f6ee:	2000      	movs	r0, #0
 800f6f0:	e7ee      	b.n	800f6d0 <pow+0x170>
 800f6f2:	2e00      	cmp	r6, #0
 800f6f4:	f177 0300 	sbcs.w	r3, r7, #0
 800f6f8:	da80      	bge.n	800f5fc <pow+0x9c>
 800f6fa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f6fe:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800f702:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800f706:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800f70a:	e777      	b.n	800f5fc <pow+0x9c>
 800f70c:	2c00      	cmp	r4, #0
 800f70e:	f175 0300 	sbcs.w	r3, r5, #0
 800f712:	da35      	bge.n	800f780 <pow+0x220>
 800f714:	4630      	mov	r0, r6
 800f716:	4639      	mov	r1, r7
 800f718:	f7ff feec 	bl	800f4f4 <checkint>
 800f71c:	b940      	cbnz	r0, 800f730 <pow+0x1d0>
 800f71e:	ed9d 0b02 	vldr	d0, [sp, #8]
 800f722:	b01b      	add	sp, #108	; 0x6c
 800f724:	ecbd 8b0a 	vpop	{d8-d12}
 800f728:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f72c:	f001 b800 	b.w	8010730 <__math_invalid>
 800f730:	2801      	cmp	r0, #1
 800f732:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f736:	bf14      	ite	ne
 800f738:	2000      	movne	r0, #0
 800f73a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800f73e:	461d      	mov	r5, r3
 800f740:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 800f744:	f3c8 030a 	ubfx	r3, r8, #0, #11
 800f748:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 800f74c:	2a7f      	cmp	r2, #127	; 0x7f
 800f74e:	d933      	bls.n	800f7b8 <pow+0x258>
 800f750:	4974      	ldr	r1, [pc, #464]	; (800f924 <pow+0x3c4>)
 800f752:	2000      	movs	r0, #0
 800f754:	428d      	cmp	r5, r1
 800f756:	bf08      	it	eq
 800f758:	4284      	cmpeq	r4, r0
 800f75a:	f000 81ae 	beq.w	800faba <pow+0x55a>
 800f75e:	f240 32bd 	movw	r2, #957	; 0x3bd
 800f762:	4293      	cmp	r3, r2
 800f764:	d80e      	bhi.n	800f784 <pow+0x224>
 800f766:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f76a:	ed9d 7b00 	vldr	d7, [sp]
 800f76e:	42a9      	cmp	r1, r5
 800f770:	bf08      	it	eq
 800f772:	42a0      	cmpeq	r0, r4
 800f774:	bf34      	ite	cc
 800f776:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 800f77a:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 800f77e:	e73d      	b.n	800f5fc <pow+0x9c>
 800f780:	2000      	movs	r0, #0
 800f782:	e7df      	b.n	800f744 <pow+0x1e4>
 800f784:	42a9      	cmp	r1, r5
 800f786:	bf08      	it	eq
 800f788:	42a0      	cmpeq	r0, r4
 800f78a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f78e:	bf2c      	ite	cs
 800f790:	2301      	movcs	r3, #1
 800f792:	2300      	movcc	r3, #0
 800f794:	4590      	cmp	r8, r2
 800f796:	bf8c      	ite	hi
 800f798:	f04f 0800 	movhi.w	r8, #0
 800f79c:	f04f 0801 	movls.w	r8, #1
 800f7a0:	4543      	cmp	r3, r8
 800f7a2:	f04f 0000 	mov.w	r0, #0
 800f7a6:	f000 80af 	beq.w	800f908 <pow+0x3a8>
 800f7aa:	b01b      	add	sp, #108	; 0x6c
 800f7ac:	ecbd 8b0a 	vpop	{d8-d12}
 800f7b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7b4:	f000 bf9c 	b.w	80106f0 <__math_oflow>
 800f7b8:	f1bc 0f00 	cmp.w	ip, #0
 800f7bc:	d10e      	bne.n	800f7dc <pow+0x27c>
 800f7be:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800f918 <pow+0x3b8>
 800f7c2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f7c6:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f7ca:	ec57 6b17 	vmov	r6, r7, d7
 800f7ce:	4b59      	ldr	r3, [pc, #356]	; (800f934 <pow+0x3d4>)
 800f7d0:	2100      	movs	r1, #0
 800f7d2:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800f7d6:	1874      	adds	r4, r6, r1
 800f7d8:	eb42 0503 	adc.w	r5, r2, r3
 800f7dc:	2300      	movs	r3, #0
 800f7de:	18e3      	adds	r3, r4, r3
 800f7e0:	4b55      	ldr	r3, [pc, #340]	; (800f938 <pow+0x3d8>)
 800f7e2:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800f7e6:	eb45 0303 	adc.w	r3, r5, r3
 800f7ea:	1519      	asrs	r1, r3, #20
 800f7ec:	ee03 1a10 	vmov	s6, r1
 800f7f0:	0d1e      	lsrs	r6, r3, #20
 800f7f2:	2100      	movs	r1, #0
 800f7f4:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800f7f8:	0536      	lsls	r6, r6, #20
 800f7fa:	1a63      	subs	r3, r4, r1
 800f7fc:	9312      	str	r3, [sp, #72]	; 0x48
 800f7fe:	eb65 0306 	sbc.w	r3, r5, r6
 800f802:	9313      	str	r3, [sp, #76]	; 0x4c
 800f804:	4b4d      	ldr	r3, [pc, #308]	; (800f93c <pow+0x3dc>)
 800f806:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 800f80a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800f80e:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 800f812:	eea5 6b07 	vfma.f64	d6, d5, d7
 800f816:	ed93 7b00 	vldr	d7, [r3]
 800f81a:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 800f81e:	ed93 4b02 	vldr	d4, [r3, #8]
 800f822:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800f826:	eea3 5b07 	vfma.f64	d5, d3, d7
 800f82a:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 800f82e:	ee36 9b05 	vadd.f64	d9, d6, d5
 800f832:	ee35 5b49 	vsub.f64	d5, d5, d9
 800f836:	eea3 7b04 	vfma.f64	d7, d3, d4
 800f83a:	ed93 4b04 	vldr	d4, [r3, #16]
 800f83e:	ee35 5b06 	vadd.f64	d5, d5, d6
 800f842:	ee37 7b05 	vadd.f64	d7, d7, d5
 800f846:	ee26 4b04 	vmul.f64	d4, d6, d4
 800f84a:	ed93 3b08 	vldr	d3, [r3, #32]
 800f84e:	ee26 0b04 	vmul.f64	d0, d6, d4
 800f852:	eeb0 8b40 	vmov.f64	d8, d0
 800f856:	ee94 8b06 	vfnms.f64	d8, d4, d6
 800f85a:	ed93 4b06 	vldr	d4, [r3, #24]
 800f85e:	ee26 ab00 	vmul.f64	d10, d6, d0
 800f862:	ee39 1b00 	vadd.f64	d1, d9, d0
 800f866:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 800f86a:	eea6 4b03 	vfma.f64	d4, d6, d3
 800f86e:	ee39 9b41 	vsub.f64	d9, d9, d1
 800f872:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 800f876:	ee37 8b08 	vadd.f64	d8, d7, d8
 800f87a:	ee39 9b00 	vadd.f64	d9, d9, d0
 800f87e:	eea6 3b02 	vfma.f64	d3, d6, d2
 800f882:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800f886:	ee38 9b09 	vadd.f64	d9, d8, d9
 800f88a:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 800f88e:	eea6 2b0c 	vfma.f64	d2, d6, d12
 800f892:	ed9d 6b00 	vldr	d6, [sp]
 800f896:	eea0 3b02 	vfma.f64	d3, d0, d2
 800f89a:	eea0 4b03 	vfma.f64	d4, d0, d3
 800f89e:	eeaa 9b04 	vfma.f64	d9, d10, d4
 800f8a2:	ee31 7b09 	vadd.f64	d7, d1, d9
 800f8a6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f8aa:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f8ae:	eeb0 3b46 	vmov.f64	d3, d6
 800f8b2:	ee31 1b47 	vsub.f64	d1, d1, d7
 800f8b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f8ba:	ee31 9b09 	vadd.f64	d9, d1, d9
 800f8be:	ed9d 6b00 	vldr	d6, [sp]
 800f8c2:	f3c3 570a 	ubfx	r7, r3, #20, #11
 800f8c6:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 800f8ca:	193c      	adds	r4, r7, r4
 800f8cc:	2c3e      	cmp	r4, #62	; 0x3e
 800f8ce:	ee96 3b07 	vfnms.f64	d3, d6, d7
 800f8d2:	eea6 3b09 	vfma.f64	d3, d6, d9
 800f8d6:	d934      	bls.n	800f942 <pow+0x3e2>
 800f8d8:	428c      	cmp	r4, r1
 800f8da:	da0d      	bge.n	800f8f8 <pow+0x398>
 800f8dc:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f8e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f8e4:	ee37 0b00 	vadd.f64	d0, d7, d0
 800f8e8:	2800      	cmp	r0, #0
 800f8ea:	f43f ae87 	beq.w	800f5fc <pow+0x9c>
 800f8ee:	eeb1 0b40 	vneg.f64	d0, d0
 800f8f2:	e683      	b.n	800f5fc <pow+0x9c>
 800f8f4:	2000      	movs	r0, #0
 800f8f6:	e771      	b.n	800f7dc <pow+0x27c>
 800f8f8:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 800f8fc:	d920      	bls.n	800f940 <pow+0x3e0>
 800f8fe:	2a00      	cmp	r2, #0
 800f900:	f173 0300 	sbcs.w	r3, r3, #0
 800f904:	f6bf af51 	bge.w	800f7aa <pow+0x24a>
 800f908:	b01b      	add	sp, #108	; 0x6c
 800f90a:	ecbd 8b0a 	vpop	{d8-d12}
 800f90e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f912:	f000 bee5 	b.w	80106e0 <__math_uflow>
 800f916:	bf00      	nop
 800f918:	00000000 	.word	0x00000000
 800f91c:	43300000 	.word	0x43300000
 800f920:	fff00000 	.word	0xfff00000
 800f924:	3ff00000 	.word	0x3ff00000
 800f928:	ffe00000 	.word	0xffe00000
 800f92c:	7fe00000 	.word	0x7fe00000
 800f930:	7fdfffff 	.word	0x7fdfffff
 800f934:	fcc00000 	.word	0xfcc00000
 800f938:	c0196aab 	.word	0xc0196aab
 800f93c:	08013310 	.word	0x08013310
 800f940:	460f      	mov	r7, r1
 800f942:	4e65      	ldr	r6, [pc, #404]	; (800fad8 <pow+0x578>)
 800f944:	ed9d 4b02 	vldr	d4, [sp, #8]
 800f948:	ed96 6b02 	vldr	d6, [r6, #8]
 800f94c:	ed96 7b00 	vldr	d7, [r6]
 800f950:	eeb0 5b46 	vmov.f64	d5, d6
 800f954:	eea4 5b07 	vfma.f64	d5, d4, d7
 800f958:	ed8d 5b00 	vstr	d5, [sp]
 800f95c:	ee35 6b46 	vsub.f64	d6, d5, d6
 800f960:	eeb0 5b44 	vmov.f64	d5, d4
 800f964:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f968:	ed96 7b04 	vldr	d7, [r6, #16]
 800f96c:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 800f970:	eea6 5b07 	vfma.f64	d5, d6, d7
 800f974:	eeb0 7b45 	vmov.f64	d7, d5
 800f978:	ed96 5b06 	vldr	d5, [r6, #24]
 800f97c:	1849      	adds	r1, r1, r1
 800f97e:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 800f982:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800f986:	eea6 7b05 	vfma.f64	d7, d6, d5
 800f98a:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 800f98e:	ee33 3b07 	vadd.f64	d3, d3, d7
 800f992:	ee23 6b03 	vmul.f64	d6, d3, d3
 800f996:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 800f99a:	ed96 5b08 	vldr	d5, [r6, #32]
 800f99e:	ee33 7b07 	vadd.f64	d7, d3, d7
 800f9a2:	1814      	adds	r4, r2, r0
 800f9a4:	0365      	lsls	r5, r4, #13
 800f9a6:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 800f9aa:	eea3 5b04 	vfma.f64	d5, d3, d4
 800f9ae:	eea6 7b05 	vfma.f64	d7, d6, d5
 800f9b2:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 800f9b6:	ee26 6b06 	vmul.f64	d6, d6, d6
 800f9ba:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 800f9be:	2000      	movs	r0, #0
 800f9c0:	eb10 0a04 	adds.w	sl, r0, r4
 800f9c4:	eea3 5b04 	vfma.f64	d5, d3, d4
 800f9c8:	eb45 0b0c 	adc.w	fp, r5, ip
 800f9cc:	eea6 7b05 	vfma.f64	d7, d6, d5
 800f9d0:	2f00      	cmp	r7, #0
 800f9d2:	d16a      	bne.n	800faaa <pow+0x54a>
 800f9d4:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 800f9d8:	4639      	mov	r1, r7
 800f9da:	ea50 0301 	orrs.w	r3, r0, r1
 800f9de:	f04f 0300 	mov.w	r3, #0
 800f9e2:	d115      	bne.n	800fa10 <pow+0x4b0>
 800f9e4:	eb1a 0303 	adds.w	r3, sl, r3
 800f9e8:	ee0b 3a10 	vmov	s22, r3
 800f9ec:	4b3b      	ldr	r3, [pc, #236]	; (800fadc <pow+0x57c>)
 800f9ee:	ed9f 0b34 	vldr	d0, [pc, #208]	; 800fac0 <pow+0x560>
 800f9f2:	eb4b 0303 	adc.w	r3, fp, r3
 800f9f6:	ee0b 3a90 	vmov	s23, r3
 800f9fa:	eea7 bb0b 	vfma.f64	d11, d7, d11
 800f9fe:	ee2b 0b00 	vmul.f64	d0, d11, d0
 800fa02:	b01b      	add	sp, #108	; 0x6c
 800fa04:	ecbd 8b0a 	vpop	{d8-d12}
 800fa08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa0c:	f000 bea8 	b.w	8010760 <__math_check_oflow>
 800fa10:	eb1a 0303 	adds.w	r3, sl, r3
 800fa14:	930a      	str	r3, [sp, #40]	; 0x28
 800fa16:	4b32      	ldr	r3, [pc, #200]	; (800fae0 <pow+0x580>)
 800fa18:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800fa1c:	eb4b 0303 	adc.w	r3, fp, r3
 800fa20:	930b      	str	r3, [sp, #44]	; 0x2c
 800fa22:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800fa26:	ee27 6b05 	vmul.f64	d6, d7, d5
 800fa2a:	ee35 7b06 	vadd.f64	d7, d5, d6
 800fa2e:	eeb0 3bc7 	vabs.f64	d3, d7
 800fa32:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800fa36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa3a:	ed9f 0b23 	vldr	d0, [pc, #140]	; 800fac8 <pow+0x568>
 800fa3e:	d52b      	bpl.n	800fa98 <pow+0x538>
 800fa40:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800fa44:	ee35 5b47 	vsub.f64	d5, d5, d7
 800fa48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa4c:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800fa50:	ee35 6b06 	vadd.f64	d6, d5, d6
 800fa54:	bf48      	it	mi
 800fa56:	eeb0 4b43 	vmovmi.f64	d4, d3
 800fa5a:	ee37 3b04 	vadd.f64	d3, d7, d4
 800fa5e:	ee34 5b43 	vsub.f64	d5, d4, d3
 800fa62:	ee35 7b07 	vadd.f64	d7, d5, d7
 800fa66:	ee37 7b06 	vadd.f64	d7, d7, d6
 800fa6a:	ee37 7b03 	vadd.f64	d7, d7, d3
 800fa6e:	ee37 7b44 	vsub.f64	d7, d7, d4
 800fa72:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fa76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa7a:	d105      	bne.n	800fa88 <pow+0x528>
 800fa7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fa7e:	463a      	mov	r2, r7
 800fa80:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800fa84:	ec43 2b17 	vmov	d7, r2, r3
 800fa88:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 800fa8c:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 800fa90:	ee26 6b00 	vmul.f64	d6, d6, d0
 800fa94:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 800fa98:	ee27 0b00 	vmul.f64	d0, d7, d0
 800fa9c:	b01b      	add	sp, #108	; 0x6c
 800fa9e:	ecbd 8b0a 	vpop	{d8-d12}
 800faa2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faa6:	f000 be52 	b.w	801074e <__math_check_uflow>
 800faaa:	ec4b ab10 	vmov	d0, sl, fp
 800faae:	eea7 0b00 	vfma.f64	d0, d7, d0
 800fab2:	e5a3      	b.n	800f5fc <pow+0x9c>
 800fab4:	ed9f 0b06 	vldr	d0, [pc, #24]	; 800fad0 <pow+0x570>
 800fab8:	e5a0      	b.n	800f5fc <pow+0x9c>
 800faba:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800fabe:	e59d      	b.n	800f5fc <pow+0x9c>
 800fac0:	00000000 	.word	0x00000000
 800fac4:	7f000000 	.word	0x7f000000
 800fac8:	00000000 	.word	0x00000000
 800facc:	00100000 	.word	0x00100000
	...
 800fad8:	08014620 	.word	0x08014620
 800fadc:	c0f00000 	.word	0xc0f00000
 800fae0:	3fe00000 	.word	0x3fe00000
 800fae4:	00000000 	.word	0x00000000

0800fae8 <cos>:
 800fae8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800faea:	eeb0 7b40 	vmov.f64	d7, d0
 800faee:	ee17 3a90 	vmov	r3, s15
 800faf2:	4a1f      	ldr	r2, [pc, #124]	; (800fb70 <cos+0x88>)
 800faf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800faf8:	4293      	cmp	r3, r2
 800fafa:	dc04      	bgt.n	800fb06 <cos+0x1e>
 800fafc:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 800fb68 <cos+0x80>
 800fb00:	f000 fa8e 	bl	8010020 <__kernel_cos>
 800fb04:	e004      	b.n	800fb10 <cos+0x28>
 800fb06:	4a1b      	ldr	r2, [pc, #108]	; (800fb74 <cos+0x8c>)
 800fb08:	4293      	cmp	r3, r2
 800fb0a:	dd04      	ble.n	800fb16 <cos+0x2e>
 800fb0c:	ee30 0b40 	vsub.f64	d0, d0, d0
 800fb10:	b005      	add	sp, #20
 800fb12:	f85d fb04 	ldr.w	pc, [sp], #4
 800fb16:	4668      	mov	r0, sp
 800fb18:	f000 f942 	bl	800fda0 <__ieee754_rem_pio2>
 800fb1c:	f000 0003 	and.w	r0, r0, #3
 800fb20:	2801      	cmp	r0, #1
 800fb22:	d007      	beq.n	800fb34 <cos+0x4c>
 800fb24:	2802      	cmp	r0, #2
 800fb26:	d00e      	beq.n	800fb46 <cos+0x5e>
 800fb28:	b9a0      	cbnz	r0, 800fb54 <cos+0x6c>
 800fb2a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fb2e:	ed9d 0b00 	vldr	d0, [sp]
 800fb32:	e7e5      	b.n	800fb00 <cos+0x18>
 800fb34:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fb38:	ed9d 0b00 	vldr	d0, [sp]
 800fb3c:	f000 fd5c 	bl	80105f8 <__kernel_sin>
 800fb40:	eeb1 0b40 	vneg.f64	d0, d0
 800fb44:	e7e4      	b.n	800fb10 <cos+0x28>
 800fb46:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fb4a:	ed9d 0b00 	vldr	d0, [sp]
 800fb4e:	f000 fa67 	bl	8010020 <__kernel_cos>
 800fb52:	e7f5      	b.n	800fb40 <cos+0x58>
 800fb54:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fb58:	ed9d 0b00 	vldr	d0, [sp]
 800fb5c:	2001      	movs	r0, #1
 800fb5e:	f000 fd4b 	bl	80105f8 <__kernel_sin>
 800fb62:	e7d5      	b.n	800fb10 <cos+0x28>
 800fb64:	f3af 8000 	nop.w
	...
 800fb70:	3fe921fb 	.word	0x3fe921fb
 800fb74:	7fefffff 	.word	0x7fefffff

0800fb78 <sin>:
 800fb78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fb7a:	eeb0 7b40 	vmov.f64	d7, d0
 800fb7e:	ee17 3a90 	vmov	r3, s15
 800fb82:	4a1f      	ldr	r2, [pc, #124]	; (800fc00 <sin+0x88>)
 800fb84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fb88:	4293      	cmp	r3, r2
 800fb8a:	dc05      	bgt.n	800fb98 <sin+0x20>
 800fb8c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 800fbf8 <sin+0x80>
 800fb90:	2000      	movs	r0, #0
 800fb92:	f000 fd31 	bl	80105f8 <__kernel_sin>
 800fb96:	e004      	b.n	800fba2 <sin+0x2a>
 800fb98:	4a1a      	ldr	r2, [pc, #104]	; (800fc04 <sin+0x8c>)
 800fb9a:	4293      	cmp	r3, r2
 800fb9c:	dd04      	ble.n	800fba8 <sin+0x30>
 800fb9e:	ee30 0b40 	vsub.f64	d0, d0, d0
 800fba2:	b005      	add	sp, #20
 800fba4:	f85d fb04 	ldr.w	pc, [sp], #4
 800fba8:	4668      	mov	r0, sp
 800fbaa:	f000 f8f9 	bl	800fda0 <__ieee754_rem_pio2>
 800fbae:	f000 0003 	and.w	r0, r0, #3
 800fbb2:	2801      	cmp	r0, #1
 800fbb4:	d008      	beq.n	800fbc8 <sin+0x50>
 800fbb6:	2802      	cmp	r0, #2
 800fbb8:	d00d      	beq.n	800fbd6 <sin+0x5e>
 800fbba:	b9b0      	cbnz	r0, 800fbea <sin+0x72>
 800fbbc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fbc0:	ed9d 0b00 	vldr	d0, [sp]
 800fbc4:	2001      	movs	r0, #1
 800fbc6:	e7e4      	b.n	800fb92 <sin+0x1a>
 800fbc8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fbcc:	ed9d 0b00 	vldr	d0, [sp]
 800fbd0:	f000 fa26 	bl	8010020 <__kernel_cos>
 800fbd4:	e7e5      	b.n	800fba2 <sin+0x2a>
 800fbd6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fbda:	ed9d 0b00 	vldr	d0, [sp]
 800fbde:	2001      	movs	r0, #1
 800fbe0:	f000 fd0a 	bl	80105f8 <__kernel_sin>
 800fbe4:	eeb1 0b40 	vneg.f64	d0, d0
 800fbe8:	e7db      	b.n	800fba2 <sin+0x2a>
 800fbea:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fbee:	ed9d 0b00 	vldr	d0, [sp]
 800fbf2:	f000 fa15 	bl	8010020 <__kernel_cos>
 800fbf6:	e7f5      	b.n	800fbe4 <sin+0x6c>
	...
 800fc00:	3fe921fb 	.word	0x3fe921fb
 800fc04:	7fefffff 	.word	0x7fefffff

0800fc08 <sinf_poly>:
 800fc08:	07cb      	lsls	r3, r1, #31
 800fc0a:	d412      	bmi.n	800fc32 <sinf_poly+0x2a>
 800fc0c:	ee21 6b00 	vmul.f64	d6, d1, d0
 800fc10:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 800fc14:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800fc18:	eea5 7b01 	vfma.f64	d7, d5, d1
 800fc1c:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 800fc20:	ee21 1b06 	vmul.f64	d1, d1, d6
 800fc24:	eea5 0b06 	vfma.f64	d0, d5, d6
 800fc28:	eea7 0b01 	vfma.f64	d0, d7, d1
 800fc2c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800fc30:	4770      	bx	lr
 800fc32:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 800fc36:	ee21 6b01 	vmul.f64	d6, d1, d1
 800fc3a:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800fc3e:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800fc42:	eea1 7b05 	vfma.f64	d7, d1, d5
 800fc46:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 800fc4a:	eea1 0b05 	vfma.f64	d0, d1, d5
 800fc4e:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 800fc52:	ee21 1b06 	vmul.f64	d1, d1, d6
 800fc56:	eea6 0b05 	vfma.f64	d0, d6, d5
 800fc5a:	e7e5      	b.n	800fc28 <sinf_poly+0x20>
 800fc5c:	0000      	movs	r0, r0
	...

0800fc60 <sinf>:
 800fc60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc62:	ee10 4a10 	vmov	r4, s0
 800fc66:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800fc6a:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800fc6e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800fc72:	eef0 7a40 	vmov.f32	s15, s0
 800fc76:	ea4f 5214 	mov.w	r2, r4, lsr #20
 800fc7a:	d218      	bcs.n	800fcae <sinf+0x4e>
 800fc7c:	ee26 1b06 	vmul.f64	d1, d6, d6
 800fc80:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800fc84:	d20a      	bcs.n	800fc9c <sinf+0x3c>
 800fc86:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 800fc8a:	d103      	bne.n	800fc94 <sinf+0x34>
 800fc8c:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800fc90:	ed8d 1a01 	vstr	s2, [sp, #4]
 800fc94:	eeb0 0a67 	vmov.f32	s0, s15
 800fc98:	b003      	add	sp, #12
 800fc9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc9c:	483e      	ldr	r0, [pc, #248]	; (800fd98 <sinf+0x138>)
 800fc9e:	eeb0 0b46 	vmov.f64	d0, d6
 800fca2:	2100      	movs	r1, #0
 800fca4:	b003      	add	sp, #12
 800fca6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800fcaa:	f7ff bfad 	b.w	800fc08 <sinf_poly>
 800fcae:	f240 422e 	movw	r2, #1070	; 0x42e
 800fcb2:	4293      	cmp	r3, r2
 800fcb4:	d824      	bhi.n	800fd00 <sinf+0xa0>
 800fcb6:	4b38      	ldr	r3, [pc, #224]	; (800fd98 <sinf+0x138>)
 800fcb8:	ed93 7b08 	vldr	d7, [r3, #32]
 800fcbc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800fcc0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800fcc4:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800fcc8:	ee17 1a90 	vmov	r1, s15
 800fccc:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800fcd0:	1609      	asrs	r1, r1, #24
 800fcd2:	ee07 1a90 	vmov	s15, r1
 800fcd6:	f001 0203 	and.w	r2, r1, #3
 800fcda:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800fcde:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800fce2:	ed92 0b00 	vldr	d0, [r2]
 800fce6:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800fcea:	f011 0f02 	tst.w	r1, #2
 800fcee:	eea5 6b47 	vfms.f64	d6, d5, d7
 800fcf2:	bf08      	it	eq
 800fcf4:	4618      	moveq	r0, r3
 800fcf6:	ee26 1b06 	vmul.f64	d1, d6, d6
 800fcfa:	ee20 0b06 	vmul.f64	d0, d0, d6
 800fcfe:	e7d1      	b.n	800fca4 <sinf+0x44>
 800fd00:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800fd04:	d23d      	bcs.n	800fd82 <sinf+0x122>
 800fd06:	4b25      	ldr	r3, [pc, #148]	; (800fd9c <sinf+0x13c>)
 800fd08:	f3c4 6283 	ubfx	r2, r4, #26, #4
 800fd0c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800fd10:	f3c4 0116 	ubfx	r1, r4, #0, #23
 800fd14:	6a06      	ldr	r6, [r0, #32]
 800fd16:	6900      	ldr	r0, [r0, #16]
 800fd18:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800fd1c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800fd20:	40a9      	lsls	r1, r5
 800fd22:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800fd26:	fba1 6706 	umull	r6, r7, r1, r6
 800fd2a:	fb05 f301 	mul.w	r3, r5, r1
 800fd2e:	463a      	mov	r2, r7
 800fd30:	fbe0 2301 	umlal	r2, r3, r0, r1
 800fd34:	1c11      	adds	r1, r2, #0
 800fd36:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 800fd3a:	2000      	movs	r0, #0
 800fd3c:	1a10      	subs	r0, r2, r0
 800fd3e:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 800fd42:	eb63 0101 	sbc.w	r1, r3, r1
 800fd46:	f7f0 fcb1 	bl	80006ac <__aeabi_l2d>
 800fd4a:	0fb5      	lsrs	r5, r6, #30
 800fd4c:	4a12      	ldr	r2, [pc, #72]	; (800fd98 <sinf+0x138>)
 800fd4e:	eb05 73d4 	add.w	r3, r5, r4, lsr #31
 800fd52:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 800fd90 <sinf+0x130>
 800fd56:	ec41 0b17 	vmov	d7, r0, r1
 800fd5a:	f003 0103 	and.w	r1, r3, #3
 800fd5e:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800fd62:	ee27 0b00 	vmul.f64	d0, d7, d0
 800fd66:	ed91 7b00 	vldr	d7, [r1]
 800fd6a:	ee20 1b00 	vmul.f64	d1, d0, d0
 800fd6e:	f013 0f02 	tst.w	r3, #2
 800fd72:	f102 0070 	add.w	r0, r2, #112	; 0x70
 800fd76:	4629      	mov	r1, r5
 800fd78:	bf08      	it	eq
 800fd7a:	4610      	moveq	r0, r2
 800fd7c:	ee27 0b00 	vmul.f64	d0, d7, d0
 800fd80:	e790      	b.n	800fca4 <sinf+0x44>
 800fd82:	b003      	add	sp, #12
 800fd84:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800fd88:	f7ff bba5 	b.w	800f4d6 <__math_invalidf>
 800fd8c:	f3af 8000 	nop.w
 800fd90:	54442d18 	.word	0x54442d18
 800fd94:	3c1921fb 	.word	0x3c1921fb
 800fd98:	080143b8 	.word	0x080143b8
 800fd9c:	08014358 	.word	0x08014358

0800fda0 <__ieee754_rem_pio2>:
 800fda0:	b570      	push	{r4, r5, r6, lr}
 800fda2:	eeb0 7b40 	vmov.f64	d7, d0
 800fda6:	ee17 5a90 	vmov	r5, s15
 800fdaa:	4b97      	ldr	r3, [pc, #604]	; (8010008 <__ieee754_rem_pio2+0x268>)
 800fdac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fdb0:	429e      	cmp	r6, r3
 800fdb2:	b088      	sub	sp, #32
 800fdb4:	4604      	mov	r4, r0
 800fdb6:	dc07      	bgt.n	800fdc8 <__ieee754_rem_pio2+0x28>
 800fdb8:	2200      	movs	r2, #0
 800fdba:	2300      	movs	r3, #0
 800fdbc:	ed84 0b00 	vstr	d0, [r4]
 800fdc0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800fdc4:	2000      	movs	r0, #0
 800fdc6:	e01b      	b.n	800fe00 <__ieee754_rem_pio2+0x60>
 800fdc8:	4b90      	ldr	r3, [pc, #576]	; (801000c <__ieee754_rem_pio2+0x26c>)
 800fdca:	429e      	cmp	r6, r3
 800fdcc:	dc3b      	bgt.n	800fe46 <__ieee754_rem_pio2+0xa6>
 800fdce:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800fdd2:	2d00      	cmp	r5, #0
 800fdd4:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800ffc8 <__ieee754_rem_pio2+0x228>
 800fdd8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800fddc:	dd19      	ble.n	800fe12 <__ieee754_rem_pio2+0x72>
 800fdde:	ee30 7b46 	vsub.f64	d7, d0, d6
 800fde2:	429e      	cmp	r6, r3
 800fde4:	d00e      	beq.n	800fe04 <__ieee754_rem_pio2+0x64>
 800fde6:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800ffd0 <__ieee754_rem_pio2+0x230>
 800fdea:	ee37 5b46 	vsub.f64	d5, d7, d6
 800fdee:	ee37 7b45 	vsub.f64	d7, d7, d5
 800fdf2:	ed84 5b00 	vstr	d5, [r4]
 800fdf6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fdfa:	ed84 7b02 	vstr	d7, [r4, #8]
 800fdfe:	2001      	movs	r0, #1
 800fe00:	b008      	add	sp, #32
 800fe02:	bd70      	pop	{r4, r5, r6, pc}
 800fe04:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800ffd8 <__ieee754_rem_pio2+0x238>
 800fe08:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fe0c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800ffe0 <__ieee754_rem_pio2+0x240>
 800fe10:	e7eb      	b.n	800fdea <__ieee754_rem_pio2+0x4a>
 800fe12:	429e      	cmp	r6, r3
 800fe14:	ee30 7b06 	vadd.f64	d7, d0, d6
 800fe18:	d00e      	beq.n	800fe38 <__ieee754_rem_pio2+0x98>
 800fe1a:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 800ffd0 <__ieee754_rem_pio2+0x230>
 800fe1e:	ee37 5b06 	vadd.f64	d5, d7, d6
 800fe22:	ee37 7b45 	vsub.f64	d7, d7, d5
 800fe26:	ed84 5b00 	vstr	d5, [r4]
 800fe2a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800fe2e:	f04f 30ff 	mov.w	r0, #4294967295
 800fe32:	ed84 7b02 	vstr	d7, [r4, #8]
 800fe36:	e7e3      	b.n	800fe00 <__ieee754_rem_pio2+0x60>
 800fe38:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800ffd8 <__ieee754_rem_pio2+0x238>
 800fe3c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800fe40:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800ffe0 <__ieee754_rem_pio2+0x240>
 800fe44:	e7eb      	b.n	800fe1e <__ieee754_rem_pio2+0x7e>
 800fe46:	4b72      	ldr	r3, [pc, #456]	; (8010010 <__ieee754_rem_pio2+0x270>)
 800fe48:	429e      	cmp	r6, r3
 800fe4a:	dc6e      	bgt.n	800ff2a <__ieee754_rem_pio2+0x18a>
 800fe4c:	f000 fc9c 	bl	8010788 <fabs>
 800fe50:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800fe54:	ed9f 6b64 	vldr	d6, [pc, #400]	; 800ffe8 <__ieee754_rem_pio2+0x248>
 800fe58:	eea0 7b06 	vfma.f64	d7, d0, d6
 800fe5c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800fe60:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800fe64:	ee17 0a90 	vmov	r0, s15
 800fe68:	eeb1 4b45 	vneg.f64	d4, d5
 800fe6c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800ffc8 <__ieee754_rem_pio2+0x228>
 800fe70:	eea5 0b47 	vfms.f64	d0, d5, d7
 800fe74:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800ffd0 <__ieee754_rem_pio2+0x230>
 800fe78:	281f      	cmp	r0, #31
 800fe7a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800fe7e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800fe82:	dc08      	bgt.n	800fe96 <__ieee754_rem_pio2+0xf6>
 800fe84:	4b63      	ldr	r3, [pc, #396]	; (8010014 <__ieee754_rem_pio2+0x274>)
 800fe86:	1e42      	subs	r2, r0, #1
 800fe88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe8c:	42b3      	cmp	r3, r6
 800fe8e:	d002      	beq.n	800fe96 <__ieee754_rem_pio2+0xf6>
 800fe90:	ed84 6b00 	vstr	d6, [r4]
 800fe94:	e024      	b.n	800fee0 <__ieee754_rem_pio2+0x140>
 800fe96:	ee16 3a90 	vmov	r3, s13
 800fe9a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800fe9e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800fea2:	2b10      	cmp	r3, #16
 800fea4:	ea4f 5226 	mov.w	r2, r6, asr #20
 800fea8:	ddf2      	ble.n	800fe90 <__ieee754_rem_pio2+0xf0>
 800feaa:	eeb0 6b40 	vmov.f64	d6, d0
 800feae:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 800ffd8 <__ieee754_rem_pio2+0x238>
 800feb2:	eea4 6b03 	vfma.f64	d6, d4, d3
 800feb6:	ee30 7b46 	vsub.f64	d7, d0, d6
 800feba:	eea4 7b03 	vfma.f64	d7, d4, d3
 800febe:	ed9f 3b48 	vldr	d3, [pc, #288]	; 800ffe0 <__ieee754_rem_pio2+0x240>
 800fec2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800fec6:	ee36 3b47 	vsub.f64	d3, d6, d7
 800feca:	ee13 3a90 	vmov	r3, s7
 800fece:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800fed2:	1ad3      	subs	r3, r2, r3
 800fed4:	2b31      	cmp	r3, #49	; 0x31
 800fed6:	dc17      	bgt.n	800ff08 <__ieee754_rem_pio2+0x168>
 800fed8:	eeb0 0b46 	vmov.f64	d0, d6
 800fedc:	ed84 3b00 	vstr	d3, [r4]
 800fee0:	ed94 6b00 	vldr	d6, [r4]
 800fee4:	2d00      	cmp	r5, #0
 800fee6:	ee30 0b46 	vsub.f64	d0, d0, d6
 800feea:	ee30 7b47 	vsub.f64	d7, d0, d7
 800feee:	ed84 7b02 	vstr	d7, [r4, #8]
 800fef2:	da85      	bge.n	800fe00 <__ieee754_rem_pio2+0x60>
 800fef4:	eeb1 6b46 	vneg.f64	d6, d6
 800fef8:	ed84 6b00 	vstr	d6, [r4]
 800fefc:	eeb1 7b47 	vneg.f64	d7, d7
 800ff00:	4240      	negs	r0, r0
 800ff02:	ed84 7b02 	vstr	d7, [r4, #8]
 800ff06:	e77b      	b.n	800fe00 <__ieee754_rem_pio2+0x60>
 800ff08:	ed9f 3b39 	vldr	d3, [pc, #228]	; 800fff0 <__ieee754_rem_pio2+0x250>
 800ff0c:	eeb0 0b46 	vmov.f64	d0, d6
 800ff10:	eea4 0b03 	vfma.f64	d0, d4, d3
 800ff14:	ee36 7b40 	vsub.f64	d7, d6, d0
 800ff18:	ed9f 6b37 	vldr	d6, [pc, #220]	; 800fff8 <__ieee754_rem_pio2+0x258>
 800ff1c:	eea4 7b03 	vfma.f64	d7, d4, d3
 800ff20:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800ff24:	ee30 6b47 	vsub.f64	d6, d0, d7
 800ff28:	e7b2      	b.n	800fe90 <__ieee754_rem_pio2+0xf0>
 800ff2a:	4b3b      	ldr	r3, [pc, #236]	; (8010018 <__ieee754_rem_pio2+0x278>)
 800ff2c:	429e      	cmp	r6, r3
 800ff2e:	dd06      	ble.n	800ff3e <__ieee754_rem_pio2+0x19e>
 800ff30:	ee30 7b40 	vsub.f64	d7, d0, d0
 800ff34:	ed80 7b02 	vstr	d7, [r0, #8]
 800ff38:	ed80 7b00 	vstr	d7, [r0]
 800ff3c:	e742      	b.n	800fdc4 <__ieee754_rem_pio2+0x24>
 800ff3e:	1532      	asrs	r2, r6, #20
 800ff40:	ee10 0a10 	vmov	r0, s0
 800ff44:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800ff48:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800ff4c:	ec41 0b17 	vmov	d7, r0, r1
 800ff50:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800ff54:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8010000 <__ieee754_rem_pio2+0x260>
 800ff58:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800ff5c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ff60:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ff64:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ff68:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800ff6c:	a902      	add	r1, sp, #8
 800ff6e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800ff72:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ff76:	ed8d 6b04 	vstr	d6, [sp, #16]
 800ff7a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ff7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ff82:	2603      	movs	r6, #3
 800ff84:	4608      	mov	r0, r1
 800ff86:	ed91 7b04 	vldr	d7, [r1, #16]
 800ff8a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ff8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff92:	4633      	mov	r3, r6
 800ff94:	f1a1 0108 	sub.w	r1, r1, #8
 800ff98:	f106 36ff 	add.w	r6, r6, #4294967295
 800ff9c:	d0f3      	beq.n	800ff86 <__ieee754_rem_pio2+0x1e6>
 800ff9e:	491f      	ldr	r1, [pc, #124]	; (801001c <__ieee754_rem_pio2+0x27c>)
 800ffa0:	9101      	str	r1, [sp, #4]
 800ffa2:	2102      	movs	r1, #2
 800ffa4:	9100      	str	r1, [sp, #0]
 800ffa6:	4621      	mov	r1, r4
 800ffa8:	f000 f8a6 	bl	80100f8 <__kernel_rem_pio2>
 800ffac:	2d00      	cmp	r5, #0
 800ffae:	f6bf af27 	bge.w	800fe00 <__ieee754_rem_pio2+0x60>
 800ffb2:	ed94 7b00 	vldr	d7, [r4]
 800ffb6:	eeb1 7b47 	vneg.f64	d7, d7
 800ffba:	ed84 7b00 	vstr	d7, [r4]
 800ffbe:	ed94 7b02 	vldr	d7, [r4, #8]
 800ffc2:	e79b      	b.n	800fefc <__ieee754_rem_pio2+0x15c>
 800ffc4:	f3af 8000 	nop.w
 800ffc8:	54400000 	.word	0x54400000
 800ffcc:	3ff921fb 	.word	0x3ff921fb
 800ffd0:	1a626331 	.word	0x1a626331
 800ffd4:	3dd0b461 	.word	0x3dd0b461
 800ffd8:	1a600000 	.word	0x1a600000
 800ffdc:	3dd0b461 	.word	0x3dd0b461
 800ffe0:	2e037073 	.word	0x2e037073
 800ffe4:	3ba3198a 	.word	0x3ba3198a
 800ffe8:	6dc9c883 	.word	0x6dc9c883
 800ffec:	3fe45f30 	.word	0x3fe45f30
 800fff0:	2e000000 	.word	0x2e000000
 800fff4:	3ba3198a 	.word	0x3ba3198a
 800fff8:	252049c1 	.word	0x252049c1
 800fffc:	397b839a 	.word	0x397b839a
 8010000:	00000000 	.word	0x00000000
 8010004:	41700000 	.word	0x41700000
 8010008:	3fe921fb 	.word	0x3fe921fb
 801000c:	4002d97b 	.word	0x4002d97b
 8010010:	413921fb 	.word	0x413921fb
 8010014:	08014498 	.word	0x08014498
 8010018:	7fefffff 	.word	0x7fefffff
 801001c:	08014518 	.word	0x08014518

08010020 <__kernel_cos>:
 8010020:	ee10 1a90 	vmov	r1, s1
 8010024:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8010028:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801002c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8010030:	da05      	bge.n	801003e <__kernel_cos+0x1e>
 8010032:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8010036:	ee17 3a90 	vmov	r3, s15
 801003a:	2b00      	cmp	r3, #0
 801003c:	d03d      	beq.n	80100ba <__kernel_cos+0x9a>
 801003e:	ee20 3b00 	vmul.f64	d3, d0, d0
 8010042:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80100c0 <__kernel_cos+0xa0>
 8010046:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80100c8 <__kernel_cos+0xa8>
 801004a:	eea3 6b07 	vfma.f64	d6, d3, d7
 801004e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80100d0 <__kernel_cos+0xb0>
 8010052:	eea6 7b03 	vfma.f64	d7, d6, d3
 8010056:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80100d8 <__kernel_cos+0xb8>
 801005a:	eea7 6b03 	vfma.f64	d6, d7, d3
 801005e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80100e0 <__kernel_cos+0xc0>
 8010062:	4b23      	ldr	r3, [pc, #140]	; (80100f0 <__kernel_cos+0xd0>)
 8010064:	eea6 7b03 	vfma.f64	d7, d6, d3
 8010068:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80100e8 <__kernel_cos+0xc8>
 801006c:	4299      	cmp	r1, r3
 801006e:	eea7 6b03 	vfma.f64	d6, d7, d3
 8010072:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8010076:	ee26 5b03 	vmul.f64	d5, d6, d3
 801007a:	ee23 7b07 	vmul.f64	d7, d3, d7
 801007e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8010082:	eea3 6b05 	vfma.f64	d6, d3, d5
 8010086:	dc04      	bgt.n	8010092 <__kernel_cos+0x72>
 8010088:	ee37 6b46 	vsub.f64	d6, d7, d6
 801008c:	ee34 0b46 	vsub.f64	d0, d4, d6
 8010090:	4770      	bx	lr
 8010092:	4b18      	ldr	r3, [pc, #96]	; (80100f4 <__kernel_cos+0xd4>)
 8010094:	4299      	cmp	r1, r3
 8010096:	dc0d      	bgt.n	80100b4 <__kernel_cos+0x94>
 8010098:	2200      	movs	r2, #0
 801009a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 801009e:	ec43 2b15 	vmov	d5, r2, r3
 80100a2:	ee34 0b45 	vsub.f64	d0, d4, d5
 80100a6:	ee37 7b45 	vsub.f64	d7, d7, d5
 80100aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80100ae:	ee30 0b47 	vsub.f64	d0, d0, d7
 80100b2:	4770      	bx	lr
 80100b4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 80100b8:	e7f3      	b.n	80100a2 <__kernel_cos+0x82>
 80100ba:	eeb0 0b44 	vmov.f64	d0, d4
 80100be:	4770      	bx	lr
 80100c0:	be8838d4 	.word	0xbe8838d4
 80100c4:	bda8fae9 	.word	0xbda8fae9
 80100c8:	bdb4b1c4 	.word	0xbdb4b1c4
 80100cc:	3e21ee9e 	.word	0x3e21ee9e
 80100d0:	809c52ad 	.word	0x809c52ad
 80100d4:	be927e4f 	.word	0xbe927e4f
 80100d8:	19cb1590 	.word	0x19cb1590
 80100dc:	3efa01a0 	.word	0x3efa01a0
 80100e0:	16c15177 	.word	0x16c15177
 80100e4:	bf56c16c 	.word	0xbf56c16c
 80100e8:	5555554c 	.word	0x5555554c
 80100ec:	3fa55555 	.word	0x3fa55555
 80100f0:	3fd33332 	.word	0x3fd33332
 80100f4:	3fe90000 	.word	0x3fe90000

080100f8 <__kernel_rem_pio2>:
 80100f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100fc:	ed2d 8b06 	vpush	{d8-d10}
 8010100:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8010104:	469b      	mov	fp, r3
 8010106:	460f      	mov	r7, r1
 8010108:	4bcf      	ldr	r3, [pc, #828]	; (8010448 <__kernel_rem_pio2+0x350>)
 801010a:	99a0      	ldr	r1, [sp, #640]	; 0x280
 801010c:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 8010110:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8010114:	9000      	str	r0, [sp, #0]
 8010116:	f112 0f14 	cmn.w	r2, #20
 801011a:	bfa8      	it	ge
 801011c:	2318      	movge	r3, #24
 801011e:	f10b 31ff 	add.w	r1, fp, #4294967295
 8010122:	bfb8      	it	lt
 8010124:	2300      	movlt	r3, #0
 8010126:	f06f 0417 	mvn.w	r4, #23
 801012a:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8010430 <__kernel_rem_pio2+0x338>
 801012e:	bfa4      	itt	ge
 8010130:	f1a2 0a03 	subge.w	sl, r2, #3
 8010134:	fb9a f3f3 	sdivge	r3, sl, r3
 8010138:	fb03 4404 	mla	r4, r3, r4, r4
 801013c:	1a5d      	subs	r5, r3, r1
 801013e:	4414      	add	r4, r2
 8010140:	eb09 0601 	add.w	r6, r9, r1
 8010144:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8010148:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 801014c:	2200      	movs	r2, #0
 801014e:	42b2      	cmp	r2, r6
 8010150:	dd12      	ble.n	8010178 <__kernel_rem_pio2+0x80>
 8010152:	aa18      	add	r2, sp, #96	; 0x60
 8010154:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8010158:	460e      	mov	r6, r1
 801015a:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 801015e:	f1cb 0a01 	rsb	sl, fp, #1
 8010162:	eb0a 0006 	add.w	r0, sl, r6
 8010166:	4581      	cmp	r9, r0
 8010168:	db25      	blt.n	80101b6 <__kernel_rem_pio2+0xbe>
 801016a:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8010430 <__kernel_rem_pio2+0x338>
 801016e:	f8dd e000 	ldr.w	lr, [sp]
 8010172:	4615      	mov	r5, r2
 8010174:	2000      	movs	r0, #0
 8010176:	e015      	b.n	80101a4 <__kernel_rem_pio2+0xac>
 8010178:	42d5      	cmn	r5, r2
 801017a:	d409      	bmi.n	8010190 <__kernel_rem_pio2+0x98>
 801017c:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8010180:	ee07 0a90 	vmov	s15, r0
 8010184:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010188:	eca8 7b02 	vstmia	r8!, {d7}
 801018c:	3201      	adds	r2, #1
 801018e:	e7de      	b.n	801014e <__kernel_rem_pio2+0x56>
 8010190:	eeb0 7b46 	vmov.f64	d7, d6
 8010194:	e7f8      	b.n	8010188 <__kernel_rem_pio2+0x90>
 8010196:	ecbe 5b02 	vldmia	lr!, {d5}
 801019a:	ed95 6b00 	vldr	d6, [r5]
 801019e:	3001      	adds	r0, #1
 80101a0:	eea5 7b06 	vfma.f64	d7, d5, d6
 80101a4:	4288      	cmp	r0, r1
 80101a6:	f1a5 0508 	sub.w	r5, r5, #8
 80101aa:	ddf4      	ble.n	8010196 <__kernel_rem_pio2+0x9e>
 80101ac:	eca8 7b02 	vstmia	r8!, {d7}
 80101b0:	3208      	adds	r2, #8
 80101b2:	3601      	adds	r6, #1
 80101b4:	e7d5      	b.n	8010162 <__kernel_rem_pio2+0x6a>
 80101b6:	aa04      	add	r2, sp, #16
 80101b8:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8010438 <__kernel_rem_pio2+0x340>
 80101bc:	ed9f aba0 	vldr	d10, [pc, #640]	; 8010440 <__kernel_rem_pio2+0x348>
 80101c0:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80101c4:	9201      	str	r2, [sp, #4]
 80101c6:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 80101ca:	464e      	mov	r6, r9
 80101cc:	ab90      	add	r3, sp, #576	; 0x240
 80101ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80101d2:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 80101d6:	ab04      	add	r3, sp, #16
 80101d8:	4618      	mov	r0, r3
 80101da:	4632      	mov	r2, r6
 80101dc:	2a00      	cmp	r2, #0
 80101de:	dc4e      	bgt.n	801027e <__kernel_rem_pio2+0x186>
 80101e0:	4620      	mov	r0, r4
 80101e2:	e9cd 1302 	strd	r1, r3, [sp, #8]
 80101e6:	f000 fb4f 	bl	8010888 <scalbn>
 80101ea:	eeb0 8b40 	vmov.f64	d8, d0
 80101ee:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80101f2:	ee28 0b00 	vmul.f64	d0, d8, d0
 80101f6:	f000 fad3 	bl	80107a0 <floor>
 80101fa:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80101fe:	eea0 8b47 	vfms.f64	d8, d0, d7
 8010202:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8010206:	2c00      	cmp	r4, #0
 8010208:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 801020c:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8010210:	ee38 8b40 	vsub.f64	d8, d8, d0
 8010214:	ee17 8a90 	vmov	r8, s15
 8010218:	dd46      	ble.n	80102a8 <__kernel_rem_pio2+0x1b0>
 801021a:	1e70      	subs	r0, r6, #1
 801021c:	aa04      	add	r2, sp, #16
 801021e:	f1c4 0c18 	rsb	ip, r4, #24
 8010222:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 8010226:	fa45 f20c 	asr.w	r2, r5, ip
 801022a:	4490      	add	r8, r2
 801022c:	fa02 f20c 	lsl.w	r2, r2, ip
 8010230:	1aad      	subs	r5, r5, r2
 8010232:	aa04      	add	r2, sp, #16
 8010234:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8010238:	f1c4 0217 	rsb	r2, r4, #23
 801023c:	4115      	asrs	r5, r2
 801023e:	2d00      	cmp	r5, #0
 8010240:	dd41      	ble.n	80102c6 <__kernel_rem_pio2+0x1ce>
 8010242:	f04f 0c00 	mov.w	ip, #0
 8010246:	f108 0801 	add.w	r8, r8, #1
 801024a:	4660      	mov	r0, ip
 801024c:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8010250:	4566      	cmp	r6, ip
 8010252:	dc69      	bgt.n	8010328 <__kernel_rem_pio2+0x230>
 8010254:	2c00      	cmp	r4, #0
 8010256:	dd03      	ble.n	8010260 <__kernel_rem_pio2+0x168>
 8010258:	2c01      	cmp	r4, #1
 801025a:	d076      	beq.n	801034a <__kernel_rem_pio2+0x252>
 801025c:	2c02      	cmp	r4, #2
 801025e:	d07f      	beq.n	8010360 <__kernel_rem_pio2+0x268>
 8010260:	2d02      	cmp	r5, #2
 8010262:	d130      	bne.n	80102c6 <__kernel_rem_pio2+0x1ce>
 8010264:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010268:	ee30 8b48 	vsub.f64	d8, d0, d8
 801026c:	b358      	cbz	r0, 80102c6 <__kernel_rem_pio2+0x1ce>
 801026e:	4620      	mov	r0, r4
 8010270:	9102      	str	r1, [sp, #8]
 8010272:	f000 fb09 	bl	8010888 <scalbn>
 8010276:	9902      	ldr	r1, [sp, #8]
 8010278:	ee38 8b40 	vsub.f64	d8, d8, d0
 801027c:	e023      	b.n	80102c6 <__kernel_rem_pio2+0x1ce>
 801027e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8010282:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8010286:	3a01      	subs	r2, #1
 8010288:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801028c:	ad68      	add	r5, sp, #416	; 0x1a0
 801028e:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8010292:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010296:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 801029a:	eca0 0a01 	vstmia	r0!, {s0}
 801029e:	ed95 0b00 	vldr	d0, [r5]
 80102a2:	ee37 0b00 	vadd.f64	d0, d7, d0
 80102a6:	e799      	b.n	80101dc <__kernel_rem_pio2+0xe4>
 80102a8:	d105      	bne.n	80102b6 <__kernel_rem_pio2+0x1be>
 80102aa:	1e72      	subs	r2, r6, #1
 80102ac:	a804      	add	r0, sp, #16
 80102ae:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 80102b2:	15ed      	asrs	r5, r5, #23
 80102b4:	e7c3      	b.n	801023e <__kernel_rem_pio2+0x146>
 80102b6:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80102ba:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80102be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102c2:	da2f      	bge.n	8010324 <__kernel_rem_pio2+0x22c>
 80102c4:	2500      	movs	r5, #0
 80102c6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80102ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102ce:	f040 8087 	bne.w	80103e0 <__kernel_rem_pio2+0x2e8>
 80102d2:	1e73      	subs	r3, r6, #1
 80102d4:	4618      	mov	r0, r3
 80102d6:	f04f 0c00 	mov.w	ip, #0
 80102da:	4548      	cmp	r0, r9
 80102dc:	da47      	bge.n	801036e <__kernel_rem_pio2+0x276>
 80102de:	f1bc 0f00 	cmp.w	ip, #0
 80102e2:	d070      	beq.n	80103c6 <__kernel_rem_pio2+0x2ce>
 80102e4:	aa04      	add	r2, sp, #16
 80102e6:	3c18      	subs	r4, #24
 80102e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80102ec:	2a00      	cmp	r2, #0
 80102ee:	d075      	beq.n	80103dc <__kernel_rem_pio2+0x2e4>
 80102f0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80102f4:	4620      	mov	r0, r4
 80102f6:	9300      	str	r3, [sp, #0]
 80102f8:	f000 fac6 	bl	8010888 <scalbn>
 80102fc:	9b00      	ldr	r3, [sp, #0]
 80102fe:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8010438 <__kernel_rem_pio2+0x340>
 8010302:	461a      	mov	r2, r3
 8010304:	2a00      	cmp	r2, #0
 8010306:	f280 80ac 	bge.w	8010462 <__kernel_rem_pio2+0x36a>
 801030a:	4619      	mov	r1, r3
 801030c:	2000      	movs	r0, #0
 801030e:	2900      	cmp	r1, #0
 8010310:	f2c0 80cd 	blt.w	80104ae <__kernel_rem_pio2+0x3b6>
 8010314:	aa68      	add	r2, sp, #416	; 0x1a0
 8010316:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 801031a:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8010430 <__kernel_rem_pio2+0x338>
 801031e:	4e4b      	ldr	r6, [pc, #300]	; (801044c <__kernel_rem_pio2+0x354>)
 8010320:	2200      	movs	r2, #0
 8010322:	e0b8      	b.n	8010496 <__kernel_rem_pio2+0x39e>
 8010324:	2502      	movs	r5, #2
 8010326:	e78c      	b.n	8010242 <__kernel_rem_pio2+0x14a>
 8010328:	681a      	ldr	r2, [r3, #0]
 801032a:	b948      	cbnz	r0, 8010340 <__kernel_rem_pio2+0x248>
 801032c:	b11a      	cbz	r2, 8010336 <__kernel_rem_pio2+0x23e>
 801032e:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8010332:	601a      	str	r2, [r3, #0]
 8010334:	2201      	movs	r2, #1
 8010336:	f10c 0c01 	add.w	ip, ip, #1
 801033a:	3304      	adds	r3, #4
 801033c:	4610      	mov	r0, r2
 801033e:	e787      	b.n	8010250 <__kernel_rem_pio2+0x158>
 8010340:	ebae 0202 	sub.w	r2, lr, r2
 8010344:	601a      	str	r2, [r3, #0]
 8010346:	4602      	mov	r2, r0
 8010348:	e7f5      	b.n	8010336 <__kernel_rem_pio2+0x23e>
 801034a:	1e72      	subs	r2, r6, #1
 801034c:	ab04      	add	r3, sp, #16
 801034e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010352:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010356:	f10d 0c10 	add.w	ip, sp, #16
 801035a:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 801035e:	e77f      	b.n	8010260 <__kernel_rem_pio2+0x168>
 8010360:	1e72      	subs	r2, r6, #1
 8010362:	ab04      	add	r3, sp, #16
 8010364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010368:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801036c:	e7f3      	b.n	8010356 <__kernel_rem_pio2+0x25e>
 801036e:	aa04      	add	r2, sp, #16
 8010370:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8010374:	3801      	subs	r0, #1
 8010376:	ea4c 0c02 	orr.w	ip, ip, r2
 801037a:	e7ae      	b.n	80102da <__kernel_rem_pio2+0x1e2>
 801037c:	3001      	adds	r0, #1
 801037e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010382:	2a00      	cmp	r2, #0
 8010384:	d0fa      	beq.n	801037c <__kernel_rem_pio2+0x284>
 8010386:	eb06 020b 	add.w	r2, r6, fp
 801038a:	ad18      	add	r5, sp, #96	; 0x60
 801038c:	1c73      	adds	r3, r6, #1
 801038e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8010392:	4406      	add	r6, r0
 8010394:	429e      	cmp	r6, r3
 8010396:	f6ff af19 	blt.w	80101cc <__kernel_rem_pio2+0xd4>
 801039a:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 801039e:	9d00      	ldr	r5, [sp, #0]
 80103a0:	ee07 0a90 	vmov	s15, r0
 80103a4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80103a8:	2000      	movs	r0, #0
 80103aa:	eca2 7b02 	vstmia	r2!, {d7}
 80103ae:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010430 <__kernel_rem_pio2+0x338>
 80103b2:	4694      	mov	ip, r2
 80103b4:	4288      	cmp	r0, r1
 80103b6:	dd09      	ble.n	80103cc <__kernel_rem_pio2+0x2d4>
 80103b8:	a868      	add	r0, sp, #416	; 0x1a0
 80103ba:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 80103be:	ed80 7b00 	vstr	d7, [r0]
 80103c2:	3301      	adds	r3, #1
 80103c4:	e7e6      	b.n	8010394 <__kernel_rem_pio2+0x29c>
 80103c6:	9b01      	ldr	r3, [sp, #4]
 80103c8:	2001      	movs	r0, #1
 80103ca:	e7d8      	b.n	801037e <__kernel_rem_pio2+0x286>
 80103cc:	ecb5 5b02 	vldmia	r5!, {d5}
 80103d0:	ed3c 6b02 	vldmdb	ip!, {d6}
 80103d4:	3001      	adds	r0, #1
 80103d6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80103da:	e7eb      	b.n	80103b4 <__kernel_rem_pio2+0x2bc>
 80103dc:	3b01      	subs	r3, #1
 80103de:	e781      	b.n	80102e4 <__kernel_rem_pio2+0x1ec>
 80103e0:	4260      	negs	r0, r4
 80103e2:	eeb0 0b48 	vmov.f64	d0, d8
 80103e6:	f000 fa4f 	bl	8010888 <scalbn>
 80103ea:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8010440 <__kernel_rem_pio2+0x348>
 80103ee:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80103f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103f6:	db2b      	blt.n	8010450 <__kernel_rem_pio2+0x358>
 80103f8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8010438 <__kernel_rem_pio2+0x340>
 80103fc:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010400:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8010404:	aa04      	add	r2, sp, #16
 8010406:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801040a:	eea5 0b46 	vfms.f64	d0, d5, d6
 801040e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010412:	a904      	add	r1, sp, #16
 8010414:	ee10 3a10 	vmov	r3, s0
 8010418:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801041c:	ee17 2a10 	vmov	r2, s14
 8010420:	1c73      	adds	r3, r6, #1
 8010422:	3418      	adds	r4, #24
 8010424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010428:	e762      	b.n	80102f0 <__kernel_rem_pio2+0x1f8>
 801042a:	bf00      	nop
 801042c:	f3af 8000 	nop.w
	...
 801043c:	3e700000 	.word	0x3e700000
 8010440:	00000000 	.word	0x00000000
 8010444:	41700000 	.word	0x41700000
 8010448:	08014ed0 	.word	0x08014ed0
 801044c:	08014e90 	.word	0x08014e90
 8010450:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010454:	aa04      	add	r2, sp, #16
 8010456:	ee10 3a10 	vmov	r3, s0
 801045a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801045e:	4633      	mov	r3, r6
 8010460:	e746      	b.n	80102f0 <__kernel_rem_pio2+0x1f8>
 8010462:	a804      	add	r0, sp, #16
 8010464:	a968      	add	r1, sp, #416	; 0x1a0
 8010466:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801046a:	9000      	str	r0, [sp, #0]
 801046c:	ee07 0a90 	vmov	s15, r0
 8010470:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010474:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010478:	3a01      	subs	r2, #1
 801047a:	ee27 7b00 	vmul.f64	d7, d7, d0
 801047e:	ee20 0b06 	vmul.f64	d0, d0, d6
 8010482:	ed81 7b00 	vstr	d7, [r1]
 8010486:	e73d      	b.n	8010304 <__kernel_rem_pio2+0x20c>
 8010488:	ecb6 5b02 	vldmia	r6!, {d5}
 801048c:	ecb4 6b02 	vldmia	r4!, {d6}
 8010490:	3201      	adds	r2, #1
 8010492:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010496:	454a      	cmp	r2, r9
 8010498:	dc01      	bgt.n	801049e <__kernel_rem_pio2+0x3a6>
 801049a:	4290      	cmp	r0, r2
 801049c:	daf4      	bge.n	8010488 <__kernel_rem_pio2+0x390>
 801049e:	aa40      	add	r2, sp, #256	; 0x100
 80104a0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80104a4:	ed82 7b00 	vstr	d7, [r2]
 80104a8:	3901      	subs	r1, #1
 80104aa:	3001      	adds	r0, #1
 80104ac:	e72f      	b.n	801030e <__kernel_rem_pio2+0x216>
 80104ae:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 80104b0:	2a02      	cmp	r2, #2
 80104b2:	dc0a      	bgt.n	80104ca <__kernel_rem_pio2+0x3d2>
 80104b4:	2a00      	cmp	r2, #0
 80104b6:	dc5a      	bgt.n	801056e <__kernel_rem_pio2+0x476>
 80104b8:	d039      	beq.n	801052e <__kernel_rem_pio2+0x436>
 80104ba:	f008 0007 	and.w	r0, r8, #7
 80104be:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 80104c2:	ecbd 8b06 	vpop	{d8-d10}
 80104c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104ca:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 80104cc:	2a03      	cmp	r2, #3
 80104ce:	d1f4      	bne.n	80104ba <__kernel_rem_pio2+0x3c2>
 80104d0:	aa40      	add	r2, sp, #256	; 0x100
 80104d2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80104d6:	4611      	mov	r1, r2
 80104d8:	4618      	mov	r0, r3
 80104da:	2800      	cmp	r0, #0
 80104dc:	f1a1 0108 	sub.w	r1, r1, #8
 80104e0:	dc52      	bgt.n	8010588 <__kernel_rem_pio2+0x490>
 80104e2:	4619      	mov	r1, r3
 80104e4:	2901      	cmp	r1, #1
 80104e6:	f1a2 0208 	sub.w	r2, r2, #8
 80104ea:	dc5d      	bgt.n	80105a8 <__kernel_rem_pio2+0x4b0>
 80104ec:	ed9f 7b40 	vldr	d7, [pc, #256]	; 80105f0 <__kernel_rem_pio2+0x4f8>
 80104f0:	2b01      	cmp	r3, #1
 80104f2:	dc69      	bgt.n	80105c8 <__kernel_rem_pio2+0x4d0>
 80104f4:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 80104f8:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 80104fc:	2d00      	cmp	r5, #0
 80104fe:	d16c      	bne.n	80105da <__kernel_rem_pio2+0x4e2>
 8010500:	ed87 5b00 	vstr	d5, [r7]
 8010504:	ed87 6b02 	vstr	d6, [r7, #8]
 8010508:	ed87 7b04 	vstr	d7, [r7, #16]
 801050c:	e7d5      	b.n	80104ba <__kernel_rem_pio2+0x3c2>
 801050e:	aa40      	add	r2, sp, #256	; 0x100
 8010510:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010514:	ed92 6b00 	vldr	d6, [r2]
 8010518:	3b01      	subs	r3, #1
 801051a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801051e:	2b00      	cmp	r3, #0
 8010520:	daf5      	bge.n	801050e <__kernel_rem_pio2+0x416>
 8010522:	b10d      	cbz	r5, 8010528 <__kernel_rem_pio2+0x430>
 8010524:	eeb1 7b47 	vneg.f64	d7, d7
 8010528:	ed87 7b00 	vstr	d7, [r7]
 801052c:	e7c5      	b.n	80104ba <__kernel_rem_pio2+0x3c2>
 801052e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80105f0 <__kernel_rem_pio2+0x4f8>
 8010532:	e7f4      	b.n	801051e <__kernel_rem_pio2+0x426>
 8010534:	a940      	add	r1, sp, #256	; 0x100
 8010536:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801053a:	ed91 7b00 	vldr	d7, [r1]
 801053e:	3a01      	subs	r2, #1
 8010540:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010544:	2a00      	cmp	r2, #0
 8010546:	daf5      	bge.n	8010534 <__kernel_rem_pio2+0x43c>
 8010548:	b1ad      	cbz	r5, 8010576 <__kernel_rem_pio2+0x47e>
 801054a:	eeb1 7b46 	vneg.f64	d7, d6
 801054e:	ed87 7b00 	vstr	d7, [r7]
 8010552:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 8010556:	a942      	add	r1, sp, #264	; 0x108
 8010558:	2201      	movs	r2, #1
 801055a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801055e:	4293      	cmp	r3, r2
 8010560:	da0c      	bge.n	801057c <__kernel_rem_pio2+0x484>
 8010562:	b10d      	cbz	r5, 8010568 <__kernel_rem_pio2+0x470>
 8010564:	eeb1 7b47 	vneg.f64	d7, d7
 8010568:	ed87 7b02 	vstr	d7, [r7, #8]
 801056c:	e7a5      	b.n	80104ba <__kernel_rem_pio2+0x3c2>
 801056e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80105f0 <__kernel_rem_pio2+0x4f8>
 8010572:	461a      	mov	r2, r3
 8010574:	e7e6      	b.n	8010544 <__kernel_rem_pio2+0x44c>
 8010576:	eeb0 7b46 	vmov.f64	d7, d6
 801057a:	e7e8      	b.n	801054e <__kernel_rem_pio2+0x456>
 801057c:	ecb1 6b02 	vldmia	r1!, {d6}
 8010580:	3201      	adds	r2, #1
 8010582:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010586:	e7ea      	b.n	801055e <__kernel_rem_pio2+0x466>
 8010588:	ed91 7b00 	vldr	d7, [r1]
 801058c:	ed91 5b02 	vldr	d5, [r1, #8]
 8010590:	3801      	subs	r0, #1
 8010592:	ee37 6b05 	vadd.f64	d6, d7, d5
 8010596:	ee37 7b46 	vsub.f64	d7, d7, d6
 801059a:	ed81 6b00 	vstr	d6, [r1]
 801059e:	ee37 7b05 	vadd.f64	d7, d7, d5
 80105a2:	ed81 7b02 	vstr	d7, [r1, #8]
 80105a6:	e798      	b.n	80104da <__kernel_rem_pio2+0x3e2>
 80105a8:	ed92 7b00 	vldr	d7, [r2]
 80105ac:	ed92 5b02 	vldr	d5, [r2, #8]
 80105b0:	3901      	subs	r1, #1
 80105b2:	ee37 6b05 	vadd.f64	d6, d7, d5
 80105b6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80105ba:	ed82 6b00 	vstr	d6, [r2]
 80105be:	ee37 7b05 	vadd.f64	d7, d7, d5
 80105c2:	ed82 7b02 	vstr	d7, [r2, #8]
 80105c6:	e78d      	b.n	80104e4 <__kernel_rem_pio2+0x3ec>
 80105c8:	aa40      	add	r2, sp, #256	; 0x100
 80105ca:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80105ce:	ed92 6b00 	vldr	d6, [r2]
 80105d2:	3b01      	subs	r3, #1
 80105d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80105d8:	e78a      	b.n	80104f0 <__kernel_rem_pio2+0x3f8>
 80105da:	eeb1 5b45 	vneg.f64	d5, d5
 80105de:	eeb1 6b46 	vneg.f64	d6, d6
 80105e2:	ed87 5b00 	vstr	d5, [r7]
 80105e6:	eeb1 7b47 	vneg.f64	d7, d7
 80105ea:	ed87 6b02 	vstr	d6, [r7, #8]
 80105ee:	e78b      	b.n	8010508 <__kernel_rem_pio2+0x410>
	...

080105f8 <__kernel_sin>:
 80105f8:	ee10 3a90 	vmov	r3, s1
 80105fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010600:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010604:	da04      	bge.n	8010610 <__kernel_sin+0x18>
 8010606:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801060a:	ee17 3a90 	vmov	r3, s15
 801060e:	b35b      	cbz	r3, 8010668 <__kernel_sin+0x70>
 8010610:	ee20 6b00 	vmul.f64	d6, d0, d0
 8010614:	ee20 5b06 	vmul.f64	d5, d0, d6
 8010618:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8010670 <__kernel_sin+0x78>
 801061c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010678 <__kernel_sin+0x80>
 8010620:	eea6 4b07 	vfma.f64	d4, d6, d7
 8010624:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8010680 <__kernel_sin+0x88>
 8010628:	eea4 7b06 	vfma.f64	d7, d4, d6
 801062c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010688 <__kernel_sin+0x90>
 8010630:	eea7 4b06 	vfma.f64	d4, d7, d6
 8010634:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8010690 <__kernel_sin+0x98>
 8010638:	eea4 7b06 	vfma.f64	d7, d4, d6
 801063c:	b930      	cbnz	r0, 801064c <__kernel_sin+0x54>
 801063e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010698 <__kernel_sin+0xa0>
 8010642:	eea6 4b07 	vfma.f64	d4, d6, d7
 8010646:	eea4 0b05 	vfma.f64	d0, d4, d5
 801064a:	4770      	bx	lr
 801064c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8010650:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8010654:	eea1 7b04 	vfma.f64	d7, d1, d4
 8010658:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801065c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80106a0 <__kernel_sin+0xa8>
 8010660:	eea5 1b07 	vfma.f64	d1, d5, d7
 8010664:	ee30 0b41 	vsub.f64	d0, d0, d1
 8010668:	4770      	bx	lr
 801066a:	bf00      	nop
 801066c:	f3af 8000 	nop.w
 8010670:	5acfd57c 	.word	0x5acfd57c
 8010674:	3de5d93a 	.word	0x3de5d93a
 8010678:	8a2b9ceb 	.word	0x8a2b9ceb
 801067c:	be5ae5e6 	.word	0xbe5ae5e6
 8010680:	57b1fe7d 	.word	0x57b1fe7d
 8010684:	3ec71de3 	.word	0x3ec71de3
 8010688:	19c161d5 	.word	0x19c161d5
 801068c:	bf2a01a0 	.word	0xbf2a01a0
 8010690:	1110f8a6 	.word	0x1110f8a6
 8010694:	3f811111 	.word	0x3f811111
 8010698:	55555549 	.word	0x55555549
 801069c:	bfc55555 	.word	0xbfc55555
 80106a0:	55555549 	.word	0x55555549
 80106a4:	3fc55555 	.word	0x3fc55555

080106a8 <with_errno>:
 80106a8:	b513      	push	{r0, r1, r4, lr}
 80106aa:	4604      	mov	r4, r0
 80106ac:	ed8d 0b00 	vstr	d0, [sp]
 80106b0:	f000 f97c 	bl	80109ac <__errno>
 80106b4:	ed9d 0b00 	vldr	d0, [sp]
 80106b8:	6004      	str	r4, [r0, #0]
 80106ba:	b002      	add	sp, #8
 80106bc:	bd10      	pop	{r4, pc}

080106be <xflow>:
 80106be:	b082      	sub	sp, #8
 80106c0:	b158      	cbz	r0, 80106da <xflow+0x1c>
 80106c2:	eeb1 7b40 	vneg.f64	d7, d0
 80106c6:	ed8d 7b00 	vstr	d7, [sp]
 80106ca:	ed9d 7b00 	vldr	d7, [sp]
 80106ce:	2022      	movs	r0, #34	; 0x22
 80106d0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80106d4:	b002      	add	sp, #8
 80106d6:	f7ff bfe7 	b.w	80106a8 <with_errno>
 80106da:	eeb0 7b40 	vmov.f64	d7, d0
 80106de:	e7f2      	b.n	80106c6 <xflow+0x8>

080106e0 <__math_uflow>:
 80106e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80106e8 <__math_uflow+0x8>
 80106e4:	f7ff bfeb 	b.w	80106be <xflow>
 80106e8:	00000000 	.word	0x00000000
 80106ec:	10000000 	.word	0x10000000

080106f0 <__math_oflow>:
 80106f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80106f8 <__math_oflow+0x8>
 80106f4:	f7ff bfe3 	b.w	80106be <xflow>
 80106f8:	00000000 	.word	0x00000000
 80106fc:	70000000 	.word	0x70000000

08010700 <__math_divzero>:
 8010700:	b082      	sub	sp, #8
 8010702:	2800      	cmp	r0, #0
 8010704:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010708:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801070c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8010710:	ed8d 7b00 	vstr	d7, [sp]
 8010714:	ed9d 0b00 	vldr	d0, [sp]
 8010718:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8010728 <__math_divzero+0x28>
 801071c:	2022      	movs	r0, #34	; 0x22
 801071e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8010722:	b002      	add	sp, #8
 8010724:	f7ff bfc0 	b.w	80106a8 <with_errno>
	...

08010730 <__math_invalid>:
 8010730:	eeb0 7b40 	vmov.f64	d7, d0
 8010734:	eeb4 7b47 	vcmp.f64	d7, d7
 8010738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801073c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8010740:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8010744:	d602      	bvs.n	801074c <__math_invalid+0x1c>
 8010746:	2021      	movs	r0, #33	; 0x21
 8010748:	f7ff bfae 	b.w	80106a8 <with_errno>
 801074c:	4770      	bx	lr

0801074e <__math_check_uflow>:
 801074e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8010752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010756:	d102      	bne.n	801075e <__math_check_uflow+0x10>
 8010758:	2022      	movs	r0, #34	; 0x22
 801075a:	f7ff bfa5 	b.w	80106a8 <with_errno>
 801075e:	4770      	bx	lr

08010760 <__math_check_oflow>:
 8010760:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8010780 <__math_check_oflow+0x20>
 8010764:	eeb0 7bc0 	vabs.f64	d7, d0
 8010768:	eeb4 7b46 	vcmp.f64	d7, d6
 801076c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010770:	dd02      	ble.n	8010778 <__math_check_oflow+0x18>
 8010772:	2022      	movs	r0, #34	; 0x22
 8010774:	f7ff bf98 	b.w	80106a8 <with_errno>
 8010778:	4770      	bx	lr
 801077a:	bf00      	nop
 801077c:	f3af 8000 	nop.w
 8010780:	ffffffff 	.word	0xffffffff
 8010784:	7fefffff 	.word	0x7fefffff

08010788 <fabs>:
 8010788:	ec51 0b10 	vmov	r0, r1, d0
 801078c:	ee10 2a10 	vmov	r2, s0
 8010790:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010794:	ec43 2b10 	vmov	d0, r2, r3
 8010798:	4770      	bx	lr
 801079a:	0000      	movs	r0, r0
 801079c:	0000      	movs	r0, r0
	...

080107a0 <floor>:
 80107a0:	ee10 1a90 	vmov	r1, s1
 80107a4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80107a8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80107ac:	2b13      	cmp	r3, #19
 80107ae:	b530      	push	{r4, r5, lr}
 80107b0:	ee10 0a10 	vmov	r0, s0
 80107b4:	ee10 5a10 	vmov	r5, s0
 80107b8:	dc31      	bgt.n	801081e <floor+0x7e>
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	da15      	bge.n	80107ea <floor+0x4a>
 80107be:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8010878 <floor+0xd8>
 80107c2:	ee30 0b07 	vadd.f64	d0, d0, d7
 80107c6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80107ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107ce:	dd07      	ble.n	80107e0 <floor+0x40>
 80107d0:	2900      	cmp	r1, #0
 80107d2:	da4e      	bge.n	8010872 <floor+0xd2>
 80107d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80107d8:	4318      	orrs	r0, r3
 80107da:	d001      	beq.n	80107e0 <floor+0x40>
 80107dc:	4928      	ldr	r1, [pc, #160]	; (8010880 <floor+0xe0>)
 80107de:	2000      	movs	r0, #0
 80107e0:	460b      	mov	r3, r1
 80107e2:	4602      	mov	r2, r0
 80107e4:	ec43 2b10 	vmov	d0, r2, r3
 80107e8:	e020      	b.n	801082c <floor+0x8c>
 80107ea:	4a26      	ldr	r2, [pc, #152]	; (8010884 <floor+0xe4>)
 80107ec:	411a      	asrs	r2, r3
 80107ee:	ea01 0402 	and.w	r4, r1, r2
 80107f2:	4304      	orrs	r4, r0
 80107f4:	d01a      	beq.n	801082c <floor+0x8c>
 80107f6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010878 <floor+0xd8>
 80107fa:	ee30 0b07 	vadd.f64	d0, d0, d7
 80107fe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010806:	ddeb      	ble.n	80107e0 <floor+0x40>
 8010808:	2900      	cmp	r1, #0
 801080a:	bfbe      	ittt	lt
 801080c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8010810:	fa40 f303 	asrlt.w	r3, r0, r3
 8010814:	18c9      	addlt	r1, r1, r3
 8010816:	ea21 0102 	bic.w	r1, r1, r2
 801081a:	2000      	movs	r0, #0
 801081c:	e7e0      	b.n	80107e0 <floor+0x40>
 801081e:	2b33      	cmp	r3, #51	; 0x33
 8010820:	dd05      	ble.n	801082e <floor+0x8e>
 8010822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010826:	d101      	bne.n	801082c <floor+0x8c>
 8010828:	ee30 0b00 	vadd.f64	d0, d0, d0
 801082c:	bd30      	pop	{r4, r5, pc}
 801082e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8010832:	f04f 32ff 	mov.w	r2, #4294967295
 8010836:	40e2      	lsrs	r2, r4
 8010838:	4202      	tst	r2, r0
 801083a:	d0f7      	beq.n	801082c <floor+0x8c>
 801083c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8010878 <floor+0xd8>
 8010840:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010844:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801084c:	ddc8      	ble.n	80107e0 <floor+0x40>
 801084e:	2900      	cmp	r1, #0
 8010850:	da02      	bge.n	8010858 <floor+0xb8>
 8010852:	2b14      	cmp	r3, #20
 8010854:	d103      	bne.n	801085e <floor+0xbe>
 8010856:	3101      	adds	r1, #1
 8010858:	ea20 0002 	bic.w	r0, r0, r2
 801085c:	e7c0      	b.n	80107e0 <floor+0x40>
 801085e:	2401      	movs	r4, #1
 8010860:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010864:	fa04 f303 	lsl.w	r3, r4, r3
 8010868:	4418      	add	r0, r3
 801086a:	42a8      	cmp	r0, r5
 801086c:	bf38      	it	cc
 801086e:	1909      	addcc	r1, r1, r4
 8010870:	e7f2      	b.n	8010858 <floor+0xb8>
 8010872:	2000      	movs	r0, #0
 8010874:	4601      	mov	r1, r0
 8010876:	e7b3      	b.n	80107e0 <floor+0x40>
 8010878:	8800759c 	.word	0x8800759c
 801087c:	7e37e43c 	.word	0x7e37e43c
 8010880:	bff00000 	.word	0xbff00000
 8010884:	000fffff 	.word	0x000fffff

08010888 <scalbn>:
 8010888:	b082      	sub	sp, #8
 801088a:	ed8d 0b00 	vstr	d0, [sp]
 801088e:	9b01      	ldr	r3, [sp, #4]
 8010890:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8010894:	b9a2      	cbnz	r2, 80108c0 <scalbn+0x38>
 8010896:	9a00      	ldr	r2, [sp, #0]
 8010898:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801089c:	4313      	orrs	r3, r2
 801089e:	d03a      	beq.n	8010916 <scalbn+0x8e>
 80108a0:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8010978 <scalbn+0xf0>
 80108a4:	4b40      	ldr	r3, [pc, #256]	; (80109a8 <scalbn+0x120>)
 80108a6:	ee20 7b07 	vmul.f64	d7, d0, d7
 80108aa:	4298      	cmp	r0, r3
 80108ac:	ed8d 7b00 	vstr	d7, [sp]
 80108b0:	da11      	bge.n	80108d6 <scalbn+0x4e>
 80108b2:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8010980 <scalbn+0xf8>
 80108b6:	ed9d 6b00 	vldr	d6, [sp]
 80108ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80108be:	e007      	b.n	80108d0 <scalbn+0x48>
 80108c0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80108c4:	428a      	cmp	r2, r1
 80108c6:	d10a      	bne.n	80108de <scalbn+0x56>
 80108c8:	ed9d 7b00 	vldr	d7, [sp]
 80108cc:	ee37 7b07 	vadd.f64	d7, d7, d7
 80108d0:	ed8d 7b00 	vstr	d7, [sp]
 80108d4:	e01f      	b.n	8010916 <scalbn+0x8e>
 80108d6:	9b01      	ldr	r3, [sp, #4]
 80108d8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80108dc:	3a36      	subs	r2, #54	; 0x36
 80108de:	4402      	add	r2, r0
 80108e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80108e4:	428a      	cmp	r2, r1
 80108e6:	dd0a      	ble.n	80108fe <scalbn+0x76>
 80108e8:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8010988 <scalbn+0x100>
 80108ec:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8010990 <scalbn+0x108>
 80108f0:	eeb0 6b47 	vmov.f64	d6, d7
 80108f4:	9b01      	ldr	r3, [sp, #4]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	fe27 7b05 	vselge.f64	d7, d7, d5
 80108fc:	e7dd      	b.n	80108ba <scalbn+0x32>
 80108fe:	2a00      	cmp	r2, #0
 8010900:	dd0d      	ble.n	801091e <scalbn+0x96>
 8010902:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010906:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801090a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801090e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010912:	e9cd 0100 	strd	r0, r1, [sp]
 8010916:	ed9d 0b00 	vldr	d0, [sp]
 801091a:	b002      	add	sp, #8
 801091c:	4770      	bx	lr
 801091e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010922:	da18      	bge.n	8010956 <scalbn+0xce>
 8010924:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010928:	4298      	cmp	r0, r3
 801092a:	9b01      	ldr	r3, [sp, #4]
 801092c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010930:	dd09      	ble.n	8010946 <scalbn+0xbe>
 8010932:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8010988 <scalbn+0x100>
 8010936:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8010990 <scalbn+0x108>
 801093a:	eeb0 6b47 	vmov.f64	d6, d7
 801093e:	2b00      	cmp	r3, #0
 8010940:	fe07 7b05 	vseleq.f64	d7, d7, d5
 8010944:	e7b9      	b.n	80108ba <scalbn+0x32>
 8010946:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8010980 <scalbn+0xf8>
 801094a:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8010998 <scalbn+0x110>
 801094e:	eeb0 6b47 	vmov.f64	d6, d7
 8010952:	2b00      	cmp	r3, #0
 8010954:	e7f4      	b.n	8010940 <scalbn+0xb8>
 8010956:	e9dd 0100 	ldrd	r0, r1, [sp]
 801095a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801095e:	3236      	adds	r2, #54	; 0x36
 8010960:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010964:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010968:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 80109a0 <scalbn+0x118>
 801096c:	ec41 0b17 	vmov	d7, r0, r1
 8010970:	e7a3      	b.n	80108ba <scalbn+0x32>
 8010972:	bf00      	nop
 8010974:	f3af 8000 	nop.w
 8010978:	00000000 	.word	0x00000000
 801097c:	43500000 	.word	0x43500000
 8010980:	c2f8f359 	.word	0xc2f8f359
 8010984:	01a56e1f 	.word	0x01a56e1f
 8010988:	8800759c 	.word	0x8800759c
 801098c:	7e37e43c 	.word	0x7e37e43c
 8010990:	8800759c 	.word	0x8800759c
 8010994:	fe37e43c 	.word	0xfe37e43c
 8010998:	c2f8f359 	.word	0xc2f8f359
 801099c:	81a56e1f 	.word	0x81a56e1f
 80109a0:	00000000 	.word	0x00000000
 80109a4:	3c900000 	.word	0x3c900000
 80109a8:	ffff3cb0 	.word	0xffff3cb0

080109ac <__errno>:
 80109ac:	4b01      	ldr	r3, [pc, #4]	; (80109b4 <__errno+0x8>)
 80109ae:	6818      	ldr	r0, [r3, #0]
 80109b0:	4770      	bx	lr
 80109b2:	bf00      	nop
 80109b4:	24000024 	.word	0x24000024

080109b8 <__libc_init_array>:
 80109b8:	b570      	push	{r4, r5, r6, lr}
 80109ba:	4d0d      	ldr	r5, [pc, #52]	; (80109f0 <__libc_init_array+0x38>)
 80109bc:	4c0d      	ldr	r4, [pc, #52]	; (80109f4 <__libc_init_array+0x3c>)
 80109be:	1b64      	subs	r4, r4, r5
 80109c0:	10a4      	asrs	r4, r4, #2
 80109c2:	2600      	movs	r6, #0
 80109c4:	42a6      	cmp	r6, r4
 80109c6:	d109      	bne.n	80109dc <__libc_init_array+0x24>
 80109c8:	4d0b      	ldr	r5, [pc, #44]	; (80109f8 <__libc_init_array+0x40>)
 80109ca:	4c0c      	ldr	r4, [pc, #48]	; (80109fc <__libc_init_array+0x44>)
 80109cc:	f002 fc60 	bl	8013290 <_init>
 80109d0:	1b64      	subs	r4, r4, r5
 80109d2:	10a4      	asrs	r4, r4, #2
 80109d4:	2600      	movs	r6, #0
 80109d6:	42a6      	cmp	r6, r4
 80109d8:	d105      	bne.n	80109e6 <__libc_init_array+0x2e>
 80109da:	bd70      	pop	{r4, r5, r6, pc}
 80109dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80109e0:	4798      	blx	r3
 80109e2:	3601      	adds	r6, #1
 80109e4:	e7ee      	b.n	80109c4 <__libc_init_array+0xc>
 80109e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80109ea:	4798      	blx	r3
 80109ec:	3601      	adds	r6, #1
 80109ee:	e7f2      	b.n	80109d6 <__libc_init_array+0x1e>
 80109f0:	080152cc 	.word	0x080152cc
 80109f4:	080152cc 	.word	0x080152cc
 80109f8:	080152cc 	.word	0x080152cc
 80109fc:	080152d4 	.word	0x080152d4

08010a00 <memset>:
 8010a00:	4402      	add	r2, r0
 8010a02:	4603      	mov	r3, r0
 8010a04:	4293      	cmp	r3, r2
 8010a06:	d100      	bne.n	8010a0a <memset+0xa>
 8010a08:	4770      	bx	lr
 8010a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8010a0e:	e7f9      	b.n	8010a04 <memset+0x4>

08010a10 <__cvt>:
 8010a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a12:	ed2d 8b02 	vpush	{d8}
 8010a16:	eeb0 8b40 	vmov.f64	d8, d0
 8010a1a:	b085      	sub	sp, #20
 8010a1c:	4617      	mov	r7, r2
 8010a1e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010a20:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010a22:	ee18 2a90 	vmov	r2, s17
 8010a26:	f025 0520 	bic.w	r5, r5, #32
 8010a2a:	2a00      	cmp	r2, #0
 8010a2c:	bfb6      	itet	lt
 8010a2e:	222d      	movlt	r2, #45	; 0x2d
 8010a30:	2200      	movge	r2, #0
 8010a32:	eeb1 8b40 	vneglt.f64	d8, d0
 8010a36:	2d46      	cmp	r5, #70	; 0x46
 8010a38:	460c      	mov	r4, r1
 8010a3a:	701a      	strb	r2, [r3, #0]
 8010a3c:	d004      	beq.n	8010a48 <__cvt+0x38>
 8010a3e:	2d45      	cmp	r5, #69	; 0x45
 8010a40:	d100      	bne.n	8010a44 <__cvt+0x34>
 8010a42:	3401      	adds	r4, #1
 8010a44:	2102      	movs	r1, #2
 8010a46:	e000      	b.n	8010a4a <__cvt+0x3a>
 8010a48:	2103      	movs	r1, #3
 8010a4a:	ab03      	add	r3, sp, #12
 8010a4c:	9301      	str	r3, [sp, #4]
 8010a4e:	ab02      	add	r3, sp, #8
 8010a50:	9300      	str	r3, [sp, #0]
 8010a52:	4622      	mov	r2, r4
 8010a54:	4633      	mov	r3, r6
 8010a56:	eeb0 0b48 	vmov.f64	d0, d8
 8010a5a:	f000 fca9 	bl	80113b0 <_dtoa_r>
 8010a5e:	2d47      	cmp	r5, #71	; 0x47
 8010a60:	d109      	bne.n	8010a76 <__cvt+0x66>
 8010a62:	07fb      	lsls	r3, r7, #31
 8010a64:	d407      	bmi.n	8010a76 <__cvt+0x66>
 8010a66:	9b03      	ldr	r3, [sp, #12]
 8010a68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010a6a:	1a1b      	subs	r3, r3, r0
 8010a6c:	6013      	str	r3, [r2, #0]
 8010a6e:	b005      	add	sp, #20
 8010a70:	ecbd 8b02 	vpop	{d8}
 8010a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a76:	2d46      	cmp	r5, #70	; 0x46
 8010a78:	eb00 0204 	add.w	r2, r0, r4
 8010a7c:	d10c      	bne.n	8010a98 <__cvt+0x88>
 8010a7e:	7803      	ldrb	r3, [r0, #0]
 8010a80:	2b30      	cmp	r3, #48	; 0x30
 8010a82:	d107      	bne.n	8010a94 <__cvt+0x84>
 8010a84:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a8c:	bf1c      	itt	ne
 8010a8e:	f1c4 0401 	rsbne	r4, r4, #1
 8010a92:	6034      	strne	r4, [r6, #0]
 8010a94:	6833      	ldr	r3, [r6, #0]
 8010a96:	441a      	add	r2, r3
 8010a98:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aa0:	bf08      	it	eq
 8010aa2:	9203      	streq	r2, [sp, #12]
 8010aa4:	2130      	movs	r1, #48	; 0x30
 8010aa6:	9b03      	ldr	r3, [sp, #12]
 8010aa8:	4293      	cmp	r3, r2
 8010aaa:	d2dc      	bcs.n	8010a66 <__cvt+0x56>
 8010aac:	1c5c      	adds	r4, r3, #1
 8010aae:	9403      	str	r4, [sp, #12]
 8010ab0:	7019      	strb	r1, [r3, #0]
 8010ab2:	e7f8      	b.n	8010aa6 <__cvt+0x96>

08010ab4 <__exponent>:
 8010ab4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010ab6:	4603      	mov	r3, r0
 8010ab8:	2900      	cmp	r1, #0
 8010aba:	bfb8      	it	lt
 8010abc:	4249      	neglt	r1, r1
 8010abe:	f803 2b02 	strb.w	r2, [r3], #2
 8010ac2:	bfb4      	ite	lt
 8010ac4:	222d      	movlt	r2, #45	; 0x2d
 8010ac6:	222b      	movge	r2, #43	; 0x2b
 8010ac8:	2909      	cmp	r1, #9
 8010aca:	7042      	strb	r2, [r0, #1]
 8010acc:	dd2a      	ble.n	8010b24 <__exponent+0x70>
 8010ace:	f10d 0407 	add.w	r4, sp, #7
 8010ad2:	46a4      	mov	ip, r4
 8010ad4:	270a      	movs	r7, #10
 8010ad6:	46a6      	mov	lr, r4
 8010ad8:	460a      	mov	r2, r1
 8010ada:	fb91 f6f7 	sdiv	r6, r1, r7
 8010ade:	fb07 1516 	mls	r5, r7, r6, r1
 8010ae2:	3530      	adds	r5, #48	; 0x30
 8010ae4:	2a63      	cmp	r2, #99	; 0x63
 8010ae6:	f104 34ff 	add.w	r4, r4, #4294967295
 8010aea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010aee:	4631      	mov	r1, r6
 8010af0:	dcf1      	bgt.n	8010ad6 <__exponent+0x22>
 8010af2:	3130      	adds	r1, #48	; 0x30
 8010af4:	f1ae 0502 	sub.w	r5, lr, #2
 8010af8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010afc:	1c44      	adds	r4, r0, #1
 8010afe:	4629      	mov	r1, r5
 8010b00:	4561      	cmp	r1, ip
 8010b02:	d30a      	bcc.n	8010b1a <__exponent+0x66>
 8010b04:	f10d 0209 	add.w	r2, sp, #9
 8010b08:	eba2 020e 	sub.w	r2, r2, lr
 8010b0c:	4565      	cmp	r5, ip
 8010b0e:	bf88      	it	hi
 8010b10:	2200      	movhi	r2, #0
 8010b12:	4413      	add	r3, r2
 8010b14:	1a18      	subs	r0, r3, r0
 8010b16:	b003      	add	sp, #12
 8010b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010b1e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010b22:	e7ed      	b.n	8010b00 <__exponent+0x4c>
 8010b24:	2330      	movs	r3, #48	; 0x30
 8010b26:	3130      	adds	r1, #48	; 0x30
 8010b28:	7083      	strb	r3, [r0, #2]
 8010b2a:	70c1      	strb	r1, [r0, #3]
 8010b2c:	1d03      	adds	r3, r0, #4
 8010b2e:	e7f1      	b.n	8010b14 <__exponent+0x60>

08010b30 <_printf_float>:
 8010b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b34:	b08b      	sub	sp, #44	; 0x2c
 8010b36:	460c      	mov	r4, r1
 8010b38:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8010b3c:	4616      	mov	r6, r2
 8010b3e:	461f      	mov	r7, r3
 8010b40:	4605      	mov	r5, r0
 8010b42:	f001 f9b7 	bl	8011eb4 <_localeconv_r>
 8010b46:	f8d0 b000 	ldr.w	fp, [r0]
 8010b4a:	4658      	mov	r0, fp
 8010b4c:	f7ef fbc8 	bl	80002e0 <strlen>
 8010b50:	2300      	movs	r3, #0
 8010b52:	9308      	str	r3, [sp, #32]
 8010b54:	f8d8 3000 	ldr.w	r3, [r8]
 8010b58:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010b5c:	6822      	ldr	r2, [r4, #0]
 8010b5e:	3307      	adds	r3, #7
 8010b60:	f023 0307 	bic.w	r3, r3, #7
 8010b64:	f103 0108 	add.w	r1, r3, #8
 8010b68:	f8c8 1000 	str.w	r1, [r8]
 8010b6c:	4682      	mov	sl, r0
 8010b6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010b72:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8010b76:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8010dd8 <_printf_float+0x2a8>
 8010b7a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8010b7e:	eeb0 6bc0 	vabs.f64	d6, d0
 8010b82:	eeb4 6b47 	vcmp.f64	d6, d7
 8010b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b8a:	dd24      	ble.n	8010bd6 <_printf_float+0xa6>
 8010b8c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b94:	d502      	bpl.n	8010b9c <_printf_float+0x6c>
 8010b96:	232d      	movs	r3, #45	; 0x2d
 8010b98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b9c:	4b90      	ldr	r3, [pc, #576]	; (8010de0 <_printf_float+0x2b0>)
 8010b9e:	4891      	ldr	r0, [pc, #580]	; (8010de4 <_printf_float+0x2b4>)
 8010ba0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010ba4:	bf94      	ite	ls
 8010ba6:	4698      	movls	r8, r3
 8010ba8:	4680      	movhi	r8, r0
 8010baa:	2303      	movs	r3, #3
 8010bac:	6123      	str	r3, [r4, #16]
 8010bae:	f022 0204 	bic.w	r2, r2, #4
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	6022      	str	r2, [r4, #0]
 8010bb6:	9304      	str	r3, [sp, #16]
 8010bb8:	9700      	str	r7, [sp, #0]
 8010bba:	4633      	mov	r3, r6
 8010bbc:	aa09      	add	r2, sp, #36	; 0x24
 8010bbe:	4621      	mov	r1, r4
 8010bc0:	4628      	mov	r0, r5
 8010bc2:	f000 f9d3 	bl	8010f6c <_printf_common>
 8010bc6:	3001      	adds	r0, #1
 8010bc8:	f040 808a 	bne.w	8010ce0 <_printf_float+0x1b0>
 8010bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8010bd0:	b00b      	add	sp, #44	; 0x2c
 8010bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bd6:	eeb4 0b40 	vcmp.f64	d0, d0
 8010bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bde:	d709      	bvc.n	8010bf4 <_printf_float+0xc4>
 8010be0:	ee10 3a90 	vmov	r3, s1
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	bfbc      	itt	lt
 8010be8:	232d      	movlt	r3, #45	; 0x2d
 8010bea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010bee:	487e      	ldr	r0, [pc, #504]	; (8010de8 <_printf_float+0x2b8>)
 8010bf0:	4b7e      	ldr	r3, [pc, #504]	; (8010dec <_printf_float+0x2bc>)
 8010bf2:	e7d5      	b.n	8010ba0 <_printf_float+0x70>
 8010bf4:	6863      	ldr	r3, [r4, #4]
 8010bf6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8010bfa:	9104      	str	r1, [sp, #16]
 8010bfc:	1c59      	adds	r1, r3, #1
 8010bfe:	d13c      	bne.n	8010c7a <_printf_float+0x14a>
 8010c00:	2306      	movs	r3, #6
 8010c02:	6063      	str	r3, [r4, #4]
 8010c04:	2300      	movs	r3, #0
 8010c06:	9303      	str	r3, [sp, #12]
 8010c08:	ab08      	add	r3, sp, #32
 8010c0a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8010c0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010c12:	ab07      	add	r3, sp, #28
 8010c14:	6861      	ldr	r1, [r4, #4]
 8010c16:	9300      	str	r3, [sp, #0]
 8010c18:	6022      	str	r2, [r4, #0]
 8010c1a:	f10d 031b 	add.w	r3, sp, #27
 8010c1e:	4628      	mov	r0, r5
 8010c20:	f7ff fef6 	bl	8010a10 <__cvt>
 8010c24:	9b04      	ldr	r3, [sp, #16]
 8010c26:	9907      	ldr	r1, [sp, #28]
 8010c28:	2b47      	cmp	r3, #71	; 0x47
 8010c2a:	4680      	mov	r8, r0
 8010c2c:	d108      	bne.n	8010c40 <_printf_float+0x110>
 8010c2e:	1cc8      	adds	r0, r1, #3
 8010c30:	db02      	blt.n	8010c38 <_printf_float+0x108>
 8010c32:	6863      	ldr	r3, [r4, #4]
 8010c34:	4299      	cmp	r1, r3
 8010c36:	dd41      	ble.n	8010cbc <_printf_float+0x18c>
 8010c38:	f1a9 0902 	sub.w	r9, r9, #2
 8010c3c:	fa5f f989 	uxtb.w	r9, r9
 8010c40:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010c44:	d820      	bhi.n	8010c88 <_printf_float+0x158>
 8010c46:	3901      	subs	r1, #1
 8010c48:	464a      	mov	r2, r9
 8010c4a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010c4e:	9107      	str	r1, [sp, #28]
 8010c50:	f7ff ff30 	bl	8010ab4 <__exponent>
 8010c54:	9a08      	ldr	r2, [sp, #32]
 8010c56:	9004      	str	r0, [sp, #16]
 8010c58:	1813      	adds	r3, r2, r0
 8010c5a:	2a01      	cmp	r2, #1
 8010c5c:	6123      	str	r3, [r4, #16]
 8010c5e:	dc02      	bgt.n	8010c66 <_printf_float+0x136>
 8010c60:	6822      	ldr	r2, [r4, #0]
 8010c62:	07d2      	lsls	r2, r2, #31
 8010c64:	d501      	bpl.n	8010c6a <_printf_float+0x13a>
 8010c66:	3301      	adds	r3, #1
 8010c68:	6123      	str	r3, [r4, #16]
 8010c6a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d0a2      	beq.n	8010bb8 <_printf_float+0x88>
 8010c72:	232d      	movs	r3, #45	; 0x2d
 8010c74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c78:	e79e      	b.n	8010bb8 <_printf_float+0x88>
 8010c7a:	9904      	ldr	r1, [sp, #16]
 8010c7c:	2947      	cmp	r1, #71	; 0x47
 8010c7e:	d1c1      	bne.n	8010c04 <_printf_float+0xd4>
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d1bf      	bne.n	8010c04 <_printf_float+0xd4>
 8010c84:	2301      	movs	r3, #1
 8010c86:	e7bc      	b.n	8010c02 <_printf_float+0xd2>
 8010c88:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8010c8c:	d118      	bne.n	8010cc0 <_printf_float+0x190>
 8010c8e:	2900      	cmp	r1, #0
 8010c90:	6863      	ldr	r3, [r4, #4]
 8010c92:	dd0b      	ble.n	8010cac <_printf_float+0x17c>
 8010c94:	6121      	str	r1, [r4, #16]
 8010c96:	b913      	cbnz	r3, 8010c9e <_printf_float+0x16e>
 8010c98:	6822      	ldr	r2, [r4, #0]
 8010c9a:	07d0      	lsls	r0, r2, #31
 8010c9c:	d502      	bpl.n	8010ca4 <_printf_float+0x174>
 8010c9e:	3301      	adds	r3, #1
 8010ca0:	440b      	add	r3, r1
 8010ca2:	6123      	str	r3, [r4, #16]
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	65a1      	str	r1, [r4, #88]	; 0x58
 8010ca8:	9304      	str	r3, [sp, #16]
 8010caa:	e7de      	b.n	8010c6a <_printf_float+0x13a>
 8010cac:	b913      	cbnz	r3, 8010cb4 <_printf_float+0x184>
 8010cae:	6822      	ldr	r2, [r4, #0]
 8010cb0:	07d2      	lsls	r2, r2, #31
 8010cb2:	d501      	bpl.n	8010cb8 <_printf_float+0x188>
 8010cb4:	3302      	adds	r3, #2
 8010cb6:	e7f4      	b.n	8010ca2 <_printf_float+0x172>
 8010cb8:	2301      	movs	r3, #1
 8010cba:	e7f2      	b.n	8010ca2 <_printf_float+0x172>
 8010cbc:	f04f 0967 	mov.w	r9, #103	; 0x67
 8010cc0:	9b08      	ldr	r3, [sp, #32]
 8010cc2:	4299      	cmp	r1, r3
 8010cc4:	db05      	blt.n	8010cd2 <_printf_float+0x1a2>
 8010cc6:	6823      	ldr	r3, [r4, #0]
 8010cc8:	6121      	str	r1, [r4, #16]
 8010cca:	07d8      	lsls	r0, r3, #31
 8010ccc:	d5ea      	bpl.n	8010ca4 <_printf_float+0x174>
 8010cce:	1c4b      	adds	r3, r1, #1
 8010cd0:	e7e7      	b.n	8010ca2 <_printf_float+0x172>
 8010cd2:	2900      	cmp	r1, #0
 8010cd4:	bfd4      	ite	le
 8010cd6:	f1c1 0202 	rsble	r2, r1, #2
 8010cda:	2201      	movgt	r2, #1
 8010cdc:	4413      	add	r3, r2
 8010cde:	e7e0      	b.n	8010ca2 <_printf_float+0x172>
 8010ce0:	6823      	ldr	r3, [r4, #0]
 8010ce2:	055a      	lsls	r2, r3, #21
 8010ce4:	d407      	bmi.n	8010cf6 <_printf_float+0x1c6>
 8010ce6:	6923      	ldr	r3, [r4, #16]
 8010ce8:	4642      	mov	r2, r8
 8010cea:	4631      	mov	r1, r6
 8010cec:	4628      	mov	r0, r5
 8010cee:	47b8      	blx	r7
 8010cf0:	3001      	adds	r0, #1
 8010cf2:	d12a      	bne.n	8010d4a <_printf_float+0x21a>
 8010cf4:	e76a      	b.n	8010bcc <_printf_float+0x9c>
 8010cf6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010cfa:	f240 80e2 	bls.w	8010ec2 <_printf_float+0x392>
 8010cfe:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010d02:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d0a:	d133      	bne.n	8010d74 <_printf_float+0x244>
 8010d0c:	4a38      	ldr	r2, [pc, #224]	; (8010df0 <_printf_float+0x2c0>)
 8010d0e:	2301      	movs	r3, #1
 8010d10:	4631      	mov	r1, r6
 8010d12:	4628      	mov	r0, r5
 8010d14:	47b8      	blx	r7
 8010d16:	3001      	adds	r0, #1
 8010d18:	f43f af58 	beq.w	8010bcc <_printf_float+0x9c>
 8010d1c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010d20:	429a      	cmp	r2, r3
 8010d22:	db02      	blt.n	8010d2a <_printf_float+0x1fa>
 8010d24:	6823      	ldr	r3, [r4, #0]
 8010d26:	07d8      	lsls	r0, r3, #31
 8010d28:	d50f      	bpl.n	8010d4a <_printf_float+0x21a>
 8010d2a:	4653      	mov	r3, sl
 8010d2c:	465a      	mov	r2, fp
 8010d2e:	4631      	mov	r1, r6
 8010d30:	4628      	mov	r0, r5
 8010d32:	47b8      	blx	r7
 8010d34:	3001      	adds	r0, #1
 8010d36:	f43f af49 	beq.w	8010bcc <_printf_float+0x9c>
 8010d3a:	f04f 0800 	mov.w	r8, #0
 8010d3e:	f104 091a 	add.w	r9, r4, #26
 8010d42:	9b08      	ldr	r3, [sp, #32]
 8010d44:	3b01      	subs	r3, #1
 8010d46:	4543      	cmp	r3, r8
 8010d48:	dc09      	bgt.n	8010d5e <_printf_float+0x22e>
 8010d4a:	6823      	ldr	r3, [r4, #0]
 8010d4c:	079b      	lsls	r3, r3, #30
 8010d4e:	f100 8108 	bmi.w	8010f62 <_printf_float+0x432>
 8010d52:	68e0      	ldr	r0, [r4, #12]
 8010d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d56:	4298      	cmp	r0, r3
 8010d58:	bfb8      	it	lt
 8010d5a:	4618      	movlt	r0, r3
 8010d5c:	e738      	b.n	8010bd0 <_printf_float+0xa0>
 8010d5e:	2301      	movs	r3, #1
 8010d60:	464a      	mov	r2, r9
 8010d62:	4631      	mov	r1, r6
 8010d64:	4628      	mov	r0, r5
 8010d66:	47b8      	blx	r7
 8010d68:	3001      	adds	r0, #1
 8010d6a:	f43f af2f 	beq.w	8010bcc <_printf_float+0x9c>
 8010d6e:	f108 0801 	add.w	r8, r8, #1
 8010d72:	e7e6      	b.n	8010d42 <_printf_float+0x212>
 8010d74:	9b07      	ldr	r3, [sp, #28]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	dc3c      	bgt.n	8010df4 <_printf_float+0x2c4>
 8010d7a:	4a1d      	ldr	r2, [pc, #116]	; (8010df0 <_printf_float+0x2c0>)
 8010d7c:	2301      	movs	r3, #1
 8010d7e:	4631      	mov	r1, r6
 8010d80:	4628      	mov	r0, r5
 8010d82:	47b8      	blx	r7
 8010d84:	3001      	adds	r0, #1
 8010d86:	f43f af21 	beq.w	8010bcc <_printf_float+0x9c>
 8010d8a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010d8e:	4313      	orrs	r3, r2
 8010d90:	d102      	bne.n	8010d98 <_printf_float+0x268>
 8010d92:	6823      	ldr	r3, [r4, #0]
 8010d94:	07d9      	lsls	r1, r3, #31
 8010d96:	d5d8      	bpl.n	8010d4a <_printf_float+0x21a>
 8010d98:	4653      	mov	r3, sl
 8010d9a:	465a      	mov	r2, fp
 8010d9c:	4631      	mov	r1, r6
 8010d9e:	4628      	mov	r0, r5
 8010da0:	47b8      	blx	r7
 8010da2:	3001      	adds	r0, #1
 8010da4:	f43f af12 	beq.w	8010bcc <_printf_float+0x9c>
 8010da8:	f04f 0900 	mov.w	r9, #0
 8010dac:	f104 0a1a 	add.w	sl, r4, #26
 8010db0:	9b07      	ldr	r3, [sp, #28]
 8010db2:	425b      	negs	r3, r3
 8010db4:	454b      	cmp	r3, r9
 8010db6:	dc01      	bgt.n	8010dbc <_printf_float+0x28c>
 8010db8:	9b08      	ldr	r3, [sp, #32]
 8010dba:	e795      	b.n	8010ce8 <_printf_float+0x1b8>
 8010dbc:	2301      	movs	r3, #1
 8010dbe:	4652      	mov	r2, sl
 8010dc0:	4631      	mov	r1, r6
 8010dc2:	4628      	mov	r0, r5
 8010dc4:	47b8      	blx	r7
 8010dc6:	3001      	adds	r0, #1
 8010dc8:	f43f af00 	beq.w	8010bcc <_printf_float+0x9c>
 8010dcc:	f109 0901 	add.w	r9, r9, #1
 8010dd0:	e7ee      	b.n	8010db0 <_printf_float+0x280>
 8010dd2:	bf00      	nop
 8010dd4:	f3af 8000 	nop.w
 8010dd8:	ffffffff 	.word	0xffffffff
 8010ddc:	7fefffff 	.word	0x7fefffff
 8010de0:	08014ee4 	.word	0x08014ee4
 8010de4:	08014ee8 	.word	0x08014ee8
 8010de8:	08014ef0 	.word	0x08014ef0
 8010dec:	08014eec 	.word	0x08014eec
 8010df0:	08014ef4 	.word	0x08014ef4
 8010df4:	9a08      	ldr	r2, [sp, #32]
 8010df6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010df8:	429a      	cmp	r2, r3
 8010dfa:	bfa8      	it	ge
 8010dfc:	461a      	movge	r2, r3
 8010dfe:	2a00      	cmp	r2, #0
 8010e00:	4691      	mov	r9, r2
 8010e02:	dc38      	bgt.n	8010e76 <_printf_float+0x346>
 8010e04:	2300      	movs	r3, #0
 8010e06:	9305      	str	r3, [sp, #20]
 8010e08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010e0c:	f104 021a 	add.w	r2, r4, #26
 8010e10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010e12:	9905      	ldr	r1, [sp, #20]
 8010e14:	9304      	str	r3, [sp, #16]
 8010e16:	eba3 0309 	sub.w	r3, r3, r9
 8010e1a:	428b      	cmp	r3, r1
 8010e1c:	dc33      	bgt.n	8010e86 <_printf_float+0x356>
 8010e1e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010e22:	429a      	cmp	r2, r3
 8010e24:	db3c      	blt.n	8010ea0 <_printf_float+0x370>
 8010e26:	6823      	ldr	r3, [r4, #0]
 8010e28:	07da      	lsls	r2, r3, #31
 8010e2a:	d439      	bmi.n	8010ea0 <_printf_float+0x370>
 8010e2c:	9a08      	ldr	r2, [sp, #32]
 8010e2e:	9b04      	ldr	r3, [sp, #16]
 8010e30:	9907      	ldr	r1, [sp, #28]
 8010e32:	1ad3      	subs	r3, r2, r3
 8010e34:	eba2 0901 	sub.w	r9, r2, r1
 8010e38:	4599      	cmp	r9, r3
 8010e3a:	bfa8      	it	ge
 8010e3c:	4699      	movge	r9, r3
 8010e3e:	f1b9 0f00 	cmp.w	r9, #0
 8010e42:	dc35      	bgt.n	8010eb0 <_printf_float+0x380>
 8010e44:	f04f 0800 	mov.w	r8, #0
 8010e48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010e4c:	f104 0a1a 	add.w	sl, r4, #26
 8010e50:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010e54:	1a9b      	subs	r3, r3, r2
 8010e56:	eba3 0309 	sub.w	r3, r3, r9
 8010e5a:	4543      	cmp	r3, r8
 8010e5c:	f77f af75 	ble.w	8010d4a <_printf_float+0x21a>
 8010e60:	2301      	movs	r3, #1
 8010e62:	4652      	mov	r2, sl
 8010e64:	4631      	mov	r1, r6
 8010e66:	4628      	mov	r0, r5
 8010e68:	47b8      	blx	r7
 8010e6a:	3001      	adds	r0, #1
 8010e6c:	f43f aeae 	beq.w	8010bcc <_printf_float+0x9c>
 8010e70:	f108 0801 	add.w	r8, r8, #1
 8010e74:	e7ec      	b.n	8010e50 <_printf_float+0x320>
 8010e76:	4613      	mov	r3, r2
 8010e78:	4631      	mov	r1, r6
 8010e7a:	4642      	mov	r2, r8
 8010e7c:	4628      	mov	r0, r5
 8010e7e:	47b8      	blx	r7
 8010e80:	3001      	adds	r0, #1
 8010e82:	d1bf      	bne.n	8010e04 <_printf_float+0x2d4>
 8010e84:	e6a2      	b.n	8010bcc <_printf_float+0x9c>
 8010e86:	2301      	movs	r3, #1
 8010e88:	4631      	mov	r1, r6
 8010e8a:	4628      	mov	r0, r5
 8010e8c:	9204      	str	r2, [sp, #16]
 8010e8e:	47b8      	blx	r7
 8010e90:	3001      	adds	r0, #1
 8010e92:	f43f ae9b 	beq.w	8010bcc <_printf_float+0x9c>
 8010e96:	9b05      	ldr	r3, [sp, #20]
 8010e98:	9a04      	ldr	r2, [sp, #16]
 8010e9a:	3301      	adds	r3, #1
 8010e9c:	9305      	str	r3, [sp, #20]
 8010e9e:	e7b7      	b.n	8010e10 <_printf_float+0x2e0>
 8010ea0:	4653      	mov	r3, sl
 8010ea2:	465a      	mov	r2, fp
 8010ea4:	4631      	mov	r1, r6
 8010ea6:	4628      	mov	r0, r5
 8010ea8:	47b8      	blx	r7
 8010eaa:	3001      	adds	r0, #1
 8010eac:	d1be      	bne.n	8010e2c <_printf_float+0x2fc>
 8010eae:	e68d      	b.n	8010bcc <_printf_float+0x9c>
 8010eb0:	9a04      	ldr	r2, [sp, #16]
 8010eb2:	464b      	mov	r3, r9
 8010eb4:	4442      	add	r2, r8
 8010eb6:	4631      	mov	r1, r6
 8010eb8:	4628      	mov	r0, r5
 8010eba:	47b8      	blx	r7
 8010ebc:	3001      	adds	r0, #1
 8010ebe:	d1c1      	bne.n	8010e44 <_printf_float+0x314>
 8010ec0:	e684      	b.n	8010bcc <_printf_float+0x9c>
 8010ec2:	9a08      	ldr	r2, [sp, #32]
 8010ec4:	2a01      	cmp	r2, #1
 8010ec6:	dc01      	bgt.n	8010ecc <_printf_float+0x39c>
 8010ec8:	07db      	lsls	r3, r3, #31
 8010eca:	d537      	bpl.n	8010f3c <_printf_float+0x40c>
 8010ecc:	2301      	movs	r3, #1
 8010ece:	4642      	mov	r2, r8
 8010ed0:	4631      	mov	r1, r6
 8010ed2:	4628      	mov	r0, r5
 8010ed4:	47b8      	blx	r7
 8010ed6:	3001      	adds	r0, #1
 8010ed8:	f43f ae78 	beq.w	8010bcc <_printf_float+0x9c>
 8010edc:	4653      	mov	r3, sl
 8010ede:	465a      	mov	r2, fp
 8010ee0:	4631      	mov	r1, r6
 8010ee2:	4628      	mov	r0, r5
 8010ee4:	47b8      	blx	r7
 8010ee6:	3001      	adds	r0, #1
 8010ee8:	f43f ae70 	beq.w	8010bcc <_printf_float+0x9c>
 8010eec:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010ef0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ef8:	d01b      	beq.n	8010f32 <_printf_float+0x402>
 8010efa:	9b08      	ldr	r3, [sp, #32]
 8010efc:	f108 0201 	add.w	r2, r8, #1
 8010f00:	3b01      	subs	r3, #1
 8010f02:	4631      	mov	r1, r6
 8010f04:	4628      	mov	r0, r5
 8010f06:	47b8      	blx	r7
 8010f08:	3001      	adds	r0, #1
 8010f0a:	d10e      	bne.n	8010f2a <_printf_float+0x3fa>
 8010f0c:	e65e      	b.n	8010bcc <_printf_float+0x9c>
 8010f0e:	2301      	movs	r3, #1
 8010f10:	464a      	mov	r2, r9
 8010f12:	4631      	mov	r1, r6
 8010f14:	4628      	mov	r0, r5
 8010f16:	47b8      	blx	r7
 8010f18:	3001      	adds	r0, #1
 8010f1a:	f43f ae57 	beq.w	8010bcc <_printf_float+0x9c>
 8010f1e:	f108 0801 	add.w	r8, r8, #1
 8010f22:	9b08      	ldr	r3, [sp, #32]
 8010f24:	3b01      	subs	r3, #1
 8010f26:	4543      	cmp	r3, r8
 8010f28:	dcf1      	bgt.n	8010f0e <_printf_float+0x3de>
 8010f2a:	9b04      	ldr	r3, [sp, #16]
 8010f2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010f30:	e6db      	b.n	8010cea <_printf_float+0x1ba>
 8010f32:	f04f 0800 	mov.w	r8, #0
 8010f36:	f104 091a 	add.w	r9, r4, #26
 8010f3a:	e7f2      	b.n	8010f22 <_printf_float+0x3f2>
 8010f3c:	2301      	movs	r3, #1
 8010f3e:	4642      	mov	r2, r8
 8010f40:	e7df      	b.n	8010f02 <_printf_float+0x3d2>
 8010f42:	2301      	movs	r3, #1
 8010f44:	464a      	mov	r2, r9
 8010f46:	4631      	mov	r1, r6
 8010f48:	4628      	mov	r0, r5
 8010f4a:	47b8      	blx	r7
 8010f4c:	3001      	adds	r0, #1
 8010f4e:	f43f ae3d 	beq.w	8010bcc <_printf_float+0x9c>
 8010f52:	f108 0801 	add.w	r8, r8, #1
 8010f56:	68e3      	ldr	r3, [r4, #12]
 8010f58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010f5a:	1a5b      	subs	r3, r3, r1
 8010f5c:	4543      	cmp	r3, r8
 8010f5e:	dcf0      	bgt.n	8010f42 <_printf_float+0x412>
 8010f60:	e6f7      	b.n	8010d52 <_printf_float+0x222>
 8010f62:	f04f 0800 	mov.w	r8, #0
 8010f66:	f104 0919 	add.w	r9, r4, #25
 8010f6a:	e7f4      	b.n	8010f56 <_printf_float+0x426>

08010f6c <_printf_common>:
 8010f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f70:	4616      	mov	r6, r2
 8010f72:	4699      	mov	r9, r3
 8010f74:	688a      	ldr	r2, [r1, #8]
 8010f76:	690b      	ldr	r3, [r1, #16]
 8010f78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010f7c:	4293      	cmp	r3, r2
 8010f7e:	bfb8      	it	lt
 8010f80:	4613      	movlt	r3, r2
 8010f82:	6033      	str	r3, [r6, #0]
 8010f84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010f88:	4607      	mov	r7, r0
 8010f8a:	460c      	mov	r4, r1
 8010f8c:	b10a      	cbz	r2, 8010f92 <_printf_common+0x26>
 8010f8e:	3301      	adds	r3, #1
 8010f90:	6033      	str	r3, [r6, #0]
 8010f92:	6823      	ldr	r3, [r4, #0]
 8010f94:	0699      	lsls	r1, r3, #26
 8010f96:	bf42      	ittt	mi
 8010f98:	6833      	ldrmi	r3, [r6, #0]
 8010f9a:	3302      	addmi	r3, #2
 8010f9c:	6033      	strmi	r3, [r6, #0]
 8010f9e:	6825      	ldr	r5, [r4, #0]
 8010fa0:	f015 0506 	ands.w	r5, r5, #6
 8010fa4:	d106      	bne.n	8010fb4 <_printf_common+0x48>
 8010fa6:	f104 0a19 	add.w	sl, r4, #25
 8010faa:	68e3      	ldr	r3, [r4, #12]
 8010fac:	6832      	ldr	r2, [r6, #0]
 8010fae:	1a9b      	subs	r3, r3, r2
 8010fb0:	42ab      	cmp	r3, r5
 8010fb2:	dc26      	bgt.n	8011002 <_printf_common+0x96>
 8010fb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010fb8:	1e13      	subs	r3, r2, #0
 8010fba:	6822      	ldr	r2, [r4, #0]
 8010fbc:	bf18      	it	ne
 8010fbe:	2301      	movne	r3, #1
 8010fc0:	0692      	lsls	r2, r2, #26
 8010fc2:	d42b      	bmi.n	801101c <_printf_common+0xb0>
 8010fc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010fc8:	4649      	mov	r1, r9
 8010fca:	4638      	mov	r0, r7
 8010fcc:	47c0      	blx	r8
 8010fce:	3001      	adds	r0, #1
 8010fd0:	d01e      	beq.n	8011010 <_printf_common+0xa4>
 8010fd2:	6823      	ldr	r3, [r4, #0]
 8010fd4:	68e5      	ldr	r5, [r4, #12]
 8010fd6:	6832      	ldr	r2, [r6, #0]
 8010fd8:	f003 0306 	and.w	r3, r3, #6
 8010fdc:	2b04      	cmp	r3, #4
 8010fde:	bf08      	it	eq
 8010fe0:	1aad      	subeq	r5, r5, r2
 8010fe2:	68a3      	ldr	r3, [r4, #8]
 8010fe4:	6922      	ldr	r2, [r4, #16]
 8010fe6:	bf0c      	ite	eq
 8010fe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010fec:	2500      	movne	r5, #0
 8010fee:	4293      	cmp	r3, r2
 8010ff0:	bfc4      	itt	gt
 8010ff2:	1a9b      	subgt	r3, r3, r2
 8010ff4:	18ed      	addgt	r5, r5, r3
 8010ff6:	2600      	movs	r6, #0
 8010ff8:	341a      	adds	r4, #26
 8010ffa:	42b5      	cmp	r5, r6
 8010ffc:	d11a      	bne.n	8011034 <_printf_common+0xc8>
 8010ffe:	2000      	movs	r0, #0
 8011000:	e008      	b.n	8011014 <_printf_common+0xa8>
 8011002:	2301      	movs	r3, #1
 8011004:	4652      	mov	r2, sl
 8011006:	4649      	mov	r1, r9
 8011008:	4638      	mov	r0, r7
 801100a:	47c0      	blx	r8
 801100c:	3001      	adds	r0, #1
 801100e:	d103      	bne.n	8011018 <_printf_common+0xac>
 8011010:	f04f 30ff 	mov.w	r0, #4294967295
 8011014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011018:	3501      	adds	r5, #1
 801101a:	e7c6      	b.n	8010faa <_printf_common+0x3e>
 801101c:	18e1      	adds	r1, r4, r3
 801101e:	1c5a      	adds	r2, r3, #1
 8011020:	2030      	movs	r0, #48	; 0x30
 8011022:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011026:	4422      	add	r2, r4
 8011028:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801102c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011030:	3302      	adds	r3, #2
 8011032:	e7c7      	b.n	8010fc4 <_printf_common+0x58>
 8011034:	2301      	movs	r3, #1
 8011036:	4622      	mov	r2, r4
 8011038:	4649      	mov	r1, r9
 801103a:	4638      	mov	r0, r7
 801103c:	47c0      	blx	r8
 801103e:	3001      	adds	r0, #1
 8011040:	d0e6      	beq.n	8011010 <_printf_common+0xa4>
 8011042:	3601      	adds	r6, #1
 8011044:	e7d9      	b.n	8010ffa <_printf_common+0x8e>
	...

08011048 <_printf_i>:
 8011048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801104c:	460c      	mov	r4, r1
 801104e:	4691      	mov	r9, r2
 8011050:	7e27      	ldrb	r7, [r4, #24]
 8011052:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011054:	2f78      	cmp	r7, #120	; 0x78
 8011056:	4680      	mov	r8, r0
 8011058:	469a      	mov	sl, r3
 801105a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801105e:	d807      	bhi.n	8011070 <_printf_i+0x28>
 8011060:	2f62      	cmp	r7, #98	; 0x62
 8011062:	d80a      	bhi.n	801107a <_printf_i+0x32>
 8011064:	2f00      	cmp	r7, #0
 8011066:	f000 80d8 	beq.w	801121a <_printf_i+0x1d2>
 801106a:	2f58      	cmp	r7, #88	; 0x58
 801106c:	f000 80a3 	beq.w	80111b6 <_printf_i+0x16e>
 8011070:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011074:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011078:	e03a      	b.n	80110f0 <_printf_i+0xa8>
 801107a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801107e:	2b15      	cmp	r3, #21
 8011080:	d8f6      	bhi.n	8011070 <_printf_i+0x28>
 8011082:	a001      	add	r0, pc, #4	; (adr r0, 8011088 <_printf_i+0x40>)
 8011084:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011088:	080110e1 	.word	0x080110e1
 801108c:	080110f5 	.word	0x080110f5
 8011090:	08011071 	.word	0x08011071
 8011094:	08011071 	.word	0x08011071
 8011098:	08011071 	.word	0x08011071
 801109c:	08011071 	.word	0x08011071
 80110a0:	080110f5 	.word	0x080110f5
 80110a4:	08011071 	.word	0x08011071
 80110a8:	08011071 	.word	0x08011071
 80110ac:	08011071 	.word	0x08011071
 80110b0:	08011071 	.word	0x08011071
 80110b4:	08011201 	.word	0x08011201
 80110b8:	08011125 	.word	0x08011125
 80110bc:	080111e3 	.word	0x080111e3
 80110c0:	08011071 	.word	0x08011071
 80110c4:	08011071 	.word	0x08011071
 80110c8:	08011223 	.word	0x08011223
 80110cc:	08011071 	.word	0x08011071
 80110d0:	08011125 	.word	0x08011125
 80110d4:	08011071 	.word	0x08011071
 80110d8:	08011071 	.word	0x08011071
 80110dc:	080111eb 	.word	0x080111eb
 80110e0:	680b      	ldr	r3, [r1, #0]
 80110e2:	1d1a      	adds	r2, r3, #4
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	600a      	str	r2, [r1, #0]
 80110e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80110ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80110f0:	2301      	movs	r3, #1
 80110f2:	e0a3      	b.n	801123c <_printf_i+0x1f4>
 80110f4:	6825      	ldr	r5, [r4, #0]
 80110f6:	6808      	ldr	r0, [r1, #0]
 80110f8:	062e      	lsls	r6, r5, #24
 80110fa:	f100 0304 	add.w	r3, r0, #4
 80110fe:	d50a      	bpl.n	8011116 <_printf_i+0xce>
 8011100:	6805      	ldr	r5, [r0, #0]
 8011102:	600b      	str	r3, [r1, #0]
 8011104:	2d00      	cmp	r5, #0
 8011106:	da03      	bge.n	8011110 <_printf_i+0xc8>
 8011108:	232d      	movs	r3, #45	; 0x2d
 801110a:	426d      	negs	r5, r5
 801110c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011110:	485e      	ldr	r0, [pc, #376]	; (801128c <_printf_i+0x244>)
 8011112:	230a      	movs	r3, #10
 8011114:	e019      	b.n	801114a <_printf_i+0x102>
 8011116:	f015 0f40 	tst.w	r5, #64	; 0x40
 801111a:	6805      	ldr	r5, [r0, #0]
 801111c:	600b      	str	r3, [r1, #0]
 801111e:	bf18      	it	ne
 8011120:	b22d      	sxthne	r5, r5
 8011122:	e7ef      	b.n	8011104 <_printf_i+0xbc>
 8011124:	680b      	ldr	r3, [r1, #0]
 8011126:	6825      	ldr	r5, [r4, #0]
 8011128:	1d18      	adds	r0, r3, #4
 801112a:	6008      	str	r0, [r1, #0]
 801112c:	0628      	lsls	r0, r5, #24
 801112e:	d501      	bpl.n	8011134 <_printf_i+0xec>
 8011130:	681d      	ldr	r5, [r3, #0]
 8011132:	e002      	b.n	801113a <_printf_i+0xf2>
 8011134:	0669      	lsls	r1, r5, #25
 8011136:	d5fb      	bpl.n	8011130 <_printf_i+0xe8>
 8011138:	881d      	ldrh	r5, [r3, #0]
 801113a:	4854      	ldr	r0, [pc, #336]	; (801128c <_printf_i+0x244>)
 801113c:	2f6f      	cmp	r7, #111	; 0x6f
 801113e:	bf0c      	ite	eq
 8011140:	2308      	moveq	r3, #8
 8011142:	230a      	movne	r3, #10
 8011144:	2100      	movs	r1, #0
 8011146:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801114a:	6866      	ldr	r6, [r4, #4]
 801114c:	60a6      	str	r6, [r4, #8]
 801114e:	2e00      	cmp	r6, #0
 8011150:	bfa2      	ittt	ge
 8011152:	6821      	ldrge	r1, [r4, #0]
 8011154:	f021 0104 	bicge.w	r1, r1, #4
 8011158:	6021      	strge	r1, [r4, #0]
 801115a:	b90d      	cbnz	r5, 8011160 <_printf_i+0x118>
 801115c:	2e00      	cmp	r6, #0
 801115e:	d04d      	beq.n	80111fc <_printf_i+0x1b4>
 8011160:	4616      	mov	r6, r2
 8011162:	fbb5 f1f3 	udiv	r1, r5, r3
 8011166:	fb03 5711 	mls	r7, r3, r1, r5
 801116a:	5dc7      	ldrb	r7, [r0, r7]
 801116c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011170:	462f      	mov	r7, r5
 8011172:	42bb      	cmp	r3, r7
 8011174:	460d      	mov	r5, r1
 8011176:	d9f4      	bls.n	8011162 <_printf_i+0x11a>
 8011178:	2b08      	cmp	r3, #8
 801117a:	d10b      	bne.n	8011194 <_printf_i+0x14c>
 801117c:	6823      	ldr	r3, [r4, #0]
 801117e:	07df      	lsls	r7, r3, #31
 8011180:	d508      	bpl.n	8011194 <_printf_i+0x14c>
 8011182:	6923      	ldr	r3, [r4, #16]
 8011184:	6861      	ldr	r1, [r4, #4]
 8011186:	4299      	cmp	r1, r3
 8011188:	bfde      	ittt	le
 801118a:	2330      	movle	r3, #48	; 0x30
 801118c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011190:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011194:	1b92      	subs	r2, r2, r6
 8011196:	6122      	str	r2, [r4, #16]
 8011198:	f8cd a000 	str.w	sl, [sp]
 801119c:	464b      	mov	r3, r9
 801119e:	aa03      	add	r2, sp, #12
 80111a0:	4621      	mov	r1, r4
 80111a2:	4640      	mov	r0, r8
 80111a4:	f7ff fee2 	bl	8010f6c <_printf_common>
 80111a8:	3001      	adds	r0, #1
 80111aa:	d14c      	bne.n	8011246 <_printf_i+0x1fe>
 80111ac:	f04f 30ff 	mov.w	r0, #4294967295
 80111b0:	b004      	add	sp, #16
 80111b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111b6:	4835      	ldr	r0, [pc, #212]	; (801128c <_printf_i+0x244>)
 80111b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80111bc:	6823      	ldr	r3, [r4, #0]
 80111be:	680e      	ldr	r6, [r1, #0]
 80111c0:	061f      	lsls	r7, r3, #24
 80111c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80111c6:	600e      	str	r6, [r1, #0]
 80111c8:	d514      	bpl.n	80111f4 <_printf_i+0x1ac>
 80111ca:	07d9      	lsls	r1, r3, #31
 80111cc:	bf44      	itt	mi
 80111ce:	f043 0320 	orrmi.w	r3, r3, #32
 80111d2:	6023      	strmi	r3, [r4, #0]
 80111d4:	b91d      	cbnz	r5, 80111de <_printf_i+0x196>
 80111d6:	6823      	ldr	r3, [r4, #0]
 80111d8:	f023 0320 	bic.w	r3, r3, #32
 80111dc:	6023      	str	r3, [r4, #0]
 80111de:	2310      	movs	r3, #16
 80111e0:	e7b0      	b.n	8011144 <_printf_i+0xfc>
 80111e2:	6823      	ldr	r3, [r4, #0]
 80111e4:	f043 0320 	orr.w	r3, r3, #32
 80111e8:	6023      	str	r3, [r4, #0]
 80111ea:	2378      	movs	r3, #120	; 0x78
 80111ec:	4828      	ldr	r0, [pc, #160]	; (8011290 <_printf_i+0x248>)
 80111ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80111f2:	e7e3      	b.n	80111bc <_printf_i+0x174>
 80111f4:	065e      	lsls	r6, r3, #25
 80111f6:	bf48      	it	mi
 80111f8:	b2ad      	uxthmi	r5, r5
 80111fa:	e7e6      	b.n	80111ca <_printf_i+0x182>
 80111fc:	4616      	mov	r6, r2
 80111fe:	e7bb      	b.n	8011178 <_printf_i+0x130>
 8011200:	680b      	ldr	r3, [r1, #0]
 8011202:	6826      	ldr	r6, [r4, #0]
 8011204:	6960      	ldr	r0, [r4, #20]
 8011206:	1d1d      	adds	r5, r3, #4
 8011208:	600d      	str	r5, [r1, #0]
 801120a:	0635      	lsls	r5, r6, #24
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	d501      	bpl.n	8011214 <_printf_i+0x1cc>
 8011210:	6018      	str	r0, [r3, #0]
 8011212:	e002      	b.n	801121a <_printf_i+0x1d2>
 8011214:	0671      	lsls	r1, r6, #25
 8011216:	d5fb      	bpl.n	8011210 <_printf_i+0x1c8>
 8011218:	8018      	strh	r0, [r3, #0]
 801121a:	2300      	movs	r3, #0
 801121c:	6123      	str	r3, [r4, #16]
 801121e:	4616      	mov	r6, r2
 8011220:	e7ba      	b.n	8011198 <_printf_i+0x150>
 8011222:	680b      	ldr	r3, [r1, #0]
 8011224:	1d1a      	adds	r2, r3, #4
 8011226:	600a      	str	r2, [r1, #0]
 8011228:	681e      	ldr	r6, [r3, #0]
 801122a:	6862      	ldr	r2, [r4, #4]
 801122c:	2100      	movs	r1, #0
 801122e:	4630      	mov	r0, r6
 8011230:	f7ef f85e 	bl	80002f0 <memchr>
 8011234:	b108      	cbz	r0, 801123a <_printf_i+0x1f2>
 8011236:	1b80      	subs	r0, r0, r6
 8011238:	6060      	str	r0, [r4, #4]
 801123a:	6863      	ldr	r3, [r4, #4]
 801123c:	6123      	str	r3, [r4, #16]
 801123e:	2300      	movs	r3, #0
 8011240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011244:	e7a8      	b.n	8011198 <_printf_i+0x150>
 8011246:	6923      	ldr	r3, [r4, #16]
 8011248:	4632      	mov	r2, r6
 801124a:	4649      	mov	r1, r9
 801124c:	4640      	mov	r0, r8
 801124e:	47d0      	blx	sl
 8011250:	3001      	adds	r0, #1
 8011252:	d0ab      	beq.n	80111ac <_printf_i+0x164>
 8011254:	6823      	ldr	r3, [r4, #0]
 8011256:	079b      	lsls	r3, r3, #30
 8011258:	d413      	bmi.n	8011282 <_printf_i+0x23a>
 801125a:	68e0      	ldr	r0, [r4, #12]
 801125c:	9b03      	ldr	r3, [sp, #12]
 801125e:	4298      	cmp	r0, r3
 8011260:	bfb8      	it	lt
 8011262:	4618      	movlt	r0, r3
 8011264:	e7a4      	b.n	80111b0 <_printf_i+0x168>
 8011266:	2301      	movs	r3, #1
 8011268:	4632      	mov	r2, r6
 801126a:	4649      	mov	r1, r9
 801126c:	4640      	mov	r0, r8
 801126e:	47d0      	blx	sl
 8011270:	3001      	adds	r0, #1
 8011272:	d09b      	beq.n	80111ac <_printf_i+0x164>
 8011274:	3501      	adds	r5, #1
 8011276:	68e3      	ldr	r3, [r4, #12]
 8011278:	9903      	ldr	r1, [sp, #12]
 801127a:	1a5b      	subs	r3, r3, r1
 801127c:	42ab      	cmp	r3, r5
 801127e:	dcf2      	bgt.n	8011266 <_printf_i+0x21e>
 8011280:	e7eb      	b.n	801125a <_printf_i+0x212>
 8011282:	2500      	movs	r5, #0
 8011284:	f104 0619 	add.w	r6, r4, #25
 8011288:	e7f5      	b.n	8011276 <_printf_i+0x22e>
 801128a:	bf00      	nop
 801128c:	08014ef6 	.word	0x08014ef6
 8011290:	08014f07 	.word	0x08014f07

08011294 <quorem>:
 8011294:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011298:	6903      	ldr	r3, [r0, #16]
 801129a:	690c      	ldr	r4, [r1, #16]
 801129c:	42a3      	cmp	r3, r4
 801129e:	4607      	mov	r7, r0
 80112a0:	f2c0 8081 	blt.w	80113a6 <quorem+0x112>
 80112a4:	3c01      	subs	r4, #1
 80112a6:	f101 0814 	add.w	r8, r1, #20
 80112aa:	f100 0514 	add.w	r5, r0, #20
 80112ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80112b2:	9301      	str	r3, [sp, #4]
 80112b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80112b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80112bc:	3301      	adds	r3, #1
 80112be:	429a      	cmp	r2, r3
 80112c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80112c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80112c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80112cc:	d331      	bcc.n	8011332 <quorem+0x9e>
 80112ce:	f04f 0e00 	mov.w	lr, #0
 80112d2:	4640      	mov	r0, r8
 80112d4:	46ac      	mov	ip, r5
 80112d6:	46f2      	mov	sl, lr
 80112d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80112dc:	b293      	uxth	r3, r2
 80112de:	fb06 e303 	mla	r3, r6, r3, lr
 80112e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80112e6:	b29b      	uxth	r3, r3
 80112e8:	ebaa 0303 	sub.w	r3, sl, r3
 80112ec:	0c12      	lsrs	r2, r2, #16
 80112ee:	f8dc a000 	ldr.w	sl, [ip]
 80112f2:	fb06 e202 	mla	r2, r6, r2, lr
 80112f6:	fa13 f38a 	uxtah	r3, r3, sl
 80112fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80112fe:	fa1f fa82 	uxth.w	sl, r2
 8011302:	f8dc 2000 	ldr.w	r2, [ip]
 8011306:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801130a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801130e:	b29b      	uxth	r3, r3
 8011310:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011314:	4581      	cmp	r9, r0
 8011316:	f84c 3b04 	str.w	r3, [ip], #4
 801131a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801131e:	d2db      	bcs.n	80112d8 <quorem+0x44>
 8011320:	f855 300b 	ldr.w	r3, [r5, fp]
 8011324:	b92b      	cbnz	r3, 8011332 <quorem+0x9e>
 8011326:	9b01      	ldr	r3, [sp, #4]
 8011328:	3b04      	subs	r3, #4
 801132a:	429d      	cmp	r5, r3
 801132c:	461a      	mov	r2, r3
 801132e:	d32e      	bcc.n	801138e <quorem+0xfa>
 8011330:	613c      	str	r4, [r7, #16]
 8011332:	4638      	mov	r0, r7
 8011334:	f001 f856 	bl	80123e4 <__mcmp>
 8011338:	2800      	cmp	r0, #0
 801133a:	db24      	blt.n	8011386 <quorem+0xf2>
 801133c:	3601      	adds	r6, #1
 801133e:	4628      	mov	r0, r5
 8011340:	f04f 0c00 	mov.w	ip, #0
 8011344:	f858 2b04 	ldr.w	r2, [r8], #4
 8011348:	f8d0 e000 	ldr.w	lr, [r0]
 801134c:	b293      	uxth	r3, r2
 801134e:	ebac 0303 	sub.w	r3, ip, r3
 8011352:	0c12      	lsrs	r2, r2, #16
 8011354:	fa13 f38e 	uxtah	r3, r3, lr
 8011358:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801135c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011360:	b29b      	uxth	r3, r3
 8011362:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011366:	45c1      	cmp	r9, r8
 8011368:	f840 3b04 	str.w	r3, [r0], #4
 801136c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011370:	d2e8      	bcs.n	8011344 <quorem+0xb0>
 8011372:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011376:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801137a:	b922      	cbnz	r2, 8011386 <quorem+0xf2>
 801137c:	3b04      	subs	r3, #4
 801137e:	429d      	cmp	r5, r3
 8011380:	461a      	mov	r2, r3
 8011382:	d30a      	bcc.n	801139a <quorem+0x106>
 8011384:	613c      	str	r4, [r7, #16]
 8011386:	4630      	mov	r0, r6
 8011388:	b003      	add	sp, #12
 801138a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801138e:	6812      	ldr	r2, [r2, #0]
 8011390:	3b04      	subs	r3, #4
 8011392:	2a00      	cmp	r2, #0
 8011394:	d1cc      	bne.n	8011330 <quorem+0x9c>
 8011396:	3c01      	subs	r4, #1
 8011398:	e7c7      	b.n	801132a <quorem+0x96>
 801139a:	6812      	ldr	r2, [r2, #0]
 801139c:	3b04      	subs	r3, #4
 801139e:	2a00      	cmp	r2, #0
 80113a0:	d1f0      	bne.n	8011384 <quorem+0xf0>
 80113a2:	3c01      	subs	r4, #1
 80113a4:	e7eb      	b.n	801137e <quorem+0xea>
 80113a6:	2000      	movs	r0, #0
 80113a8:	e7ee      	b.n	8011388 <quorem+0xf4>
 80113aa:	0000      	movs	r0, r0
 80113ac:	0000      	movs	r0, r0
	...

080113b0 <_dtoa_r>:
 80113b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113b4:	ec59 8b10 	vmov	r8, r9, d0
 80113b8:	b095      	sub	sp, #84	; 0x54
 80113ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80113bc:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80113be:	9107      	str	r1, [sp, #28]
 80113c0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80113c4:	4606      	mov	r6, r0
 80113c6:	9209      	str	r2, [sp, #36]	; 0x24
 80113c8:	9310      	str	r3, [sp, #64]	; 0x40
 80113ca:	b975      	cbnz	r5, 80113ea <_dtoa_r+0x3a>
 80113cc:	2010      	movs	r0, #16
 80113ce:	f000 fd75 	bl	8011ebc <malloc>
 80113d2:	4602      	mov	r2, r0
 80113d4:	6270      	str	r0, [r6, #36]	; 0x24
 80113d6:	b920      	cbnz	r0, 80113e2 <_dtoa_r+0x32>
 80113d8:	4bab      	ldr	r3, [pc, #684]	; (8011688 <_dtoa_r+0x2d8>)
 80113da:	21ea      	movs	r1, #234	; 0xea
 80113dc:	48ab      	ldr	r0, [pc, #684]	; (801168c <_dtoa_r+0x2dc>)
 80113de:	f001 f9cb 	bl	8012778 <__assert_func>
 80113e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80113e6:	6005      	str	r5, [r0, #0]
 80113e8:	60c5      	str	r5, [r0, #12]
 80113ea:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80113ec:	6819      	ldr	r1, [r3, #0]
 80113ee:	b151      	cbz	r1, 8011406 <_dtoa_r+0x56>
 80113f0:	685a      	ldr	r2, [r3, #4]
 80113f2:	604a      	str	r2, [r1, #4]
 80113f4:	2301      	movs	r3, #1
 80113f6:	4093      	lsls	r3, r2
 80113f8:	608b      	str	r3, [r1, #8]
 80113fa:	4630      	mov	r0, r6
 80113fc:	f000 fdb4 	bl	8011f68 <_Bfree>
 8011400:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011402:	2200      	movs	r2, #0
 8011404:	601a      	str	r2, [r3, #0]
 8011406:	f1b9 0300 	subs.w	r3, r9, #0
 801140a:	bfbb      	ittet	lt
 801140c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011410:	9303      	strlt	r3, [sp, #12]
 8011412:	2300      	movge	r3, #0
 8011414:	2201      	movlt	r2, #1
 8011416:	bfac      	ite	ge
 8011418:	6023      	strge	r3, [r4, #0]
 801141a:	6022      	strlt	r2, [r4, #0]
 801141c:	4b9c      	ldr	r3, [pc, #624]	; (8011690 <_dtoa_r+0x2e0>)
 801141e:	9c03      	ldr	r4, [sp, #12]
 8011420:	43a3      	bics	r3, r4
 8011422:	d11a      	bne.n	801145a <_dtoa_r+0xaa>
 8011424:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011426:	f242 730f 	movw	r3, #9999	; 0x270f
 801142a:	6013      	str	r3, [r2, #0]
 801142c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8011430:	ea53 0308 	orrs.w	r3, r3, r8
 8011434:	f000 8512 	beq.w	8011e5c <_dtoa_r+0xaac>
 8011438:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801143a:	b953      	cbnz	r3, 8011452 <_dtoa_r+0xa2>
 801143c:	4b95      	ldr	r3, [pc, #596]	; (8011694 <_dtoa_r+0x2e4>)
 801143e:	e01f      	b.n	8011480 <_dtoa_r+0xd0>
 8011440:	4b95      	ldr	r3, [pc, #596]	; (8011698 <_dtoa_r+0x2e8>)
 8011442:	9300      	str	r3, [sp, #0]
 8011444:	3308      	adds	r3, #8
 8011446:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011448:	6013      	str	r3, [r2, #0]
 801144a:	9800      	ldr	r0, [sp, #0]
 801144c:	b015      	add	sp, #84	; 0x54
 801144e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011452:	4b90      	ldr	r3, [pc, #576]	; (8011694 <_dtoa_r+0x2e4>)
 8011454:	9300      	str	r3, [sp, #0]
 8011456:	3303      	adds	r3, #3
 8011458:	e7f5      	b.n	8011446 <_dtoa_r+0x96>
 801145a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801145e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011466:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801146a:	d10b      	bne.n	8011484 <_dtoa_r+0xd4>
 801146c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801146e:	2301      	movs	r3, #1
 8011470:	6013      	str	r3, [r2, #0]
 8011472:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011474:	2b00      	cmp	r3, #0
 8011476:	f000 84ee 	beq.w	8011e56 <_dtoa_r+0xaa6>
 801147a:	4888      	ldr	r0, [pc, #544]	; (801169c <_dtoa_r+0x2ec>)
 801147c:	6018      	str	r0, [r3, #0]
 801147e:	1e43      	subs	r3, r0, #1
 8011480:	9300      	str	r3, [sp, #0]
 8011482:	e7e2      	b.n	801144a <_dtoa_r+0x9a>
 8011484:	a913      	add	r1, sp, #76	; 0x4c
 8011486:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801148a:	aa12      	add	r2, sp, #72	; 0x48
 801148c:	4630      	mov	r0, r6
 801148e:	f001 f84d 	bl	801252c <__d2b>
 8011492:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8011496:	4605      	mov	r5, r0
 8011498:	9812      	ldr	r0, [sp, #72]	; 0x48
 801149a:	2900      	cmp	r1, #0
 801149c:	d047      	beq.n	801152e <_dtoa_r+0x17e>
 801149e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80114a0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80114a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80114a8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80114ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80114b0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80114b4:	2400      	movs	r4, #0
 80114b6:	ec43 2b16 	vmov	d6, r2, r3
 80114ba:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80114be:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8011670 <_dtoa_r+0x2c0>
 80114c2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80114c6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8011678 <_dtoa_r+0x2c8>
 80114ca:	eea7 6b05 	vfma.f64	d6, d7, d5
 80114ce:	eeb0 7b46 	vmov.f64	d7, d6
 80114d2:	ee06 1a90 	vmov	s13, r1
 80114d6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80114da:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8011680 <_dtoa_r+0x2d0>
 80114de:	eea5 7b06 	vfma.f64	d7, d5, d6
 80114e2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80114e6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80114ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114ee:	ee16 ba90 	vmov	fp, s13
 80114f2:	9411      	str	r4, [sp, #68]	; 0x44
 80114f4:	d508      	bpl.n	8011508 <_dtoa_r+0x158>
 80114f6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80114fa:	eeb4 6b47 	vcmp.f64	d6, d7
 80114fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011502:	bf18      	it	ne
 8011504:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8011508:	f1bb 0f16 	cmp.w	fp, #22
 801150c:	d832      	bhi.n	8011574 <_dtoa_r+0x1c4>
 801150e:	4b64      	ldr	r3, [pc, #400]	; (80116a0 <_dtoa_r+0x2f0>)
 8011510:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011514:	ed93 7b00 	vldr	d7, [r3]
 8011518:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801151c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011524:	d501      	bpl.n	801152a <_dtoa_r+0x17a>
 8011526:	f10b 3bff 	add.w	fp, fp, #4294967295
 801152a:	2300      	movs	r3, #0
 801152c:	e023      	b.n	8011576 <_dtoa_r+0x1c6>
 801152e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011530:	4401      	add	r1, r0
 8011532:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8011536:	2b20      	cmp	r3, #32
 8011538:	bfc3      	ittte	gt
 801153a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801153e:	fa04 f303 	lslgt.w	r3, r4, r3
 8011542:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8011546:	f1c3 0320 	rsble	r3, r3, #32
 801154a:	bfc6      	itte	gt
 801154c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8011550:	ea43 0308 	orrgt.w	r3, r3, r8
 8011554:	fa08 f303 	lslle.w	r3, r8, r3
 8011558:	ee07 3a90 	vmov	s15, r3
 801155c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011560:	3901      	subs	r1, #1
 8011562:	ed8d 7b00 	vstr	d7, [sp]
 8011566:	9c01      	ldr	r4, [sp, #4]
 8011568:	e9dd 2300 	ldrd	r2, r3, [sp]
 801156c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8011570:	2401      	movs	r4, #1
 8011572:	e7a0      	b.n	80114b6 <_dtoa_r+0x106>
 8011574:	2301      	movs	r3, #1
 8011576:	930f      	str	r3, [sp, #60]	; 0x3c
 8011578:	1a43      	subs	r3, r0, r1
 801157a:	1e5a      	subs	r2, r3, #1
 801157c:	bf45      	ittet	mi
 801157e:	f1c3 0301 	rsbmi	r3, r3, #1
 8011582:	9305      	strmi	r3, [sp, #20]
 8011584:	2300      	movpl	r3, #0
 8011586:	2300      	movmi	r3, #0
 8011588:	9206      	str	r2, [sp, #24]
 801158a:	bf54      	ite	pl
 801158c:	9305      	strpl	r3, [sp, #20]
 801158e:	9306      	strmi	r3, [sp, #24]
 8011590:	f1bb 0f00 	cmp.w	fp, #0
 8011594:	db18      	blt.n	80115c8 <_dtoa_r+0x218>
 8011596:	9b06      	ldr	r3, [sp, #24]
 8011598:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801159c:	445b      	add	r3, fp
 801159e:	9306      	str	r3, [sp, #24]
 80115a0:	2300      	movs	r3, #0
 80115a2:	9a07      	ldr	r2, [sp, #28]
 80115a4:	2a09      	cmp	r2, #9
 80115a6:	d849      	bhi.n	801163c <_dtoa_r+0x28c>
 80115a8:	2a05      	cmp	r2, #5
 80115aa:	bfc4      	itt	gt
 80115ac:	3a04      	subgt	r2, #4
 80115ae:	9207      	strgt	r2, [sp, #28]
 80115b0:	9a07      	ldr	r2, [sp, #28]
 80115b2:	f1a2 0202 	sub.w	r2, r2, #2
 80115b6:	bfcc      	ite	gt
 80115b8:	2400      	movgt	r4, #0
 80115ba:	2401      	movle	r4, #1
 80115bc:	2a03      	cmp	r2, #3
 80115be:	d848      	bhi.n	8011652 <_dtoa_r+0x2a2>
 80115c0:	e8df f002 	tbb	[pc, r2]
 80115c4:	3a2c2e0b 	.word	0x3a2c2e0b
 80115c8:	9b05      	ldr	r3, [sp, #20]
 80115ca:	2200      	movs	r2, #0
 80115cc:	eba3 030b 	sub.w	r3, r3, fp
 80115d0:	9305      	str	r3, [sp, #20]
 80115d2:	920e      	str	r2, [sp, #56]	; 0x38
 80115d4:	f1cb 0300 	rsb	r3, fp, #0
 80115d8:	e7e3      	b.n	80115a2 <_dtoa_r+0x1f2>
 80115da:	2200      	movs	r2, #0
 80115dc:	9208      	str	r2, [sp, #32]
 80115de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80115e0:	2a00      	cmp	r2, #0
 80115e2:	dc39      	bgt.n	8011658 <_dtoa_r+0x2a8>
 80115e4:	f04f 0a01 	mov.w	sl, #1
 80115e8:	46d1      	mov	r9, sl
 80115ea:	4652      	mov	r2, sl
 80115ec:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80115f0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80115f2:	2100      	movs	r1, #0
 80115f4:	6079      	str	r1, [r7, #4]
 80115f6:	2004      	movs	r0, #4
 80115f8:	f100 0c14 	add.w	ip, r0, #20
 80115fc:	4594      	cmp	ip, r2
 80115fe:	6879      	ldr	r1, [r7, #4]
 8011600:	d92f      	bls.n	8011662 <_dtoa_r+0x2b2>
 8011602:	4630      	mov	r0, r6
 8011604:	930c      	str	r3, [sp, #48]	; 0x30
 8011606:	f000 fc6f 	bl	8011ee8 <_Balloc>
 801160a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801160c:	9000      	str	r0, [sp, #0]
 801160e:	4602      	mov	r2, r0
 8011610:	2800      	cmp	r0, #0
 8011612:	d149      	bne.n	80116a8 <_dtoa_r+0x2f8>
 8011614:	4b23      	ldr	r3, [pc, #140]	; (80116a4 <_dtoa_r+0x2f4>)
 8011616:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801161a:	e6df      	b.n	80113dc <_dtoa_r+0x2c>
 801161c:	2201      	movs	r2, #1
 801161e:	e7dd      	b.n	80115dc <_dtoa_r+0x22c>
 8011620:	2200      	movs	r2, #0
 8011622:	9208      	str	r2, [sp, #32]
 8011624:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011626:	eb0b 0a02 	add.w	sl, fp, r2
 801162a:	f10a 0901 	add.w	r9, sl, #1
 801162e:	464a      	mov	r2, r9
 8011630:	2a01      	cmp	r2, #1
 8011632:	bfb8      	it	lt
 8011634:	2201      	movlt	r2, #1
 8011636:	e7db      	b.n	80115f0 <_dtoa_r+0x240>
 8011638:	2201      	movs	r2, #1
 801163a:	e7f2      	b.n	8011622 <_dtoa_r+0x272>
 801163c:	2401      	movs	r4, #1
 801163e:	2200      	movs	r2, #0
 8011640:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8011644:	f04f 3aff 	mov.w	sl, #4294967295
 8011648:	2100      	movs	r1, #0
 801164a:	46d1      	mov	r9, sl
 801164c:	2212      	movs	r2, #18
 801164e:	9109      	str	r1, [sp, #36]	; 0x24
 8011650:	e7ce      	b.n	80115f0 <_dtoa_r+0x240>
 8011652:	2201      	movs	r2, #1
 8011654:	9208      	str	r2, [sp, #32]
 8011656:	e7f5      	b.n	8011644 <_dtoa_r+0x294>
 8011658:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 801165c:	46d1      	mov	r9, sl
 801165e:	4652      	mov	r2, sl
 8011660:	e7c6      	b.n	80115f0 <_dtoa_r+0x240>
 8011662:	3101      	adds	r1, #1
 8011664:	6079      	str	r1, [r7, #4]
 8011666:	0040      	lsls	r0, r0, #1
 8011668:	e7c6      	b.n	80115f8 <_dtoa_r+0x248>
 801166a:	bf00      	nop
 801166c:	f3af 8000 	nop.w
 8011670:	636f4361 	.word	0x636f4361
 8011674:	3fd287a7 	.word	0x3fd287a7
 8011678:	8b60c8b3 	.word	0x8b60c8b3
 801167c:	3fc68a28 	.word	0x3fc68a28
 8011680:	509f79fb 	.word	0x509f79fb
 8011684:	3fd34413 	.word	0x3fd34413
 8011688:	08014f25 	.word	0x08014f25
 801168c:	08014f3c 	.word	0x08014f3c
 8011690:	7ff00000 	.word	0x7ff00000
 8011694:	08014f21 	.word	0x08014f21
 8011698:	08014f18 	.word	0x08014f18
 801169c:	08014ef5 	.word	0x08014ef5
 80116a0:	08015038 	.word	0x08015038
 80116a4:	08014f9b 	.word	0x08014f9b
 80116a8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80116aa:	9900      	ldr	r1, [sp, #0]
 80116ac:	6011      	str	r1, [r2, #0]
 80116ae:	f1b9 0f0e 	cmp.w	r9, #14
 80116b2:	d872      	bhi.n	801179a <_dtoa_r+0x3ea>
 80116b4:	2c00      	cmp	r4, #0
 80116b6:	d070      	beq.n	801179a <_dtoa_r+0x3ea>
 80116b8:	f1bb 0f00 	cmp.w	fp, #0
 80116bc:	f340 80a6 	ble.w	801180c <_dtoa_r+0x45c>
 80116c0:	49ca      	ldr	r1, [pc, #808]	; (80119ec <_dtoa_r+0x63c>)
 80116c2:	f00b 020f 	and.w	r2, fp, #15
 80116c6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80116ca:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80116ce:	ed92 7b00 	vldr	d7, [r2]
 80116d2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80116d6:	f000 808d 	beq.w	80117f4 <_dtoa_r+0x444>
 80116da:	4ac5      	ldr	r2, [pc, #788]	; (80119f0 <_dtoa_r+0x640>)
 80116dc:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80116e0:	ed92 6b08 	vldr	d6, [r2, #32]
 80116e4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80116e8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80116ec:	f001 010f 	and.w	r1, r1, #15
 80116f0:	2203      	movs	r2, #3
 80116f2:	48bf      	ldr	r0, [pc, #764]	; (80119f0 <_dtoa_r+0x640>)
 80116f4:	2900      	cmp	r1, #0
 80116f6:	d17f      	bne.n	80117f8 <_dtoa_r+0x448>
 80116f8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80116fc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011700:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011704:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011706:	2900      	cmp	r1, #0
 8011708:	f000 80b2 	beq.w	8011870 <_dtoa_r+0x4c0>
 801170c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011710:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011714:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801171c:	f140 80a8 	bpl.w	8011870 <_dtoa_r+0x4c0>
 8011720:	f1b9 0f00 	cmp.w	r9, #0
 8011724:	f000 80a4 	beq.w	8011870 <_dtoa_r+0x4c0>
 8011728:	f1ba 0f00 	cmp.w	sl, #0
 801172c:	dd31      	ble.n	8011792 <_dtoa_r+0x3e2>
 801172e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8011732:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011736:	ed8d 7b02 	vstr	d7, [sp, #8]
 801173a:	f10b 37ff 	add.w	r7, fp, #4294967295
 801173e:	3201      	adds	r2, #1
 8011740:	4650      	mov	r0, sl
 8011742:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011746:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801174a:	ee07 2a90 	vmov	s15, r2
 801174e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011752:	eea7 5b06 	vfma.f64	d5, d7, d6
 8011756:	ed8d 5b02 	vstr	d5, [sp, #8]
 801175a:	9c03      	ldr	r4, [sp, #12]
 801175c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8011760:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8011764:	2800      	cmp	r0, #0
 8011766:	f040 8086 	bne.w	8011876 <_dtoa_r+0x4c6>
 801176a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801176e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011772:	ec42 1b17 	vmov	d7, r1, r2
 8011776:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801177a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801177e:	f300 8272 	bgt.w	8011c66 <_dtoa_r+0x8b6>
 8011782:	eeb1 7b47 	vneg.f64	d7, d7
 8011786:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801178a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801178e:	f100 8267 	bmi.w	8011c60 <_dtoa_r+0x8b0>
 8011792:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8011796:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801179a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801179c:	2a00      	cmp	r2, #0
 801179e:	f2c0 8129 	blt.w	80119f4 <_dtoa_r+0x644>
 80117a2:	f1bb 0f0e 	cmp.w	fp, #14
 80117a6:	f300 8125 	bgt.w	80119f4 <_dtoa_r+0x644>
 80117aa:	4b90      	ldr	r3, [pc, #576]	; (80119ec <_dtoa_r+0x63c>)
 80117ac:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80117b0:	ed93 6b00 	vldr	d6, [r3]
 80117b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	f280 80c3 	bge.w	8011942 <_dtoa_r+0x592>
 80117bc:	f1b9 0f00 	cmp.w	r9, #0
 80117c0:	f300 80bf 	bgt.w	8011942 <_dtoa_r+0x592>
 80117c4:	f040 824c 	bne.w	8011c60 <_dtoa_r+0x8b0>
 80117c8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80117cc:	ee26 6b07 	vmul.f64	d6, d6, d7
 80117d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80117d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80117d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117dc:	464c      	mov	r4, r9
 80117de:	464f      	mov	r7, r9
 80117e0:	f280 8222 	bge.w	8011c28 <_dtoa_r+0x878>
 80117e4:	f8dd 8000 	ldr.w	r8, [sp]
 80117e8:	2331      	movs	r3, #49	; 0x31
 80117ea:	f808 3b01 	strb.w	r3, [r8], #1
 80117ee:	f10b 0b01 	add.w	fp, fp, #1
 80117f2:	e21e      	b.n	8011c32 <_dtoa_r+0x882>
 80117f4:	2202      	movs	r2, #2
 80117f6:	e77c      	b.n	80116f2 <_dtoa_r+0x342>
 80117f8:	07cc      	lsls	r4, r1, #31
 80117fa:	d504      	bpl.n	8011806 <_dtoa_r+0x456>
 80117fc:	ed90 6b00 	vldr	d6, [r0]
 8011800:	3201      	adds	r2, #1
 8011802:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011806:	1049      	asrs	r1, r1, #1
 8011808:	3008      	adds	r0, #8
 801180a:	e773      	b.n	80116f4 <_dtoa_r+0x344>
 801180c:	d02e      	beq.n	801186c <_dtoa_r+0x4bc>
 801180e:	f1cb 0100 	rsb	r1, fp, #0
 8011812:	4a76      	ldr	r2, [pc, #472]	; (80119ec <_dtoa_r+0x63c>)
 8011814:	f001 000f 	and.w	r0, r1, #15
 8011818:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801181c:	ed92 7b00 	vldr	d7, [r2]
 8011820:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8011824:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011828:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801182c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8011830:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8011834:	486e      	ldr	r0, [pc, #440]	; (80119f0 <_dtoa_r+0x640>)
 8011836:	1109      	asrs	r1, r1, #4
 8011838:	2400      	movs	r4, #0
 801183a:	2202      	movs	r2, #2
 801183c:	b939      	cbnz	r1, 801184e <_dtoa_r+0x49e>
 801183e:	2c00      	cmp	r4, #0
 8011840:	f43f af60 	beq.w	8011704 <_dtoa_r+0x354>
 8011844:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011848:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801184c:	e75a      	b.n	8011704 <_dtoa_r+0x354>
 801184e:	07cf      	lsls	r7, r1, #31
 8011850:	d509      	bpl.n	8011866 <_dtoa_r+0x4b6>
 8011852:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8011856:	ed90 7b00 	vldr	d7, [r0]
 801185a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801185e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8011862:	3201      	adds	r2, #1
 8011864:	2401      	movs	r4, #1
 8011866:	1049      	asrs	r1, r1, #1
 8011868:	3008      	adds	r0, #8
 801186a:	e7e7      	b.n	801183c <_dtoa_r+0x48c>
 801186c:	2202      	movs	r2, #2
 801186e:	e749      	b.n	8011704 <_dtoa_r+0x354>
 8011870:	465f      	mov	r7, fp
 8011872:	4648      	mov	r0, r9
 8011874:	e765      	b.n	8011742 <_dtoa_r+0x392>
 8011876:	ec42 1b17 	vmov	d7, r1, r2
 801187a:	4a5c      	ldr	r2, [pc, #368]	; (80119ec <_dtoa_r+0x63c>)
 801187c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011880:	ed12 4b02 	vldr	d4, [r2, #-8]
 8011884:	9a00      	ldr	r2, [sp, #0]
 8011886:	1814      	adds	r4, r2, r0
 8011888:	9a08      	ldr	r2, [sp, #32]
 801188a:	b352      	cbz	r2, 80118e2 <_dtoa_r+0x532>
 801188c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8011890:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8011894:	f8dd 8000 	ldr.w	r8, [sp]
 8011898:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801189c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80118a0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80118a4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80118a8:	ee14 2a90 	vmov	r2, s9
 80118ac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80118b0:	3230      	adds	r2, #48	; 0x30
 80118b2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80118b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80118ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118be:	f808 2b01 	strb.w	r2, [r8], #1
 80118c2:	d439      	bmi.n	8011938 <_dtoa_r+0x588>
 80118c4:	ee32 5b46 	vsub.f64	d5, d2, d6
 80118c8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80118cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118d0:	d472      	bmi.n	80119b8 <_dtoa_r+0x608>
 80118d2:	45a0      	cmp	r8, r4
 80118d4:	f43f af5d 	beq.w	8011792 <_dtoa_r+0x3e2>
 80118d8:	ee27 7b03 	vmul.f64	d7, d7, d3
 80118dc:	ee26 6b03 	vmul.f64	d6, d6, d3
 80118e0:	e7e0      	b.n	80118a4 <_dtoa_r+0x4f4>
 80118e2:	f8dd 8000 	ldr.w	r8, [sp]
 80118e6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80118ea:	4621      	mov	r1, r4
 80118ec:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80118f0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80118f4:	ee14 2a90 	vmov	r2, s9
 80118f8:	3230      	adds	r2, #48	; 0x30
 80118fa:	f808 2b01 	strb.w	r2, [r8], #1
 80118fe:	45a0      	cmp	r8, r4
 8011900:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011904:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011908:	d118      	bne.n	801193c <_dtoa_r+0x58c>
 801190a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801190e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8011912:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8011916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801191a:	dc4d      	bgt.n	80119b8 <_dtoa_r+0x608>
 801191c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011920:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011928:	f57f af33 	bpl.w	8011792 <_dtoa_r+0x3e2>
 801192c:	4688      	mov	r8, r1
 801192e:	3901      	subs	r1, #1
 8011930:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8011934:	2b30      	cmp	r3, #48	; 0x30
 8011936:	d0f9      	beq.n	801192c <_dtoa_r+0x57c>
 8011938:	46bb      	mov	fp, r7
 801193a:	e02a      	b.n	8011992 <_dtoa_r+0x5e2>
 801193c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011940:	e7d6      	b.n	80118f0 <_dtoa_r+0x540>
 8011942:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011946:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801194a:	f8dd 8000 	ldr.w	r8, [sp]
 801194e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8011952:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8011956:	ee15 3a10 	vmov	r3, s10
 801195a:	3330      	adds	r3, #48	; 0x30
 801195c:	f808 3b01 	strb.w	r3, [r8], #1
 8011960:	9b00      	ldr	r3, [sp, #0]
 8011962:	eba8 0303 	sub.w	r3, r8, r3
 8011966:	4599      	cmp	r9, r3
 8011968:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801196c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8011970:	d133      	bne.n	80119da <_dtoa_r+0x62a>
 8011972:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011976:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801197a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801197e:	dc1a      	bgt.n	80119b6 <_dtoa_r+0x606>
 8011980:	eeb4 7b46 	vcmp.f64	d7, d6
 8011984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011988:	d103      	bne.n	8011992 <_dtoa_r+0x5e2>
 801198a:	ee15 3a10 	vmov	r3, s10
 801198e:	07d9      	lsls	r1, r3, #31
 8011990:	d411      	bmi.n	80119b6 <_dtoa_r+0x606>
 8011992:	4629      	mov	r1, r5
 8011994:	4630      	mov	r0, r6
 8011996:	f000 fae7 	bl	8011f68 <_Bfree>
 801199a:	2300      	movs	r3, #0
 801199c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801199e:	f888 3000 	strb.w	r3, [r8]
 80119a2:	f10b 0301 	add.w	r3, fp, #1
 80119a6:	6013      	str	r3, [r2, #0]
 80119a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	f43f ad4d 	beq.w	801144a <_dtoa_r+0x9a>
 80119b0:	f8c3 8000 	str.w	r8, [r3]
 80119b4:	e549      	b.n	801144a <_dtoa_r+0x9a>
 80119b6:	465f      	mov	r7, fp
 80119b8:	4643      	mov	r3, r8
 80119ba:	4698      	mov	r8, r3
 80119bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80119c0:	2a39      	cmp	r2, #57	; 0x39
 80119c2:	d106      	bne.n	80119d2 <_dtoa_r+0x622>
 80119c4:	9a00      	ldr	r2, [sp, #0]
 80119c6:	429a      	cmp	r2, r3
 80119c8:	d1f7      	bne.n	80119ba <_dtoa_r+0x60a>
 80119ca:	9900      	ldr	r1, [sp, #0]
 80119cc:	2230      	movs	r2, #48	; 0x30
 80119ce:	3701      	adds	r7, #1
 80119d0:	700a      	strb	r2, [r1, #0]
 80119d2:	781a      	ldrb	r2, [r3, #0]
 80119d4:	3201      	adds	r2, #1
 80119d6:	701a      	strb	r2, [r3, #0]
 80119d8:	e7ae      	b.n	8011938 <_dtoa_r+0x588>
 80119da:	ee27 7b04 	vmul.f64	d7, d7, d4
 80119de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80119e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119e6:	d1b2      	bne.n	801194e <_dtoa_r+0x59e>
 80119e8:	e7d3      	b.n	8011992 <_dtoa_r+0x5e2>
 80119ea:	bf00      	nop
 80119ec:	08015038 	.word	0x08015038
 80119f0:	08015010 	.word	0x08015010
 80119f4:	9908      	ldr	r1, [sp, #32]
 80119f6:	2900      	cmp	r1, #0
 80119f8:	f000 80d1 	beq.w	8011b9e <_dtoa_r+0x7ee>
 80119fc:	9907      	ldr	r1, [sp, #28]
 80119fe:	2901      	cmp	r1, #1
 8011a00:	f300 80b4 	bgt.w	8011b6c <_dtoa_r+0x7bc>
 8011a04:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011a06:	2900      	cmp	r1, #0
 8011a08:	f000 80ac 	beq.w	8011b64 <_dtoa_r+0x7b4>
 8011a0c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011a10:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8011a14:	461c      	mov	r4, r3
 8011a16:	930a      	str	r3, [sp, #40]	; 0x28
 8011a18:	9b05      	ldr	r3, [sp, #20]
 8011a1a:	4413      	add	r3, r2
 8011a1c:	9305      	str	r3, [sp, #20]
 8011a1e:	9b06      	ldr	r3, [sp, #24]
 8011a20:	2101      	movs	r1, #1
 8011a22:	4413      	add	r3, r2
 8011a24:	4630      	mov	r0, r6
 8011a26:	9306      	str	r3, [sp, #24]
 8011a28:	f000 fb5a 	bl	80120e0 <__i2b>
 8011a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a2e:	4607      	mov	r7, r0
 8011a30:	f1b8 0f00 	cmp.w	r8, #0
 8011a34:	dd0d      	ble.n	8011a52 <_dtoa_r+0x6a2>
 8011a36:	9a06      	ldr	r2, [sp, #24]
 8011a38:	2a00      	cmp	r2, #0
 8011a3a:	dd0a      	ble.n	8011a52 <_dtoa_r+0x6a2>
 8011a3c:	4542      	cmp	r2, r8
 8011a3e:	9905      	ldr	r1, [sp, #20]
 8011a40:	bfa8      	it	ge
 8011a42:	4642      	movge	r2, r8
 8011a44:	1a89      	subs	r1, r1, r2
 8011a46:	9105      	str	r1, [sp, #20]
 8011a48:	9906      	ldr	r1, [sp, #24]
 8011a4a:	eba8 0802 	sub.w	r8, r8, r2
 8011a4e:	1a8a      	subs	r2, r1, r2
 8011a50:	9206      	str	r2, [sp, #24]
 8011a52:	b303      	cbz	r3, 8011a96 <_dtoa_r+0x6e6>
 8011a54:	9a08      	ldr	r2, [sp, #32]
 8011a56:	2a00      	cmp	r2, #0
 8011a58:	f000 80a6 	beq.w	8011ba8 <_dtoa_r+0x7f8>
 8011a5c:	2c00      	cmp	r4, #0
 8011a5e:	dd13      	ble.n	8011a88 <_dtoa_r+0x6d8>
 8011a60:	4639      	mov	r1, r7
 8011a62:	4622      	mov	r2, r4
 8011a64:	4630      	mov	r0, r6
 8011a66:	930c      	str	r3, [sp, #48]	; 0x30
 8011a68:	f000 fbf6 	bl	8012258 <__pow5mult>
 8011a6c:	462a      	mov	r2, r5
 8011a6e:	4601      	mov	r1, r0
 8011a70:	4607      	mov	r7, r0
 8011a72:	4630      	mov	r0, r6
 8011a74:	f000 fb4a 	bl	801210c <__multiply>
 8011a78:	4629      	mov	r1, r5
 8011a7a:	900a      	str	r0, [sp, #40]	; 0x28
 8011a7c:	4630      	mov	r0, r6
 8011a7e:	f000 fa73 	bl	8011f68 <_Bfree>
 8011a82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011a84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011a86:	4615      	mov	r5, r2
 8011a88:	1b1a      	subs	r2, r3, r4
 8011a8a:	d004      	beq.n	8011a96 <_dtoa_r+0x6e6>
 8011a8c:	4629      	mov	r1, r5
 8011a8e:	4630      	mov	r0, r6
 8011a90:	f000 fbe2 	bl	8012258 <__pow5mult>
 8011a94:	4605      	mov	r5, r0
 8011a96:	2101      	movs	r1, #1
 8011a98:	4630      	mov	r0, r6
 8011a9a:	f000 fb21 	bl	80120e0 <__i2b>
 8011a9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	4604      	mov	r4, r0
 8011aa4:	f340 8082 	ble.w	8011bac <_dtoa_r+0x7fc>
 8011aa8:	461a      	mov	r2, r3
 8011aaa:	4601      	mov	r1, r0
 8011aac:	4630      	mov	r0, r6
 8011aae:	f000 fbd3 	bl	8012258 <__pow5mult>
 8011ab2:	9b07      	ldr	r3, [sp, #28]
 8011ab4:	2b01      	cmp	r3, #1
 8011ab6:	4604      	mov	r4, r0
 8011ab8:	dd7b      	ble.n	8011bb2 <_dtoa_r+0x802>
 8011aba:	2300      	movs	r3, #0
 8011abc:	930a      	str	r3, [sp, #40]	; 0x28
 8011abe:	6922      	ldr	r2, [r4, #16]
 8011ac0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011ac4:	6910      	ldr	r0, [r2, #16]
 8011ac6:	f000 fabb 	bl	8012040 <__hi0bits>
 8011aca:	f1c0 0020 	rsb	r0, r0, #32
 8011ace:	9b06      	ldr	r3, [sp, #24]
 8011ad0:	4418      	add	r0, r3
 8011ad2:	f010 001f 	ands.w	r0, r0, #31
 8011ad6:	f000 808d 	beq.w	8011bf4 <_dtoa_r+0x844>
 8011ada:	f1c0 0220 	rsb	r2, r0, #32
 8011ade:	2a04      	cmp	r2, #4
 8011ae0:	f340 8086 	ble.w	8011bf0 <_dtoa_r+0x840>
 8011ae4:	f1c0 001c 	rsb	r0, r0, #28
 8011ae8:	9b05      	ldr	r3, [sp, #20]
 8011aea:	4403      	add	r3, r0
 8011aec:	9305      	str	r3, [sp, #20]
 8011aee:	9b06      	ldr	r3, [sp, #24]
 8011af0:	4403      	add	r3, r0
 8011af2:	4480      	add	r8, r0
 8011af4:	9306      	str	r3, [sp, #24]
 8011af6:	9b05      	ldr	r3, [sp, #20]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	dd05      	ble.n	8011b08 <_dtoa_r+0x758>
 8011afc:	4629      	mov	r1, r5
 8011afe:	461a      	mov	r2, r3
 8011b00:	4630      	mov	r0, r6
 8011b02:	f000 fc03 	bl	801230c <__lshift>
 8011b06:	4605      	mov	r5, r0
 8011b08:	9b06      	ldr	r3, [sp, #24]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	dd05      	ble.n	8011b1a <_dtoa_r+0x76a>
 8011b0e:	4621      	mov	r1, r4
 8011b10:	461a      	mov	r2, r3
 8011b12:	4630      	mov	r0, r6
 8011b14:	f000 fbfa 	bl	801230c <__lshift>
 8011b18:	4604      	mov	r4, r0
 8011b1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d06b      	beq.n	8011bf8 <_dtoa_r+0x848>
 8011b20:	4621      	mov	r1, r4
 8011b22:	4628      	mov	r0, r5
 8011b24:	f000 fc5e 	bl	80123e4 <__mcmp>
 8011b28:	2800      	cmp	r0, #0
 8011b2a:	da65      	bge.n	8011bf8 <_dtoa_r+0x848>
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	4629      	mov	r1, r5
 8011b30:	220a      	movs	r2, #10
 8011b32:	4630      	mov	r0, r6
 8011b34:	f000 fa3a 	bl	8011fac <__multadd>
 8011b38:	9b08      	ldr	r3, [sp, #32]
 8011b3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011b3e:	4605      	mov	r5, r0
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	f000 8192 	beq.w	8011e6a <_dtoa_r+0xaba>
 8011b46:	4639      	mov	r1, r7
 8011b48:	2300      	movs	r3, #0
 8011b4a:	220a      	movs	r2, #10
 8011b4c:	4630      	mov	r0, r6
 8011b4e:	f000 fa2d 	bl	8011fac <__multadd>
 8011b52:	f1ba 0f00 	cmp.w	sl, #0
 8011b56:	4607      	mov	r7, r0
 8011b58:	f300 808e 	bgt.w	8011c78 <_dtoa_r+0x8c8>
 8011b5c:	9b07      	ldr	r3, [sp, #28]
 8011b5e:	2b02      	cmp	r3, #2
 8011b60:	dc51      	bgt.n	8011c06 <_dtoa_r+0x856>
 8011b62:	e089      	b.n	8011c78 <_dtoa_r+0x8c8>
 8011b64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011b66:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011b6a:	e751      	b.n	8011a10 <_dtoa_r+0x660>
 8011b6c:	f109 34ff 	add.w	r4, r9, #4294967295
 8011b70:	42a3      	cmp	r3, r4
 8011b72:	bfbf      	itttt	lt
 8011b74:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8011b76:	1ae3      	sublt	r3, r4, r3
 8011b78:	18d2      	addlt	r2, r2, r3
 8011b7a:	4613      	movlt	r3, r2
 8011b7c:	bfb7      	itett	lt
 8011b7e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8011b80:	1b1c      	subge	r4, r3, r4
 8011b82:	4623      	movlt	r3, r4
 8011b84:	2400      	movlt	r4, #0
 8011b86:	f1b9 0f00 	cmp.w	r9, #0
 8011b8a:	bfb5      	itete	lt
 8011b8c:	9a05      	ldrlt	r2, [sp, #20]
 8011b8e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8011b92:	eba2 0809 	sublt.w	r8, r2, r9
 8011b96:	464a      	movge	r2, r9
 8011b98:	bfb8      	it	lt
 8011b9a:	2200      	movlt	r2, #0
 8011b9c:	e73b      	b.n	8011a16 <_dtoa_r+0x666>
 8011b9e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8011ba2:	9f08      	ldr	r7, [sp, #32]
 8011ba4:	461c      	mov	r4, r3
 8011ba6:	e743      	b.n	8011a30 <_dtoa_r+0x680>
 8011ba8:	461a      	mov	r2, r3
 8011baa:	e76f      	b.n	8011a8c <_dtoa_r+0x6dc>
 8011bac:	9b07      	ldr	r3, [sp, #28]
 8011bae:	2b01      	cmp	r3, #1
 8011bb0:	dc18      	bgt.n	8011be4 <_dtoa_r+0x834>
 8011bb2:	9b02      	ldr	r3, [sp, #8]
 8011bb4:	b9b3      	cbnz	r3, 8011be4 <_dtoa_r+0x834>
 8011bb6:	9b03      	ldr	r3, [sp, #12]
 8011bb8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8011bbc:	b9a2      	cbnz	r2, 8011be8 <_dtoa_r+0x838>
 8011bbe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011bc2:	0d12      	lsrs	r2, r2, #20
 8011bc4:	0512      	lsls	r2, r2, #20
 8011bc6:	b18a      	cbz	r2, 8011bec <_dtoa_r+0x83c>
 8011bc8:	9b05      	ldr	r3, [sp, #20]
 8011bca:	3301      	adds	r3, #1
 8011bcc:	9305      	str	r3, [sp, #20]
 8011bce:	9b06      	ldr	r3, [sp, #24]
 8011bd0:	3301      	adds	r3, #1
 8011bd2:	9306      	str	r3, [sp, #24]
 8011bd4:	2301      	movs	r3, #1
 8011bd6:	930a      	str	r3, [sp, #40]	; 0x28
 8011bd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	f47f af6f 	bne.w	8011abe <_dtoa_r+0x70e>
 8011be0:	2001      	movs	r0, #1
 8011be2:	e774      	b.n	8011ace <_dtoa_r+0x71e>
 8011be4:	2300      	movs	r3, #0
 8011be6:	e7f6      	b.n	8011bd6 <_dtoa_r+0x826>
 8011be8:	9b02      	ldr	r3, [sp, #8]
 8011bea:	e7f4      	b.n	8011bd6 <_dtoa_r+0x826>
 8011bec:	920a      	str	r2, [sp, #40]	; 0x28
 8011bee:	e7f3      	b.n	8011bd8 <_dtoa_r+0x828>
 8011bf0:	d081      	beq.n	8011af6 <_dtoa_r+0x746>
 8011bf2:	4610      	mov	r0, r2
 8011bf4:	301c      	adds	r0, #28
 8011bf6:	e777      	b.n	8011ae8 <_dtoa_r+0x738>
 8011bf8:	f1b9 0f00 	cmp.w	r9, #0
 8011bfc:	dc37      	bgt.n	8011c6e <_dtoa_r+0x8be>
 8011bfe:	9b07      	ldr	r3, [sp, #28]
 8011c00:	2b02      	cmp	r3, #2
 8011c02:	dd34      	ble.n	8011c6e <_dtoa_r+0x8be>
 8011c04:	46ca      	mov	sl, r9
 8011c06:	f1ba 0f00 	cmp.w	sl, #0
 8011c0a:	d10d      	bne.n	8011c28 <_dtoa_r+0x878>
 8011c0c:	4621      	mov	r1, r4
 8011c0e:	4653      	mov	r3, sl
 8011c10:	2205      	movs	r2, #5
 8011c12:	4630      	mov	r0, r6
 8011c14:	f000 f9ca 	bl	8011fac <__multadd>
 8011c18:	4601      	mov	r1, r0
 8011c1a:	4604      	mov	r4, r0
 8011c1c:	4628      	mov	r0, r5
 8011c1e:	f000 fbe1 	bl	80123e4 <__mcmp>
 8011c22:	2800      	cmp	r0, #0
 8011c24:	f73f adde 	bgt.w	80117e4 <_dtoa_r+0x434>
 8011c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c2a:	f8dd 8000 	ldr.w	r8, [sp]
 8011c2e:	ea6f 0b03 	mvn.w	fp, r3
 8011c32:	f04f 0900 	mov.w	r9, #0
 8011c36:	4621      	mov	r1, r4
 8011c38:	4630      	mov	r0, r6
 8011c3a:	f000 f995 	bl	8011f68 <_Bfree>
 8011c3e:	2f00      	cmp	r7, #0
 8011c40:	f43f aea7 	beq.w	8011992 <_dtoa_r+0x5e2>
 8011c44:	f1b9 0f00 	cmp.w	r9, #0
 8011c48:	d005      	beq.n	8011c56 <_dtoa_r+0x8a6>
 8011c4a:	45b9      	cmp	r9, r7
 8011c4c:	d003      	beq.n	8011c56 <_dtoa_r+0x8a6>
 8011c4e:	4649      	mov	r1, r9
 8011c50:	4630      	mov	r0, r6
 8011c52:	f000 f989 	bl	8011f68 <_Bfree>
 8011c56:	4639      	mov	r1, r7
 8011c58:	4630      	mov	r0, r6
 8011c5a:	f000 f985 	bl	8011f68 <_Bfree>
 8011c5e:	e698      	b.n	8011992 <_dtoa_r+0x5e2>
 8011c60:	2400      	movs	r4, #0
 8011c62:	4627      	mov	r7, r4
 8011c64:	e7e0      	b.n	8011c28 <_dtoa_r+0x878>
 8011c66:	46bb      	mov	fp, r7
 8011c68:	4604      	mov	r4, r0
 8011c6a:	4607      	mov	r7, r0
 8011c6c:	e5ba      	b.n	80117e4 <_dtoa_r+0x434>
 8011c6e:	9b08      	ldr	r3, [sp, #32]
 8011c70:	46ca      	mov	sl, r9
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	f000 8100 	beq.w	8011e78 <_dtoa_r+0xac8>
 8011c78:	f1b8 0f00 	cmp.w	r8, #0
 8011c7c:	dd05      	ble.n	8011c8a <_dtoa_r+0x8da>
 8011c7e:	4639      	mov	r1, r7
 8011c80:	4642      	mov	r2, r8
 8011c82:	4630      	mov	r0, r6
 8011c84:	f000 fb42 	bl	801230c <__lshift>
 8011c88:	4607      	mov	r7, r0
 8011c8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d05d      	beq.n	8011d4c <_dtoa_r+0x99c>
 8011c90:	6879      	ldr	r1, [r7, #4]
 8011c92:	4630      	mov	r0, r6
 8011c94:	f000 f928 	bl	8011ee8 <_Balloc>
 8011c98:	4680      	mov	r8, r0
 8011c9a:	b928      	cbnz	r0, 8011ca8 <_dtoa_r+0x8f8>
 8011c9c:	4b82      	ldr	r3, [pc, #520]	; (8011ea8 <_dtoa_r+0xaf8>)
 8011c9e:	4602      	mov	r2, r0
 8011ca0:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011ca4:	f7ff bb9a 	b.w	80113dc <_dtoa_r+0x2c>
 8011ca8:	693a      	ldr	r2, [r7, #16]
 8011caa:	3202      	adds	r2, #2
 8011cac:	0092      	lsls	r2, r2, #2
 8011cae:	f107 010c 	add.w	r1, r7, #12
 8011cb2:	300c      	adds	r0, #12
 8011cb4:	f000 f90a 	bl	8011ecc <memcpy>
 8011cb8:	2201      	movs	r2, #1
 8011cba:	4641      	mov	r1, r8
 8011cbc:	4630      	mov	r0, r6
 8011cbe:	f000 fb25 	bl	801230c <__lshift>
 8011cc2:	9b00      	ldr	r3, [sp, #0]
 8011cc4:	3301      	adds	r3, #1
 8011cc6:	9305      	str	r3, [sp, #20]
 8011cc8:	9b00      	ldr	r3, [sp, #0]
 8011cca:	4453      	add	r3, sl
 8011ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8011cce:	9b02      	ldr	r3, [sp, #8]
 8011cd0:	f003 0301 	and.w	r3, r3, #1
 8011cd4:	46b9      	mov	r9, r7
 8011cd6:	9308      	str	r3, [sp, #32]
 8011cd8:	4607      	mov	r7, r0
 8011cda:	9b05      	ldr	r3, [sp, #20]
 8011cdc:	4621      	mov	r1, r4
 8011cde:	3b01      	subs	r3, #1
 8011ce0:	4628      	mov	r0, r5
 8011ce2:	9302      	str	r3, [sp, #8]
 8011ce4:	f7ff fad6 	bl	8011294 <quorem>
 8011ce8:	4603      	mov	r3, r0
 8011cea:	3330      	adds	r3, #48	; 0x30
 8011cec:	9006      	str	r0, [sp, #24]
 8011cee:	4649      	mov	r1, r9
 8011cf0:	4628      	mov	r0, r5
 8011cf2:	930a      	str	r3, [sp, #40]	; 0x28
 8011cf4:	f000 fb76 	bl	80123e4 <__mcmp>
 8011cf8:	463a      	mov	r2, r7
 8011cfa:	4682      	mov	sl, r0
 8011cfc:	4621      	mov	r1, r4
 8011cfe:	4630      	mov	r0, r6
 8011d00:	f000 fb8c 	bl	801241c <__mdiff>
 8011d04:	68c2      	ldr	r2, [r0, #12]
 8011d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d08:	4680      	mov	r8, r0
 8011d0a:	bb0a      	cbnz	r2, 8011d50 <_dtoa_r+0x9a0>
 8011d0c:	4601      	mov	r1, r0
 8011d0e:	4628      	mov	r0, r5
 8011d10:	f000 fb68 	bl	80123e4 <__mcmp>
 8011d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d16:	4602      	mov	r2, r0
 8011d18:	4641      	mov	r1, r8
 8011d1a:	4630      	mov	r0, r6
 8011d1c:	920e      	str	r2, [sp, #56]	; 0x38
 8011d1e:	930a      	str	r3, [sp, #40]	; 0x28
 8011d20:	f000 f922 	bl	8011f68 <_Bfree>
 8011d24:	9b07      	ldr	r3, [sp, #28]
 8011d26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011d28:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8011d2c:	ea43 0102 	orr.w	r1, r3, r2
 8011d30:	9b08      	ldr	r3, [sp, #32]
 8011d32:	430b      	orrs	r3, r1
 8011d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d36:	d10d      	bne.n	8011d54 <_dtoa_r+0x9a4>
 8011d38:	2b39      	cmp	r3, #57	; 0x39
 8011d3a:	d029      	beq.n	8011d90 <_dtoa_r+0x9e0>
 8011d3c:	f1ba 0f00 	cmp.w	sl, #0
 8011d40:	dd01      	ble.n	8011d46 <_dtoa_r+0x996>
 8011d42:	9b06      	ldr	r3, [sp, #24]
 8011d44:	3331      	adds	r3, #49	; 0x31
 8011d46:	9a02      	ldr	r2, [sp, #8]
 8011d48:	7013      	strb	r3, [r2, #0]
 8011d4a:	e774      	b.n	8011c36 <_dtoa_r+0x886>
 8011d4c:	4638      	mov	r0, r7
 8011d4e:	e7b8      	b.n	8011cc2 <_dtoa_r+0x912>
 8011d50:	2201      	movs	r2, #1
 8011d52:	e7e1      	b.n	8011d18 <_dtoa_r+0x968>
 8011d54:	f1ba 0f00 	cmp.w	sl, #0
 8011d58:	db06      	blt.n	8011d68 <_dtoa_r+0x9b8>
 8011d5a:	9907      	ldr	r1, [sp, #28]
 8011d5c:	ea41 0a0a 	orr.w	sl, r1, sl
 8011d60:	9908      	ldr	r1, [sp, #32]
 8011d62:	ea5a 0101 	orrs.w	r1, sl, r1
 8011d66:	d120      	bne.n	8011daa <_dtoa_r+0x9fa>
 8011d68:	2a00      	cmp	r2, #0
 8011d6a:	ddec      	ble.n	8011d46 <_dtoa_r+0x996>
 8011d6c:	4629      	mov	r1, r5
 8011d6e:	2201      	movs	r2, #1
 8011d70:	4630      	mov	r0, r6
 8011d72:	9305      	str	r3, [sp, #20]
 8011d74:	f000 faca 	bl	801230c <__lshift>
 8011d78:	4621      	mov	r1, r4
 8011d7a:	4605      	mov	r5, r0
 8011d7c:	f000 fb32 	bl	80123e4 <__mcmp>
 8011d80:	2800      	cmp	r0, #0
 8011d82:	9b05      	ldr	r3, [sp, #20]
 8011d84:	dc02      	bgt.n	8011d8c <_dtoa_r+0x9dc>
 8011d86:	d1de      	bne.n	8011d46 <_dtoa_r+0x996>
 8011d88:	07da      	lsls	r2, r3, #31
 8011d8a:	d5dc      	bpl.n	8011d46 <_dtoa_r+0x996>
 8011d8c:	2b39      	cmp	r3, #57	; 0x39
 8011d8e:	d1d8      	bne.n	8011d42 <_dtoa_r+0x992>
 8011d90:	9a02      	ldr	r2, [sp, #8]
 8011d92:	2339      	movs	r3, #57	; 0x39
 8011d94:	7013      	strb	r3, [r2, #0]
 8011d96:	4643      	mov	r3, r8
 8011d98:	4698      	mov	r8, r3
 8011d9a:	3b01      	subs	r3, #1
 8011d9c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8011da0:	2a39      	cmp	r2, #57	; 0x39
 8011da2:	d051      	beq.n	8011e48 <_dtoa_r+0xa98>
 8011da4:	3201      	adds	r2, #1
 8011da6:	701a      	strb	r2, [r3, #0]
 8011da8:	e745      	b.n	8011c36 <_dtoa_r+0x886>
 8011daa:	2a00      	cmp	r2, #0
 8011dac:	dd03      	ble.n	8011db6 <_dtoa_r+0xa06>
 8011dae:	2b39      	cmp	r3, #57	; 0x39
 8011db0:	d0ee      	beq.n	8011d90 <_dtoa_r+0x9e0>
 8011db2:	3301      	adds	r3, #1
 8011db4:	e7c7      	b.n	8011d46 <_dtoa_r+0x996>
 8011db6:	9a05      	ldr	r2, [sp, #20]
 8011db8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011dba:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011dbe:	428a      	cmp	r2, r1
 8011dc0:	d02b      	beq.n	8011e1a <_dtoa_r+0xa6a>
 8011dc2:	4629      	mov	r1, r5
 8011dc4:	2300      	movs	r3, #0
 8011dc6:	220a      	movs	r2, #10
 8011dc8:	4630      	mov	r0, r6
 8011dca:	f000 f8ef 	bl	8011fac <__multadd>
 8011dce:	45b9      	cmp	r9, r7
 8011dd0:	4605      	mov	r5, r0
 8011dd2:	f04f 0300 	mov.w	r3, #0
 8011dd6:	f04f 020a 	mov.w	r2, #10
 8011dda:	4649      	mov	r1, r9
 8011ddc:	4630      	mov	r0, r6
 8011dde:	d107      	bne.n	8011df0 <_dtoa_r+0xa40>
 8011de0:	f000 f8e4 	bl	8011fac <__multadd>
 8011de4:	4681      	mov	r9, r0
 8011de6:	4607      	mov	r7, r0
 8011de8:	9b05      	ldr	r3, [sp, #20]
 8011dea:	3301      	adds	r3, #1
 8011dec:	9305      	str	r3, [sp, #20]
 8011dee:	e774      	b.n	8011cda <_dtoa_r+0x92a>
 8011df0:	f000 f8dc 	bl	8011fac <__multadd>
 8011df4:	4639      	mov	r1, r7
 8011df6:	4681      	mov	r9, r0
 8011df8:	2300      	movs	r3, #0
 8011dfa:	220a      	movs	r2, #10
 8011dfc:	4630      	mov	r0, r6
 8011dfe:	f000 f8d5 	bl	8011fac <__multadd>
 8011e02:	4607      	mov	r7, r0
 8011e04:	e7f0      	b.n	8011de8 <_dtoa_r+0xa38>
 8011e06:	f1ba 0f00 	cmp.w	sl, #0
 8011e0a:	9a00      	ldr	r2, [sp, #0]
 8011e0c:	bfcc      	ite	gt
 8011e0e:	46d0      	movgt	r8, sl
 8011e10:	f04f 0801 	movle.w	r8, #1
 8011e14:	4490      	add	r8, r2
 8011e16:	f04f 0900 	mov.w	r9, #0
 8011e1a:	4629      	mov	r1, r5
 8011e1c:	2201      	movs	r2, #1
 8011e1e:	4630      	mov	r0, r6
 8011e20:	9302      	str	r3, [sp, #8]
 8011e22:	f000 fa73 	bl	801230c <__lshift>
 8011e26:	4621      	mov	r1, r4
 8011e28:	4605      	mov	r5, r0
 8011e2a:	f000 fadb 	bl	80123e4 <__mcmp>
 8011e2e:	2800      	cmp	r0, #0
 8011e30:	dcb1      	bgt.n	8011d96 <_dtoa_r+0x9e6>
 8011e32:	d102      	bne.n	8011e3a <_dtoa_r+0xa8a>
 8011e34:	9b02      	ldr	r3, [sp, #8]
 8011e36:	07db      	lsls	r3, r3, #31
 8011e38:	d4ad      	bmi.n	8011d96 <_dtoa_r+0x9e6>
 8011e3a:	4643      	mov	r3, r8
 8011e3c:	4698      	mov	r8, r3
 8011e3e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011e42:	2a30      	cmp	r2, #48	; 0x30
 8011e44:	d0fa      	beq.n	8011e3c <_dtoa_r+0xa8c>
 8011e46:	e6f6      	b.n	8011c36 <_dtoa_r+0x886>
 8011e48:	9a00      	ldr	r2, [sp, #0]
 8011e4a:	429a      	cmp	r2, r3
 8011e4c:	d1a4      	bne.n	8011d98 <_dtoa_r+0x9e8>
 8011e4e:	f10b 0b01 	add.w	fp, fp, #1
 8011e52:	2331      	movs	r3, #49	; 0x31
 8011e54:	e778      	b.n	8011d48 <_dtoa_r+0x998>
 8011e56:	4b15      	ldr	r3, [pc, #84]	; (8011eac <_dtoa_r+0xafc>)
 8011e58:	f7ff bb12 	b.w	8011480 <_dtoa_r+0xd0>
 8011e5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	f47f aaee 	bne.w	8011440 <_dtoa_r+0x90>
 8011e64:	4b12      	ldr	r3, [pc, #72]	; (8011eb0 <_dtoa_r+0xb00>)
 8011e66:	f7ff bb0b 	b.w	8011480 <_dtoa_r+0xd0>
 8011e6a:	f1ba 0f00 	cmp.w	sl, #0
 8011e6e:	dc03      	bgt.n	8011e78 <_dtoa_r+0xac8>
 8011e70:	9b07      	ldr	r3, [sp, #28]
 8011e72:	2b02      	cmp	r3, #2
 8011e74:	f73f aec7 	bgt.w	8011c06 <_dtoa_r+0x856>
 8011e78:	f8dd 8000 	ldr.w	r8, [sp]
 8011e7c:	4621      	mov	r1, r4
 8011e7e:	4628      	mov	r0, r5
 8011e80:	f7ff fa08 	bl	8011294 <quorem>
 8011e84:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011e88:	f808 3b01 	strb.w	r3, [r8], #1
 8011e8c:	9a00      	ldr	r2, [sp, #0]
 8011e8e:	eba8 0202 	sub.w	r2, r8, r2
 8011e92:	4592      	cmp	sl, r2
 8011e94:	ddb7      	ble.n	8011e06 <_dtoa_r+0xa56>
 8011e96:	4629      	mov	r1, r5
 8011e98:	2300      	movs	r3, #0
 8011e9a:	220a      	movs	r2, #10
 8011e9c:	4630      	mov	r0, r6
 8011e9e:	f000 f885 	bl	8011fac <__multadd>
 8011ea2:	4605      	mov	r5, r0
 8011ea4:	e7ea      	b.n	8011e7c <_dtoa_r+0xacc>
 8011ea6:	bf00      	nop
 8011ea8:	08014f9b 	.word	0x08014f9b
 8011eac:	08014ef4 	.word	0x08014ef4
 8011eb0:	08014f18 	.word	0x08014f18

08011eb4 <_localeconv_r>:
 8011eb4:	4800      	ldr	r0, [pc, #0]	; (8011eb8 <_localeconv_r+0x4>)
 8011eb6:	4770      	bx	lr
 8011eb8:	24000178 	.word	0x24000178

08011ebc <malloc>:
 8011ebc:	4b02      	ldr	r3, [pc, #8]	; (8011ec8 <malloc+0xc>)
 8011ebe:	4601      	mov	r1, r0
 8011ec0:	6818      	ldr	r0, [r3, #0]
 8011ec2:	f000 bbef 	b.w	80126a4 <_malloc_r>
 8011ec6:	bf00      	nop
 8011ec8:	24000024 	.word	0x24000024

08011ecc <memcpy>:
 8011ecc:	440a      	add	r2, r1
 8011ece:	4291      	cmp	r1, r2
 8011ed0:	f100 33ff 	add.w	r3, r0, #4294967295
 8011ed4:	d100      	bne.n	8011ed8 <memcpy+0xc>
 8011ed6:	4770      	bx	lr
 8011ed8:	b510      	push	{r4, lr}
 8011eda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011ede:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011ee2:	4291      	cmp	r1, r2
 8011ee4:	d1f9      	bne.n	8011eda <memcpy+0xe>
 8011ee6:	bd10      	pop	{r4, pc}

08011ee8 <_Balloc>:
 8011ee8:	b570      	push	{r4, r5, r6, lr}
 8011eea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011eec:	4604      	mov	r4, r0
 8011eee:	460d      	mov	r5, r1
 8011ef0:	b976      	cbnz	r6, 8011f10 <_Balloc+0x28>
 8011ef2:	2010      	movs	r0, #16
 8011ef4:	f7ff ffe2 	bl	8011ebc <malloc>
 8011ef8:	4602      	mov	r2, r0
 8011efa:	6260      	str	r0, [r4, #36]	; 0x24
 8011efc:	b920      	cbnz	r0, 8011f08 <_Balloc+0x20>
 8011efe:	4b18      	ldr	r3, [pc, #96]	; (8011f60 <_Balloc+0x78>)
 8011f00:	4818      	ldr	r0, [pc, #96]	; (8011f64 <_Balloc+0x7c>)
 8011f02:	2166      	movs	r1, #102	; 0x66
 8011f04:	f000 fc38 	bl	8012778 <__assert_func>
 8011f08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011f0c:	6006      	str	r6, [r0, #0]
 8011f0e:	60c6      	str	r6, [r0, #12]
 8011f10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011f12:	68f3      	ldr	r3, [r6, #12]
 8011f14:	b183      	cbz	r3, 8011f38 <_Balloc+0x50>
 8011f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011f18:	68db      	ldr	r3, [r3, #12]
 8011f1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011f1e:	b9b8      	cbnz	r0, 8011f50 <_Balloc+0x68>
 8011f20:	2101      	movs	r1, #1
 8011f22:	fa01 f605 	lsl.w	r6, r1, r5
 8011f26:	1d72      	adds	r2, r6, #5
 8011f28:	0092      	lsls	r2, r2, #2
 8011f2a:	4620      	mov	r0, r4
 8011f2c:	f000 fb5a 	bl	80125e4 <_calloc_r>
 8011f30:	b160      	cbz	r0, 8011f4c <_Balloc+0x64>
 8011f32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011f36:	e00e      	b.n	8011f56 <_Balloc+0x6e>
 8011f38:	2221      	movs	r2, #33	; 0x21
 8011f3a:	2104      	movs	r1, #4
 8011f3c:	4620      	mov	r0, r4
 8011f3e:	f000 fb51 	bl	80125e4 <_calloc_r>
 8011f42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011f44:	60f0      	str	r0, [r6, #12]
 8011f46:	68db      	ldr	r3, [r3, #12]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d1e4      	bne.n	8011f16 <_Balloc+0x2e>
 8011f4c:	2000      	movs	r0, #0
 8011f4e:	bd70      	pop	{r4, r5, r6, pc}
 8011f50:	6802      	ldr	r2, [r0, #0]
 8011f52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011f56:	2300      	movs	r3, #0
 8011f58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011f5c:	e7f7      	b.n	8011f4e <_Balloc+0x66>
 8011f5e:	bf00      	nop
 8011f60:	08014f25 	.word	0x08014f25
 8011f64:	08014fac 	.word	0x08014fac

08011f68 <_Bfree>:
 8011f68:	b570      	push	{r4, r5, r6, lr}
 8011f6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011f6c:	4605      	mov	r5, r0
 8011f6e:	460c      	mov	r4, r1
 8011f70:	b976      	cbnz	r6, 8011f90 <_Bfree+0x28>
 8011f72:	2010      	movs	r0, #16
 8011f74:	f7ff ffa2 	bl	8011ebc <malloc>
 8011f78:	4602      	mov	r2, r0
 8011f7a:	6268      	str	r0, [r5, #36]	; 0x24
 8011f7c:	b920      	cbnz	r0, 8011f88 <_Bfree+0x20>
 8011f7e:	4b09      	ldr	r3, [pc, #36]	; (8011fa4 <_Bfree+0x3c>)
 8011f80:	4809      	ldr	r0, [pc, #36]	; (8011fa8 <_Bfree+0x40>)
 8011f82:	218a      	movs	r1, #138	; 0x8a
 8011f84:	f000 fbf8 	bl	8012778 <__assert_func>
 8011f88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011f8c:	6006      	str	r6, [r0, #0]
 8011f8e:	60c6      	str	r6, [r0, #12]
 8011f90:	b13c      	cbz	r4, 8011fa2 <_Bfree+0x3a>
 8011f92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011f94:	6862      	ldr	r2, [r4, #4]
 8011f96:	68db      	ldr	r3, [r3, #12]
 8011f98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011f9c:	6021      	str	r1, [r4, #0]
 8011f9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011fa2:	bd70      	pop	{r4, r5, r6, pc}
 8011fa4:	08014f25 	.word	0x08014f25
 8011fa8:	08014fac 	.word	0x08014fac

08011fac <__multadd>:
 8011fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fb0:	690e      	ldr	r6, [r1, #16]
 8011fb2:	4607      	mov	r7, r0
 8011fb4:	4698      	mov	r8, r3
 8011fb6:	460c      	mov	r4, r1
 8011fb8:	f101 0014 	add.w	r0, r1, #20
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	6805      	ldr	r5, [r0, #0]
 8011fc0:	b2a9      	uxth	r1, r5
 8011fc2:	fb02 8101 	mla	r1, r2, r1, r8
 8011fc6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8011fca:	0c2d      	lsrs	r5, r5, #16
 8011fcc:	fb02 c505 	mla	r5, r2, r5, ip
 8011fd0:	b289      	uxth	r1, r1
 8011fd2:	3301      	adds	r3, #1
 8011fd4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8011fd8:	429e      	cmp	r6, r3
 8011fda:	f840 1b04 	str.w	r1, [r0], #4
 8011fde:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8011fe2:	dcec      	bgt.n	8011fbe <__multadd+0x12>
 8011fe4:	f1b8 0f00 	cmp.w	r8, #0
 8011fe8:	d022      	beq.n	8012030 <__multadd+0x84>
 8011fea:	68a3      	ldr	r3, [r4, #8]
 8011fec:	42b3      	cmp	r3, r6
 8011fee:	dc19      	bgt.n	8012024 <__multadd+0x78>
 8011ff0:	6861      	ldr	r1, [r4, #4]
 8011ff2:	4638      	mov	r0, r7
 8011ff4:	3101      	adds	r1, #1
 8011ff6:	f7ff ff77 	bl	8011ee8 <_Balloc>
 8011ffa:	4605      	mov	r5, r0
 8011ffc:	b928      	cbnz	r0, 801200a <__multadd+0x5e>
 8011ffe:	4602      	mov	r2, r0
 8012000:	4b0d      	ldr	r3, [pc, #52]	; (8012038 <__multadd+0x8c>)
 8012002:	480e      	ldr	r0, [pc, #56]	; (801203c <__multadd+0x90>)
 8012004:	21b5      	movs	r1, #181	; 0xb5
 8012006:	f000 fbb7 	bl	8012778 <__assert_func>
 801200a:	6922      	ldr	r2, [r4, #16]
 801200c:	3202      	adds	r2, #2
 801200e:	f104 010c 	add.w	r1, r4, #12
 8012012:	0092      	lsls	r2, r2, #2
 8012014:	300c      	adds	r0, #12
 8012016:	f7ff ff59 	bl	8011ecc <memcpy>
 801201a:	4621      	mov	r1, r4
 801201c:	4638      	mov	r0, r7
 801201e:	f7ff ffa3 	bl	8011f68 <_Bfree>
 8012022:	462c      	mov	r4, r5
 8012024:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8012028:	3601      	adds	r6, #1
 801202a:	f8c3 8014 	str.w	r8, [r3, #20]
 801202e:	6126      	str	r6, [r4, #16]
 8012030:	4620      	mov	r0, r4
 8012032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012036:	bf00      	nop
 8012038:	08014f9b 	.word	0x08014f9b
 801203c:	08014fac 	.word	0x08014fac

08012040 <__hi0bits>:
 8012040:	0c03      	lsrs	r3, r0, #16
 8012042:	041b      	lsls	r3, r3, #16
 8012044:	b9d3      	cbnz	r3, 801207c <__hi0bits+0x3c>
 8012046:	0400      	lsls	r0, r0, #16
 8012048:	2310      	movs	r3, #16
 801204a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801204e:	bf04      	itt	eq
 8012050:	0200      	lsleq	r0, r0, #8
 8012052:	3308      	addeq	r3, #8
 8012054:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012058:	bf04      	itt	eq
 801205a:	0100      	lsleq	r0, r0, #4
 801205c:	3304      	addeq	r3, #4
 801205e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012062:	bf04      	itt	eq
 8012064:	0080      	lsleq	r0, r0, #2
 8012066:	3302      	addeq	r3, #2
 8012068:	2800      	cmp	r0, #0
 801206a:	db05      	blt.n	8012078 <__hi0bits+0x38>
 801206c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012070:	f103 0301 	add.w	r3, r3, #1
 8012074:	bf08      	it	eq
 8012076:	2320      	moveq	r3, #32
 8012078:	4618      	mov	r0, r3
 801207a:	4770      	bx	lr
 801207c:	2300      	movs	r3, #0
 801207e:	e7e4      	b.n	801204a <__hi0bits+0xa>

08012080 <__lo0bits>:
 8012080:	6803      	ldr	r3, [r0, #0]
 8012082:	f013 0207 	ands.w	r2, r3, #7
 8012086:	4601      	mov	r1, r0
 8012088:	d00b      	beq.n	80120a2 <__lo0bits+0x22>
 801208a:	07da      	lsls	r2, r3, #31
 801208c:	d424      	bmi.n	80120d8 <__lo0bits+0x58>
 801208e:	0798      	lsls	r0, r3, #30
 8012090:	bf49      	itett	mi
 8012092:	085b      	lsrmi	r3, r3, #1
 8012094:	089b      	lsrpl	r3, r3, #2
 8012096:	2001      	movmi	r0, #1
 8012098:	600b      	strmi	r3, [r1, #0]
 801209a:	bf5c      	itt	pl
 801209c:	600b      	strpl	r3, [r1, #0]
 801209e:	2002      	movpl	r0, #2
 80120a0:	4770      	bx	lr
 80120a2:	b298      	uxth	r0, r3
 80120a4:	b9b0      	cbnz	r0, 80120d4 <__lo0bits+0x54>
 80120a6:	0c1b      	lsrs	r3, r3, #16
 80120a8:	2010      	movs	r0, #16
 80120aa:	f013 0fff 	tst.w	r3, #255	; 0xff
 80120ae:	bf04      	itt	eq
 80120b0:	0a1b      	lsreq	r3, r3, #8
 80120b2:	3008      	addeq	r0, #8
 80120b4:	071a      	lsls	r2, r3, #28
 80120b6:	bf04      	itt	eq
 80120b8:	091b      	lsreq	r3, r3, #4
 80120ba:	3004      	addeq	r0, #4
 80120bc:	079a      	lsls	r2, r3, #30
 80120be:	bf04      	itt	eq
 80120c0:	089b      	lsreq	r3, r3, #2
 80120c2:	3002      	addeq	r0, #2
 80120c4:	07da      	lsls	r2, r3, #31
 80120c6:	d403      	bmi.n	80120d0 <__lo0bits+0x50>
 80120c8:	085b      	lsrs	r3, r3, #1
 80120ca:	f100 0001 	add.w	r0, r0, #1
 80120ce:	d005      	beq.n	80120dc <__lo0bits+0x5c>
 80120d0:	600b      	str	r3, [r1, #0]
 80120d2:	4770      	bx	lr
 80120d4:	4610      	mov	r0, r2
 80120d6:	e7e8      	b.n	80120aa <__lo0bits+0x2a>
 80120d8:	2000      	movs	r0, #0
 80120da:	4770      	bx	lr
 80120dc:	2020      	movs	r0, #32
 80120de:	4770      	bx	lr

080120e0 <__i2b>:
 80120e0:	b510      	push	{r4, lr}
 80120e2:	460c      	mov	r4, r1
 80120e4:	2101      	movs	r1, #1
 80120e6:	f7ff feff 	bl	8011ee8 <_Balloc>
 80120ea:	4602      	mov	r2, r0
 80120ec:	b928      	cbnz	r0, 80120fa <__i2b+0x1a>
 80120ee:	4b05      	ldr	r3, [pc, #20]	; (8012104 <__i2b+0x24>)
 80120f0:	4805      	ldr	r0, [pc, #20]	; (8012108 <__i2b+0x28>)
 80120f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80120f6:	f000 fb3f 	bl	8012778 <__assert_func>
 80120fa:	2301      	movs	r3, #1
 80120fc:	6144      	str	r4, [r0, #20]
 80120fe:	6103      	str	r3, [r0, #16]
 8012100:	bd10      	pop	{r4, pc}
 8012102:	bf00      	nop
 8012104:	08014f9b 	.word	0x08014f9b
 8012108:	08014fac 	.word	0x08014fac

0801210c <__multiply>:
 801210c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012110:	4614      	mov	r4, r2
 8012112:	690a      	ldr	r2, [r1, #16]
 8012114:	6923      	ldr	r3, [r4, #16]
 8012116:	429a      	cmp	r2, r3
 8012118:	bfb8      	it	lt
 801211a:	460b      	movlt	r3, r1
 801211c:	460d      	mov	r5, r1
 801211e:	bfbc      	itt	lt
 8012120:	4625      	movlt	r5, r4
 8012122:	461c      	movlt	r4, r3
 8012124:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8012128:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801212c:	68ab      	ldr	r3, [r5, #8]
 801212e:	6869      	ldr	r1, [r5, #4]
 8012130:	eb0a 0709 	add.w	r7, sl, r9
 8012134:	42bb      	cmp	r3, r7
 8012136:	b085      	sub	sp, #20
 8012138:	bfb8      	it	lt
 801213a:	3101      	addlt	r1, #1
 801213c:	f7ff fed4 	bl	8011ee8 <_Balloc>
 8012140:	b930      	cbnz	r0, 8012150 <__multiply+0x44>
 8012142:	4602      	mov	r2, r0
 8012144:	4b42      	ldr	r3, [pc, #264]	; (8012250 <__multiply+0x144>)
 8012146:	4843      	ldr	r0, [pc, #268]	; (8012254 <__multiply+0x148>)
 8012148:	f240 115d 	movw	r1, #349	; 0x15d
 801214c:	f000 fb14 	bl	8012778 <__assert_func>
 8012150:	f100 0614 	add.w	r6, r0, #20
 8012154:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8012158:	4633      	mov	r3, r6
 801215a:	2200      	movs	r2, #0
 801215c:	4543      	cmp	r3, r8
 801215e:	d31e      	bcc.n	801219e <__multiply+0x92>
 8012160:	f105 0c14 	add.w	ip, r5, #20
 8012164:	f104 0314 	add.w	r3, r4, #20
 8012168:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801216c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8012170:	9202      	str	r2, [sp, #8]
 8012172:	ebac 0205 	sub.w	r2, ip, r5
 8012176:	3a15      	subs	r2, #21
 8012178:	f022 0203 	bic.w	r2, r2, #3
 801217c:	3204      	adds	r2, #4
 801217e:	f105 0115 	add.w	r1, r5, #21
 8012182:	458c      	cmp	ip, r1
 8012184:	bf38      	it	cc
 8012186:	2204      	movcc	r2, #4
 8012188:	9201      	str	r2, [sp, #4]
 801218a:	9a02      	ldr	r2, [sp, #8]
 801218c:	9303      	str	r3, [sp, #12]
 801218e:	429a      	cmp	r2, r3
 8012190:	d808      	bhi.n	80121a4 <__multiply+0x98>
 8012192:	2f00      	cmp	r7, #0
 8012194:	dc55      	bgt.n	8012242 <__multiply+0x136>
 8012196:	6107      	str	r7, [r0, #16]
 8012198:	b005      	add	sp, #20
 801219a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801219e:	f843 2b04 	str.w	r2, [r3], #4
 80121a2:	e7db      	b.n	801215c <__multiply+0x50>
 80121a4:	f8b3 a000 	ldrh.w	sl, [r3]
 80121a8:	f1ba 0f00 	cmp.w	sl, #0
 80121ac:	d020      	beq.n	80121f0 <__multiply+0xe4>
 80121ae:	f105 0e14 	add.w	lr, r5, #20
 80121b2:	46b1      	mov	r9, r6
 80121b4:	2200      	movs	r2, #0
 80121b6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80121ba:	f8d9 b000 	ldr.w	fp, [r9]
 80121be:	b2a1      	uxth	r1, r4
 80121c0:	fa1f fb8b 	uxth.w	fp, fp
 80121c4:	fb0a b101 	mla	r1, sl, r1, fp
 80121c8:	4411      	add	r1, r2
 80121ca:	f8d9 2000 	ldr.w	r2, [r9]
 80121ce:	0c24      	lsrs	r4, r4, #16
 80121d0:	0c12      	lsrs	r2, r2, #16
 80121d2:	fb0a 2404 	mla	r4, sl, r4, r2
 80121d6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80121da:	b289      	uxth	r1, r1
 80121dc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80121e0:	45f4      	cmp	ip, lr
 80121e2:	f849 1b04 	str.w	r1, [r9], #4
 80121e6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80121ea:	d8e4      	bhi.n	80121b6 <__multiply+0xaa>
 80121ec:	9901      	ldr	r1, [sp, #4]
 80121ee:	5072      	str	r2, [r6, r1]
 80121f0:	9a03      	ldr	r2, [sp, #12]
 80121f2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80121f6:	3304      	adds	r3, #4
 80121f8:	f1b9 0f00 	cmp.w	r9, #0
 80121fc:	d01f      	beq.n	801223e <__multiply+0x132>
 80121fe:	6834      	ldr	r4, [r6, #0]
 8012200:	f105 0114 	add.w	r1, r5, #20
 8012204:	46b6      	mov	lr, r6
 8012206:	f04f 0a00 	mov.w	sl, #0
 801220a:	880a      	ldrh	r2, [r1, #0]
 801220c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8012210:	fb09 b202 	mla	r2, r9, r2, fp
 8012214:	4492      	add	sl, r2
 8012216:	b2a4      	uxth	r4, r4
 8012218:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801221c:	f84e 4b04 	str.w	r4, [lr], #4
 8012220:	f851 4b04 	ldr.w	r4, [r1], #4
 8012224:	f8be 2000 	ldrh.w	r2, [lr]
 8012228:	0c24      	lsrs	r4, r4, #16
 801222a:	fb09 2404 	mla	r4, r9, r4, r2
 801222e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8012232:	458c      	cmp	ip, r1
 8012234:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012238:	d8e7      	bhi.n	801220a <__multiply+0xfe>
 801223a:	9a01      	ldr	r2, [sp, #4]
 801223c:	50b4      	str	r4, [r6, r2]
 801223e:	3604      	adds	r6, #4
 8012240:	e7a3      	b.n	801218a <__multiply+0x7e>
 8012242:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012246:	2b00      	cmp	r3, #0
 8012248:	d1a5      	bne.n	8012196 <__multiply+0x8a>
 801224a:	3f01      	subs	r7, #1
 801224c:	e7a1      	b.n	8012192 <__multiply+0x86>
 801224e:	bf00      	nop
 8012250:	08014f9b 	.word	0x08014f9b
 8012254:	08014fac 	.word	0x08014fac

08012258 <__pow5mult>:
 8012258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801225c:	4615      	mov	r5, r2
 801225e:	f012 0203 	ands.w	r2, r2, #3
 8012262:	4606      	mov	r6, r0
 8012264:	460f      	mov	r7, r1
 8012266:	d007      	beq.n	8012278 <__pow5mult+0x20>
 8012268:	4c25      	ldr	r4, [pc, #148]	; (8012300 <__pow5mult+0xa8>)
 801226a:	3a01      	subs	r2, #1
 801226c:	2300      	movs	r3, #0
 801226e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012272:	f7ff fe9b 	bl	8011fac <__multadd>
 8012276:	4607      	mov	r7, r0
 8012278:	10ad      	asrs	r5, r5, #2
 801227a:	d03d      	beq.n	80122f8 <__pow5mult+0xa0>
 801227c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801227e:	b97c      	cbnz	r4, 80122a0 <__pow5mult+0x48>
 8012280:	2010      	movs	r0, #16
 8012282:	f7ff fe1b 	bl	8011ebc <malloc>
 8012286:	4602      	mov	r2, r0
 8012288:	6270      	str	r0, [r6, #36]	; 0x24
 801228a:	b928      	cbnz	r0, 8012298 <__pow5mult+0x40>
 801228c:	4b1d      	ldr	r3, [pc, #116]	; (8012304 <__pow5mult+0xac>)
 801228e:	481e      	ldr	r0, [pc, #120]	; (8012308 <__pow5mult+0xb0>)
 8012290:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012294:	f000 fa70 	bl	8012778 <__assert_func>
 8012298:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801229c:	6004      	str	r4, [r0, #0]
 801229e:	60c4      	str	r4, [r0, #12]
 80122a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80122a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80122a8:	b94c      	cbnz	r4, 80122be <__pow5mult+0x66>
 80122aa:	f240 2171 	movw	r1, #625	; 0x271
 80122ae:	4630      	mov	r0, r6
 80122b0:	f7ff ff16 	bl	80120e0 <__i2b>
 80122b4:	2300      	movs	r3, #0
 80122b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80122ba:	4604      	mov	r4, r0
 80122bc:	6003      	str	r3, [r0, #0]
 80122be:	f04f 0900 	mov.w	r9, #0
 80122c2:	07eb      	lsls	r3, r5, #31
 80122c4:	d50a      	bpl.n	80122dc <__pow5mult+0x84>
 80122c6:	4639      	mov	r1, r7
 80122c8:	4622      	mov	r2, r4
 80122ca:	4630      	mov	r0, r6
 80122cc:	f7ff ff1e 	bl	801210c <__multiply>
 80122d0:	4639      	mov	r1, r7
 80122d2:	4680      	mov	r8, r0
 80122d4:	4630      	mov	r0, r6
 80122d6:	f7ff fe47 	bl	8011f68 <_Bfree>
 80122da:	4647      	mov	r7, r8
 80122dc:	106d      	asrs	r5, r5, #1
 80122de:	d00b      	beq.n	80122f8 <__pow5mult+0xa0>
 80122e0:	6820      	ldr	r0, [r4, #0]
 80122e2:	b938      	cbnz	r0, 80122f4 <__pow5mult+0x9c>
 80122e4:	4622      	mov	r2, r4
 80122e6:	4621      	mov	r1, r4
 80122e8:	4630      	mov	r0, r6
 80122ea:	f7ff ff0f 	bl	801210c <__multiply>
 80122ee:	6020      	str	r0, [r4, #0]
 80122f0:	f8c0 9000 	str.w	r9, [r0]
 80122f4:	4604      	mov	r4, r0
 80122f6:	e7e4      	b.n	80122c2 <__pow5mult+0x6a>
 80122f8:	4638      	mov	r0, r7
 80122fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122fe:	bf00      	nop
 8012300:	08015100 	.word	0x08015100
 8012304:	08014f25 	.word	0x08014f25
 8012308:	08014fac 	.word	0x08014fac

0801230c <__lshift>:
 801230c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012310:	460c      	mov	r4, r1
 8012312:	6849      	ldr	r1, [r1, #4]
 8012314:	6923      	ldr	r3, [r4, #16]
 8012316:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801231a:	68a3      	ldr	r3, [r4, #8]
 801231c:	4607      	mov	r7, r0
 801231e:	4691      	mov	r9, r2
 8012320:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012324:	f108 0601 	add.w	r6, r8, #1
 8012328:	42b3      	cmp	r3, r6
 801232a:	db0b      	blt.n	8012344 <__lshift+0x38>
 801232c:	4638      	mov	r0, r7
 801232e:	f7ff fddb 	bl	8011ee8 <_Balloc>
 8012332:	4605      	mov	r5, r0
 8012334:	b948      	cbnz	r0, 801234a <__lshift+0x3e>
 8012336:	4602      	mov	r2, r0
 8012338:	4b28      	ldr	r3, [pc, #160]	; (80123dc <__lshift+0xd0>)
 801233a:	4829      	ldr	r0, [pc, #164]	; (80123e0 <__lshift+0xd4>)
 801233c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012340:	f000 fa1a 	bl	8012778 <__assert_func>
 8012344:	3101      	adds	r1, #1
 8012346:	005b      	lsls	r3, r3, #1
 8012348:	e7ee      	b.n	8012328 <__lshift+0x1c>
 801234a:	2300      	movs	r3, #0
 801234c:	f100 0114 	add.w	r1, r0, #20
 8012350:	f100 0210 	add.w	r2, r0, #16
 8012354:	4618      	mov	r0, r3
 8012356:	4553      	cmp	r3, sl
 8012358:	db33      	blt.n	80123c2 <__lshift+0xb6>
 801235a:	6920      	ldr	r0, [r4, #16]
 801235c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012360:	f104 0314 	add.w	r3, r4, #20
 8012364:	f019 091f 	ands.w	r9, r9, #31
 8012368:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801236c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012370:	d02b      	beq.n	80123ca <__lshift+0xbe>
 8012372:	f1c9 0e20 	rsb	lr, r9, #32
 8012376:	468a      	mov	sl, r1
 8012378:	2200      	movs	r2, #0
 801237a:	6818      	ldr	r0, [r3, #0]
 801237c:	fa00 f009 	lsl.w	r0, r0, r9
 8012380:	4302      	orrs	r2, r0
 8012382:	f84a 2b04 	str.w	r2, [sl], #4
 8012386:	f853 2b04 	ldr.w	r2, [r3], #4
 801238a:	459c      	cmp	ip, r3
 801238c:	fa22 f20e 	lsr.w	r2, r2, lr
 8012390:	d8f3      	bhi.n	801237a <__lshift+0x6e>
 8012392:	ebac 0304 	sub.w	r3, ip, r4
 8012396:	3b15      	subs	r3, #21
 8012398:	f023 0303 	bic.w	r3, r3, #3
 801239c:	3304      	adds	r3, #4
 801239e:	f104 0015 	add.w	r0, r4, #21
 80123a2:	4584      	cmp	ip, r0
 80123a4:	bf38      	it	cc
 80123a6:	2304      	movcc	r3, #4
 80123a8:	50ca      	str	r2, [r1, r3]
 80123aa:	b10a      	cbz	r2, 80123b0 <__lshift+0xa4>
 80123ac:	f108 0602 	add.w	r6, r8, #2
 80123b0:	3e01      	subs	r6, #1
 80123b2:	4638      	mov	r0, r7
 80123b4:	612e      	str	r6, [r5, #16]
 80123b6:	4621      	mov	r1, r4
 80123b8:	f7ff fdd6 	bl	8011f68 <_Bfree>
 80123bc:	4628      	mov	r0, r5
 80123be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80123c6:	3301      	adds	r3, #1
 80123c8:	e7c5      	b.n	8012356 <__lshift+0x4a>
 80123ca:	3904      	subs	r1, #4
 80123cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80123d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80123d4:	459c      	cmp	ip, r3
 80123d6:	d8f9      	bhi.n	80123cc <__lshift+0xc0>
 80123d8:	e7ea      	b.n	80123b0 <__lshift+0xa4>
 80123da:	bf00      	nop
 80123dc:	08014f9b 	.word	0x08014f9b
 80123e0:	08014fac 	.word	0x08014fac

080123e4 <__mcmp>:
 80123e4:	b530      	push	{r4, r5, lr}
 80123e6:	6902      	ldr	r2, [r0, #16]
 80123e8:	690c      	ldr	r4, [r1, #16]
 80123ea:	1b12      	subs	r2, r2, r4
 80123ec:	d10e      	bne.n	801240c <__mcmp+0x28>
 80123ee:	f100 0314 	add.w	r3, r0, #20
 80123f2:	3114      	adds	r1, #20
 80123f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80123f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80123fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012400:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012404:	42a5      	cmp	r5, r4
 8012406:	d003      	beq.n	8012410 <__mcmp+0x2c>
 8012408:	d305      	bcc.n	8012416 <__mcmp+0x32>
 801240a:	2201      	movs	r2, #1
 801240c:	4610      	mov	r0, r2
 801240e:	bd30      	pop	{r4, r5, pc}
 8012410:	4283      	cmp	r3, r0
 8012412:	d3f3      	bcc.n	80123fc <__mcmp+0x18>
 8012414:	e7fa      	b.n	801240c <__mcmp+0x28>
 8012416:	f04f 32ff 	mov.w	r2, #4294967295
 801241a:	e7f7      	b.n	801240c <__mcmp+0x28>

0801241c <__mdiff>:
 801241c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012420:	460c      	mov	r4, r1
 8012422:	4606      	mov	r6, r0
 8012424:	4611      	mov	r1, r2
 8012426:	4620      	mov	r0, r4
 8012428:	4617      	mov	r7, r2
 801242a:	f7ff ffdb 	bl	80123e4 <__mcmp>
 801242e:	1e05      	subs	r5, r0, #0
 8012430:	d110      	bne.n	8012454 <__mdiff+0x38>
 8012432:	4629      	mov	r1, r5
 8012434:	4630      	mov	r0, r6
 8012436:	f7ff fd57 	bl	8011ee8 <_Balloc>
 801243a:	b930      	cbnz	r0, 801244a <__mdiff+0x2e>
 801243c:	4b39      	ldr	r3, [pc, #228]	; (8012524 <__mdiff+0x108>)
 801243e:	4602      	mov	r2, r0
 8012440:	f240 2132 	movw	r1, #562	; 0x232
 8012444:	4838      	ldr	r0, [pc, #224]	; (8012528 <__mdiff+0x10c>)
 8012446:	f000 f997 	bl	8012778 <__assert_func>
 801244a:	2301      	movs	r3, #1
 801244c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012450:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012454:	bfa4      	itt	ge
 8012456:	463b      	movge	r3, r7
 8012458:	4627      	movge	r7, r4
 801245a:	4630      	mov	r0, r6
 801245c:	6879      	ldr	r1, [r7, #4]
 801245e:	bfa6      	itte	ge
 8012460:	461c      	movge	r4, r3
 8012462:	2500      	movge	r5, #0
 8012464:	2501      	movlt	r5, #1
 8012466:	f7ff fd3f 	bl	8011ee8 <_Balloc>
 801246a:	b920      	cbnz	r0, 8012476 <__mdiff+0x5a>
 801246c:	4b2d      	ldr	r3, [pc, #180]	; (8012524 <__mdiff+0x108>)
 801246e:	4602      	mov	r2, r0
 8012470:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012474:	e7e6      	b.n	8012444 <__mdiff+0x28>
 8012476:	693e      	ldr	r6, [r7, #16]
 8012478:	60c5      	str	r5, [r0, #12]
 801247a:	6925      	ldr	r5, [r4, #16]
 801247c:	f107 0114 	add.w	r1, r7, #20
 8012480:	f104 0914 	add.w	r9, r4, #20
 8012484:	f100 0e14 	add.w	lr, r0, #20
 8012488:	f107 0210 	add.w	r2, r7, #16
 801248c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8012490:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8012494:	46f2      	mov	sl, lr
 8012496:	2700      	movs	r7, #0
 8012498:	f859 3b04 	ldr.w	r3, [r9], #4
 801249c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80124a0:	fa1f f883 	uxth.w	r8, r3
 80124a4:	fa17 f78b 	uxtah	r7, r7, fp
 80124a8:	0c1b      	lsrs	r3, r3, #16
 80124aa:	eba7 0808 	sub.w	r8, r7, r8
 80124ae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80124b2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80124b6:	fa1f f888 	uxth.w	r8, r8
 80124ba:	141f      	asrs	r7, r3, #16
 80124bc:	454d      	cmp	r5, r9
 80124be:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80124c2:	f84a 3b04 	str.w	r3, [sl], #4
 80124c6:	d8e7      	bhi.n	8012498 <__mdiff+0x7c>
 80124c8:	1b2b      	subs	r3, r5, r4
 80124ca:	3b15      	subs	r3, #21
 80124cc:	f023 0303 	bic.w	r3, r3, #3
 80124d0:	3304      	adds	r3, #4
 80124d2:	3415      	adds	r4, #21
 80124d4:	42a5      	cmp	r5, r4
 80124d6:	bf38      	it	cc
 80124d8:	2304      	movcc	r3, #4
 80124da:	4419      	add	r1, r3
 80124dc:	4473      	add	r3, lr
 80124de:	469e      	mov	lr, r3
 80124e0:	460d      	mov	r5, r1
 80124e2:	4565      	cmp	r5, ip
 80124e4:	d30e      	bcc.n	8012504 <__mdiff+0xe8>
 80124e6:	f10c 0203 	add.w	r2, ip, #3
 80124ea:	1a52      	subs	r2, r2, r1
 80124ec:	f022 0203 	bic.w	r2, r2, #3
 80124f0:	3903      	subs	r1, #3
 80124f2:	458c      	cmp	ip, r1
 80124f4:	bf38      	it	cc
 80124f6:	2200      	movcc	r2, #0
 80124f8:	441a      	add	r2, r3
 80124fa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80124fe:	b17b      	cbz	r3, 8012520 <__mdiff+0x104>
 8012500:	6106      	str	r6, [r0, #16]
 8012502:	e7a5      	b.n	8012450 <__mdiff+0x34>
 8012504:	f855 8b04 	ldr.w	r8, [r5], #4
 8012508:	fa17 f488 	uxtah	r4, r7, r8
 801250c:	1422      	asrs	r2, r4, #16
 801250e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8012512:	b2a4      	uxth	r4, r4
 8012514:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8012518:	f84e 4b04 	str.w	r4, [lr], #4
 801251c:	1417      	asrs	r7, r2, #16
 801251e:	e7e0      	b.n	80124e2 <__mdiff+0xc6>
 8012520:	3e01      	subs	r6, #1
 8012522:	e7ea      	b.n	80124fa <__mdiff+0xde>
 8012524:	08014f9b 	.word	0x08014f9b
 8012528:	08014fac 	.word	0x08014fac

0801252c <__d2b>:
 801252c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012530:	4689      	mov	r9, r1
 8012532:	2101      	movs	r1, #1
 8012534:	ec57 6b10 	vmov	r6, r7, d0
 8012538:	4690      	mov	r8, r2
 801253a:	f7ff fcd5 	bl	8011ee8 <_Balloc>
 801253e:	4604      	mov	r4, r0
 8012540:	b930      	cbnz	r0, 8012550 <__d2b+0x24>
 8012542:	4602      	mov	r2, r0
 8012544:	4b25      	ldr	r3, [pc, #148]	; (80125dc <__d2b+0xb0>)
 8012546:	4826      	ldr	r0, [pc, #152]	; (80125e0 <__d2b+0xb4>)
 8012548:	f240 310a 	movw	r1, #778	; 0x30a
 801254c:	f000 f914 	bl	8012778 <__assert_func>
 8012550:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012554:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012558:	bb35      	cbnz	r5, 80125a8 <__d2b+0x7c>
 801255a:	2e00      	cmp	r6, #0
 801255c:	9301      	str	r3, [sp, #4]
 801255e:	d028      	beq.n	80125b2 <__d2b+0x86>
 8012560:	4668      	mov	r0, sp
 8012562:	9600      	str	r6, [sp, #0]
 8012564:	f7ff fd8c 	bl	8012080 <__lo0bits>
 8012568:	9900      	ldr	r1, [sp, #0]
 801256a:	b300      	cbz	r0, 80125ae <__d2b+0x82>
 801256c:	9a01      	ldr	r2, [sp, #4]
 801256e:	f1c0 0320 	rsb	r3, r0, #32
 8012572:	fa02 f303 	lsl.w	r3, r2, r3
 8012576:	430b      	orrs	r3, r1
 8012578:	40c2      	lsrs	r2, r0
 801257a:	6163      	str	r3, [r4, #20]
 801257c:	9201      	str	r2, [sp, #4]
 801257e:	9b01      	ldr	r3, [sp, #4]
 8012580:	61a3      	str	r3, [r4, #24]
 8012582:	2b00      	cmp	r3, #0
 8012584:	bf14      	ite	ne
 8012586:	2202      	movne	r2, #2
 8012588:	2201      	moveq	r2, #1
 801258a:	6122      	str	r2, [r4, #16]
 801258c:	b1d5      	cbz	r5, 80125c4 <__d2b+0x98>
 801258e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012592:	4405      	add	r5, r0
 8012594:	f8c9 5000 	str.w	r5, [r9]
 8012598:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801259c:	f8c8 0000 	str.w	r0, [r8]
 80125a0:	4620      	mov	r0, r4
 80125a2:	b003      	add	sp, #12
 80125a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80125a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80125ac:	e7d5      	b.n	801255a <__d2b+0x2e>
 80125ae:	6161      	str	r1, [r4, #20]
 80125b0:	e7e5      	b.n	801257e <__d2b+0x52>
 80125b2:	a801      	add	r0, sp, #4
 80125b4:	f7ff fd64 	bl	8012080 <__lo0bits>
 80125b8:	9b01      	ldr	r3, [sp, #4]
 80125ba:	6163      	str	r3, [r4, #20]
 80125bc:	2201      	movs	r2, #1
 80125be:	6122      	str	r2, [r4, #16]
 80125c0:	3020      	adds	r0, #32
 80125c2:	e7e3      	b.n	801258c <__d2b+0x60>
 80125c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80125c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80125cc:	f8c9 0000 	str.w	r0, [r9]
 80125d0:	6918      	ldr	r0, [r3, #16]
 80125d2:	f7ff fd35 	bl	8012040 <__hi0bits>
 80125d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80125da:	e7df      	b.n	801259c <__d2b+0x70>
 80125dc:	08014f9b 	.word	0x08014f9b
 80125e0:	08014fac 	.word	0x08014fac

080125e4 <_calloc_r>:
 80125e4:	b513      	push	{r0, r1, r4, lr}
 80125e6:	434a      	muls	r2, r1
 80125e8:	4611      	mov	r1, r2
 80125ea:	9201      	str	r2, [sp, #4]
 80125ec:	f000 f85a 	bl	80126a4 <_malloc_r>
 80125f0:	4604      	mov	r4, r0
 80125f2:	b118      	cbz	r0, 80125fc <_calloc_r+0x18>
 80125f4:	9a01      	ldr	r2, [sp, #4]
 80125f6:	2100      	movs	r1, #0
 80125f8:	f7fe fa02 	bl	8010a00 <memset>
 80125fc:	4620      	mov	r0, r4
 80125fe:	b002      	add	sp, #8
 8012600:	bd10      	pop	{r4, pc}
	...

08012604 <_free_r>:
 8012604:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012606:	2900      	cmp	r1, #0
 8012608:	d048      	beq.n	801269c <_free_r+0x98>
 801260a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801260e:	9001      	str	r0, [sp, #4]
 8012610:	2b00      	cmp	r3, #0
 8012612:	f1a1 0404 	sub.w	r4, r1, #4
 8012616:	bfb8      	it	lt
 8012618:	18e4      	addlt	r4, r4, r3
 801261a:	f000 f8ef 	bl	80127fc <__malloc_lock>
 801261e:	4a20      	ldr	r2, [pc, #128]	; (80126a0 <_free_r+0x9c>)
 8012620:	9801      	ldr	r0, [sp, #4]
 8012622:	6813      	ldr	r3, [r2, #0]
 8012624:	4615      	mov	r5, r2
 8012626:	b933      	cbnz	r3, 8012636 <_free_r+0x32>
 8012628:	6063      	str	r3, [r4, #4]
 801262a:	6014      	str	r4, [r2, #0]
 801262c:	b003      	add	sp, #12
 801262e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012632:	f000 b8e9 	b.w	8012808 <__malloc_unlock>
 8012636:	42a3      	cmp	r3, r4
 8012638:	d90b      	bls.n	8012652 <_free_r+0x4e>
 801263a:	6821      	ldr	r1, [r4, #0]
 801263c:	1862      	adds	r2, r4, r1
 801263e:	4293      	cmp	r3, r2
 8012640:	bf04      	itt	eq
 8012642:	681a      	ldreq	r2, [r3, #0]
 8012644:	685b      	ldreq	r3, [r3, #4]
 8012646:	6063      	str	r3, [r4, #4]
 8012648:	bf04      	itt	eq
 801264a:	1852      	addeq	r2, r2, r1
 801264c:	6022      	streq	r2, [r4, #0]
 801264e:	602c      	str	r4, [r5, #0]
 8012650:	e7ec      	b.n	801262c <_free_r+0x28>
 8012652:	461a      	mov	r2, r3
 8012654:	685b      	ldr	r3, [r3, #4]
 8012656:	b10b      	cbz	r3, 801265c <_free_r+0x58>
 8012658:	42a3      	cmp	r3, r4
 801265a:	d9fa      	bls.n	8012652 <_free_r+0x4e>
 801265c:	6811      	ldr	r1, [r2, #0]
 801265e:	1855      	adds	r5, r2, r1
 8012660:	42a5      	cmp	r5, r4
 8012662:	d10b      	bne.n	801267c <_free_r+0x78>
 8012664:	6824      	ldr	r4, [r4, #0]
 8012666:	4421      	add	r1, r4
 8012668:	1854      	adds	r4, r2, r1
 801266a:	42a3      	cmp	r3, r4
 801266c:	6011      	str	r1, [r2, #0]
 801266e:	d1dd      	bne.n	801262c <_free_r+0x28>
 8012670:	681c      	ldr	r4, [r3, #0]
 8012672:	685b      	ldr	r3, [r3, #4]
 8012674:	6053      	str	r3, [r2, #4]
 8012676:	4421      	add	r1, r4
 8012678:	6011      	str	r1, [r2, #0]
 801267a:	e7d7      	b.n	801262c <_free_r+0x28>
 801267c:	d902      	bls.n	8012684 <_free_r+0x80>
 801267e:	230c      	movs	r3, #12
 8012680:	6003      	str	r3, [r0, #0]
 8012682:	e7d3      	b.n	801262c <_free_r+0x28>
 8012684:	6825      	ldr	r5, [r4, #0]
 8012686:	1961      	adds	r1, r4, r5
 8012688:	428b      	cmp	r3, r1
 801268a:	bf04      	itt	eq
 801268c:	6819      	ldreq	r1, [r3, #0]
 801268e:	685b      	ldreq	r3, [r3, #4]
 8012690:	6063      	str	r3, [r4, #4]
 8012692:	bf04      	itt	eq
 8012694:	1949      	addeq	r1, r1, r5
 8012696:	6021      	streq	r1, [r4, #0]
 8012698:	6054      	str	r4, [r2, #4]
 801269a:	e7c7      	b.n	801262c <_free_r+0x28>
 801269c:	b003      	add	sp, #12
 801269e:	bd30      	pop	{r4, r5, pc}
 80126a0:	24000af0 	.word	0x24000af0

080126a4 <_malloc_r>:
 80126a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126a6:	1ccd      	adds	r5, r1, #3
 80126a8:	f025 0503 	bic.w	r5, r5, #3
 80126ac:	3508      	adds	r5, #8
 80126ae:	2d0c      	cmp	r5, #12
 80126b0:	bf38      	it	cc
 80126b2:	250c      	movcc	r5, #12
 80126b4:	2d00      	cmp	r5, #0
 80126b6:	4606      	mov	r6, r0
 80126b8:	db01      	blt.n	80126be <_malloc_r+0x1a>
 80126ba:	42a9      	cmp	r1, r5
 80126bc:	d903      	bls.n	80126c6 <_malloc_r+0x22>
 80126be:	230c      	movs	r3, #12
 80126c0:	6033      	str	r3, [r6, #0]
 80126c2:	2000      	movs	r0, #0
 80126c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126c6:	f000 f899 	bl	80127fc <__malloc_lock>
 80126ca:	4921      	ldr	r1, [pc, #132]	; (8012750 <_malloc_r+0xac>)
 80126cc:	680a      	ldr	r2, [r1, #0]
 80126ce:	4614      	mov	r4, r2
 80126d0:	b99c      	cbnz	r4, 80126fa <_malloc_r+0x56>
 80126d2:	4f20      	ldr	r7, [pc, #128]	; (8012754 <_malloc_r+0xb0>)
 80126d4:	683b      	ldr	r3, [r7, #0]
 80126d6:	b923      	cbnz	r3, 80126e2 <_malloc_r+0x3e>
 80126d8:	4621      	mov	r1, r4
 80126da:	4630      	mov	r0, r6
 80126dc:	f000 f83c 	bl	8012758 <_sbrk_r>
 80126e0:	6038      	str	r0, [r7, #0]
 80126e2:	4629      	mov	r1, r5
 80126e4:	4630      	mov	r0, r6
 80126e6:	f000 f837 	bl	8012758 <_sbrk_r>
 80126ea:	1c43      	adds	r3, r0, #1
 80126ec:	d123      	bne.n	8012736 <_malloc_r+0x92>
 80126ee:	230c      	movs	r3, #12
 80126f0:	6033      	str	r3, [r6, #0]
 80126f2:	4630      	mov	r0, r6
 80126f4:	f000 f888 	bl	8012808 <__malloc_unlock>
 80126f8:	e7e3      	b.n	80126c2 <_malloc_r+0x1e>
 80126fa:	6823      	ldr	r3, [r4, #0]
 80126fc:	1b5b      	subs	r3, r3, r5
 80126fe:	d417      	bmi.n	8012730 <_malloc_r+0x8c>
 8012700:	2b0b      	cmp	r3, #11
 8012702:	d903      	bls.n	801270c <_malloc_r+0x68>
 8012704:	6023      	str	r3, [r4, #0]
 8012706:	441c      	add	r4, r3
 8012708:	6025      	str	r5, [r4, #0]
 801270a:	e004      	b.n	8012716 <_malloc_r+0x72>
 801270c:	6863      	ldr	r3, [r4, #4]
 801270e:	42a2      	cmp	r2, r4
 8012710:	bf0c      	ite	eq
 8012712:	600b      	streq	r3, [r1, #0]
 8012714:	6053      	strne	r3, [r2, #4]
 8012716:	4630      	mov	r0, r6
 8012718:	f000 f876 	bl	8012808 <__malloc_unlock>
 801271c:	f104 000b 	add.w	r0, r4, #11
 8012720:	1d23      	adds	r3, r4, #4
 8012722:	f020 0007 	bic.w	r0, r0, #7
 8012726:	1ac2      	subs	r2, r0, r3
 8012728:	d0cc      	beq.n	80126c4 <_malloc_r+0x20>
 801272a:	1a1b      	subs	r3, r3, r0
 801272c:	50a3      	str	r3, [r4, r2]
 801272e:	e7c9      	b.n	80126c4 <_malloc_r+0x20>
 8012730:	4622      	mov	r2, r4
 8012732:	6864      	ldr	r4, [r4, #4]
 8012734:	e7cc      	b.n	80126d0 <_malloc_r+0x2c>
 8012736:	1cc4      	adds	r4, r0, #3
 8012738:	f024 0403 	bic.w	r4, r4, #3
 801273c:	42a0      	cmp	r0, r4
 801273e:	d0e3      	beq.n	8012708 <_malloc_r+0x64>
 8012740:	1a21      	subs	r1, r4, r0
 8012742:	4630      	mov	r0, r6
 8012744:	f000 f808 	bl	8012758 <_sbrk_r>
 8012748:	3001      	adds	r0, #1
 801274a:	d1dd      	bne.n	8012708 <_malloc_r+0x64>
 801274c:	e7cf      	b.n	80126ee <_malloc_r+0x4a>
 801274e:	bf00      	nop
 8012750:	24000af0 	.word	0x24000af0
 8012754:	24000af4 	.word	0x24000af4

08012758 <_sbrk_r>:
 8012758:	b538      	push	{r3, r4, r5, lr}
 801275a:	4d06      	ldr	r5, [pc, #24]	; (8012774 <_sbrk_r+0x1c>)
 801275c:	2300      	movs	r3, #0
 801275e:	4604      	mov	r4, r0
 8012760:	4608      	mov	r0, r1
 8012762:	602b      	str	r3, [r5, #0]
 8012764:	f7f1 febe 	bl	80044e4 <_sbrk>
 8012768:	1c43      	adds	r3, r0, #1
 801276a:	d102      	bne.n	8012772 <_sbrk_r+0x1a>
 801276c:	682b      	ldr	r3, [r5, #0]
 801276e:	b103      	cbz	r3, 8012772 <_sbrk_r+0x1a>
 8012770:	6023      	str	r3, [r4, #0]
 8012772:	bd38      	pop	{r3, r4, r5, pc}
 8012774:	240012f4 	.word	0x240012f4

08012778 <__assert_func>:
 8012778:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801277a:	4614      	mov	r4, r2
 801277c:	461a      	mov	r2, r3
 801277e:	4b09      	ldr	r3, [pc, #36]	; (80127a4 <__assert_func+0x2c>)
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	4605      	mov	r5, r0
 8012784:	68d8      	ldr	r0, [r3, #12]
 8012786:	b14c      	cbz	r4, 801279c <__assert_func+0x24>
 8012788:	4b07      	ldr	r3, [pc, #28]	; (80127a8 <__assert_func+0x30>)
 801278a:	9100      	str	r1, [sp, #0]
 801278c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012790:	4906      	ldr	r1, [pc, #24]	; (80127ac <__assert_func+0x34>)
 8012792:	462b      	mov	r3, r5
 8012794:	f000 f80e 	bl	80127b4 <fiprintf>
 8012798:	f000 fa64 	bl	8012c64 <abort>
 801279c:	4b04      	ldr	r3, [pc, #16]	; (80127b0 <__assert_func+0x38>)
 801279e:	461c      	mov	r4, r3
 80127a0:	e7f3      	b.n	801278a <__assert_func+0x12>
 80127a2:	bf00      	nop
 80127a4:	24000024 	.word	0x24000024
 80127a8:	0801510c 	.word	0x0801510c
 80127ac:	08015119 	.word	0x08015119
 80127b0:	08015147 	.word	0x08015147

080127b4 <fiprintf>:
 80127b4:	b40e      	push	{r1, r2, r3}
 80127b6:	b503      	push	{r0, r1, lr}
 80127b8:	4601      	mov	r1, r0
 80127ba:	ab03      	add	r3, sp, #12
 80127bc:	4805      	ldr	r0, [pc, #20]	; (80127d4 <fiprintf+0x20>)
 80127be:	f853 2b04 	ldr.w	r2, [r3], #4
 80127c2:	6800      	ldr	r0, [r0, #0]
 80127c4:	9301      	str	r3, [sp, #4]
 80127c6:	f000 f84f 	bl	8012868 <_vfiprintf_r>
 80127ca:	b002      	add	sp, #8
 80127cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80127d0:	b003      	add	sp, #12
 80127d2:	4770      	bx	lr
 80127d4:	24000024 	.word	0x24000024

080127d8 <__ascii_mbtowc>:
 80127d8:	b082      	sub	sp, #8
 80127da:	b901      	cbnz	r1, 80127de <__ascii_mbtowc+0x6>
 80127dc:	a901      	add	r1, sp, #4
 80127de:	b142      	cbz	r2, 80127f2 <__ascii_mbtowc+0x1a>
 80127e0:	b14b      	cbz	r3, 80127f6 <__ascii_mbtowc+0x1e>
 80127e2:	7813      	ldrb	r3, [r2, #0]
 80127e4:	600b      	str	r3, [r1, #0]
 80127e6:	7812      	ldrb	r2, [r2, #0]
 80127e8:	1e10      	subs	r0, r2, #0
 80127ea:	bf18      	it	ne
 80127ec:	2001      	movne	r0, #1
 80127ee:	b002      	add	sp, #8
 80127f0:	4770      	bx	lr
 80127f2:	4610      	mov	r0, r2
 80127f4:	e7fb      	b.n	80127ee <__ascii_mbtowc+0x16>
 80127f6:	f06f 0001 	mvn.w	r0, #1
 80127fa:	e7f8      	b.n	80127ee <__ascii_mbtowc+0x16>

080127fc <__malloc_lock>:
 80127fc:	4801      	ldr	r0, [pc, #4]	; (8012804 <__malloc_lock+0x8>)
 80127fe:	f000 bbf1 	b.w	8012fe4 <__retarget_lock_acquire_recursive>
 8012802:	bf00      	nop
 8012804:	240012fc 	.word	0x240012fc

08012808 <__malloc_unlock>:
 8012808:	4801      	ldr	r0, [pc, #4]	; (8012810 <__malloc_unlock+0x8>)
 801280a:	f000 bbec 	b.w	8012fe6 <__retarget_lock_release_recursive>
 801280e:	bf00      	nop
 8012810:	240012fc 	.word	0x240012fc

08012814 <__sfputc_r>:
 8012814:	6893      	ldr	r3, [r2, #8]
 8012816:	3b01      	subs	r3, #1
 8012818:	2b00      	cmp	r3, #0
 801281a:	b410      	push	{r4}
 801281c:	6093      	str	r3, [r2, #8]
 801281e:	da08      	bge.n	8012832 <__sfputc_r+0x1e>
 8012820:	6994      	ldr	r4, [r2, #24]
 8012822:	42a3      	cmp	r3, r4
 8012824:	db01      	blt.n	801282a <__sfputc_r+0x16>
 8012826:	290a      	cmp	r1, #10
 8012828:	d103      	bne.n	8012832 <__sfputc_r+0x1e>
 801282a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801282e:	f000 b94b 	b.w	8012ac8 <__swbuf_r>
 8012832:	6813      	ldr	r3, [r2, #0]
 8012834:	1c58      	adds	r0, r3, #1
 8012836:	6010      	str	r0, [r2, #0]
 8012838:	7019      	strb	r1, [r3, #0]
 801283a:	4608      	mov	r0, r1
 801283c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012840:	4770      	bx	lr

08012842 <__sfputs_r>:
 8012842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012844:	4606      	mov	r6, r0
 8012846:	460f      	mov	r7, r1
 8012848:	4614      	mov	r4, r2
 801284a:	18d5      	adds	r5, r2, r3
 801284c:	42ac      	cmp	r4, r5
 801284e:	d101      	bne.n	8012854 <__sfputs_r+0x12>
 8012850:	2000      	movs	r0, #0
 8012852:	e007      	b.n	8012864 <__sfputs_r+0x22>
 8012854:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012858:	463a      	mov	r2, r7
 801285a:	4630      	mov	r0, r6
 801285c:	f7ff ffda 	bl	8012814 <__sfputc_r>
 8012860:	1c43      	adds	r3, r0, #1
 8012862:	d1f3      	bne.n	801284c <__sfputs_r+0xa>
 8012864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012868 <_vfiprintf_r>:
 8012868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801286c:	460d      	mov	r5, r1
 801286e:	b09d      	sub	sp, #116	; 0x74
 8012870:	4614      	mov	r4, r2
 8012872:	4698      	mov	r8, r3
 8012874:	4606      	mov	r6, r0
 8012876:	b118      	cbz	r0, 8012880 <_vfiprintf_r+0x18>
 8012878:	6983      	ldr	r3, [r0, #24]
 801287a:	b90b      	cbnz	r3, 8012880 <_vfiprintf_r+0x18>
 801287c:	f000 fb14 	bl	8012ea8 <__sinit>
 8012880:	4b89      	ldr	r3, [pc, #548]	; (8012aa8 <_vfiprintf_r+0x240>)
 8012882:	429d      	cmp	r5, r3
 8012884:	d11b      	bne.n	80128be <_vfiprintf_r+0x56>
 8012886:	6875      	ldr	r5, [r6, #4]
 8012888:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801288a:	07d9      	lsls	r1, r3, #31
 801288c:	d405      	bmi.n	801289a <_vfiprintf_r+0x32>
 801288e:	89ab      	ldrh	r3, [r5, #12]
 8012890:	059a      	lsls	r2, r3, #22
 8012892:	d402      	bmi.n	801289a <_vfiprintf_r+0x32>
 8012894:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012896:	f000 fba5 	bl	8012fe4 <__retarget_lock_acquire_recursive>
 801289a:	89ab      	ldrh	r3, [r5, #12]
 801289c:	071b      	lsls	r3, r3, #28
 801289e:	d501      	bpl.n	80128a4 <_vfiprintf_r+0x3c>
 80128a0:	692b      	ldr	r3, [r5, #16]
 80128a2:	b9eb      	cbnz	r3, 80128e0 <_vfiprintf_r+0x78>
 80128a4:	4629      	mov	r1, r5
 80128a6:	4630      	mov	r0, r6
 80128a8:	f000 f96e 	bl	8012b88 <__swsetup_r>
 80128ac:	b1c0      	cbz	r0, 80128e0 <_vfiprintf_r+0x78>
 80128ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80128b0:	07dc      	lsls	r4, r3, #31
 80128b2:	d50e      	bpl.n	80128d2 <_vfiprintf_r+0x6a>
 80128b4:	f04f 30ff 	mov.w	r0, #4294967295
 80128b8:	b01d      	add	sp, #116	; 0x74
 80128ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128be:	4b7b      	ldr	r3, [pc, #492]	; (8012aac <_vfiprintf_r+0x244>)
 80128c0:	429d      	cmp	r5, r3
 80128c2:	d101      	bne.n	80128c8 <_vfiprintf_r+0x60>
 80128c4:	68b5      	ldr	r5, [r6, #8]
 80128c6:	e7df      	b.n	8012888 <_vfiprintf_r+0x20>
 80128c8:	4b79      	ldr	r3, [pc, #484]	; (8012ab0 <_vfiprintf_r+0x248>)
 80128ca:	429d      	cmp	r5, r3
 80128cc:	bf08      	it	eq
 80128ce:	68f5      	ldreq	r5, [r6, #12]
 80128d0:	e7da      	b.n	8012888 <_vfiprintf_r+0x20>
 80128d2:	89ab      	ldrh	r3, [r5, #12]
 80128d4:	0598      	lsls	r0, r3, #22
 80128d6:	d4ed      	bmi.n	80128b4 <_vfiprintf_r+0x4c>
 80128d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80128da:	f000 fb84 	bl	8012fe6 <__retarget_lock_release_recursive>
 80128de:	e7e9      	b.n	80128b4 <_vfiprintf_r+0x4c>
 80128e0:	2300      	movs	r3, #0
 80128e2:	9309      	str	r3, [sp, #36]	; 0x24
 80128e4:	2320      	movs	r3, #32
 80128e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80128ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80128ee:	2330      	movs	r3, #48	; 0x30
 80128f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012ab4 <_vfiprintf_r+0x24c>
 80128f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80128f8:	f04f 0901 	mov.w	r9, #1
 80128fc:	4623      	mov	r3, r4
 80128fe:	469a      	mov	sl, r3
 8012900:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012904:	b10a      	cbz	r2, 801290a <_vfiprintf_r+0xa2>
 8012906:	2a25      	cmp	r2, #37	; 0x25
 8012908:	d1f9      	bne.n	80128fe <_vfiprintf_r+0x96>
 801290a:	ebba 0b04 	subs.w	fp, sl, r4
 801290e:	d00b      	beq.n	8012928 <_vfiprintf_r+0xc0>
 8012910:	465b      	mov	r3, fp
 8012912:	4622      	mov	r2, r4
 8012914:	4629      	mov	r1, r5
 8012916:	4630      	mov	r0, r6
 8012918:	f7ff ff93 	bl	8012842 <__sfputs_r>
 801291c:	3001      	adds	r0, #1
 801291e:	f000 80aa 	beq.w	8012a76 <_vfiprintf_r+0x20e>
 8012922:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012924:	445a      	add	r2, fp
 8012926:	9209      	str	r2, [sp, #36]	; 0x24
 8012928:	f89a 3000 	ldrb.w	r3, [sl]
 801292c:	2b00      	cmp	r3, #0
 801292e:	f000 80a2 	beq.w	8012a76 <_vfiprintf_r+0x20e>
 8012932:	2300      	movs	r3, #0
 8012934:	f04f 32ff 	mov.w	r2, #4294967295
 8012938:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801293c:	f10a 0a01 	add.w	sl, sl, #1
 8012940:	9304      	str	r3, [sp, #16]
 8012942:	9307      	str	r3, [sp, #28]
 8012944:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012948:	931a      	str	r3, [sp, #104]	; 0x68
 801294a:	4654      	mov	r4, sl
 801294c:	2205      	movs	r2, #5
 801294e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012952:	4858      	ldr	r0, [pc, #352]	; (8012ab4 <_vfiprintf_r+0x24c>)
 8012954:	f7ed fccc 	bl	80002f0 <memchr>
 8012958:	9a04      	ldr	r2, [sp, #16]
 801295a:	b9d8      	cbnz	r0, 8012994 <_vfiprintf_r+0x12c>
 801295c:	06d1      	lsls	r1, r2, #27
 801295e:	bf44      	itt	mi
 8012960:	2320      	movmi	r3, #32
 8012962:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012966:	0713      	lsls	r3, r2, #28
 8012968:	bf44      	itt	mi
 801296a:	232b      	movmi	r3, #43	; 0x2b
 801296c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012970:	f89a 3000 	ldrb.w	r3, [sl]
 8012974:	2b2a      	cmp	r3, #42	; 0x2a
 8012976:	d015      	beq.n	80129a4 <_vfiprintf_r+0x13c>
 8012978:	9a07      	ldr	r2, [sp, #28]
 801297a:	4654      	mov	r4, sl
 801297c:	2000      	movs	r0, #0
 801297e:	f04f 0c0a 	mov.w	ip, #10
 8012982:	4621      	mov	r1, r4
 8012984:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012988:	3b30      	subs	r3, #48	; 0x30
 801298a:	2b09      	cmp	r3, #9
 801298c:	d94e      	bls.n	8012a2c <_vfiprintf_r+0x1c4>
 801298e:	b1b0      	cbz	r0, 80129be <_vfiprintf_r+0x156>
 8012990:	9207      	str	r2, [sp, #28]
 8012992:	e014      	b.n	80129be <_vfiprintf_r+0x156>
 8012994:	eba0 0308 	sub.w	r3, r0, r8
 8012998:	fa09 f303 	lsl.w	r3, r9, r3
 801299c:	4313      	orrs	r3, r2
 801299e:	9304      	str	r3, [sp, #16]
 80129a0:	46a2      	mov	sl, r4
 80129a2:	e7d2      	b.n	801294a <_vfiprintf_r+0xe2>
 80129a4:	9b03      	ldr	r3, [sp, #12]
 80129a6:	1d19      	adds	r1, r3, #4
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	9103      	str	r1, [sp, #12]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	bfbb      	ittet	lt
 80129b0:	425b      	neglt	r3, r3
 80129b2:	f042 0202 	orrlt.w	r2, r2, #2
 80129b6:	9307      	strge	r3, [sp, #28]
 80129b8:	9307      	strlt	r3, [sp, #28]
 80129ba:	bfb8      	it	lt
 80129bc:	9204      	strlt	r2, [sp, #16]
 80129be:	7823      	ldrb	r3, [r4, #0]
 80129c0:	2b2e      	cmp	r3, #46	; 0x2e
 80129c2:	d10c      	bne.n	80129de <_vfiprintf_r+0x176>
 80129c4:	7863      	ldrb	r3, [r4, #1]
 80129c6:	2b2a      	cmp	r3, #42	; 0x2a
 80129c8:	d135      	bne.n	8012a36 <_vfiprintf_r+0x1ce>
 80129ca:	9b03      	ldr	r3, [sp, #12]
 80129cc:	1d1a      	adds	r2, r3, #4
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	9203      	str	r2, [sp, #12]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	bfb8      	it	lt
 80129d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80129da:	3402      	adds	r4, #2
 80129dc:	9305      	str	r3, [sp, #20]
 80129de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012ac4 <_vfiprintf_r+0x25c>
 80129e2:	7821      	ldrb	r1, [r4, #0]
 80129e4:	2203      	movs	r2, #3
 80129e6:	4650      	mov	r0, sl
 80129e8:	f7ed fc82 	bl	80002f0 <memchr>
 80129ec:	b140      	cbz	r0, 8012a00 <_vfiprintf_r+0x198>
 80129ee:	2340      	movs	r3, #64	; 0x40
 80129f0:	eba0 000a 	sub.w	r0, r0, sl
 80129f4:	fa03 f000 	lsl.w	r0, r3, r0
 80129f8:	9b04      	ldr	r3, [sp, #16]
 80129fa:	4303      	orrs	r3, r0
 80129fc:	3401      	adds	r4, #1
 80129fe:	9304      	str	r3, [sp, #16]
 8012a00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a04:	482c      	ldr	r0, [pc, #176]	; (8012ab8 <_vfiprintf_r+0x250>)
 8012a06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012a0a:	2206      	movs	r2, #6
 8012a0c:	f7ed fc70 	bl	80002f0 <memchr>
 8012a10:	2800      	cmp	r0, #0
 8012a12:	d03f      	beq.n	8012a94 <_vfiprintf_r+0x22c>
 8012a14:	4b29      	ldr	r3, [pc, #164]	; (8012abc <_vfiprintf_r+0x254>)
 8012a16:	bb1b      	cbnz	r3, 8012a60 <_vfiprintf_r+0x1f8>
 8012a18:	9b03      	ldr	r3, [sp, #12]
 8012a1a:	3307      	adds	r3, #7
 8012a1c:	f023 0307 	bic.w	r3, r3, #7
 8012a20:	3308      	adds	r3, #8
 8012a22:	9303      	str	r3, [sp, #12]
 8012a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a26:	443b      	add	r3, r7
 8012a28:	9309      	str	r3, [sp, #36]	; 0x24
 8012a2a:	e767      	b.n	80128fc <_vfiprintf_r+0x94>
 8012a2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012a30:	460c      	mov	r4, r1
 8012a32:	2001      	movs	r0, #1
 8012a34:	e7a5      	b.n	8012982 <_vfiprintf_r+0x11a>
 8012a36:	2300      	movs	r3, #0
 8012a38:	3401      	adds	r4, #1
 8012a3a:	9305      	str	r3, [sp, #20]
 8012a3c:	4619      	mov	r1, r3
 8012a3e:	f04f 0c0a 	mov.w	ip, #10
 8012a42:	4620      	mov	r0, r4
 8012a44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012a48:	3a30      	subs	r2, #48	; 0x30
 8012a4a:	2a09      	cmp	r2, #9
 8012a4c:	d903      	bls.n	8012a56 <_vfiprintf_r+0x1ee>
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d0c5      	beq.n	80129de <_vfiprintf_r+0x176>
 8012a52:	9105      	str	r1, [sp, #20]
 8012a54:	e7c3      	b.n	80129de <_vfiprintf_r+0x176>
 8012a56:	fb0c 2101 	mla	r1, ip, r1, r2
 8012a5a:	4604      	mov	r4, r0
 8012a5c:	2301      	movs	r3, #1
 8012a5e:	e7f0      	b.n	8012a42 <_vfiprintf_r+0x1da>
 8012a60:	ab03      	add	r3, sp, #12
 8012a62:	9300      	str	r3, [sp, #0]
 8012a64:	462a      	mov	r2, r5
 8012a66:	4b16      	ldr	r3, [pc, #88]	; (8012ac0 <_vfiprintf_r+0x258>)
 8012a68:	a904      	add	r1, sp, #16
 8012a6a:	4630      	mov	r0, r6
 8012a6c:	f7fe f860 	bl	8010b30 <_printf_float>
 8012a70:	4607      	mov	r7, r0
 8012a72:	1c78      	adds	r0, r7, #1
 8012a74:	d1d6      	bne.n	8012a24 <_vfiprintf_r+0x1bc>
 8012a76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012a78:	07d9      	lsls	r1, r3, #31
 8012a7a:	d405      	bmi.n	8012a88 <_vfiprintf_r+0x220>
 8012a7c:	89ab      	ldrh	r3, [r5, #12]
 8012a7e:	059a      	lsls	r2, r3, #22
 8012a80:	d402      	bmi.n	8012a88 <_vfiprintf_r+0x220>
 8012a82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012a84:	f000 faaf 	bl	8012fe6 <__retarget_lock_release_recursive>
 8012a88:	89ab      	ldrh	r3, [r5, #12]
 8012a8a:	065b      	lsls	r3, r3, #25
 8012a8c:	f53f af12 	bmi.w	80128b4 <_vfiprintf_r+0x4c>
 8012a90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012a92:	e711      	b.n	80128b8 <_vfiprintf_r+0x50>
 8012a94:	ab03      	add	r3, sp, #12
 8012a96:	9300      	str	r3, [sp, #0]
 8012a98:	462a      	mov	r2, r5
 8012a9a:	4b09      	ldr	r3, [pc, #36]	; (8012ac0 <_vfiprintf_r+0x258>)
 8012a9c:	a904      	add	r1, sp, #16
 8012a9e:	4630      	mov	r0, r6
 8012aa0:	f7fe fad2 	bl	8011048 <_printf_i>
 8012aa4:	e7e4      	b.n	8012a70 <_vfiprintf_r+0x208>
 8012aa6:	bf00      	nop
 8012aa8:	08015284 	.word	0x08015284
 8012aac:	080152a4 	.word	0x080152a4
 8012ab0:	08015264 	.word	0x08015264
 8012ab4:	08015152 	.word	0x08015152
 8012ab8:	0801515c 	.word	0x0801515c
 8012abc:	08010b31 	.word	0x08010b31
 8012ac0:	08012843 	.word	0x08012843
 8012ac4:	08015158 	.word	0x08015158

08012ac8 <__swbuf_r>:
 8012ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012aca:	460e      	mov	r6, r1
 8012acc:	4614      	mov	r4, r2
 8012ace:	4605      	mov	r5, r0
 8012ad0:	b118      	cbz	r0, 8012ada <__swbuf_r+0x12>
 8012ad2:	6983      	ldr	r3, [r0, #24]
 8012ad4:	b90b      	cbnz	r3, 8012ada <__swbuf_r+0x12>
 8012ad6:	f000 f9e7 	bl	8012ea8 <__sinit>
 8012ada:	4b21      	ldr	r3, [pc, #132]	; (8012b60 <__swbuf_r+0x98>)
 8012adc:	429c      	cmp	r4, r3
 8012ade:	d12b      	bne.n	8012b38 <__swbuf_r+0x70>
 8012ae0:	686c      	ldr	r4, [r5, #4]
 8012ae2:	69a3      	ldr	r3, [r4, #24]
 8012ae4:	60a3      	str	r3, [r4, #8]
 8012ae6:	89a3      	ldrh	r3, [r4, #12]
 8012ae8:	071a      	lsls	r2, r3, #28
 8012aea:	d52f      	bpl.n	8012b4c <__swbuf_r+0x84>
 8012aec:	6923      	ldr	r3, [r4, #16]
 8012aee:	b36b      	cbz	r3, 8012b4c <__swbuf_r+0x84>
 8012af0:	6923      	ldr	r3, [r4, #16]
 8012af2:	6820      	ldr	r0, [r4, #0]
 8012af4:	1ac0      	subs	r0, r0, r3
 8012af6:	6963      	ldr	r3, [r4, #20]
 8012af8:	b2f6      	uxtb	r6, r6
 8012afa:	4283      	cmp	r3, r0
 8012afc:	4637      	mov	r7, r6
 8012afe:	dc04      	bgt.n	8012b0a <__swbuf_r+0x42>
 8012b00:	4621      	mov	r1, r4
 8012b02:	4628      	mov	r0, r5
 8012b04:	f000 f93c 	bl	8012d80 <_fflush_r>
 8012b08:	bb30      	cbnz	r0, 8012b58 <__swbuf_r+0x90>
 8012b0a:	68a3      	ldr	r3, [r4, #8]
 8012b0c:	3b01      	subs	r3, #1
 8012b0e:	60a3      	str	r3, [r4, #8]
 8012b10:	6823      	ldr	r3, [r4, #0]
 8012b12:	1c5a      	adds	r2, r3, #1
 8012b14:	6022      	str	r2, [r4, #0]
 8012b16:	701e      	strb	r6, [r3, #0]
 8012b18:	6963      	ldr	r3, [r4, #20]
 8012b1a:	3001      	adds	r0, #1
 8012b1c:	4283      	cmp	r3, r0
 8012b1e:	d004      	beq.n	8012b2a <__swbuf_r+0x62>
 8012b20:	89a3      	ldrh	r3, [r4, #12]
 8012b22:	07db      	lsls	r3, r3, #31
 8012b24:	d506      	bpl.n	8012b34 <__swbuf_r+0x6c>
 8012b26:	2e0a      	cmp	r6, #10
 8012b28:	d104      	bne.n	8012b34 <__swbuf_r+0x6c>
 8012b2a:	4621      	mov	r1, r4
 8012b2c:	4628      	mov	r0, r5
 8012b2e:	f000 f927 	bl	8012d80 <_fflush_r>
 8012b32:	b988      	cbnz	r0, 8012b58 <__swbuf_r+0x90>
 8012b34:	4638      	mov	r0, r7
 8012b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b38:	4b0a      	ldr	r3, [pc, #40]	; (8012b64 <__swbuf_r+0x9c>)
 8012b3a:	429c      	cmp	r4, r3
 8012b3c:	d101      	bne.n	8012b42 <__swbuf_r+0x7a>
 8012b3e:	68ac      	ldr	r4, [r5, #8]
 8012b40:	e7cf      	b.n	8012ae2 <__swbuf_r+0x1a>
 8012b42:	4b09      	ldr	r3, [pc, #36]	; (8012b68 <__swbuf_r+0xa0>)
 8012b44:	429c      	cmp	r4, r3
 8012b46:	bf08      	it	eq
 8012b48:	68ec      	ldreq	r4, [r5, #12]
 8012b4a:	e7ca      	b.n	8012ae2 <__swbuf_r+0x1a>
 8012b4c:	4621      	mov	r1, r4
 8012b4e:	4628      	mov	r0, r5
 8012b50:	f000 f81a 	bl	8012b88 <__swsetup_r>
 8012b54:	2800      	cmp	r0, #0
 8012b56:	d0cb      	beq.n	8012af0 <__swbuf_r+0x28>
 8012b58:	f04f 37ff 	mov.w	r7, #4294967295
 8012b5c:	e7ea      	b.n	8012b34 <__swbuf_r+0x6c>
 8012b5e:	bf00      	nop
 8012b60:	08015284 	.word	0x08015284
 8012b64:	080152a4 	.word	0x080152a4
 8012b68:	08015264 	.word	0x08015264

08012b6c <__ascii_wctomb>:
 8012b6c:	b149      	cbz	r1, 8012b82 <__ascii_wctomb+0x16>
 8012b6e:	2aff      	cmp	r2, #255	; 0xff
 8012b70:	bf85      	ittet	hi
 8012b72:	238a      	movhi	r3, #138	; 0x8a
 8012b74:	6003      	strhi	r3, [r0, #0]
 8012b76:	700a      	strbls	r2, [r1, #0]
 8012b78:	f04f 30ff 	movhi.w	r0, #4294967295
 8012b7c:	bf98      	it	ls
 8012b7e:	2001      	movls	r0, #1
 8012b80:	4770      	bx	lr
 8012b82:	4608      	mov	r0, r1
 8012b84:	4770      	bx	lr
	...

08012b88 <__swsetup_r>:
 8012b88:	4b32      	ldr	r3, [pc, #200]	; (8012c54 <__swsetup_r+0xcc>)
 8012b8a:	b570      	push	{r4, r5, r6, lr}
 8012b8c:	681d      	ldr	r5, [r3, #0]
 8012b8e:	4606      	mov	r6, r0
 8012b90:	460c      	mov	r4, r1
 8012b92:	b125      	cbz	r5, 8012b9e <__swsetup_r+0x16>
 8012b94:	69ab      	ldr	r3, [r5, #24]
 8012b96:	b913      	cbnz	r3, 8012b9e <__swsetup_r+0x16>
 8012b98:	4628      	mov	r0, r5
 8012b9a:	f000 f985 	bl	8012ea8 <__sinit>
 8012b9e:	4b2e      	ldr	r3, [pc, #184]	; (8012c58 <__swsetup_r+0xd0>)
 8012ba0:	429c      	cmp	r4, r3
 8012ba2:	d10f      	bne.n	8012bc4 <__swsetup_r+0x3c>
 8012ba4:	686c      	ldr	r4, [r5, #4]
 8012ba6:	89a3      	ldrh	r3, [r4, #12]
 8012ba8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012bac:	0719      	lsls	r1, r3, #28
 8012bae:	d42c      	bmi.n	8012c0a <__swsetup_r+0x82>
 8012bb0:	06dd      	lsls	r5, r3, #27
 8012bb2:	d411      	bmi.n	8012bd8 <__swsetup_r+0x50>
 8012bb4:	2309      	movs	r3, #9
 8012bb6:	6033      	str	r3, [r6, #0]
 8012bb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012bbc:	81a3      	strh	r3, [r4, #12]
 8012bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8012bc2:	e03e      	b.n	8012c42 <__swsetup_r+0xba>
 8012bc4:	4b25      	ldr	r3, [pc, #148]	; (8012c5c <__swsetup_r+0xd4>)
 8012bc6:	429c      	cmp	r4, r3
 8012bc8:	d101      	bne.n	8012bce <__swsetup_r+0x46>
 8012bca:	68ac      	ldr	r4, [r5, #8]
 8012bcc:	e7eb      	b.n	8012ba6 <__swsetup_r+0x1e>
 8012bce:	4b24      	ldr	r3, [pc, #144]	; (8012c60 <__swsetup_r+0xd8>)
 8012bd0:	429c      	cmp	r4, r3
 8012bd2:	bf08      	it	eq
 8012bd4:	68ec      	ldreq	r4, [r5, #12]
 8012bd6:	e7e6      	b.n	8012ba6 <__swsetup_r+0x1e>
 8012bd8:	0758      	lsls	r0, r3, #29
 8012bda:	d512      	bpl.n	8012c02 <__swsetup_r+0x7a>
 8012bdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012bde:	b141      	cbz	r1, 8012bf2 <__swsetup_r+0x6a>
 8012be0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012be4:	4299      	cmp	r1, r3
 8012be6:	d002      	beq.n	8012bee <__swsetup_r+0x66>
 8012be8:	4630      	mov	r0, r6
 8012bea:	f7ff fd0b 	bl	8012604 <_free_r>
 8012bee:	2300      	movs	r3, #0
 8012bf0:	6363      	str	r3, [r4, #52]	; 0x34
 8012bf2:	89a3      	ldrh	r3, [r4, #12]
 8012bf4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012bf8:	81a3      	strh	r3, [r4, #12]
 8012bfa:	2300      	movs	r3, #0
 8012bfc:	6063      	str	r3, [r4, #4]
 8012bfe:	6923      	ldr	r3, [r4, #16]
 8012c00:	6023      	str	r3, [r4, #0]
 8012c02:	89a3      	ldrh	r3, [r4, #12]
 8012c04:	f043 0308 	orr.w	r3, r3, #8
 8012c08:	81a3      	strh	r3, [r4, #12]
 8012c0a:	6923      	ldr	r3, [r4, #16]
 8012c0c:	b94b      	cbnz	r3, 8012c22 <__swsetup_r+0x9a>
 8012c0e:	89a3      	ldrh	r3, [r4, #12]
 8012c10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012c14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012c18:	d003      	beq.n	8012c22 <__swsetup_r+0x9a>
 8012c1a:	4621      	mov	r1, r4
 8012c1c:	4630      	mov	r0, r6
 8012c1e:	f000 fa07 	bl	8013030 <__smakebuf_r>
 8012c22:	89a0      	ldrh	r0, [r4, #12]
 8012c24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012c28:	f010 0301 	ands.w	r3, r0, #1
 8012c2c:	d00a      	beq.n	8012c44 <__swsetup_r+0xbc>
 8012c2e:	2300      	movs	r3, #0
 8012c30:	60a3      	str	r3, [r4, #8]
 8012c32:	6963      	ldr	r3, [r4, #20]
 8012c34:	425b      	negs	r3, r3
 8012c36:	61a3      	str	r3, [r4, #24]
 8012c38:	6923      	ldr	r3, [r4, #16]
 8012c3a:	b943      	cbnz	r3, 8012c4e <__swsetup_r+0xc6>
 8012c3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012c40:	d1ba      	bne.n	8012bb8 <__swsetup_r+0x30>
 8012c42:	bd70      	pop	{r4, r5, r6, pc}
 8012c44:	0781      	lsls	r1, r0, #30
 8012c46:	bf58      	it	pl
 8012c48:	6963      	ldrpl	r3, [r4, #20]
 8012c4a:	60a3      	str	r3, [r4, #8]
 8012c4c:	e7f4      	b.n	8012c38 <__swsetup_r+0xb0>
 8012c4e:	2000      	movs	r0, #0
 8012c50:	e7f7      	b.n	8012c42 <__swsetup_r+0xba>
 8012c52:	bf00      	nop
 8012c54:	24000024 	.word	0x24000024
 8012c58:	08015284 	.word	0x08015284
 8012c5c:	080152a4 	.word	0x080152a4
 8012c60:	08015264 	.word	0x08015264

08012c64 <abort>:
 8012c64:	b508      	push	{r3, lr}
 8012c66:	2006      	movs	r0, #6
 8012c68:	f000 fa4a 	bl	8013100 <raise>
 8012c6c:	2001      	movs	r0, #1
 8012c6e:	f7f1 fbc1 	bl	80043f4 <_exit>
	...

08012c74 <__sflush_r>:
 8012c74:	898a      	ldrh	r2, [r1, #12]
 8012c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c7a:	4605      	mov	r5, r0
 8012c7c:	0710      	lsls	r0, r2, #28
 8012c7e:	460c      	mov	r4, r1
 8012c80:	d458      	bmi.n	8012d34 <__sflush_r+0xc0>
 8012c82:	684b      	ldr	r3, [r1, #4]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	dc05      	bgt.n	8012c94 <__sflush_r+0x20>
 8012c88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	dc02      	bgt.n	8012c94 <__sflush_r+0x20>
 8012c8e:	2000      	movs	r0, #0
 8012c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012c96:	2e00      	cmp	r6, #0
 8012c98:	d0f9      	beq.n	8012c8e <__sflush_r+0x1a>
 8012c9a:	2300      	movs	r3, #0
 8012c9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012ca0:	682f      	ldr	r7, [r5, #0]
 8012ca2:	602b      	str	r3, [r5, #0]
 8012ca4:	d032      	beq.n	8012d0c <__sflush_r+0x98>
 8012ca6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012ca8:	89a3      	ldrh	r3, [r4, #12]
 8012caa:	075a      	lsls	r2, r3, #29
 8012cac:	d505      	bpl.n	8012cba <__sflush_r+0x46>
 8012cae:	6863      	ldr	r3, [r4, #4]
 8012cb0:	1ac0      	subs	r0, r0, r3
 8012cb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012cb4:	b10b      	cbz	r3, 8012cba <__sflush_r+0x46>
 8012cb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012cb8:	1ac0      	subs	r0, r0, r3
 8012cba:	2300      	movs	r3, #0
 8012cbc:	4602      	mov	r2, r0
 8012cbe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012cc0:	6a21      	ldr	r1, [r4, #32]
 8012cc2:	4628      	mov	r0, r5
 8012cc4:	47b0      	blx	r6
 8012cc6:	1c43      	adds	r3, r0, #1
 8012cc8:	89a3      	ldrh	r3, [r4, #12]
 8012cca:	d106      	bne.n	8012cda <__sflush_r+0x66>
 8012ccc:	6829      	ldr	r1, [r5, #0]
 8012cce:	291d      	cmp	r1, #29
 8012cd0:	d82c      	bhi.n	8012d2c <__sflush_r+0xb8>
 8012cd2:	4a2a      	ldr	r2, [pc, #168]	; (8012d7c <__sflush_r+0x108>)
 8012cd4:	40ca      	lsrs	r2, r1
 8012cd6:	07d6      	lsls	r6, r2, #31
 8012cd8:	d528      	bpl.n	8012d2c <__sflush_r+0xb8>
 8012cda:	2200      	movs	r2, #0
 8012cdc:	6062      	str	r2, [r4, #4]
 8012cde:	04d9      	lsls	r1, r3, #19
 8012ce0:	6922      	ldr	r2, [r4, #16]
 8012ce2:	6022      	str	r2, [r4, #0]
 8012ce4:	d504      	bpl.n	8012cf0 <__sflush_r+0x7c>
 8012ce6:	1c42      	adds	r2, r0, #1
 8012ce8:	d101      	bne.n	8012cee <__sflush_r+0x7a>
 8012cea:	682b      	ldr	r3, [r5, #0]
 8012cec:	b903      	cbnz	r3, 8012cf0 <__sflush_r+0x7c>
 8012cee:	6560      	str	r0, [r4, #84]	; 0x54
 8012cf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012cf2:	602f      	str	r7, [r5, #0]
 8012cf4:	2900      	cmp	r1, #0
 8012cf6:	d0ca      	beq.n	8012c8e <__sflush_r+0x1a>
 8012cf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012cfc:	4299      	cmp	r1, r3
 8012cfe:	d002      	beq.n	8012d06 <__sflush_r+0x92>
 8012d00:	4628      	mov	r0, r5
 8012d02:	f7ff fc7f 	bl	8012604 <_free_r>
 8012d06:	2000      	movs	r0, #0
 8012d08:	6360      	str	r0, [r4, #52]	; 0x34
 8012d0a:	e7c1      	b.n	8012c90 <__sflush_r+0x1c>
 8012d0c:	6a21      	ldr	r1, [r4, #32]
 8012d0e:	2301      	movs	r3, #1
 8012d10:	4628      	mov	r0, r5
 8012d12:	47b0      	blx	r6
 8012d14:	1c41      	adds	r1, r0, #1
 8012d16:	d1c7      	bne.n	8012ca8 <__sflush_r+0x34>
 8012d18:	682b      	ldr	r3, [r5, #0]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d0c4      	beq.n	8012ca8 <__sflush_r+0x34>
 8012d1e:	2b1d      	cmp	r3, #29
 8012d20:	d001      	beq.n	8012d26 <__sflush_r+0xb2>
 8012d22:	2b16      	cmp	r3, #22
 8012d24:	d101      	bne.n	8012d2a <__sflush_r+0xb6>
 8012d26:	602f      	str	r7, [r5, #0]
 8012d28:	e7b1      	b.n	8012c8e <__sflush_r+0x1a>
 8012d2a:	89a3      	ldrh	r3, [r4, #12]
 8012d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d30:	81a3      	strh	r3, [r4, #12]
 8012d32:	e7ad      	b.n	8012c90 <__sflush_r+0x1c>
 8012d34:	690f      	ldr	r7, [r1, #16]
 8012d36:	2f00      	cmp	r7, #0
 8012d38:	d0a9      	beq.n	8012c8e <__sflush_r+0x1a>
 8012d3a:	0793      	lsls	r3, r2, #30
 8012d3c:	680e      	ldr	r6, [r1, #0]
 8012d3e:	bf08      	it	eq
 8012d40:	694b      	ldreq	r3, [r1, #20]
 8012d42:	600f      	str	r7, [r1, #0]
 8012d44:	bf18      	it	ne
 8012d46:	2300      	movne	r3, #0
 8012d48:	eba6 0807 	sub.w	r8, r6, r7
 8012d4c:	608b      	str	r3, [r1, #8]
 8012d4e:	f1b8 0f00 	cmp.w	r8, #0
 8012d52:	dd9c      	ble.n	8012c8e <__sflush_r+0x1a>
 8012d54:	6a21      	ldr	r1, [r4, #32]
 8012d56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012d58:	4643      	mov	r3, r8
 8012d5a:	463a      	mov	r2, r7
 8012d5c:	4628      	mov	r0, r5
 8012d5e:	47b0      	blx	r6
 8012d60:	2800      	cmp	r0, #0
 8012d62:	dc06      	bgt.n	8012d72 <__sflush_r+0xfe>
 8012d64:	89a3      	ldrh	r3, [r4, #12]
 8012d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d6a:	81a3      	strh	r3, [r4, #12]
 8012d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8012d70:	e78e      	b.n	8012c90 <__sflush_r+0x1c>
 8012d72:	4407      	add	r7, r0
 8012d74:	eba8 0800 	sub.w	r8, r8, r0
 8012d78:	e7e9      	b.n	8012d4e <__sflush_r+0xda>
 8012d7a:	bf00      	nop
 8012d7c:	20400001 	.word	0x20400001

08012d80 <_fflush_r>:
 8012d80:	b538      	push	{r3, r4, r5, lr}
 8012d82:	690b      	ldr	r3, [r1, #16]
 8012d84:	4605      	mov	r5, r0
 8012d86:	460c      	mov	r4, r1
 8012d88:	b913      	cbnz	r3, 8012d90 <_fflush_r+0x10>
 8012d8a:	2500      	movs	r5, #0
 8012d8c:	4628      	mov	r0, r5
 8012d8e:	bd38      	pop	{r3, r4, r5, pc}
 8012d90:	b118      	cbz	r0, 8012d9a <_fflush_r+0x1a>
 8012d92:	6983      	ldr	r3, [r0, #24]
 8012d94:	b90b      	cbnz	r3, 8012d9a <_fflush_r+0x1a>
 8012d96:	f000 f887 	bl	8012ea8 <__sinit>
 8012d9a:	4b14      	ldr	r3, [pc, #80]	; (8012dec <_fflush_r+0x6c>)
 8012d9c:	429c      	cmp	r4, r3
 8012d9e:	d11b      	bne.n	8012dd8 <_fflush_r+0x58>
 8012da0:	686c      	ldr	r4, [r5, #4]
 8012da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d0ef      	beq.n	8012d8a <_fflush_r+0xa>
 8012daa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012dac:	07d0      	lsls	r0, r2, #31
 8012dae:	d404      	bmi.n	8012dba <_fflush_r+0x3a>
 8012db0:	0599      	lsls	r1, r3, #22
 8012db2:	d402      	bmi.n	8012dba <_fflush_r+0x3a>
 8012db4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012db6:	f000 f915 	bl	8012fe4 <__retarget_lock_acquire_recursive>
 8012dba:	4628      	mov	r0, r5
 8012dbc:	4621      	mov	r1, r4
 8012dbe:	f7ff ff59 	bl	8012c74 <__sflush_r>
 8012dc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012dc4:	07da      	lsls	r2, r3, #31
 8012dc6:	4605      	mov	r5, r0
 8012dc8:	d4e0      	bmi.n	8012d8c <_fflush_r+0xc>
 8012dca:	89a3      	ldrh	r3, [r4, #12]
 8012dcc:	059b      	lsls	r3, r3, #22
 8012dce:	d4dd      	bmi.n	8012d8c <_fflush_r+0xc>
 8012dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012dd2:	f000 f908 	bl	8012fe6 <__retarget_lock_release_recursive>
 8012dd6:	e7d9      	b.n	8012d8c <_fflush_r+0xc>
 8012dd8:	4b05      	ldr	r3, [pc, #20]	; (8012df0 <_fflush_r+0x70>)
 8012dda:	429c      	cmp	r4, r3
 8012ddc:	d101      	bne.n	8012de2 <_fflush_r+0x62>
 8012dde:	68ac      	ldr	r4, [r5, #8]
 8012de0:	e7df      	b.n	8012da2 <_fflush_r+0x22>
 8012de2:	4b04      	ldr	r3, [pc, #16]	; (8012df4 <_fflush_r+0x74>)
 8012de4:	429c      	cmp	r4, r3
 8012de6:	bf08      	it	eq
 8012de8:	68ec      	ldreq	r4, [r5, #12]
 8012dea:	e7da      	b.n	8012da2 <_fflush_r+0x22>
 8012dec:	08015284 	.word	0x08015284
 8012df0:	080152a4 	.word	0x080152a4
 8012df4:	08015264 	.word	0x08015264

08012df8 <std>:
 8012df8:	2300      	movs	r3, #0
 8012dfa:	b510      	push	{r4, lr}
 8012dfc:	4604      	mov	r4, r0
 8012dfe:	e9c0 3300 	strd	r3, r3, [r0]
 8012e02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012e06:	6083      	str	r3, [r0, #8]
 8012e08:	8181      	strh	r1, [r0, #12]
 8012e0a:	6643      	str	r3, [r0, #100]	; 0x64
 8012e0c:	81c2      	strh	r2, [r0, #14]
 8012e0e:	6183      	str	r3, [r0, #24]
 8012e10:	4619      	mov	r1, r3
 8012e12:	2208      	movs	r2, #8
 8012e14:	305c      	adds	r0, #92	; 0x5c
 8012e16:	f7fd fdf3 	bl	8010a00 <memset>
 8012e1a:	4b05      	ldr	r3, [pc, #20]	; (8012e30 <std+0x38>)
 8012e1c:	6263      	str	r3, [r4, #36]	; 0x24
 8012e1e:	4b05      	ldr	r3, [pc, #20]	; (8012e34 <std+0x3c>)
 8012e20:	62a3      	str	r3, [r4, #40]	; 0x28
 8012e22:	4b05      	ldr	r3, [pc, #20]	; (8012e38 <std+0x40>)
 8012e24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012e26:	4b05      	ldr	r3, [pc, #20]	; (8012e3c <std+0x44>)
 8012e28:	6224      	str	r4, [r4, #32]
 8012e2a:	6323      	str	r3, [r4, #48]	; 0x30
 8012e2c:	bd10      	pop	{r4, pc}
 8012e2e:	bf00      	nop
 8012e30:	08013139 	.word	0x08013139
 8012e34:	0801315b 	.word	0x0801315b
 8012e38:	08013193 	.word	0x08013193
 8012e3c:	080131b7 	.word	0x080131b7

08012e40 <_cleanup_r>:
 8012e40:	4901      	ldr	r1, [pc, #4]	; (8012e48 <_cleanup_r+0x8>)
 8012e42:	f000 b8af 	b.w	8012fa4 <_fwalk_reent>
 8012e46:	bf00      	nop
 8012e48:	08012d81 	.word	0x08012d81

08012e4c <__sfmoreglue>:
 8012e4c:	b570      	push	{r4, r5, r6, lr}
 8012e4e:	1e4a      	subs	r2, r1, #1
 8012e50:	2568      	movs	r5, #104	; 0x68
 8012e52:	4355      	muls	r5, r2
 8012e54:	460e      	mov	r6, r1
 8012e56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012e5a:	f7ff fc23 	bl	80126a4 <_malloc_r>
 8012e5e:	4604      	mov	r4, r0
 8012e60:	b140      	cbz	r0, 8012e74 <__sfmoreglue+0x28>
 8012e62:	2100      	movs	r1, #0
 8012e64:	e9c0 1600 	strd	r1, r6, [r0]
 8012e68:	300c      	adds	r0, #12
 8012e6a:	60a0      	str	r0, [r4, #8]
 8012e6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012e70:	f7fd fdc6 	bl	8010a00 <memset>
 8012e74:	4620      	mov	r0, r4
 8012e76:	bd70      	pop	{r4, r5, r6, pc}

08012e78 <__sfp_lock_acquire>:
 8012e78:	4801      	ldr	r0, [pc, #4]	; (8012e80 <__sfp_lock_acquire+0x8>)
 8012e7a:	f000 b8b3 	b.w	8012fe4 <__retarget_lock_acquire_recursive>
 8012e7e:	bf00      	nop
 8012e80:	24001300 	.word	0x24001300

08012e84 <__sfp_lock_release>:
 8012e84:	4801      	ldr	r0, [pc, #4]	; (8012e8c <__sfp_lock_release+0x8>)
 8012e86:	f000 b8ae 	b.w	8012fe6 <__retarget_lock_release_recursive>
 8012e8a:	bf00      	nop
 8012e8c:	24001300 	.word	0x24001300

08012e90 <__sinit_lock_acquire>:
 8012e90:	4801      	ldr	r0, [pc, #4]	; (8012e98 <__sinit_lock_acquire+0x8>)
 8012e92:	f000 b8a7 	b.w	8012fe4 <__retarget_lock_acquire_recursive>
 8012e96:	bf00      	nop
 8012e98:	240012fb 	.word	0x240012fb

08012e9c <__sinit_lock_release>:
 8012e9c:	4801      	ldr	r0, [pc, #4]	; (8012ea4 <__sinit_lock_release+0x8>)
 8012e9e:	f000 b8a2 	b.w	8012fe6 <__retarget_lock_release_recursive>
 8012ea2:	bf00      	nop
 8012ea4:	240012fb 	.word	0x240012fb

08012ea8 <__sinit>:
 8012ea8:	b510      	push	{r4, lr}
 8012eaa:	4604      	mov	r4, r0
 8012eac:	f7ff fff0 	bl	8012e90 <__sinit_lock_acquire>
 8012eb0:	69a3      	ldr	r3, [r4, #24]
 8012eb2:	b11b      	cbz	r3, 8012ebc <__sinit+0x14>
 8012eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012eb8:	f7ff bff0 	b.w	8012e9c <__sinit_lock_release>
 8012ebc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012ec0:	6523      	str	r3, [r4, #80]	; 0x50
 8012ec2:	4b13      	ldr	r3, [pc, #76]	; (8012f10 <__sinit+0x68>)
 8012ec4:	4a13      	ldr	r2, [pc, #76]	; (8012f14 <__sinit+0x6c>)
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	62a2      	str	r2, [r4, #40]	; 0x28
 8012eca:	42a3      	cmp	r3, r4
 8012ecc:	bf04      	itt	eq
 8012ece:	2301      	moveq	r3, #1
 8012ed0:	61a3      	streq	r3, [r4, #24]
 8012ed2:	4620      	mov	r0, r4
 8012ed4:	f000 f820 	bl	8012f18 <__sfp>
 8012ed8:	6060      	str	r0, [r4, #4]
 8012eda:	4620      	mov	r0, r4
 8012edc:	f000 f81c 	bl	8012f18 <__sfp>
 8012ee0:	60a0      	str	r0, [r4, #8]
 8012ee2:	4620      	mov	r0, r4
 8012ee4:	f000 f818 	bl	8012f18 <__sfp>
 8012ee8:	2200      	movs	r2, #0
 8012eea:	60e0      	str	r0, [r4, #12]
 8012eec:	2104      	movs	r1, #4
 8012eee:	6860      	ldr	r0, [r4, #4]
 8012ef0:	f7ff ff82 	bl	8012df8 <std>
 8012ef4:	68a0      	ldr	r0, [r4, #8]
 8012ef6:	2201      	movs	r2, #1
 8012ef8:	2109      	movs	r1, #9
 8012efa:	f7ff ff7d 	bl	8012df8 <std>
 8012efe:	68e0      	ldr	r0, [r4, #12]
 8012f00:	2202      	movs	r2, #2
 8012f02:	2112      	movs	r1, #18
 8012f04:	f7ff ff78 	bl	8012df8 <std>
 8012f08:	2301      	movs	r3, #1
 8012f0a:	61a3      	str	r3, [r4, #24]
 8012f0c:	e7d2      	b.n	8012eb4 <__sinit+0xc>
 8012f0e:	bf00      	nop
 8012f10:	08014ee0 	.word	0x08014ee0
 8012f14:	08012e41 	.word	0x08012e41

08012f18 <__sfp>:
 8012f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f1a:	4607      	mov	r7, r0
 8012f1c:	f7ff ffac 	bl	8012e78 <__sfp_lock_acquire>
 8012f20:	4b1e      	ldr	r3, [pc, #120]	; (8012f9c <__sfp+0x84>)
 8012f22:	681e      	ldr	r6, [r3, #0]
 8012f24:	69b3      	ldr	r3, [r6, #24]
 8012f26:	b913      	cbnz	r3, 8012f2e <__sfp+0x16>
 8012f28:	4630      	mov	r0, r6
 8012f2a:	f7ff ffbd 	bl	8012ea8 <__sinit>
 8012f2e:	3648      	adds	r6, #72	; 0x48
 8012f30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012f34:	3b01      	subs	r3, #1
 8012f36:	d503      	bpl.n	8012f40 <__sfp+0x28>
 8012f38:	6833      	ldr	r3, [r6, #0]
 8012f3a:	b30b      	cbz	r3, 8012f80 <__sfp+0x68>
 8012f3c:	6836      	ldr	r6, [r6, #0]
 8012f3e:	e7f7      	b.n	8012f30 <__sfp+0x18>
 8012f40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012f44:	b9d5      	cbnz	r5, 8012f7c <__sfp+0x64>
 8012f46:	4b16      	ldr	r3, [pc, #88]	; (8012fa0 <__sfp+0x88>)
 8012f48:	60e3      	str	r3, [r4, #12]
 8012f4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012f4e:	6665      	str	r5, [r4, #100]	; 0x64
 8012f50:	f000 f847 	bl	8012fe2 <__retarget_lock_init_recursive>
 8012f54:	f7ff ff96 	bl	8012e84 <__sfp_lock_release>
 8012f58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012f5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012f60:	6025      	str	r5, [r4, #0]
 8012f62:	61a5      	str	r5, [r4, #24]
 8012f64:	2208      	movs	r2, #8
 8012f66:	4629      	mov	r1, r5
 8012f68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012f6c:	f7fd fd48 	bl	8010a00 <memset>
 8012f70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012f74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012f78:	4620      	mov	r0, r4
 8012f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f7c:	3468      	adds	r4, #104	; 0x68
 8012f7e:	e7d9      	b.n	8012f34 <__sfp+0x1c>
 8012f80:	2104      	movs	r1, #4
 8012f82:	4638      	mov	r0, r7
 8012f84:	f7ff ff62 	bl	8012e4c <__sfmoreglue>
 8012f88:	4604      	mov	r4, r0
 8012f8a:	6030      	str	r0, [r6, #0]
 8012f8c:	2800      	cmp	r0, #0
 8012f8e:	d1d5      	bne.n	8012f3c <__sfp+0x24>
 8012f90:	f7ff ff78 	bl	8012e84 <__sfp_lock_release>
 8012f94:	230c      	movs	r3, #12
 8012f96:	603b      	str	r3, [r7, #0]
 8012f98:	e7ee      	b.n	8012f78 <__sfp+0x60>
 8012f9a:	bf00      	nop
 8012f9c:	08014ee0 	.word	0x08014ee0
 8012fa0:	ffff0001 	.word	0xffff0001

08012fa4 <_fwalk_reent>:
 8012fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fa8:	4606      	mov	r6, r0
 8012faa:	4688      	mov	r8, r1
 8012fac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012fb0:	2700      	movs	r7, #0
 8012fb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012fb6:	f1b9 0901 	subs.w	r9, r9, #1
 8012fba:	d505      	bpl.n	8012fc8 <_fwalk_reent+0x24>
 8012fbc:	6824      	ldr	r4, [r4, #0]
 8012fbe:	2c00      	cmp	r4, #0
 8012fc0:	d1f7      	bne.n	8012fb2 <_fwalk_reent+0xe>
 8012fc2:	4638      	mov	r0, r7
 8012fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fc8:	89ab      	ldrh	r3, [r5, #12]
 8012fca:	2b01      	cmp	r3, #1
 8012fcc:	d907      	bls.n	8012fde <_fwalk_reent+0x3a>
 8012fce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012fd2:	3301      	adds	r3, #1
 8012fd4:	d003      	beq.n	8012fde <_fwalk_reent+0x3a>
 8012fd6:	4629      	mov	r1, r5
 8012fd8:	4630      	mov	r0, r6
 8012fda:	47c0      	blx	r8
 8012fdc:	4307      	orrs	r7, r0
 8012fde:	3568      	adds	r5, #104	; 0x68
 8012fe0:	e7e9      	b.n	8012fb6 <_fwalk_reent+0x12>

08012fe2 <__retarget_lock_init_recursive>:
 8012fe2:	4770      	bx	lr

08012fe4 <__retarget_lock_acquire_recursive>:
 8012fe4:	4770      	bx	lr

08012fe6 <__retarget_lock_release_recursive>:
 8012fe6:	4770      	bx	lr

08012fe8 <__swhatbuf_r>:
 8012fe8:	b570      	push	{r4, r5, r6, lr}
 8012fea:	460e      	mov	r6, r1
 8012fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ff0:	2900      	cmp	r1, #0
 8012ff2:	b096      	sub	sp, #88	; 0x58
 8012ff4:	4614      	mov	r4, r2
 8012ff6:	461d      	mov	r5, r3
 8012ff8:	da07      	bge.n	801300a <__swhatbuf_r+0x22>
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	602b      	str	r3, [r5, #0]
 8012ffe:	89b3      	ldrh	r3, [r6, #12]
 8013000:	061a      	lsls	r2, r3, #24
 8013002:	d410      	bmi.n	8013026 <__swhatbuf_r+0x3e>
 8013004:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013008:	e00e      	b.n	8013028 <__swhatbuf_r+0x40>
 801300a:	466a      	mov	r2, sp
 801300c:	f000 f8fa 	bl	8013204 <_fstat_r>
 8013010:	2800      	cmp	r0, #0
 8013012:	dbf2      	blt.n	8012ffa <__swhatbuf_r+0x12>
 8013014:	9a01      	ldr	r2, [sp, #4]
 8013016:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801301a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801301e:	425a      	negs	r2, r3
 8013020:	415a      	adcs	r2, r3
 8013022:	602a      	str	r2, [r5, #0]
 8013024:	e7ee      	b.n	8013004 <__swhatbuf_r+0x1c>
 8013026:	2340      	movs	r3, #64	; 0x40
 8013028:	2000      	movs	r0, #0
 801302a:	6023      	str	r3, [r4, #0]
 801302c:	b016      	add	sp, #88	; 0x58
 801302e:	bd70      	pop	{r4, r5, r6, pc}

08013030 <__smakebuf_r>:
 8013030:	898b      	ldrh	r3, [r1, #12]
 8013032:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013034:	079d      	lsls	r5, r3, #30
 8013036:	4606      	mov	r6, r0
 8013038:	460c      	mov	r4, r1
 801303a:	d507      	bpl.n	801304c <__smakebuf_r+0x1c>
 801303c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013040:	6023      	str	r3, [r4, #0]
 8013042:	6123      	str	r3, [r4, #16]
 8013044:	2301      	movs	r3, #1
 8013046:	6163      	str	r3, [r4, #20]
 8013048:	b002      	add	sp, #8
 801304a:	bd70      	pop	{r4, r5, r6, pc}
 801304c:	ab01      	add	r3, sp, #4
 801304e:	466a      	mov	r2, sp
 8013050:	f7ff ffca 	bl	8012fe8 <__swhatbuf_r>
 8013054:	9900      	ldr	r1, [sp, #0]
 8013056:	4605      	mov	r5, r0
 8013058:	4630      	mov	r0, r6
 801305a:	f7ff fb23 	bl	80126a4 <_malloc_r>
 801305e:	b948      	cbnz	r0, 8013074 <__smakebuf_r+0x44>
 8013060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013064:	059a      	lsls	r2, r3, #22
 8013066:	d4ef      	bmi.n	8013048 <__smakebuf_r+0x18>
 8013068:	f023 0303 	bic.w	r3, r3, #3
 801306c:	f043 0302 	orr.w	r3, r3, #2
 8013070:	81a3      	strh	r3, [r4, #12]
 8013072:	e7e3      	b.n	801303c <__smakebuf_r+0xc>
 8013074:	4b0d      	ldr	r3, [pc, #52]	; (80130ac <__smakebuf_r+0x7c>)
 8013076:	62b3      	str	r3, [r6, #40]	; 0x28
 8013078:	89a3      	ldrh	r3, [r4, #12]
 801307a:	6020      	str	r0, [r4, #0]
 801307c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013080:	81a3      	strh	r3, [r4, #12]
 8013082:	9b00      	ldr	r3, [sp, #0]
 8013084:	6163      	str	r3, [r4, #20]
 8013086:	9b01      	ldr	r3, [sp, #4]
 8013088:	6120      	str	r0, [r4, #16]
 801308a:	b15b      	cbz	r3, 80130a4 <__smakebuf_r+0x74>
 801308c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013090:	4630      	mov	r0, r6
 8013092:	f000 f8c9 	bl	8013228 <_isatty_r>
 8013096:	b128      	cbz	r0, 80130a4 <__smakebuf_r+0x74>
 8013098:	89a3      	ldrh	r3, [r4, #12]
 801309a:	f023 0303 	bic.w	r3, r3, #3
 801309e:	f043 0301 	orr.w	r3, r3, #1
 80130a2:	81a3      	strh	r3, [r4, #12]
 80130a4:	89a0      	ldrh	r0, [r4, #12]
 80130a6:	4305      	orrs	r5, r0
 80130a8:	81a5      	strh	r5, [r4, #12]
 80130aa:	e7cd      	b.n	8013048 <__smakebuf_r+0x18>
 80130ac:	08012e41 	.word	0x08012e41

080130b0 <_raise_r>:
 80130b0:	291f      	cmp	r1, #31
 80130b2:	b538      	push	{r3, r4, r5, lr}
 80130b4:	4604      	mov	r4, r0
 80130b6:	460d      	mov	r5, r1
 80130b8:	d904      	bls.n	80130c4 <_raise_r+0x14>
 80130ba:	2316      	movs	r3, #22
 80130bc:	6003      	str	r3, [r0, #0]
 80130be:	f04f 30ff 	mov.w	r0, #4294967295
 80130c2:	bd38      	pop	{r3, r4, r5, pc}
 80130c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80130c6:	b112      	cbz	r2, 80130ce <_raise_r+0x1e>
 80130c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80130cc:	b94b      	cbnz	r3, 80130e2 <_raise_r+0x32>
 80130ce:	4620      	mov	r0, r4
 80130d0:	f000 f830 	bl	8013134 <_getpid_r>
 80130d4:	462a      	mov	r2, r5
 80130d6:	4601      	mov	r1, r0
 80130d8:	4620      	mov	r0, r4
 80130da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80130de:	f000 b817 	b.w	8013110 <_kill_r>
 80130e2:	2b01      	cmp	r3, #1
 80130e4:	d00a      	beq.n	80130fc <_raise_r+0x4c>
 80130e6:	1c59      	adds	r1, r3, #1
 80130e8:	d103      	bne.n	80130f2 <_raise_r+0x42>
 80130ea:	2316      	movs	r3, #22
 80130ec:	6003      	str	r3, [r0, #0]
 80130ee:	2001      	movs	r0, #1
 80130f0:	e7e7      	b.n	80130c2 <_raise_r+0x12>
 80130f2:	2400      	movs	r4, #0
 80130f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80130f8:	4628      	mov	r0, r5
 80130fa:	4798      	blx	r3
 80130fc:	2000      	movs	r0, #0
 80130fe:	e7e0      	b.n	80130c2 <_raise_r+0x12>

08013100 <raise>:
 8013100:	4b02      	ldr	r3, [pc, #8]	; (801310c <raise+0xc>)
 8013102:	4601      	mov	r1, r0
 8013104:	6818      	ldr	r0, [r3, #0]
 8013106:	f7ff bfd3 	b.w	80130b0 <_raise_r>
 801310a:	bf00      	nop
 801310c:	24000024 	.word	0x24000024

08013110 <_kill_r>:
 8013110:	b538      	push	{r3, r4, r5, lr}
 8013112:	4d07      	ldr	r5, [pc, #28]	; (8013130 <_kill_r+0x20>)
 8013114:	2300      	movs	r3, #0
 8013116:	4604      	mov	r4, r0
 8013118:	4608      	mov	r0, r1
 801311a:	4611      	mov	r1, r2
 801311c:	602b      	str	r3, [r5, #0]
 801311e:	f7f1 f959 	bl	80043d4 <_kill>
 8013122:	1c43      	adds	r3, r0, #1
 8013124:	d102      	bne.n	801312c <_kill_r+0x1c>
 8013126:	682b      	ldr	r3, [r5, #0]
 8013128:	b103      	cbz	r3, 801312c <_kill_r+0x1c>
 801312a:	6023      	str	r3, [r4, #0]
 801312c:	bd38      	pop	{r3, r4, r5, pc}
 801312e:	bf00      	nop
 8013130:	240012f4 	.word	0x240012f4

08013134 <_getpid_r>:
 8013134:	f7f1 b946 	b.w	80043c4 <_getpid>

08013138 <__sread>:
 8013138:	b510      	push	{r4, lr}
 801313a:	460c      	mov	r4, r1
 801313c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013140:	f000 f894 	bl	801326c <_read_r>
 8013144:	2800      	cmp	r0, #0
 8013146:	bfab      	itete	ge
 8013148:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801314a:	89a3      	ldrhlt	r3, [r4, #12]
 801314c:	181b      	addge	r3, r3, r0
 801314e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013152:	bfac      	ite	ge
 8013154:	6563      	strge	r3, [r4, #84]	; 0x54
 8013156:	81a3      	strhlt	r3, [r4, #12]
 8013158:	bd10      	pop	{r4, pc}

0801315a <__swrite>:
 801315a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801315e:	461f      	mov	r7, r3
 8013160:	898b      	ldrh	r3, [r1, #12]
 8013162:	05db      	lsls	r3, r3, #23
 8013164:	4605      	mov	r5, r0
 8013166:	460c      	mov	r4, r1
 8013168:	4616      	mov	r6, r2
 801316a:	d505      	bpl.n	8013178 <__swrite+0x1e>
 801316c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013170:	2302      	movs	r3, #2
 8013172:	2200      	movs	r2, #0
 8013174:	f000 f868 	bl	8013248 <_lseek_r>
 8013178:	89a3      	ldrh	r3, [r4, #12]
 801317a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801317e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013182:	81a3      	strh	r3, [r4, #12]
 8013184:	4632      	mov	r2, r6
 8013186:	463b      	mov	r3, r7
 8013188:	4628      	mov	r0, r5
 801318a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801318e:	f000 b817 	b.w	80131c0 <_write_r>

08013192 <__sseek>:
 8013192:	b510      	push	{r4, lr}
 8013194:	460c      	mov	r4, r1
 8013196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801319a:	f000 f855 	bl	8013248 <_lseek_r>
 801319e:	1c43      	adds	r3, r0, #1
 80131a0:	89a3      	ldrh	r3, [r4, #12]
 80131a2:	bf15      	itete	ne
 80131a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80131a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80131aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80131ae:	81a3      	strheq	r3, [r4, #12]
 80131b0:	bf18      	it	ne
 80131b2:	81a3      	strhne	r3, [r4, #12]
 80131b4:	bd10      	pop	{r4, pc}

080131b6 <__sclose>:
 80131b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80131ba:	f000 b813 	b.w	80131e4 <_close_r>
	...

080131c0 <_write_r>:
 80131c0:	b538      	push	{r3, r4, r5, lr}
 80131c2:	4d07      	ldr	r5, [pc, #28]	; (80131e0 <_write_r+0x20>)
 80131c4:	4604      	mov	r4, r0
 80131c6:	4608      	mov	r0, r1
 80131c8:	4611      	mov	r1, r2
 80131ca:	2200      	movs	r2, #0
 80131cc:	602a      	str	r2, [r5, #0]
 80131ce:	461a      	mov	r2, r3
 80131d0:	f7f1 f937 	bl	8004442 <_write>
 80131d4:	1c43      	adds	r3, r0, #1
 80131d6:	d102      	bne.n	80131de <_write_r+0x1e>
 80131d8:	682b      	ldr	r3, [r5, #0]
 80131da:	b103      	cbz	r3, 80131de <_write_r+0x1e>
 80131dc:	6023      	str	r3, [r4, #0]
 80131de:	bd38      	pop	{r3, r4, r5, pc}
 80131e0:	240012f4 	.word	0x240012f4

080131e4 <_close_r>:
 80131e4:	b538      	push	{r3, r4, r5, lr}
 80131e6:	4d06      	ldr	r5, [pc, #24]	; (8013200 <_close_r+0x1c>)
 80131e8:	2300      	movs	r3, #0
 80131ea:	4604      	mov	r4, r0
 80131ec:	4608      	mov	r0, r1
 80131ee:	602b      	str	r3, [r5, #0]
 80131f0:	f7f1 f943 	bl	800447a <_close>
 80131f4:	1c43      	adds	r3, r0, #1
 80131f6:	d102      	bne.n	80131fe <_close_r+0x1a>
 80131f8:	682b      	ldr	r3, [r5, #0]
 80131fa:	b103      	cbz	r3, 80131fe <_close_r+0x1a>
 80131fc:	6023      	str	r3, [r4, #0]
 80131fe:	bd38      	pop	{r3, r4, r5, pc}
 8013200:	240012f4 	.word	0x240012f4

08013204 <_fstat_r>:
 8013204:	b538      	push	{r3, r4, r5, lr}
 8013206:	4d07      	ldr	r5, [pc, #28]	; (8013224 <_fstat_r+0x20>)
 8013208:	2300      	movs	r3, #0
 801320a:	4604      	mov	r4, r0
 801320c:	4608      	mov	r0, r1
 801320e:	4611      	mov	r1, r2
 8013210:	602b      	str	r3, [r5, #0]
 8013212:	f7f1 f93e 	bl	8004492 <_fstat>
 8013216:	1c43      	adds	r3, r0, #1
 8013218:	d102      	bne.n	8013220 <_fstat_r+0x1c>
 801321a:	682b      	ldr	r3, [r5, #0]
 801321c:	b103      	cbz	r3, 8013220 <_fstat_r+0x1c>
 801321e:	6023      	str	r3, [r4, #0]
 8013220:	bd38      	pop	{r3, r4, r5, pc}
 8013222:	bf00      	nop
 8013224:	240012f4 	.word	0x240012f4

08013228 <_isatty_r>:
 8013228:	b538      	push	{r3, r4, r5, lr}
 801322a:	4d06      	ldr	r5, [pc, #24]	; (8013244 <_isatty_r+0x1c>)
 801322c:	2300      	movs	r3, #0
 801322e:	4604      	mov	r4, r0
 8013230:	4608      	mov	r0, r1
 8013232:	602b      	str	r3, [r5, #0]
 8013234:	f7f1 f93d 	bl	80044b2 <_isatty>
 8013238:	1c43      	adds	r3, r0, #1
 801323a:	d102      	bne.n	8013242 <_isatty_r+0x1a>
 801323c:	682b      	ldr	r3, [r5, #0]
 801323e:	b103      	cbz	r3, 8013242 <_isatty_r+0x1a>
 8013240:	6023      	str	r3, [r4, #0]
 8013242:	bd38      	pop	{r3, r4, r5, pc}
 8013244:	240012f4 	.word	0x240012f4

08013248 <_lseek_r>:
 8013248:	b538      	push	{r3, r4, r5, lr}
 801324a:	4d07      	ldr	r5, [pc, #28]	; (8013268 <_lseek_r+0x20>)
 801324c:	4604      	mov	r4, r0
 801324e:	4608      	mov	r0, r1
 8013250:	4611      	mov	r1, r2
 8013252:	2200      	movs	r2, #0
 8013254:	602a      	str	r2, [r5, #0]
 8013256:	461a      	mov	r2, r3
 8013258:	f7f1 f936 	bl	80044c8 <_lseek>
 801325c:	1c43      	adds	r3, r0, #1
 801325e:	d102      	bne.n	8013266 <_lseek_r+0x1e>
 8013260:	682b      	ldr	r3, [r5, #0]
 8013262:	b103      	cbz	r3, 8013266 <_lseek_r+0x1e>
 8013264:	6023      	str	r3, [r4, #0]
 8013266:	bd38      	pop	{r3, r4, r5, pc}
 8013268:	240012f4 	.word	0x240012f4

0801326c <_read_r>:
 801326c:	b538      	push	{r3, r4, r5, lr}
 801326e:	4d07      	ldr	r5, [pc, #28]	; (801328c <_read_r+0x20>)
 8013270:	4604      	mov	r4, r0
 8013272:	4608      	mov	r0, r1
 8013274:	4611      	mov	r1, r2
 8013276:	2200      	movs	r2, #0
 8013278:	602a      	str	r2, [r5, #0]
 801327a:	461a      	mov	r2, r3
 801327c:	f7f1 f8c4 	bl	8004408 <_read>
 8013280:	1c43      	adds	r3, r0, #1
 8013282:	d102      	bne.n	801328a <_read_r+0x1e>
 8013284:	682b      	ldr	r3, [r5, #0]
 8013286:	b103      	cbz	r3, 801328a <_read_r+0x1e>
 8013288:	6023      	str	r3, [r4, #0]
 801328a:	bd38      	pop	{r3, r4, r5, pc}
 801328c:	240012f4 	.word	0x240012f4

08013290 <_init>:
 8013290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013292:	bf00      	nop
 8013294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013296:	bc08      	pop	{r3}
 8013298:	469e      	mov	lr, r3
 801329a:	4770      	bx	lr

0801329c <_fini>:
 801329c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801329e:	bf00      	nop
 80132a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80132a2:	bc08      	pop	{r3}
 80132a4:	469e      	mov	lr, r3
 80132a6:	4770      	bx	lr
