
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d50  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009fe8  08009fe8  00019fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a028  0800a028  0001a028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a030  0800a030  0001a030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a034  0800a034  0001a034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000000  0800a038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000444  20000014  0800a04c  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000458  0800a04c  00020458  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001fb1a  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002f84  00000000  00000000  0003fb5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001258  00000000  00000000  00042ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001180  00000000  00000000  00043d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000035d3  00000000  00000000  00044eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016c72  00000000  00000000  0004848b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00165403  00000000  00000000  0005f0fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001c4500  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004e78  00000000  00000000  001c4554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000014 	.word	0x20000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009fd0 	.word	0x08009fd0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000018 	.word	0x20000018
 80002d4:	08009fd0 	.word	0x08009fd0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f001 f928 	bl	8001828 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f842 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  SysTick->LOAD = 480000 - 1;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 fabc 	bl	8000b58 <MX_GPIO_Init>
  MX_DMA_Init();
 80005e0:	f000 fa72 	bl	8000ac8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80005e4:	f000 fa24 	bl	8000a30 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80005e8:	f000 f90c 	bl	8000804 <MX_TIM2_Init>
  MX_UART4_Init();
 80005ec:	f000 f9d0 	bl	8000990 <MX_UART4_Init>
  MX_SPI1_Init();
 80005f0:	f000 f8b2 	bl	8000758 <MX_SPI1_Init>
  MX_TIM4_Init();
 80005f4:	f000 f954 	bl	80008a0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start_IT(&htim2);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	2101      	movs	r1, #1
 80005fc:	4814      	ldr	r0, [pc, #80]	; (8000650 <main+0x80>)
 80005fe:	f003 fe95 	bl	800432c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000608:	4811      	ldr	r0, [pc, #68]	; (8000650 <main+0x80>)
 800060a:	f003 fe8f 	bl	800432c <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim2);
 800060e:	4811      	ldr	r0, [pc, #68]	; (8000654 <main+0x84>)
 8000610:	f006 fe48 	bl	80072a4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8000614:	2104      	movs	r1, #4
 8000616:	4810      	ldr	r0, [pc, #64]	; (8000658 <main+0x88>)
 8000618:	f007 f81e 	bl	8007658 <HAL_TIM_PWM_Stop>
  TIM4->PSC = 240-1;
 800061c:	4b0f      	ldr	r3, [pc, #60]	; (800065c <main+0x8c>)
 800061e:	22ef      	movs	r2, #239	; 0xef
 8000620:	629a      	str	r2, [r3, #40]	; 0x28
  TIM4->ARR = 625-1;
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <main+0x8c>)
 8000624:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000628:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM4->CCR2 = round(((TIM4->ARR)+1)/2);
 800062a:	4b0c      	ldr	r3, [pc, #48]	; (800065c <main+0x8c>)
 800062c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800062e:	3301      	adds	r3, #1
 8000630:	085b      	lsrs	r3, r3, #1
 8000632:	ee07 3a90 	vmov	s15, r3
 8000636:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <main+0x8c>)
 800063c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000640:	ee17 2a90 	vmov	r2, s15
 8000644:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000646:	2104      	movs	r1, #4
 8000648:	4803      	ldr	r0, [pc, #12]	; (8000658 <main+0x88>)
 800064a:	f006 fefd 	bl	8007448 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064e:	e7fe      	b.n	800064e <main+0x7e>
 8000650:	58020400 	.word	0x58020400
 8000654:	20000390 	.word	0x20000390
 8000658:	200000ac 	.word	0x200000ac
 800065c:	40000800 	.word	0x40000800

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b09c      	sub	sp, #112	; 0x70
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800066a:	224c      	movs	r2, #76	; 0x4c
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f009 fca6 	bl	8009fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2220      	movs	r2, #32
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f009 fca0 	bl	8009fc0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000680:	2002      	movs	r0, #2
 8000682:	f003 fea1 	bl	80043c8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000686:	2300      	movs	r3, #0
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	4b31      	ldr	r3, [pc, #196]	; (8000750 <SystemClock_Config+0xf0>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	4a30      	ldr	r2, [pc, #192]	; (8000750 <SystemClock_Config+0xf0>)
 8000690:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000694:	6193      	str	r3, [r2, #24]
 8000696:	4b2e      	ldr	r3, [pc, #184]	; (8000750 <SystemClock_Config+0xf0>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	4b2c      	ldr	r3, [pc, #176]	; (8000754 <SystemClock_Config+0xf4>)
 80006a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006a4:	4a2b      	ldr	r2, [pc, #172]	; (8000754 <SystemClock_Config+0xf4>)
 80006a6:	f043 0301 	orr.w	r3, r3, #1
 80006aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006ac:	4b29      	ldr	r3, [pc, #164]	; (8000754 <SystemClock_Config+0xf4>)
 80006ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b0:	f003 0301 	and.w	r3, r3, #1
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006b8:	bf00      	nop
 80006ba:	4b25      	ldr	r3, [pc, #148]	; (8000750 <SystemClock_Config+0xf0>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006c6:	d1f8      	bne.n	80006ba <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c8:	2302      	movs	r3, #2
 80006ca:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006cc:	2301      	movs	r3, #1
 80006ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d0:	2340      	movs	r3, #64	; 0x40
 80006d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d8:	2300      	movs	r3, #0
 80006da:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006dc:	2304      	movs	r3, #4
 80006de:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80006e0:	233c      	movs	r3, #60	; 0x3c
 80006e2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80006e8:	2306      	movs	r3, #6
 80006ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006f0:	230c      	movs	r3, #12
 80006f2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000700:	4618      	mov	r0, r3
 8000702:	f003 fe9b 	bl	800443c <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800070c:	f000 fc32 	bl	8000f74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000710:	233f      	movs	r3, #63	; 0x3f
 8000712:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000714:	2303      	movs	r3, #3
 8000716:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800071c:	2308      	movs	r3, #8
 800071e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000720:	2340      	movs	r3, #64	; 0x40
 8000722:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000724:	2340      	movs	r3, #64	; 0x40
 8000726:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000728:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800072c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800072e:	2340      	movs	r3, #64	; 0x40
 8000730:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2104      	movs	r1, #4
 8000736:	4618      	mov	r0, r3
 8000738:	f004 fa90 	bl	8004c5c <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000742:	f000 fc17 	bl	8000f74 <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3770      	adds	r7, #112	; 0x70
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	58024800 	.word	0x58024800
 8000754:	58000400 	.word	0x58000400

08000758 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800075c:	4b27      	ldr	r3, [pc, #156]	; (80007fc <MX_SPI1_Init+0xa4>)
 800075e:	4a28      	ldr	r2, [pc, #160]	; (8000800 <MX_SPI1_Init+0xa8>)
 8000760:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000762:	4b26      	ldr	r3, [pc, #152]	; (80007fc <MX_SPI1_Init+0xa4>)
 8000764:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000768:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800076a:	4b24      	ldr	r3, [pc, #144]	; (80007fc <MX_SPI1_Init+0xa4>)
 800076c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000770:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000772:	4b22      	ldr	r3, [pc, #136]	; (80007fc <MX_SPI1_Init+0xa4>)
 8000774:	2207      	movs	r2, #7
 8000776:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000778:	4b20      	ldr	r3, [pc, #128]	; (80007fc <MX_SPI1_Init+0xa4>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800077e:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <MX_SPI1_Init+0xa4>)
 8000780:	2200      	movs	r2, #0
 8000782:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000784:	4b1d      	ldr	r3, [pc, #116]	; (80007fc <MX_SPI1_Init+0xa4>)
 8000786:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800078a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800078c:	4b1b      	ldr	r3, [pc, #108]	; (80007fc <MX_SPI1_Init+0xa4>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000792:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <MX_SPI1_Init+0xa4>)
 8000794:	2200      	movs	r2, #0
 8000796:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <MX_SPI1_Init+0xa4>)
 800079a:	2200      	movs	r2, #0
 800079c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800079e:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_SPI1_Init+0xa4>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MX_SPI1_Init+0xa4>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_SPI1_Init+0xa4>)
 80007ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007b0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80007b2:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_SPI1_Init+0xa4>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80007b8:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_SPI1_Init+0xa4>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_SPI1_Init+0xa4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80007c4:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <MX_SPI1_Init+0xa4>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_SPI1_Init+0xa4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <MX_SPI1_Init+0xa4>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_SPI1_Init+0xa4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80007dc:	4b07      	ldr	r3, [pc, #28]	; (80007fc <MX_SPI1_Init+0xa4>)
 80007de:	2200      	movs	r2, #0
 80007e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_SPI1_Init+0xa4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007e8:	4804      	ldr	r0, [pc, #16]	; (80007fc <MX_SPI1_Init+0xa4>)
 80007ea:	f006 f925 	bl	8006a38 <HAL_SPI_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80007f4:	f000 fbbe 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000308 	.word	0x20000308
 8000800:	40013000 	.word	0x40013000

08000804 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b088      	sub	sp, #32
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800080a:	f107 0310 	add.w	r3, r7, #16
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000822:	4b1e      	ldr	r3, [pc, #120]	; (800089c <MX_TIM2_Init+0x98>)
 8000824:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000828:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 800082a:	4b1c      	ldr	r3, [pc, #112]	; (800089c <MX_TIM2_Init+0x98>)
 800082c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000830:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000832:	4b1a      	ldr	r3, [pc, #104]	; (800089c <MX_TIM2_Init+0x98>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 48-1;
 8000838:	4b18      	ldr	r3, [pc, #96]	; (800089c <MX_TIM2_Init+0x98>)
 800083a:	222f      	movs	r2, #47	; 0x2f
 800083c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <MX_TIM2_Init+0x98>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <MX_TIM2_Init+0x98>)
 8000846:	2200      	movs	r2, #0
 8000848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800084a:	4814      	ldr	r0, [pc, #80]	; (800089c <MX_TIM2_Init+0x98>)
 800084c:	f006 fcd3 	bl	80071f6 <HAL_TIM_Base_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000856:	f000 fb8d 	bl	8000f74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800085a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000860:	f107 0310 	add.w	r3, r7, #16
 8000864:	4619      	mov	r1, r3
 8000866:	480d      	ldr	r0, [pc, #52]	; (800089c <MX_TIM2_Init+0x98>)
 8000868:	f007 f9bc 	bl	8007be4 <HAL_TIM_ConfigClockSource>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000872:	f000 fb7f 	bl	8000f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	4619      	mov	r1, r3
 8000882:	4806      	ldr	r0, [pc, #24]	; (800089c <MX_TIM2_Init+0x98>)
 8000884:	f007 fef6 	bl	8008674 <HAL_TIMEx_MasterConfigSynchronization>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800088e:	f000 fb71 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	3720      	adds	r7, #32
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000390 	.word	0x20000390

080008a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08e      	sub	sp, #56	; 0x38
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008c0:	463b      	mov	r3, r7
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]
 80008ce:	615a      	str	r2, [r3, #20]
 80008d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008d2:	4b2d      	ldr	r3, [pc, #180]	; (8000988 <MX_TIM4_Init+0xe8>)
 80008d4:	4a2d      	ldr	r2, [pc, #180]	; (800098c <MX_TIM4_Init+0xec>)
 80008d6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 80008d8:	4b2b      	ldr	r3, [pc, #172]	; (8000988 <MX_TIM4_Init+0xe8>)
 80008da:	22ef      	movs	r2, #239	; 0xef
 80008dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008de:	4b2a      	ldr	r3, [pc, #168]	; (8000988 <MX_TIM4_Init+0xe8>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 625-1;
 80008e4:	4b28      	ldr	r3, [pc, #160]	; (8000988 <MX_TIM4_Init+0xe8>)
 80008e6:	f44f 721c 	mov.w	r2, #624	; 0x270
 80008ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ec:	4b26      	ldr	r3, [pc, #152]	; (8000988 <MX_TIM4_Init+0xe8>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008f2:	4b25      	ldr	r3, [pc, #148]	; (8000988 <MX_TIM4_Init+0xe8>)
 80008f4:	2280      	movs	r2, #128	; 0x80
 80008f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008f8:	4823      	ldr	r0, [pc, #140]	; (8000988 <MX_TIM4_Init+0xe8>)
 80008fa:	f006 fc7c 	bl	80071f6 <HAL_TIM_Base_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000904:	f000 fb36 	bl	8000f74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800090e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000912:	4619      	mov	r1, r3
 8000914:	481c      	ldr	r0, [pc, #112]	; (8000988 <MX_TIM4_Init+0xe8>)
 8000916:	f007 f965 	bl	8007be4 <HAL_TIM_ConfigClockSource>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000920:	f000 fb28 	bl	8000f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000924:	4818      	ldr	r0, [pc, #96]	; (8000988 <MX_TIM4_Init+0xe8>)
 8000926:	f006 fd2d 	bl	8007384 <HAL_TIM_PWM_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000930:	f000 fb20 	bl	8000f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4811      	ldr	r0, [pc, #68]	; (8000988 <MX_TIM4_Init+0xe8>)
 8000944:	f007 fe96 	bl	8008674 <HAL_TIMEx_MasterConfigSynchronization>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800094e:	f000 fb11 	bl	8000f74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000952:	2360      	movs	r3, #96	; 0x60
 8000954:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 100;
 8000956:	2364      	movs	r3, #100	; 0x64
 8000958:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000962:	463b      	mov	r3, r7
 8000964:	2204      	movs	r2, #4
 8000966:	4619      	mov	r1, r3
 8000968:	4807      	ldr	r0, [pc, #28]	; (8000988 <MX_TIM4_Init+0xe8>)
 800096a:	f007 f82b 	bl	80079c4 <HAL_TIM_PWM_ConfigChannel>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000974:	f000 fafe 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000978:	4803      	ldr	r0, [pc, #12]	; (8000988 <MX_TIM4_Init+0xe8>)
 800097a:	f000 fc17 	bl	80011ac <HAL_TIM_MspPostInit>

}
 800097e:	bf00      	nop
 8000980:	3738      	adds	r7, #56	; 0x38
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200000ac 	.word	0x200000ac
 800098c:	40000800 	.word	0x40000800

08000990 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000994:	4b24      	ldr	r3, [pc, #144]	; (8000a28 <MX_UART4_Init+0x98>)
 8000996:	4a25      	ldr	r2, [pc, #148]	; (8000a2c <MX_UART4_Init+0x9c>)
 8000998:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800099a:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <MX_UART4_Init+0x98>)
 800099c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009a2:	4b21      	ldr	r3, [pc, #132]	; (8000a28 <MX_UART4_Init+0x98>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009a8:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <MX_UART4_Init+0x98>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009ae:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <MX_UART4_Init+0x98>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009b4:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <MX_UART4_Init+0x98>)
 80009b6:	220c      	movs	r2, #12
 80009b8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ba:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <MX_UART4_Init+0x98>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c0:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <MX_UART4_Init+0x98>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <MX_UART4_Init+0x98>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009cc:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <MX_UART4_Init+0x98>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <MX_UART4_Init+0x98>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart4, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80009d8:	2300      	movs	r3, #0
 80009da:	2200      	movs	r2, #0
 80009dc:	2100      	movs	r1, #0
 80009de:	4812      	ldr	r0, [pc, #72]	; (8000a28 <MX_UART4_Init+0x98>)
 80009e0:	f009 f93e 	bl	8009c60 <HAL_RS485Ex_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 80009ea:	f000 fac3 	bl	8000f74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ee:	2100      	movs	r1, #0
 80009f0:	480d      	ldr	r0, [pc, #52]	; (8000a28 <MX_UART4_Init+0x98>)
 80009f2:	f009 f9f6 	bl	8009de2 <HAL_UARTEx_SetTxFifoThreshold>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_UART4_Init+0x70>
  {
    Error_Handler();
 80009fc:	f000 faba 	bl	8000f74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a00:	2100      	movs	r1, #0
 8000a02:	4809      	ldr	r0, [pc, #36]	; (8000a28 <MX_UART4_Init+0x98>)
 8000a04:	f009 fa2b 	bl	8009e5e <HAL_UARTEx_SetRxFifoThreshold>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_UART4_Init+0x82>
  {
    Error_Handler();
 8000a0e:	f000 fab1 	bl	8000f74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_UART4_Init+0x98>)
 8000a14:	f009 f9ac 	bl	8009d70 <HAL_UARTEx_DisableFifoMode>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_UART4_Init+0x92>
  {
    Error_Handler();
 8000a1e:	f000 faa9 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000278 	.word	0x20000278
 8000a2c:	40004c00 	.word	0x40004c00

08000a30 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a34:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a36:	4a23      	ldr	r2, [pc, #140]	; (8000ac4 <MX_USART3_UART_Init+0x94>)
 8000a38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a3a:	4b21      	ldr	r3, [pc, #132]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a42:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a48:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a54:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a56:	220c      	movs	r2, #12
 8000a58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a60:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a72:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a78:	4811      	ldr	r0, [pc, #68]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a7a:	f007 fea1 	bl	80087c0 <HAL_UART_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a84:	f000 fa76 	bl	8000f74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a88:	2100      	movs	r1, #0
 8000a8a:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a8c:	f009 f9a9 	bl	8009de2 <HAL_UARTEx_SetTxFifoThreshold>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a96:	f000 fa6d 	bl	8000f74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4808      	ldr	r0, [pc, #32]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000a9e:	f009 f9de 	bl	8009e5e <HAL_UARTEx_SetRxFifoThreshold>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000aa8:	f000 fa64 	bl	8000f74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000aac:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <MX_USART3_UART_Init+0x90>)
 8000aae:	f009 f95f 	bl	8009d70 <HAL_UARTEx_DisableFifoMode>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ab8:	f000 fa5c 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000170 	.word	0x20000170
 8000ac4:	40004800 	.word	0x40004800

08000ac8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ace:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <MX_DMA_Init+0x8c>)
 8000ad0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ad4:	4a1f      	ldr	r2, [pc, #124]	; (8000b54 <MX_DMA_Init+0x8c>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ade:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <MX_DMA_Init+0x8c>)
 8000ae0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000aec:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <MX_DMA_Init+0x8c>)
 8000aee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000af2:	4a18      	ldr	r2, [pc, #96]	; (8000b54 <MX_DMA_Init+0x8c>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000afc:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <MX_DMA_Init+0x8c>)
 8000afe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b02:	f003 0302 	and.w	r3, r3, #2
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	200b      	movs	r0, #11
 8000b10:	f001 f803 	bl	8001b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b14:	200b      	movs	r0, #11
 8000b16:	f001 f81a 	bl	8001b4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	200c      	movs	r0, #12
 8000b20:	f000 fffb 	bl	8001b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b24:	200c      	movs	r0, #12
 8000b26:	f001 f812 	bl	8001b4e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2038      	movs	r0, #56	; 0x38
 8000b30:	f000 fff3 	bl	8001b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b34:	2038      	movs	r0, #56	; 0x38
 8000b36:	f001 f80a 	bl	8001b4e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2039      	movs	r0, #57	; 0x39
 8000b40:	f000 ffeb 	bl	8001b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000b44:	2039      	movs	r0, #57	; 0x39
 8000b46:	f001 f802 	bl	8001b4e <HAL_NVIC_EnableIRQ>

}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	58024400 	.word	0x58024400

08000b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08c      	sub	sp, #48	; 0x30
 8000b5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5e:	f107 031c 	add.w	r3, r7, #28
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b6e:	4b81      	ldr	r3, [pc, #516]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b74:	4a7f      	ldr	r2, [pc, #508]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000b76:	f043 0310 	orr.w	r3, r3, #16
 8000b7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b7e:	4b7d      	ldr	r3, [pc, #500]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b84:	f003 0310 	and.w	r3, r3, #16
 8000b88:	61bb      	str	r3, [r7, #24]
 8000b8a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8c:	4b79      	ldr	r3, [pc, #484]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b92:	4a78      	ldr	r2, [pc, #480]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000b94:	f043 0304 	orr.w	r3, r3, #4
 8000b98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b9c:	4b75      	ldr	r3, [pc, #468]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba2:	f003 0304 	and.w	r3, r3, #4
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000baa:	4b72      	ldr	r3, [pc, #456]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb0:	4a70      	ldr	r2, [pc, #448]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bba:	4b6e      	ldr	r3, [pc, #440]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc8:	4b6a      	ldr	r3, [pc, #424]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bce:	4a69      	ldr	r2, [pc, #420]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd8:	4b66      	ldr	r3, [pc, #408]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be6:	4b63      	ldr	r3, [pc, #396]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bec:	4a61      	ldr	r2, [pc, #388]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000bee:	f043 0302 	orr.w	r3, r3, #2
 8000bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf6:	4b5f      	ldr	r3, [pc, #380]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfc:	f003 0302 	and.w	r3, r3, #2
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c04:	4b5b      	ldr	r3, [pc, #364]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0a:	4a5a      	ldr	r2, [pc, #360]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000c0c:	f043 0308 	orr.w	r3, r3, #8
 8000c10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c14:	4b57      	ldr	r3, [pc, #348]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1a:	f003 0308 	and.w	r3, r3, #8
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c22:	4b54      	ldr	r3, [pc, #336]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c28:	4a52      	ldr	r2, [pc, #328]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c32:	4b50      	ldr	r3, [pc, #320]	; (8000d74 <MX_GPIO_Init+0x21c>)
 8000c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c3c:	603b      	str	r3, [r7, #0]
 8000c3e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_5_GPIO_Port, DIR_5_Pin, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2140      	movs	r1, #64	; 0x40
 8000c44:	484c      	ldr	r0, [pc, #304]	; (8000d78 <MX_GPIO_Init+0x220>)
 8000c46:	f003 fb71 	bl	800432c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|DIR_1_Pin, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f244 0141 	movw	r1, #16449	; 0x4041
 8000c50:	484a      	ldr	r0, [pc, #296]	; (8000d7c <MX_GPIO_Init+0x224>)
 8000c52:	f003 fb6b 	bl	800432c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_3_Pin|STEP_3_Pin|STEP_2_Pin|DIR_2_Pin
 8000c56:	2200      	movs	r2, #0
 8000c58:	f646 2102 	movw	r1, #27138	; 0x6a02
 8000c5c:	4848      	ldr	r0, [pc, #288]	; (8000d80 <MX_GPIO_Init+0x228>)
 8000c5e:	f003 fb65 	bl	800432c <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|DIR_4_Pin|STEP_4_Pin, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8000c68:	4846      	ldr	r0, [pc, #280]	; (8000d84 <MX_GPIO_Init+0x22c>)
 8000c6a:	f003 fb5f 	bl	800432c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LM4_Pin LM3_Pin LM5_Pin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin|LM5_Pin;
 8000c6e:	f249 0340 	movw	r3, #36928	; 0x9040
 8000c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c74:	4b44      	ldr	r3, [pc, #272]	; (8000d88 <MX_GPIO_Init+0x230>)
 8000c76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c7c:	f107 031c 	add.w	r3, r7, #28
 8000c80:	4619      	mov	r1, r3
 8000c82:	483f      	ldr	r0, [pc, #252]	; (8000d80 <MX_GPIO_Init+0x228>)
 8000c84:	f003 f9a2 	bl	8003fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : Blue_Button_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 8000c88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c8e:	4b3e      	ldr	r3, [pc, #248]	; (8000d88 <MX_GPIO_Init+0x230>)
 8000c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	483b      	ldr	r0, [pc, #236]	; (8000d8c <MX_GPIO_Init+0x234>)
 8000c9e:	f003 f995 	bl	8003fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_5_Pin */
  GPIO_InitStruct.Pin = DIR_5_Pin;
 8000ca2:	2340      	movs	r3, #64	; 0x40
 8000ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DIR_5_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	482f      	ldr	r0, [pc, #188]	; (8000d78 <MX_GPIO_Init+0x220>)
 8000cba:	f003 f987 	bl	8003fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin DIR_1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|DIR_1_Pin;
 8000cbe:	f244 0341 	movw	r3, #16449	; 0x4041
 8000cc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd0:	f107 031c 	add.w	r3, r7, #28
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4829      	ldr	r0, [pc, #164]	; (8000d7c <MX_GPIO_Init+0x224>)
 8000cd8:	f003 f978 	bl	8003fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_3_Pin STEP_3_Pin STEP_2_Pin DIR_2_Pin
                           LD2_Pin */
  GPIO_InitStruct.Pin = DIR_3_Pin|STEP_3_Pin|STEP_2_Pin|DIR_2_Pin
 8000cdc:	f646 2302 	movw	r3, #27138	; 0x6a02
 8000ce0:	61fb      	str	r3, [r7, #28]
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4822      	ldr	r0, [pc, #136]	; (8000d80 <MX_GPIO_Init+0x228>)
 8000cf6:	f003 f969 	bl	8003fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : LM1_Pin LM2_Pin */
  GPIO_InitStruct.Pin = LM1_Pin|LM2_Pin;
 8000cfa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d00:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <MX_GPIO_Init+0x230>)
 8000d02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d08:	f107 031c 	add.w	r3, r7, #28
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	481b      	ldr	r0, [pc, #108]	; (8000d7c <MX_GPIO_Init+0x224>)
 8000d10:	f003 f95c 	bl	8003fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin DIR_4_Pin STEP_4_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|DIR_4_Pin|STEP_4_Pin;
 8000d14:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8000d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d26:	f107 031c 	add.w	r3, r7, #28
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4815      	ldr	r0, [pc, #84]	; (8000d84 <MX_GPIO_Init+0x22c>)
 8000d2e:	f003 f94d 	bl	8003fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000d32:	2380      	movs	r3, #128	; 0x80
 8000d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d36:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <MX_GPIO_Init+0x230>)
 8000d38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	f107 031c 	add.w	r3, r7, #28
 8000d42:	4619      	mov	r1, r3
 8000d44:	4812      	ldr	r0, [pc, #72]	; (8000d90 <MX_GPIO_Init+0x238>)
 8000d46:	f003 f941 	bl	8003fcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2103      	movs	r1, #3
 8000d4e:	2017      	movs	r0, #23
 8000d50:	f000 fee3 	bl	8001b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d54:	2017      	movs	r0, #23
 8000d56:	f000 fefa 	bl	8001b4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2103      	movs	r1, #3
 8000d5e:	2028      	movs	r0, #40	; 0x28
 8000d60:	f000 fedb 	bl	8001b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d64:	2028      	movs	r0, #40	; 0x28
 8000d66:	f000 fef2 	bl	8001b4e <HAL_NVIC_EnableIRQ>

}
 8000d6a:	bf00      	nop
 8000d6c:	3730      	adds	r7, #48	; 0x30
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	58024400 	.word	0x58024400
 8000d78:	58020000 	.word	0x58020000
 8000d7c:	58020400 	.word	0x58020400
 8000d80:	58021000 	.word	0x58021000
 8000d84:	58020c00 	.word	0x58020c00
 8000d88:	11110000 	.word	0x11110000
 8000d8c:	58020800 	.word	0x58020800
 8000d90:	58021800 	.word	0x58021800

08000d94 <HAL_UART_TxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{

}
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]

}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Blue_Button_Pin)
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000db8:	d128      	bne.n	8000e0c <HAL_GPIO_EXTI_Callback+0x64>
	{
		flag ^= 0x01;
 8000dba:	4b57      	ldr	r3, [pc, #348]	; (8000f18 <HAL_GPIO_EXTI_Callback+0x170>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	f083 0301 	eor.w	r3, r3, #1
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b54      	ldr	r3, [pc, #336]	; (8000f18 <HAL_GPIO_EXTI_Callback+0x170>)
 8000dc8:	701a      	strb	r2, [r3, #0]
		 if(flag == 0x01)
 8000dca:	4b53      	ldr	r3, [pc, #332]	; (8000f18 <HAL_GPIO_EXTI_Callback+0x170>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d10d      	bne.n	8000df0 <HAL_GPIO_EXTI_Callback+0x48>
		 {
//			 HAL_TIM_Base_Start_IT(&htim2);
			 HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8000dd4:	2104      	movs	r1, #4
 8000dd6:	4851      	ldr	r0, [pc, #324]	; (8000f1c <HAL_GPIO_EXTI_Callback+0x174>)
 8000dd8:	f006 fc3e 	bl	8007658 <HAL_TIM_PWM_Stop>
			 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000ddc:	2101      	movs	r1, #1
 8000dde:	4850      	ldr	r0, [pc, #320]	; (8000f20 <HAL_GPIO_EXTI_Callback+0x178>)
 8000de0:	f003 fabd 	bl	800435e <HAL_GPIO_TogglePin>
			 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000de4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000de8:	484d      	ldr	r0, [pc, #308]	; (8000f20 <HAL_GPIO_EXTI_Callback+0x178>)
 8000dea:	f003 fab8 	bl	800435e <HAL_GPIO_TogglePin>
	}
	else
	{
		__NOP();
	}
}
 8000dee:	e08e      	b.n	8000f0e <HAL_GPIO_EXTI_Callback+0x166>
			 HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000df0:	2104      	movs	r1, #4
 8000df2:	484a      	ldr	r0, [pc, #296]	; (8000f1c <HAL_GPIO_EXTI_Callback+0x174>)
 8000df4:	f006 fb28 	bl	8007448 <HAL_TIM_PWM_Start>
			 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000df8:	2101      	movs	r1, #1
 8000dfa:	4849      	ldr	r0, [pc, #292]	; (8000f20 <HAL_GPIO_EXTI_Callback+0x178>)
 8000dfc:	f003 faaf 	bl	800435e <HAL_GPIO_TogglePin>
			 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000e00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e04:	4846      	ldr	r0, [pc, #280]	; (8000f20 <HAL_GPIO_EXTI_Callback+0x178>)
 8000e06:	f003 faaa 	bl	800435e <HAL_GPIO_TogglePin>
}
 8000e0a:	e080      	b.n	8000f0e <HAL_GPIO_EXTI_Callback+0x166>
	else if(GPIO_Pin == LM1_Pin)
 8000e0c:	88fb      	ldrh	r3, [r7, #6]
 8000e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e12:	d13a      	bne.n	8000e8a <HAL_GPIO_EXTI_Callback+0xe2>
		if(freq > 1000)
 8000e14:	4b43      	ldr	r3, [pc, #268]	; (8000f24 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e1c:	d905      	bls.n	8000e2a <HAL_GPIO_EXTI_Callback+0x82>
			freq -= 100;
 8000e1e:	4b41      	ldr	r3, [pc, #260]	; (8000f24 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	3b64      	subs	r3, #100	; 0x64
 8000e24:	4a3f      	ldr	r2, [pc, #252]	; (8000f24 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000e26:	6013      	str	r3, [r2, #0]
 8000e28:	e008      	b.n	8000e3c <HAL_GPIO_EXTI_Callback+0x94>
		else if (freq <= 1000)
 8000e2a:	4b3e      	ldr	r3, [pc, #248]	; (8000f24 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e32:	d803      	bhi.n	8000e3c <HAL_GPIO_EXTI_Callback+0x94>
			freq = 1000;
 8000e34:	4b3b      	ldr	r3, [pc, #236]	; (8000f24 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000e36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e3a:	601a      	str	r2, [r3, #0]
		TIM4->ARR = (round(_FCY/(((TIM4->PSC)+1)*freq)))-1;
 8000e3c:	4b3a      	ldr	r3, [pc, #232]	; (8000f28 <HAL_GPIO_EXTI_Callback+0x180>)
 8000e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e40:	3301      	adds	r3, #1
 8000e42:	4a38      	ldr	r2, [pc, #224]	; (8000f24 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000e44:	6812      	ldr	r2, [r2, #0]
 8000e46:	fb02 f303 	mul.w	r3, r2, r3
 8000e4a:	4a38      	ldr	r2, [pc, #224]	; (8000f2c <HAL_GPIO_EXTI_Callback+0x184>)
 8000e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e50:	ee07 3a90 	vmov	s15, r3
 8000e54:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e58:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e5c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e60:	4b31      	ldr	r3, [pc, #196]	; (8000f28 <HAL_GPIO_EXTI_Callback+0x180>)
 8000e62:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e66:	ee17 2a90 	vmov	r2, s15
 8000e6a:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM4->CCR2 = round(((TIM4->ARR)+1)/2);
 8000e6c:	4b2e      	ldr	r3, [pc, #184]	; (8000f28 <HAL_GPIO_EXTI_Callback+0x180>)
 8000e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e70:	3301      	adds	r3, #1
 8000e72:	085b      	lsrs	r3, r3, #1
 8000e74:	ee07 3a90 	vmov	s15, r3
 8000e78:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e7c:	4b2a      	ldr	r3, [pc, #168]	; (8000f28 <HAL_GPIO_EXTI_Callback+0x180>)
 8000e7e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e82:	ee17 2a90 	vmov	r2, s15
 8000e86:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000e88:	e041      	b.n	8000f0e <HAL_GPIO_EXTI_Callback+0x166>
	else if(GPIO_Pin == LM2_Pin)
 8000e8a:	88fb      	ldrh	r3, [r7, #6]
 8000e8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e90:	d13c      	bne.n	8000f0c <HAL_GPIO_EXTI_Callback+0x164>
		if(freq < 10000)
 8000e92:	4b24      	ldr	r3, [pc, #144]	; (8000f24 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d805      	bhi.n	8000eaa <HAL_GPIO_EXTI_Callback+0x102>
			freq += 100;
 8000e9e:	4b21      	ldr	r3, [pc, #132]	; (8000f24 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	3364      	adds	r3, #100	; 0x64
 8000ea4:	4a1f      	ldr	r2, [pc, #124]	; (8000f24 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000ea6:	6013      	str	r3, [r2, #0]
 8000ea8:	e009      	b.n	8000ebe <HAL_GPIO_EXTI_Callback+0x116>
		else if (freq >= 10000)
 8000eaa:	4b1e      	ldr	r3, [pc, #120]	; (8000f24 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f242 720f 	movw	r2, #9999	; 0x270f
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d903      	bls.n	8000ebe <HAL_GPIO_EXTI_Callback+0x116>
			freq = 10000;
 8000eb6:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000eb8:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ebc:	601a      	str	r2, [r3, #0]
		  TIM4->ARR = (round(_FCY/(((TIM4->PSC)+1)*freq)))-1;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <HAL_GPIO_EXTI_Callback+0x180>)
 8000ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	4a17      	ldr	r2, [pc, #92]	; (8000f24 <HAL_GPIO_EXTI_Callback+0x17c>)
 8000ec6:	6812      	ldr	r2, [r2, #0]
 8000ec8:	fb02 f303 	mul.w	r3, r2, r3
 8000ecc:	4a17      	ldr	r2, [pc, #92]	; (8000f2c <HAL_GPIO_EXTI_Callback+0x184>)
 8000ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed2:	ee07 3a90 	vmov	s15, r3
 8000ed6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000eda:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ede:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <HAL_GPIO_EXTI_Callback+0x180>)
 8000ee4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ee8:	ee17 2a90 	vmov	r2, s15
 8000eec:	62da      	str	r2, [r3, #44]	; 0x2c
		  TIM4->CCR2 = round(((TIM4->ARR)+1)/2);
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <HAL_GPIO_EXTI_Callback+0x180>)
 8000ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	085b      	lsrs	r3, r3, #1
 8000ef6:	ee07 3a90 	vmov	s15, r3
 8000efa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000efe:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_GPIO_EXTI_Callback+0x180>)
 8000f00:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f04:	ee17 2a90 	vmov	r2, s15
 8000f08:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000f0a:	e000      	b.n	8000f0e <HAL_GPIO_EXTI_Callback+0x166>
		__NOP();
 8000f0c:	bf00      	nop
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000030 	.word	0x20000030
 8000f1c:	200000ac 	.word	0x200000ac
 8000f20:	58020400 	.word	0x58020400
 8000f24:	20000000 	.word	0x20000000
 8000f28:	40000800 	.word	0x40000800
 8000f2c:	0e4e1c00 	.word	0x0e4e1c00

08000f30 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a0b      	ldr	r2, [pc, #44]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d10f      	bne.n	8000f60 <HAL_TIM_PeriodElapsedCallback+0x30>
  {
	  if(freq == 1600)
 8000f40:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8000f48:	d105      	bne.n	8000f56 <HAL_TIM_PeriodElapsedCallback+0x26>
	  {
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	2102      	movs	r1, #2
 8000f4e:	4808      	ldr	r0, [pc, #32]	; (8000f70 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000f50:	f003 f9ec 	bl	800432c <HAL_GPIO_WritePin>
	  else
	  {
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
	  }
  }
}
 8000f54:	e004      	b.n	8000f60 <HAL_TIM_PeriodElapsedCallback+0x30>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2102      	movs	r1, #2
 8000f5a:	4805      	ldr	r0, [pc, #20]	; (8000f70 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000f5c:	f003 f9e6 	bl	800432c <HAL_GPIO_WritePin>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000390 	.word	0x20000390
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	58021000 	.word	0x58021000

08000f74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f78:	b672      	cpsid	i
}
 8000f7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <Error_Handler+0x8>
	...

08000f80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <HAL_MspInit+0x30>)
 8000f88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f8c:	4a08      	ldr	r2, [pc, #32]	; (8000fb0 <HAL_MspInit+0x30>)
 8000f8e:	f043 0302 	orr.w	r3, r3, #2
 8000f92:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_MspInit+0x30>)
 8000f98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f9c:	f003 0302 	and.w	r3, r3, #2
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	58024400 	.word	0x58024400

08000fb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b0ba      	sub	sp, #232	; 0xe8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fcc:	f107 0318 	add.w	r3, r7, #24
 8000fd0:	22bc      	movs	r2, #188	; 0xbc
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f008 fff3 	bl	8009fc0 <memset>
  if(hspi->Instance==SPI1)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a3b      	ldr	r2, [pc, #236]	; (80010cc <HAL_SPI_MspInit+0x118>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d16e      	bne.n	80010c2 <HAL_SPI_MspInit+0x10e>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fee:	f107 0318 	add.w	r3, r7, #24
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f004 f9be 	bl	8005374 <HAL_RCCEx_PeriphCLKConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8000ffe:	f7ff ffb9 	bl	8000f74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001002:	4b33      	ldr	r3, [pc, #204]	; (80010d0 <HAL_SPI_MspInit+0x11c>)
 8001004:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001008:	4a31      	ldr	r2, [pc, #196]	; (80010d0 <HAL_SPI_MspInit+0x11c>)
 800100a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800100e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001012:	4b2f      	ldr	r3, [pc, #188]	; (80010d0 <HAL_SPI_MspInit+0x11c>)
 8001014:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001018:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800101c:	617b      	str	r3, [r7, #20]
 800101e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001020:	4b2b      	ldr	r3, [pc, #172]	; (80010d0 <HAL_SPI_MspInit+0x11c>)
 8001022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001026:	4a2a      	ldr	r2, [pc, #168]	; (80010d0 <HAL_SPI_MspInit+0x11c>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001030:	4b27      	ldr	r3, [pc, #156]	; (80010d0 <HAL_SPI_MspInit+0x11c>)
 8001032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800103e:	4b24      	ldr	r3, [pc, #144]	; (80010d0 <HAL_SPI_MspInit+0x11c>)
 8001040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001044:	4a22      	ldr	r2, [pc, #136]	; (80010d0 <HAL_SPI_MspInit+0x11c>)
 8001046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800104a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800104e:	4b20      	ldr	r3, [pc, #128]	; (80010d0 <HAL_SPI_MspInit+0x11c>)
 8001050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800105c:	2320      	movs	r3, #32
 800105e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001074:	2305      	movs	r3, #5
 8001076:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800107e:	4619      	mov	r1, r3
 8001080:	4814      	ldr	r0, [pc, #80]	; (80010d4 <HAL_SPI_MspInit+0x120>)
 8001082:	f002 ffa3 	bl	8003fcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001086:	f44f 7300 	mov.w	r3, #512	; 0x200
 800108a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	2302      	movs	r3, #2
 8001090:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010a0:	2305      	movs	r3, #5
 80010a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010a6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010aa:	4619      	mov	r1, r3
 80010ac:	480a      	ldr	r0, [pc, #40]	; (80010d8 <HAL_SPI_MspInit+0x124>)
 80010ae:	f002 ff8d 	bl	8003fcc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2100      	movs	r1, #0
 80010b6:	2023      	movs	r0, #35	; 0x23
 80010b8:	f000 fd2f 	bl	8001b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80010bc:	2023      	movs	r0, #35	; 0x23
 80010be:	f000 fd46 	bl	8001b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010c2:	bf00      	nop
 80010c4:	37e8      	adds	r7, #232	; 0xe8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40013000 	.word	0x40013000
 80010d0:	58024400 	.word	0x58024400
 80010d4:	58020000 	.word	0x58020000
 80010d8:	58021800 	.word	0x58021800

080010dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010fc:	d117      	bne.n	800112e <HAL_TIM_Base_MspInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010fe:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <HAL_TIM_Base_MspInit+0xc4>)
 8001100:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001104:	4a26      	ldr	r2, [pc, #152]	; (80011a0 <HAL_TIM_Base_MspInit+0xc4>)
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800110e:	4b24      	ldr	r3, [pc, #144]	; (80011a0 <HAL_TIM_Base_MspInit+0xc4>)
 8001110:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	693b      	ldr	r3, [r7, #16]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800111c:	2200      	movs	r2, #0
 800111e:	2100      	movs	r1, #0
 8001120:	201c      	movs	r0, #28
 8001122:	f000 fcfa 	bl	8001b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001126:	201c      	movs	r0, #28
 8001128:	f000 fd11 	bl	8001b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800112c:	e033      	b.n	8001196 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM4)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a1c      	ldr	r2, [pc, #112]	; (80011a4 <HAL_TIM_Base_MspInit+0xc8>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d12e      	bne.n	8001196 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001138:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <HAL_TIM_Base_MspInit+0xc4>)
 800113a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800113e:	4a18      	ldr	r2, [pc, #96]	; (80011a0 <HAL_TIM_Base_MspInit+0xc4>)
 8001140:	f043 0304 	orr.w	r3, r3, #4
 8001144:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <HAL_TIM_Base_MspInit+0xc4>)
 800114a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001156:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <HAL_TIM_Base_MspInit+0xc4>)
 8001158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115c:	4a10      	ldr	r2, [pc, #64]	; (80011a0 <HAL_TIM_Base_MspInit+0xc4>)
 800115e:	f043 0302 	orr.w	r3, r3, #2
 8001162:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <HAL_TIM_Base_MspInit+0xc4>)
 8001168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116c:	f003 0302 	and.w	r3, r3, #2
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001174:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001186:	2302      	movs	r3, #2
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	4805      	ldr	r0, [pc, #20]	; (80011a8 <HAL_TIM_Base_MspInit+0xcc>)
 8001192:	f002 ff1b 	bl	8003fcc <HAL_GPIO_Init>
}
 8001196:	bf00      	nop
 8001198:	3728      	adds	r7, #40	; 0x28
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	58024400 	.word	0x58024400
 80011a4:	40000800 	.word	0x40000800
 80011a8:	58020400 	.word	0x58020400

080011ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 030c 	add.w	r3, r7, #12
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a12      	ldr	r2, [pc, #72]	; (8001214 <HAL_TIM_MspPostInit+0x68>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d11e      	bne.n	800120c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ce:	4b12      	ldr	r3, [pc, #72]	; (8001218 <HAL_TIM_MspPostInit+0x6c>)
 80011d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d4:	4a10      	ldr	r2, [pc, #64]	; (8001218 <HAL_TIM_MspPostInit+0x6c>)
 80011d6:	f043 0302 	orr.w	r3, r3, #2
 80011da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <HAL_TIM_MspPostInit+0x6c>)
 80011e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 80011ec:	2380      	movs	r3, #128	; 0x80
 80011ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f0:	2302      	movs	r3, #2
 80011f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80011fc:	2302      	movs	r3, #2
 80011fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	4619      	mov	r1, r3
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <HAL_TIM_MspPostInit+0x70>)
 8001208:	f002 fee0 	bl	8003fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800120c:	bf00      	nop
 800120e:	3720      	adds	r7, #32
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40000800 	.word	0x40000800
 8001218:	58024400 	.word	0x58024400
 800121c:	58020400 	.word	0x58020400

08001220 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b0bc      	sub	sp, #240	; 0xf0
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001238:	f107 0320 	add.w	r3, r7, #32
 800123c:	22bc      	movs	r2, #188	; 0xbc
 800123e:	2100      	movs	r1, #0
 8001240:	4618      	mov	r0, r3
 8001242:	f008 febd 	bl	8009fc0 <memset>
  if(huart->Instance==UART4)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a67      	ldr	r2, [pc, #412]	; (80013e8 <HAL_UART_MspInit+0x1c8>)
 800124c:	4293      	cmp	r3, r2
 800124e:	f040 80db 	bne.w	8001408 <HAL_UART_MspInit+0x1e8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001252:	2302      	movs	r3, #2
 8001254:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001256:	2300      	movs	r3, #0
 8001258:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800125c:	f107 0320 	add.w	r3, r7, #32
 8001260:	4618      	mov	r0, r3
 8001262:	f004 f887 	bl	8005374 <HAL_RCCEx_PeriphCLKConfig>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800126c:	f7ff fe82 	bl	8000f74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001270:	4b5e      	ldr	r3, [pc, #376]	; (80013ec <HAL_UART_MspInit+0x1cc>)
 8001272:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001276:	4a5d      	ldr	r2, [pc, #372]	; (80013ec <HAL_UART_MspInit+0x1cc>)
 8001278:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800127c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001280:	4b5a      	ldr	r3, [pc, #360]	; (80013ec <HAL_UART_MspInit+0x1cc>)
 8001282:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001286:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800128a:	61fb      	str	r3, [r7, #28]
 800128c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	4b57      	ldr	r3, [pc, #348]	; (80013ec <HAL_UART_MspInit+0x1cc>)
 8001290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001294:	4a55      	ldr	r2, [pc, #340]	; (80013ec <HAL_UART_MspInit+0x1cc>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800129e:	4b53      	ldr	r3, [pc, #332]	; (80013ec <HAL_UART_MspInit+0x1cc>)
 80012a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	61bb      	str	r3, [r7, #24]
 80012aa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ac:	4b4f      	ldr	r3, [pc, #316]	; (80013ec <HAL_UART_MspInit+0x1cc>)
 80012ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b2:	4a4e      	ldr	r2, [pc, #312]	; (80013ec <HAL_UART_MspInit+0x1cc>)
 80012b4:	f043 0308 	orr.w	r3, r3, #8
 80012b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012bc:	4b4b      	ldr	r3, [pc, #300]	; (80013ec <HAL_UART_MspInit+0x1cc>)
 80012be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA15 (JTDI)     ------> UART4_DE
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80012e4:	2308      	movs	r3, #8
 80012e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ea:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012ee:	4619      	mov	r1, r3
 80012f0:	483f      	ldr	r0, [pc, #252]	; (80013f0 <HAL_UART_MspInit+0x1d0>)
 80012f2:	f002 fe6b 	bl	8003fcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012f6:	2303      	movs	r3, #3
 80012f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001308:	2300      	movs	r3, #0
 800130a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800130e:	2308      	movs	r3, #8
 8001310:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001314:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001318:	4619      	mov	r1, r3
 800131a:	4836      	ldr	r0, [pc, #216]	; (80013f4 <HAL_UART_MspInit+0x1d4>)
 800131c:	f002 fe56 	bl	8003fcc <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Stream0;
 8001320:	4b35      	ldr	r3, [pc, #212]	; (80013f8 <HAL_UART_MspInit+0x1d8>)
 8001322:	4a36      	ldr	r2, [pc, #216]	; (80013fc <HAL_UART_MspInit+0x1dc>)
 8001324:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001326:	4b34      	ldr	r3, [pc, #208]	; (80013f8 <HAL_UART_MspInit+0x1d8>)
 8001328:	223f      	movs	r2, #63	; 0x3f
 800132a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800132c:	4b32      	ldr	r3, [pc, #200]	; (80013f8 <HAL_UART_MspInit+0x1d8>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001332:	4b31      	ldr	r3, [pc, #196]	; (80013f8 <HAL_UART_MspInit+0x1d8>)
 8001334:	2200      	movs	r2, #0
 8001336:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001338:	4b2f      	ldr	r3, [pc, #188]	; (80013f8 <HAL_UART_MspInit+0x1d8>)
 800133a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800133e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001340:	4b2d      	ldr	r3, [pc, #180]	; (80013f8 <HAL_UART_MspInit+0x1d8>)
 8001342:	2200      	movs	r2, #0
 8001344:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001346:	4b2c      	ldr	r3, [pc, #176]	; (80013f8 <HAL_UART_MspInit+0x1d8>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800134c:	4b2a      	ldr	r3, [pc, #168]	; (80013f8 <HAL_UART_MspInit+0x1d8>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001352:	4b29      	ldr	r3, [pc, #164]	; (80013f8 <HAL_UART_MspInit+0x1d8>)
 8001354:	2200      	movs	r2, #0
 8001356:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001358:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <HAL_UART_MspInit+0x1d8>)
 800135a:	2200      	movs	r2, #0
 800135c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800135e:	4826      	ldr	r0, [pc, #152]	; (80013f8 <HAL_UART_MspInit+0x1d8>)
 8001360:	f000 fc10 	bl	8001b84 <HAL_DMA_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <HAL_UART_MspInit+0x14e>
    {
      Error_Handler();
 800136a:	f7ff fe03 	bl	8000f74 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a21      	ldr	r2, [pc, #132]	; (80013f8 <HAL_UART_MspInit+0x1d8>)
 8001372:	67da      	str	r2, [r3, #124]	; 0x7c
 8001374:	4a20      	ldr	r2, [pc, #128]	; (80013f8 <HAL_UART_MspInit+0x1d8>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Stream1;
 800137a:	4b21      	ldr	r3, [pc, #132]	; (8001400 <HAL_UART_MspInit+0x1e0>)
 800137c:	4a21      	ldr	r2, [pc, #132]	; (8001404 <HAL_UART_MspInit+0x1e4>)
 800137e:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001380:	4b1f      	ldr	r3, [pc, #124]	; (8001400 <HAL_UART_MspInit+0x1e0>)
 8001382:	2240      	movs	r2, #64	; 0x40
 8001384:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001386:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <HAL_UART_MspInit+0x1e0>)
 8001388:	2240      	movs	r2, #64	; 0x40
 800138a:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800138c:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <HAL_UART_MspInit+0x1e0>)
 800138e:	2200      	movs	r2, #0
 8001390:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001392:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <HAL_UART_MspInit+0x1e0>)
 8001394:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001398:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800139a:	4b19      	ldr	r3, [pc, #100]	; (8001400 <HAL_UART_MspInit+0x1e0>)
 800139c:	2200      	movs	r2, #0
 800139e:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013a0:	4b17      	ldr	r3, [pc, #92]	; (8001400 <HAL_UART_MspInit+0x1e0>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80013a6:	4b16      	ldr	r3, [pc, #88]	; (8001400 <HAL_UART_MspInit+0x1e0>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013ac:	4b14      	ldr	r3, [pc, #80]	; (8001400 <HAL_UART_MspInit+0x1e0>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013b2:	4b13      	ldr	r3, [pc, #76]	; (8001400 <HAL_UART_MspInit+0x1e0>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80013b8:	4811      	ldr	r0, [pc, #68]	; (8001400 <HAL_UART_MspInit+0x1e0>)
 80013ba:	f000 fbe3 	bl	8001b84 <HAL_DMA_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <HAL_UART_MspInit+0x1a8>
    {
      Error_Handler();
 80013c4:	f7ff fdd6 	bl	8000f74 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a0d      	ldr	r2, [pc, #52]	; (8001400 <HAL_UART_MspInit+0x1e0>)
 80013cc:	679a      	str	r2, [r3, #120]	; 0x78
 80013ce:	4a0c      	ldr	r2, [pc, #48]	; (8001400 <HAL_UART_MspInit+0x1e0>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2100      	movs	r1, #0
 80013d8:	2034      	movs	r0, #52	; 0x34
 80013da:	f000 fb9e 	bl	8001b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80013de:	2034      	movs	r0, #52	; 0x34
 80013e0:	f000 fbb5 	bl	8001b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013e4:	e0bb      	b.n	800155e <HAL_UART_MspInit+0x33e>
 80013e6:	bf00      	nop
 80013e8:	40004c00 	.word	0x40004c00
 80013ec:	58024400 	.word	0x58024400
 80013f0:	58020000 	.word	0x58020000
 80013f4:	58020c00 	.word	0x58020c00
 80013f8:	20000034 	.word	0x20000034
 80013fc:	40020410 	.word	0x40020410
 8001400:	200003dc 	.word	0x200003dc
 8001404:	40020428 	.word	0x40020428
  else if(huart->Instance==USART3)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a56      	ldr	r2, [pc, #344]	; (8001568 <HAL_UART_MspInit+0x348>)
 800140e:	4293      	cmp	r3, r2
 8001410:	f040 80a5 	bne.w	800155e <HAL_UART_MspInit+0x33e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001414:	2302      	movs	r3, #2
 8001416:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001418:	2300      	movs	r3, #0
 800141a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800141e:	f107 0320 	add.w	r3, r7, #32
 8001422:	4618      	mov	r0, r3
 8001424:	f003 ffa6 	bl	8005374 <HAL_RCCEx_PeriphCLKConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_UART_MspInit+0x212>
      Error_Handler();
 800142e:	f7ff fda1 	bl	8000f74 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001432:	4b4e      	ldr	r3, [pc, #312]	; (800156c <HAL_UART_MspInit+0x34c>)
 8001434:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001438:	4a4c      	ldr	r2, [pc, #304]	; (800156c <HAL_UART_MspInit+0x34c>)
 800143a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800143e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001442:	4b4a      	ldr	r3, [pc, #296]	; (800156c <HAL_UART_MspInit+0x34c>)
 8001444:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001448:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001450:	4b46      	ldr	r3, [pc, #280]	; (800156c <HAL_UART_MspInit+0x34c>)
 8001452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001456:	4a45      	ldr	r2, [pc, #276]	; (800156c <HAL_UART_MspInit+0x34c>)
 8001458:	f043 0308 	orr.w	r3, r3, #8
 800145c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001460:	4b42      	ldr	r3, [pc, #264]	; (800156c <HAL_UART_MspInit+0x34c>)
 8001462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001466:	f003 0308 	and.w	r3, r3, #8
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800146e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001472:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001488:	2307      	movs	r3, #7
 800148a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800148e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001492:	4619      	mov	r1, r3
 8001494:	4836      	ldr	r0, [pc, #216]	; (8001570 <HAL_UART_MspInit+0x350>)
 8001496:	f002 fd99 	bl	8003fcc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 800149a:	4b36      	ldr	r3, [pc, #216]	; (8001574 <HAL_UART_MspInit+0x354>)
 800149c:	4a36      	ldr	r2, [pc, #216]	; (8001578 <HAL_UART_MspInit+0x358>)
 800149e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80014a0:	4b34      	ldr	r3, [pc, #208]	; (8001574 <HAL_UART_MspInit+0x354>)
 80014a2:	222d      	movs	r2, #45	; 0x2d
 80014a4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014a6:	4b33      	ldr	r3, [pc, #204]	; (8001574 <HAL_UART_MspInit+0x354>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ac:	4b31      	ldr	r3, [pc, #196]	; (8001574 <HAL_UART_MspInit+0x354>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014b2:	4b30      	ldr	r3, [pc, #192]	; (8001574 <HAL_UART_MspInit+0x354>)
 80014b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014b8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014ba:	4b2e      	ldr	r3, [pc, #184]	; (8001574 <HAL_UART_MspInit+0x354>)
 80014bc:	2200      	movs	r2, #0
 80014be:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014c0:	4b2c      	ldr	r3, [pc, #176]	; (8001574 <HAL_UART_MspInit+0x354>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80014c6:	4b2b      	ldr	r3, [pc, #172]	; (8001574 <HAL_UART_MspInit+0x354>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014cc:	4b29      	ldr	r3, [pc, #164]	; (8001574 <HAL_UART_MspInit+0x354>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014d2:	4b28      	ldr	r3, [pc, #160]	; (8001574 <HAL_UART_MspInit+0x354>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80014d8:	4826      	ldr	r0, [pc, #152]	; (8001574 <HAL_UART_MspInit+0x354>)
 80014da:	f000 fb53 	bl	8001b84 <HAL_DMA_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <HAL_UART_MspInit+0x2c8>
      Error_Handler();
 80014e4:	f7ff fd46 	bl	8000f74 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a22      	ldr	r2, [pc, #136]	; (8001574 <HAL_UART_MspInit+0x354>)
 80014ec:	67da      	str	r2, [r3, #124]	; 0x7c
 80014ee:	4a21      	ldr	r2, [pc, #132]	; (8001574 <HAL_UART_MspInit+0x354>)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80014f4:	4b21      	ldr	r3, [pc, #132]	; (800157c <HAL_UART_MspInit+0x35c>)
 80014f6:	4a22      	ldr	r2, [pc, #136]	; (8001580 <HAL_UART_MspInit+0x360>)
 80014f8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80014fa:	4b20      	ldr	r3, [pc, #128]	; (800157c <HAL_UART_MspInit+0x35c>)
 80014fc:	222e      	movs	r2, #46	; 0x2e
 80014fe:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001500:	4b1e      	ldr	r3, [pc, #120]	; (800157c <HAL_UART_MspInit+0x35c>)
 8001502:	2240      	movs	r2, #64	; 0x40
 8001504:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001506:	4b1d      	ldr	r3, [pc, #116]	; (800157c <HAL_UART_MspInit+0x35c>)
 8001508:	2200      	movs	r2, #0
 800150a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800150c:	4b1b      	ldr	r3, [pc, #108]	; (800157c <HAL_UART_MspInit+0x35c>)
 800150e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001512:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <HAL_UART_MspInit+0x35c>)
 8001516:	2200      	movs	r2, #0
 8001518:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800151a:	4b18      	ldr	r3, [pc, #96]	; (800157c <HAL_UART_MspInit+0x35c>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001520:	4b16      	ldr	r3, [pc, #88]	; (800157c <HAL_UART_MspInit+0x35c>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <HAL_UART_MspInit+0x35c>)
 8001528:	2200      	movs	r2, #0
 800152a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <HAL_UART_MspInit+0x35c>)
 800152e:	2200      	movs	r2, #0
 8001530:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001532:	4812      	ldr	r0, [pc, #72]	; (800157c <HAL_UART_MspInit+0x35c>)
 8001534:	f000 fb26 	bl	8001b84 <HAL_DMA_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_UART_MspInit+0x322>
      Error_Handler();
 800153e:	f7ff fd19 	bl	8000f74 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a0d      	ldr	r2, [pc, #52]	; (800157c <HAL_UART_MspInit+0x35c>)
 8001546:	679a      	str	r2, [r3, #120]	; 0x78
 8001548:	4a0c      	ldr	r2, [pc, #48]	; (800157c <HAL_UART_MspInit+0x35c>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800154e:	2200      	movs	r2, #0
 8001550:	2100      	movs	r1, #0
 8001552:	2027      	movs	r0, #39	; 0x27
 8001554:	f000 fae1 	bl	8001b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001558:	2027      	movs	r0, #39	; 0x27
 800155a:	f000 faf8 	bl	8001b4e <HAL_NVIC_EnableIRQ>
}
 800155e:	bf00      	nop
 8001560:	37f0      	adds	r7, #240	; 0xf0
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40004800 	.word	0x40004800
 800156c:	58024400 	.word	0x58024400
 8001570:	58020c00 	.word	0x58020c00
 8001574:	200000f8 	.word	0x200000f8
 8001578:	40020010 	.word	0x40020010
 800157c:	20000200 	.word	0x20000200
 8001580:	40020028 	.word	0x40020028

08001584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <NMI_Handler+0x4>

0800158a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800158e:	e7fe      	b.n	800158e <HardFault_Handler+0x4>

08001590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <MemManage_Handler+0x4>

08001596 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800159a:	e7fe      	b.n	800159a <BusFault_Handler+0x4>

0800159c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <UsageFault_Handler+0x4>

080015a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d0:	f000 f99c 	bl	800190c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80015dc:	4802      	ldr	r0, [pc, #8]	; (80015e8 <DMA1_Stream0_IRQHandler+0x10>)
 80015de:	f001 fb8f 	bl	8002d00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200000f8 	.word	0x200000f8

080015ec <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80015f0:	4802      	ldr	r0, [pc, #8]	; (80015fc <DMA1_Stream1_IRQHandler+0x10>)
 80015f2:	f001 fb85 	bl	8002d00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000200 	.word	0x20000200

08001600 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001604:	2040      	movs	r0, #64	; 0x40
 8001606:	f002 fec4 	bl	8004392 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800160a:	2080      	movs	r0, #128	; 0x80
 800160c:	f002 fec1 	bl	8004392 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}

08001614 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001618:	4802      	ldr	r0, [pc, #8]	; (8001624 <TIM2_IRQHandler+0x10>)
 800161a:	f006 f8b3 	bl	8007784 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000390 	.word	0x20000390

08001628 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <SPI1_IRQHandler+0x10>)
 800162e:	f005 fb05 	bl	8006c3c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000308 	.word	0x20000308

0800163c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001640:	4802      	ldr	r0, [pc, #8]	; (800164c <USART3_IRQHandler+0x10>)
 8001642:	f007 f90d 	bl	8008860 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000170 	.word	0x20000170

08001650 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001654:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001658:	f002 fe9b 	bl	8004392 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800165c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001660:	f002 fe97 	bl	8004392 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001664:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001668:	f002 fe93 	bl	8004392 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800166c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001670:	f002 fe8f 	bl	8004392 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001674:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001678:	f002 fe8b 	bl	8004392 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}

08001680 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001684:	4802      	ldr	r0, [pc, #8]	; (8001690 <UART4_IRQHandler+0x10>)
 8001686:	f007 f8eb 	bl	8008860 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000278 	.word	0x20000278

08001694 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001698:	4802      	ldr	r0, [pc, #8]	; (80016a4 <DMA2_Stream0_IRQHandler+0x10>)
 800169a:	f001 fb31 	bl	8002d00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000034 	.word	0x20000034

080016a8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80016ac:	4802      	ldr	r0, [pc, #8]	; (80016b8 <DMA2_Stream1_IRQHandler+0x10>)
 80016ae:	f001 fb27 	bl	8002d00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200003dc 	.word	0x200003dc

080016bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016c0:	4b39      	ldr	r3, [pc, #228]	; (80017a8 <SystemInit+0xec>)
 80016c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016c6:	4a38      	ldr	r2, [pc, #224]	; (80017a8 <SystemInit+0xec>)
 80016c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016d0:	4b36      	ldr	r3, [pc, #216]	; (80017ac <SystemInit+0xf0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 030f 	and.w	r3, r3, #15
 80016d8:	2b06      	cmp	r3, #6
 80016da:	d807      	bhi.n	80016ec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016dc:	4b33      	ldr	r3, [pc, #204]	; (80017ac <SystemInit+0xf0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f023 030f 	bic.w	r3, r3, #15
 80016e4:	4a31      	ldr	r2, [pc, #196]	; (80017ac <SystemInit+0xf0>)
 80016e6:	f043 0307 	orr.w	r3, r3, #7
 80016ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80016ec:	4b30      	ldr	r3, [pc, #192]	; (80017b0 <SystemInit+0xf4>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a2f      	ldr	r2, [pc, #188]	; (80017b0 <SystemInit+0xf4>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016f8:	4b2d      	ldr	r3, [pc, #180]	; (80017b0 <SystemInit+0xf4>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80016fe:	4b2c      	ldr	r3, [pc, #176]	; (80017b0 <SystemInit+0xf4>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	492b      	ldr	r1, [pc, #172]	; (80017b0 <SystemInit+0xf4>)
 8001704:	4b2b      	ldr	r3, [pc, #172]	; (80017b4 <SystemInit+0xf8>)
 8001706:	4013      	ands	r3, r2
 8001708:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800170a:	4b28      	ldr	r3, [pc, #160]	; (80017ac <SystemInit+0xf0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	2b00      	cmp	r3, #0
 8001714:	d007      	beq.n	8001726 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001716:	4b25      	ldr	r3, [pc, #148]	; (80017ac <SystemInit+0xf0>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f023 030f 	bic.w	r3, r3, #15
 800171e:	4a23      	ldr	r2, [pc, #140]	; (80017ac <SystemInit+0xf0>)
 8001720:	f043 0307 	orr.w	r3, r3, #7
 8001724:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001726:	4b22      	ldr	r3, [pc, #136]	; (80017b0 <SystemInit+0xf4>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800172c:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <SystemInit+0xf4>)
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001732:	4b1f      	ldr	r3, [pc, #124]	; (80017b0 <SystemInit+0xf4>)
 8001734:	2200      	movs	r2, #0
 8001736:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001738:	4b1d      	ldr	r3, [pc, #116]	; (80017b0 <SystemInit+0xf4>)
 800173a:	4a1f      	ldr	r2, [pc, #124]	; (80017b8 <SystemInit+0xfc>)
 800173c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800173e:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <SystemInit+0xf4>)
 8001740:	4a1e      	ldr	r2, [pc, #120]	; (80017bc <SystemInit+0x100>)
 8001742:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001744:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <SystemInit+0xf4>)
 8001746:	4a1e      	ldr	r2, [pc, #120]	; (80017c0 <SystemInit+0x104>)
 8001748:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800174a:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <SystemInit+0xf4>)
 800174c:	2200      	movs	r2, #0
 800174e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001750:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <SystemInit+0xf4>)
 8001752:	4a1b      	ldr	r2, [pc, #108]	; (80017c0 <SystemInit+0x104>)
 8001754:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001756:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <SystemInit+0xf4>)
 8001758:	2200      	movs	r2, #0
 800175a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800175c:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <SystemInit+0xf4>)
 800175e:	4a18      	ldr	r2, [pc, #96]	; (80017c0 <SystemInit+0x104>)
 8001760:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001762:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <SystemInit+0xf4>)
 8001764:	2200      	movs	r2, #0
 8001766:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <SystemInit+0xf4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a10      	ldr	r2, [pc, #64]	; (80017b0 <SystemInit+0xf4>)
 800176e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001772:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001774:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <SystemInit+0xf4>)
 8001776:	2200      	movs	r2, #0
 8001778:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800177a:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <SystemInit+0x108>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <SystemInit+0x10c>)
 8001780:	4013      	ands	r3, r2
 8001782:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001786:	d202      	bcs.n	800178e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001788:	4b10      	ldr	r3, [pc, #64]	; (80017cc <SystemInit+0x110>)
 800178a:	2201      	movs	r2, #1
 800178c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <SystemInit+0x114>)
 8001790:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001794:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001796:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <SystemInit+0xec>)
 8001798:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800179c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000ed00 	.word	0xe000ed00
 80017ac:	52002000 	.word	0x52002000
 80017b0:	58024400 	.word	0x58024400
 80017b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80017b8:	02020200 	.word	0x02020200
 80017bc:	01ff0000 	.word	0x01ff0000
 80017c0:	01010280 	.word	0x01010280
 80017c4:	5c001000 	.word	0x5c001000
 80017c8:	ffff0000 	.word	0xffff0000
 80017cc:	51008108 	.word	0x51008108
 80017d0:	52004000 	.word	0x52004000

080017d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80017d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800180c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017d8:	f7ff ff70 	bl	80016bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017dc:	480c      	ldr	r0, [pc, #48]	; (8001810 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017de:	490d      	ldr	r1, [pc, #52]	; (8001814 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017e0:	4a0d      	ldr	r2, [pc, #52]	; (8001818 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e4:	e002      	b.n	80017ec <LoopCopyDataInit>

080017e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ea:	3304      	adds	r3, #4

080017ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f0:	d3f9      	bcc.n	80017e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017f2:	4a0a      	ldr	r2, [pc, #40]	; (800181c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017f4:	4c0a      	ldr	r4, [pc, #40]	; (8001820 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f8:	e001      	b.n	80017fe <LoopFillZerobss>

080017fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017fc:	3204      	adds	r2, #4

080017fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001800:	d3fb      	bcc.n	80017fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001802:	f008 fbb9 	bl	8009f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001806:	f7fe fee3 	bl	80005d0 <main>
  bx  lr
 800180a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800180c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001814:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001818:	0800a038 	.word	0x0800a038
  ldr r2, =_sbss
 800181c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001820:	20000458 	.word	0x20000458

08001824 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001824:	e7fe      	b.n	8001824 <ADC3_IRQHandler>
	...

08001828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800182e:	2003      	movs	r0, #3
 8001830:	f000 f968 	bl	8001b04 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001834:	f003 fbc8 	bl	8004fc8 <HAL_RCC_GetSysClockFreq>
 8001838:	4602      	mov	r2, r0
 800183a:	4b15      	ldr	r3, [pc, #84]	; (8001890 <HAL_Init+0x68>)
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	0a1b      	lsrs	r3, r3, #8
 8001840:	f003 030f 	and.w	r3, r3, #15
 8001844:	4913      	ldr	r1, [pc, #76]	; (8001894 <HAL_Init+0x6c>)
 8001846:	5ccb      	ldrb	r3, [r1, r3]
 8001848:	f003 031f 	and.w	r3, r3, #31
 800184c:	fa22 f303 	lsr.w	r3, r2, r3
 8001850:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001852:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <HAL_Init+0x68>)
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	4a0e      	ldr	r2, [pc, #56]	; (8001894 <HAL_Init+0x6c>)
 800185c:	5cd3      	ldrb	r3, [r2, r3]
 800185e:	f003 031f 	and.w	r3, r3, #31
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	fa22 f303 	lsr.w	r3, r2, r3
 8001868:	4a0b      	ldr	r2, [pc, #44]	; (8001898 <HAL_Init+0x70>)
 800186a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800186c:	4a0b      	ldr	r2, [pc, #44]	; (800189c <HAL_Init+0x74>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001872:	2000      	movs	r0, #0
 8001874:	f000 f814 	bl	80018a0 <HAL_InitTick>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e002      	b.n	8001888 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001882:	f7ff fb7d 	bl	8000f80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	58024400 	.word	0x58024400
 8001894:	08009fe8 	.word	0x08009fe8
 8001898:	20000008 	.word	0x20000008
 800189c:	20000004 	.word	0x20000004

080018a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80018a8:	4b15      	ldr	r3, [pc, #84]	; (8001900 <HAL_InitTick+0x60>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e021      	b.n	80018f8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80018b4:	4b13      	ldr	r3, [pc, #76]	; (8001904 <HAL_InitTick+0x64>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b11      	ldr	r3, [pc, #68]	; (8001900 <HAL_InitTick+0x60>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4619      	mov	r1, r3
 80018be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 f94d 	bl	8001b6a <HAL_SYSTICK_Config>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e00e      	b.n	80018f8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b0f      	cmp	r3, #15
 80018de:	d80a      	bhi.n	80018f6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e0:	2200      	movs	r2, #0
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	f04f 30ff 	mov.w	r0, #4294967295
 80018e8:	f000 f917 	bl	8001b1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018ec:	4a06      	ldr	r2, [pc, #24]	; (8001908 <HAL_InitTick+0x68>)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	e000      	b.n	80018f8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000010 	.word	0x20000010
 8001904:	20000004 	.word	0x20000004
 8001908:	2000000c 	.word	0x2000000c

0800190c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_IncTick+0x20>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_IncTick+0x24>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4413      	add	r3, r2
 800191c:	4a04      	ldr	r2, [pc, #16]	; (8001930 <HAL_IncTick+0x24>)
 800191e:	6013      	str	r3, [r2, #0]
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	20000010 	.word	0x20000010
 8001930:	20000454 	.word	0x20000454

08001934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return uwTick;
 8001938:	4b03      	ldr	r3, [pc, #12]	; (8001948 <HAL_GetTick+0x14>)
 800193a:	681b      	ldr	r3, [r3, #0]
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20000454 	.word	0x20000454

0800194c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001950:	4b03      	ldr	r3, [pc, #12]	; (8001960 <HAL_GetREVID+0x14>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	0c1b      	lsrs	r3, r3, #16
}
 8001956:	4618      	mov	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	5c001000 	.word	0x5c001000

08001964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001980:	4013      	ands	r3, r2
 8001982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <__NVIC_SetPriorityGrouping+0x44>)
 800198e:	4313      	orrs	r3, r2
 8001990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001992:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	60d3      	str	r3, [r2, #12]
}
 8001998:	bf00      	nop
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000ed00 	.word	0xe000ed00
 80019a8:	05fa0000 	.word	0x05fa0000

080019ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b0:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <__NVIC_GetPriorityGrouping+0x18>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	0a1b      	lsrs	r3, r3, #8
 80019b6:	f003 0307 	and.w	r3, r3, #7
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	db0b      	blt.n	80019f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019da:	88fb      	ldrh	r3, [r7, #6]
 80019dc:	f003 021f 	and.w	r2, r3, #31
 80019e0:	4907      	ldr	r1, [pc, #28]	; (8001a00 <__NVIC_EnableIRQ+0x38>)
 80019e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019e6:	095b      	lsrs	r3, r3, #5
 80019e8:	2001      	movs	r0, #1
 80019ea:	fa00 f202 	lsl.w	r2, r0, r2
 80019ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000e100 	.word	0xe000e100

08001a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	6039      	str	r1, [r7, #0]
 8001a0e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	db0a      	blt.n	8001a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	490c      	ldr	r1, [pc, #48]	; (8001a50 <__NVIC_SetPriority+0x4c>)
 8001a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a22:	0112      	lsls	r2, r2, #4
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	440b      	add	r3, r1
 8001a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a2c:	e00a      	b.n	8001a44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4908      	ldr	r1, [pc, #32]	; (8001a54 <__NVIC_SetPriority+0x50>)
 8001a34:	88fb      	ldrh	r3, [r7, #6]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	3b04      	subs	r3, #4
 8001a3c:	0112      	lsls	r2, r2, #4
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	440b      	add	r3, r1
 8001a42:	761a      	strb	r2, [r3, #24]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000e100 	.word	0xe000e100
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b089      	sub	sp, #36	; 0x24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f1c3 0307 	rsb	r3, r3, #7
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	bf28      	it	cs
 8001a76:	2304      	movcs	r3, #4
 8001a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	2b06      	cmp	r3, #6
 8001a80:	d902      	bls.n	8001a88 <NVIC_EncodePriority+0x30>
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3b03      	subs	r3, #3
 8001a86:	e000      	b.n	8001a8a <NVIC_EncodePriority+0x32>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43da      	mvns	r2, r3
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	401a      	ands	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aaa:	43d9      	mvns	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	4313      	orrs	r3, r2
         );
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3724      	adds	r7, #36	; 0x24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ad0:	d301      	bcc.n	8001ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e00f      	b.n	8001af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <SysTick_Config+0x40>)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ade:	210f      	movs	r1, #15
 8001ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae4:	f7ff ff8e 	bl	8001a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <SysTick_Config+0x40>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aee:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <SysTick_Config+0x40>)
 8001af0:	2207      	movs	r2, #7
 8001af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	e000e010 	.word	0xe000e010

08001b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ff29 	bl	8001964 <__NVIC_SetPriorityGrouping>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b086      	sub	sp, #24
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	4603      	mov	r3, r0
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
 8001b26:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b28:	f7ff ff40 	bl	80019ac <__NVIC_GetPriorityGrouping>
 8001b2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	68b9      	ldr	r1, [r7, #8]
 8001b32:	6978      	ldr	r0, [r7, #20]
 8001b34:	f7ff ff90 	bl	8001a58 <NVIC_EncodePriority>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b3e:	4611      	mov	r1, r2
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff ff5f 	bl	8001a04 <__NVIC_SetPriority>
}
 8001b46:	bf00      	nop
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4603      	mov	r3, r0
 8001b56:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff33 	bl	80019c8 <__NVIC_EnableIRQ>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff ffa4 	bl	8001ac0 <SysTick_Config>
 8001b78:	4603      	mov	r3, r0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001b8c:	f7ff fed2 	bl	8001934 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e316      	b.n	80021ca <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a66      	ldr	r2, [pc, #408]	; (8001d3c <HAL_DMA_Init+0x1b8>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d04a      	beq.n	8001c3c <HAL_DMA_Init+0xb8>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a65      	ldr	r2, [pc, #404]	; (8001d40 <HAL_DMA_Init+0x1bc>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d045      	beq.n	8001c3c <HAL_DMA_Init+0xb8>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a63      	ldr	r2, [pc, #396]	; (8001d44 <HAL_DMA_Init+0x1c0>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d040      	beq.n	8001c3c <HAL_DMA_Init+0xb8>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a62      	ldr	r2, [pc, #392]	; (8001d48 <HAL_DMA_Init+0x1c4>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d03b      	beq.n	8001c3c <HAL_DMA_Init+0xb8>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a60      	ldr	r2, [pc, #384]	; (8001d4c <HAL_DMA_Init+0x1c8>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d036      	beq.n	8001c3c <HAL_DMA_Init+0xb8>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a5f      	ldr	r2, [pc, #380]	; (8001d50 <HAL_DMA_Init+0x1cc>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d031      	beq.n	8001c3c <HAL_DMA_Init+0xb8>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a5d      	ldr	r2, [pc, #372]	; (8001d54 <HAL_DMA_Init+0x1d0>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d02c      	beq.n	8001c3c <HAL_DMA_Init+0xb8>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a5c      	ldr	r2, [pc, #368]	; (8001d58 <HAL_DMA_Init+0x1d4>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d027      	beq.n	8001c3c <HAL_DMA_Init+0xb8>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a5a      	ldr	r2, [pc, #360]	; (8001d5c <HAL_DMA_Init+0x1d8>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d022      	beq.n	8001c3c <HAL_DMA_Init+0xb8>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a59      	ldr	r2, [pc, #356]	; (8001d60 <HAL_DMA_Init+0x1dc>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d01d      	beq.n	8001c3c <HAL_DMA_Init+0xb8>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a57      	ldr	r2, [pc, #348]	; (8001d64 <HAL_DMA_Init+0x1e0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d018      	beq.n	8001c3c <HAL_DMA_Init+0xb8>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a56      	ldr	r2, [pc, #344]	; (8001d68 <HAL_DMA_Init+0x1e4>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d013      	beq.n	8001c3c <HAL_DMA_Init+0xb8>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a54      	ldr	r2, [pc, #336]	; (8001d6c <HAL_DMA_Init+0x1e8>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d00e      	beq.n	8001c3c <HAL_DMA_Init+0xb8>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a53      	ldr	r2, [pc, #332]	; (8001d70 <HAL_DMA_Init+0x1ec>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d009      	beq.n	8001c3c <HAL_DMA_Init+0xb8>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a51      	ldr	r2, [pc, #324]	; (8001d74 <HAL_DMA_Init+0x1f0>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d004      	beq.n	8001c3c <HAL_DMA_Init+0xb8>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a50      	ldr	r2, [pc, #320]	; (8001d78 <HAL_DMA_Init+0x1f4>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d101      	bne.n	8001c40 <HAL_DMA_Init+0xbc>
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e000      	b.n	8001c42 <HAL_DMA_Init+0xbe>
 8001c40:	2300      	movs	r3, #0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 813b 	beq.w	8001ebe <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2202      	movs	r2, #2
 8001c54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a37      	ldr	r2, [pc, #220]	; (8001d3c <HAL_DMA_Init+0x1b8>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d04a      	beq.n	8001cf8 <HAL_DMA_Init+0x174>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a36      	ldr	r2, [pc, #216]	; (8001d40 <HAL_DMA_Init+0x1bc>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d045      	beq.n	8001cf8 <HAL_DMA_Init+0x174>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a34      	ldr	r2, [pc, #208]	; (8001d44 <HAL_DMA_Init+0x1c0>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d040      	beq.n	8001cf8 <HAL_DMA_Init+0x174>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a33      	ldr	r2, [pc, #204]	; (8001d48 <HAL_DMA_Init+0x1c4>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d03b      	beq.n	8001cf8 <HAL_DMA_Init+0x174>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a31      	ldr	r2, [pc, #196]	; (8001d4c <HAL_DMA_Init+0x1c8>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d036      	beq.n	8001cf8 <HAL_DMA_Init+0x174>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a30      	ldr	r2, [pc, #192]	; (8001d50 <HAL_DMA_Init+0x1cc>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d031      	beq.n	8001cf8 <HAL_DMA_Init+0x174>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a2e      	ldr	r2, [pc, #184]	; (8001d54 <HAL_DMA_Init+0x1d0>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d02c      	beq.n	8001cf8 <HAL_DMA_Init+0x174>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a2d      	ldr	r2, [pc, #180]	; (8001d58 <HAL_DMA_Init+0x1d4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d027      	beq.n	8001cf8 <HAL_DMA_Init+0x174>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a2b      	ldr	r2, [pc, #172]	; (8001d5c <HAL_DMA_Init+0x1d8>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d022      	beq.n	8001cf8 <HAL_DMA_Init+0x174>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a2a      	ldr	r2, [pc, #168]	; (8001d60 <HAL_DMA_Init+0x1dc>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d01d      	beq.n	8001cf8 <HAL_DMA_Init+0x174>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a28      	ldr	r2, [pc, #160]	; (8001d64 <HAL_DMA_Init+0x1e0>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d018      	beq.n	8001cf8 <HAL_DMA_Init+0x174>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a27      	ldr	r2, [pc, #156]	; (8001d68 <HAL_DMA_Init+0x1e4>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d013      	beq.n	8001cf8 <HAL_DMA_Init+0x174>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a25      	ldr	r2, [pc, #148]	; (8001d6c <HAL_DMA_Init+0x1e8>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d00e      	beq.n	8001cf8 <HAL_DMA_Init+0x174>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a24      	ldr	r2, [pc, #144]	; (8001d70 <HAL_DMA_Init+0x1ec>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d009      	beq.n	8001cf8 <HAL_DMA_Init+0x174>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a22      	ldr	r2, [pc, #136]	; (8001d74 <HAL_DMA_Init+0x1f0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d004      	beq.n	8001cf8 <HAL_DMA_Init+0x174>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a21      	ldr	r2, [pc, #132]	; (8001d78 <HAL_DMA_Init+0x1f4>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d108      	bne.n	8001d0a <HAL_DMA_Init+0x186>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 0201 	bic.w	r2, r2, #1
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	e007      	b.n	8001d1a <HAL_DMA_Init+0x196>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0201 	bic.w	r2, r2, #1
 8001d18:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d1a:	e02f      	b.n	8001d7c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d1c:	f7ff fe0a 	bl	8001934 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b05      	cmp	r3, #5
 8001d28:	d928      	bls.n	8001d7c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2220      	movs	r2, #32
 8001d2e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2203      	movs	r2, #3
 8001d34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e246      	b.n	80021ca <HAL_DMA_Init+0x646>
 8001d3c:	40020010 	.word	0x40020010
 8001d40:	40020028 	.word	0x40020028
 8001d44:	40020040 	.word	0x40020040
 8001d48:	40020058 	.word	0x40020058
 8001d4c:	40020070 	.word	0x40020070
 8001d50:	40020088 	.word	0x40020088
 8001d54:	400200a0 	.word	0x400200a0
 8001d58:	400200b8 	.word	0x400200b8
 8001d5c:	40020410 	.word	0x40020410
 8001d60:	40020428 	.word	0x40020428
 8001d64:	40020440 	.word	0x40020440
 8001d68:	40020458 	.word	0x40020458
 8001d6c:	40020470 	.word	0x40020470
 8001d70:	40020488 	.word	0x40020488
 8001d74:	400204a0 	.word	0x400204a0
 8001d78:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1c8      	bne.n	8001d1c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	4b83      	ldr	r3, [pc, #524]	; (8001fa4 <HAL_DMA_Init+0x420>)
 8001d96:	4013      	ands	r3, r2
 8001d98:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001da2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dae:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dba:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d107      	bne.n	8001de0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001de0:	4b71      	ldr	r3, [pc, #452]	; (8001fa8 <HAL_DMA_Init+0x424>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4b71      	ldr	r3, [pc, #452]	; (8001fac <HAL_DMA_Init+0x428>)
 8001de6:	4013      	ands	r3, r2
 8001de8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dec:	d328      	bcc.n	8001e40 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b28      	cmp	r3, #40	; 0x28
 8001df4:	d903      	bls.n	8001dfe <HAL_DMA_Init+0x27a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b2e      	cmp	r3, #46	; 0x2e
 8001dfc:	d917      	bls.n	8001e2e <HAL_DMA_Init+0x2aa>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b3e      	cmp	r3, #62	; 0x3e
 8001e04:	d903      	bls.n	8001e0e <HAL_DMA_Init+0x28a>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b42      	cmp	r3, #66	; 0x42
 8001e0c:	d90f      	bls.n	8001e2e <HAL_DMA_Init+0x2aa>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b46      	cmp	r3, #70	; 0x46
 8001e14:	d903      	bls.n	8001e1e <HAL_DMA_Init+0x29a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b48      	cmp	r3, #72	; 0x48
 8001e1c:	d907      	bls.n	8001e2e <HAL_DMA_Init+0x2aa>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b4e      	cmp	r3, #78	; 0x4e
 8001e24:	d905      	bls.n	8001e32 <HAL_DMA_Init+0x2ae>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b52      	cmp	r3, #82	; 0x52
 8001e2c:	d801      	bhi.n	8001e32 <HAL_DMA_Init+0x2ae>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <HAL_DMA_Init+0x2b0>
 8001e32:	2300      	movs	r3, #0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e3e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f023 0307 	bic.w	r3, r3, #7
 8001e56:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	d117      	bne.n	8001e9a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00e      	beq.n	8001e9a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f001 ff1b 	bl	8003cb8 <DMA_CheckFifoParam>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d008      	beq.n	8001e9a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2240      	movs	r2, #64	; 0x40
 8001e8c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e197      	b.n	80021ca <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f001 fe56 	bl	8003b54 <DMA_CalcBaseAndBitshift>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb0:	f003 031f 	and.w	r3, r3, #31
 8001eb4:	223f      	movs	r2, #63	; 0x3f
 8001eb6:	409a      	lsls	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	e0cd      	b.n	800205a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a3b      	ldr	r2, [pc, #236]	; (8001fb0 <HAL_DMA_Init+0x42c>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d022      	beq.n	8001f0e <HAL_DMA_Init+0x38a>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a39      	ldr	r2, [pc, #228]	; (8001fb4 <HAL_DMA_Init+0x430>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d01d      	beq.n	8001f0e <HAL_DMA_Init+0x38a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a38      	ldr	r2, [pc, #224]	; (8001fb8 <HAL_DMA_Init+0x434>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d018      	beq.n	8001f0e <HAL_DMA_Init+0x38a>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a36      	ldr	r2, [pc, #216]	; (8001fbc <HAL_DMA_Init+0x438>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d013      	beq.n	8001f0e <HAL_DMA_Init+0x38a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a35      	ldr	r2, [pc, #212]	; (8001fc0 <HAL_DMA_Init+0x43c>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d00e      	beq.n	8001f0e <HAL_DMA_Init+0x38a>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a33      	ldr	r2, [pc, #204]	; (8001fc4 <HAL_DMA_Init+0x440>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d009      	beq.n	8001f0e <HAL_DMA_Init+0x38a>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a32      	ldr	r2, [pc, #200]	; (8001fc8 <HAL_DMA_Init+0x444>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d004      	beq.n	8001f0e <HAL_DMA_Init+0x38a>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a30      	ldr	r2, [pc, #192]	; (8001fcc <HAL_DMA_Init+0x448>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d101      	bne.n	8001f12 <HAL_DMA_Init+0x38e>
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e000      	b.n	8001f14 <HAL_DMA_Init+0x390>
 8001f12:	2300      	movs	r3, #0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 8097 	beq.w	8002048 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a24      	ldr	r2, [pc, #144]	; (8001fb0 <HAL_DMA_Init+0x42c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d021      	beq.n	8001f68 <HAL_DMA_Init+0x3e4>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a22      	ldr	r2, [pc, #136]	; (8001fb4 <HAL_DMA_Init+0x430>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d01c      	beq.n	8001f68 <HAL_DMA_Init+0x3e4>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a21      	ldr	r2, [pc, #132]	; (8001fb8 <HAL_DMA_Init+0x434>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d017      	beq.n	8001f68 <HAL_DMA_Init+0x3e4>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a1f      	ldr	r2, [pc, #124]	; (8001fbc <HAL_DMA_Init+0x438>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d012      	beq.n	8001f68 <HAL_DMA_Init+0x3e4>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a1e      	ldr	r2, [pc, #120]	; (8001fc0 <HAL_DMA_Init+0x43c>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d00d      	beq.n	8001f68 <HAL_DMA_Init+0x3e4>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a1c      	ldr	r2, [pc, #112]	; (8001fc4 <HAL_DMA_Init+0x440>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d008      	beq.n	8001f68 <HAL_DMA_Init+0x3e4>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a1b      	ldr	r2, [pc, #108]	; (8001fc8 <HAL_DMA_Init+0x444>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d003      	beq.n	8001f68 <HAL_DMA_Init+0x3e4>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a19      	ldr	r2, [pc, #100]	; (8001fcc <HAL_DMA_Init+0x448>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2202      	movs	r2, #2
 8001f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <HAL_DMA_Init+0x44c>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	2b40      	cmp	r3, #64	; 0x40
 8001f90:	d020      	beq.n	8001fd4 <HAL_DMA_Init+0x450>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2b80      	cmp	r3, #128	; 0x80
 8001f98:	d102      	bne.n	8001fa0 <HAL_DMA_Init+0x41c>
 8001f9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f9e:	e01a      	b.n	8001fd6 <HAL_DMA_Init+0x452>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	e018      	b.n	8001fd6 <HAL_DMA_Init+0x452>
 8001fa4:	fe10803f 	.word	0xfe10803f
 8001fa8:	5c001000 	.word	0x5c001000
 8001fac:	ffff0000 	.word	0xffff0000
 8001fb0:	58025408 	.word	0x58025408
 8001fb4:	5802541c 	.word	0x5802541c
 8001fb8:	58025430 	.word	0x58025430
 8001fbc:	58025444 	.word	0x58025444
 8001fc0:	58025458 	.word	0x58025458
 8001fc4:	5802546c 	.word	0x5802546c
 8001fc8:	58025480 	.word	0x58025480
 8001fcc:	58025494 	.word	0x58025494
 8001fd0:	fffe000f 	.word	0xfffe000f
 8001fd4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	68d2      	ldr	r2, [r2, #12]
 8001fda:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001fdc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001fe4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001fec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001ff4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ffc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002004:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	4313      	orrs	r3, r2
 800200a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	461a      	mov	r2, r3
 800201a:	4b6e      	ldr	r3, [pc, #440]	; (80021d4 <HAL_DMA_Init+0x650>)
 800201c:	4413      	add	r3, r2
 800201e:	4a6e      	ldr	r2, [pc, #440]	; (80021d8 <HAL_DMA_Init+0x654>)
 8002020:	fba2 2303 	umull	r2, r3, r2, r3
 8002024:	091b      	lsrs	r3, r3, #4
 8002026:	009a      	lsls	r2, r3, #2
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f001 fd91 	bl	8003b54 <DMA_CalcBaseAndBitshift>
 8002032:	4603      	mov	r3, r0
 8002034:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203a:	f003 031f 	and.w	r3, r3, #31
 800203e:	2201      	movs	r2, #1
 8002040:	409a      	lsls	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	e008      	b.n	800205a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2240      	movs	r2, #64	; 0x40
 800204c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2203      	movs	r2, #3
 8002052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e0b7      	b.n	80021ca <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a5f      	ldr	r2, [pc, #380]	; (80021dc <HAL_DMA_Init+0x658>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d072      	beq.n	800214a <HAL_DMA_Init+0x5c6>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a5d      	ldr	r2, [pc, #372]	; (80021e0 <HAL_DMA_Init+0x65c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d06d      	beq.n	800214a <HAL_DMA_Init+0x5c6>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a5c      	ldr	r2, [pc, #368]	; (80021e4 <HAL_DMA_Init+0x660>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d068      	beq.n	800214a <HAL_DMA_Init+0x5c6>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a5a      	ldr	r2, [pc, #360]	; (80021e8 <HAL_DMA_Init+0x664>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d063      	beq.n	800214a <HAL_DMA_Init+0x5c6>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a59      	ldr	r2, [pc, #356]	; (80021ec <HAL_DMA_Init+0x668>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d05e      	beq.n	800214a <HAL_DMA_Init+0x5c6>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a57      	ldr	r2, [pc, #348]	; (80021f0 <HAL_DMA_Init+0x66c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d059      	beq.n	800214a <HAL_DMA_Init+0x5c6>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a56      	ldr	r2, [pc, #344]	; (80021f4 <HAL_DMA_Init+0x670>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d054      	beq.n	800214a <HAL_DMA_Init+0x5c6>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a54      	ldr	r2, [pc, #336]	; (80021f8 <HAL_DMA_Init+0x674>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d04f      	beq.n	800214a <HAL_DMA_Init+0x5c6>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a53      	ldr	r2, [pc, #332]	; (80021fc <HAL_DMA_Init+0x678>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d04a      	beq.n	800214a <HAL_DMA_Init+0x5c6>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a51      	ldr	r2, [pc, #324]	; (8002200 <HAL_DMA_Init+0x67c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d045      	beq.n	800214a <HAL_DMA_Init+0x5c6>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a50      	ldr	r2, [pc, #320]	; (8002204 <HAL_DMA_Init+0x680>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d040      	beq.n	800214a <HAL_DMA_Init+0x5c6>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a4e      	ldr	r2, [pc, #312]	; (8002208 <HAL_DMA_Init+0x684>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d03b      	beq.n	800214a <HAL_DMA_Init+0x5c6>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a4d      	ldr	r2, [pc, #308]	; (800220c <HAL_DMA_Init+0x688>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d036      	beq.n	800214a <HAL_DMA_Init+0x5c6>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a4b      	ldr	r2, [pc, #300]	; (8002210 <HAL_DMA_Init+0x68c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d031      	beq.n	800214a <HAL_DMA_Init+0x5c6>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a4a      	ldr	r2, [pc, #296]	; (8002214 <HAL_DMA_Init+0x690>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d02c      	beq.n	800214a <HAL_DMA_Init+0x5c6>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a48      	ldr	r2, [pc, #288]	; (8002218 <HAL_DMA_Init+0x694>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d027      	beq.n	800214a <HAL_DMA_Init+0x5c6>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a47      	ldr	r2, [pc, #284]	; (800221c <HAL_DMA_Init+0x698>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d022      	beq.n	800214a <HAL_DMA_Init+0x5c6>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a45      	ldr	r2, [pc, #276]	; (8002220 <HAL_DMA_Init+0x69c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d01d      	beq.n	800214a <HAL_DMA_Init+0x5c6>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a44      	ldr	r2, [pc, #272]	; (8002224 <HAL_DMA_Init+0x6a0>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d018      	beq.n	800214a <HAL_DMA_Init+0x5c6>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a42      	ldr	r2, [pc, #264]	; (8002228 <HAL_DMA_Init+0x6a4>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d013      	beq.n	800214a <HAL_DMA_Init+0x5c6>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a41      	ldr	r2, [pc, #260]	; (800222c <HAL_DMA_Init+0x6a8>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d00e      	beq.n	800214a <HAL_DMA_Init+0x5c6>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a3f      	ldr	r2, [pc, #252]	; (8002230 <HAL_DMA_Init+0x6ac>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d009      	beq.n	800214a <HAL_DMA_Init+0x5c6>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a3e      	ldr	r2, [pc, #248]	; (8002234 <HAL_DMA_Init+0x6b0>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d004      	beq.n	800214a <HAL_DMA_Init+0x5c6>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a3c      	ldr	r2, [pc, #240]	; (8002238 <HAL_DMA_Init+0x6b4>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d101      	bne.n	800214e <HAL_DMA_Init+0x5ca>
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <HAL_DMA_Init+0x5cc>
 800214e:	2300      	movs	r3, #0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d032      	beq.n	80021ba <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f001 fe2b 	bl	8003db0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b80      	cmp	r3, #128	; 0x80
 8002160:	d102      	bne.n	8002168 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800217c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d010      	beq.n	80021a8 <HAL_DMA_Init+0x624>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b08      	cmp	r3, #8
 800218c:	d80c      	bhi.n	80021a8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f001 fea8 	bl	8003ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	e008      	b.n	80021ba <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	a7fdabf8 	.word	0xa7fdabf8
 80021d8:	cccccccd 	.word	0xcccccccd
 80021dc:	40020010 	.word	0x40020010
 80021e0:	40020028 	.word	0x40020028
 80021e4:	40020040 	.word	0x40020040
 80021e8:	40020058 	.word	0x40020058
 80021ec:	40020070 	.word	0x40020070
 80021f0:	40020088 	.word	0x40020088
 80021f4:	400200a0 	.word	0x400200a0
 80021f8:	400200b8 	.word	0x400200b8
 80021fc:	40020410 	.word	0x40020410
 8002200:	40020428 	.word	0x40020428
 8002204:	40020440 	.word	0x40020440
 8002208:	40020458 	.word	0x40020458
 800220c:	40020470 	.word	0x40020470
 8002210:	40020488 	.word	0x40020488
 8002214:	400204a0 	.word	0x400204a0
 8002218:	400204b8 	.word	0x400204b8
 800221c:	58025408 	.word	0x58025408
 8002220:	5802541c 	.word	0x5802541c
 8002224:	58025430 	.word	0x58025430
 8002228:	58025444 	.word	0x58025444
 800222c:	58025458 	.word	0x58025458
 8002230:	5802546c 	.word	0x5802546c
 8002234:	58025480 	.word	0x58025480
 8002238:	58025494 	.word	0x58025494

0800223c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002244:	f7ff fb76 	bl	8001934 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e2dc      	b.n	800280e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d008      	beq.n	8002272 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2280      	movs	r2, #128	; 0x80
 8002264:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e2cd      	b.n	800280e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a76      	ldr	r2, [pc, #472]	; (8002450 <HAL_DMA_Abort+0x214>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d04a      	beq.n	8002312 <HAL_DMA_Abort+0xd6>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a74      	ldr	r2, [pc, #464]	; (8002454 <HAL_DMA_Abort+0x218>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d045      	beq.n	8002312 <HAL_DMA_Abort+0xd6>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a73      	ldr	r2, [pc, #460]	; (8002458 <HAL_DMA_Abort+0x21c>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d040      	beq.n	8002312 <HAL_DMA_Abort+0xd6>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a71      	ldr	r2, [pc, #452]	; (800245c <HAL_DMA_Abort+0x220>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d03b      	beq.n	8002312 <HAL_DMA_Abort+0xd6>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a70      	ldr	r2, [pc, #448]	; (8002460 <HAL_DMA_Abort+0x224>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d036      	beq.n	8002312 <HAL_DMA_Abort+0xd6>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a6e      	ldr	r2, [pc, #440]	; (8002464 <HAL_DMA_Abort+0x228>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d031      	beq.n	8002312 <HAL_DMA_Abort+0xd6>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a6d      	ldr	r2, [pc, #436]	; (8002468 <HAL_DMA_Abort+0x22c>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d02c      	beq.n	8002312 <HAL_DMA_Abort+0xd6>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a6b      	ldr	r2, [pc, #428]	; (800246c <HAL_DMA_Abort+0x230>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d027      	beq.n	8002312 <HAL_DMA_Abort+0xd6>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a6a      	ldr	r2, [pc, #424]	; (8002470 <HAL_DMA_Abort+0x234>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d022      	beq.n	8002312 <HAL_DMA_Abort+0xd6>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a68      	ldr	r2, [pc, #416]	; (8002474 <HAL_DMA_Abort+0x238>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d01d      	beq.n	8002312 <HAL_DMA_Abort+0xd6>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a67      	ldr	r2, [pc, #412]	; (8002478 <HAL_DMA_Abort+0x23c>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d018      	beq.n	8002312 <HAL_DMA_Abort+0xd6>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a65      	ldr	r2, [pc, #404]	; (800247c <HAL_DMA_Abort+0x240>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d013      	beq.n	8002312 <HAL_DMA_Abort+0xd6>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a64      	ldr	r2, [pc, #400]	; (8002480 <HAL_DMA_Abort+0x244>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d00e      	beq.n	8002312 <HAL_DMA_Abort+0xd6>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a62      	ldr	r2, [pc, #392]	; (8002484 <HAL_DMA_Abort+0x248>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d009      	beq.n	8002312 <HAL_DMA_Abort+0xd6>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a61      	ldr	r2, [pc, #388]	; (8002488 <HAL_DMA_Abort+0x24c>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d004      	beq.n	8002312 <HAL_DMA_Abort+0xd6>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a5f      	ldr	r2, [pc, #380]	; (800248c <HAL_DMA_Abort+0x250>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d101      	bne.n	8002316 <HAL_DMA_Abort+0xda>
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <HAL_DMA_Abort+0xdc>
 8002316:	2300      	movs	r3, #0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d013      	beq.n	8002344 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 021e 	bic.w	r2, r2, #30
 800232a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695a      	ldr	r2, [r3, #20]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800233a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	e00a      	b.n	800235a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 020e 	bic.w	r2, r2, #14
 8002352:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a3c      	ldr	r2, [pc, #240]	; (8002450 <HAL_DMA_Abort+0x214>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d072      	beq.n	800244a <HAL_DMA_Abort+0x20e>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a3a      	ldr	r2, [pc, #232]	; (8002454 <HAL_DMA_Abort+0x218>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d06d      	beq.n	800244a <HAL_DMA_Abort+0x20e>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a39      	ldr	r2, [pc, #228]	; (8002458 <HAL_DMA_Abort+0x21c>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d068      	beq.n	800244a <HAL_DMA_Abort+0x20e>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a37      	ldr	r2, [pc, #220]	; (800245c <HAL_DMA_Abort+0x220>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d063      	beq.n	800244a <HAL_DMA_Abort+0x20e>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a36      	ldr	r2, [pc, #216]	; (8002460 <HAL_DMA_Abort+0x224>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d05e      	beq.n	800244a <HAL_DMA_Abort+0x20e>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a34      	ldr	r2, [pc, #208]	; (8002464 <HAL_DMA_Abort+0x228>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d059      	beq.n	800244a <HAL_DMA_Abort+0x20e>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a33      	ldr	r2, [pc, #204]	; (8002468 <HAL_DMA_Abort+0x22c>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d054      	beq.n	800244a <HAL_DMA_Abort+0x20e>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a31      	ldr	r2, [pc, #196]	; (800246c <HAL_DMA_Abort+0x230>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d04f      	beq.n	800244a <HAL_DMA_Abort+0x20e>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a30      	ldr	r2, [pc, #192]	; (8002470 <HAL_DMA_Abort+0x234>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d04a      	beq.n	800244a <HAL_DMA_Abort+0x20e>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a2e      	ldr	r2, [pc, #184]	; (8002474 <HAL_DMA_Abort+0x238>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d045      	beq.n	800244a <HAL_DMA_Abort+0x20e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a2d      	ldr	r2, [pc, #180]	; (8002478 <HAL_DMA_Abort+0x23c>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d040      	beq.n	800244a <HAL_DMA_Abort+0x20e>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a2b      	ldr	r2, [pc, #172]	; (800247c <HAL_DMA_Abort+0x240>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d03b      	beq.n	800244a <HAL_DMA_Abort+0x20e>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a2a      	ldr	r2, [pc, #168]	; (8002480 <HAL_DMA_Abort+0x244>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d036      	beq.n	800244a <HAL_DMA_Abort+0x20e>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a28      	ldr	r2, [pc, #160]	; (8002484 <HAL_DMA_Abort+0x248>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d031      	beq.n	800244a <HAL_DMA_Abort+0x20e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a27      	ldr	r2, [pc, #156]	; (8002488 <HAL_DMA_Abort+0x24c>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d02c      	beq.n	800244a <HAL_DMA_Abort+0x20e>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a25      	ldr	r2, [pc, #148]	; (800248c <HAL_DMA_Abort+0x250>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d027      	beq.n	800244a <HAL_DMA_Abort+0x20e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a24      	ldr	r2, [pc, #144]	; (8002490 <HAL_DMA_Abort+0x254>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d022      	beq.n	800244a <HAL_DMA_Abort+0x20e>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a22      	ldr	r2, [pc, #136]	; (8002494 <HAL_DMA_Abort+0x258>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d01d      	beq.n	800244a <HAL_DMA_Abort+0x20e>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a21      	ldr	r2, [pc, #132]	; (8002498 <HAL_DMA_Abort+0x25c>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d018      	beq.n	800244a <HAL_DMA_Abort+0x20e>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a1f      	ldr	r2, [pc, #124]	; (800249c <HAL_DMA_Abort+0x260>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d013      	beq.n	800244a <HAL_DMA_Abort+0x20e>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a1e      	ldr	r2, [pc, #120]	; (80024a0 <HAL_DMA_Abort+0x264>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d00e      	beq.n	800244a <HAL_DMA_Abort+0x20e>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a1c      	ldr	r2, [pc, #112]	; (80024a4 <HAL_DMA_Abort+0x268>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d009      	beq.n	800244a <HAL_DMA_Abort+0x20e>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a1b      	ldr	r2, [pc, #108]	; (80024a8 <HAL_DMA_Abort+0x26c>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d004      	beq.n	800244a <HAL_DMA_Abort+0x20e>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a19      	ldr	r2, [pc, #100]	; (80024ac <HAL_DMA_Abort+0x270>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d132      	bne.n	80024b0 <HAL_DMA_Abort+0x274>
 800244a:	2301      	movs	r3, #1
 800244c:	e031      	b.n	80024b2 <HAL_DMA_Abort+0x276>
 800244e:	bf00      	nop
 8002450:	40020010 	.word	0x40020010
 8002454:	40020028 	.word	0x40020028
 8002458:	40020040 	.word	0x40020040
 800245c:	40020058 	.word	0x40020058
 8002460:	40020070 	.word	0x40020070
 8002464:	40020088 	.word	0x40020088
 8002468:	400200a0 	.word	0x400200a0
 800246c:	400200b8 	.word	0x400200b8
 8002470:	40020410 	.word	0x40020410
 8002474:	40020428 	.word	0x40020428
 8002478:	40020440 	.word	0x40020440
 800247c:	40020458 	.word	0x40020458
 8002480:	40020470 	.word	0x40020470
 8002484:	40020488 	.word	0x40020488
 8002488:	400204a0 	.word	0x400204a0
 800248c:	400204b8 	.word	0x400204b8
 8002490:	58025408 	.word	0x58025408
 8002494:	5802541c 	.word	0x5802541c
 8002498:	58025430 	.word	0x58025430
 800249c:	58025444 	.word	0x58025444
 80024a0:	58025458 	.word	0x58025458
 80024a4:	5802546c 	.word	0x5802546c
 80024a8:	58025480 	.word	0x58025480
 80024ac:	58025494 	.word	0x58025494
 80024b0:	2300      	movs	r3, #0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d007      	beq.n	80024c6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a6d      	ldr	r2, [pc, #436]	; (8002680 <HAL_DMA_Abort+0x444>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d04a      	beq.n	8002566 <HAL_DMA_Abort+0x32a>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a6b      	ldr	r2, [pc, #428]	; (8002684 <HAL_DMA_Abort+0x448>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d045      	beq.n	8002566 <HAL_DMA_Abort+0x32a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a6a      	ldr	r2, [pc, #424]	; (8002688 <HAL_DMA_Abort+0x44c>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d040      	beq.n	8002566 <HAL_DMA_Abort+0x32a>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a68      	ldr	r2, [pc, #416]	; (800268c <HAL_DMA_Abort+0x450>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d03b      	beq.n	8002566 <HAL_DMA_Abort+0x32a>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a67      	ldr	r2, [pc, #412]	; (8002690 <HAL_DMA_Abort+0x454>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d036      	beq.n	8002566 <HAL_DMA_Abort+0x32a>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a65      	ldr	r2, [pc, #404]	; (8002694 <HAL_DMA_Abort+0x458>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d031      	beq.n	8002566 <HAL_DMA_Abort+0x32a>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a64      	ldr	r2, [pc, #400]	; (8002698 <HAL_DMA_Abort+0x45c>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d02c      	beq.n	8002566 <HAL_DMA_Abort+0x32a>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a62      	ldr	r2, [pc, #392]	; (800269c <HAL_DMA_Abort+0x460>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d027      	beq.n	8002566 <HAL_DMA_Abort+0x32a>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a61      	ldr	r2, [pc, #388]	; (80026a0 <HAL_DMA_Abort+0x464>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d022      	beq.n	8002566 <HAL_DMA_Abort+0x32a>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a5f      	ldr	r2, [pc, #380]	; (80026a4 <HAL_DMA_Abort+0x468>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d01d      	beq.n	8002566 <HAL_DMA_Abort+0x32a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a5e      	ldr	r2, [pc, #376]	; (80026a8 <HAL_DMA_Abort+0x46c>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d018      	beq.n	8002566 <HAL_DMA_Abort+0x32a>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a5c      	ldr	r2, [pc, #368]	; (80026ac <HAL_DMA_Abort+0x470>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d013      	beq.n	8002566 <HAL_DMA_Abort+0x32a>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a5b      	ldr	r2, [pc, #364]	; (80026b0 <HAL_DMA_Abort+0x474>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d00e      	beq.n	8002566 <HAL_DMA_Abort+0x32a>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a59      	ldr	r2, [pc, #356]	; (80026b4 <HAL_DMA_Abort+0x478>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d009      	beq.n	8002566 <HAL_DMA_Abort+0x32a>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a58      	ldr	r2, [pc, #352]	; (80026b8 <HAL_DMA_Abort+0x47c>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d004      	beq.n	8002566 <HAL_DMA_Abort+0x32a>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a56      	ldr	r2, [pc, #344]	; (80026bc <HAL_DMA_Abort+0x480>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d108      	bne.n	8002578 <HAL_DMA_Abort+0x33c>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0201 	bic.w	r2, r2, #1
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	e007      	b.n	8002588 <HAL_DMA_Abort+0x34c>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0201 	bic.w	r2, r2, #1
 8002586:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002588:	e013      	b.n	80025b2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800258a:	f7ff f9d3 	bl	8001934 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b05      	cmp	r3, #5
 8002596:	d90c      	bls.n	80025b2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2220      	movs	r2, #32
 800259c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2203      	movs	r2, #3
 80025aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e12d      	b.n	800280e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1e5      	bne.n	800258a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a2f      	ldr	r2, [pc, #188]	; (8002680 <HAL_DMA_Abort+0x444>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d04a      	beq.n	800265e <HAL_DMA_Abort+0x422>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a2d      	ldr	r2, [pc, #180]	; (8002684 <HAL_DMA_Abort+0x448>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d045      	beq.n	800265e <HAL_DMA_Abort+0x422>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a2c      	ldr	r2, [pc, #176]	; (8002688 <HAL_DMA_Abort+0x44c>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d040      	beq.n	800265e <HAL_DMA_Abort+0x422>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a2a      	ldr	r2, [pc, #168]	; (800268c <HAL_DMA_Abort+0x450>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d03b      	beq.n	800265e <HAL_DMA_Abort+0x422>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a29      	ldr	r2, [pc, #164]	; (8002690 <HAL_DMA_Abort+0x454>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d036      	beq.n	800265e <HAL_DMA_Abort+0x422>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a27      	ldr	r2, [pc, #156]	; (8002694 <HAL_DMA_Abort+0x458>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d031      	beq.n	800265e <HAL_DMA_Abort+0x422>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a26      	ldr	r2, [pc, #152]	; (8002698 <HAL_DMA_Abort+0x45c>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d02c      	beq.n	800265e <HAL_DMA_Abort+0x422>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a24      	ldr	r2, [pc, #144]	; (800269c <HAL_DMA_Abort+0x460>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d027      	beq.n	800265e <HAL_DMA_Abort+0x422>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a23      	ldr	r2, [pc, #140]	; (80026a0 <HAL_DMA_Abort+0x464>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d022      	beq.n	800265e <HAL_DMA_Abort+0x422>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a21      	ldr	r2, [pc, #132]	; (80026a4 <HAL_DMA_Abort+0x468>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d01d      	beq.n	800265e <HAL_DMA_Abort+0x422>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a20      	ldr	r2, [pc, #128]	; (80026a8 <HAL_DMA_Abort+0x46c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d018      	beq.n	800265e <HAL_DMA_Abort+0x422>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a1e      	ldr	r2, [pc, #120]	; (80026ac <HAL_DMA_Abort+0x470>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d013      	beq.n	800265e <HAL_DMA_Abort+0x422>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a1d      	ldr	r2, [pc, #116]	; (80026b0 <HAL_DMA_Abort+0x474>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d00e      	beq.n	800265e <HAL_DMA_Abort+0x422>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a1b      	ldr	r2, [pc, #108]	; (80026b4 <HAL_DMA_Abort+0x478>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d009      	beq.n	800265e <HAL_DMA_Abort+0x422>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a1a      	ldr	r2, [pc, #104]	; (80026b8 <HAL_DMA_Abort+0x47c>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d004      	beq.n	800265e <HAL_DMA_Abort+0x422>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a18      	ldr	r2, [pc, #96]	; (80026bc <HAL_DMA_Abort+0x480>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d101      	bne.n	8002662 <HAL_DMA_Abort+0x426>
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <HAL_DMA_Abort+0x428>
 8002662:	2300      	movs	r3, #0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d02b      	beq.n	80026c0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002672:	f003 031f 	and.w	r3, r3, #31
 8002676:	223f      	movs	r2, #63	; 0x3f
 8002678:	409a      	lsls	r2, r3
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	609a      	str	r2, [r3, #8]
 800267e:	e02a      	b.n	80026d6 <HAL_DMA_Abort+0x49a>
 8002680:	40020010 	.word	0x40020010
 8002684:	40020028 	.word	0x40020028
 8002688:	40020040 	.word	0x40020040
 800268c:	40020058 	.word	0x40020058
 8002690:	40020070 	.word	0x40020070
 8002694:	40020088 	.word	0x40020088
 8002698:	400200a0 	.word	0x400200a0
 800269c:	400200b8 	.word	0x400200b8
 80026a0:	40020410 	.word	0x40020410
 80026a4:	40020428 	.word	0x40020428
 80026a8:	40020440 	.word	0x40020440
 80026ac:	40020458 	.word	0x40020458
 80026b0:	40020470 	.word	0x40020470
 80026b4:	40020488 	.word	0x40020488
 80026b8:	400204a0 	.word	0x400204a0
 80026bc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ca:	f003 031f 	and.w	r3, r3, #31
 80026ce:	2201      	movs	r2, #1
 80026d0:	409a      	lsls	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a4f      	ldr	r2, [pc, #316]	; (8002818 <HAL_DMA_Abort+0x5dc>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d072      	beq.n	80027c6 <HAL_DMA_Abort+0x58a>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a4d      	ldr	r2, [pc, #308]	; (800281c <HAL_DMA_Abort+0x5e0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d06d      	beq.n	80027c6 <HAL_DMA_Abort+0x58a>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a4c      	ldr	r2, [pc, #304]	; (8002820 <HAL_DMA_Abort+0x5e4>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d068      	beq.n	80027c6 <HAL_DMA_Abort+0x58a>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a4a      	ldr	r2, [pc, #296]	; (8002824 <HAL_DMA_Abort+0x5e8>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d063      	beq.n	80027c6 <HAL_DMA_Abort+0x58a>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a49      	ldr	r2, [pc, #292]	; (8002828 <HAL_DMA_Abort+0x5ec>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d05e      	beq.n	80027c6 <HAL_DMA_Abort+0x58a>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a47      	ldr	r2, [pc, #284]	; (800282c <HAL_DMA_Abort+0x5f0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d059      	beq.n	80027c6 <HAL_DMA_Abort+0x58a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a46      	ldr	r2, [pc, #280]	; (8002830 <HAL_DMA_Abort+0x5f4>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d054      	beq.n	80027c6 <HAL_DMA_Abort+0x58a>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a44      	ldr	r2, [pc, #272]	; (8002834 <HAL_DMA_Abort+0x5f8>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d04f      	beq.n	80027c6 <HAL_DMA_Abort+0x58a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a43      	ldr	r2, [pc, #268]	; (8002838 <HAL_DMA_Abort+0x5fc>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d04a      	beq.n	80027c6 <HAL_DMA_Abort+0x58a>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a41      	ldr	r2, [pc, #260]	; (800283c <HAL_DMA_Abort+0x600>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d045      	beq.n	80027c6 <HAL_DMA_Abort+0x58a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a40      	ldr	r2, [pc, #256]	; (8002840 <HAL_DMA_Abort+0x604>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d040      	beq.n	80027c6 <HAL_DMA_Abort+0x58a>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a3e      	ldr	r2, [pc, #248]	; (8002844 <HAL_DMA_Abort+0x608>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d03b      	beq.n	80027c6 <HAL_DMA_Abort+0x58a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a3d      	ldr	r2, [pc, #244]	; (8002848 <HAL_DMA_Abort+0x60c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d036      	beq.n	80027c6 <HAL_DMA_Abort+0x58a>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a3b      	ldr	r2, [pc, #236]	; (800284c <HAL_DMA_Abort+0x610>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d031      	beq.n	80027c6 <HAL_DMA_Abort+0x58a>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a3a      	ldr	r2, [pc, #232]	; (8002850 <HAL_DMA_Abort+0x614>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d02c      	beq.n	80027c6 <HAL_DMA_Abort+0x58a>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a38      	ldr	r2, [pc, #224]	; (8002854 <HAL_DMA_Abort+0x618>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d027      	beq.n	80027c6 <HAL_DMA_Abort+0x58a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a37      	ldr	r2, [pc, #220]	; (8002858 <HAL_DMA_Abort+0x61c>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d022      	beq.n	80027c6 <HAL_DMA_Abort+0x58a>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a35      	ldr	r2, [pc, #212]	; (800285c <HAL_DMA_Abort+0x620>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d01d      	beq.n	80027c6 <HAL_DMA_Abort+0x58a>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a34      	ldr	r2, [pc, #208]	; (8002860 <HAL_DMA_Abort+0x624>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d018      	beq.n	80027c6 <HAL_DMA_Abort+0x58a>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a32      	ldr	r2, [pc, #200]	; (8002864 <HAL_DMA_Abort+0x628>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d013      	beq.n	80027c6 <HAL_DMA_Abort+0x58a>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a31      	ldr	r2, [pc, #196]	; (8002868 <HAL_DMA_Abort+0x62c>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d00e      	beq.n	80027c6 <HAL_DMA_Abort+0x58a>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a2f      	ldr	r2, [pc, #188]	; (800286c <HAL_DMA_Abort+0x630>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d009      	beq.n	80027c6 <HAL_DMA_Abort+0x58a>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a2e      	ldr	r2, [pc, #184]	; (8002870 <HAL_DMA_Abort+0x634>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d004      	beq.n	80027c6 <HAL_DMA_Abort+0x58a>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a2c      	ldr	r2, [pc, #176]	; (8002874 <HAL_DMA_Abort+0x638>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d101      	bne.n	80027ca <HAL_DMA_Abort+0x58e>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <HAL_DMA_Abort+0x590>
 80027ca:	2300      	movs	r3, #0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d015      	beq.n	80027fc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80027d8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00c      	beq.n	80027fc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027f0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80027fa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40020010 	.word	0x40020010
 800281c:	40020028 	.word	0x40020028
 8002820:	40020040 	.word	0x40020040
 8002824:	40020058 	.word	0x40020058
 8002828:	40020070 	.word	0x40020070
 800282c:	40020088 	.word	0x40020088
 8002830:	400200a0 	.word	0x400200a0
 8002834:	400200b8 	.word	0x400200b8
 8002838:	40020410 	.word	0x40020410
 800283c:	40020428 	.word	0x40020428
 8002840:	40020440 	.word	0x40020440
 8002844:	40020458 	.word	0x40020458
 8002848:	40020470 	.word	0x40020470
 800284c:	40020488 	.word	0x40020488
 8002850:	400204a0 	.word	0x400204a0
 8002854:	400204b8 	.word	0x400204b8
 8002858:	58025408 	.word	0x58025408
 800285c:	5802541c 	.word	0x5802541c
 8002860:	58025430 	.word	0x58025430
 8002864:	58025444 	.word	0x58025444
 8002868:	58025458 	.word	0x58025458
 800286c:	5802546c 	.word	0x5802546c
 8002870:	58025480 	.word	0x58025480
 8002874:	58025494 	.word	0x58025494

08002878 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e205      	b.n	8002c96 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d004      	beq.n	80028a0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2280      	movs	r2, #128	; 0x80
 800289a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e1fa      	b.n	8002c96 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a8c      	ldr	r2, [pc, #560]	; (8002ad8 <HAL_DMA_Abort_IT+0x260>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d04a      	beq.n	8002940 <HAL_DMA_Abort_IT+0xc8>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a8b      	ldr	r2, [pc, #556]	; (8002adc <HAL_DMA_Abort_IT+0x264>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d045      	beq.n	8002940 <HAL_DMA_Abort_IT+0xc8>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a89      	ldr	r2, [pc, #548]	; (8002ae0 <HAL_DMA_Abort_IT+0x268>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d040      	beq.n	8002940 <HAL_DMA_Abort_IT+0xc8>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a88      	ldr	r2, [pc, #544]	; (8002ae4 <HAL_DMA_Abort_IT+0x26c>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d03b      	beq.n	8002940 <HAL_DMA_Abort_IT+0xc8>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a86      	ldr	r2, [pc, #536]	; (8002ae8 <HAL_DMA_Abort_IT+0x270>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d036      	beq.n	8002940 <HAL_DMA_Abort_IT+0xc8>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a85      	ldr	r2, [pc, #532]	; (8002aec <HAL_DMA_Abort_IT+0x274>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d031      	beq.n	8002940 <HAL_DMA_Abort_IT+0xc8>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a83      	ldr	r2, [pc, #524]	; (8002af0 <HAL_DMA_Abort_IT+0x278>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d02c      	beq.n	8002940 <HAL_DMA_Abort_IT+0xc8>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a82      	ldr	r2, [pc, #520]	; (8002af4 <HAL_DMA_Abort_IT+0x27c>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d027      	beq.n	8002940 <HAL_DMA_Abort_IT+0xc8>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a80      	ldr	r2, [pc, #512]	; (8002af8 <HAL_DMA_Abort_IT+0x280>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d022      	beq.n	8002940 <HAL_DMA_Abort_IT+0xc8>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a7f      	ldr	r2, [pc, #508]	; (8002afc <HAL_DMA_Abort_IT+0x284>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d01d      	beq.n	8002940 <HAL_DMA_Abort_IT+0xc8>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a7d      	ldr	r2, [pc, #500]	; (8002b00 <HAL_DMA_Abort_IT+0x288>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d018      	beq.n	8002940 <HAL_DMA_Abort_IT+0xc8>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a7c      	ldr	r2, [pc, #496]	; (8002b04 <HAL_DMA_Abort_IT+0x28c>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d013      	beq.n	8002940 <HAL_DMA_Abort_IT+0xc8>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a7a      	ldr	r2, [pc, #488]	; (8002b08 <HAL_DMA_Abort_IT+0x290>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d00e      	beq.n	8002940 <HAL_DMA_Abort_IT+0xc8>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a79      	ldr	r2, [pc, #484]	; (8002b0c <HAL_DMA_Abort_IT+0x294>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d009      	beq.n	8002940 <HAL_DMA_Abort_IT+0xc8>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a77      	ldr	r2, [pc, #476]	; (8002b10 <HAL_DMA_Abort_IT+0x298>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d004      	beq.n	8002940 <HAL_DMA_Abort_IT+0xc8>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a76      	ldr	r2, [pc, #472]	; (8002b14 <HAL_DMA_Abort_IT+0x29c>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d101      	bne.n	8002944 <HAL_DMA_Abort_IT+0xcc>
 8002940:	2301      	movs	r3, #1
 8002942:	e000      	b.n	8002946 <HAL_DMA_Abort_IT+0xce>
 8002944:	2300      	movs	r3, #0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d065      	beq.n	8002a16 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2204      	movs	r2, #4
 800294e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a60      	ldr	r2, [pc, #384]	; (8002ad8 <HAL_DMA_Abort_IT+0x260>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d04a      	beq.n	80029f2 <HAL_DMA_Abort_IT+0x17a>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a5e      	ldr	r2, [pc, #376]	; (8002adc <HAL_DMA_Abort_IT+0x264>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d045      	beq.n	80029f2 <HAL_DMA_Abort_IT+0x17a>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a5d      	ldr	r2, [pc, #372]	; (8002ae0 <HAL_DMA_Abort_IT+0x268>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d040      	beq.n	80029f2 <HAL_DMA_Abort_IT+0x17a>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a5b      	ldr	r2, [pc, #364]	; (8002ae4 <HAL_DMA_Abort_IT+0x26c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d03b      	beq.n	80029f2 <HAL_DMA_Abort_IT+0x17a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a5a      	ldr	r2, [pc, #360]	; (8002ae8 <HAL_DMA_Abort_IT+0x270>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d036      	beq.n	80029f2 <HAL_DMA_Abort_IT+0x17a>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a58      	ldr	r2, [pc, #352]	; (8002aec <HAL_DMA_Abort_IT+0x274>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d031      	beq.n	80029f2 <HAL_DMA_Abort_IT+0x17a>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a57      	ldr	r2, [pc, #348]	; (8002af0 <HAL_DMA_Abort_IT+0x278>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d02c      	beq.n	80029f2 <HAL_DMA_Abort_IT+0x17a>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a55      	ldr	r2, [pc, #340]	; (8002af4 <HAL_DMA_Abort_IT+0x27c>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d027      	beq.n	80029f2 <HAL_DMA_Abort_IT+0x17a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a54      	ldr	r2, [pc, #336]	; (8002af8 <HAL_DMA_Abort_IT+0x280>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d022      	beq.n	80029f2 <HAL_DMA_Abort_IT+0x17a>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a52      	ldr	r2, [pc, #328]	; (8002afc <HAL_DMA_Abort_IT+0x284>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d01d      	beq.n	80029f2 <HAL_DMA_Abort_IT+0x17a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a51      	ldr	r2, [pc, #324]	; (8002b00 <HAL_DMA_Abort_IT+0x288>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d018      	beq.n	80029f2 <HAL_DMA_Abort_IT+0x17a>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a4f      	ldr	r2, [pc, #316]	; (8002b04 <HAL_DMA_Abort_IT+0x28c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d013      	beq.n	80029f2 <HAL_DMA_Abort_IT+0x17a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a4e      	ldr	r2, [pc, #312]	; (8002b08 <HAL_DMA_Abort_IT+0x290>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d00e      	beq.n	80029f2 <HAL_DMA_Abort_IT+0x17a>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a4c      	ldr	r2, [pc, #304]	; (8002b0c <HAL_DMA_Abort_IT+0x294>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d009      	beq.n	80029f2 <HAL_DMA_Abort_IT+0x17a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a4b      	ldr	r2, [pc, #300]	; (8002b10 <HAL_DMA_Abort_IT+0x298>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d004      	beq.n	80029f2 <HAL_DMA_Abort_IT+0x17a>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a49      	ldr	r2, [pc, #292]	; (8002b14 <HAL_DMA_Abort_IT+0x29c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d108      	bne.n	8002a04 <HAL_DMA_Abort_IT+0x18c>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0201 	bic.w	r2, r2, #1
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	e147      	b.n	8002c94 <HAL_DMA_Abort_IT+0x41c>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0201 	bic.w	r2, r2, #1
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	e13e      	b.n	8002c94 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 020e 	bic.w	r2, r2, #14
 8002a24:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a2b      	ldr	r2, [pc, #172]	; (8002ad8 <HAL_DMA_Abort_IT+0x260>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d04a      	beq.n	8002ac6 <HAL_DMA_Abort_IT+0x24e>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a29      	ldr	r2, [pc, #164]	; (8002adc <HAL_DMA_Abort_IT+0x264>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d045      	beq.n	8002ac6 <HAL_DMA_Abort_IT+0x24e>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a28      	ldr	r2, [pc, #160]	; (8002ae0 <HAL_DMA_Abort_IT+0x268>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d040      	beq.n	8002ac6 <HAL_DMA_Abort_IT+0x24e>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a26      	ldr	r2, [pc, #152]	; (8002ae4 <HAL_DMA_Abort_IT+0x26c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d03b      	beq.n	8002ac6 <HAL_DMA_Abort_IT+0x24e>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a25      	ldr	r2, [pc, #148]	; (8002ae8 <HAL_DMA_Abort_IT+0x270>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d036      	beq.n	8002ac6 <HAL_DMA_Abort_IT+0x24e>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a23      	ldr	r2, [pc, #140]	; (8002aec <HAL_DMA_Abort_IT+0x274>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d031      	beq.n	8002ac6 <HAL_DMA_Abort_IT+0x24e>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a22      	ldr	r2, [pc, #136]	; (8002af0 <HAL_DMA_Abort_IT+0x278>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d02c      	beq.n	8002ac6 <HAL_DMA_Abort_IT+0x24e>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a20      	ldr	r2, [pc, #128]	; (8002af4 <HAL_DMA_Abort_IT+0x27c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d027      	beq.n	8002ac6 <HAL_DMA_Abort_IT+0x24e>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a1f      	ldr	r2, [pc, #124]	; (8002af8 <HAL_DMA_Abort_IT+0x280>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d022      	beq.n	8002ac6 <HAL_DMA_Abort_IT+0x24e>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a1d      	ldr	r2, [pc, #116]	; (8002afc <HAL_DMA_Abort_IT+0x284>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d01d      	beq.n	8002ac6 <HAL_DMA_Abort_IT+0x24e>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a1c      	ldr	r2, [pc, #112]	; (8002b00 <HAL_DMA_Abort_IT+0x288>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d018      	beq.n	8002ac6 <HAL_DMA_Abort_IT+0x24e>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a1a      	ldr	r2, [pc, #104]	; (8002b04 <HAL_DMA_Abort_IT+0x28c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d013      	beq.n	8002ac6 <HAL_DMA_Abort_IT+0x24e>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a19      	ldr	r2, [pc, #100]	; (8002b08 <HAL_DMA_Abort_IT+0x290>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d00e      	beq.n	8002ac6 <HAL_DMA_Abort_IT+0x24e>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a17      	ldr	r2, [pc, #92]	; (8002b0c <HAL_DMA_Abort_IT+0x294>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d009      	beq.n	8002ac6 <HAL_DMA_Abort_IT+0x24e>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a16      	ldr	r2, [pc, #88]	; (8002b10 <HAL_DMA_Abort_IT+0x298>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d004      	beq.n	8002ac6 <HAL_DMA_Abort_IT+0x24e>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a14      	ldr	r2, [pc, #80]	; (8002b14 <HAL_DMA_Abort_IT+0x29c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d128      	bne.n	8002b18 <HAL_DMA_Abort_IT+0x2a0>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0201 	bic.w	r2, r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	e027      	b.n	8002b28 <HAL_DMA_Abort_IT+0x2b0>
 8002ad8:	40020010 	.word	0x40020010
 8002adc:	40020028 	.word	0x40020028
 8002ae0:	40020040 	.word	0x40020040
 8002ae4:	40020058 	.word	0x40020058
 8002ae8:	40020070 	.word	0x40020070
 8002aec:	40020088 	.word	0x40020088
 8002af0:	400200a0 	.word	0x400200a0
 8002af4:	400200b8 	.word	0x400200b8
 8002af8:	40020410 	.word	0x40020410
 8002afc:	40020428 	.word	0x40020428
 8002b00:	40020440 	.word	0x40020440
 8002b04:	40020458 	.word	0x40020458
 8002b08:	40020470 	.word	0x40020470
 8002b0c:	40020488 	.word	0x40020488
 8002b10:	400204a0 	.word	0x400204a0
 8002b14:	400204b8 	.word	0x400204b8
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0201 	bic.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a5c      	ldr	r2, [pc, #368]	; (8002ca0 <HAL_DMA_Abort_IT+0x428>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d072      	beq.n	8002c18 <HAL_DMA_Abort_IT+0x3a0>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a5b      	ldr	r2, [pc, #364]	; (8002ca4 <HAL_DMA_Abort_IT+0x42c>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d06d      	beq.n	8002c18 <HAL_DMA_Abort_IT+0x3a0>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a59      	ldr	r2, [pc, #356]	; (8002ca8 <HAL_DMA_Abort_IT+0x430>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d068      	beq.n	8002c18 <HAL_DMA_Abort_IT+0x3a0>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a58      	ldr	r2, [pc, #352]	; (8002cac <HAL_DMA_Abort_IT+0x434>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d063      	beq.n	8002c18 <HAL_DMA_Abort_IT+0x3a0>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a56      	ldr	r2, [pc, #344]	; (8002cb0 <HAL_DMA_Abort_IT+0x438>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d05e      	beq.n	8002c18 <HAL_DMA_Abort_IT+0x3a0>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a55      	ldr	r2, [pc, #340]	; (8002cb4 <HAL_DMA_Abort_IT+0x43c>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d059      	beq.n	8002c18 <HAL_DMA_Abort_IT+0x3a0>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a53      	ldr	r2, [pc, #332]	; (8002cb8 <HAL_DMA_Abort_IT+0x440>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d054      	beq.n	8002c18 <HAL_DMA_Abort_IT+0x3a0>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a52      	ldr	r2, [pc, #328]	; (8002cbc <HAL_DMA_Abort_IT+0x444>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d04f      	beq.n	8002c18 <HAL_DMA_Abort_IT+0x3a0>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a50      	ldr	r2, [pc, #320]	; (8002cc0 <HAL_DMA_Abort_IT+0x448>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d04a      	beq.n	8002c18 <HAL_DMA_Abort_IT+0x3a0>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a4f      	ldr	r2, [pc, #316]	; (8002cc4 <HAL_DMA_Abort_IT+0x44c>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d045      	beq.n	8002c18 <HAL_DMA_Abort_IT+0x3a0>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a4d      	ldr	r2, [pc, #308]	; (8002cc8 <HAL_DMA_Abort_IT+0x450>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d040      	beq.n	8002c18 <HAL_DMA_Abort_IT+0x3a0>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a4c      	ldr	r2, [pc, #304]	; (8002ccc <HAL_DMA_Abort_IT+0x454>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d03b      	beq.n	8002c18 <HAL_DMA_Abort_IT+0x3a0>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a4a      	ldr	r2, [pc, #296]	; (8002cd0 <HAL_DMA_Abort_IT+0x458>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d036      	beq.n	8002c18 <HAL_DMA_Abort_IT+0x3a0>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a49      	ldr	r2, [pc, #292]	; (8002cd4 <HAL_DMA_Abort_IT+0x45c>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d031      	beq.n	8002c18 <HAL_DMA_Abort_IT+0x3a0>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a47      	ldr	r2, [pc, #284]	; (8002cd8 <HAL_DMA_Abort_IT+0x460>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d02c      	beq.n	8002c18 <HAL_DMA_Abort_IT+0x3a0>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a46      	ldr	r2, [pc, #280]	; (8002cdc <HAL_DMA_Abort_IT+0x464>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d027      	beq.n	8002c18 <HAL_DMA_Abort_IT+0x3a0>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a44      	ldr	r2, [pc, #272]	; (8002ce0 <HAL_DMA_Abort_IT+0x468>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d022      	beq.n	8002c18 <HAL_DMA_Abort_IT+0x3a0>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a43      	ldr	r2, [pc, #268]	; (8002ce4 <HAL_DMA_Abort_IT+0x46c>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d01d      	beq.n	8002c18 <HAL_DMA_Abort_IT+0x3a0>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a41      	ldr	r2, [pc, #260]	; (8002ce8 <HAL_DMA_Abort_IT+0x470>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d018      	beq.n	8002c18 <HAL_DMA_Abort_IT+0x3a0>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a40      	ldr	r2, [pc, #256]	; (8002cec <HAL_DMA_Abort_IT+0x474>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d013      	beq.n	8002c18 <HAL_DMA_Abort_IT+0x3a0>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a3e      	ldr	r2, [pc, #248]	; (8002cf0 <HAL_DMA_Abort_IT+0x478>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d00e      	beq.n	8002c18 <HAL_DMA_Abort_IT+0x3a0>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a3d      	ldr	r2, [pc, #244]	; (8002cf4 <HAL_DMA_Abort_IT+0x47c>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d009      	beq.n	8002c18 <HAL_DMA_Abort_IT+0x3a0>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a3b      	ldr	r2, [pc, #236]	; (8002cf8 <HAL_DMA_Abort_IT+0x480>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d004      	beq.n	8002c18 <HAL_DMA_Abort_IT+0x3a0>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a3a      	ldr	r2, [pc, #232]	; (8002cfc <HAL_DMA_Abort_IT+0x484>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d101      	bne.n	8002c1c <HAL_DMA_Abort_IT+0x3a4>
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e000      	b.n	8002c1e <HAL_DMA_Abort_IT+0x3a6>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d028      	beq.n	8002c74 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c30:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c36:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3c:	f003 031f 	and.w	r3, r3, #31
 8002c40:	2201      	movs	r2, #1
 8002c42:	409a      	lsls	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002c50:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00c      	beq.n	8002c74 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c68:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002c72:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40020010 	.word	0x40020010
 8002ca4:	40020028 	.word	0x40020028
 8002ca8:	40020040 	.word	0x40020040
 8002cac:	40020058 	.word	0x40020058
 8002cb0:	40020070 	.word	0x40020070
 8002cb4:	40020088 	.word	0x40020088
 8002cb8:	400200a0 	.word	0x400200a0
 8002cbc:	400200b8 	.word	0x400200b8
 8002cc0:	40020410 	.word	0x40020410
 8002cc4:	40020428 	.word	0x40020428
 8002cc8:	40020440 	.word	0x40020440
 8002ccc:	40020458 	.word	0x40020458
 8002cd0:	40020470 	.word	0x40020470
 8002cd4:	40020488 	.word	0x40020488
 8002cd8:	400204a0 	.word	0x400204a0
 8002cdc:	400204b8 	.word	0x400204b8
 8002ce0:	58025408 	.word	0x58025408
 8002ce4:	5802541c 	.word	0x5802541c
 8002ce8:	58025430 	.word	0x58025430
 8002cec:	58025444 	.word	0x58025444
 8002cf0:	58025458 	.word	0x58025458
 8002cf4:	5802546c 	.word	0x5802546c
 8002cf8:	58025480 	.word	0x58025480
 8002cfc:	58025494 	.word	0x58025494

08002d00 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b08a      	sub	sp, #40	; 0x28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d0c:	4b67      	ldr	r3, [pc, #412]	; (8002eac <HAL_DMA_IRQHandler+0x1ac>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a67      	ldr	r2, [pc, #412]	; (8002eb0 <HAL_DMA_IRQHandler+0x1b0>)
 8002d12:	fba2 2303 	umull	r2, r3, r2, r3
 8002d16:	0a9b      	lsrs	r3, r3, #10
 8002d18:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d24:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a5f      	ldr	r2, [pc, #380]	; (8002eb4 <HAL_DMA_IRQHandler+0x1b4>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d04a      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0xd2>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a5d      	ldr	r2, [pc, #372]	; (8002eb8 <HAL_DMA_IRQHandler+0x1b8>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d045      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0xd2>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a5c      	ldr	r2, [pc, #368]	; (8002ebc <HAL_DMA_IRQHandler+0x1bc>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d040      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0xd2>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a5a      	ldr	r2, [pc, #360]	; (8002ec0 <HAL_DMA_IRQHandler+0x1c0>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d03b      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0xd2>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a59      	ldr	r2, [pc, #356]	; (8002ec4 <HAL_DMA_IRQHandler+0x1c4>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d036      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0xd2>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a57      	ldr	r2, [pc, #348]	; (8002ec8 <HAL_DMA_IRQHandler+0x1c8>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d031      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0xd2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a56      	ldr	r2, [pc, #344]	; (8002ecc <HAL_DMA_IRQHandler+0x1cc>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d02c      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0xd2>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a54      	ldr	r2, [pc, #336]	; (8002ed0 <HAL_DMA_IRQHandler+0x1d0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d027      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0xd2>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a53      	ldr	r2, [pc, #332]	; (8002ed4 <HAL_DMA_IRQHandler+0x1d4>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d022      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0xd2>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a51      	ldr	r2, [pc, #324]	; (8002ed8 <HAL_DMA_IRQHandler+0x1d8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d01d      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0xd2>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a50      	ldr	r2, [pc, #320]	; (8002edc <HAL_DMA_IRQHandler+0x1dc>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d018      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0xd2>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a4e      	ldr	r2, [pc, #312]	; (8002ee0 <HAL_DMA_IRQHandler+0x1e0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d013      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0xd2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a4d      	ldr	r2, [pc, #308]	; (8002ee4 <HAL_DMA_IRQHandler+0x1e4>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d00e      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0xd2>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a4b      	ldr	r2, [pc, #300]	; (8002ee8 <HAL_DMA_IRQHandler+0x1e8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d009      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0xd2>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a4a      	ldr	r2, [pc, #296]	; (8002eec <HAL_DMA_IRQHandler+0x1ec>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d004      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0xd2>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a48      	ldr	r2, [pc, #288]	; (8002ef0 <HAL_DMA_IRQHandler+0x1f0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d101      	bne.n	8002dd6 <HAL_DMA_IRQHandler+0xd6>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <HAL_DMA_IRQHandler+0xd8>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 842b 	beq.w	8003634 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de2:	f003 031f 	and.w	r3, r3, #31
 8002de6:	2208      	movs	r2, #8
 8002de8:	409a      	lsls	r2, r3
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	4013      	ands	r3, r2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 80a2 	beq.w	8002f38 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a2e      	ldr	r2, [pc, #184]	; (8002eb4 <HAL_DMA_IRQHandler+0x1b4>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d04a      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x194>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a2d      	ldr	r2, [pc, #180]	; (8002eb8 <HAL_DMA_IRQHandler+0x1b8>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d045      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x194>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a2b      	ldr	r2, [pc, #172]	; (8002ebc <HAL_DMA_IRQHandler+0x1bc>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d040      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x194>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a2a      	ldr	r2, [pc, #168]	; (8002ec0 <HAL_DMA_IRQHandler+0x1c0>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d03b      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x194>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a28      	ldr	r2, [pc, #160]	; (8002ec4 <HAL_DMA_IRQHandler+0x1c4>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d036      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x194>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a27      	ldr	r2, [pc, #156]	; (8002ec8 <HAL_DMA_IRQHandler+0x1c8>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d031      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x194>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a25      	ldr	r2, [pc, #148]	; (8002ecc <HAL_DMA_IRQHandler+0x1cc>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d02c      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x194>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a24      	ldr	r2, [pc, #144]	; (8002ed0 <HAL_DMA_IRQHandler+0x1d0>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d027      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x194>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a22      	ldr	r2, [pc, #136]	; (8002ed4 <HAL_DMA_IRQHandler+0x1d4>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d022      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x194>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a21      	ldr	r2, [pc, #132]	; (8002ed8 <HAL_DMA_IRQHandler+0x1d8>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d01d      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x194>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a1f      	ldr	r2, [pc, #124]	; (8002edc <HAL_DMA_IRQHandler+0x1dc>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d018      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x194>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a1e      	ldr	r2, [pc, #120]	; (8002ee0 <HAL_DMA_IRQHandler+0x1e0>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d013      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x194>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a1c      	ldr	r2, [pc, #112]	; (8002ee4 <HAL_DMA_IRQHandler+0x1e4>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d00e      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x194>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a1b      	ldr	r2, [pc, #108]	; (8002ee8 <HAL_DMA_IRQHandler+0x1e8>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d009      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x194>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a19      	ldr	r2, [pc, #100]	; (8002eec <HAL_DMA_IRQHandler+0x1ec>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d004      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x194>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a18      	ldr	r2, [pc, #96]	; (8002ef0 <HAL_DMA_IRQHandler+0x1f0>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d12f      	bne.n	8002ef4 <HAL_DMA_IRQHandler+0x1f4>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0304 	and.w	r3, r3, #4
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	bf14      	ite	ne
 8002ea2:	2301      	movne	r3, #1
 8002ea4:	2300      	moveq	r3, #0
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	e02e      	b.n	8002f08 <HAL_DMA_IRQHandler+0x208>
 8002eaa:	bf00      	nop
 8002eac:	20000004 	.word	0x20000004
 8002eb0:	1b4e81b5 	.word	0x1b4e81b5
 8002eb4:	40020010 	.word	0x40020010
 8002eb8:	40020028 	.word	0x40020028
 8002ebc:	40020040 	.word	0x40020040
 8002ec0:	40020058 	.word	0x40020058
 8002ec4:	40020070 	.word	0x40020070
 8002ec8:	40020088 	.word	0x40020088
 8002ecc:	400200a0 	.word	0x400200a0
 8002ed0:	400200b8 	.word	0x400200b8
 8002ed4:	40020410 	.word	0x40020410
 8002ed8:	40020428 	.word	0x40020428
 8002edc:	40020440 	.word	0x40020440
 8002ee0:	40020458 	.word	0x40020458
 8002ee4:	40020470 	.word	0x40020470
 8002ee8:	40020488 	.word	0x40020488
 8002eec:	400204a0 	.word	0x400204a0
 8002ef0:	400204b8 	.word	0x400204b8
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	bf14      	ite	ne
 8002f02:	2301      	movne	r3, #1
 8002f04:	2300      	moveq	r3, #0
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d015      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0204 	bic.w	r2, r2, #4
 8002f1a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f20:	f003 031f 	and.w	r3, r3, #31
 8002f24:	2208      	movs	r2, #8
 8002f26:	409a      	lsls	r2, r3
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f30:	f043 0201 	orr.w	r2, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3c:	f003 031f 	and.w	r3, r3, #31
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	fa22 f303 	lsr.w	r3, r2, r3
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d06e      	beq.n	800302c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a69      	ldr	r2, [pc, #420]	; (80030f8 <HAL_DMA_IRQHandler+0x3f8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d04a      	beq.n	8002fee <HAL_DMA_IRQHandler+0x2ee>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a67      	ldr	r2, [pc, #412]	; (80030fc <HAL_DMA_IRQHandler+0x3fc>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d045      	beq.n	8002fee <HAL_DMA_IRQHandler+0x2ee>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a66      	ldr	r2, [pc, #408]	; (8003100 <HAL_DMA_IRQHandler+0x400>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d040      	beq.n	8002fee <HAL_DMA_IRQHandler+0x2ee>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a64      	ldr	r2, [pc, #400]	; (8003104 <HAL_DMA_IRQHandler+0x404>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d03b      	beq.n	8002fee <HAL_DMA_IRQHandler+0x2ee>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a63      	ldr	r2, [pc, #396]	; (8003108 <HAL_DMA_IRQHandler+0x408>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d036      	beq.n	8002fee <HAL_DMA_IRQHandler+0x2ee>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a61      	ldr	r2, [pc, #388]	; (800310c <HAL_DMA_IRQHandler+0x40c>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d031      	beq.n	8002fee <HAL_DMA_IRQHandler+0x2ee>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a60      	ldr	r2, [pc, #384]	; (8003110 <HAL_DMA_IRQHandler+0x410>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d02c      	beq.n	8002fee <HAL_DMA_IRQHandler+0x2ee>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a5e      	ldr	r2, [pc, #376]	; (8003114 <HAL_DMA_IRQHandler+0x414>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d027      	beq.n	8002fee <HAL_DMA_IRQHandler+0x2ee>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a5d      	ldr	r2, [pc, #372]	; (8003118 <HAL_DMA_IRQHandler+0x418>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d022      	beq.n	8002fee <HAL_DMA_IRQHandler+0x2ee>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a5b      	ldr	r2, [pc, #364]	; (800311c <HAL_DMA_IRQHandler+0x41c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d01d      	beq.n	8002fee <HAL_DMA_IRQHandler+0x2ee>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a5a      	ldr	r2, [pc, #360]	; (8003120 <HAL_DMA_IRQHandler+0x420>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d018      	beq.n	8002fee <HAL_DMA_IRQHandler+0x2ee>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a58      	ldr	r2, [pc, #352]	; (8003124 <HAL_DMA_IRQHandler+0x424>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d013      	beq.n	8002fee <HAL_DMA_IRQHandler+0x2ee>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a57      	ldr	r2, [pc, #348]	; (8003128 <HAL_DMA_IRQHandler+0x428>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d00e      	beq.n	8002fee <HAL_DMA_IRQHandler+0x2ee>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a55      	ldr	r2, [pc, #340]	; (800312c <HAL_DMA_IRQHandler+0x42c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d009      	beq.n	8002fee <HAL_DMA_IRQHandler+0x2ee>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a54      	ldr	r2, [pc, #336]	; (8003130 <HAL_DMA_IRQHandler+0x430>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d004      	beq.n	8002fee <HAL_DMA_IRQHandler+0x2ee>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a52      	ldr	r2, [pc, #328]	; (8003134 <HAL_DMA_IRQHandler+0x434>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d10a      	bne.n	8003004 <HAL_DMA_IRQHandler+0x304>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	bf14      	ite	ne
 8002ffc:	2301      	movne	r3, #1
 8002ffe:	2300      	moveq	r3, #0
 8003000:	b2db      	uxtb	r3, r3
 8003002:	e003      	b.n	800300c <HAL_DMA_IRQHandler+0x30c>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2300      	movs	r3, #0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00d      	beq.n	800302c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	2201      	movs	r2, #1
 800301a:	409a      	lsls	r2, r3
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003024:	f043 0202 	orr.w	r2, r3, #2
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003030:	f003 031f 	and.w	r3, r3, #31
 8003034:	2204      	movs	r2, #4
 8003036:	409a      	lsls	r2, r3
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	4013      	ands	r3, r2
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 808f 	beq.w	8003160 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a2c      	ldr	r2, [pc, #176]	; (80030f8 <HAL_DMA_IRQHandler+0x3f8>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d04a      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x3e2>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a2a      	ldr	r2, [pc, #168]	; (80030fc <HAL_DMA_IRQHandler+0x3fc>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d045      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x3e2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a29      	ldr	r2, [pc, #164]	; (8003100 <HAL_DMA_IRQHandler+0x400>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d040      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x3e2>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a27      	ldr	r2, [pc, #156]	; (8003104 <HAL_DMA_IRQHandler+0x404>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d03b      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x3e2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a26      	ldr	r2, [pc, #152]	; (8003108 <HAL_DMA_IRQHandler+0x408>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d036      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x3e2>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a24      	ldr	r2, [pc, #144]	; (800310c <HAL_DMA_IRQHandler+0x40c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d031      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x3e2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a23      	ldr	r2, [pc, #140]	; (8003110 <HAL_DMA_IRQHandler+0x410>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d02c      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x3e2>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a21      	ldr	r2, [pc, #132]	; (8003114 <HAL_DMA_IRQHandler+0x414>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d027      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x3e2>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a20      	ldr	r2, [pc, #128]	; (8003118 <HAL_DMA_IRQHandler+0x418>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d022      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x3e2>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a1e      	ldr	r2, [pc, #120]	; (800311c <HAL_DMA_IRQHandler+0x41c>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d01d      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x3e2>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a1d      	ldr	r2, [pc, #116]	; (8003120 <HAL_DMA_IRQHandler+0x420>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d018      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x3e2>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a1b      	ldr	r2, [pc, #108]	; (8003124 <HAL_DMA_IRQHandler+0x424>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d013      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x3e2>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a1a      	ldr	r2, [pc, #104]	; (8003128 <HAL_DMA_IRQHandler+0x428>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d00e      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x3e2>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a18      	ldr	r2, [pc, #96]	; (800312c <HAL_DMA_IRQHandler+0x42c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d009      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x3e2>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a17      	ldr	r2, [pc, #92]	; (8003130 <HAL_DMA_IRQHandler+0x430>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d004      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x3e2>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a15      	ldr	r2, [pc, #84]	; (8003134 <HAL_DMA_IRQHandler+0x434>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d12a      	bne.n	8003138 <HAL_DMA_IRQHandler+0x438>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf14      	ite	ne
 80030f0:	2301      	movne	r3, #1
 80030f2:	2300      	moveq	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	e023      	b.n	8003140 <HAL_DMA_IRQHandler+0x440>
 80030f8:	40020010 	.word	0x40020010
 80030fc:	40020028 	.word	0x40020028
 8003100:	40020040 	.word	0x40020040
 8003104:	40020058 	.word	0x40020058
 8003108:	40020070 	.word	0x40020070
 800310c:	40020088 	.word	0x40020088
 8003110:	400200a0 	.word	0x400200a0
 8003114:	400200b8 	.word	0x400200b8
 8003118:	40020410 	.word	0x40020410
 800311c:	40020428 	.word	0x40020428
 8003120:	40020440 	.word	0x40020440
 8003124:	40020458 	.word	0x40020458
 8003128:	40020470 	.word	0x40020470
 800312c:	40020488 	.word	0x40020488
 8003130:	400204a0 	.word	0x400204a0
 8003134:	400204b8 	.word	0x400204b8
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2300      	movs	r3, #0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00d      	beq.n	8003160 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003148:	f003 031f 	and.w	r3, r3, #31
 800314c:	2204      	movs	r2, #4
 800314e:	409a      	lsls	r2, r3
 8003150:	6a3b      	ldr	r3, [r7, #32]
 8003152:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003158:	f043 0204 	orr.w	r2, r3, #4
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003164:	f003 031f 	and.w	r3, r3, #31
 8003168:	2210      	movs	r2, #16
 800316a:	409a      	lsls	r2, r3
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	4013      	ands	r3, r2
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 80a6 	beq.w	80032c2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a85      	ldr	r2, [pc, #532]	; (8003390 <HAL_DMA_IRQHandler+0x690>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d04a      	beq.n	8003216 <HAL_DMA_IRQHandler+0x516>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a83      	ldr	r2, [pc, #524]	; (8003394 <HAL_DMA_IRQHandler+0x694>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d045      	beq.n	8003216 <HAL_DMA_IRQHandler+0x516>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a82      	ldr	r2, [pc, #520]	; (8003398 <HAL_DMA_IRQHandler+0x698>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d040      	beq.n	8003216 <HAL_DMA_IRQHandler+0x516>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a80      	ldr	r2, [pc, #512]	; (800339c <HAL_DMA_IRQHandler+0x69c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d03b      	beq.n	8003216 <HAL_DMA_IRQHandler+0x516>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a7f      	ldr	r2, [pc, #508]	; (80033a0 <HAL_DMA_IRQHandler+0x6a0>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d036      	beq.n	8003216 <HAL_DMA_IRQHandler+0x516>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a7d      	ldr	r2, [pc, #500]	; (80033a4 <HAL_DMA_IRQHandler+0x6a4>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d031      	beq.n	8003216 <HAL_DMA_IRQHandler+0x516>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a7c      	ldr	r2, [pc, #496]	; (80033a8 <HAL_DMA_IRQHandler+0x6a8>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d02c      	beq.n	8003216 <HAL_DMA_IRQHandler+0x516>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a7a      	ldr	r2, [pc, #488]	; (80033ac <HAL_DMA_IRQHandler+0x6ac>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d027      	beq.n	8003216 <HAL_DMA_IRQHandler+0x516>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a79      	ldr	r2, [pc, #484]	; (80033b0 <HAL_DMA_IRQHandler+0x6b0>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d022      	beq.n	8003216 <HAL_DMA_IRQHandler+0x516>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a77      	ldr	r2, [pc, #476]	; (80033b4 <HAL_DMA_IRQHandler+0x6b4>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d01d      	beq.n	8003216 <HAL_DMA_IRQHandler+0x516>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a76      	ldr	r2, [pc, #472]	; (80033b8 <HAL_DMA_IRQHandler+0x6b8>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d018      	beq.n	8003216 <HAL_DMA_IRQHandler+0x516>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a74      	ldr	r2, [pc, #464]	; (80033bc <HAL_DMA_IRQHandler+0x6bc>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d013      	beq.n	8003216 <HAL_DMA_IRQHandler+0x516>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a73      	ldr	r2, [pc, #460]	; (80033c0 <HAL_DMA_IRQHandler+0x6c0>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d00e      	beq.n	8003216 <HAL_DMA_IRQHandler+0x516>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a71      	ldr	r2, [pc, #452]	; (80033c4 <HAL_DMA_IRQHandler+0x6c4>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d009      	beq.n	8003216 <HAL_DMA_IRQHandler+0x516>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a70      	ldr	r2, [pc, #448]	; (80033c8 <HAL_DMA_IRQHandler+0x6c8>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d004      	beq.n	8003216 <HAL_DMA_IRQHandler+0x516>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a6e      	ldr	r2, [pc, #440]	; (80033cc <HAL_DMA_IRQHandler+0x6cc>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d10a      	bne.n	800322c <HAL_DMA_IRQHandler+0x52c>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0308 	and.w	r3, r3, #8
 8003220:	2b00      	cmp	r3, #0
 8003222:	bf14      	ite	ne
 8003224:	2301      	movne	r3, #1
 8003226:	2300      	moveq	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	e009      	b.n	8003240 <HAL_DMA_IRQHandler+0x540>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	2b00      	cmp	r3, #0
 8003238:	bf14      	ite	ne
 800323a:	2301      	movne	r3, #1
 800323c:	2300      	moveq	r3, #0
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	d03e      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003248:	f003 031f 	and.w	r3, r3, #31
 800324c:	2210      	movs	r2, #16
 800324e:	409a      	lsls	r2, r3
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d018      	beq.n	8003294 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d108      	bne.n	8003282 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003274:	2b00      	cmp	r3, #0
 8003276:	d024      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	4798      	blx	r3
 8003280:	e01f      	b.n	80032c2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003286:	2b00      	cmp	r3, #0
 8003288:	d01b      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	4798      	blx	r3
 8003292:	e016      	b.n	80032c2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d107      	bne.n	80032b2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 0208 	bic.w	r2, r2, #8
 80032b0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c6:	f003 031f 	and.w	r3, r3, #31
 80032ca:	2220      	movs	r2, #32
 80032cc:	409a      	lsls	r2, r3
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	4013      	ands	r3, r2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 8110 	beq.w	80034f8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a2c      	ldr	r2, [pc, #176]	; (8003390 <HAL_DMA_IRQHandler+0x690>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d04a      	beq.n	8003378 <HAL_DMA_IRQHandler+0x678>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a2b      	ldr	r2, [pc, #172]	; (8003394 <HAL_DMA_IRQHandler+0x694>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d045      	beq.n	8003378 <HAL_DMA_IRQHandler+0x678>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a29      	ldr	r2, [pc, #164]	; (8003398 <HAL_DMA_IRQHandler+0x698>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d040      	beq.n	8003378 <HAL_DMA_IRQHandler+0x678>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a28      	ldr	r2, [pc, #160]	; (800339c <HAL_DMA_IRQHandler+0x69c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d03b      	beq.n	8003378 <HAL_DMA_IRQHandler+0x678>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a26      	ldr	r2, [pc, #152]	; (80033a0 <HAL_DMA_IRQHandler+0x6a0>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d036      	beq.n	8003378 <HAL_DMA_IRQHandler+0x678>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a25      	ldr	r2, [pc, #148]	; (80033a4 <HAL_DMA_IRQHandler+0x6a4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d031      	beq.n	8003378 <HAL_DMA_IRQHandler+0x678>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a23      	ldr	r2, [pc, #140]	; (80033a8 <HAL_DMA_IRQHandler+0x6a8>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d02c      	beq.n	8003378 <HAL_DMA_IRQHandler+0x678>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a22      	ldr	r2, [pc, #136]	; (80033ac <HAL_DMA_IRQHandler+0x6ac>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d027      	beq.n	8003378 <HAL_DMA_IRQHandler+0x678>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a20      	ldr	r2, [pc, #128]	; (80033b0 <HAL_DMA_IRQHandler+0x6b0>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d022      	beq.n	8003378 <HAL_DMA_IRQHandler+0x678>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a1f      	ldr	r2, [pc, #124]	; (80033b4 <HAL_DMA_IRQHandler+0x6b4>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d01d      	beq.n	8003378 <HAL_DMA_IRQHandler+0x678>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a1d      	ldr	r2, [pc, #116]	; (80033b8 <HAL_DMA_IRQHandler+0x6b8>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d018      	beq.n	8003378 <HAL_DMA_IRQHandler+0x678>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a1c      	ldr	r2, [pc, #112]	; (80033bc <HAL_DMA_IRQHandler+0x6bc>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d013      	beq.n	8003378 <HAL_DMA_IRQHandler+0x678>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a1a      	ldr	r2, [pc, #104]	; (80033c0 <HAL_DMA_IRQHandler+0x6c0>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d00e      	beq.n	8003378 <HAL_DMA_IRQHandler+0x678>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a19      	ldr	r2, [pc, #100]	; (80033c4 <HAL_DMA_IRQHandler+0x6c4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d009      	beq.n	8003378 <HAL_DMA_IRQHandler+0x678>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a17      	ldr	r2, [pc, #92]	; (80033c8 <HAL_DMA_IRQHandler+0x6c8>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d004      	beq.n	8003378 <HAL_DMA_IRQHandler+0x678>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a16      	ldr	r2, [pc, #88]	; (80033cc <HAL_DMA_IRQHandler+0x6cc>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d12b      	bne.n	80033d0 <HAL_DMA_IRQHandler+0x6d0>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0310 	and.w	r3, r3, #16
 8003382:	2b00      	cmp	r3, #0
 8003384:	bf14      	ite	ne
 8003386:	2301      	movne	r3, #1
 8003388:	2300      	moveq	r3, #0
 800338a:	b2db      	uxtb	r3, r3
 800338c:	e02a      	b.n	80033e4 <HAL_DMA_IRQHandler+0x6e4>
 800338e:	bf00      	nop
 8003390:	40020010 	.word	0x40020010
 8003394:	40020028 	.word	0x40020028
 8003398:	40020040 	.word	0x40020040
 800339c:	40020058 	.word	0x40020058
 80033a0:	40020070 	.word	0x40020070
 80033a4:	40020088 	.word	0x40020088
 80033a8:	400200a0 	.word	0x400200a0
 80033ac:	400200b8 	.word	0x400200b8
 80033b0:	40020410 	.word	0x40020410
 80033b4:	40020428 	.word	0x40020428
 80033b8:	40020440 	.word	0x40020440
 80033bc:	40020458 	.word	0x40020458
 80033c0:	40020470 	.word	0x40020470
 80033c4:	40020488 	.word	0x40020488
 80033c8:	400204a0 	.word	0x400204a0
 80033cc:	400204b8 	.word	0x400204b8
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	bf14      	ite	ne
 80033de:	2301      	movne	r3, #1
 80033e0:	2300      	moveq	r3, #0
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 8087 	beq.w	80034f8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ee:	f003 031f 	and.w	r3, r3, #31
 80033f2:	2220      	movs	r2, #32
 80033f4:	409a      	lsls	r2, r3
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b04      	cmp	r3, #4
 8003404:	d139      	bne.n	800347a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0216 	bic.w	r2, r2, #22
 8003414:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695a      	ldr	r2, [r3, #20]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003424:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	2b00      	cmp	r3, #0
 800342c:	d103      	bne.n	8003436 <HAL_DMA_IRQHandler+0x736>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003432:	2b00      	cmp	r3, #0
 8003434:	d007      	beq.n	8003446 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 0208 	bic.w	r2, r2, #8
 8003444:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344a:	f003 031f 	and.w	r3, r3, #31
 800344e:	223f      	movs	r2, #63	; 0x3f
 8003450:	409a      	lsls	r2, r3
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 834a 	beq.w	8003b04 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	4798      	blx	r3
          }
          return;
 8003478:	e344      	b.n	8003b04 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d018      	beq.n	80034ba <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d108      	bne.n	80034a8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349a:	2b00      	cmp	r3, #0
 800349c:	d02c      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	4798      	blx	r3
 80034a6:	e027      	b.n	80034f8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d023      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	4798      	blx	r3
 80034b8:	e01e      	b.n	80034f8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10f      	bne.n	80034e8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0210 	bic.w	r2, r2, #16
 80034d6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 8306 	beq.w	8003b0e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 8088 	beq.w	8003620 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2204      	movs	r2, #4
 8003514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a7a      	ldr	r2, [pc, #488]	; (8003708 <HAL_DMA_IRQHandler+0xa08>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d04a      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x8b8>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a79      	ldr	r2, [pc, #484]	; (800370c <HAL_DMA_IRQHandler+0xa0c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d045      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x8b8>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a77      	ldr	r2, [pc, #476]	; (8003710 <HAL_DMA_IRQHandler+0xa10>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d040      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x8b8>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a76      	ldr	r2, [pc, #472]	; (8003714 <HAL_DMA_IRQHandler+0xa14>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d03b      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x8b8>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a74      	ldr	r2, [pc, #464]	; (8003718 <HAL_DMA_IRQHandler+0xa18>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d036      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x8b8>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a73      	ldr	r2, [pc, #460]	; (800371c <HAL_DMA_IRQHandler+0xa1c>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d031      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x8b8>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a71      	ldr	r2, [pc, #452]	; (8003720 <HAL_DMA_IRQHandler+0xa20>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d02c      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x8b8>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a70      	ldr	r2, [pc, #448]	; (8003724 <HAL_DMA_IRQHandler+0xa24>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d027      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x8b8>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a6e      	ldr	r2, [pc, #440]	; (8003728 <HAL_DMA_IRQHandler+0xa28>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d022      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x8b8>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a6d      	ldr	r2, [pc, #436]	; (800372c <HAL_DMA_IRQHandler+0xa2c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d01d      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x8b8>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a6b      	ldr	r2, [pc, #428]	; (8003730 <HAL_DMA_IRQHandler+0xa30>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d018      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x8b8>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a6a      	ldr	r2, [pc, #424]	; (8003734 <HAL_DMA_IRQHandler+0xa34>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d013      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x8b8>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a68      	ldr	r2, [pc, #416]	; (8003738 <HAL_DMA_IRQHandler+0xa38>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d00e      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x8b8>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a67      	ldr	r2, [pc, #412]	; (800373c <HAL_DMA_IRQHandler+0xa3c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d009      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x8b8>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a65      	ldr	r2, [pc, #404]	; (8003740 <HAL_DMA_IRQHandler+0xa40>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d004      	beq.n	80035b8 <HAL_DMA_IRQHandler+0x8b8>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a64      	ldr	r2, [pc, #400]	; (8003744 <HAL_DMA_IRQHandler+0xa44>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d108      	bne.n	80035ca <HAL_DMA_IRQHandler+0x8ca>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0201 	bic.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	e007      	b.n	80035da <HAL_DMA_IRQHandler+0x8da>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0201 	bic.w	r2, r2, #1
 80035d8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	3301      	adds	r3, #1
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d307      	bcc.n	80035f6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1f2      	bne.n	80035da <HAL_DMA_IRQHandler+0x8da>
 80035f4:	e000      	b.n	80035f8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80035f6:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d004      	beq.n	8003618 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2203      	movs	r2, #3
 8003612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003616:	e003      	b.n	8003620 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 8272 	beq.w	8003b0e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	4798      	blx	r3
 8003632:	e26c      	b.n	8003b0e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a43      	ldr	r2, [pc, #268]	; (8003748 <HAL_DMA_IRQHandler+0xa48>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d022      	beq.n	8003684 <HAL_DMA_IRQHandler+0x984>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a42      	ldr	r2, [pc, #264]	; (800374c <HAL_DMA_IRQHandler+0xa4c>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d01d      	beq.n	8003684 <HAL_DMA_IRQHandler+0x984>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a40      	ldr	r2, [pc, #256]	; (8003750 <HAL_DMA_IRQHandler+0xa50>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d018      	beq.n	8003684 <HAL_DMA_IRQHandler+0x984>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a3f      	ldr	r2, [pc, #252]	; (8003754 <HAL_DMA_IRQHandler+0xa54>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d013      	beq.n	8003684 <HAL_DMA_IRQHandler+0x984>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a3d      	ldr	r2, [pc, #244]	; (8003758 <HAL_DMA_IRQHandler+0xa58>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d00e      	beq.n	8003684 <HAL_DMA_IRQHandler+0x984>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a3c      	ldr	r2, [pc, #240]	; (800375c <HAL_DMA_IRQHandler+0xa5c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d009      	beq.n	8003684 <HAL_DMA_IRQHandler+0x984>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a3a      	ldr	r2, [pc, #232]	; (8003760 <HAL_DMA_IRQHandler+0xa60>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d004      	beq.n	8003684 <HAL_DMA_IRQHandler+0x984>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a39      	ldr	r2, [pc, #228]	; (8003764 <HAL_DMA_IRQHandler+0xa64>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d101      	bne.n	8003688 <HAL_DMA_IRQHandler+0x988>
 8003684:	2301      	movs	r3, #1
 8003686:	e000      	b.n	800368a <HAL_DMA_IRQHandler+0x98a>
 8003688:	2300      	movs	r3, #0
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 823f 	beq.w	8003b0e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369c:	f003 031f 	and.w	r3, r3, #31
 80036a0:	2204      	movs	r2, #4
 80036a2:	409a      	lsls	r2, r3
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 80cd 	beq.w	8003848 <HAL_DMA_IRQHandler+0xb48>
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 80c7 	beq.w	8003848 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036be:	f003 031f 	and.w	r3, r3, #31
 80036c2:	2204      	movs	r2, #4
 80036c4:	409a      	lsls	r2, r3
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d049      	beq.n	8003768 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d109      	bne.n	80036f2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 8210 	beq.w	8003b08 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036f0:	e20a      	b.n	8003b08 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 8206 	beq.w	8003b08 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003704:	e200      	b.n	8003b08 <HAL_DMA_IRQHandler+0xe08>
 8003706:	bf00      	nop
 8003708:	40020010 	.word	0x40020010
 800370c:	40020028 	.word	0x40020028
 8003710:	40020040 	.word	0x40020040
 8003714:	40020058 	.word	0x40020058
 8003718:	40020070 	.word	0x40020070
 800371c:	40020088 	.word	0x40020088
 8003720:	400200a0 	.word	0x400200a0
 8003724:	400200b8 	.word	0x400200b8
 8003728:	40020410 	.word	0x40020410
 800372c:	40020428 	.word	0x40020428
 8003730:	40020440 	.word	0x40020440
 8003734:	40020458 	.word	0x40020458
 8003738:	40020470 	.word	0x40020470
 800373c:	40020488 	.word	0x40020488
 8003740:	400204a0 	.word	0x400204a0
 8003744:	400204b8 	.word	0x400204b8
 8003748:	58025408 	.word	0x58025408
 800374c:	5802541c 	.word	0x5802541c
 8003750:	58025430 	.word	0x58025430
 8003754:	58025444 	.word	0x58025444
 8003758:	58025458 	.word	0x58025458
 800375c:	5802546c 	.word	0x5802546c
 8003760:	58025480 	.word	0x58025480
 8003764:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f003 0320 	and.w	r3, r3, #32
 800376e:	2b00      	cmp	r3, #0
 8003770:	d160      	bne.n	8003834 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a8c      	ldr	r2, [pc, #560]	; (80039a8 <HAL_DMA_IRQHandler+0xca8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d04a      	beq.n	8003812 <HAL_DMA_IRQHandler+0xb12>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a8a      	ldr	r2, [pc, #552]	; (80039ac <HAL_DMA_IRQHandler+0xcac>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d045      	beq.n	8003812 <HAL_DMA_IRQHandler+0xb12>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a89      	ldr	r2, [pc, #548]	; (80039b0 <HAL_DMA_IRQHandler+0xcb0>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d040      	beq.n	8003812 <HAL_DMA_IRQHandler+0xb12>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a87      	ldr	r2, [pc, #540]	; (80039b4 <HAL_DMA_IRQHandler+0xcb4>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d03b      	beq.n	8003812 <HAL_DMA_IRQHandler+0xb12>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a86      	ldr	r2, [pc, #536]	; (80039b8 <HAL_DMA_IRQHandler+0xcb8>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d036      	beq.n	8003812 <HAL_DMA_IRQHandler+0xb12>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a84      	ldr	r2, [pc, #528]	; (80039bc <HAL_DMA_IRQHandler+0xcbc>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d031      	beq.n	8003812 <HAL_DMA_IRQHandler+0xb12>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a83      	ldr	r2, [pc, #524]	; (80039c0 <HAL_DMA_IRQHandler+0xcc0>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d02c      	beq.n	8003812 <HAL_DMA_IRQHandler+0xb12>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a81      	ldr	r2, [pc, #516]	; (80039c4 <HAL_DMA_IRQHandler+0xcc4>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d027      	beq.n	8003812 <HAL_DMA_IRQHandler+0xb12>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a80      	ldr	r2, [pc, #512]	; (80039c8 <HAL_DMA_IRQHandler+0xcc8>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d022      	beq.n	8003812 <HAL_DMA_IRQHandler+0xb12>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a7e      	ldr	r2, [pc, #504]	; (80039cc <HAL_DMA_IRQHandler+0xccc>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d01d      	beq.n	8003812 <HAL_DMA_IRQHandler+0xb12>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a7d      	ldr	r2, [pc, #500]	; (80039d0 <HAL_DMA_IRQHandler+0xcd0>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d018      	beq.n	8003812 <HAL_DMA_IRQHandler+0xb12>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a7b      	ldr	r2, [pc, #492]	; (80039d4 <HAL_DMA_IRQHandler+0xcd4>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d013      	beq.n	8003812 <HAL_DMA_IRQHandler+0xb12>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a7a      	ldr	r2, [pc, #488]	; (80039d8 <HAL_DMA_IRQHandler+0xcd8>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d00e      	beq.n	8003812 <HAL_DMA_IRQHandler+0xb12>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a78      	ldr	r2, [pc, #480]	; (80039dc <HAL_DMA_IRQHandler+0xcdc>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d009      	beq.n	8003812 <HAL_DMA_IRQHandler+0xb12>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a77      	ldr	r2, [pc, #476]	; (80039e0 <HAL_DMA_IRQHandler+0xce0>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d004      	beq.n	8003812 <HAL_DMA_IRQHandler+0xb12>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a75      	ldr	r2, [pc, #468]	; (80039e4 <HAL_DMA_IRQHandler+0xce4>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d108      	bne.n	8003824 <HAL_DMA_IRQHandler+0xb24>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0208 	bic.w	r2, r2, #8
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	e007      	b.n	8003834 <HAL_DMA_IRQHandler+0xb34>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0204 	bic.w	r2, r2, #4
 8003832:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 8165 	beq.w	8003b08 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003846:	e15f      	b.n	8003b08 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384c:	f003 031f 	and.w	r3, r3, #31
 8003850:	2202      	movs	r2, #2
 8003852:	409a      	lsls	r2, r3
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	4013      	ands	r3, r2
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 80c5 	beq.w	80039e8 <HAL_DMA_IRQHandler+0xce8>
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 80bf 	beq.w	80039e8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386e:	f003 031f 	and.w	r3, r3, #31
 8003872:	2202      	movs	r2, #2
 8003874:	409a      	lsls	r2, r3
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d018      	beq.n	80038b6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d109      	bne.n	80038a2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 813a 	beq.w	8003b0c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038a0:	e134      	b.n	8003b0c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 8130 	beq.w	8003b0c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038b4:	e12a      	b.n	8003b0c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	f003 0320 	and.w	r3, r3, #32
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d168      	bne.n	8003992 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a38      	ldr	r2, [pc, #224]	; (80039a8 <HAL_DMA_IRQHandler+0xca8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d04a      	beq.n	8003960 <HAL_DMA_IRQHandler+0xc60>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a37      	ldr	r2, [pc, #220]	; (80039ac <HAL_DMA_IRQHandler+0xcac>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d045      	beq.n	8003960 <HAL_DMA_IRQHandler+0xc60>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a35      	ldr	r2, [pc, #212]	; (80039b0 <HAL_DMA_IRQHandler+0xcb0>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d040      	beq.n	8003960 <HAL_DMA_IRQHandler+0xc60>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a34      	ldr	r2, [pc, #208]	; (80039b4 <HAL_DMA_IRQHandler+0xcb4>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d03b      	beq.n	8003960 <HAL_DMA_IRQHandler+0xc60>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a32      	ldr	r2, [pc, #200]	; (80039b8 <HAL_DMA_IRQHandler+0xcb8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d036      	beq.n	8003960 <HAL_DMA_IRQHandler+0xc60>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a31      	ldr	r2, [pc, #196]	; (80039bc <HAL_DMA_IRQHandler+0xcbc>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d031      	beq.n	8003960 <HAL_DMA_IRQHandler+0xc60>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a2f      	ldr	r2, [pc, #188]	; (80039c0 <HAL_DMA_IRQHandler+0xcc0>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d02c      	beq.n	8003960 <HAL_DMA_IRQHandler+0xc60>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a2e      	ldr	r2, [pc, #184]	; (80039c4 <HAL_DMA_IRQHandler+0xcc4>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d027      	beq.n	8003960 <HAL_DMA_IRQHandler+0xc60>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a2c      	ldr	r2, [pc, #176]	; (80039c8 <HAL_DMA_IRQHandler+0xcc8>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d022      	beq.n	8003960 <HAL_DMA_IRQHandler+0xc60>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a2b      	ldr	r2, [pc, #172]	; (80039cc <HAL_DMA_IRQHandler+0xccc>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d01d      	beq.n	8003960 <HAL_DMA_IRQHandler+0xc60>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a29      	ldr	r2, [pc, #164]	; (80039d0 <HAL_DMA_IRQHandler+0xcd0>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d018      	beq.n	8003960 <HAL_DMA_IRQHandler+0xc60>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a28      	ldr	r2, [pc, #160]	; (80039d4 <HAL_DMA_IRQHandler+0xcd4>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d013      	beq.n	8003960 <HAL_DMA_IRQHandler+0xc60>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a26      	ldr	r2, [pc, #152]	; (80039d8 <HAL_DMA_IRQHandler+0xcd8>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d00e      	beq.n	8003960 <HAL_DMA_IRQHandler+0xc60>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a25      	ldr	r2, [pc, #148]	; (80039dc <HAL_DMA_IRQHandler+0xcdc>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d009      	beq.n	8003960 <HAL_DMA_IRQHandler+0xc60>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a23      	ldr	r2, [pc, #140]	; (80039e0 <HAL_DMA_IRQHandler+0xce0>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d004      	beq.n	8003960 <HAL_DMA_IRQHandler+0xc60>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a22      	ldr	r2, [pc, #136]	; (80039e4 <HAL_DMA_IRQHandler+0xce4>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d108      	bne.n	8003972 <HAL_DMA_IRQHandler+0xc72>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0214 	bic.w	r2, r2, #20
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	e007      	b.n	8003982 <HAL_DMA_IRQHandler+0xc82>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 020a 	bic.w	r2, r2, #10
 8003980:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 80b8 	beq.w	8003b0c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039a4:	e0b2      	b.n	8003b0c <HAL_DMA_IRQHandler+0xe0c>
 80039a6:	bf00      	nop
 80039a8:	40020010 	.word	0x40020010
 80039ac:	40020028 	.word	0x40020028
 80039b0:	40020040 	.word	0x40020040
 80039b4:	40020058 	.word	0x40020058
 80039b8:	40020070 	.word	0x40020070
 80039bc:	40020088 	.word	0x40020088
 80039c0:	400200a0 	.word	0x400200a0
 80039c4:	400200b8 	.word	0x400200b8
 80039c8:	40020410 	.word	0x40020410
 80039cc:	40020428 	.word	0x40020428
 80039d0:	40020440 	.word	0x40020440
 80039d4:	40020458 	.word	0x40020458
 80039d8:	40020470 	.word	0x40020470
 80039dc:	40020488 	.word	0x40020488
 80039e0:	400204a0 	.word	0x400204a0
 80039e4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ec:	f003 031f 	and.w	r3, r3, #31
 80039f0:	2208      	movs	r2, #8
 80039f2:	409a      	lsls	r2, r3
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	4013      	ands	r3, r2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 8088 	beq.w	8003b0e <HAL_DMA_IRQHandler+0xe0e>
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f003 0308 	and.w	r3, r3, #8
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 8082 	beq.w	8003b0e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a41      	ldr	r2, [pc, #260]	; (8003b14 <HAL_DMA_IRQHandler+0xe14>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d04a      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xdaa>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a3f      	ldr	r2, [pc, #252]	; (8003b18 <HAL_DMA_IRQHandler+0xe18>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d045      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xdaa>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a3e      	ldr	r2, [pc, #248]	; (8003b1c <HAL_DMA_IRQHandler+0xe1c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d040      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xdaa>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a3c      	ldr	r2, [pc, #240]	; (8003b20 <HAL_DMA_IRQHandler+0xe20>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d03b      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xdaa>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a3b      	ldr	r2, [pc, #236]	; (8003b24 <HAL_DMA_IRQHandler+0xe24>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d036      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xdaa>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a39      	ldr	r2, [pc, #228]	; (8003b28 <HAL_DMA_IRQHandler+0xe28>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d031      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xdaa>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a38      	ldr	r2, [pc, #224]	; (8003b2c <HAL_DMA_IRQHandler+0xe2c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d02c      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xdaa>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a36      	ldr	r2, [pc, #216]	; (8003b30 <HAL_DMA_IRQHandler+0xe30>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d027      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xdaa>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a35      	ldr	r2, [pc, #212]	; (8003b34 <HAL_DMA_IRQHandler+0xe34>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d022      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xdaa>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a33      	ldr	r2, [pc, #204]	; (8003b38 <HAL_DMA_IRQHandler+0xe38>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d01d      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xdaa>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a32      	ldr	r2, [pc, #200]	; (8003b3c <HAL_DMA_IRQHandler+0xe3c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d018      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xdaa>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a30      	ldr	r2, [pc, #192]	; (8003b40 <HAL_DMA_IRQHandler+0xe40>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d013      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xdaa>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a2f      	ldr	r2, [pc, #188]	; (8003b44 <HAL_DMA_IRQHandler+0xe44>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d00e      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xdaa>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a2d      	ldr	r2, [pc, #180]	; (8003b48 <HAL_DMA_IRQHandler+0xe48>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d009      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xdaa>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a2c      	ldr	r2, [pc, #176]	; (8003b4c <HAL_DMA_IRQHandler+0xe4c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d004      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xdaa>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a2a      	ldr	r2, [pc, #168]	; (8003b50 <HAL_DMA_IRQHandler+0xe50>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d108      	bne.n	8003abc <HAL_DMA_IRQHandler+0xdbc>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 021c 	bic.w	r2, r2, #28
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	e007      	b.n	8003acc <HAL_DMA_IRQHandler+0xdcc>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 020e 	bic.w	r2, r2, #14
 8003aca:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad0:	f003 031f 	and.w	r3, r3, #31
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	409a      	lsls	r2, r3
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d009      	beq.n	8003b0e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	4798      	blx	r3
 8003b02:	e004      	b.n	8003b0e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003b04:	bf00      	nop
 8003b06:	e002      	b.n	8003b0e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b08:	bf00      	nop
 8003b0a:	e000      	b.n	8003b0e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b0c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003b0e:	3728      	adds	r7, #40	; 0x28
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40020010 	.word	0x40020010
 8003b18:	40020028 	.word	0x40020028
 8003b1c:	40020040 	.word	0x40020040
 8003b20:	40020058 	.word	0x40020058
 8003b24:	40020070 	.word	0x40020070
 8003b28:	40020088 	.word	0x40020088
 8003b2c:	400200a0 	.word	0x400200a0
 8003b30:	400200b8 	.word	0x400200b8
 8003b34:	40020410 	.word	0x40020410
 8003b38:	40020428 	.word	0x40020428
 8003b3c:	40020440 	.word	0x40020440
 8003b40:	40020458 	.word	0x40020458
 8003b44:	40020470 	.word	0x40020470
 8003b48:	40020488 	.word	0x40020488
 8003b4c:	400204a0 	.word	0x400204a0
 8003b50:	400204b8 	.word	0x400204b8

08003b54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a42      	ldr	r2, [pc, #264]	; (8003c6c <DMA_CalcBaseAndBitshift+0x118>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d04a      	beq.n	8003bfc <DMA_CalcBaseAndBitshift+0xa8>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a41      	ldr	r2, [pc, #260]	; (8003c70 <DMA_CalcBaseAndBitshift+0x11c>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d045      	beq.n	8003bfc <DMA_CalcBaseAndBitshift+0xa8>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a3f      	ldr	r2, [pc, #252]	; (8003c74 <DMA_CalcBaseAndBitshift+0x120>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d040      	beq.n	8003bfc <DMA_CalcBaseAndBitshift+0xa8>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a3e      	ldr	r2, [pc, #248]	; (8003c78 <DMA_CalcBaseAndBitshift+0x124>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d03b      	beq.n	8003bfc <DMA_CalcBaseAndBitshift+0xa8>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a3c      	ldr	r2, [pc, #240]	; (8003c7c <DMA_CalcBaseAndBitshift+0x128>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d036      	beq.n	8003bfc <DMA_CalcBaseAndBitshift+0xa8>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a3b      	ldr	r2, [pc, #236]	; (8003c80 <DMA_CalcBaseAndBitshift+0x12c>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d031      	beq.n	8003bfc <DMA_CalcBaseAndBitshift+0xa8>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a39      	ldr	r2, [pc, #228]	; (8003c84 <DMA_CalcBaseAndBitshift+0x130>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d02c      	beq.n	8003bfc <DMA_CalcBaseAndBitshift+0xa8>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a38      	ldr	r2, [pc, #224]	; (8003c88 <DMA_CalcBaseAndBitshift+0x134>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d027      	beq.n	8003bfc <DMA_CalcBaseAndBitshift+0xa8>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a36      	ldr	r2, [pc, #216]	; (8003c8c <DMA_CalcBaseAndBitshift+0x138>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d022      	beq.n	8003bfc <DMA_CalcBaseAndBitshift+0xa8>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a35      	ldr	r2, [pc, #212]	; (8003c90 <DMA_CalcBaseAndBitshift+0x13c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d01d      	beq.n	8003bfc <DMA_CalcBaseAndBitshift+0xa8>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a33      	ldr	r2, [pc, #204]	; (8003c94 <DMA_CalcBaseAndBitshift+0x140>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d018      	beq.n	8003bfc <DMA_CalcBaseAndBitshift+0xa8>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a32      	ldr	r2, [pc, #200]	; (8003c98 <DMA_CalcBaseAndBitshift+0x144>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d013      	beq.n	8003bfc <DMA_CalcBaseAndBitshift+0xa8>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a30      	ldr	r2, [pc, #192]	; (8003c9c <DMA_CalcBaseAndBitshift+0x148>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00e      	beq.n	8003bfc <DMA_CalcBaseAndBitshift+0xa8>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a2f      	ldr	r2, [pc, #188]	; (8003ca0 <DMA_CalcBaseAndBitshift+0x14c>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d009      	beq.n	8003bfc <DMA_CalcBaseAndBitshift+0xa8>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a2d      	ldr	r2, [pc, #180]	; (8003ca4 <DMA_CalcBaseAndBitshift+0x150>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d004      	beq.n	8003bfc <DMA_CalcBaseAndBitshift+0xa8>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a2c      	ldr	r2, [pc, #176]	; (8003ca8 <DMA_CalcBaseAndBitshift+0x154>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d101      	bne.n	8003c00 <DMA_CalcBaseAndBitshift+0xac>
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e000      	b.n	8003c02 <DMA_CalcBaseAndBitshift+0xae>
 8003c00:	2300      	movs	r3, #0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d024      	beq.n	8003c50 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	3b10      	subs	r3, #16
 8003c0e:	4a27      	ldr	r2, [pc, #156]	; (8003cac <DMA_CalcBaseAndBitshift+0x158>)
 8003c10:	fba2 2303 	umull	r2, r3, r2, r3
 8003c14:	091b      	lsrs	r3, r3, #4
 8003c16:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	4a24      	ldr	r2, [pc, #144]	; (8003cb0 <DMA_CalcBaseAndBitshift+0x15c>)
 8003c20:	5cd3      	ldrb	r3, [r2, r3]
 8003c22:	461a      	mov	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2b03      	cmp	r3, #3
 8003c2c:	d908      	bls.n	8003c40 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	461a      	mov	r2, r3
 8003c34:	4b1f      	ldr	r3, [pc, #124]	; (8003cb4 <DMA_CalcBaseAndBitshift+0x160>)
 8003c36:	4013      	ands	r3, r2
 8003c38:	1d1a      	adds	r2, r3, #4
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	659a      	str	r2, [r3, #88]	; 0x58
 8003c3e:	e00d      	b.n	8003c5c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	461a      	mov	r2, r3
 8003c46:	4b1b      	ldr	r3, [pc, #108]	; (8003cb4 <DMA_CalcBaseAndBitshift+0x160>)
 8003c48:	4013      	ands	r3, r2
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6593      	str	r3, [r2, #88]	; 0x58
 8003c4e:	e005      	b.n	8003c5c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3714      	adds	r7, #20
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	40020010 	.word	0x40020010
 8003c70:	40020028 	.word	0x40020028
 8003c74:	40020040 	.word	0x40020040
 8003c78:	40020058 	.word	0x40020058
 8003c7c:	40020070 	.word	0x40020070
 8003c80:	40020088 	.word	0x40020088
 8003c84:	400200a0 	.word	0x400200a0
 8003c88:	400200b8 	.word	0x400200b8
 8003c8c:	40020410 	.word	0x40020410
 8003c90:	40020428 	.word	0x40020428
 8003c94:	40020440 	.word	0x40020440
 8003c98:	40020458 	.word	0x40020458
 8003c9c:	40020470 	.word	0x40020470
 8003ca0:	40020488 	.word	0x40020488
 8003ca4:	400204a0 	.word	0x400204a0
 8003ca8:	400204b8 	.word	0x400204b8
 8003cac:	aaaaaaab 	.word	0xaaaaaaab
 8003cb0:	08009ff8 	.word	0x08009ff8
 8003cb4:	fffffc00 	.word	0xfffffc00

08003cb8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d120      	bne.n	8003d0e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd0:	2b03      	cmp	r3, #3
 8003cd2:	d858      	bhi.n	8003d86 <DMA_CheckFifoParam+0xce>
 8003cd4:	a201      	add	r2, pc, #4	; (adr r2, 8003cdc <DMA_CheckFifoParam+0x24>)
 8003cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cda:	bf00      	nop
 8003cdc:	08003ced 	.word	0x08003ced
 8003ce0:	08003cff 	.word	0x08003cff
 8003ce4:	08003ced 	.word	0x08003ced
 8003ce8:	08003d87 	.word	0x08003d87
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d048      	beq.n	8003d8a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003cfc:	e045      	b.n	8003d8a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d06:	d142      	bne.n	8003d8e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d0c:	e03f      	b.n	8003d8e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d16:	d123      	bne.n	8003d60 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1c:	2b03      	cmp	r3, #3
 8003d1e:	d838      	bhi.n	8003d92 <DMA_CheckFifoParam+0xda>
 8003d20:	a201      	add	r2, pc, #4	; (adr r2, 8003d28 <DMA_CheckFifoParam+0x70>)
 8003d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d26:	bf00      	nop
 8003d28:	08003d39 	.word	0x08003d39
 8003d2c:	08003d3f 	.word	0x08003d3f
 8003d30:	08003d39 	.word	0x08003d39
 8003d34:	08003d51 	.word	0x08003d51
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	73fb      	strb	r3, [r7, #15]
        break;
 8003d3c:	e030      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d025      	beq.n	8003d96 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d4e:	e022      	b.n	8003d96 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d58:	d11f      	bne.n	8003d9a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d5e:	e01c      	b.n	8003d9a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d902      	bls.n	8003d6e <DMA_CheckFifoParam+0xb6>
 8003d68:	2b03      	cmp	r3, #3
 8003d6a:	d003      	beq.n	8003d74 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003d6c:	e018      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	73fb      	strb	r3, [r7, #15]
        break;
 8003d72:	e015      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00e      	beq.n	8003d9e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	73fb      	strb	r3, [r7, #15]
    break;
 8003d84:	e00b      	b.n	8003d9e <DMA_CheckFifoParam+0xe6>
        break;
 8003d86:	bf00      	nop
 8003d88:	e00a      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
        break;
 8003d8a:	bf00      	nop
 8003d8c:	e008      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
        break;
 8003d8e:	bf00      	nop
 8003d90:	e006      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
        break;
 8003d92:	bf00      	nop
 8003d94:	e004      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
        break;
 8003d96:	bf00      	nop
 8003d98:	e002      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
        break;
 8003d9a:	bf00      	nop
 8003d9c:	e000      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
    break;
 8003d9e:	bf00      	nop
    }
  }

  return status;
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop

08003db0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a38      	ldr	r2, [pc, #224]	; (8003ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d022      	beq.n	8003e0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a36      	ldr	r2, [pc, #216]	; (8003ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d01d      	beq.n	8003e0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a35      	ldr	r2, [pc, #212]	; (8003eac <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d018      	beq.n	8003e0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a33      	ldr	r2, [pc, #204]	; (8003eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d013      	beq.n	8003e0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a32      	ldr	r2, [pc, #200]	; (8003eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d00e      	beq.n	8003e0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a30      	ldr	r2, [pc, #192]	; (8003eb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d009      	beq.n	8003e0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a2f      	ldr	r2, [pc, #188]	; (8003ebc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d004      	beq.n	8003e0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a2d      	ldr	r2, [pc, #180]	; (8003ec0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d101      	bne.n	8003e12 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e000      	b.n	8003e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003e12:	2300      	movs	r3, #0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d01a      	beq.n	8003e4e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	3b08      	subs	r3, #8
 8003e20:	4a28      	ldr	r2, [pc, #160]	; (8003ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003e22:	fba2 2303 	umull	r2, r3, r2, r3
 8003e26:	091b      	lsrs	r3, r3, #4
 8003e28:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	4b26      	ldr	r3, [pc, #152]	; (8003ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003e2e:	4413      	add	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	461a      	mov	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a24      	ldr	r2, [pc, #144]	; (8003ecc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003e3c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f003 031f 	and.w	r3, r3, #31
 8003e44:	2201      	movs	r2, #1
 8003e46:	409a      	lsls	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003e4c:	e024      	b.n	8003e98 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	3b10      	subs	r3, #16
 8003e56:	4a1e      	ldr	r2, [pc, #120]	; (8003ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003e58:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5c:	091b      	lsrs	r3, r3, #4
 8003e5e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	4a1c      	ldr	r2, [pc, #112]	; (8003ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d806      	bhi.n	8003e76 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	4a1b      	ldr	r2, [pc, #108]	; (8003ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d902      	bls.n	8003e76 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	3308      	adds	r3, #8
 8003e74:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	4b18      	ldr	r3, [pc, #96]	; (8003edc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003e7a:	4413      	add	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	461a      	mov	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a16      	ldr	r2, [pc, #88]	; (8003ee0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003e88:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f003 031f 	and.w	r3, r3, #31
 8003e90:	2201      	movs	r2, #1
 8003e92:	409a      	lsls	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003e98:	bf00      	nop
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	58025408 	.word	0x58025408
 8003ea8:	5802541c 	.word	0x5802541c
 8003eac:	58025430 	.word	0x58025430
 8003eb0:	58025444 	.word	0x58025444
 8003eb4:	58025458 	.word	0x58025458
 8003eb8:	5802546c 	.word	0x5802546c
 8003ebc:	58025480 	.word	0x58025480
 8003ec0:	58025494 	.word	0x58025494
 8003ec4:	cccccccd 	.word	0xcccccccd
 8003ec8:	16009600 	.word	0x16009600
 8003ecc:	58025880 	.word	0x58025880
 8003ed0:	aaaaaaab 	.word	0xaaaaaaab
 8003ed4:	400204b8 	.word	0x400204b8
 8003ed8:	4002040f 	.word	0x4002040f
 8003edc:	10008200 	.word	0x10008200
 8003ee0:	40020880 	.word	0x40020880

08003ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d04a      	beq.n	8003f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	d847      	bhi.n	8003f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a25      	ldr	r2, [pc, #148]	; (8003f9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d022      	beq.n	8003f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a24      	ldr	r2, [pc, #144]	; (8003fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d01d      	beq.n	8003f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a22      	ldr	r2, [pc, #136]	; (8003fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d018      	beq.n	8003f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a21      	ldr	r2, [pc, #132]	; (8003fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d013      	beq.n	8003f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a1f      	ldr	r2, [pc, #124]	; (8003fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d00e      	beq.n	8003f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a1e      	ldr	r2, [pc, #120]	; (8003fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d009      	beq.n	8003f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a1c      	ldr	r2, [pc, #112]	; (8003fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d004      	beq.n	8003f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a1b      	ldr	r2, [pc, #108]	; (8003fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d101      	bne.n	8003f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003f50:	2301      	movs	r3, #1
 8003f52:	e000      	b.n	8003f56 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003f54:	2300      	movs	r3, #0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	4b17      	ldr	r3, [pc, #92]	; (8003fbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003f5e:	4413      	add	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	461a      	mov	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a15      	ldr	r2, [pc, #84]	; (8003fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003f6c:	671a      	str	r2, [r3, #112]	; 0x70
 8003f6e:	e009      	b.n	8003f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	4b14      	ldr	r3, [pc, #80]	; (8003fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003f74:	4413      	add	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	461a      	mov	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a11      	ldr	r2, [pc, #68]	; (8003fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003f82:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	2201      	movs	r2, #1
 8003f8a:	409a      	lsls	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003f90:	bf00      	nop
 8003f92:	3714      	adds	r7, #20
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	58025408 	.word	0x58025408
 8003fa0:	5802541c 	.word	0x5802541c
 8003fa4:	58025430 	.word	0x58025430
 8003fa8:	58025444 	.word	0x58025444
 8003fac:	58025458 	.word	0x58025458
 8003fb0:	5802546c 	.word	0x5802546c
 8003fb4:	58025480 	.word	0x58025480
 8003fb8:	58025494 	.word	0x58025494
 8003fbc:	1600963f 	.word	0x1600963f
 8003fc0:	58025940 	.word	0x58025940
 8003fc4:	1000823f 	.word	0x1000823f
 8003fc8:	40020940 	.word	0x40020940

08003fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b089      	sub	sp, #36	; 0x24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003fda:	4b89      	ldr	r3, [pc, #548]	; (8004200 <HAL_GPIO_Init+0x234>)
 8003fdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003fde:	e194      	b.n	800430a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fec:	4013      	ands	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 8186 	beq.w	8004304 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d00b      	beq.n	8004018 <HAL_GPIO_Init+0x4c>
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	2b02      	cmp	r3, #2
 8004006:	d007      	beq.n	8004018 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800400c:	2b11      	cmp	r3, #17
 800400e:	d003      	beq.n	8004018 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2b12      	cmp	r3, #18
 8004016:	d130      	bne.n	800407a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	2203      	movs	r2, #3
 8004024:	fa02 f303 	lsl.w	r3, r2, r3
 8004028:	43db      	mvns	r3, r3
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	4013      	ands	r3, r2
 800402e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	4313      	orrs	r3, r2
 8004040:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800404e:	2201      	movs	r2, #1
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	43db      	mvns	r3, r3
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	4013      	ands	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	091b      	lsrs	r3, r3, #4
 8004064:	f003 0201 	and.w	r2, r3, #1
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	4313      	orrs	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	2203      	movs	r2, #3
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	43db      	mvns	r3, r3
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	4013      	ands	r3, r2
 8004090:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	689a      	ldr	r2, [r3, #8]
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	fa02 f303 	lsl.w	r3, r2, r3
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d003      	beq.n	80040ba <HAL_GPIO_Init+0xee>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2b12      	cmp	r3, #18
 80040b8:	d123      	bne.n	8004102 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	08da      	lsrs	r2, r3, #3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	3208      	adds	r2, #8
 80040c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	f003 0307 	and.w	r3, r3, #7
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	220f      	movs	r2, #15
 80040d2:	fa02 f303 	lsl.w	r3, r2, r3
 80040d6:	43db      	mvns	r3, r3
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	4013      	ands	r3, r2
 80040dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	691a      	ldr	r2, [r3, #16]
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	08da      	lsrs	r2, r3, #3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3208      	adds	r2, #8
 80040fc:	69b9      	ldr	r1, [r7, #24]
 80040fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	2203      	movs	r2, #3
 800410e:	fa02 f303 	lsl.w	r3, r2, r3
 8004112:	43db      	mvns	r3, r3
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	4013      	ands	r3, r2
 8004118:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f003 0203 	and.w	r2, r3, #3
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	fa02 f303 	lsl.w	r3, r2, r3
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	4313      	orrs	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 80e0 	beq.w	8004304 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004144:	4b2f      	ldr	r3, [pc, #188]	; (8004204 <HAL_GPIO_Init+0x238>)
 8004146:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800414a:	4a2e      	ldr	r2, [pc, #184]	; (8004204 <HAL_GPIO_Init+0x238>)
 800414c:	f043 0302 	orr.w	r3, r3, #2
 8004150:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004154:	4b2b      	ldr	r3, [pc, #172]	; (8004204 <HAL_GPIO_Init+0x238>)
 8004156:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004162:	4a29      	ldr	r2, [pc, #164]	; (8004208 <HAL_GPIO_Init+0x23c>)
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	089b      	lsrs	r3, r3, #2
 8004168:	3302      	adds	r3, #2
 800416a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800416e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	f003 0303 	and.w	r3, r3, #3
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	220f      	movs	r2, #15
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	43db      	mvns	r3, r3
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	4013      	ands	r3, r2
 8004184:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a20      	ldr	r2, [pc, #128]	; (800420c <HAL_GPIO_Init+0x240>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d052      	beq.n	8004234 <HAL_GPIO_Init+0x268>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a1f      	ldr	r2, [pc, #124]	; (8004210 <HAL_GPIO_Init+0x244>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d031      	beq.n	80041fa <HAL_GPIO_Init+0x22e>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a1e      	ldr	r2, [pc, #120]	; (8004214 <HAL_GPIO_Init+0x248>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d02b      	beq.n	80041f6 <HAL_GPIO_Init+0x22a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a1d      	ldr	r2, [pc, #116]	; (8004218 <HAL_GPIO_Init+0x24c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d025      	beq.n	80041f2 <HAL_GPIO_Init+0x226>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a1c      	ldr	r2, [pc, #112]	; (800421c <HAL_GPIO_Init+0x250>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d01f      	beq.n	80041ee <HAL_GPIO_Init+0x222>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a1b      	ldr	r2, [pc, #108]	; (8004220 <HAL_GPIO_Init+0x254>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d019      	beq.n	80041ea <HAL_GPIO_Init+0x21e>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a1a      	ldr	r2, [pc, #104]	; (8004224 <HAL_GPIO_Init+0x258>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d013      	beq.n	80041e6 <HAL_GPIO_Init+0x21a>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a19      	ldr	r2, [pc, #100]	; (8004228 <HAL_GPIO_Init+0x25c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00d      	beq.n	80041e2 <HAL_GPIO_Init+0x216>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a18      	ldr	r2, [pc, #96]	; (800422c <HAL_GPIO_Init+0x260>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d007      	beq.n	80041de <HAL_GPIO_Init+0x212>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a17      	ldr	r2, [pc, #92]	; (8004230 <HAL_GPIO_Init+0x264>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d101      	bne.n	80041da <HAL_GPIO_Init+0x20e>
 80041d6:	2309      	movs	r3, #9
 80041d8:	e02d      	b.n	8004236 <HAL_GPIO_Init+0x26a>
 80041da:	230a      	movs	r3, #10
 80041dc:	e02b      	b.n	8004236 <HAL_GPIO_Init+0x26a>
 80041de:	2308      	movs	r3, #8
 80041e0:	e029      	b.n	8004236 <HAL_GPIO_Init+0x26a>
 80041e2:	2307      	movs	r3, #7
 80041e4:	e027      	b.n	8004236 <HAL_GPIO_Init+0x26a>
 80041e6:	2306      	movs	r3, #6
 80041e8:	e025      	b.n	8004236 <HAL_GPIO_Init+0x26a>
 80041ea:	2305      	movs	r3, #5
 80041ec:	e023      	b.n	8004236 <HAL_GPIO_Init+0x26a>
 80041ee:	2304      	movs	r3, #4
 80041f0:	e021      	b.n	8004236 <HAL_GPIO_Init+0x26a>
 80041f2:	2303      	movs	r3, #3
 80041f4:	e01f      	b.n	8004236 <HAL_GPIO_Init+0x26a>
 80041f6:	2302      	movs	r3, #2
 80041f8:	e01d      	b.n	8004236 <HAL_GPIO_Init+0x26a>
 80041fa:	2301      	movs	r3, #1
 80041fc:	e01b      	b.n	8004236 <HAL_GPIO_Init+0x26a>
 80041fe:	bf00      	nop
 8004200:	58000080 	.word	0x58000080
 8004204:	58024400 	.word	0x58024400
 8004208:	58000400 	.word	0x58000400
 800420c:	58020000 	.word	0x58020000
 8004210:	58020400 	.word	0x58020400
 8004214:	58020800 	.word	0x58020800
 8004218:	58020c00 	.word	0x58020c00
 800421c:	58021000 	.word	0x58021000
 8004220:	58021400 	.word	0x58021400
 8004224:	58021800 	.word	0x58021800
 8004228:	58021c00 	.word	0x58021c00
 800422c:	58022000 	.word	0x58022000
 8004230:	58022400 	.word	0x58022400
 8004234:	2300      	movs	r3, #0
 8004236:	69fa      	ldr	r2, [r7, #28]
 8004238:	f002 0203 	and.w	r2, r2, #3
 800423c:	0092      	lsls	r2, r2, #2
 800423e:	4093      	lsls	r3, r2
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	4313      	orrs	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004246:	4938      	ldr	r1, [pc, #224]	; (8004328 <HAL_GPIO_Init+0x35c>)
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	089b      	lsrs	r3, r3, #2
 800424c:	3302      	adds	r3, #2
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	43db      	mvns	r3, r3
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	4013      	ands	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	4313      	orrs	r3, r2
 8004276:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	43db      	mvns	r3, r3
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	4013      	ands	r3, r2
 800428c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	4313      	orrs	r3, r2
 80042a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	43db      	mvns	r3, r3
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	4013      	ands	r3, r2
 80042b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80042ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80042d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	43db      	mvns	r3, r3
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	4013      	ands	r3, r2
 80042e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80042fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	3301      	adds	r3, #1
 8004308:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	fa22 f303 	lsr.w	r3, r2, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	f47f ae63 	bne.w	8003fe0 <HAL_GPIO_Init+0x14>
  }
}
 800431a:	bf00      	nop
 800431c:	bf00      	nop
 800431e:	3724      	adds	r7, #36	; 0x24
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	58000400 	.word	0x58000400

0800432c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	460b      	mov	r3, r1
 8004336:	807b      	strh	r3, [r7, #2]
 8004338:	4613      	mov	r3, r2
 800433a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800433c:	787b      	ldrb	r3, [r7, #1]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004342:	887a      	ldrh	r2, [r7, #2]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004348:	e003      	b.n	8004352 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800434a:	887b      	ldrh	r3, [r7, #2]
 800434c:	041a      	lsls	r2, r3, #16
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	619a      	str	r2, [r3, #24]
}
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800435e:	b480      	push	{r7}
 8004360:	b085      	sub	sp, #20
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	460b      	mov	r3, r1
 8004368:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004370:	887a      	ldrh	r2, [r7, #2]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4013      	ands	r3, r2
 8004376:	041a      	lsls	r2, r3, #16
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	43d9      	mvns	r1, r3
 800437c:	887b      	ldrh	r3, [r7, #2]
 800437e:	400b      	ands	r3, r1
 8004380:	431a      	orrs	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	619a      	str	r2, [r3, #24]
}
 8004386:	bf00      	nop
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b082      	sub	sp, #8
 8004396:	af00      	add	r7, sp, #0
 8004398:	4603      	mov	r3, r0
 800439a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800439c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043a0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80043a4:	88fb      	ldrh	r3, [r7, #6]
 80043a6:	4013      	ands	r3, r2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d008      	beq.n	80043be <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043b0:	88fb      	ldrh	r3, [r7, #6]
 80043b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043b6:	88fb      	ldrh	r3, [r7, #6]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7fc fcf5 	bl	8000da8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80043be:	bf00      	nop
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
	...

080043c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80043d0:	4b19      	ldr	r3, [pc, #100]	; (8004438 <HAL_PWREx_ConfigSupply+0x70>)
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	f003 0304 	and.w	r3, r3, #4
 80043d8:	2b04      	cmp	r3, #4
 80043da:	d00a      	beq.n	80043f2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80043dc:	4b16      	ldr	r3, [pc, #88]	; (8004438 <HAL_PWREx_ConfigSupply+0x70>)
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d001      	beq.n	80043ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e01f      	b.n	800442e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80043ee:	2300      	movs	r3, #0
 80043f0:	e01d      	b.n	800442e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80043f2:	4b11      	ldr	r3, [pc, #68]	; (8004438 <HAL_PWREx_ConfigSupply+0x70>)
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	f023 0207 	bic.w	r2, r3, #7
 80043fa:	490f      	ldr	r1, [pc, #60]	; (8004438 <HAL_PWREx_ConfigSupply+0x70>)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4313      	orrs	r3, r2
 8004400:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004402:	f7fd fa97 	bl	8001934 <HAL_GetTick>
 8004406:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004408:	e009      	b.n	800441e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800440a:	f7fd fa93 	bl	8001934 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004418:	d901      	bls.n	800441e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e007      	b.n	800442e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800441e:	4b06      	ldr	r3, [pc, #24]	; (8004438 <HAL_PWREx_ConfigSupply+0x70>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800442a:	d1ee      	bne.n	800440a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	58024800 	.word	0x58024800

0800443c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b08c      	sub	sp, #48	; 0x30
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e3ff      	b.n	8004c4e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	f000 8087 	beq.w	800456a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800445c:	4b99      	ldr	r3, [pc, #612]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004464:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004466:	4b97      	ldr	r3, [pc, #604]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 8004468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800446c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446e:	2b10      	cmp	r3, #16
 8004470:	d007      	beq.n	8004482 <HAL_RCC_OscConfig+0x46>
 8004472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004474:	2b18      	cmp	r3, #24
 8004476:	d110      	bne.n	800449a <HAL_RCC_OscConfig+0x5e>
 8004478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447a:	f003 0303 	and.w	r3, r3, #3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d10b      	bne.n	800449a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004482:	4b90      	ldr	r3, [pc, #576]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d06c      	beq.n	8004568 <HAL_RCC_OscConfig+0x12c>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d168      	bne.n	8004568 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e3d9      	b.n	8004c4e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a2:	d106      	bne.n	80044b2 <HAL_RCC_OscConfig+0x76>
 80044a4:	4b87      	ldr	r3, [pc, #540]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a86      	ldr	r2, [pc, #536]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 80044aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	e02e      	b.n	8004510 <HAL_RCC_OscConfig+0xd4>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10c      	bne.n	80044d4 <HAL_RCC_OscConfig+0x98>
 80044ba:	4b82      	ldr	r3, [pc, #520]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a81      	ldr	r2, [pc, #516]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 80044c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044c4:	6013      	str	r3, [r2, #0]
 80044c6:	4b7f      	ldr	r3, [pc, #508]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a7e      	ldr	r2, [pc, #504]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 80044cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044d0:	6013      	str	r3, [r2, #0]
 80044d2:	e01d      	b.n	8004510 <HAL_RCC_OscConfig+0xd4>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044dc:	d10c      	bne.n	80044f8 <HAL_RCC_OscConfig+0xbc>
 80044de:	4b79      	ldr	r3, [pc, #484]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a78      	ldr	r2, [pc, #480]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 80044e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044e8:	6013      	str	r3, [r2, #0]
 80044ea:	4b76      	ldr	r3, [pc, #472]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a75      	ldr	r2, [pc, #468]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 80044f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	e00b      	b.n	8004510 <HAL_RCC_OscConfig+0xd4>
 80044f8:	4b72      	ldr	r3, [pc, #456]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a71      	ldr	r2, [pc, #452]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 80044fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004502:	6013      	str	r3, [r2, #0]
 8004504:	4b6f      	ldr	r3, [pc, #444]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a6e      	ldr	r2, [pc, #440]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 800450a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800450e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d013      	beq.n	8004540 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004518:	f7fd fa0c 	bl	8001934 <HAL_GetTick>
 800451c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004520:	f7fd fa08 	bl	8001934 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b64      	cmp	r3, #100	; 0x64
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e38d      	b.n	8004c4e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004532:	4b64      	ldr	r3, [pc, #400]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0f0      	beq.n	8004520 <HAL_RCC_OscConfig+0xe4>
 800453e:	e014      	b.n	800456a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004540:	f7fd f9f8 	bl	8001934 <HAL_GetTick>
 8004544:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004548:	f7fd f9f4 	bl	8001934 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b64      	cmp	r3, #100	; 0x64
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e379      	b.n	8004c4e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800455a:	4b5a      	ldr	r3, [pc, #360]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1f0      	bne.n	8004548 <HAL_RCC_OscConfig+0x10c>
 8004566:	e000      	b.n	800456a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 80ae 	beq.w	80046d4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004578:	4b52      	ldr	r3, [pc, #328]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004580:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004582:	4b50      	ldr	r3, [pc, #320]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 8004584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004586:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d007      	beq.n	800459e <HAL_RCC_OscConfig+0x162>
 800458e:	6a3b      	ldr	r3, [r7, #32]
 8004590:	2b18      	cmp	r3, #24
 8004592:	d13a      	bne.n	800460a <HAL_RCC_OscConfig+0x1ce>
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d135      	bne.n	800460a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800459e:	4b49      	ldr	r3, [pc, #292]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0304 	and.w	r3, r3, #4
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d005      	beq.n	80045b6 <HAL_RCC_OscConfig+0x17a>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e34b      	b.n	8004c4e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b6:	f7fd f9c9 	bl	800194c <HAL_GetREVID>
 80045ba:	4603      	mov	r3, r0
 80045bc:	f241 0203 	movw	r2, #4099	; 0x1003
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d817      	bhi.n	80045f4 <HAL_RCC_OscConfig+0x1b8>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	2b40      	cmp	r3, #64	; 0x40
 80045ca:	d108      	bne.n	80045de <HAL_RCC_OscConfig+0x1a2>
 80045cc:	4b3d      	ldr	r3, [pc, #244]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80045d4:	4a3b      	ldr	r2, [pc, #236]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 80045d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045da:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045dc:	e07a      	b.n	80046d4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045de:	4b39      	ldr	r3, [pc, #228]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	031b      	lsls	r3, r3, #12
 80045ec:	4935      	ldr	r1, [pc, #212]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045f2:	e06f      	b.n	80046d4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f4:	4b33      	ldr	r3, [pc, #204]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	061b      	lsls	r3, r3, #24
 8004602:	4930      	ldr	r1, [pc, #192]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 8004604:	4313      	orrs	r3, r2
 8004606:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004608:	e064      	b.n	80046d4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d045      	beq.n	800469e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004612:	4b2c      	ldr	r3, [pc, #176]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f023 0219 	bic.w	r2, r3, #25
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	4929      	ldr	r1, [pc, #164]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 8004620:	4313      	orrs	r3, r2
 8004622:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004624:	f7fd f986 	bl	8001934 <HAL_GetTick>
 8004628:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800462c:	f7fd f982 	bl	8001934 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e307      	b.n	8004c4e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800463e:	4b21      	ldr	r3, [pc, #132]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0304 	and.w	r3, r3, #4
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0f0      	beq.n	800462c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800464a:	f7fd f97f 	bl	800194c <HAL_GetREVID>
 800464e:	4603      	mov	r3, r0
 8004650:	f241 0203 	movw	r2, #4099	; 0x1003
 8004654:	4293      	cmp	r3, r2
 8004656:	d817      	bhi.n	8004688 <HAL_RCC_OscConfig+0x24c>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	2b40      	cmp	r3, #64	; 0x40
 800465e:	d108      	bne.n	8004672 <HAL_RCC_OscConfig+0x236>
 8004660:	4b18      	ldr	r3, [pc, #96]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004668:	4a16      	ldr	r2, [pc, #88]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 800466a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800466e:	6053      	str	r3, [r2, #4]
 8004670:	e030      	b.n	80046d4 <HAL_RCC_OscConfig+0x298>
 8004672:	4b14      	ldr	r3, [pc, #80]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	031b      	lsls	r3, r3, #12
 8004680:	4910      	ldr	r1, [pc, #64]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 8004682:	4313      	orrs	r3, r2
 8004684:	604b      	str	r3, [r1, #4]
 8004686:	e025      	b.n	80046d4 <HAL_RCC_OscConfig+0x298>
 8004688:	4b0e      	ldr	r3, [pc, #56]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	061b      	lsls	r3, r3, #24
 8004696:	490b      	ldr	r1, [pc, #44]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 8004698:	4313      	orrs	r3, r2
 800469a:	604b      	str	r3, [r1, #4]
 800469c:	e01a      	b.n	80046d4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800469e:	4b09      	ldr	r3, [pc, #36]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a08      	ldr	r2, [pc, #32]	; (80046c4 <HAL_RCC_OscConfig+0x288>)
 80046a4:	f023 0301 	bic.w	r3, r3, #1
 80046a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046aa:	f7fd f943 	bl	8001934 <HAL_GetTick>
 80046ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046b0:	e00a      	b.n	80046c8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046b2:	f7fd f93f 	bl	8001934 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d903      	bls.n	80046c8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e2c4      	b.n	8004c4e <HAL_RCC_OscConfig+0x812>
 80046c4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046c8:	4ba4      	ldr	r3, [pc, #656]	; (800495c <HAL_RCC_OscConfig+0x520>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0304 	and.w	r3, r3, #4
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1ee      	bne.n	80046b2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0310 	and.w	r3, r3, #16
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 80a9 	beq.w	8004834 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046e2:	4b9e      	ldr	r3, [pc, #632]	; (800495c <HAL_RCC_OscConfig+0x520>)
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046ea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80046ec:	4b9b      	ldr	r3, [pc, #620]	; (800495c <HAL_RCC_OscConfig+0x520>)
 80046ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d007      	beq.n	8004708 <HAL_RCC_OscConfig+0x2cc>
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	2b18      	cmp	r3, #24
 80046fc:	d13a      	bne.n	8004774 <HAL_RCC_OscConfig+0x338>
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f003 0303 	and.w	r3, r3, #3
 8004704:	2b01      	cmp	r3, #1
 8004706:	d135      	bne.n	8004774 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004708:	4b94      	ldr	r3, [pc, #592]	; (800495c <HAL_RCC_OscConfig+0x520>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004710:	2b00      	cmp	r3, #0
 8004712:	d005      	beq.n	8004720 <HAL_RCC_OscConfig+0x2e4>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	69db      	ldr	r3, [r3, #28]
 8004718:	2b80      	cmp	r3, #128	; 0x80
 800471a:	d001      	beq.n	8004720 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e296      	b.n	8004c4e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004720:	f7fd f914 	bl	800194c <HAL_GetREVID>
 8004724:	4603      	mov	r3, r0
 8004726:	f241 0203 	movw	r2, #4099	; 0x1003
 800472a:	4293      	cmp	r3, r2
 800472c:	d817      	bhi.n	800475e <HAL_RCC_OscConfig+0x322>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	2b20      	cmp	r3, #32
 8004734:	d108      	bne.n	8004748 <HAL_RCC_OscConfig+0x30c>
 8004736:	4b89      	ldr	r3, [pc, #548]	; (800495c <HAL_RCC_OscConfig+0x520>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800473e:	4a87      	ldr	r2, [pc, #540]	; (800495c <HAL_RCC_OscConfig+0x520>)
 8004740:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004744:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004746:	e075      	b.n	8004834 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004748:	4b84      	ldr	r3, [pc, #528]	; (800495c <HAL_RCC_OscConfig+0x520>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	069b      	lsls	r3, r3, #26
 8004756:	4981      	ldr	r1, [pc, #516]	; (800495c <HAL_RCC_OscConfig+0x520>)
 8004758:	4313      	orrs	r3, r2
 800475a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800475c:	e06a      	b.n	8004834 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800475e:	4b7f      	ldr	r3, [pc, #508]	; (800495c <HAL_RCC_OscConfig+0x520>)
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	061b      	lsls	r3, r3, #24
 800476c:	497b      	ldr	r1, [pc, #492]	; (800495c <HAL_RCC_OscConfig+0x520>)
 800476e:	4313      	orrs	r3, r2
 8004770:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004772:	e05f      	b.n	8004834 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	69db      	ldr	r3, [r3, #28]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d042      	beq.n	8004802 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800477c:	4b77      	ldr	r3, [pc, #476]	; (800495c <HAL_RCC_OscConfig+0x520>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a76      	ldr	r2, [pc, #472]	; (800495c <HAL_RCC_OscConfig+0x520>)
 8004782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004786:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004788:	f7fd f8d4 	bl	8001934 <HAL_GetTick>
 800478c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004790:	f7fd f8d0 	bl	8001934 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e255      	b.n	8004c4e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047a2:	4b6e      	ldr	r3, [pc, #440]	; (800495c <HAL_RCC_OscConfig+0x520>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0f0      	beq.n	8004790 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047ae:	f7fd f8cd 	bl	800194c <HAL_GetREVID>
 80047b2:	4603      	mov	r3, r0
 80047b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d817      	bhi.n	80047ec <HAL_RCC_OscConfig+0x3b0>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	2b20      	cmp	r3, #32
 80047c2:	d108      	bne.n	80047d6 <HAL_RCC_OscConfig+0x39a>
 80047c4:	4b65      	ldr	r3, [pc, #404]	; (800495c <HAL_RCC_OscConfig+0x520>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80047cc:	4a63      	ldr	r2, [pc, #396]	; (800495c <HAL_RCC_OscConfig+0x520>)
 80047ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047d2:	6053      	str	r3, [r2, #4]
 80047d4:	e02e      	b.n	8004834 <HAL_RCC_OscConfig+0x3f8>
 80047d6:	4b61      	ldr	r3, [pc, #388]	; (800495c <HAL_RCC_OscConfig+0x520>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	069b      	lsls	r3, r3, #26
 80047e4:	495d      	ldr	r1, [pc, #372]	; (800495c <HAL_RCC_OscConfig+0x520>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	604b      	str	r3, [r1, #4]
 80047ea:	e023      	b.n	8004834 <HAL_RCC_OscConfig+0x3f8>
 80047ec:	4b5b      	ldr	r3, [pc, #364]	; (800495c <HAL_RCC_OscConfig+0x520>)
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	061b      	lsls	r3, r3, #24
 80047fa:	4958      	ldr	r1, [pc, #352]	; (800495c <HAL_RCC_OscConfig+0x520>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	60cb      	str	r3, [r1, #12]
 8004800:	e018      	b.n	8004834 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004802:	4b56      	ldr	r3, [pc, #344]	; (800495c <HAL_RCC_OscConfig+0x520>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a55      	ldr	r2, [pc, #340]	; (800495c <HAL_RCC_OscConfig+0x520>)
 8004808:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800480c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480e:	f7fd f891 	bl	8001934 <HAL_GetTick>
 8004812:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004816:	f7fd f88d 	bl	8001934 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e212      	b.n	8004c4e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004828:	4b4c      	ldr	r3, [pc, #304]	; (800495c <HAL_RCC_OscConfig+0x520>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1f0      	bne.n	8004816 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0308 	and.w	r3, r3, #8
 800483c:	2b00      	cmp	r3, #0
 800483e:	d036      	beq.n	80048ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d019      	beq.n	800487c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004848:	4b44      	ldr	r3, [pc, #272]	; (800495c <HAL_RCC_OscConfig+0x520>)
 800484a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800484c:	4a43      	ldr	r2, [pc, #268]	; (800495c <HAL_RCC_OscConfig+0x520>)
 800484e:	f043 0301 	orr.w	r3, r3, #1
 8004852:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004854:	f7fd f86e 	bl	8001934 <HAL_GetTick>
 8004858:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800485c:	f7fd f86a 	bl	8001934 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e1ef      	b.n	8004c4e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800486e:	4b3b      	ldr	r3, [pc, #236]	; (800495c <HAL_RCC_OscConfig+0x520>)
 8004870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0f0      	beq.n	800485c <HAL_RCC_OscConfig+0x420>
 800487a:	e018      	b.n	80048ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800487c:	4b37      	ldr	r3, [pc, #220]	; (800495c <HAL_RCC_OscConfig+0x520>)
 800487e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004880:	4a36      	ldr	r2, [pc, #216]	; (800495c <HAL_RCC_OscConfig+0x520>)
 8004882:	f023 0301 	bic.w	r3, r3, #1
 8004886:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004888:	f7fd f854 	bl	8001934 <HAL_GetTick>
 800488c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004890:	f7fd f850 	bl	8001934 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b02      	cmp	r3, #2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e1d5      	b.n	8004c4e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80048a2:	4b2e      	ldr	r3, [pc, #184]	; (800495c <HAL_RCC_OscConfig+0x520>)
 80048a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1f0      	bne.n	8004890 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0320 	and.w	r3, r3, #32
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d036      	beq.n	8004928 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d019      	beq.n	80048f6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048c2:	4b26      	ldr	r3, [pc, #152]	; (800495c <HAL_RCC_OscConfig+0x520>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a25      	ldr	r2, [pc, #148]	; (800495c <HAL_RCC_OscConfig+0x520>)
 80048c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80048cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80048ce:	f7fd f831 	bl	8001934 <HAL_GetTick>
 80048d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048d4:	e008      	b.n	80048e8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80048d6:	f7fd f82d 	bl	8001934 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e1b2      	b.n	8004c4e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048e8:	4b1c      	ldr	r3, [pc, #112]	; (800495c <HAL_RCC_OscConfig+0x520>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0f0      	beq.n	80048d6 <HAL_RCC_OscConfig+0x49a>
 80048f4:	e018      	b.n	8004928 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048f6:	4b19      	ldr	r3, [pc, #100]	; (800495c <HAL_RCC_OscConfig+0x520>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a18      	ldr	r2, [pc, #96]	; (800495c <HAL_RCC_OscConfig+0x520>)
 80048fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004900:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004902:	f7fd f817 	bl	8001934 <HAL_GetTick>
 8004906:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004908:	e008      	b.n	800491c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800490a:	f7fd f813 	bl	8001934 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d901      	bls.n	800491c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e198      	b.n	8004c4e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800491c:	4b0f      	ldr	r3, [pc, #60]	; (800495c <HAL_RCC_OscConfig+0x520>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1f0      	bne.n	800490a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 8085 	beq.w	8004a40 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004936:	4b0a      	ldr	r3, [pc, #40]	; (8004960 <HAL_RCC_OscConfig+0x524>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a09      	ldr	r2, [pc, #36]	; (8004960 <HAL_RCC_OscConfig+0x524>)
 800493c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004940:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004942:	f7fc fff7 	bl	8001934 <HAL_GetTick>
 8004946:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004948:	e00c      	b.n	8004964 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800494a:	f7fc fff3 	bl	8001934 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b64      	cmp	r3, #100	; 0x64
 8004956:	d905      	bls.n	8004964 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e178      	b.n	8004c4e <HAL_RCC_OscConfig+0x812>
 800495c:	58024400 	.word	0x58024400
 8004960:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004964:	4b96      	ldr	r3, [pc, #600]	; (8004bc0 <HAL_RCC_OscConfig+0x784>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0ec      	beq.n	800494a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d106      	bne.n	8004986 <HAL_RCC_OscConfig+0x54a>
 8004978:	4b92      	ldr	r3, [pc, #584]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 800497a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497c:	4a91      	ldr	r2, [pc, #580]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 800497e:	f043 0301 	orr.w	r3, r3, #1
 8004982:	6713      	str	r3, [r2, #112]	; 0x70
 8004984:	e02d      	b.n	80049e2 <HAL_RCC_OscConfig+0x5a6>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10c      	bne.n	80049a8 <HAL_RCC_OscConfig+0x56c>
 800498e:	4b8d      	ldr	r3, [pc, #564]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 8004990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004992:	4a8c      	ldr	r2, [pc, #560]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 8004994:	f023 0301 	bic.w	r3, r3, #1
 8004998:	6713      	str	r3, [r2, #112]	; 0x70
 800499a:	4b8a      	ldr	r3, [pc, #552]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 800499c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499e:	4a89      	ldr	r2, [pc, #548]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 80049a0:	f023 0304 	bic.w	r3, r3, #4
 80049a4:	6713      	str	r3, [r2, #112]	; 0x70
 80049a6:	e01c      	b.n	80049e2 <HAL_RCC_OscConfig+0x5a6>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	2b05      	cmp	r3, #5
 80049ae:	d10c      	bne.n	80049ca <HAL_RCC_OscConfig+0x58e>
 80049b0:	4b84      	ldr	r3, [pc, #528]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 80049b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b4:	4a83      	ldr	r2, [pc, #524]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 80049b6:	f043 0304 	orr.w	r3, r3, #4
 80049ba:	6713      	str	r3, [r2, #112]	; 0x70
 80049bc:	4b81      	ldr	r3, [pc, #516]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 80049be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c0:	4a80      	ldr	r2, [pc, #512]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 80049c2:	f043 0301 	orr.w	r3, r3, #1
 80049c6:	6713      	str	r3, [r2, #112]	; 0x70
 80049c8:	e00b      	b.n	80049e2 <HAL_RCC_OscConfig+0x5a6>
 80049ca:	4b7e      	ldr	r3, [pc, #504]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 80049cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ce:	4a7d      	ldr	r2, [pc, #500]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 80049d0:	f023 0301 	bic.w	r3, r3, #1
 80049d4:	6713      	str	r3, [r2, #112]	; 0x70
 80049d6:	4b7b      	ldr	r3, [pc, #492]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 80049d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049da:	4a7a      	ldr	r2, [pc, #488]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 80049dc:	f023 0304 	bic.w	r3, r3, #4
 80049e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d015      	beq.n	8004a16 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ea:	f7fc ffa3 	bl	8001934 <HAL_GetTick>
 80049ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049f0:	e00a      	b.n	8004a08 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049f2:	f7fc ff9f 	bl	8001934 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d901      	bls.n	8004a08 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e122      	b.n	8004c4e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a08:	4b6e      	ldr	r3, [pc, #440]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 8004a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0ee      	beq.n	80049f2 <HAL_RCC_OscConfig+0x5b6>
 8004a14:	e014      	b.n	8004a40 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a16:	f7fc ff8d 	bl	8001934 <HAL_GetTick>
 8004a1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a1c:	e00a      	b.n	8004a34 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a1e:	f7fc ff89 	bl	8001934 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d901      	bls.n	8004a34 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e10c      	b.n	8004c4e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a34:	4b63      	ldr	r3, [pc, #396]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 8004a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1ee      	bne.n	8004a1e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 8101 	beq.w	8004c4c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004a4a:	4b5e      	ldr	r3, [pc, #376]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a52:	2b18      	cmp	r3, #24
 8004a54:	f000 80bc 	beq.w	8004bd0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	f040 8095 	bne.w	8004b8c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a62:	4b58      	ldr	r3, [pc, #352]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a57      	ldr	r2, [pc, #348]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 8004a68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6e:	f7fc ff61 	bl	8001934 <HAL_GetTick>
 8004a72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a74:	e008      	b.n	8004a88 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a76:	f7fc ff5d 	bl	8001934 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d901      	bls.n	8004a88 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e0e2      	b.n	8004c4e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a88:	4b4e      	ldr	r3, [pc, #312]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1f0      	bne.n	8004a76 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a94:	4b4b      	ldr	r3, [pc, #300]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 8004a96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a98:	4b4b      	ldr	r3, [pc, #300]	; (8004bc8 <HAL_RCC_OscConfig+0x78c>)
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004aa4:	0112      	lsls	r2, r2, #4
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	4946      	ldr	r1, [pc, #280]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	628b      	str	r3, [r1, #40]	; 0x28
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004abc:	3b01      	subs	r3, #1
 8004abe:	025b      	lsls	r3, r3, #9
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	041b      	lsls	r3, r3, #16
 8004acc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	061b      	lsls	r3, r3, #24
 8004ada:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ade:	4939      	ldr	r1, [pc, #228]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004ae4:	4b37      	ldr	r3, [pc, #220]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 8004ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae8:	4a36      	ldr	r2, [pc, #216]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 8004aea:	f023 0301 	bic.w	r3, r3, #1
 8004aee:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004af0:	4b34      	ldr	r3, [pc, #208]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 8004af2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004af4:	4b35      	ldr	r3, [pc, #212]	; (8004bcc <HAL_RCC_OscConfig+0x790>)
 8004af6:	4013      	ands	r3, r2
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004afc:	00d2      	lsls	r2, r2, #3
 8004afe:	4931      	ldr	r1, [pc, #196]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004b04:	4b2f      	ldr	r3, [pc, #188]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	f023 020c 	bic.w	r2, r3, #12
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b10:	492c      	ldr	r1, [pc, #176]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004b16:	4b2b      	ldr	r3, [pc, #172]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 8004b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1a:	f023 0202 	bic.w	r2, r3, #2
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b22:	4928      	ldr	r1, [pc, #160]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004b28:	4b26      	ldr	r3, [pc, #152]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 8004b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2c:	4a25      	ldr	r2, [pc, #148]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 8004b2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b34:	4b23      	ldr	r3, [pc, #140]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 8004b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b38:	4a22      	ldr	r2, [pc, #136]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 8004b3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004b40:	4b20      	ldr	r3, [pc, #128]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 8004b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b44:	4a1f      	ldr	r2, [pc, #124]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 8004b46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004b4c:	4b1d      	ldr	r3, [pc, #116]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 8004b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b50:	4a1c      	ldr	r2, [pc, #112]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 8004b52:	f043 0301 	orr.w	r3, r3, #1
 8004b56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b58:	4b1a      	ldr	r3, [pc, #104]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a19      	ldr	r2, [pc, #100]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 8004b5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b64:	f7fc fee6 	bl	8001934 <HAL_GetTick>
 8004b68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b6c:	f7fc fee2 	bl	8001934 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e067      	b.n	8004c4e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b7e:	4b11      	ldr	r3, [pc, #68]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d0f0      	beq.n	8004b6c <HAL_RCC_OscConfig+0x730>
 8004b8a:	e05f      	b.n	8004c4c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b8c:	4b0d      	ldr	r3, [pc, #52]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a0c      	ldr	r2, [pc, #48]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 8004b92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b98:	f7fc fecc 	bl	8001934 <HAL_GetTick>
 8004b9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ba0:	f7fc fec8 	bl	8001934 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e04d      	b.n	8004c4e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bb2:	4b04      	ldr	r3, [pc, #16]	; (8004bc4 <HAL_RCC_OscConfig+0x788>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1f0      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x764>
 8004bbe:	e045      	b.n	8004c4c <HAL_RCC_OscConfig+0x810>
 8004bc0:	58024800 	.word	0x58024800
 8004bc4:	58024400 	.word	0x58024400
 8004bc8:	fffffc0c 	.word	0xfffffc0c
 8004bcc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004bd0:	4b21      	ldr	r3, [pc, #132]	; (8004c58 <HAL_RCC_OscConfig+0x81c>)
 8004bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004bd6:	4b20      	ldr	r3, [pc, #128]	; (8004c58 <HAL_RCC_OscConfig+0x81c>)
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bda:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d031      	beq.n	8004c48 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	f003 0203 	and.w	r2, r3, #3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d12a      	bne.n	8004c48 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	091b      	lsrs	r3, r3, #4
 8004bf6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d122      	bne.n	8004c48 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d11a      	bne.n	8004c48 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	0a5b      	lsrs	r3, r3, #9
 8004c16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d111      	bne.n	8004c48 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	0c1b      	lsrs	r3, r3, #16
 8004c28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c30:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d108      	bne.n	8004c48 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	0e1b      	lsrs	r3, r3, #24
 8004c3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c42:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d001      	beq.n	8004c4c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e000      	b.n	8004c4e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3730      	adds	r7, #48	; 0x30
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	58024400 	.word	0x58024400

08004c5c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d101      	bne.n	8004c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e19c      	b.n	8004faa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c70:	4b8a      	ldr	r3, [pc, #552]	; (8004e9c <HAL_RCC_ClockConfig+0x240>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 030f 	and.w	r3, r3, #15
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d910      	bls.n	8004ca0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c7e:	4b87      	ldr	r3, [pc, #540]	; (8004e9c <HAL_RCC_ClockConfig+0x240>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f023 020f 	bic.w	r2, r3, #15
 8004c86:	4985      	ldr	r1, [pc, #532]	; (8004e9c <HAL_RCC_ClockConfig+0x240>)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c8e:	4b83      	ldr	r3, [pc, #524]	; (8004e9c <HAL_RCC_ClockConfig+0x240>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d001      	beq.n	8004ca0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e184      	b.n	8004faa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d010      	beq.n	8004cce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691a      	ldr	r2, [r3, #16]
 8004cb0:	4b7b      	ldr	r3, [pc, #492]	; (8004ea0 <HAL_RCC_ClockConfig+0x244>)
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d908      	bls.n	8004cce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004cbc:	4b78      	ldr	r3, [pc, #480]	; (8004ea0 <HAL_RCC_ClockConfig+0x244>)
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	4975      	ldr	r1, [pc, #468]	; (8004ea0 <HAL_RCC_ClockConfig+0x244>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d010      	beq.n	8004cfc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	695a      	ldr	r2, [r3, #20]
 8004cde:	4b70      	ldr	r3, [pc, #448]	; (8004ea0 <HAL_RCC_ClockConfig+0x244>)
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d908      	bls.n	8004cfc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004cea:	4b6d      	ldr	r3, [pc, #436]	; (8004ea0 <HAL_RCC_ClockConfig+0x244>)
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	496a      	ldr	r1, [pc, #424]	; (8004ea0 <HAL_RCC_ClockConfig+0x244>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0310 	and.w	r3, r3, #16
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d010      	beq.n	8004d2a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	699a      	ldr	r2, [r3, #24]
 8004d0c:	4b64      	ldr	r3, [pc, #400]	; (8004ea0 <HAL_RCC_ClockConfig+0x244>)
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d908      	bls.n	8004d2a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d18:	4b61      	ldr	r3, [pc, #388]	; (8004ea0 <HAL_RCC_ClockConfig+0x244>)
 8004d1a:	69db      	ldr	r3, [r3, #28]
 8004d1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	495e      	ldr	r1, [pc, #376]	; (8004ea0 <HAL_RCC_ClockConfig+0x244>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0320 	and.w	r3, r3, #32
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d010      	beq.n	8004d58 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	69da      	ldr	r2, [r3, #28]
 8004d3a:	4b59      	ldr	r3, [pc, #356]	; (8004ea0 <HAL_RCC_ClockConfig+0x244>)
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d908      	bls.n	8004d58 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004d46:	4b56      	ldr	r3, [pc, #344]	; (8004ea0 <HAL_RCC_ClockConfig+0x244>)
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	4953      	ldr	r1, [pc, #332]	; (8004ea0 <HAL_RCC_ClockConfig+0x244>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d010      	beq.n	8004d86 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68da      	ldr	r2, [r3, #12]
 8004d68:	4b4d      	ldr	r3, [pc, #308]	; (8004ea0 <HAL_RCC_ClockConfig+0x244>)
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	f003 030f 	and.w	r3, r3, #15
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d908      	bls.n	8004d86 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d74:	4b4a      	ldr	r3, [pc, #296]	; (8004ea0 <HAL_RCC_ClockConfig+0x244>)
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	f023 020f 	bic.w	r2, r3, #15
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	4947      	ldr	r1, [pc, #284]	; (8004ea0 <HAL_RCC_ClockConfig+0x244>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d055      	beq.n	8004e3e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004d92:	4b43      	ldr	r3, [pc, #268]	; (8004ea0 <HAL_RCC_ClockConfig+0x244>)
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	4940      	ldr	r1, [pc, #256]	; (8004ea0 <HAL_RCC_ClockConfig+0x244>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d107      	bne.n	8004dbc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004dac:	4b3c      	ldr	r3, [pc, #240]	; (8004ea0 <HAL_RCC_ClockConfig+0x244>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d121      	bne.n	8004dfc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e0f6      	b.n	8004faa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	2b03      	cmp	r3, #3
 8004dc2:	d107      	bne.n	8004dd4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004dc4:	4b36      	ldr	r3, [pc, #216]	; (8004ea0 <HAL_RCC_ClockConfig+0x244>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d115      	bne.n	8004dfc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e0ea      	b.n	8004faa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d107      	bne.n	8004dec <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ddc:	4b30      	ldr	r3, [pc, #192]	; (8004ea0 <HAL_RCC_ClockConfig+0x244>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d109      	bne.n	8004dfc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e0de      	b.n	8004faa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dec:	4b2c      	ldr	r3, [pc, #176]	; (8004ea0 <HAL_RCC_ClockConfig+0x244>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0304 	and.w	r3, r3, #4
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d101      	bne.n	8004dfc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e0d6      	b.n	8004faa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004dfc:	4b28      	ldr	r3, [pc, #160]	; (8004ea0 <HAL_RCC_ClockConfig+0x244>)
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	f023 0207 	bic.w	r2, r3, #7
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	4925      	ldr	r1, [pc, #148]	; (8004ea0 <HAL_RCC_ClockConfig+0x244>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e0e:	f7fc fd91 	bl	8001934 <HAL_GetTick>
 8004e12:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e14:	e00a      	b.n	8004e2c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e16:	f7fc fd8d 	bl	8001934 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e0be      	b.n	8004faa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e2c:	4b1c      	ldr	r3, [pc, #112]	; (8004ea0 <HAL_RCC_ClockConfig+0x244>)
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d1eb      	bne.n	8004e16 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d010      	beq.n	8004e6c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	68da      	ldr	r2, [r3, #12]
 8004e4e:	4b14      	ldr	r3, [pc, #80]	; (8004ea0 <HAL_RCC_ClockConfig+0x244>)
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	f003 030f 	and.w	r3, r3, #15
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d208      	bcs.n	8004e6c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e5a:	4b11      	ldr	r3, [pc, #68]	; (8004ea0 <HAL_RCC_ClockConfig+0x244>)
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	f023 020f 	bic.w	r2, r3, #15
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	490e      	ldr	r1, [pc, #56]	; (8004ea0 <HAL_RCC_ClockConfig+0x244>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e6c:	4b0b      	ldr	r3, [pc, #44]	; (8004e9c <HAL_RCC_ClockConfig+0x240>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 030f 	and.w	r3, r3, #15
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d214      	bcs.n	8004ea4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e7a:	4b08      	ldr	r3, [pc, #32]	; (8004e9c <HAL_RCC_ClockConfig+0x240>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f023 020f 	bic.w	r2, r3, #15
 8004e82:	4906      	ldr	r1, [pc, #24]	; (8004e9c <HAL_RCC_ClockConfig+0x240>)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e8a:	4b04      	ldr	r3, [pc, #16]	; (8004e9c <HAL_RCC_ClockConfig+0x240>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 030f 	and.w	r3, r3, #15
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d005      	beq.n	8004ea4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e086      	b.n	8004faa <HAL_RCC_ClockConfig+0x34e>
 8004e9c:	52002000 	.word	0x52002000
 8004ea0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0304 	and.w	r3, r3, #4
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d010      	beq.n	8004ed2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	691a      	ldr	r2, [r3, #16]
 8004eb4:	4b3f      	ldr	r3, [pc, #252]	; (8004fb4 <HAL_RCC_ClockConfig+0x358>)
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d208      	bcs.n	8004ed2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004ec0:	4b3c      	ldr	r3, [pc, #240]	; (8004fb4 <HAL_RCC_ClockConfig+0x358>)
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	4939      	ldr	r1, [pc, #228]	; (8004fb4 <HAL_RCC_ClockConfig+0x358>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0308 	and.w	r3, r3, #8
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d010      	beq.n	8004f00 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	695a      	ldr	r2, [r3, #20]
 8004ee2:	4b34      	ldr	r3, [pc, #208]	; (8004fb4 <HAL_RCC_ClockConfig+0x358>)
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d208      	bcs.n	8004f00 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004eee:	4b31      	ldr	r3, [pc, #196]	; (8004fb4 <HAL_RCC_ClockConfig+0x358>)
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	492e      	ldr	r1, [pc, #184]	; (8004fb4 <HAL_RCC_ClockConfig+0x358>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0310 	and.w	r3, r3, #16
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d010      	beq.n	8004f2e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	699a      	ldr	r2, [r3, #24]
 8004f10:	4b28      	ldr	r3, [pc, #160]	; (8004fb4 <HAL_RCC_ClockConfig+0x358>)
 8004f12:	69db      	ldr	r3, [r3, #28]
 8004f14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d208      	bcs.n	8004f2e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f1c:	4b25      	ldr	r3, [pc, #148]	; (8004fb4 <HAL_RCC_ClockConfig+0x358>)
 8004f1e:	69db      	ldr	r3, [r3, #28]
 8004f20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	4922      	ldr	r1, [pc, #136]	; (8004fb4 <HAL_RCC_ClockConfig+0x358>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0320 	and.w	r3, r3, #32
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d010      	beq.n	8004f5c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	69da      	ldr	r2, [r3, #28]
 8004f3e:	4b1d      	ldr	r3, [pc, #116]	; (8004fb4 <HAL_RCC_ClockConfig+0x358>)
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d208      	bcs.n	8004f5c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004f4a:	4b1a      	ldr	r3, [pc, #104]	; (8004fb4 <HAL_RCC_ClockConfig+0x358>)
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	4917      	ldr	r1, [pc, #92]	; (8004fb4 <HAL_RCC_ClockConfig+0x358>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004f5c:	f000 f834 	bl	8004fc8 <HAL_RCC_GetSysClockFreq>
 8004f60:	4602      	mov	r2, r0
 8004f62:	4b14      	ldr	r3, [pc, #80]	; (8004fb4 <HAL_RCC_ClockConfig+0x358>)
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	0a1b      	lsrs	r3, r3, #8
 8004f68:	f003 030f 	and.w	r3, r3, #15
 8004f6c:	4912      	ldr	r1, [pc, #72]	; (8004fb8 <HAL_RCC_ClockConfig+0x35c>)
 8004f6e:	5ccb      	ldrb	r3, [r1, r3]
 8004f70:	f003 031f 	and.w	r3, r3, #31
 8004f74:	fa22 f303 	lsr.w	r3, r2, r3
 8004f78:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f7a:	4b0e      	ldr	r3, [pc, #56]	; (8004fb4 <HAL_RCC_ClockConfig+0x358>)
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	f003 030f 	and.w	r3, r3, #15
 8004f82:	4a0d      	ldr	r2, [pc, #52]	; (8004fb8 <HAL_RCC_ClockConfig+0x35c>)
 8004f84:	5cd3      	ldrb	r3, [r2, r3]
 8004f86:	f003 031f 	and.w	r3, r3, #31
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f90:	4a0a      	ldr	r2, [pc, #40]	; (8004fbc <HAL_RCC_ClockConfig+0x360>)
 8004f92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f94:	4a0a      	ldr	r2, [pc, #40]	; (8004fc0 <HAL_RCC_ClockConfig+0x364>)
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004f9a:	4b0a      	ldr	r3, [pc, #40]	; (8004fc4 <HAL_RCC_ClockConfig+0x368>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7fc fc7e 	bl	80018a0 <HAL_InitTick>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3718      	adds	r7, #24
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	58024400 	.word	0x58024400
 8004fb8:	08009fe8 	.word	0x08009fe8
 8004fbc:	20000008 	.word	0x20000008
 8004fc0:	20000004 	.word	0x20000004
 8004fc4:	2000000c 	.word	0x2000000c

08004fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b089      	sub	sp, #36	; 0x24
 8004fcc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fce:	4bb3      	ldr	r3, [pc, #716]	; (800529c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fd6:	2b18      	cmp	r3, #24
 8004fd8:	f200 8155 	bhi.w	8005286 <HAL_RCC_GetSysClockFreq+0x2be>
 8004fdc:	a201      	add	r2, pc, #4	; (adr r2, 8004fe4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe2:	bf00      	nop
 8004fe4:	08005049 	.word	0x08005049
 8004fe8:	08005287 	.word	0x08005287
 8004fec:	08005287 	.word	0x08005287
 8004ff0:	08005287 	.word	0x08005287
 8004ff4:	08005287 	.word	0x08005287
 8004ff8:	08005287 	.word	0x08005287
 8004ffc:	08005287 	.word	0x08005287
 8005000:	08005287 	.word	0x08005287
 8005004:	0800506f 	.word	0x0800506f
 8005008:	08005287 	.word	0x08005287
 800500c:	08005287 	.word	0x08005287
 8005010:	08005287 	.word	0x08005287
 8005014:	08005287 	.word	0x08005287
 8005018:	08005287 	.word	0x08005287
 800501c:	08005287 	.word	0x08005287
 8005020:	08005287 	.word	0x08005287
 8005024:	08005075 	.word	0x08005075
 8005028:	08005287 	.word	0x08005287
 800502c:	08005287 	.word	0x08005287
 8005030:	08005287 	.word	0x08005287
 8005034:	08005287 	.word	0x08005287
 8005038:	08005287 	.word	0x08005287
 800503c:	08005287 	.word	0x08005287
 8005040:	08005287 	.word	0x08005287
 8005044:	0800507b 	.word	0x0800507b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005048:	4b94      	ldr	r3, [pc, #592]	; (800529c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0320 	and.w	r3, r3, #32
 8005050:	2b00      	cmp	r3, #0
 8005052:	d009      	beq.n	8005068 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005054:	4b91      	ldr	r3, [pc, #580]	; (800529c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	08db      	lsrs	r3, r3, #3
 800505a:	f003 0303 	and.w	r3, r3, #3
 800505e:	4a90      	ldr	r2, [pc, #576]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005060:	fa22 f303 	lsr.w	r3, r2, r3
 8005064:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005066:	e111      	b.n	800528c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005068:	4b8d      	ldr	r3, [pc, #564]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800506a:	61bb      	str	r3, [r7, #24]
    break;
 800506c:	e10e      	b.n	800528c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800506e:	4b8d      	ldr	r3, [pc, #564]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005070:	61bb      	str	r3, [r7, #24]
    break;
 8005072:	e10b      	b.n	800528c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005074:	4b8c      	ldr	r3, [pc, #560]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005076:	61bb      	str	r3, [r7, #24]
    break;
 8005078:	e108      	b.n	800528c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800507a:	4b88      	ldr	r3, [pc, #544]	; (800529c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800507c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507e:	f003 0303 	and.w	r3, r3, #3
 8005082:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005084:	4b85      	ldr	r3, [pc, #532]	; (800529c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005088:	091b      	lsrs	r3, r3, #4
 800508a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800508e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005090:	4b82      	ldr	r3, [pc, #520]	; (800529c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800509a:	4b80      	ldr	r3, [pc, #512]	; (800529c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800509c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800509e:	08db      	lsrs	r3, r3, #3
 80050a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	fb02 f303 	mul.w	r3, r2, r3
 80050aa:	ee07 3a90 	vmov	s15, r3
 80050ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050b2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f000 80e1 	beq.w	8005280 <HAL_RCC_GetSysClockFreq+0x2b8>
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	f000 8083 	beq.w	80051cc <HAL_RCC_GetSysClockFreq+0x204>
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	f200 80a1 	bhi.w	8005210 <HAL_RCC_GetSysClockFreq+0x248>
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d003      	beq.n	80050dc <HAL_RCC_GetSysClockFreq+0x114>
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d056      	beq.n	8005188 <HAL_RCC_GetSysClockFreq+0x1c0>
 80050da:	e099      	b.n	8005210 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050dc:	4b6f      	ldr	r3, [pc, #444]	; (800529c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0320 	and.w	r3, r3, #32
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d02d      	beq.n	8005144 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80050e8:	4b6c      	ldr	r3, [pc, #432]	; (800529c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	08db      	lsrs	r3, r3, #3
 80050ee:	f003 0303 	and.w	r3, r3, #3
 80050f2:	4a6b      	ldr	r2, [pc, #428]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050f4:	fa22 f303 	lsr.w	r3, r2, r3
 80050f8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	ee07 3a90 	vmov	s15, r3
 8005100:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	ee07 3a90 	vmov	s15, r3
 800510a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800510e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005112:	4b62      	ldr	r3, [pc, #392]	; (800529c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800511a:	ee07 3a90 	vmov	s15, r3
 800511e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005122:	ed97 6a02 	vldr	s12, [r7, #8]
 8005126:	eddf 5a61 	vldr	s11, [pc, #388]	; 80052ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800512a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800512e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800513a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800513e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005142:	e087      	b.n	8005254 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	ee07 3a90 	vmov	s15, r3
 800514a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800514e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80052b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005156:	4b51      	ldr	r3, [pc, #324]	; (800529c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800515e:	ee07 3a90 	vmov	s15, r3
 8005162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005166:	ed97 6a02 	vldr	s12, [r7, #8]
 800516a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80052ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800516e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800517a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800517e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005182:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005186:	e065      	b.n	8005254 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	ee07 3a90 	vmov	s15, r3
 800518e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005192:	eddf 6a48 	vldr	s13, [pc, #288]	; 80052b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800519a:	4b40      	ldr	r3, [pc, #256]	; (800529c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800519c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051a2:	ee07 3a90 	vmov	s15, r3
 80051a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80051ae:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80052ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80051b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051ca:	e043      	b.n	8005254 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	ee07 3a90 	vmov	s15, r3
 80051d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80052b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80051da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051de:	4b2f      	ldr	r3, [pc, #188]	; (800529c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e6:	ee07 3a90 	vmov	s15, r3
 80051ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80051f2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80052ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80051f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800520a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800520e:	e021      	b.n	8005254 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	ee07 3a90 	vmov	s15, r3
 8005216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800521a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80052b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800521e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005222:	4b1e      	ldr	r3, [pc, #120]	; (800529c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800522a:	ee07 3a90 	vmov	s15, r3
 800522e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005232:	ed97 6a02 	vldr	s12, [r7, #8]
 8005236:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80052ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800523a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800523e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800524a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800524e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005252:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005254:	4b11      	ldr	r3, [pc, #68]	; (800529c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005258:	0a5b      	lsrs	r3, r3, #9
 800525a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800525e:	3301      	adds	r3, #1
 8005260:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	ee07 3a90 	vmov	s15, r3
 8005268:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800526c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005270:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005274:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005278:	ee17 3a90 	vmov	r3, s15
 800527c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800527e:	e005      	b.n	800528c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005280:	2300      	movs	r3, #0
 8005282:	61bb      	str	r3, [r7, #24]
    break;
 8005284:	e002      	b.n	800528c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005286:	4b07      	ldr	r3, [pc, #28]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005288:	61bb      	str	r3, [r7, #24]
    break;
 800528a:	bf00      	nop
  }

  return sysclockfreq;
 800528c:	69bb      	ldr	r3, [r7, #24]
}
 800528e:	4618      	mov	r0, r3
 8005290:	3724      	adds	r7, #36	; 0x24
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	58024400 	.word	0x58024400
 80052a0:	03d09000 	.word	0x03d09000
 80052a4:	003d0900 	.word	0x003d0900
 80052a8:	02dc6c00 	.word	0x02dc6c00
 80052ac:	46000000 	.word	0x46000000
 80052b0:	4c742400 	.word	0x4c742400
 80052b4:	4a742400 	.word	0x4a742400
 80052b8:	4c371b00 	.word	0x4c371b00

080052bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80052c2:	f7ff fe81 	bl	8004fc8 <HAL_RCC_GetSysClockFreq>
 80052c6:	4602      	mov	r2, r0
 80052c8:	4b10      	ldr	r3, [pc, #64]	; (800530c <HAL_RCC_GetHCLKFreq+0x50>)
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	0a1b      	lsrs	r3, r3, #8
 80052ce:	f003 030f 	and.w	r3, r3, #15
 80052d2:	490f      	ldr	r1, [pc, #60]	; (8005310 <HAL_RCC_GetHCLKFreq+0x54>)
 80052d4:	5ccb      	ldrb	r3, [r1, r3]
 80052d6:	f003 031f 	and.w	r3, r3, #31
 80052da:	fa22 f303 	lsr.w	r3, r2, r3
 80052de:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80052e0:	4b0a      	ldr	r3, [pc, #40]	; (800530c <HAL_RCC_GetHCLKFreq+0x50>)
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	f003 030f 	and.w	r3, r3, #15
 80052e8:	4a09      	ldr	r2, [pc, #36]	; (8005310 <HAL_RCC_GetHCLKFreq+0x54>)
 80052ea:	5cd3      	ldrb	r3, [r2, r3]
 80052ec:	f003 031f 	and.w	r3, r3, #31
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	fa22 f303 	lsr.w	r3, r2, r3
 80052f6:	4a07      	ldr	r2, [pc, #28]	; (8005314 <HAL_RCC_GetHCLKFreq+0x58>)
 80052f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80052fa:	4a07      	ldr	r2, [pc, #28]	; (8005318 <HAL_RCC_GetHCLKFreq+0x5c>)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005300:	4b04      	ldr	r3, [pc, #16]	; (8005314 <HAL_RCC_GetHCLKFreq+0x58>)
 8005302:	681b      	ldr	r3, [r3, #0]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3708      	adds	r7, #8
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	58024400 	.word	0x58024400
 8005310:	08009fe8 	.word	0x08009fe8
 8005314:	20000008 	.word	0x20000008
 8005318:	20000004 	.word	0x20000004

0800531c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005320:	f7ff ffcc 	bl	80052bc <HAL_RCC_GetHCLKFreq>
 8005324:	4602      	mov	r2, r0
 8005326:	4b06      	ldr	r3, [pc, #24]	; (8005340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	091b      	lsrs	r3, r3, #4
 800532c:	f003 0307 	and.w	r3, r3, #7
 8005330:	4904      	ldr	r1, [pc, #16]	; (8005344 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005332:	5ccb      	ldrb	r3, [r1, r3]
 8005334:	f003 031f 	and.w	r3, r3, #31
 8005338:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800533c:	4618      	mov	r0, r3
 800533e:	bd80      	pop	{r7, pc}
 8005340:	58024400 	.word	0x58024400
 8005344:	08009fe8 	.word	0x08009fe8

08005348 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800534c:	f7ff ffb6 	bl	80052bc <HAL_RCC_GetHCLKFreq>
 8005350:	4602      	mov	r2, r0
 8005352:	4b06      	ldr	r3, [pc, #24]	; (800536c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005354:	69db      	ldr	r3, [r3, #28]
 8005356:	0a1b      	lsrs	r3, r3, #8
 8005358:	f003 0307 	and.w	r3, r3, #7
 800535c:	4904      	ldr	r1, [pc, #16]	; (8005370 <HAL_RCC_GetPCLK2Freq+0x28>)
 800535e:	5ccb      	ldrb	r3, [r1, r3]
 8005360:	f003 031f 	and.w	r3, r3, #31
 8005364:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005368:	4618      	mov	r0, r3
 800536a:	bd80      	pop	{r7, pc}
 800536c:	58024400 	.word	0x58024400
 8005370:	08009fe8 	.word	0x08009fe8

08005374 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800537c:	2300      	movs	r3, #0
 800537e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005380:	2300      	movs	r3, #0
 8005382:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d03f      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005394:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005398:	d02a      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800539a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800539e:	d824      	bhi.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80053a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053a4:	d018      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80053a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053aa:	d81e      	bhi.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d003      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80053b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053b4:	d007      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80053b6:	e018      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053b8:	4bab      	ldr	r3, [pc, #684]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053bc:	4aaa      	ldr	r2, [pc, #680]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80053c4:	e015      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	3304      	adds	r3, #4
 80053ca:	2102      	movs	r1, #2
 80053cc:	4618      	mov	r0, r3
 80053ce:	f001 f9cf 	bl	8006770 <RCCEx_PLL2_Config>
 80053d2:	4603      	mov	r3, r0
 80053d4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80053d6:	e00c      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	3324      	adds	r3, #36	; 0x24
 80053dc:	2102      	movs	r1, #2
 80053de:	4618      	mov	r0, r3
 80053e0:	f001 fa78 	bl	80068d4 <RCCEx_PLL3_Config>
 80053e4:	4603      	mov	r3, r0
 80053e6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80053e8:	e003      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	75fb      	strb	r3, [r7, #23]
      break;
 80053ee:	e000      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80053f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053f2:	7dfb      	ldrb	r3, [r7, #23]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d109      	bne.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80053f8:	4b9b      	ldr	r3, [pc, #620]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005404:	4998      	ldr	r1, [pc, #608]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005406:	4313      	orrs	r3, r2
 8005408:	650b      	str	r3, [r1, #80]	; 0x50
 800540a:	e001      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800540c:	7dfb      	ldrb	r3, [r7, #23]
 800540e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005418:	2b00      	cmp	r3, #0
 800541a:	d03d      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005420:	2b04      	cmp	r3, #4
 8005422:	d826      	bhi.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005424:	a201      	add	r2, pc, #4	; (adr r2, 800542c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542a:	bf00      	nop
 800542c:	08005441 	.word	0x08005441
 8005430:	0800544f 	.word	0x0800544f
 8005434:	08005461 	.word	0x08005461
 8005438:	08005479 	.word	0x08005479
 800543c:	08005479 	.word	0x08005479
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005440:	4b89      	ldr	r3, [pc, #548]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005444:	4a88      	ldr	r2, [pc, #544]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005446:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800544a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800544c:	e015      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	3304      	adds	r3, #4
 8005452:	2100      	movs	r1, #0
 8005454:	4618      	mov	r0, r3
 8005456:	f001 f98b 	bl	8006770 <RCCEx_PLL2_Config>
 800545a:	4603      	mov	r3, r0
 800545c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800545e:	e00c      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	3324      	adds	r3, #36	; 0x24
 8005464:	2100      	movs	r1, #0
 8005466:	4618      	mov	r0, r3
 8005468:	f001 fa34 	bl	80068d4 <RCCEx_PLL3_Config>
 800546c:	4603      	mov	r3, r0
 800546e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005470:	e003      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	75fb      	strb	r3, [r7, #23]
      break;
 8005476:	e000      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005478:	bf00      	nop
    }

    if(ret == HAL_OK)
 800547a:	7dfb      	ldrb	r3, [r7, #23]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d109      	bne.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005480:	4b79      	ldr	r3, [pc, #484]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005484:	f023 0207 	bic.w	r2, r3, #7
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548c:	4976      	ldr	r1, [pc, #472]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800548e:	4313      	orrs	r3, r2
 8005490:	650b      	str	r3, [r1, #80]	; 0x50
 8005492:	e001      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005494:	7dfb      	ldrb	r3, [r7, #23]
 8005496:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d042      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ac:	d02b      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80054ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054b2:	d825      	bhi.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80054b4:	2bc0      	cmp	r3, #192	; 0xc0
 80054b6:	d028      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80054b8:	2bc0      	cmp	r3, #192	; 0xc0
 80054ba:	d821      	bhi.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80054bc:	2b80      	cmp	r3, #128	; 0x80
 80054be:	d016      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80054c0:	2b80      	cmp	r3, #128	; 0x80
 80054c2:	d81d      	bhi.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d002      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80054c8:	2b40      	cmp	r3, #64	; 0x40
 80054ca:	d007      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x168>
 80054cc:	e018      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054ce:	4b66      	ldr	r3, [pc, #408]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d2:	4a65      	ldr	r2, [pc, #404]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80054da:	e017      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	3304      	adds	r3, #4
 80054e0:	2100      	movs	r1, #0
 80054e2:	4618      	mov	r0, r3
 80054e4:	f001 f944 	bl	8006770 <RCCEx_PLL2_Config>
 80054e8:	4603      	mov	r3, r0
 80054ea:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80054ec:	e00e      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	3324      	adds	r3, #36	; 0x24
 80054f2:	2100      	movs	r1, #0
 80054f4:	4618      	mov	r0, r3
 80054f6:	f001 f9ed 	bl	80068d4 <RCCEx_PLL3_Config>
 80054fa:	4603      	mov	r3, r0
 80054fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80054fe:	e005      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	75fb      	strb	r3, [r7, #23]
      break;
 8005504:	e002      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005506:	bf00      	nop
 8005508:	e000      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800550a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800550c:	7dfb      	ldrb	r3, [r7, #23]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d109      	bne.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005512:	4b55      	ldr	r3, [pc, #340]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005516:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551e:	4952      	ldr	r1, [pc, #328]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005520:	4313      	orrs	r3, r2
 8005522:	650b      	str	r3, [r1, #80]	; 0x50
 8005524:	e001      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005526:	7dfb      	ldrb	r3, [r7, #23]
 8005528:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005532:	2b00      	cmp	r3, #0
 8005534:	d049      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800553c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005540:	d030      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005542:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005546:	d82a      	bhi.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005548:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800554c:	d02c      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800554e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005552:	d824      	bhi.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005554:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005558:	d018      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800555a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800555e:	d81e      	bhi.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005560:	2b00      	cmp	r3, #0
 8005562:	d003      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005564:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005568:	d007      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800556a:	e018      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800556c:	4b3e      	ldr	r3, [pc, #248]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800556e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005570:	4a3d      	ldr	r2, [pc, #244]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005576:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005578:	e017      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	3304      	adds	r3, #4
 800557e:	2100      	movs	r1, #0
 8005580:	4618      	mov	r0, r3
 8005582:	f001 f8f5 	bl	8006770 <RCCEx_PLL2_Config>
 8005586:	4603      	mov	r3, r0
 8005588:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800558a:	e00e      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	3324      	adds	r3, #36	; 0x24
 8005590:	2100      	movs	r1, #0
 8005592:	4618      	mov	r0, r3
 8005594:	f001 f99e 	bl	80068d4 <RCCEx_PLL3_Config>
 8005598:	4603      	mov	r3, r0
 800559a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800559c:	e005      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	75fb      	strb	r3, [r7, #23]
      break;
 80055a2:	e002      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80055a4:	bf00      	nop
 80055a6:	e000      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80055a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055aa:	7dfb      	ldrb	r3, [r7, #23]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10a      	bne.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80055b0:	4b2d      	ldr	r3, [pc, #180]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055b4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80055be:	492a      	ldr	r1, [pc, #168]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	658b      	str	r3, [r1, #88]	; 0x58
 80055c4:	e001      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055c6:	7dfb      	ldrb	r3, [r7, #23]
 80055c8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d04c      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80055dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055e0:	d030      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80055e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055e6:	d82a      	bhi.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80055e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80055ec:	d02c      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80055ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80055f2:	d824      	bhi.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80055f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055f8:	d018      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80055fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055fe:	d81e      	bhi.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005600:	2b00      	cmp	r3, #0
 8005602:	d003      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005604:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005608:	d007      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800560a:	e018      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800560c:	4b16      	ldr	r3, [pc, #88]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800560e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005610:	4a15      	ldr	r2, [pc, #84]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005616:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005618:	e017      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	3304      	adds	r3, #4
 800561e:	2100      	movs	r1, #0
 8005620:	4618      	mov	r0, r3
 8005622:	f001 f8a5 	bl	8006770 <RCCEx_PLL2_Config>
 8005626:	4603      	mov	r3, r0
 8005628:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800562a:	e00e      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	3324      	adds	r3, #36	; 0x24
 8005630:	2100      	movs	r1, #0
 8005632:	4618      	mov	r0, r3
 8005634:	f001 f94e 	bl	80068d4 <RCCEx_PLL3_Config>
 8005638:	4603      	mov	r3, r0
 800563a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800563c:	e005      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	75fb      	strb	r3, [r7, #23]
      break;
 8005642:	e002      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005644:	bf00      	nop
 8005646:	e000      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005648:	bf00      	nop
    }

    if(ret == HAL_OK)
 800564a:	7dfb      	ldrb	r3, [r7, #23]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10d      	bne.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005650:	4b05      	ldr	r3, [pc, #20]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005654:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800565e:	4902      	ldr	r1, [pc, #8]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005660:	4313      	orrs	r3, r2
 8005662:	658b      	str	r3, [r1, #88]	; 0x58
 8005664:	e004      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005666:	bf00      	nop
 8005668:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800566c:	7dfb      	ldrb	r3, [r7, #23]
 800566e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d032      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005680:	2b30      	cmp	r3, #48	; 0x30
 8005682:	d01c      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005684:	2b30      	cmp	r3, #48	; 0x30
 8005686:	d817      	bhi.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005688:	2b20      	cmp	r3, #32
 800568a:	d00c      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800568c:	2b20      	cmp	r3, #32
 800568e:	d813      	bhi.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005690:	2b00      	cmp	r3, #0
 8005692:	d016      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005694:	2b10      	cmp	r3, #16
 8005696:	d10f      	bne.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005698:	4baf      	ldr	r3, [pc, #700]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800569a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569c:	4aae      	ldr	r2, [pc, #696]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800569e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80056a4:	e00e      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	3304      	adds	r3, #4
 80056aa:	2102      	movs	r1, #2
 80056ac:	4618      	mov	r0, r3
 80056ae:	f001 f85f 	bl	8006770 <RCCEx_PLL2_Config>
 80056b2:	4603      	mov	r3, r0
 80056b4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80056b6:	e005      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	75fb      	strb	r3, [r7, #23]
      break;
 80056bc:	e002      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80056be:	bf00      	nop
 80056c0:	e000      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80056c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056c4:	7dfb      	ldrb	r3, [r7, #23]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d109      	bne.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80056ca:	4ba3      	ldr	r3, [pc, #652]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80056cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056d6:	49a0      	ldr	r1, [pc, #640]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	64cb      	str	r3, [r1, #76]	; 0x4c
 80056dc:	e001      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056de:	7dfb      	ldrb	r3, [r7, #23]
 80056e0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d047      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056f6:	d030      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80056f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056fc:	d82a      	bhi.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80056fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005702:	d02c      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005704:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005708:	d824      	bhi.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800570a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800570e:	d018      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005714:	d81e      	bhi.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800571a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800571e:	d007      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005720:	e018      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005722:	4b8d      	ldr	r3, [pc, #564]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005726:	4a8c      	ldr	r2, [pc, #560]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800572c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800572e:	e017      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3304      	adds	r3, #4
 8005734:	2100      	movs	r1, #0
 8005736:	4618      	mov	r0, r3
 8005738:	f001 f81a 	bl	8006770 <RCCEx_PLL2_Config>
 800573c:	4603      	mov	r3, r0
 800573e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005740:	e00e      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	3324      	adds	r3, #36	; 0x24
 8005746:	2100      	movs	r1, #0
 8005748:	4618      	mov	r0, r3
 800574a:	f001 f8c3 	bl	80068d4 <RCCEx_PLL3_Config>
 800574e:	4603      	mov	r3, r0
 8005750:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005752:	e005      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	75fb      	strb	r3, [r7, #23]
      break;
 8005758:	e002      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800575a:	bf00      	nop
 800575c:	e000      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800575e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005760:	7dfb      	ldrb	r3, [r7, #23]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d109      	bne.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005766:	4b7c      	ldr	r3, [pc, #496]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800576a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005772:	4979      	ldr	r1, [pc, #484]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005774:	4313      	orrs	r3, r2
 8005776:	650b      	str	r3, [r1, #80]	; 0x50
 8005778:	e001      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800577a:	7dfb      	ldrb	r3, [r7, #23]
 800577c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d049      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800578e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005792:	d02e      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005794:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005798:	d828      	bhi.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x478>
 800579a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800579e:	d02a      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80057a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80057a4:	d822      	bhi.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x478>
 80057a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80057aa:	d026      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x486>
 80057ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80057b0:	d81c      	bhi.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x478>
 80057b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057b6:	d010      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x466>
 80057b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057bc:	d816      	bhi.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x478>
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d01d      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80057c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057c6:	d111      	bne.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	3304      	adds	r3, #4
 80057cc:	2101      	movs	r1, #1
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 ffce 	bl	8006770 <RCCEx_PLL2_Config>
 80057d4:	4603      	mov	r3, r0
 80057d6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80057d8:	e012      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	3324      	adds	r3, #36	; 0x24
 80057de:	2101      	movs	r1, #1
 80057e0:	4618      	mov	r0, r3
 80057e2:	f001 f877 	bl	80068d4 <RCCEx_PLL3_Config>
 80057e6:	4603      	mov	r3, r0
 80057e8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80057ea:	e009      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	75fb      	strb	r3, [r7, #23]
      break;
 80057f0:	e006      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80057f2:	bf00      	nop
 80057f4:	e004      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80057f6:	bf00      	nop
 80057f8:	e002      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80057fa:	bf00      	nop
 80057fc:	e000      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80057fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005800:	7dfb      	ldrb	r3, [r7, #23]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d109      	bne.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005806:	4b54      	ldr	r3, [pc, #336]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800580a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005812:	4951      	ldr	r1, [pc, #324]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005814:	4313      	orrs	r3, r2
 8005816:	650b      	str	r3, [r1, #80]	; 0x50
 8005818:	e001      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800581a:	7dfb      	ldrb	r3, [r7, #23]
 800581c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d04b      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005830:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005834:	d02e      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8005836:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800583a:	d828      	bhi.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800583c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005840:	d02a      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005846:	d822      	bhi.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005848:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800584c:	d026      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x528>
 800584e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005852:	d81c      	bhi.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005854:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005858:	d010      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x508>
 800585a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800585e:	d816      	bhi.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005860:	2b00      	cmp	r3, #0
 8005862:	d01d      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005864:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005868:	d111      	bne.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	3304      	adds	r3, #4
 800586e:	2101      	movs	r1, #1
 8005870:	4618      	mov	r0, r3
 8005872:	f000 ff7d 	bl	8006770 <RCCEx_PLL2_Config>
 8005876:	4603      	mov	r3, r0
 8005878:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800587a:	e012      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	3324      	adds	r3, #36	; 0x24
 8005880:	2101      	movs	r1, #1
 8005882:	4618      	mov	r0, r3
 8005884:	f001 f826 	bl	80068d4 <RCCEx_PLL3_Config>
 8005888:	4603      	mov	r3, r0
 800588a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800588c:	e009      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	75fb      	strb	r3, [r7, #23]
      break;
 8005892:	e006      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005894:	bf00      	nop
 8005896:	e004      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005898:	bf00      	nop
 800589a:	e002      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800589c:	bf00      	nop
 800589e:	e000      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80058a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058a2:	7dfb      	ldrb	r3, [r7, #23]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10a      	bne.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80058a8:	4b2b      	ldr	r3, [pc, #172]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80058aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ac:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80058b6:	4928      	ldr	r1, [pc, #160]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	658b      	str	r3, [r1, #88]	; 0x58
 80058bc:	e001      	b.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058be:	7dfb      	ldrb	r3, [r7, #23]
 80058c0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d02f      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058d6:	d00e      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80058d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058dc:	d814      	bhi.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d015      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80058e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058e6:	d10f      	bne.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058e8:	4b1b      	ldr	r3, [pc, #108]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80058ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ec:	4a1a      	ldr	r2, [pc, #104]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80058ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80058f4:	e00c      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	3304      	adds	r3, #4
 80058fa:	2101      	movs	r1, #1
 80058fc:	4618      	mov	r0, r3
 80058fe:	f000 ff37 	bl	8006770 <RCCEx_PLL2_Config>
 8005902:	4603      	mov	r3, r0
 8005904:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005906:	e003      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	75fb      	strb	r3, [r7, #23]
      break;
 800590c:	e000      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800590e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005910:	7dfb      	ldrb	r3, [r7, #23]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d109      	bne.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005916:	4b10      	ldr	r3, [pc, #64]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800591a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005922:	490d      	ldr	r1, [pc, #52]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005924:	4313      	orrs	r3, r2
 8005926:	650b      	str	r3, [r1, #80]	; 0x50
 8005928:	e001      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800592a:	7dfb      	ldrb	r3, [r7, #23]
 800592c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d033      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800593e:	2b03      	cmp	r3, #3
 8005940:	d81c      	bhi.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005942:	a201      	add	r2, pc, #4	; (adr r2, 8005948 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8005944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005948:	08005983 	.word	0x08005983
 800594c:	0800595d 	.word	0x0800595d
 8005950:	0800596b 	.word	0x0800596b
 8005954:	08005983 	.word	0x08005983
 8005958:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800595c:	4bb8      	ldr	r3, [pc, #736]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800595e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005960:	4ab7      	ldr	r2, [pc, #732]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005966:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005968:	e00c      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	3304      	adds	r3, #4
 800596e:	2102      	movs	r1, #2
 8005970:	4618      	mov	r0, r3
 8005972:	f000 fefd 	bl	8006770 <RCCEx_PLL2_Config>
 8005976:	4603      	mov	r3, r0
 8005978:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800597a:	e003      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	75fb      	strb	r3, [r7, #23]
      break;
 8005980:	e000      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005982:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005984:	7dfb      	ldrb	r3, [r7, #23]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d109      	bne.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800598a:	4bad      	ldr	r3, [pc, #692]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800598c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800598e:	f023 0203 	bic.w	r2, r3, #3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005996:	49aa      	ldr	r1, [pc, #680]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005998:	4313      	orrs	r3, r2
 800599a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800599c:	e001      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800599e:	7dfb      	ldrb	r3, [r7, #23]
 80059a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f000 8086 	beq.w	8005abc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059b0:	4ba4      	ldr	r3, [pc, #656]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4aa3      	ldr	r2, [pc, #652]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80059b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059bc:	f7fb ffba 	bl	8001934 <HAL_GetTick>
 80059c0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059c2:	e009      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059c4:	f7fb ffb6 	bl	8001934 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	2b64      	cmp	r3, #100	; 0x64
 80059d0:	d902      	bls.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	75fb      	strb	r3, [r7, #23]
        break;
 80059d6:	e005      	b.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059d8:	4b9a      	ldr	r3, [pc, #616]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d0ef      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80059e4:	7dfb      	ldrb	r3, [r7, #23]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d166      	bne.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80059ea:	4b95      	ldr	r3, [pc, #596]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80059ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059f4:	4053      	eors	r3, r2
 80059f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d013      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059fe:	4b90      	ldr	r3, [pc, #576]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a06:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a08:	4b8d      	ldr	r3, [pc, #564]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a0c:	4a8c      	ldr	r2, [pc, #560]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a12:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a14:	4b8a      	ldr	r3, [pc, #552]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a18:	4a89      	ldr	r2, [pc, #548]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a1e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005a20:	4a87      	ldr	r2, [pc, #540]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a30:	d115      	bne.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a32:	f7fb ff7f 	bl	8001934 <HAL_GetTick>
 8005a36:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a38:	e00b      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a3a:	f7fb ff7b 	bl	8001934 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d902      	bls.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	75fb      	strb	r3, [r7, #23]
            break;
 8005a50:	e005      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a52:	4b7b      	ldr	r3, [pc, #492]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d0ed      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005a5e:	7dfb      	ldrb	r3, [r7, #23]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d126      	bne.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a72:	d10d      	bne.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005a74:	4b72      	ldr	r3, [pc, #456]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a82:	0919      	lsrs	r1, r3, #4
 8005a84:	4b70      	ldr	r3, [pc, #448]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8005a86:	400b      	ands	r3, r1
 8005a88:	496d      	ldr	r1, [pc, #436]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	610b      	str	r3, [r1, #16]
 8005a8e:	e005      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005a90:	4b6b      	ldr	r3, [pc, #428]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	4a6a      	ldr	r2, [pc, #424]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005a96:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005a9a:	6113      	str	r3, [r2, #16]
 8005a9c:	4b68      	ldr	r3, [pc, #416]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005a9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005aa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aaa:	4965      	ldr	r1, [pc, #404]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	670b      	str	r3, [r1, #112]	; 0x70
 8005ab0:	e004      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ab2:	7dfb      	ldrb	r3, [r7, #23]
 8005ab4:	75bb      	strb	r3, [r7, #22]
 8005ab6:	e001      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab8:	7dfb      	ldrb	r3, [r7, #23]
 8005aba:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d07e      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005acc:	2b28      	cmp	r3, #40	; 0x28
 8005ace:	d867      	bhi.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005ad0:	a201      	add	r2, pc, #4	; (adr r2, 8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad6:	bf00      	nop
 8005ad8:	08005ba7 	.word	0x08005ba7
 8005adc:	08005ba1 	.word	0x08005ba1
 8005ae0:	08005ba1 	.word	0x08005ba1
 8005ae4:	08005ba1 	.word	0x08005ba1
 8005ae8:	08005ba1 	.word	0x08005ba1
 8005aec:	08005ba1 	.word	0x08005ba1
 8005af0:	08005ba1 	.word	0x08005ba1
 8005af4:	08005ba1 	.word	0x08005ba1
 8005af8:	08005b7d 	.word	0x08005b7d
 8005afc:	08005ba1 	.word	0x08005ba1
 8005b00:	08005ba1 	.word	0x08005ba1
 8005b04:	08005ba1 	.word	0x08005ba1
 8005b08:	08005ba1 	.word	0x08005ba1
 8005b0c:	08005ba1 	.word	0x08005ba1
 8005b10:	08005ba1 	.word	0x08005ba1
 8005b14:	08005ba1 	.word	0x08005ba1
 8005b18:	08005b8f 	.word	0x08005b8f
 8005b1c:	08005ba1 	.word	0x08005ba1
 8005b20:	08005ba1 	.word	0x08005ba1
 8005b24:	08005ba1 	.word	0x08005ba1
 8005b28:	08005ba1 	.word	0x08005ba1
 8005b2c:	08005ba1 	.word	0x08005ba1
 8005b30:	08005ba1 	.word	0x08005ba1
 8005b34:	08005ba1 	.word	0x08005ba1
 8005b38:	08005ba7 	.word	0x08005ba7
 8005b3c:	08005ba1 	.word	0x08005ba1
 8005b40:	08005ba1 	.word	0x08005ba1
 8005b44:	08005ba1 	.word	0x08005ba1
 8005b48:	08005ba1 	.word	0x08005ba1
 8005b4c:	08005ba1 	.word	0x08005ba1
 8005b50:	08005ba1 	.word	0x08005ba1
 8005b54:	08005ba1 	.word	0x08005ba1
 8005b58:	08005ba7 	.word	0x08005ba7
 8005b5c:	08005ba1 	.word	0x08005ba1
 8005b60:	08005ba1 	.word	0x08005ba1
 8005b64:	08005ba1 	.word	0x08005ba1
 8005b68:	08005ba1 	.word	0x08005ba1
 8005b6c:	08005ba1 	.word	0x08005ba1
 8005b70:	08005ba1 	.word	0x08005ba1
 8005b74:	08005ba1 	.word	0x08005ba1
 8005b78:	08005ba7 	.word	0x08005ba7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	3304      	adds	r3, #4
 8005b80:	2101      	movs	r1, #1
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 fdf4 	bl	8006770 <RCCEx_PLL2_Config>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005b8c:	e00c      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	3324      	adds	r3, #36	; 0x24
 8005b92:	2101      	movs	r1, #1
 8005b94:	4618      	mov	r0, r3
 8005b96:	f000 fe9d 	bl	80068d4 <RCCEx_PLL3_Config>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005b9e:	e003      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ba4:	e000      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8005ba6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ba8:	7dfb      	ldrb	r3, [r7, #23]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d109      	bne.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005bae:	4b24      	ldr	r3, [pc, #144]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bba:	4921      	ldr	r1, [pc, #132]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	654b      	str	r3, [r1, #84]	; 0x54
 8005bc0:	e001      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc2:	7dfb      	ldrb	r3, [r7, #23]
 8005bc4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0302 	and.w	r3, r3, #2
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d03e      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bd6:	2b05      	cmp	r3, #5
 8005bd8:	d820      	bhi.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8005bda:	a201      	add	r2, pc, #4	; (adr r2, 8005be0 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8005bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be0:	08005c23 	.word	0x08005c23
 8005be4:	08005bf9 	.word	0x08005bf9
 8005be8:	08005c0b 	.word	0x08005c0b
 8005bec:	08005c23 	.word	0x08005c23
 8005bf0:	08005c23 	.word	0x08005c23
 8005bf4:	08005c23 	.word	0x08005c23
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	3304      	adds	r3, #4
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 fdb6 	bl	8006770 <RCCEx_PLL2_Config>
 8005c04:	4603      	mov	r3, r0
 8005c06:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005c08:	e00c      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	3324      	adds	r3, #36	; 0x24
 8005c0e:	2101      	movs	r1, #1
 8005c10:	4618      	mov	r0, r3
 8005c12:	f000 fe5f 	bl	80068d4 <RCCEx_PLL3_Config>
 8005c16:	4603      	mov	r3, r0
 8005c18:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005c1a:	e003      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	75fb      	strb	r3, [r7, #23]
      break;
 8005c20:	e000      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8005c22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c24:	7dfb      	ldrb	r3, [r7, #23]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d110      	bne.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005c2a:	4b05      	ldr	r3, [pc, #20]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c2e:	f023 0207 	bic.w	r2, r3, #7
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c36:	4902      	ldr	r1, [pc, #8]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	654b      	str	r3, [r1, #84]	; 0x54
 8005c3c:	e008      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8005c3e:	bf00      	nop
 8005c40:	58024400 	.word	0x58024400
 8005c44:	58024800 	.word	0x58024800
 8005c48:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c4c:	7dfb      	ldrb	r3, [r7, #23]
 8005c4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0304 	and.w	r3, r3, #4
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d039      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c62:	2b05      	cmp	r3, #5
 8005c64:	d820      	bhi.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8005c66:	a201      	add	r2, pc, #4	; (adr r2, 8005c6c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8005c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6c:	08005caf 	.word	0x08005caf
 8005c70:	08005c85 	.word	0x08005c85
 8005c74:	08005c97 	.word	0x08005c97
 8005c78:	08005caf 	.word	0x08005caf
 8005c7c:	08005caf 	.word	0x08005caf
 8005c80:	08005caf 	.word	0x08005caf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	3304      	adds	r3, #4
 8005c88:	2101      	movs	r1, #1
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 fd70 	bl	8006770 <RCCEx_PLL2_Config>
 8005c90:	4603      	mov	r3, r0
 8005c92:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005c94:	e00c      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	3324      	adds	r3, #36	; 0x24
 8005c9a:	2101      	movs	r1, #1
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 fe19 	bl	80068d4 <RCCEx_PLL3_Config>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005ca6:	e003      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	75fb      	strb	r3, [r7, #23]
      break;
 8005cac:	e000      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8005cae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cb0:	7dfb      	ldrb	r3, [r7, #23]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10a      	bne.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005cb6:	4bb7      	ldr	r3, [pc, #732]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cba:	f023 0207 	bic.w	r2, r3, #7
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc4:	49b3      	ldr	r1, [pc, #716]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	658b      	str	r3, [r1, #88]	; 0x58
 8005cca:	e001      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ccc:	7dfb      	ldrb	r3, [r7, #23]
 8005cce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0320 	and.w	r3, r3, #32
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d04b      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ce2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ce6:	d02e      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8005ce8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005cec:	d828      	bhi.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cf2:	d02a      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cf8:	d822      	bhi.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005cfa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005cfe:	d026      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005d00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d04:	d81c      	bhi.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005d06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d0a:	d010      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8005d0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d10:	d816      	bhi.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d01d      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005d16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d1a:	d111      	bne.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	3304      	adds	r3, #4
 8005d20:	2100      	movs	r1, #0
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 fd24 	bl	8006770 <RCCEx_PLL2_Config>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005d2c:	e012      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	3324      	adds	r3, #36	; 0x24
 8005d32:	2102      	movs	r1, #2
 8005d34:	4618      	mov	r0, r3
 8005d36:	f000 fdcd 	bl	80068d4 <RCCEx_PLL3_Config>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005d3e:	e009      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	75fb      	strb	r3, [r7, #23]
      break;
 8005d44:	e006      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005d46:	bf00      	nop
 8005d48:	e004      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005d4a:	bf00      	nop
 8005d4c:	e002      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005d4e:	bf00      	nop
 8005d50:	e000      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005d52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d54:	7dfb      	ldrb	r3, [r7, #23]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10a      	bne.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d5a:	4b8e      	ldr	r3, [pc, #568]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d5e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d68:	498a      	ldr	r1, [pc, #552]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	654b      	str	r3, [r1, #84]	; 0x54
 8005d6e:	e001      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d70:	7dfb      	ldrb	r3, [r7, #23]
 8005d72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d04b      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d86:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005d8a:	d02e      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8005d8c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005d90:	d828      	bhi.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d96:	d02a      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d9c:	d822      	bhi.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005d9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005da2:	d026      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005da4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005da8:	d81c      	bhi.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005daa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dae:	d010      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8005db0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005db4:	d816      	bhi.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d01d      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dbe:	d111      	bne.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	3304      	adds	r3, #4
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f000 fcd2 	bl	8006770 <RCCEx_PLL2_Config>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005dd0:	e012      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	3324      	adds	r3, #36	; 0x24
 8005dd6:	2102      	movs	r1, #2
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f000 fd7b 	bl	80068d4 <RCCEx_PLL3_Config>
 8005dde:	4603      	mov	r3, r0
 8005de0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005de2:	e009      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	75fb      	strb	r3, [r7, #23]
      break;
 8005de8:	e006      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005dea:	bf00      	nop
 8005dec:	e004      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005dee:	bf00      	nop
 8005df0:	e002      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005df2:	bf00      	nop
 8005df4:	e000      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005df6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005df8:	7dfb      	ldrb	r3, [r7, #23]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10a      	bne.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005dfe:	4b65      	ldr	r3, [pc, #404]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e02:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e0c:	4961      	ldr	r1, [pc, #388]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	658b      	str	r3, [r1, #88]	; 0x58
 8005e12:	e001      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e14:	7dfb      	ldrb	r3, [r7, #23]
 8005e16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d04b      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e2a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005e2e:	d02e      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8005e30:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005e34:	d828      	bhi.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005e36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e3a:	d02a      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8005e3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e40:	d822      	bhi.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005e42:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005e46:	d026      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005e48:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005e4c:	d81c      	bhi.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005e4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e52:	d010      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005e54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e58:	d816      	bhi.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d01d      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005e5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e62:	d111      	bne.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	3304      	adds	r3, #4
 8005e68:	2100      	movs	r1, #0
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 fc80 	bl	8006770 <RCCEx_PLL2_Config>
 8005e70:	4603      	mov	r3, r0
 8005e72:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005e74:	e012      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	3324      	adds	r3, #36	; 0x24
 8005e7a:	2102      	movs	r1, #2
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 fd29 	bl	80068d4 <RCCEx_PLL3_Config>
 8005e82:	4603      	mov	r3, r0
 8005e84:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005e86:	e009      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e8c:	e006      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005e8e:	bf00      	nop
 8005e90:	e004      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005e92:	bf00      	nop
 8005e94:	e002      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005e96:	bf00      	nop
 8005e98:	e000      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005e9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e9c:	7dfb      	ldrb	r3, [r7, #23]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10a      	bne.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005ea2:	4b3c      	ldr	r3, [pc, #240]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ea6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005eb0:	4938      	ldr	r1, [pc, #224]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	658b      	str	r3, [r1, #88]	; 0x58
 8005eb6:	e001      	b.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eb8:	7dfb      	ldrb	r3, [r7, #23]
 8005eba:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0308 	and.w	r3, r3, #8
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d01a      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ed2:	d10a      	bne.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	3324      	adds	r3, #36	; 0x24
 8005ed8:	2102      	movs	r1, #2
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 fcfa 	bl	80068d4 <RCCEx_PLL3_Config>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005eea:	4b2a      	ldr	r3, [pc, #168]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ef8:	4926      	ldr	r1, [pc, #152]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0310 	and.w	r3, r3, #16
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d01a      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f14:	d10a      	bne.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	3324      	adds	r3, #36	; 0x24
 8005f1a:	2102      	movs	r1, #2
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f000 fcd9 	bl	80068d4 <RCCEx_PLL3_Config>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d001      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f2c:	4b19      	ldr	r3, [pc, #100]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f3a:	4916      	ldr	r1, [pc, #88]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d036      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005f52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f56:	d01f      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005f58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f5c:	d817      	bhi.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d003      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8005f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f66:	d009      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8005f68:	e011      	b.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	3304      	adds	r3, #4
 8005f6e:	2100      	movs	r1, #0
 8005f70:	4618      	mov	r0, r3
 8005f72:	f000 fbfd 	bl	8006770 <RCCEx_PLL2_Config>
 8005f76:	4603      	mov	r3, r0
 8005f78:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005f7a:	e00e      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	3324      	adds	r3, #36	; 0x24
 8005f80:	2102      	movs	r1, #2
 8005f82:	4618      	mov	r0, r3
 8005f84:	f000 fca6 	bl	80068d4 <RCCEx_PLL3_Config>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005f8c:	e005      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	75fb      	strb	r3, [r7, #23]
      break;
 8005f92:	e002      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8005f94:	58024400 	.word	0x58024400
      break;
 8005f98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f9a:	7dfb      	ldrb	r3, [r7, #23]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10a      	bne.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fa0:	4b93      	ldr	r3, [pc, #588]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fa4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005fae:	4990      	ldr	r1, [pc, #576]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	658b      	str	r3, [r1, #88]	; 0x58
 8005fb4:	e001      	b.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb6:	7dfb      	ldrb	r3, [r7, #23]
 8005fb8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d033      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fcc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005fd0:	d01c      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8005fd2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005fd6:	d816      	bhi.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8005fd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fdc:	d003      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8005fde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fe2:	d007      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8005fe4:	e00f      	b.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fe6:	4b82      	ldr	r3, [pc, #520]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fea:	4a81      	ldr	r2, [pc, #516]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ff0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005ff2:	e00c      	b.n	800600e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	3324      	adds	r3, #36	; 0x24
 8005ff8:	2101      	movs	r1, #1
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f000 fc6a 	bl	80068d4 <RCCEx_PLL3_Config>
 8006000:	4603      	mov	r3, r0
 8006002:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006004:	e003      	b.n	800600e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	75fb      	strb	r3, [r7, #23]
      break;
 800600a:	e000      	b.n	800600e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800600c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800600e:	7dfb      	ldrb	r3, [r7, #23]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10a      	bne.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006014:	4b76      	ldr	r3, [pc, #472]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006018:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006022:	4973      	ldr	r1, [pc, #460]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006024:	4313      	orrs	r3, r2
 8006026:	654b      	str	r3, [r1, #84]	; 0x54
 8006028:	e001      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800602a:	7dfb      	ldrb	r3, [r7, #23]
 800602c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d029      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800603e:	2b00      	cmp	r3, #0
 8006040:	d003      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006046:	d007      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006048:	e00f      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800604a:	4b69      	ldr	r3, [pc, #420]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800604c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604e:	4a68      	ldr	r2, [pc, #416]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006054:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006056:	e00b      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	3304      	adds	r3, #4
 800605c:	2102      	movs	r1, #2
 800605e:	4618      	mov	r0, r3
 8006060:	f000 fb86 	bl	8006770 <RCCEx_PLL2_Config>
 8006064:	4603      	mov	r3, r0
 8006066:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006068:	e002      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	75fb      	strb	r3, [r7, #23]
      break;
 800606e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006070:	7dfb      	ldrb	r3, [r7, #23]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d109      	bne.n	800608a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006076:	4b5e      	ldr	r3, [pc, #376]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800607a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006082:	495b      	ldr	r1, [pc, #364]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006084:	4313      	orrs	r3, r2
 8006086:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006088:	e001      	b.n	800608e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800608a:	7dfb      	ldrb	r3, [r7, #23]
 800608c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00a      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	3324      	adds	r3, #36	; 0x24
 800609e:	2102      	movs	r1, #2
 80060a0:	4618      	mov	r0, r3
 80060a2:	f000 fc17 	bl	80068d4 <RCCEx_PLL3_Config>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d030      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060c4:	d017      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80060c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060ca:	d811      	bhi.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80060cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060d0:	d013      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80060d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060d6:	d80b      	bhi.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d010      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80060dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060e0:	d106      	bne.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060e2:	4b43      	ldr	r3, [pc, #268]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80060e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e6:	4a42      	ldr	r2, [pc, #264]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80060e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80060ee:	e007      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	75fb      	strb	r3, [r7, #23]
      break;
 80060f4:	e004      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80060f6:	bf00      	nop
 80060f8:	e002      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80060fa:	bf00      	nop
 80060fc:	e000      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80060fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006100:	7dfb      	ldrb	r3, [r7, #23]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d109      	bne.n	800611a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006106:	4b3a      	ldr	r3, [pc, #232]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800610a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006112:	4937      	ldr	r1, [pc, #220]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006114:	4313      	orrs	r3, r2
 8006116:	654b      	str	r3, [r1, #84]	; 0x54
 8006118:	e001      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800611a:	7dfb      	ldrb	r3, [r7, #23]
 800611c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d008      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800612a:	4b31      	ldr	r3, [pc, #196]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800612c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800612e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006136:	492e      	ldr	r1, [pc, #184]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006138:	4313      	orrs	r3, r2
 800613a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d009      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006148:	4b29      	ldr	r3, [pc, #164]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006156:	4926      	ldr	r1, [pc, #152]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006158:	4313      	orrs	r3, r2
 800615a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d008      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006168:	4b21      	ldr	r3, [pc, #132]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800616a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800616c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006174:	491e      	ldr	r1, [pc, #120]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006176:	4313      	orrs	r3, r2
 8006178:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00d      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006186:	4b1a      	ldr	r3, [pc, #104]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	4a19      	ldr	r2, [pc, #100]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800618c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006190:	6113      	str	r3, [r2, #16]
 8006192:	4b17      	ldr	r3, [pc, #92]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006194:	691a      	ldr	r2, [r3, #16]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800619c:	4914      	ldr	r1, [pc, #80]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800619e:	4313      	orrs	r3, r2
 80061a0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	da08      	bge.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80061aa:	4b11      	ldr	r3, [pc, #68]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80061ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061b6:	490e      	ldr	r1, [pc, #56]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80061b8:	4313      	orrs	r3, r2
 80061ba:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d009      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80061c8:	4b09      	ldr	r3, [pc, #36]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80061ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d6:	4906      	ldr	r1, [pc, #24]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80061d8:	4313      	orrs	r3, r2
 80061da:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80061dc:	7dbb      	ldrb	r3, [r7, #22]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d101      	bne.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80061e2:	2300      	movs	r3, #0
 80061e4:	e000      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3718      	adds	r7, #24
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	58024400 	.word	0x58024400

080061f4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80061f8:	f7ff f860 	bl	80052bc <HAL_RCC_GetHCLKFreq>
 80061fc:	4602      	mov	r2, r0
 80061fe:	4b06      	ldr	r3, [pc, #24]	; (8006218 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	091b      	lsrs	r3, r3, #4
 8006204:	f003 0307 	and.w	r3, r3, #7
 8006208:	4904      	ldr	r1, [pc, #16]	; (800621c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800620a:	5ccb      	ldrb	r3, [r1, r3]
 800620c:	f003 031f 	and.w	r3, r3, #31
 8006210:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006214:	4618      	mov	r0, r3
 8006216:	bd80      	pop	{r7, pc}
 8006218:	58024400 	.word	0x58024400
 800621c:	08009fe8 	.word	0x08009fe8

08006220 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006220:	b480      	push	{r7}
 8006222:	b089      	sub	sp, #36	; 0x24
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006228:	4ba1      	ldr	r3, [pc, #644]	; (80064b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800622a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622c:	f003 0303 	and.w	r3, r3, #3
 8006230:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006232:	4b9f      	ldr	r3, [pc, #636]	; (80064b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006236:	0b1b      	lsrs	r3, r3, #12
 8006238:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800623c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800623e:	4b9c      	ldr	r3, [pc, #624]	; (80064b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006242:	091b      	lsrs	r3, r3, #4
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800624a:	4b99      	ldr	r3, [pc, #612]	; (80064b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800624c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800624e:	08db      	lsrs	r3, r3, #3
 8006250:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	fb02 f303 	mul.w	r3, r2, r3
 800625a:	ee07 3a90 	vmov	s15, r3
 800625e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006262:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 8111 	beq.w	8006490 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	2b02      	cmp	r3, #2
 8006272:	f000 8083 	beq.w	800637c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	2b02      	cmp	r3, #2
 800627a:	f200 80a1 	bhi.w	80063c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d003      	beq.n	800628c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d056      	beq.n	8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800628a:	e099      	b.n	80063c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800628c:	4b88      	ldr	r3, [pc, #544]	; (80064b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0320 	and.w	r3, r3, #32
 8006294:	2b00      	cmp	r3, #0
 8006296:	d02d      	beq.n	80062f4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006298:	4b85      	ldr	r3, [pc, #532]	; (80064b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	08db      	lsrs	r3, r3, #3
 800629e:	f003 0303 	and.w	r3, r3, #3
 80062a2:	4a84      	ldr	r2, [pc, #528]	; (80064b4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80062a4:	fa22 f303 	lsr.w	r3, r2, r3
 80062a8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	ee07 3a90 	vmov	s15, r3
 80062b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	ee07 3a90 	vmov	s15, r3
 80062ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062c2:	4b7b      	ldr	r3, [pc, #492]	; (80064b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ca:	ee07 3a90 	vmov	s15, r3
 80062ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80062d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80064b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80062da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80062f2:	e087      	b.n	8006404 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	ee07 3a90 	vmov	s15, r3
 80062fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80064bc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006306:	4b6a      	ldr	r3, [pc, #424]	; (80064b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800630e:	ee07 3a90 	vmov	s15, r3
 8006312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006316:	ed97 6a03 	vldr	s12, [r7, #12]
 800631a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80064b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800631e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006326:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800632a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800632e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006332:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006336:	e065      	b.n	8006404 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	ee07 3a90 	vmov	s15, r3
 800633e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006342:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80064c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800634a:	4b59      	ldr	r3, [pc, #356]	; (80064b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800634c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006352:	ee07 3a90 	vmov	s15, r3
 8006356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800635a:	ed97 6a03 	vldr	s12, [r7, #12]
 800635e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80064b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800636a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800636e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006376:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800637a:	e043      	b.n	8006404 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	ee07 3a90 	vmov	s15, r3
 8006382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006386:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80064c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800638a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800638e:	4b48      	ldr	r3, [pc, #288]	; (80064b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006396:	ee07 3a90 	vmov	s15, r3
 800639a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800639e:	ed97 6a03 	vldr	s12, [r7, #12]
 80063a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80064b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80063a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063be:	e021      	b.n	8006404 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	ee07 3a90 	vmov	s15, r3
 80063c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80064c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80063ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063d2:	4b37      	ldr	r3, [pc, #220]	; (80064b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063da:	ee07 3a90 	vmov	s15, r3
 80063de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80063e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80064b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80063ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006402:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006404:	4b2a      	ldr	r3, [pc, #168]	; (80064b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006408:	0a5b      	lsrs	r3, r3, #9
 800640a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800640e:	ee07 3a90 	vmov	s15, r3
 8006412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006416:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800641a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800641e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006422:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006426:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800642a:	ee17 2a90 	vmov	r2, s15
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006432:	4b1f      	ldr	r3, [pc, #124]	; (80064b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006436:	0c1b      	lsrs	r3, r3, #16
 8006438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800643c:	ee07 3a90 	vmov	s15, r3
 8006440:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006444:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006448:	ee37 7a87 	vadd.f32	s14, s15, s14
 800644c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006454:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006458:	ee17 2a90 	vmov	r2, s15
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006460:	4b13      	ldr	r3, [pc, #76]	; (80064b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006464:	0e1b      	lsrs	r3, r3, #24
 8006466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800646a:	ee07 3a90 	vmov	s15, r3
 800646e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006472:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006476:	ee37 7a87 	vadd.f32	s14, s15, s14
 800647a:	edd7 6a07 	vldr	s13, [r7, #28]
 800647e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006482:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006486:	ee17 2a90 	vmov	r2, s15
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800648e:	e008      	b.n	80064a2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	609a      	str	r2, [r3, #8]
}
 80064a2:	bf00      	nop
 80064a4:	3724      	adds	r7, #36	; 0x24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	58024400 	.word	0x58024400
 80064b4:	03d09000 	.word	0x03d09000
 80064b8:	46000000 	.word	0x46000000
 80064bc:	4c742400 	.word	0x4c742400
 80064c0:	4a742400 	.word	0x4a742400
 80064c4:	4c371b00 	.word	0x4c371b00

080064c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b089      	sub	sp, #36	; 0x24
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80064d0:	4ba1      	ldr	r3, [pc, #644]	; (8006758 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d4:	f003 0303 	and.w	r3, r3, #3
 80064d8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80064da:	4b9f      	ldr	r3, [pc, #636]	; (8006758 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064de:	0d1b      	lsrs	r3, r3, #20
 80064e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064e4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80064e6:	4b9c      	ldr	r3, [pc, #624]	; (8006758 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ea:	0a1b      	lsrs	r3, r3, #8
 80064ec:	f003 0301 	and.w	r3, r3, #1
 80064f0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80064f2:	4b99      	ldr	r3, [pc, #612]	; (8006758 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f6:	08db      	lsrs	r3, r3, #3
 80064f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80064fc:	693a      	ldr	r2, [r7, #16]
 80064fe:	fb02 f303 	mul.w	r3, r2, r3
 8006502:	ee07 3a90 	vmov	s15, r3
 8006506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800650a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	2b00      	cmp	r3, #0
 8006512:	f000 8111 	beq.w	8006738 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	2b02      	cmp	r3, #2
 800651a:	f000 8083 	beq.w	8006624 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	2b02      	cmp	r3, #2
 8006522:	f200 80a1 	bhi.w	8006668 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d003      	beq.n	8006534 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d056      	beq.n	80065e0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006532:	e099      	b.n	8006668 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006534:	4b88      	ldr	r3, [pc, #544]	; (8006758 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0320 	and.w	r3, r3, #32
 800653c:	2b00      	cmp	r3, #0
 800653e:	d02d      	beq.n	800659c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006540:	4b85      	ldr	r3, [pc, #532]	; (8006758 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	08db      	lsrs	r3, r3, #3
 8006546:	f003 0303 	and.w	r3, r3, #3
 800654a:	4a84      	ldr	r2, [pc, #528]	; (800675c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800654c:	fa22 f303 	lsr.w	r3, r2, r3
 8006550:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	ee07 3a90 	vmov	s15, r3
 8006558:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	ee07 3a90 	vmov	s15, r3
 8006562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800656a:	4b7b      	ldr	r3, [pc, #492]	; (8006758 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800656c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006572:	ee07 3a90 	vmov	s15, r3
 8006576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800657a:	ed97 6a03 	vldr	s12, [r7, #12]
 800657e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006760 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800658a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800658e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006596:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800659a:	e087      	b.n	80066ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	ee07 3a90 	vmov	s15, r3
 80065a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006764 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80065aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065ae:	4b6a      	ldr	r3, [pc, #424]	; (8006758 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065b6:	ee07 3a90 	vmov	s15, r3
 80065ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065be:	ed97 6a03 	vldr	s12, [r7, #12]
 80065c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006760 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065de:	e065      	b.n	80066ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	ee07 3a90 	vmov	s15, r3
 80065e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006768 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80065ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065f2:	4b59      	ldr	r3, [pc, #356]	; (8006758 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065fa:	ee07 3a90 	vmov	s15, r3
 80065fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006602:	ed97 6a03 	vldr	s12, [r7, #12]
 8006606:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006760 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800660a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800660e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800661a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800661e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006622:	e043      	b.n	80066ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	ee07 3a90 	vmov	s15, r3
 800662a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800662e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800676c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006636:	4b48      	ldr	r3, [pc, #288]	; (8006758 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800663e:	ee07 3a90 	vmov	s15, r3
 8006642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006646:	ed97 6a03 	vldr	s12, [r7, #12]
 800664a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006760 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800664e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800665a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800665e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006662:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006666:	e021      	b.n	80066ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	ee07 3a90 	vmov	s15, r3
 800666e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006672:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006768 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800667a:	4b37      	ldr	r3, [pc, #220]	; (8006758 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800667c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006682:	ee07 3a90 	vmov	s15, r3
 8006686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800668a:	ed97 6a03 	vldr	s12, [r7, #12]
 800668e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006760 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800669a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800669e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066aa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80066ac:	4b2a      	ldr	r3, [pc, #168]	; (8006758 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b0:	0a5b      	lsrs	r3, r3, #9
 80066b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066b6:	ee07 3a90 	vmov	s15, r3
 80066ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80066ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066d2:	ee17 2a90 	vmov	r2, s15
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80066da:	4b1f      	ldr	r3, [pc, #124]	; (8006758 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066de:	0c1b      	lsrs	r3, r3, #16
 80066e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066e4:	ee07 3a90 	vmov	s15, r3
 80066e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80066f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006700:	ee17 2a90 	vmov	r2, s15
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006708:	4b13      	ldr	r3, [pc, #76]	; (8006758 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800670a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670c:	0e1b      	lsrs	r3, r3, #24
 800670e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006712:	ee07 3a90 	vmov	s15, r3
 8006716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800671a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800671e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006722:	edd7 6a07 	vldr	s13, [r7, #28]
 8006726:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800672a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800672e:	ee17 2a90 	vmov	r2, s15
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006736:	e008      	b.n	800674a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	609a      	str	r2, [r3, #8]
}
 800674a:	bf00      	nop
 800674c:	3724      	adds	r7, #36	; 0x24
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	58024400 	.word	0x58024400
 800675c:	03d09000 	.word	0x03d09000
 8006760:	46000000 	.word	0x46000000
 8006764:	4c742400 	.word	0x4c742400
 8006768:	4a742400 	.word	0x4a742400
 800676c:	4c371b00 	.word	0x4c371b00

08006770 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800677e:	4b53      	ldr	r3, [pc, #332]	; (80068cc <RCCEx_PLL2_Config+0x15c>)
 8006780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006782:	f003 0303 	and.w	r3, r3, #3
 8006786:	2b03      	cmp	r3, #3
 8006788:	d101      	bne.n	800678e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e099      	b.n	80068c2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800678e:	4b4f      	ldr	r3, [pc, #316]	; (80068cc <RCCEx_PLL2_Config+0x15c>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a4e      	ldr	r2, [pc, #312]	; (80068cc <RCCEx_PLL2_Config+0x15c>)
 8006794:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006798:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800679a:	f7fb f8cb 	bl	8001934 <HAL_GetTick>
 800679e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80067a0:	e008      	b.n	80067b4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80067a2:	f7fb f8c7 	bl	8001934 <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d901      	bls.n	80067b4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e086      	b.n	80068c2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80067b4:	4b45      	ldr	r3, [pc, #276]	; (80068cc <RCCEx_PLL2_Config+0x15c>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1f0      	bne.n	80067a2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80067c0:	4b42      	ldr	r3, [pc, #264]	; (80068cc <RCCEx_PLL2_Config+0x15c>)
 80067c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	031b      	lsls	r3, r3, #12
 80067ce:	493f      	ldr	r1, [pc, #252]	; (80068cc <RCCEx_PLL2_Config+0x15c>)
 80067d0:	4313      	orrs	r3, r2
 80067d2:	628b      	str	r3, [r1, #40]	; 0x28
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	3b01      	subs	r3, #1
 80067da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	3b01      	subs	r3, #1
 80067e4:	025b      	lsls	r3, r3, #9
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	431a      	orrs	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	3b01      	subs	r3, #1
 80067f0:	041b      	lsls	r3, r3, #16
 80067f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80067f6:	431a      	orrs	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	3b01      	subs	r3, #1
 80067fe:	061b      	lsls	r3, r3, #24
 8006800:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006804:	4931      	ldr	r1, [pc, #196]	; (80068cc <RCCEx_PLL2_Config+0x15c>)
 8006806:	4313      	orrs	r3, r2
 8006808:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800680a:	4b30      	ldr	r3, [pc, #192]	; (80068cc <RCCEx_PLL2_Config+0x15c>)
 800680c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	492d      	ldr	r1, [pc, #180]	; (80068cc <RCCEx_PLL2_Config+0x15c>)
 8006818:	4313      	orrs	r3, r2
 800681a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800681c:	4b2b      	ldr	r3, [pc, #172]	; (80068cc <RCCEx_PLL2_Config+0x15c>)
 800681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006820:	f023 0220 	bic.w	r2, r3, #32
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	4928      	ldr	r1, [pc, #160]	; (80068cc <RCCEx_PLL2_Config+0x15c>)
 800682a:	4313      	orrs	r3, r2
 800682c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800682e:	4b27      	ldr	r3, [pc, #156]	; (80068cc <RCCEx_PLL2_Config+0x15c>)
 8006830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006832:	4a26      	ldr	r2, [pc, #152]	; (80068cc <RCCEx_PLL2_Config+0x15c>)
 8006834:	f023 0310 	bic.w	r3, r3, #16
 8006838:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800683a:	4b24      	ldr	r3, [pc, #144]	; (80068cc <RCCEx_PLL2_Config+0x15c>)
 800683c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800683e:	4b24      	ldr	r3, [pc, #144]	; (80068d0 <RCCEx_PLL2_Config+0x160>)
 8006840:	4013      	ands	r3, r2
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	69d2      	ldr	r2, [r2, #28]
 8006846:	00d2      	lsls	r2, r2, #3
 8006848:	4920      	ldr	r1, [pc, #128]	; (80068cc <RCCEx_PLL2_Config+0x15c>)
 800684a:	4313      	orrs	r3, r2
 800684c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800684e:	4b1f      	ldr	r3, [pc, #124]	; (80068cc <RCCEx_PLL2_Config+0x15c>)
 8006850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006852:	4a1e      	ldr	r2, [pc, #120]	; (80068cc <RCCEx_PLL2_Config+0x15c>)
 8006854:	f043 0310 	orr.w	r3, r3, #16
 8006858:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d106      	bne.n	800686e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006860:	4b1a      	ldr	r3, [pc, #104]	; (80068cc <RCCEx_PLL2_Config+0x15c>)
 8006862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006864:	4a19      	ldr	r2, [pc, #100]	; (80068cc <RCCEx_PLL2_Config+0x15c>)
 8006866:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800686a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800686c:	e00f      	b.n	800688e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d106      	bne.n	8006882 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006874:	4b15      	ldr	r3, [pc, #84]	; (80068cc <RCCEx_PLL2_Config+0x15c>)
 8006876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006878:	4a14      	ldr	r2, [pc, #80]	; (80068cc <RCCEx_PLL2_Config+0x15c>)
 800687a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800687e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006880:	e005      	b.n	800688e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006882:	4b12      	ldr	r3, [pc, #72]	; (80068cc <RCCEx_PLL2_Config+0x15c>)
 8006884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006886:	4a11      	ldr	r2, [pc, #68]	; (80068cc <RCCEx_PLL2_Config+0x15c>)
 8006888:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800688c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800688e:	4b0f      	ldr	r3, [pc, #60]	; (80068cc <RCCEx_PLL2_Config+0x15c>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a0e      	ldr	r2, [pc, #56]	; (80068cc <RCCEx_PLL2_Config+0x15c>)
 8006894:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006898:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800689a:	f7fb f84b 	bl	8001934 <HAL_GetTick>
 800689e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80068a0:	e008      	b.n	80068b4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80068a2:	f7fb f847 	bl	8001934 <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d901      	bls.n	80068b4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e006      	b.n	80068c2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80068b4:	4b05      	ldr	r3, [pc, #20]	; (80068cc <RCCEx_PLL2_Config+0x15c>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d0f0      	beq.n	80068a2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80068c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	58024400 	.word	0x58024400
 80068d0:	ffff0007 	.word	0xffff0007

080068d4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068de:	2300      	movs	r3, #0
 80068e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80068e2:	4b53      	ldr	r3, [pc, #332]	; (8006a30 <RCCEx_PLL3_Config+0x15c>)
 80068e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e6:	f003 0303 	and.w	r3, r3, #3
 80068ea:	2b03      	cmp	r3, #3
 80068ec:	d101      	bne.n	80068f2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e099      	b.n	8006a26 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80068f2:	4b4f      	ldr	r3, [pc, #316]	; (8006a30 <RCCEx_PLL3_Config+0x15c>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a4e      	ldr	r2, [pc, #312]	; (8006a30 <RCCEx_PLL3_Config+0x15c>)
 80068f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068fe:	f7fb f819 	bl	8001934 <HAL_GetTick>
 8006902:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006904:	e008      	b.n	8006918 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006906:	f7fb f815 	bl	8001934 <HAL_GetTick>
 800690a:	4602      	mov	r2, r0
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	2b02      	cmp	r3, #2
 8006912:	d901      	bls.n	8006918 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e086      	b.n	8006a26 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006918:	4b45      	ldr	r3, [pc, #276]	; (8006a30 <RCCEx_PLL3_Config+0x15c>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1f0      	bne.n	8006906 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006924:	4b42      	ldr	r3, [pc, #264]	; (8006a30 <RCCEx_PLL3_Config+0x15c>)
 8006926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006928:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	051b      	lsls	r3, r3, #20
 8006932:	493f      	ldr	r1, [pc, #252]	; (8006a30 <RCCEx_PLL3_Config+0x15c>)
 8006934:	4313      	orrs	r3, r2
 8006936:	628b      	str	r3, [r1, #40]	; 0x28
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	3b01      	subs	r3, #1
 800693e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	3b01      	subs	r3, #1
 8006948:	025b      	lsls	r3, r3, #9
 800694a:	b29b      	uxth	r3, r3
 800694c:	431a      	orrs	r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	3b01      	subs	r3, #1
 8006954:	041b      	lsls	r3, r3, #16
 8006956:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800695a:	431a      	orrs	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	3b01      	subs	r3, #1
 8006962:	061b      	lsls	r3, r3, #24
 8006964:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006968:	4931      	ldr	r1, [pc, #196]	; (8006a30 <RCCEx_PLL3_Config+0x15c>)
 800696a:	4313      	orrs	r3, r2
 800696c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800696e:	4b30      	ldr	r3, [pc, #192]	; (8006a30 <RCCEx_PLL3_Config+0x15c>)
 8006970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006972:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	492d      	ldr	r1, [pc, #180]	; (8006a30 <RCCEx_PLL3_Config+0x15c>)
 800697c:	4313      	orrs	r3, r2
 800697e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006980:	4b2b      	ldr	r3, [pc, #172]	; (8006a30 <RCCEx_PLL3_Config+0x15c>)
 8006982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006984:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	4928      	ldr	r1, [pc, #160]	; (8006a30 <RCCEx_PLL3_Config+0x15c>)
 800698e:	4313      	orrs	r3, r2
 8006990:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006992:	4b27      	ldr	r3, [pc, #156]	; (8006a30 <RCCEx_PLL3_Config+0x15c>)
 8006994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006996:	4a26      	ldr	r2, [pc, #152]	; (8006a30 <RCCEx_PLL3_Config+0x15c>)
 8006998:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800699c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800699e:	4b24      	ldr	r3, [pc, #144]	; (8006a30 <RCCEx_PLL3_Config+0x15c>)
 80069a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069a2:	4b24      	ldr	r3, [pc, #144]	; (8006a34 <RCCEx_PLL3_Config+0x160>)
 80069a4:	4013      	ands	r3, r2
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	69d2      	ldr	r2, [r2, #28]
 80069aa:	00d2      	lsls	r2, r2, #3
 80069ac:	4920      	ldr	r1, [pc, #128]	; (8006a30 <RCCEx_PLL3_Config+0x15c>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80069b2:	4b1f      	ldr	r3, [pc, #124]	; (8006a30 <RCCEx_PLL3_Config+0x15c>)
 80069b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b6:	4a1e      	ldr	r2, [pc, #120]	; (8006a30 <RCCEx_PLL3_Config+0x15c>)
 80069b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d106      	bne.n	80069d2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80069c4:	4b1a      	ldr	r3, [pc, #104]	; (8006a30 <RCCEx_PLL3_Config+0x15c>)
 80069c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c8:	4a19      	ldr	r2, [pc, #100]	; (8006a30 <RCCEx_PLL3_Config+0x15c>)
 80069ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80069ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80069d0:	e00f      	b.n	80069f2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d106      	bne.n	80069e6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80069d8:	4b15      	ldr	r3, [pc, #84]	; (8006a30 <RCCEx_PLL3_Config+0x15c>)
 80069da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069dc:	4a14      	ldr	r2, [pc, #80]	; (8006a30 <RCCEx_PLL3_Config+0x15c>)
 80069de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80069e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80069e4:	e005      	b.n	80069f2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80069e6:	4b12      	ldr	r3, [pc, #72]	; (8006a30 <RCCEx_PLL3_Config+0x15c>)
 80069e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ea:	4a11      	ldr	r2, [pc, #68]	; (8006a30 <RCCEx_PLL3_Config+0x15c>)
 80069ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80069f2:	4b0f      	ldr	r3, [pc, #60]	; (8006a30 <RCCEx_PLL3_Config+0x15c>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a0e      	ldr	r2, [pc, #56]	; (8006a30 <RCCEx_PLL3_Config+0x15c>)
 80069f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069fe:	f7fa ff99 	bl	8001934 <HAL_GetTick>
 8006a02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a04:	e008      	b.n	8006a18 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006a06:	f7fa ff95 	bl	8001934 <HAL_GetTick>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d901      	bls.n	8006a18 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e006      	b.n	8006a26 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a18:	4b05      	ldr	r3, [pc, #20]	; (8006a30 <RCCEx_PLL3_Config+0x15c>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d0f0      	beq.n	8006a06 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	58024400 	.word	0x58024400
 8006a34:	ffff0007 	.word	0xffff0007

08006a38 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8006a40:	2300      	movs	r3, #0
 8006a42:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e0eb      	b.n	8006c26 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a75      	ldr	r2, [pc, #468]	; (8006c30 <HAL_SPI_Init+0x1f8>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d00f      	beq.n	8006a7e <HAL_SPI_Init+0x46>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a74      	ldr	r2, [pc, #464]	; (8006c34 <HAL_SPI_Init+0x1fc>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d00a      	beq.n	8006a7e <HAL_SPI_Init+0x46>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a72      	ldr	r2, [pc, #456]	; (8006c38 <HAL_SPI_Init+0x200>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d005      	beq.n	8006a7e <HAL_SPI_Init+0x46>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	2b0f      	cmp	r3, #15
 8006a78:	d901      	bls.n	8006a7e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e0d3      	b.n	8006c26 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fb9e 	bl	80071c0 <SPI_GetPacketSize>
 8006a84:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a69      	ldr	r2, [pc, #420]	; (8006c30 <HAL_SPI_Init+0x1f8>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d00c      	beq.n	8006aaa <HAL_SPI_Init+0x72>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a67      	ldr	r2, [pc, #412]	; (8006c34 <HAL_SPI_Init+0x1fc>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d007      	beq.n	8006aaa <HAL_SPI_Init+0x72>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a66      	ldr	r2, [pc, #408]	; (8006c38 <HAL_SPI_Init+0x200>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d002      	beq.n	8006aaa <HAL_SPI_Init+0x72>
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	2b08      	cmp	r3, #8
 8006aa8:	d811      	bhi.n	8006ace <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006aae:	4a60      	ldr	r2, [pc, #384]	; (8006c30 <HAL_SPI_Init+0x1f8>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d009      	beq.n	8006ac8 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a5e      	ldr	r2, [pc, #376]	; (8006c34 <HAL_SPI_Init+0x1fc>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d004      	beq.n	8006ac8 <HAL_SPI_Init+0x90>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a5d      	ldr	r2, [pc, #372]	; (8006c38 <HAL_SPI_Init+0x200>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d104      	bne.n	8006ad2 <HAL_SPI_Init+0x9a>
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	2b10      	cmp	r3, #16
 8006acc:	d901      	bls.n	8006ad2 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e0a9      	b.n	8006c26 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d106      	bne.n	8006aec <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7fa fa64 	bl	8000fb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2202      	movs	r2, #2
 8006af0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f022 0201 	bic.w	r2, r2, #1
 8006b02:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	699b      	ldr	r3, [r3, #24]
 8006b08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b0c:	d119      	bne.n	8006b42 <HAL_SPI_Init+0x10a>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b16:	d103      	bne.n	8006b20 <HAL_SPI_Init+0xe8>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d008      	beq.n	8006b32 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10c      	bne.n	8006b42 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b30:	d107      	bne.n	8006b42 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b40:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	69da      	ldr	r2, [r3, #28]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4a:	431a      	orrs	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	431a      	orrs	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b54:	ea42 0103 	orr.w	r1, r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	68da      	ldr	r2, [r3, #12]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	430a      	orrs	r2, r1
 8006b62:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6c:	431a      	orrs	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b72:	431a      	orrs	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	699b      	ldr	r3, [r3, #24]
 8006b78:	431a      	orrs	r2, r3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	431a      	orrs	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	695b      	ldr	r3, [r3, #20]
 8006b84:	431a      	orrs	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a1b      	ldr	r3, [r3, #32]
 8006b8a:	431a      	orrs	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	431a      	orrs	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b96:	431a      	orrs	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ba2:	ea42 0103 	orr.w	r1, r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d113      	bne.n	8006be2 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bcc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006be0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f022 0201 	bic.w	r2, r2, #1
 8006bf0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00a      	beq.n	8006c14 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	430a      	orrs	r2, r1
 8006c12:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	40013000 	.word	0x40013000
 8006c34:	40003800 	.word	0x40003800
 8006c38:	40003c00 	.word	0x40003c00

08006c3c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b08a      	sub	sp, #40	; 0x28
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8006c54:	6a3a      	ldr	r2, [r7, #32]
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	4013      	ands	r3, r2
 8006c5a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8006c64:	2300      	movs	r3, #0
 8006c66:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006c6e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	3330      	adds	r3, #48	; 0x30
 8006c76:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d113      	bne.n	8006caa <HAL_SPI_IRQHandler+0x6e>
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	f003 0320 	and.w	r3, r3, #32
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10e      	bne.n	8006caa <HAL_SPI_IRQHandler+0x6e>
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	f003 0304 	and.w	r3, r3, #4
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d009      	beq.n	8006caa <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	4798      	blx	r3
    hspi->RxISR(hspi);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	4798      	blx	r3
    handled = 1UL;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10f      	bne.n	8006cd4 <HAL_SPI_IRQHandler+0x98>
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	f003 0301 	and.w	r3, r3, #1
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00a      	beq.n	8006cd4 <HAL_SPI_IRQHandler+0x98>
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	f003 0304 	and.w	r3, r3, #4
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d105      	bne.n	8006cd4 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	4798      	blx	r3
    handled = 1UL;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	f003 0320 	and.w	r3, r3, #32
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10f      	bne.n	8006cfe <HAL_SPI_IRQHandler+0xc2>
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	f003 0302 	and.w	r3, r3, #2
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00a      	beq.n	8006cfe <HAL_SPI_IRQHandler+0xc2>
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	f003 0304 	and.w	r3, r3, #4
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d105      	bne.n	8006cfe <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	4798      	blx	r3
    handled = 1UL;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f040 816f 	bne.w	8006fe4 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	f003 0308 	and.w	r3, r3, #8
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f000 80a0 	beq.w	8006e52 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	699a      	ldr	r2, [r3, #24]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f042 0208 	orr.w	r2, r2, #8
 8006d20:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	699a      	ldr	r2, [r3, #24]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f042 0210 	orr.w	r2, r2, #16
 8006d30:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	699a      	ldr	r2, [r3, #24]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d40:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	691a      	ldr	r2, [r3, #16]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f022 0208 	bic.w	r2, r2, #8
 8006d50:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00f      	beq.n	8006d7c <HAL_SPI_IRQHandler+0x140>
 8006d5c:	7cfb      	ldrb	r3, [r7, #19]
 8006d5e:	2b04      	cmp	r3, #4
 8006d60:	d004      	beq.n	8006d6c <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d66:	69db      	ldr	r3, [r3, #28]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d007      	beq.n	8006d7c <HAL_SPI_IRQHandler+0x140>
 8006d6c:	7cfb      	ldrb	r3, [r7, #19]
 8006d6e:	2b03      	cmp	r3, #3
 8006d70:	d059      	beq.n	8006e26 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d76:	69db      	ldr	r3, [r3, #28]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d154      	bne.n	8006e26 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d13d      	bne.n	8006e06 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8006d8a:	e036      	b.n	8006dfa <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	2b0f      	cmp	r3, #15
 8006d92:	d90b      	bls.n	8006dac <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d9c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006d9e:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006da4:	1d1a      	adds	r2, r3, #4
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	665a      	str	r2, [r3, #100]	; 0x64
 8006daa:	e01d      	b.n	8006de8 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	2b07      	cmp	r3, #7
 8006db2:	d90b      	bls.n	8006dcc <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	8812      	ldrh	r2, [r2, #0]
 8006dbc:	b292      	uxth	r2, r2
 8006dbe:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dc4:	1c9a      	adds	r2, r3, #2
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	665a      	str	r2, [r3, #100]	; 0x64
 8006dca:	e00d      	b.n	8006de8 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dd8:	7812      	ldrb	r2, [r2, #0]
 8006dda:	b2d2      	uxtb	r2, r2
 8006ddc:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006de2:	1c5a      	adds	r2, r3, #1
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	3b01      	subs	r3, #1
 8006df2:	b29a      	uxth	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1c2      	bne.n	8006d8c <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f93a 	bl	8007080 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d003      	beq.n	8006e26 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f90a 	bl	8007038 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8006e24:	e0e3      	b.n	8006fee <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8006e26:	7cfb      	ldrb	r3, [r7, #19]
 8006e28:	2b05      	cmp	r3, #5
 8006e2a:	d103      	bne.n	8006e34 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f8f9 	bl	8007024 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 8006e32:	e0d9      	b.n	8006fe8 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8006e34:	7cfb      	ldrb	r3, [r7, #19]
 8006e36:	2b04      	cmp	r3, #4
 8006e38:	d103      	bne.n	8006e42 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 f8e8 	bl	8007010 <HAL_SPI_RxCpltCallback>
    return;
 8006e40:	e0d2      	b.n	8006fe8 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8006e42:	7cfb      	ldrb	r3, [r7, #19]
 8006e44:	2b03      	cmp	r3, #3
 8006e46:	f040 80cf 	bne.w	8006fe8 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f8d6 	bl	8006ffc <HAL_SPI_TxCpltCallback>
    return;
 8006e50:	e0ca      	b.n	8006fe8 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d00d      	beq.n	8006e78 <HAL_SPI_IRQHandler+0x23c>
 8006e5c:	6a3b      	ldr	r3, [r7, #32]
 8006e5e:	f003 0308 	and.w	r3, r3, #8
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d008      	beq.n	8006e78 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	699a      	ldr	r2, [r3, #24]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e74:	619a      	str	r2, [r3, #24]

    return;
 8006e76:	e0ba      	b.n	8006fee <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f000 80b5 	beq.w	8006fee <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00f      	beq.n	8006eae <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e94:	f043 0204 	orr.w	r2, r3, #4
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	699a      	ldr	r2, [r3, #24]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006eac:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00f      	beq.n	8006ed8 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ebe:	f043 0201 	orr.w	r2, r3, #1
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	699a      	ldr	r2, [r3, #24]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ed6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00f      	beq.n	8006f02 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ee8:	f043 0208 	orr.w	r2, r3, #8
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	699a      	ldr	r2, [r3, #24]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f00:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	f003 0320 	and.w	r3, r3, #32
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d00f      	beq.n	8006f2c <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f12:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	699a      	ldr	r2, [r3, #24]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f042 0220 	orr.w	r2, r2, #32
 8006f2a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d05a      	beq.n	8006fec <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f022 0201 	bic.w	r2, r2, #1
 8006f44:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	6919      	ldr	r1, [r3, #16]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	4b28      	ldr	r3, [pc, #160]	; (8006ff4 <HAL_SPI_IRQHandler+0x3b8>)
 8006f52:	400b      	ands	r3, r1
 8006f54:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006f5c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f60:	d138      	bne.n	8006fd4 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	689a      	ldr	r2, [r3, #8]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006f70:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d013      	beq.n	8006fa2 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f7e:	4a1e      	ldr	r2, [pc, #120]	; (8006ff8 <HAL_SPI_IRQHandler+0x3bc>)
 8006f80:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7fb fc76 	bl	8002878 <HAL_DMA_Abort_IT>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d007      	beq.n	8006fa2 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f98:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d020      	beq.n	8006fec <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fae:	4a12      	ldr	r2, [pc, #72]	; (8006ff8 <HAL_SPI_IRQHandler+0x3bc>)
 8006fb0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7fb fc5e 	bl	8002878 <HAL_DMA_Abort_IT>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d014      	beq.n	8006fec <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fc8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006fd2:	e00b      	b.n	8006fec <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 f82b 	bl	8007038 <HAL_SPI_ErrorCallback>
    return;
 8006fe2:	e003      	b.n	8006fec <HAL_SPI_IRQHandler+0x3b0>
    return;
 8006fe4:	bf00      	nop
 8006fe6:	e002      	b.n	8006fee <HAL_SPI_IRQHandler+0x3b2>
    return;
 8006fe8:	bf00      	nop
 8006fea:	e000      	b.n	8006fee <HAL_SPI_IRQHandler+0x3b2>
    return;
 8006fec:	bf00      	nop
  }
}
 8006fee:	3728      	adds	r7, #40	; 0x28
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	fffffc94 	.word	0xfffffc94
 8006ff8:	0800704d 	.word	0x0800704d

08006ffc <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007004:	bf00      	nop
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007058:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2200      	movs	r2, #0
 800705e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2201      	movs	r2, #1
 800706e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f7ff ffe0 	bl	8007038 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007078:	bf00      	nop
 800707a:	3710      	adds	r7, #16
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	699a      	ldr	r2, [r3, #24]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f042 0208 	orr.w	r2, r2, #8
 800709e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	699a      	ldr	r2, [r3, #24]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f042 0210 	orr.w	r2, r2, #16
 80070ae:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f022 0201 	bic.w	r2, r2, #1
 80070be:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6919      	ldr	r1, [r3, #16]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	4b3c      	ldr	r3, [pc, #240]	; (80071bc <SPI_CloseTransfer+0x13c>)
 80070cc:	400b      	ands	r3, r1
 80070ce:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	689a      	ldr	r2, [r3, #8]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80070de:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	2b04      	cmp	r3, #4
 80070ea:	d014      	beq.n	8007116 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f003 0320 	and.w	r3, r3, #32
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00f      	beq.n	8007116 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	699a      	ldr	r2, [r3, #24]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f042 0220 	orr.w	r2, r2, #32
 8007114:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b03      	cmp	r3, #3
 8007120:	d014      	beq.n	800714c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00f      	beq.n	800714c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007132:	f043 0204 	orr.w	r2, r3, #4
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	699a      	ldr	r2, [r3, #24]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800714a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00f      	beq.n	8007176 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800715c:	f043 0201 	orr.w	r2, r3, #1
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	699a      	ldr	r2, [r3, #24]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007174:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00f      	beq.n	80071a0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007186:	f043 0208 	orr.w	r2, r3, #8
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	699a      	ldr	r2, [r3, #24]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800719e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80071b0:	bf00      	nop
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	fffffc90 	.word	0xfffffc90

080071c0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071cc:	095b      	lsrs	r3, r3, #5
 80071ce:	3301      	adds	r3, #1
 80071d0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	3301      	adds	r3, #1
 80071d8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	3307      	adds	r3, #7
 80071de:	08db      	lsrs	r3, r3, #3
 80071e0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	fb02 f303 	mul.w	r3, r2, r3
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3714      	adds	r7, #20
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b082      	sub	sp, #8
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d101      	bne.n	8007208 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	e049      	b.n	800729c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800720e:	b2db      	uxtb	r3, r3
 8007210:	2b00      	cmp	r3, #0
 8007212:	d106      	bne.n	8007222 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f7f9 ff5d 	bl	80010dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2202      	movs	r2, #2
 8007226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	3304      	adds	r3, #4
 8007232:	4619      	mov	r1, r3
 8007234:	4610      	mov	r0, r2
 8007236:	f000 fdf1 	bl	8007e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2201      	movs	r2, #1
 800725e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2201      	movs	r2, #1
 8007276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3708      	adds	r7, #8
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d001      	beq.n	80072bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	e04f      	b.n	800735c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2202      	movs	r2, #2
 80072c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68da      	ldr	r2, [r3, #12]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f042 0201 	orr.w	r2, r2, #1
 80072d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a23      	ldr	r2, [pc, #140]	; (8007368 <HAL_TIM_Base_Start_IT+0xc4>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d01d      	beq.n	800731a <HAL_TIM_Base_Start_IT+0x76>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072e6:	d018      	beq.n	800731a <HAL_TIM_Base_Start_IT+0x76>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a1f      	ldr	r2, [pc, #124]	; (800736c <HAL_TIM_Base_Start_IT+0xc8>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d013      	beq.n	800731a <HAL_TIM_Base_Start_IT+0x76>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a1e      	ldr	r2, [pc, #120]	; (8007370 <HAL_TIM_Base_Start_IT+0xcc>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d00e      	beq.n	800731a <HAL_TIM_Base_Start_IT+0x76>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a1c      	ldr	r2, [pc, #112]	; (8007374 <HAL_TIM_Base_Start_IT+0xd0>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d009      	beq.n	800731a <HAL_TIM_Base_Start_IT+0x76>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a1b      	ldr	r2, [pc, #108]	; (8007378 <HAL_TIM_Base_Start_IT+0xd4>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d004      	beq.n	800731a <HAL_TIM_Base_Start_IT+0x76>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a19      	ldr	r2, [pc, #100]	; (800737c <HAL_TIM_Base_Start_IT+0xd8>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d115      	bne.n	8007346 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	689a      	ldr	r2, [r3, #8]
 8007320:	4b17      	ldr	r3, [pc, #92]	; (8007380 <HAL_TIM_Base_Start_IT+0xdc>)
 8007322:	4013      	ands	r3, r2
 8007324:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2b06      	cmp	r3, #6
 800732a:	d015      	beq.n	8007358 <HAL_TIM_Base_Start_IT+0xb4>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007332:	d011      	beq.n	8007358 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f042 0201 	orr.w	r2, r2, #1
 8007342:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007344:	e008      	b.n	8007358 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f042 0201 	orr.w	r2, r2, #1
 8007354:	601a      	str	r2, [r3, #0]
 8007356:	e000      	b.n	800735a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007358:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3714      	adds	r7, #20
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr
 8007368:	40010000 	.word	0x40010000
 800736c:	40000400 	.word	0x40000400
 8007370:	40000800 	.word	0x40000800
 8007374:	40000c00 	.word	0x40000c00
 8007378:	40010400 	.word	0x40010400
 800737c:	40001800 	.word	0x40001800
 8007380:	00010007 	.word	0x00010007

08007384 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d101      	bne.n	8007396 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e049      	b.n	800742a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d106      	bne.n	80073b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f841 	bl	8007432 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2202      	movs	r2, #2
 80073b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	3304      	adds	r3, #4
 80073c0:	4619      	mov	r1, r3
 80073c2:	4610      	mov	r0, r2
 80073c4:	f000 fd2a 	bl	8007e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3708      	adds	r7, #8
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007432:	b480      	push	{r7}
 8007434:	b083      	sub	sp, #12
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800743a:	bf00      	nop
 800743c:	370c      	adds	r7, #12
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
	...

08007448 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d109      	bne.n	800746c <HAL_TIM_PWM_Start+0x24>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b01      	cmp	r3, #1
 8007462:	bf14      	ite	ne
 8007464:	2301      	movne	r3, #1
 8007466:	2300      	moveq	r3, #0
 8007468:	b2db      	uxtb	r3, r3
 800746a:	e03c      	b.n	80074e6 <HAL_TIM_PWM_Start+0x9e>
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	2b04      	cmp	r3, #4
 8007470:	d109      	bne.n	8007486 <HAL_TIM_PWM_Start+0x3e>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007478:	b2db      	uxtb	r3, r3
 800747a:	2b01      	cmp	r3, #1
 800747c:	bf14      	ite	ne
 800747e:	2301      	movne	r3, #1
 8007480:	2300      	moveq	r3, #0
 8007482:	b2db      	uxtb	r3, r3
 8007484:	e02f      	b.n	80074e6 <HAL_TIM_PWM_Start+0x9e>
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	2b08      	cmp	r3, #8
 800748a:	d109      	bne.n	80074a0 <HAL_TIM_PWM_Start+0x58>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007492:	b2db      	uxtb	r3, r3
 8007494:	2b01      	cmp	r3, #1
 8007496:	bf14      	ite	ne
 8007498:	2301      	movne	r3, #1
 800749a:	2300      	moveq	r3, #0
 800749c:	b2db      	uxtb	r3, r3
 800749e:	e022      	b.n	80074e6 <HAL_TIM_PWM_Start+0x9e>
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	2b0c      	cmp	r3, #12
 80074a4:	d109      	bne.n	80074ba <HAL_TIM_PWM_Start+0x72>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	bf14      	ite	ne
 80074b2:	2301      	movne	r3, #1
 80074b4:	2300      	moveq	r3, #0
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	e015      	b.n	80074e6 <HAL_TIM_PWM_Start+0x9e>
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	2b10      	cmp	r3, #16
 80074be:	d109      	bne.n	80074d4 <HAL_TIM_PWM_Start+0x8c>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	bf14      	ite	ne
 80074cc:	2301      	movne	r3, #1
 80074ce:	2300      	moveq	r3, #0
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	e008      	b.n	80074e6 <HAL_TIM_PWM_Start+0x9e>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	2b01      	cmp	r3, #1
 80074de:	bf14      	ite	ne
 80074e0:	2301      	movne	r3, #1
 80074e2:	2300      	moveq	r3, #0
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d001      	beq.n	80074ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e09c      	b.n	8007628 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d104      	bne.n	80074fe <HAL_TIM_PWM_Start+0xb6>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2202      	movs	r2, #2
 80074f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074fc:	e023      	b.n	8007546 <HAL_TIM_PWM_Start+0xfe>
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	2b04      	cmp	r3, #4
 8007502:	d104      	bne.n	800750e <HAL_TIM_PWM_Start+0xc6>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2202      	movs	r2, #2
 8007508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800750c:	e01b      	b.n	8007546 <HAL_TIM_PWM_Start+0xfe>
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	2b08      	cmp	r3, #8
 8007512:	d104      	bne.n	800751e <HAL_TIM_PWM_Start+0xd6>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2202      	movs	r2, #2
 8007518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800751c:	e013      	b.n	8007546 <HAL_TIM_PWM_Start+0xfe>
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	2b0c      	cmp	r3, #12
 8007522:	d104      	bne.n	800752e <HAL_TIM_PWM_Start+0xe6>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2202      	movs	r2, #2
 8007528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800752c:	e00b      	b.n	8007546 <HAL_TIM_PWM_Start+0xfe>
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	2b10      	cmp	r3, #16
 8007532:	d104      	bne.n	800753e <HAL_TIM_PWM_Start+0xf6>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2202      	movs	r2, #2
 8007538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800753c:	e003      	b.n	8007546 <HAL_TIM_PWM_Start+0xfe>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2202      	movs	r2, #2
 8007542:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2201      	movs	r2, #1
 800754c:	6839      	ldr	r1, [r7, #0]
 800754e:	4618      	mov	r0, r3
 8007550:	f001 f86a 	bl	8008628 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a35      	ldr	r2, [pc, #212]	; (8007630 <HAL_TIM_PWM_Start+0x1e8>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d013      	beq.n	8007586 <HAL_TIM_PWM_Start+0x13e>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a34      	ldr	r2, [pc, #208]	; (8007634 <HAL_TIM_PWM_Start+0x1ec>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d00e      	beq.n	8007586 <HAL_TIM_PWM_Start+0x13e>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a32      	ldr	r2, [pc, #200]	; (8007638 <HAL_TIM_PWM_Start+0x1f0>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d009      	beq.n	8007586 <HAL_TIM_PWM_Start+0x13e>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a31      	ldr	r2, [pc, #196]	; (800763c <HAL_TIM_PWM_Start+0x1f4>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d004      	beq.n	8007586 <HAL_TIM_PWM_Start+0x13e>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a2f      	ldr	r2, [pc, #188]	; (8007640 <HAL_TIM_PWM_Start+0x1f8>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d101      	bne.n	800758a <HAL_TIM_PWM_Start+0x142>
 8007586:	2301      	movs	r3, #1
 8007588:	e000      	b.n	800758c <HAL_TIM_PWM_Start+0x144>
 800758a:	2300      	movs	r3, #0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d007      	beq.n	80075a0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800759e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a22      	ldr	r2, [pc, #136]	; (8007630 <HAL_TIM_PWM_Start+0x1e8>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d01d      	beq.n	80075e6 <HAL_TIM_PWM_Start+0x19e>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075b2:	d018      	beq.n	80075e6 <HAL_TIM_PWM_Start+0x19e>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a22      	ldr	r2, [pc, #136]	; (8007644 <HAL_TIM_PWM_Start+0x1fc>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d013      	beq.n	80075e6 <HAL_TIM_PWM_Start+0x19e>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a21      	ldr	r2, [pc, #132]	; (8007648 <HAL_TIM_PWM_Start+0x200>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d00e      	beq.n	80075e6 <HAL_TIM_PWM_Start+0x19e>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a1f      	ldr	r2, [pc, #124]	; (800764c <HAL_TIM_PWM_Start+0x204>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d009      	beq.n	80075e6 <HAL_TIM_PWM_Start+0x19e>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a17      	ldr	r2, [pc, #92]	; (8007634 <HAL_TIM_PWM_Start+0x1ec>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d004      	beq.n	80075e6 <HAL_TIM_PWM_Start+0x19e>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a1b      	ldr	r2, [pc, #108]	; (8007650 <HAL_TIM_PWM_Start+0x208>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d115      	bne.n	8007612 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	689a      	ldr	r2, [r3, #8]
 80075ec:	4b19      	ldr	r3, [pc, #100]	; (8007654 <HAL_TIM_PWM_Start+0x20c>)
 80075ee:	4013      	ands	r3, r2
 80075f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2b06      	cmp	r3, #6
 80075f6:	d015      	beq.n	8007624 <HAL_TIM_PWM_Start+0x1dc>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075fe:	d011      	beq.n	8007624 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f042 0201 	orr.w	r2, r2, #1
 800760e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007610:	e008      	b.n	8007624 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f042 0201 	orr.w	r2, r2, #1
 8007620:	601a      	str	r2, [r3, #0]
 8007622:	e000      	b.n	8007626 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007624:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3710      	adds	r7, #16
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	40010000 	.word	0x40010000
 8007634:	40010400 	.word	0x40010400
 8007638:	40014000 	.word	0x40014000
 800763c:	40014400 	.word	0x40014400
 8007640:	40014800 	.word	0x40014800
 8007644:	40000400 	.word	0x40000400
 8007648:	40000800 	.word	0x40000800
 800764c:	40000c00 	.word	0x40000c00
 8007650:	40001800 	.word	0x40001800
 8007654:	00010007 	.word	0x00010007

08007658 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2200      	movs	r2, #0
 8007668:	6839      	ldr	r1, [r7, #0]
 800766a:	4618      	mov	r0, r3
 800766c:	f000 ffdc 	bl	8008628 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a3e      	ldr	r2, [pc, #248]	; (8007770 <HAL_TIM_PWM_Stop+0x118>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d013      	beq.n	80076a2 <HAL_TIM_PWM_Stop+0x4a>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a3d      	ldr	r2, [pc, #244]	; (8007774 <HAL_TIM_PWM_Stop+0x11c>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d00e      	beq.n	80076a2 <HAL_TIM_PWM_Stop+0x4a>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a3b      	ldr	r2, [pc, #236]	; (8007778 <HAL_TIM_PWM_Stop+0x120>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d009      	beq.n	80076a2 <HAL_TIM_PWM_Stop+0x4a>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a3a      	ldr	r2, [pc, #232]	; (800777c <HAL_TIM_PWM_Stop+0x124>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d004      	beq.n	80076a2 <HAL_TIM_PWM_Stop+0x4a>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a38      	ldr	r2, [pc, #224]	; (8007780 <HAL_TIM_PWM_Stop+0x128>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d101      	bne.n	80076a6 <HAL_TIM_PWM_Stop+0x4e>
 80076a2:	2301      	movs	r3, #1
 80076a4:	e000      	b.n	80076a8 <HAL_TIM_PWM_Stop+0x50>
 80076a6:	2300      	movs	r3, #0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d017      	beq.n	80076dc <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6a1a      	ldr	r2, [r3, #32]
 80076b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80076b6:	4013      	ands	r3, r2
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d10f      	bne.n	80076dc <HAL_TIM_PWM_Stop+0x84>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6a1a      	ldr	r2, [r3, #32]
 80076c2:	f240 4344 	movw	r3, #1092	; 0x444
 80076c6:	4013      	ands	r3, r2
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d107      	bne.n	80076dc <HAL_TIM_PWM_Stop+0x84>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80076da:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6a1a      	ldr	r2, [r3, #32]
 80076e2:	f241 1311 	movw	r3, #4369	; 0x1111
 80076e6:	4013      	ands	r3, r2
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d10f      	bne.n	800770c <HAL_TIM_PWM_Stop+0xb4>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	6a1a      	ldr	r2, [r3, #32]
 80076f2:	f240 4344 	movw	r3, #1092	; 0x444
 80076f6:	4013      	ands	r3, r2
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d107      	bne.n	800770c <HAL_TIM_PWM_Stop+0xb4>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f022 0201 	bic.w	r2, r2, #1
 800770a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d104      	bne.n	800771c <HAL_TIM_PWM_Stop+0xc4>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2201      	movs	r2, #1
 8007716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800771a:	e023      	b.n	8007764 <HAL_TIM_PWM_Stop+0x10c>
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	2b04      	cmp	r3, #4
 8007720:	d104      	bne.n	800772c <HAL_TIM_PWM_Stop+0xd4>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2201      	movs	r2, #1
 8007726:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800772a:	e01b      	b.n	8007764 <HAL_TIM_PWM_Stop+0x10c>
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	2b08      	cmp	r3, #8
 8007730:	d104      	bne.n	800773c <HAL_TIM_PWM_Stop+0xe4>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2201      	movs	r2, #1
 8007736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800773a:	e013      	b.n	8007764 <HAL_TIM_PWM_Stop+0x10c>
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	2b0c      	cmp	r3, #12
 8007740:	d104      	bne.n	800774c <HAL_TIM_PWM_Stop+0xf4>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2201      	movs	r2, #1
 8007746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800774a:	e00b      	b.n	8007764 <HAL_TIM_PWM_Stop+0x10c>
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	2b10      	cmp	r3, #16
 8007750:	d104      	bne.n	800775c <HAL_TIM_PWM_Stop+0x104>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2201      	movs	r2, #1
 8007756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800775a:	e003      	b.n	8007764 <HAL_TIM_PWM_Stop+0x10c>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	40010000 	.word	0x40010000
 8007774:	40010400 	.word	0x40010400
 8007778:	40014000 	.word	0x40014000
 800777c:	40014400 	.word	0x40014400
 8007780:	40014800 	.word	0x40014800

08007784 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	f003 0302 	and.w	r3, r3, #2
 8007796:	2b02      	cmp	r3, #2
 8007798:	d122      	bne.n	80077e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	f003 0302 	and.w	r3, r3, #2
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d11b      	bne.n	80077e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f06f 0202 	mvn.w	r2, #2
 80077b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2201      	movs	r2, #1
 80077b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	699b      	ldr	r3, [r3, #24]
 80077be:	f003 0303 	and.w	r3, r3, #3
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d003      	beq.n	80077ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 fb0a 	bl	8007de0 <HAL_TIM_IC_CaptureCallback>
 80077cc:	e005      	b.n	80077da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fafc 	bl	8007dcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 fb0d 	bl	8007df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	f003 0304 	and.w	r3, r3, #4
 80077ea:	2b04      	cmp	r3, #4
 80077ec:	d122      	bne.n	8007834 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	f003 0304 	and.w	r3, r3, #4
 80077f8:	2b04      	cmp	r3, #4
 80077fa:	d11b      	bne.n	8007834 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f06f 0204 	mvn.w	r2, #4
 8007804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2202      	movs	r2, #2
 800780a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007816:	2b00      	cmp	r3, #0
 8007818:	d003      	beq.n	8007822 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fae0 	bl	8007de0 <HAL_TIM_IC_CaptureCallback>
 8007820:	e005      	b.n	800782e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 fad2 	bl	8007dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fae3 	bl	8007df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	f003 0308 	and.w	r3, r3, #8
 800783e:	2b08      	cmp	r3, #8
 8007840:	d122      	bne.n	8007888 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	f003 0308 	and.w	r3, r3, #8
 800784c:	2b08      	cmp	r3, #8
 800784e:	d11b      	bne.n	8007888 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f06f 0208 	mvn.w	r2, #8
 8007858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2204      	movs	r2, #4
 800785e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	69db      	ldr	r3, [r3, #28]
 8007866:	f003 0303 	and.w	r3, r3, #3
 800786a:	2b00      	cmp	r3, #0
 800786c:	d003      	beq.n	8007876 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fab6 	bl	8007de0 <HAL_TIM_IC_CaptureCallback>
 8007874:	e005      	b.n	8007882 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 faa8 	bl	8007dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fab9 	bl	8007df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	f003 0310 	and.w	r3, r3, #16
 8007892:	2b10      	cmp	r3, #16
 8007894:	d122      	bne.n	80078dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	f003 0310 	and.w	r3, r3, #16
 80078a0:	2b10      	cmp	r3, #16
 80078a2:	d11b      	bne.n	80078dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f06f 0210 	mvn.w	r2, #16
 80078ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2208      	movs	r2, #8
 80078b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	69db      	ldr	r3, [r3, #28]
 80078ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d003      	beq.n	80078ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 fa8c 	bl	8007de0 <HAL_TIM_IC_CaptureCallback>
 80078c8:	e005      	b.n	80078d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 fa7e 	bl	8007dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fa8f 	bl	8007df4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d10e      	bne.n	8007908 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	f003 0301 	and.w	r3, r3, #1
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d107      	bne.n	8007908 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f06f 0201 	mvn.w	r2, #1
 8007900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f7f9 fb14 	bl	8000f30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007912:	2b80      	cmp	r3, #128	; 0x80
 8007914:	d10e      	bne.n	8007934 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007920:	2b80      	cmp	r3, #128	; 0x80
 8007922:	d107      	bne.n	8007934 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800792c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 ff32 	bl	8008798 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800793e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007942:	d10e      	bne.n	8007962 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800794e:	2b80      	cmp	r3, #128	; 0x80
 8007950:	d107      	bne.n	8007962 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800795a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 ff25 	bl	80087ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800796c:	2b40      	cmp	r3, #64	; 0x40
 800796e:	d10e      	bne.n	800798e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800797a:	2b40      	cmp	r3, #64	; 0x40
 800797c:	d107      	bne.n	800798e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 fa3d 	bl	8007e08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	f003 0320 	and.w	r3, r3, #32
 8007998:	2b20      	cmp	r3, #32
 800799a:	d10e      	bne.n	80079ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	f003 0320 	and.w	r3, r3, #32
 80079a6:	2b20      	cmp	r3, #32
 80079a8:	d107      	bne.n	80079ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f06f 0220 	mvn.w	r2, #32
 80079b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 fee5 	bl	8008784 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079ba:	bf00      	nop
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
	...

080079c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d101      	bne.n	80079de <HAL_TIM_PWM_ConfigChannel+0x1a>
 80079da:	2302      	movs	r3, #2
 80079dc:	e0fd      	b.n	8007bda <HAL_TIM_PWM_ConfigChannel+0x216>
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2201      	movs	r2, #1
 80079e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2b14      	cmp	r3, #20
 80079ea:	f200 80f0 	bhi.w	8007bce <HAL_TIM_PWM_ConfigChannel+0x20a>
 80079ee:	a201      	add	r2, pc, #4	; (adr r2, 80079f4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80079f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f4:	08007a49 	.word	0x08007a49
 80079f8:	08007bcf 	.word	0x08007bcf
 80079fc:	08007bcf 	.word	0x08007bcf
 8007a00:	08007bcf 	.word	0x08007bcf
 8007a04:	08007a89 	.word	0x08007a89
 8007a08:	08007bcf 	.word	0x08007bcf
 8007a0c:	08007bcf 	.word	0x08007bcf
 8007a10:	08007bcf 	.word	0x08007bcf
 8007a14:	08007acb 	.word	0x08007acb
 8007a18:	08007bcf 	.word	0x08007bcf
 8007a1c:	08007bcf 	.word	0x08007bcf
 8007a20:	08007bcf 	.word	0x08007bcf
 8007a24:	08007b0b 	.word	0x08007b0b
 8007a28:	08007bcf 	.word	0x08007bcf
 8007a2c:	08007bcf 	.word	0x08007bcf
 8007a30:	08007bcf 	.word	0x08007bcf
 8007a34:	08007b4d 	.word	0x08007b4d
 8007a38:	08007bcf 	.word	0x08007bcf
 8007a3c:	08007bcf 	.word	0x08007bcf
 8007a40:	08007bcf 	.word	0x08007bcf
 8007a44:	08007b8d 	.word	0x08007b8d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68b9      	ldr	r1, [r7, #8]
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f000 fa7e 	bl	8007f50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	699a      	ldr	r2, [r3, #24]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f042 0208 	orr.w	r2, r2, #8
 8007a62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	699a      	ldr	r2, [r3, #24]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f022 0204 	bic.w	r2, r2, #4
 8007a72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	6999      	ldr	r1, [r3, #24]
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	691a      	ldr	r2, [r3, #16]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	430a      	orrs	r2, r1
 8007a84:	619a      	str	r2, [r3, #24]
      break;
 8007a86:	e0a3      	b.n	8007bd0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68b9      	ldr	r1, [r7, #8]
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f000 faee 	bl	8008070 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	699a      	ldr	r2, [r3, #24]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007aa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	699a      	ldr	r2, [r3, #24]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	6999      	ldr	r1, [r3, #24]
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	021a      	lsls	r2, r3, #8
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	430a      	orrs	r2, r1
 8007ac6:	619a      	str	r2, [r3, #24]
      break;
 8007ac8:	e082      	b.n	8007bd0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68b9      	ldr	r1, [r7, #8]
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f000 fb57 	bl	8008184 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	69da      	ldr	r2, [r3, #28]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f042 0208 	orr.w	r2, r2, #8
 8007ae4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	69da      	ldr	r2, [r3, #28]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f022 0204 	bic.w	r2, r2, #4
 8007af4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	69d9      	ldr	r1, [r3, #28]
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	691a      	ldr	r2, [r3, #16]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	430a      	orrs	r2, r1
 8007b06:	61da      	str	r2, [r3, #28]
      break;
 8007b08:	e062      	b.n	8007bd0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68b9      	ldr	r1, [r7, #8]
 8007b10:	4618      	mov	r0, r3
 8007b12:	f000 fbbd 	bl	8008290 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	69da      	ldr	r2, [r3, #28]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	69da      	ldr	r2, [r3, #28]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	69d9      	ldr	r1, [r3, #28]
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	021a      	lsls	r2, r3, #8
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	430a      	orrs	r2, r1
 8007b48:	61da      	str	r2, [r3, #28]
      break;
 8007b4a:	e041      	b.n	8007bd0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68b9      	ldr	r1, [r7, #8]
 8007b52:	4618      	mov	r0, r3
 8007b54:	f000 fc04 	bl	8008360 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f042 0208 	orr.w	r2, r2, #8
 8007b66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f022 0204 	bic.w	r2, r2, #4
 8007b76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	691a      	ldr	r2, [r3, #16]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	430a      	orrs	r2, r1
 8007b88:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007b8a:	e021      	b.n	8007bd0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68b9      	ldr	r1, [r7, #8]
 8007b92:	4618      	mov	r0, r3
 8007b94:	f000 fc46 	bl	8008424 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ba6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bb6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	021a      	lsls	r2, r3, #8
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	430a      	orrs	r2, r1
 8007bca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007bcc:	e000      	b.n	8007bd0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8007bce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop

08007be4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d101      	bne.n	8007bfc <HAL_TIM_ConfigClockSource+0x18>
 8007bf8:	2302      	movs	r3, #2
 8007bfa:	e0db      	b.n	8007db4 <HAL_TIM_ConfigClockSource+0x1d0>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2202      	movs	r2, #2
 8007c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	4b69      	ldr	r3, [pc, #420]	; (8007dbc <HAL_TIM_ConfigClockSource+0x1d8>)
 8007c18:	4013      	ands	r3, r2
 8007c1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c22:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a63      	ldr	r2, [pc, #396]	; (8007dc0 <HAL_TIM_ConfigClockSource+0x1dc>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	f000 80a9 	beq.w	8007d8a <HAL_TIM_ConfigClockSource+0x1a6>
 8007c38:	4a61      	ldr	r2, [pc, #388]	; (8007dc0 <HAL_TIM_ConfigClockSource+0x1dc>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	f200 80ae 	bhi.w	8007d9c <HAL_TIM_ConfigClockSource+0x1b8>
 8007c40:	4a60      	ldr	r2, [pc, #384]	; (8007dc4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	f000 80a1 	beq.w	8007d8a <HAL_TIM_ConfigClockSource+0x1a6>
 8007c48:	4a5e      	ldr	r2, [pc, #376]	; (8007dc4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	f200 80a6 	bhi.w	8007d9c <HAL_TIM_ConfigClockSource+0x1b8>
 8007c50:	4a5d      	ldr	r2, [pc, #372]	; (8007dc8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	f000 8099 	beq.w	8007d8a <HAL_TIM_ConfigClockSource+0x1a6>
 8007c58:	4a5b      	ldr	r2, [pc, #364]	; (8007dc8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	f200 809e 	bhi.w	8007d9c <HAL_TIM_ConfigClockSource+0x1b8>
 8007c60:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007c64:	f000 8091 	beq.w	8007d8a <HAL_TIM_ConfigClockSource+0x1a6>
 8007c68:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007c6c:	f200 8096 	bhi.w	8007d9c <HAL_TIM_ConfigClockSource+0x1b8>
 8007c70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c74:	f000 8089 	beq.w	8007d8a <HAL_TIM_ConfigClockSource+0x1a6>
 8007c78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c7c:	f200 808e 	bhi.w	8007d9c <HAL_TIM_ConfigClockSource+0x1b8>
 8007c80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c84:	d03e      	beq.n	8007d04 <HAL_TIM_ConfigClockSource+0x120>
 8007c86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c8a:	f200 8087 	bhi.w	8007d9c <HAL_TIM_ConfigClockSource+0x1b8>
 8007c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c92:	f000 8085 	beq.w	8007da0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c9a:	d87f      	bhi.n	8007d9c <HAL_TIM_ConfigClockSource+0x1b8>
 8007c9c:	2b70      	cmp	r3, #112	; 0x70
 8007c9e:	d01a      	beq.n	8007cd6 <HAL_TIM_ConfigClockSource+0xf2>
 8007ca0:	2b70      	cmp	r3, #112	; 0x70
 8007ca2:	d87b      	bhi.n	8007d9c <HAL_TIM_ConfigClockSource+0x1b8>
 8007ca4:	2b60      	cmp	r3, #96	; 0x60
 8007ca6:	d050      	beq.n	8007d4a <HAL_TIM_ConfigClockSource+0x166>
 8007ca8:	2b60      	cmp	r3, #96	; 0x60
 8007caa:	d877      	bhi.n	8007d9c <HAL_TIM_ConfigClockSource+0x1b8>
 8007cac:	2b50      	cmp	r3, #80	; 0x50
 8007cae:	d03c      	beq.n	8007d2a <HAL_TIM_ConfigClockSource+0x146>
 8007cb0:	2b50      	cmp	r3, #80	; 0x50
 8007cb2:	d873      	bhi.n	8007d9c <HAL_TIM_ConfigClockSource+0x1b8>
 8007cb4:	2b40      	cmp	r3, #64	; 0x40
 8007cb6:	d058      	beq.n	8007d6a <HAL_TIM_ConfigClockSource+0x186>
 8007cb8:	2b40      	cmp	r3, #64	; 0x40
 8007cba:	d86f      	bhi.n	8007d9c <HAL_TIM_ConfigClockSource+0x1b8>
 8007cbc:	2b30      	cmp	r3, #48	; 0x30
 8007cbe:	d064      	beq.n	8007d8a <HAL_TIM_ConfigClockSource+0x1a6>
 8007cc0:	2b30      	cmp	r3, #48	; 0x30
 8007cc2:	d86b      	bhi.n	8007d9c <HAL_TIM_ConfigClockSource+0x1b8>
 8007cc4:	2b20      	cmp	r3, #32
 8007cc6:	d060      	beq.n	8007d8a <HAL_TIM_ConfigClockSource+0x1a6>
 8007cc8:	2b20      	cmp	r3, #32
 8007cca:	d867      	bhi.n	8007d9c <HAL_TIM_ConfigClockSource+0x1b8>
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d05c      	beq.n	8007d8a <HAL_TIM_ConfigClockSource+0x1a6>
 8007cd0:	2b10      	cmp	r3, #16
 8007cd2:	d05a      	beq.n	8007d8a <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007cd4:	e062      	b.n	8007d9c <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6818      	ldr	r0, [r3, #0]
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	6899      	ldr	r1, [r3, #8]
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	685a      	ldr	r2, [r3, #4]
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	f000 fc7f 	bl	80085e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007cf8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	609a      	str	r2, [r3, #8]
      break;
 8007d02:	e04e      	b.n	8007da2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6818      	ldr	r0, [r3, #0]
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	6899      	ldr	r1, [r3, #8]
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	685a      	ldr	r2, [r3, #4]
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	f000 fc68 	bl	80085e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	689a      	ldr	r2, [r3, #8]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d26:	609a      	str	r2, [r3, #8]
      break;
 8007d28:	e03b      	b.n	8007da2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6818      	ldr	r0, [r3, #0]
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	6859      	ldr	r1, [r3, #4]
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	461a      	mov	r2, r3
 8007d38:	f000 fbd8 	bl	80084ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2150      	movs	r1, #80	; 0x50
 8007d42:	4618      	mov	r0, r3
 8007d44:	f000 fc32 	bl	80085ac <TIM_ITRx_SetConfig>
      break;
 8007d48:	e02b      	b.n	8007da2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6818      	ldr	r0, [r3, #0]
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	6859      	ldr	r1, [r3, #4]
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	461a      	mov	r2, r3
 8007d58:	f000 fbf7 	bl	800854a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2160      	movs	r1, #96	; 0x60
 8007d62:	4618      	mov	r0, r3
 8007d64:	f000 fc22 	bl	80085ac <TIM_ITRx_SetConfig>
      break;
 8007d68:	e01b      	b.n	8007da2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6818      	ldr	r0, [r3, #0]
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	6859      	ldr	r1, [r3, #4]
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	461a      	mov	r2, r3
 8007d78:	f000 fbb8 	bl	80084ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2140      	movs	r1, #64	; 0x40
 8007d82:	4618      	mov	r0, r3
 8007d84:	f000 fc12 	bl	80085ac <TIM_ITRx_SetConfig>
      break;
 8007d88:	e00b      	b.n	8007da2 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4619      	mov	r1, r3
 8007d94:	4610      	mov	r0, r2
 8007d96:	f000 fc09 	bl	80085ac <TIM_ITRx_SetConfig>
        break;
 8007d9a:	e002      	b.n	8007da2 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8007d9c:	bf00      	nop
 8007d9e:	e000      	b.n	8007da2 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8007da0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	ffceff88 	.word	0xffceff88
 8007dc0:	00100040 	.word	0x00100040
 8007dc4:	00100030 	.word	0x00100030
 8007dc8:	00100020 	.word	0x00100020

08007dcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007dd4:	bf00      	nop
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007de8:	bf00      	nop
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007dfc:	bf00      	nop
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e10:	bf00      	nop
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a40      	ldr	r2, [pc, #256]	; (8007f30 <TIM_Base_SetConfig+0x114>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d013      	beq.n	8007e5c <TIM_Base_SetConfig+0x40>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e3a:	d00f      	beq.n	8007e5c <TIM_Base_SetConfig+0x40>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a3d      	ldr	r2, [pc, #244]	; (8007f34 <TIM_Base_SetConfig+0x118>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d00b      	beq.n	8007e5c <TIM_Base_SetConfig+0x40>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a3c      	ldr	r2, [pc, #240]	; (8007f38 <TIM_Base_SetConfig+0x11c>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d007      	beq.n	8007e5c <TIM_Base_SetConfig+0x40>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a3b      	ldr	r2, [pc, #236]	; (8007f3c <TIM_Base_SetConfig+0x120>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d003      	beq.n	8007e5c <TIM_Base_SetConfig+0x40>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a3a      	ldr	r2, [pc, #232]	; (8007f40 <TIM_Base_SetConfig+0x124>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d108      	bne.n	8007e6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a2f      	ldr	r2, [pc, #188]	; (8007f30 <TIM_Base_SetConfig+0x114>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d01f      	beq.n	8007eb6 <TIM_Base_SetConfig+0x9a>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e7c:	d01b      	beq.n	8007eb6 <TIM_Base_SetConfig+0x9a>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a2c      	ldr	r2, [pc, #176]	; (8007f34 <TIM_Base_SetConfig+0x118>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d017      	beq.n	8007eb6 <TIM_Base_SetConfig+0x9a>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a2b      	ldr	r2, [pc, #172]	; (8007f38 <TIM_Base_SetConfig+0x11c>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d013      	beq.n	8007eb6 <TIM_Base_SetConfig+0x9a>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a2a      	ldr	r2, [pc, #168]	; (8007f3c <TIM_Base_SetConfig+0x120>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d00f      	beq.n	8007eb6 <TIM_Base_SetConfig+0x9a>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a29      	ldr	r2, [pc, #164]	; (8007f40 <TIM_Base_SetConfig+0x124>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d00b      	beq.n	8007eb6 <TIM_Base_SetConfig+0x9a>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a28      	ldr	r2, [pc, #160]	; (8007f44 <TIM_Base_SetConfig+0x128>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d007      	beq.n	8007eb6 <TIM_Base_SetConfig+0x9a>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a27      	ldr	r2, [pc, #156]	; (8007f48 <TIM_Base_SetConfig+0x12c>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d003      	beq.n	8007eb6 <TIM_Base_SetConfig+0x9a>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a26      	ldr	r2, [pc, #152]	; (8007f4c <TIM_Base_SetConfig+0x130>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d108      	bne.n	8007ec8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ebc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	695b      	ldr	r3, [r3, #20]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	689a      	ldr	r2, [r3, #8]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a10      	ldr	r2, [pc, #64]	; (8007f30 <TIM_Base_SetConfig+0x114>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d00f      	beq.n	8007f14 <TIM_Base_SetConfig+0xf8>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a12      	ldr	r2, [pc, #72]	; (8007f40 <TIM_Base_SetConfig+0x124>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d00b      	beq.n	8007f14 <TIM_Base_SetConfig+0xf8>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a11      	ldr	r2, [pc, #68]	; (8007f44 <TIM_Base_SetConfig+0x128>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d007      	beq.n	8007f14 <TIM_Base_SetConfig+0xf8>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a10      	ldr	r2, [pc, #64]	; (8007f48 <TIM_Base_SetConfig+0x12c>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d003      	beq.n	8007f14 <TIM_Base_SetConfig+0xf8>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a0f      	ldr	r2, [pc, #60]	; (8007f4c <TIM_Base_SetConfig+0x130>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d103      	bne.n	8007f1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	691a      	ldr	r2, [r3, #16]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	615a      	str	r2, [r3, #20]
}
 8007f22:	bf00      	nop
 8007f24:	3714      	adds	r7, #20
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	40010000 	.word	0x40010000
 8007f34:	40000400 	.word	0x40000400
 8007f38:	40000800 	.word	0x40000800
 8007f3c:	40000c00 	.word	0x40000c00
 8007f40:	40010400 	.word	0x40010400
 8007f44:	40014000 	.word	0x40014000
 8007f48:	40014400 	.word	0x40014400
 8007f4c:	40014800 	.word	0x40014800

08007f50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b087      	sub	sp, #28
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a1b      	ldr	r3, [r3, #32]
 8007f5e:	f023 0201 	bic.w	r2, r3, #1
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6a1b      	ldr	r3, [r3, #32]
 8007f6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	699b      	ldr	r3, [r3, #24]
 8007f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	4b37      	ldr	r3, [pc, #220]	; (8008058 <TIM_OC1_SetConfig+0x108>)
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f023 0303 	bic.w	r3, r3, #3
 8007f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	f023 0302 	bic.w	r3, r3, #2
 8007f98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a2d      	ldr	r2, [pc, #180]	; (800805c <TIM_OC1_SetConfig+0x10c>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d00f      	beq.n	8007fcc <TIM_OC1_SetConfig+0x7c>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	4a2c      	ldr	r2, [pc, #176]	; (8008060 <TIM_OC1_SetConfig+0x110>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d00b      	beq.n	8007fcc <TIM_OC1_SetConfig+0x7c>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a2b      	ldr	r2, [pc, #172]	; (8008064 <TIM_OC1_SetConfig+0x114>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d007      	beq.n	8007fcc <TIM_OC1_SetConfig+0x7c>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a2a      	ldr	r2, [pc, #168]	; (8008068 <TIM_OC1_SetConfig+0x118>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d003      	beq.n	8007fcc <TIM_OC1_SetConfig+0x7c>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a29      	ldr	r2, [pc, #164]	; (800806c <TIM_OC1_SetConfig+0x11c>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d10c      	bne.n	8007fe6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	f023 0308 	bic.w	r3, r3, #8
 8007fd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	697a      	ldr	r2, [r7, #20]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	f023 0304 	bic.w	r3, r3, #4
 8007fe4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a1c      	ldr	r2, [pc, #112]	; (800805c <TIM_OC1_SetConfig+0x10c>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d00f      	beq.n	800800e <TIM_OC1_SetConfig+0xbe>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a1b      	ldr	r2, [pc, #108]	; (8008060 <TIM_OC1_SetConfig+0x110>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d00b      	beq.n	800800e <TIM_OC1_SetConfig+0xbe>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a1a      	ldr	r2, [pc, #104]	; (8008064 <TIM_OC1_SetConfig+0x114>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d007      	beq.n	800800e <TIM_OC1_SetConfig+0xbe>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a19      	ldr	r2, [pc, #100]	; (8008068 <TIM_OC1_SetConfig+0x118>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d003      	beq.n	800800e <TIM_OC1_SetConfig+0xbe>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a18      	ldr	r2, [pc, #96]	; (800806c <TIM_OC1_SetConfig+0x11c>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d111      	bne.n	8008032 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008014:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800801c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	695b      	ldr	r3, [r3, #20]
 8008022:	693a      	ldr	r2, [r7, #16]
 8008024:	4313      	orrs	r3, r2
 8008026:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	699b      	ldr	r3, [r3, #24]
 800802c:	693a      	ldr	r2, [r7, #16]
 800802e:	4313      	orrs	r3, r2
 8008030:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	693a      	ldr	r2, [r7, #16]
 8008036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	68fa      	ldr	r2, [r7, #12]
 800803c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	685a      	ldr	r2, [r3, #4]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	697a      	ldr	r2, [r7, #20]
 800804a:	621a      	str	r2, [r3, #32]
}
 800804c:	bf00      	nop
 800804e:	371c      	adds	r7, #28
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr
 8008058:	fffeff8f 	.word	0xfffeff8f
 800805c:	40010000 	.word	0x40010000
 8008060:	40010400 	.word	0x40010400
 8008064:	40014000 	.word	0x40014000
 8008068:	40014400 	.word	0x40014400
 800806c:	40014800 	.word	0x40014800

08008070 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008070:	b480      	push	{r7}
 8008072:	b087      	sub	sp, #28
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6a1b      	ldr	r3, [r3, #32]
 800807e:	f023 0210 	bic.w	r2, r3, #16
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a1b      	ldr	r3, [r3, #32]
 800808a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	4b34      	ldr	r3, [pc, #208]	; (800816c <TIM_OC2_SetConfig+0xfc>)
 800809c:	4013      	ands	r3, r2
 800809e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	021b      	lsls	r3, r3, #8
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	f023 0320 	bic.w	r3, r3, #32
 80080ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	011b      	lsls	r3, r3, #4
 80080c2:	697a      	ldr	r2, [r7, #20]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	4a29      	ldr	r2, [pc, #164]	; (8008170 <TIM_OC2_SetConfig+0x100>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d003      	beq.n	80080d8 <TIM_OC2_SetConfig+0x68>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4a28      	ldr	r2, [pc, #160]	; (8008174 <TIM_OC2_SetConfig+0x104>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d10d      	bne.n	80080f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	011b      	lsls	r3, r3, #4
 80080e6:	697a      	ldr	r2, [r7, #20]
 80080e8:	4313      	orrs	r3, r2
 80080ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4a1e      	ldr	r2, [pc, #120]	; (8008170 <TIM_OC2_SetConfig+0x100>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d00f      	beq.n	800811c <TIM_OC2_SetConfig+0xac>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a1d      	ldr	r2, [pc, #116]	; (8008174 <TIM_OC2_SetConfig+0x104>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d00b      	beq.n	800811c <TIM_OC2_SetConfig+0xac>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4a1c      	ldr	r2, [pc, #112]	; (8008178 <TIM_OC2_SetConfig+0x108>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d007      	beq.n	800811c <TIM_OC2_SetConfig+0xac>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4a1b      	ldr	r2, [pc, #108]	; (800817c <TIM_OC2_SetConfig+0x10c>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d003      	beq.n	800811c <TIM_OC2_SetConfig+0xac>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	4a1a      	ldr	r2, [pc, #104]	; (8008180 <TIM_OC2_SetConfig+0x110>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d113      	bne.n	8008144 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008122:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800812a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	695b      	ldr	r3, [r3, #20]
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	693a      	ldr	r2, [r7, #16]
 8008134:	4313      	orrs	r3, r2
 8008136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	699b      	ldr	r3, [r3, #24]
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	693a      	ldr	r2, [r7, #16]
 8008140:	4313      	orrs	r3, r2
 8008142:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	693a      	ldr	r2, [r7, #16]
 8008148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	68fa      	ldr	r2, [r7, #12]
 800814e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	685a      	ldr	r2, [r3, #4]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	697a      	ldr	r2, [r7, #20]
 800815c:	621a      	str	r2, [r3, #32]
}
 800815e:	bf00      	nop
 8008160:	371c      	adds	r7, #28
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	feff8fff 	.word	0xfeff8fff
 8008170:	40010000 	.word	0x40010000
 8008174:	40010400 	.word	0x40010400
 8008178:	40014000 	.word	0x40014000
 800817c:	40014400 	.word	0x40014400
 8008180:	40014800 	.word	0x40014800

08008184 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008184:	b480      	push	{r7}
 8008186:	b087      	sub	sp, #28
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a1b      	ldr	r3, [r3, #32]
 8008192:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a1b      	ldr	r3, [r3, #32]
 800819e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	69db      	ldr	r3, [r3, #28]
 80081aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f023 0303 	bic.w	r3, r3, #3
 80081ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80081cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	021b      	lsls	r3, r3, #8
 80081d4:	697a      	ldr	r2, [r7, #20]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a27      	ldr	r2, [pc, #156]	; (800827c <TIM_OC3_SetConfig+0xf8>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d003      	beq.n	80081ea <TIM_OC3_SetConfig+0x66>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a26      	ldr	r2, [pc, #152]	; (8008280 <TIM_OC3_SetConfig+0xfc>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d10d      	bne.n	8008206 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	021b      	lsls	r3, r3, #8
 80081f8:	697a      	ldr	r2, [r7, #20]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008204:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a1c      	ldr	r2, [pc, #112]	; (800827c <TIM_OC3_SetConfig+0xf8>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d00f      	beq.n	800822e <TIM_OC3_SetConfig+0xaa>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a1b      	ldr	r2, [pc, #108]	; (8008280 <TIM_OC3_SetConfig+0xfc>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d00b      	beq.n	800822e <TIM_OC3_SetConfig+0xaa>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	4a1a      	ldr	r2, [pc, #104]	; (8008284 <TIM_OC3_SetConfig+0x100>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d007      	beq.n	800822e <TIM_OC3_SetConfig+0xaa>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4a19      	ldr	r2, [pc, #100]	; (8008288 <TIM_OC3_SetConfig+0x104>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d003      	beq.n	800822e <TIM_OC3_SetConfig+0xaa>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	4a18      	ldr	r2, [pc, #96]	; (800828c <TIM_OC3_SetConfig+0x108>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d113      	bne.n	8008256 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008234:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800823c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	695b      	ldr	r3, [r3, #20]
 8008242:	011b      	lsls	r3, r3, #4
 8008244:	693a      	ldr	r2, [r7, #16]
 8008246:	4313      	orrs	r3, r2
 8008248:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	699b      	ldr	r3, [r3, #24]
 800824e:	011b      	lsls	r3, r3, #4
 8008250:	693a      	ldr	r2, [r7, #16]
 8008252:	4313      	orrs	r3, r2
 8008254:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	693a      	ldr	r2, [r7, #16]
 800825a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	68fa      	ldr	r2, [r7, #12]
 8008260:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	685a      	ldr	r2, [r3, #4]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	697a      	ldr	r2, [r7, #20]
 800826e:	621a      	str	r2, [r3, #32]
}
 8008270:	bf00      	nop
 8008272:	371c      	adds	r7, #28
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	40010000 	.word	0x40010000
 8008280:	40010400 	.word	0x40010400
 8008284:	40014000 	.word	0x40014000
 8008288:	40014400 	.word	0x40014400
 800828c:	40014800 	.word	0x40014800

08008290 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008290:	b480      	push	{r7}
 8008292:	b087      	sub	sp, #28
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a1b      	ldr	r3, [r3, #32]
 800829e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a1b      	ldr	r3, [r3, #32]
 80082aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	69db      	ldr	r3, [r3, #28]
 80082b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	021b      	lsls	r3, r3, #8
 80082ce:	68fa      	ldr	r2, [r7, #12]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	031b      	lsls	r3, r3, #12
 80082e2:	693a      	ldr	r2, [r7, #16]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4a18      	ldr	r2, [pc, #96]	; (800834c <TIM_OC4_SetConfig+0xbc>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d00f      	beq.n	8008310 <TIM_OC4_SetConfig+0x80>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a17      	ldr	r2, [pc, #92]	; (8008350 <TIM_OC4_SetConfig+0xc0>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d00b      	beq.n	8008310 <TIM_OC4_SetConfig+0x80>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a16      	ldr	r2, [pc, #88]	; (8008354 <TIM_OC4_SetConfig+0xc4>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d007      	beq.n	8008310 <TIM_OC4_SetConfig+0x80>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a15      	ldr	r2, [pc, #84]	; (8008358 <TIM_OC4_SetConfig+0xc8>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d003      	beq.n	8008310 <TIM_OC4_SetConfig+0x80>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a14      	ldr	r2, [pc, #80]	; (800835c <TIM_OC4_SetConfig+0xcc>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d109      	bne.n	8008324 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008316:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	695b      	ldr	r3, [r3, #20]
 800831c:	019b      	lsls	r3, r3, #6
 800831e:	697a      	ldr	r2, [r7, #20]
 8008320:	4313      	orrs	r3, r2
 8008322:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	697a      	ldr	r2, [r7, #20]
 8008328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	68fa      	ldr	r2, [r7, #12]
 800832e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	685a      	ldr	r2, [r3, #4]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	621a      	str	r2, [r3, #32]
}
 800833e:	bf00      	nop
 8008340:	371c      	adds	r7, #28
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	40010000 	.word	0x40010000
 8008350:	40010400 	.word	0x40010400
 8008354:	40014000 	.word	0x40014000
 8008358:	40014400 	.word	0x40014400
 800835c:	40014800 	.word	0x40014800

08008360 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008360:	b480      	push	{r7}
 8008362:	b087      	sub	sp, #28
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a1b      	ldr	r3, [r3, #32]
 800836e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a1b      	ldr	r3, [r3, #32]
 800837a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800838e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	4313      	orrs	r3, r2
 8008398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80083a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	041b      	lsls	r3, r3, #16
 80083a8:	693a      	ldr	r2, [r7, #16]
 80083aa:	4313      	orrs	r3, r2
 80083ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4a17      	ldr	r2, [pc, #92]	; (8008410 <TIM_OC5_SetConfig+0xb0>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d00f      	beq.n	80083d6 <TIM_OC5_SetConfig+0x76>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	4a16      	ldr	r2, [pc, #88]	; (8008414 <TIM_OC5_SetConfig+0xb4>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d00b      	beq.n	80083d6 <TIM_OC5_SetConfig+0x76>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	4a15      	ldr	r2, [pc, #84]	; (8008418 <TIM_OC5_SetConfig+0xb8>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d007      	beq.n	80083d6 <TIM_OC5_SetConfig+0x76>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4a14      	ldr	r2, [pc, #80]	; (800841c <TIM_OC5_SetConfig+0xbc>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d003      	beq.n	80083d6 <TIM_OC5_SetConfig+0x76>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a13      	ldr	r2, [pc, #76]	; (8008420 <TIM_OC5_SetConfig+0xc0>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d109      	bne.n	80083ea <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	695b      	ldr	r3, [r3, #20]
 80083e2:	021b      	lsls	r3, r3, #8
 80083e4:	697a      	ldr	r2, [r7, #20]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	697a      	ldr	r2, [r7, #20]
 80083ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	685a      	ldr	r2, [r3, #4]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	693a      	ldr	r2, [r7, #16]
 8008402:	621a      	str	r2, [r3, #32]
}
 8008404:	bf00      	nop
 8008406:	371c      	adds	r7, #28
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr
 8008410:	40010000 	.word	0x40010000
 8008414:	40010400 	.word	0x40010400
 8008418:	40014000 	.word	0x40014000
 800841c:	40014400 	.word	0x40014400
 8008420:	40014800 	.word	0x40014800

08008424 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008424:	b480      	push	{r7}
 8008426:	b087      	sub	sp, #28
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6a1b      	ldr	r3, [r3, #32]
 8008432:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a1b      	ldr	r3, [r3, #32]
 800843e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800844a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	021b      	lsls	r3, r3, #8
 800845a:	68fa      	ldr	r2, [r7, #12]
 800845c:	4313      	orrs	r3, r2
 800845e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008466:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	051b      	lsls	r3, r3, #20
 800846e:	693a      	ldr	r2, [r7, #16]
 8008470:	4313      	orrs	r3, r2
 8008472:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a18      	ldr	r2, [pc, #96]	; (80084d8 <TIM_OC6_SetConfig+0xb4>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d00f      	beq.n	800849c <TIM_OC6_SetConfig+0x78>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a17      	ldr	r2, [pc, #92]	; (80084dc <TIM_OC6_SetConfig+0xb8>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d00b      	beq.n	800849c <TIM_OC6_SetConfig+0x78>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a16      	ldr	r2, [pc, #88]	; (80084e0 <TIM_OC6_SetConfig+0xbc>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d007      	beq.n	800849c <TIM_OC6_SetConfig+0x78>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4a15      	ldr	r2, [pc, #84]	; (80084e4 <TIM_OC6_SetConfig+0xc0>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d003      	beq.n	800849c <TIM_OC6_SetConfig+0x78>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a14      	ldr	r2, [pc, #80]	; (80084e8 <TIM_OC6_SetConfig+0xc4>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d109      	bne.n	80084b0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80084a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	695b      	ldr	r3, [r3, #20]
 80084a8:	029b      	lsls	r3, r3, #10
 80084aa:	697a      	ldr	r2, [r7, #20]
 80084ac:	4313      	orrs	r3, r2
 80084ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	697a      	ldr	r2, [r7, #20]
 80084b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	68fa      	ldr	r2, [r7, #12]
 80084ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	685a      	ldr	r2, [r3, #4]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	693a      	ldr	r2, [r7, #16]
 80084c8:	621a      	str	r2, [r3, #32]
}
 80084ca:	bf00      	nop
 80084cc:	371c      	adds	r7, #28
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	40010000 	.word	0x40010000
 80084dc:	40010400 	.word	0x40010400
 80084e0:	40014000 	.word	0x40014000
 80084e4:	40014400 	.word	0x40014400
 80084e8:	40014800 	.word	0x40014800

080084ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b087      	sub	sp, #28
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6a1b      	ldr	r3, [r3, #32]
 80084fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6a1b      	ldr	r3, [r3, #32]
 8008502:	f023 0201 	bic.w	r2, r3, #1
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	699b      	ldr	r3, [r3, #24]
 800850e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	011b      	lsls	r3, r3, #4
 800851c:	693a      	ldr	r2, [r7, #16]
 800851e:	4313      	orrs	r3, r2
 8008520:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	f023 030a 	bic.w	r3, r3, #10
 8008528:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800852a:	697a      	ldr	r2, [r7, #20]
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	4313      	orrs	r3, r2
 8008530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	693a      	ldr	r2, [r7, #16]
 8008536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	621a      	str	r2, [r3, #32]
}
 800853e:	bf00      	nop
 8008540:	371c      	adds	r7, #28
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr

0800854a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800854a:	b480      	push	{r7}
 800854c:	b087      	sub	sp, #28
 800854e:	af00      	add	r7, sp, #0
 8008550:	60f8      	str	r0, [r7, #12]
 8008552:	60b9      	str	r1, [r7, #8]
 8008554:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6a1b      	ldr	r3, [r3, #32]
 800855a:	f023 0210 	bic.w	r2, r3, #16
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6a1b      	ldr	r3, [r3, #32]
 800856c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008574:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	031b      	lsls	r3, r3, #12
 800857a:	697a      	ldr	r2, [r7, #20]
 800857c:	4313      	orrs	r3, r2
 800857e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008586:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	011b      	lsls	r3, r3, #4
 800858c:	693a      	ldr	r2, [r7, #16]
 800858e:	4313      	orrs	r3, r2
 8008590:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	697a      	ldr	r2, [r7, #20]
 8008596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	693a      	ldr	r2, [r7, #16]
 800859c:	621a      	str	r2, [r3, #32]
}
 800859e:	bf00      	nop
 80085a0:	371c      	adds	r7, #28
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr
	...

080085ac <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	4b09      	ldr	r3, [pc, #36]	; (80085e4 <TIM_ITRx_SetConfig+0x38>)
 80085c0:	4013      	ands	r3, r2
 80085c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085c4:	683a      	ldr	r2, [r7, #0]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	4313      	orrs	r3, r2
 80085ca:	f043 0307 	orr.w	r3, r3, #7
 80085ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	609a      	str	r2, [r3, #8]
}
 80085d6:	bf00      	nop
 80085d8:	3714      	adds	r7, #20
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop
 80085e4:	ffcfff8f 	.word	0xffcfff8f

080085e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b087      	sub	sp, #28
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	607a      	str	r2, [r7, #4]
 80085f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008602:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	021a      	lsls	r2, r3, #8
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	431a      	orrs	r2, r3
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	4313      	orrs	r3, r2
 8008610:	697a      	ldr	r2, [r7, #20]
 8008612:	4313      	orrs	r3, r2
 8008614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	697a      	ldr	r2, [r7, #20]
 800861a:	609a      	str	r2, [r3, #8]
}
 800861c:	bf00      	nop
 800861e:	371c      	adds	r7, #28
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008628:	b480      	push	{r7}
 800862a:	b087      	sub	sp, #28
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	f003 031f 	and.w	r3, r3, #31
 800863a:	2201      	movs	r2, #1
 800863c:	fa02 f303 	lsl.w	r3, r2, r3
 8008640:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6a1a      	ldr	r2, [r3, #32]
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	43db      	mvns	r3, r3
 800864a:	401a      	ands	r2, r3
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6a1a      	ldr	r2, [r3, #32]
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	f003 031f 	and.w	r3, r3, #31
 800865a:	6879      	ldr	r1, [r7, #4]
 800865c:	fa01 f303 	lsl.w	r3, r1, r3
 8008660:	431a      	orrs	r2, r3
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	621a      	str	r2, [r3, #32]
}
 8008666:	bf00      	nop
 8008668:	371c      	adds	r7, #28
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr
	...

08008674 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008684:	2b01      	cmp	r3, #1
 8008686:	d101      	bne.n	800868c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008688:	2302      	movs	r3, #2
 800868a:	e068      	b.n	800875e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2202      	movs	r2, #2
 8008698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a2e      	ldr	r2, [pc, #184]	; (800876c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d004      	beq.n	80086c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a2d      	ldr	r2, [pc, #180]	; (8008770 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d108      	bne.n	80086d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80086c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	68fa      	ldr	r2, [r7, #12]
 80086ce:	4313      	orrs	r3, r2
 80086d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a1e      	ldr	r2, [pc, #120]	; (800876c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d01d      	beq.n	8008732 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086fe:	d018      	beq.n	8008732 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a1b      	ldr	r2, [pc, #108]	; (8008774 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d013      	beq.n	8008732 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a1a      	ldr	r2, [pc, #104]	; (8008778 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d00e      	beq.n	8008732 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a18      	ldr	r2, [pc, #96]	; (800877c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d009      	beq.n	8008732 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a13      	ldr	r2, [pc, #76]	; (8008770 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d004      	beq.n	8008732 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a14      	ldr	r2, [pc, #80]	; (8008780 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d10c      	bne.n	800874c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008738:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	68ba      	ldr	r2, [r7, #8]
 8008740:	4313      	orrs	r3, r2
 8008742:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	68ba      	ldr	r2, [r7, #8]
 800874a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3714      	adds	r7, #20
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	40010000 	.word	0x40010000
 8008770:	40010400 	.word	0x40010400
 8008774:	40000400 	.word	0x40000400
 8008778:	40000800 	.word	0x40000800
 800877c:	40000c00 	.word	0x40000c00
 8008780:	40001800 	.word	0x40001800

08008784 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800878c:	bf00      	nop
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087a0:	bf00      	nop
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80087b4:	bf00      	nop
 80087b6:	370c      	adds	r7, #12
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d101      	bne.n	80087d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e042      	b.n	8008858 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d106      	bne.n	80087ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f7f8 fd1b 	bl	8001220 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2224      	movs	r2, #36	; 0x24
 80087ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f022 0201 	bic.w	r2, r2, #1
 8008800:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 fafc 	bl	8008e00 <UART_SetConfig>
 8008808:	4603      	mov	r3, r0
 800880a:	2b01      	cmp	r3, #1
 800880c:	d101      	bne.n	8008812 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	e022      	b.n	8008858 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008816:	2b00      	cmp	r3, #0
 8008818:	d002      	beq.n	8008820 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f001 f850 	bl	80098c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	685a      	ldr	r2, [r3, #4]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800882e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	689a      	ldr	r2, [r3, #8]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800883e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f042 0201 	orr.w	r2, r2, #1
 800884e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f001 f8d7 	bl	8009a04 <UART_CheckIdleState>
 8008856:	4603      	mov	r3, r0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3708      	adds	r7, #8
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b088      	sub	sp, #32
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	69db      	ldr	r3, [r3, #28]
 800886e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008880:	69fa      	ldr	r2, [r7, #28]
 8008882:	f640 030f 	movw	r3, #2063	; 0x80f
 8008886:	4013      	ands	r3, r2
 8008888:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d118      	bne.n	80088c2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	f003 0320 	and.w	r3, r3, #32
 8008896:	2b00      	cmp	r3, #0
 8008898:	d013      	beq.n	80088c2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	f003 0320 	and.w	r3, r3, #32
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d104      	bne.n	80088ae <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d009      	beq.n	80088c2 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f000 8282 	beq.w	8008dbc <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	4798      	blx	r3
      }
      return;
 80088c0:	e27c      	b.n	8008dbc <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	f000 80ef 	beq.w	8008aa8 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80088ca:	697a      	ldr	r2, [r7, #20]
 80088cc:	4b73      	ldr	r3, [pc, #460]	; (8008a9c <HAL_UART_IRQHandler+0x23c>)
 80088ce:	4013      	ands	r3, r2
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d105      	bne.n	80088e0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80088d4:	69ba      	ldr	r2, [r7, #24]
 80088d6:	4b72      	ldr	r3, [pc, #456]	; (8008aa0 <HAL_UART_IRQHandler+0x240>)
 80088d8:	4013      	ands	r3, r2
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f000 80e4 	beq.w	8008aa8 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80088e0:	69fb      	ldr	r3, [r7, #28]
 80088e2:	f003 0301 	and.w	r3, r3, #1
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d010      	beq.n	800890c <HAL_UART_IRQHandler+0xac>
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00b      	beq.n	800890c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2201      	movs	r2, #1
 80088fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008902:	f043 0201 	orr.w	r2, r3, #1
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	f003 0302 	and.w	r3, r3, #2
 8008912:	2b00      	cmp	r3, #0
 8008914:	d010      	beq.n	8008938 <HAL_UART_IRQHandler+0xd8>
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	f003 0301 	and.w	r3, r3, #1
 800891c:	2b00      	cmp	r3, #0
 800891e:	d00b      	beq.n	8008938 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2202      	movs	r2, #2
 8008926:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800892e:	f043 0204 	orr.w	r2, r3, #4
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	f003 0304 	and.w	r3, r3, #4
 800893e:	2b00      	cmp	r3, #0
 8008940:	d010      	beq.n	8008964 <HAL_UART_IRQHandler+0x104>
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	f003 0301 	and.w	r3, r3, #1
 8008948:	2b00      	cmp	r3, #0
 800894a:	d00b      	beq.n	8008964 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2204      	movs	r2, #4
 8008952:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800895a:	f043 0202 	orr.w	r2, r3, #2
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	f003 0308 	and.w	r3, r3, #8
 800896a:	2b00      	cmp	r3, #0
 800896c:	d015      	beq.n	800899a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	f003 0320 	and.w	r3, r3, #32
 8008974:	2b00      	cmp	r3, #0
 8008976:	d104      	bne.n	8008982 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008978:	697a      	ldr	r2, [r7, #20]
 800897a:	4b48      	ldr	r3, [pc, #288]	; (8008a9c <HAL_UART_IRQHandler+0x23c>)
 800897c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800897e:	2b00      	cmp	r3, #0
 8008980:	d00b      	beq.n	800899a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2208      	movs	r2, #8
 8008988:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008990:	f043 0208 	orr.w	r2, r3, #8
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d011      	beq.n	80089c8 <HAL_UART_IRQHandler+0x168>
 80089a4:	69bb      	ldr	r3, [r7, #24]
 80089a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00c      	beq.n	80089c8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80089b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089be:	f043 0220 	orr.w	r2, r3, #32
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	f000 81f6 	beq.w	8008dc0 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	f003 0320 	and.w	r3, r3, #32
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d011      	beq.n	8008a02 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	f003 0320 	and.w	r3, r3, #32
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d104      	bne.n	80089f2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d007      	beq.n	8008a02 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d003      	beq.n	8008a02 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a08:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a14:	2b40      	cmp	r3, #64	; 0x40
 8008a16:	d004      	beq.n	8008a22 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d031      	beq.n	8008a86 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f001 f8ba 	bl	8009b9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a32:	2b40      	cmp	r3, #64	; 0x40
 8008a34:	d123      	bne.n	8008a7e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	689a      	ldr	r2, [r3, #8]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a44:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d013      	beq.n	8008a76 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a52:	4a14      	ldr	r2, [pc, #80]	; (8008aa4 <HAL_UART_IRQHandler+0x244>)
 8008a54:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7f9 ff0c 	bl	8002878 <HAL_DMA_Abort_IT>
 8008a60:	4603      	mov	r3, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d017      	beq.n	8008a96 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008a70:	4610      	mov	r0, r2
 8008a72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a74:	e00f      	b.n	8008a96 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 f9ac 	bl	8008dd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a7c:	e00b      	b.n	8008a96 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 f9a8 	bl	8008dd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a84:	e007      	b.n	8008a96 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 f9a4 	bl	8008dd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008a94:	e194      	b.n	8008dc0 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a96:	bf00      	nop
    return;
 8008a98:	e192      	b.n	8008dc0 <HAL_UART_IRQHandler+0x560>
 8008a9a:	bf00      	nop
 8008a9c:	10000001 	.word	0x10000001
 8008aa0:	04000120 	.word	0x04000120
 8008aa4:	08009c01 	.word	0x08009c01

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	f040 810f 	bne.w	8008cd0 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	f003 0310 	and.w	r3, r3, #16
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	f000 8109 	beq.w	8008cd0 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	f003 0310 	and.w	r3, r3, #16
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	f000 8103 	beq.w	8008cd0 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2210      	movs	r2, #16
 8008ad0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008adc:	2b40      	cmp	r3, #64	; 0x40
 8008ade:	f040 80bb 	bne.w	8008c58 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a96      	ldr	r2, [pc, #600]	; (8008d44 <HAL_UART_IRQHandler+0x4e4>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d059      	beq.n	8008ba2 <HAL_UART_IRQHandler+0x342>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a94      	ldr	r2, [pc, #592]	; (8008d48 <HAL_UART_IRQHandler+0x4e8>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d053      	beq.n	8008ba2 <HAL_UART_IRQHandler+0x342>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a92      	ldr	r2, [pc, #584]	; (8008d4c <HAL_UART_IRQHandler+0x4ec>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d04d      	beq.n	8008ba2 <HAL_UART_IRQHandler+0x342>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a90      	ldr	r2, [pc, #576]	; (8008d50 <HAL_UART_IRQHandler+0x4f0>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d047      	beq.n	8008ba2 <HAL_UART_IRQHandler+0x342>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a8e      	ldr	r2, [pc, #568]	; (8008d54 <HAL_UART_IRQHandler+0x4f4>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d041      	beq.n	8008ba2 <HAL_UART_IRQHandler+0x342>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a8c      	ldr	r2, [pc, #560]	; (8008d58 <HAL_UART_IRQHandler+0x4f8>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d03b      	beq.n	8008ba2 <HAL_UART_IRQHandler+0x342>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a8a      	ldr	r2, [pc, #552]	; (8008d5c <HAL_UART_IRQHandler+0x4fc>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d035      	beq.n	8008ba2 <HAL_UART_IRQHandler+0x342>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a88      	ldr	r2, [pc, #544]	; (8008d60 <HAL_UART_IRQHandler+0x500>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d02f      	beq.n	8008ba2 <HAL_UART_IRQHandler+0x342>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a86      	ldr	r2, [pc, #536]	; (8008d64 <HAL_UART_IRQHandler+0x504>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d029      	beq.n	8008ba2 <HAL_UART_IRQHandler+0x342>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a84      	ldr	r2, [pc, #528]	; (8008d68 <HAL_UART_IRQHandler+0x508>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d023      	beq.n	8008ba2 <HAL_UART_IRQHandler+0x342>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a82      	ldr	r2, [pc, #520]	; (8008d6c <HAL_UART_IRQHandler+0x50c>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d01d      	beq.n	8008ba2 <HAL_UART_IRQHandler+0x342>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a80      	ldr	r2, [pc, #512]	; (8008d70 <HAL_UART_IRQHandler+0x510>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d017      	beq.n	8008ba2 <HAL_UART_IRQHandler+0x342>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a7e      	ldr	r2, [pc, #504]	; (8008d74 <HAL_UART_IRQHandler+0x514>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d011      	beq.n	8008ba2 <HAL_UART_IRQHandler+0x342>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a7c      	ldr	r2, [pc, #496]	; (8008d78 <HAL_UART_IRQHandler+0x518>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d00b      	beq.n	8008ba2 <HAL_UART_IRQHandler+0x342>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a7a      	ldr	r2, [pc, #488]	; (8008d7c <HAL_UART_IRQHandler+0x51c>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d005      	beq.n	8008ba2 <HAL_UART_IRQHandler+0x342>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a78      	ldr	r2, [pc, #480]	; (8008d80 <HAL_UART_IRQHandler+0x520>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d105      	bne.n	8008bae <HAL_UART_IRQHandler+0x34e>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	e004      	b.n	8008bb8 <HAL_UART_IRQHandler+0x358>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8008bba:	893b      	ldrh	r3, [r7, #8]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f000 8101 	beq.w	8008dc4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008bc8:	893a      	ldrh	r2, [r7, #8]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	f080 80fa 	bcs.w	8008dc4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	893a      	ldrh	r2, [r7, #8]
 8008bd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bdc:	69db      	ldr	r3, [r3, #28]
 8008bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008be2:	d02b      	beq.n	8008c3c <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008bf2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	689a      	ldr	r2, [r3, #8]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f022 0201 	bic.w	r2, r2, #1
 8008c02:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	689a      	ldr	r2, [r3, #8]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c12:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2220      	movs	r2, #32
 8008c18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f022 0210 	bic.w	r2, r2, #16
 8008c30:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7f9 fb00 	bl	800223c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	1ad3      	subs	r3, r2, r3
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	4619      	mov	r1, r3
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 f8c9 	bl	8008de8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008c56:	e0b5      	b.n	8008dc4 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	1ad3      	subs	r3, r2, r3
 8008c68:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	f000 80a8 	beq.w	8008dc8 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8008c78:	897b      	ldrh	r3, [r7, #10]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f000 80a4 	beq.w	8008dc8 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008c8e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	6899      	ldr	r1, [r3, #8]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	4b3a      	ldr	r3, [pc, #232]	; (8008d84 <HAL_UART_IRQHandler+0x524>)
 8008c9c:	400b      	ands	r3, r1
 8008c9e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2220      	movs	r2, #32
 8008ca4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f022 0210 	bic.w	r2, r2, #16
 8008cc2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008cc4:	897b      	ldrh	r3, [r7, #10]
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 f88d 	bl	8008de8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008cce:	e07b      	b.n	8008dc8 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d00d      	beq.n	8008cf6 <HAL_UART_IRQHandler+0x496>
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d008      	beq.n	8008cf6 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008cec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f001 f820 	bl	8009d34 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008cf4:	e06b      	b.n	8008dce <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d012      	beq.n	8008d26 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d104      	bne.n	8008d14 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d008      	beq.n	8008d26 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d057      	beq.n	8008dcc <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	4798      	blx	r3
    }
    return;
 8008d24:	e052      	b.n	8008dcc <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d02b      	beq.n	8008d88 <HAL_UART_IRQHandler+0x528>
 8008d30:	69bb      	ldr	r3, [r7, #24]
 8008d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d026      	beq.n	8008d88 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 ff76 	bl	8009c2c <UART_EndTransmit_IT>
    return;
 8008d40:	e045      	b.n	8008dce <HAL_UART_IRQHandler+0x56e>
 8008d42:	bf00      	nop
 8008d44:	40020010 	.word	0x40020010
 8008d48:	40020028 	.word	0x40020028
 8008d4c:	40020040 	.word	0x40020040
 8008d50:	40020058 	.word	0x40020058
 8008d54:	40020070 	.word	0x40020070
 8008d58:	40020088 	.word	0x40020088
 8008d5c:	400200a0 	.word	0x400200a0
 8008d60:	400200b8 	.word	0x400200b8
 8008d64:	40020410 	.word	0x40020410
 8008d68:	40020428 	.word	0x40020428
 8008d6c:	40020440 	.word	0x40020440
 8008d70:	40020458 	.word	0x40020458
 8008d74:	40020470 	.word	0x40020470
 8008d78:	40020488 	.word	0x40020488
 8008d7c:	400204a0 	.word	0x400204a0
 8008d80:	400204b8 	.word	0x400204b8
 8008d84:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d008      	beq.n	8008da4 <HAL_UART_IRQHandler+0x544>
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d003      	beq.n	8008da4 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 ffdd 	bl	8009d5c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008da2:	e014      	b.n	8008dce <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d00f      	beq.n	8008dce <HAL_UART_IRQHandler+0x56e>
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	da0c      	bge.n	8008dce <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 ffc7 	bl	8009d48 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008dba:	e008      	b.n	8008dce <HAL_UART_IRQHandler+0x56e>
      return;
 8008dbc:	bf00      	nop
 8008dbe:	e006      	b.n	8008dce <HAL_UART_IRQHandler+0x56e>
    return;
 8008dc0:	bf00      	nop
 8008dc2:	e004      	b.n	8008dce <HAL_UART_IRQHandler+0x56e>
      return;
 8008dc4:	bf00      	nop
 8008dc6:	e002      	b.n	8008dce <HAL_UART_IRQHandler+0x56e>
      return;
 8008dc8:	bf00      	nop
 8008dca:	e000      	b.n	8008dce <HAL_UART_IRQHandler+0x56e>
    return;
 8008dcc:	bf00      	nop
  }
}
 8008dce:	3720      	adds	r7, #32
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008ddc:	bf00      	nop
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	460b      	mov	r3, r1
 8008df2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008df4:	bf00      	nop
 8008df6:	370c      	adds	r7, #12
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e00:	b5b0      	push	{r4, r5, r7, lr}
 8008e02:	b08e      	sub	sp, #56	; 0x38
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	689a      	ldr	r2, [r3, #8]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	431a      	orrs	r2, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	695b      	ldr	r3, [r3, #20]
 8008e1c:	431a      	orrs	r2, r3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	69db      	ldr	r3, [r3, #28]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	4bbf      	ldr	r3, [pc, #764]	; (800912c <UART_SetConfig+0x32c>)
 8008e2e:	4013      	ands	r3, r2
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	6812      	ldr	r2, [r2, #0]
 8008e34:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008e36:	430b      	orrs	r3, r1
 8008e38:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	68da      	ldr	r2, [r3, #12]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	430a      	orrs	r2, r1
 8008e4e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	699b      	ldr	r3, [r3, #24]
 8008e54:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4ab5      	ldr	r2, [pc, #724]	; (8009130 <UART_SetConfig+0x330>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d004      	beq.n	8008e6a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6a1b      	ldr	r3, [r3, #32]
 8008e64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e66:	4313      	orrs	r3, r2
 8008e68:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	689a      	ldr	r2, [r3, #8]
 8008e70:	4bb0      	ldr	r3, [pc, #704]	; (8009134 <UART_SetConfig+0x334>)
 8008e72:	4013      	ands	r3, r2
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	6812      	ldr	r2, [r2, #0]
 8008e78:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008e7a:	430b      	orrs	r3, r1
 8008e7c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e84:	f023 010f 	bic.w	r1, r3, #15
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	430a      	orrs	r2, r1
 8008e92:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4aa7      	ldr	r2, [pc, #668]	; (8009138 <UART_SetConfig+0x338>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d176      	bne.n	8008f8c <UART_SetConfig+0x18c>
 8008e9e:	4ba7      	ldr	r3, [pc, #668]	; (800913c <UART_SetConfig+0x33c>)
 8008ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ea2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ea6:	2b28      	cmp	r3, #40	; 0x28
 8008ea8:	d86c      	bhi.n	8008f84 <UART_SetConfig+0x184>
 8008eaa:	a201      	add	r2, pc, #4	; (adr r2, 8008eb0 <UART_SetConfig+0xb0>)
 8008eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb0:	08008f55 	.word	0x08008f55
 8008eb4:	08008f85 	.word	0x08008f85
 8008eb8:	08008f85 	.word	0x08008f85
 8008ebc:	08008f85 	.word	0x08008f85
 8008ec0:	08008f85 	.word	0x08008f85
 8008ec4:	08008f85 	.word	0x08008f85
 8008ec8:	08008f85 	.word	0x08008f85
 8008ecc:	08008f85 	.word	0x08008f85
 8008ed0:	08008f5d 	.word	0x08008f5d
 8008ed4:	08008f85 	.word	0x08008f85
 8008ed8:	08008f85 	.word	0x08008f85
 8008edc:	08008f85 	.word	0x08008f85
 8008ee0:	08008f85 	.word	0x08008f85
 8008ee4:	08008f85 	.word	0x08008f85
 8008ee8:	08008f85 	.word	0x08008f85
 8008eec:	08008f85 	.word	0x08008f85
 8008ef0:	08008f65 	.word	0x08008f65
 8008ef4:	08008f85 	.word	0x08008f85
 8008ef8:	08008f85 	.word	0x08008f85
 8008efc:	08008f85 	.word	0x08008f85
 8008f00:	08008f85 	.word	0x08008f85
 8008f04:	08008f85 	.word	0x08008f85
 8008f08:	08008f85 	.word	0x08008f85
 8008f0c:	08008f85 	.word	0x08008f85
 8008f10:	08008f6d 	.word	0x08008f6d
 8008f14:	08008f85 	.word	0x08008f85
 8008f18:	08008f85 	.word	0x08008f85
 8008f1c:	08008f85 	.word	0x08008f85
 8008f20:	08008f85 	.word	0x08008f85
 8008f24:	08008f85 	.word	0x08008f85
 8008f28:	08008f85 	.word	0x08008f85
 8008f2c:	08008f85 	.word	0x08008f85
 8008f30:	08008f75 	.word	0x08008f75
 8008f34:	08008f85 	.word	0x08008f85
 8008f38:	08008f85 	.word	0x08008f85
 8008f3c:	08008f85 	.word	0x08008f85
 8008f40:	08008f85 	.word	0x08008f85
 8008f44:	08008f85 	.word	0x08008f85
 8008f48:	08008f85 	.word	0x08008f85
 8008f4c:	08008f85 	.word	0x08008f85
 8008f50:	08008f7d 	.word	0x08008f7d
 8008f54:	2301      	movs	r3, #1
 8008f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f5a:	e222      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8008f5c:	2304      	movs	r3, #4
 8008f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f62:	e21e      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8008f64:	2308      	movs	r3, #8
 8008f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f6a:	e21a      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8008f6c:	2310      	movs	r3, #16
 8008f6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f72:	e216      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8008f74:	2320      	movs	r3, #32
 8008f76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f7a:	e212      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8008f7c:	2340      	movs	r3, #64	; 0x40
 8008f7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f82:	e20e      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8008f84:	2380      	movs	r3, #128	; 0x80
 8008f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f8a:	e20a      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a6b      	ldr	r2, [pc, #428]	; (8009140 <UART_SetConfig+0x340>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d130      	bne.n	8008ff8 <UART_SetConfig+0x1f8>
 8008f96:	4b69      	ldr	r3, [pc, #420]	; (800913c <UART_SetConfig+0x33c>)
 8008f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f9a:	f003 0307 	and.w	r3, r3, #7
 8008f9e:	2b05      	cmp	r3, #5
 8008fa0:	d826      	bhi.n	8008ff0 <UART_SetConfig+0x1f0>
 8008fa2:	a201      	add	r2, pc, #4	; (adr r2, 8008fa8 <UART_SetConfig+0x1a8>)
 8008fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa8:	08008fc1 	.word	0x08008fc1
 8008fac:	08008fc9 	.word	0x08008fc9
 8008fb0:	08008fd1 	.word	0x08008fd1
 8008fb4:	08008fd9 	.word	0x08008fd9
 8008fb8:	08008fe1 	.word	0x08008fe1
 8008fbc:	08008fe9 	.word	0x08008fe9
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fc6:	e1ec      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8008fc8:	2304      	movs	r3, #4
 8008fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fce:	e1e8      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8008fd0:	2308      	movs	r3, #8
 8008fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fd6:	e1e4      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8008fd8:	2310      	movs	r3, #16
 8008fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fde:	e1e0      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8008fe0:	2320      	movs	r3, #32
 8008fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fe6:	e1dc      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8008fe8:	2340      	movs	r3, #64	; 0x40
 8008fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fee:	e1d8      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8008ff0:	2380      	movs	r3, #128	; 0x80
 8008ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ff6:	e1d4      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a51      	ldr	r2, [pc, #324]	; (8009144 <UART_SetConfig+0x344>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d130      	bne.n	8009064 <UART_SetConfig+0x264>
 8009002:	4b4e      	ldr	r3, [pc, #312]	; (800913c <UART_SetConfig+0x33c>)
 8009004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009006:	f003 0307 	and.w	r3, r3, #7
 800900a:	2b05      	cmp	r3, #5
 800900c:	d826      	bhi.n	800905c <UART_SetConfig+0x25c>
 800900e:	a201      	add	r2, pc, #4	; (adr r2, 8009014 <UART_SetConfig+0x214>)
 8009010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009014:	0800902d 	.word	0x0800902d
 8009018:	08009035 	.word	0x08009035
 800901c:	0800903d 	.word	0x0800903d
 8009020:	08009045 	.word	0x08009045
 8009024:	0800904d 	.word	0x0800904d
 8009028:	08009055 	.word	0x08009055
 800902c:	2300      	movs	r3, #0
 800902e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009032:	e1b6      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8009034:	2304      	movs	r3, #4
 8009036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800903a:	e1b2      	b.n	80093a2 <UART_SetConfig+0x5a2>
 800903c:	2308      	movs	r3, #8
 800903e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009042:	e1ae      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8009044:	2310      	movs	r3, #16
 8009046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800904a:	e1aa      	b.n	80093a2 <UART_SetConfig+0x5a2>
 800904c:	2320      	movs	r3, #32
 800904e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009052:	e1a6      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8009054:	2340      	movs	r3, #64	; 0x40
 8009056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800905a:	e1a2      	b.n	80093a2 <UART_SetConfig+0x5a2>
 800905c:	2380      	movs	r3, #128	; 0x80
 800905e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009062:	e19e      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a37      	ldr	r2, [pc, #220]	; (8009148 <UART_SetConfig+0x348>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d130      	bne.n	80090d0 <UART_SetConfig+0x2d0>
 800906e:	4b33      	ldr	r3, [pc, #204]	; (800913c <UART_SetConfig+0x33c>)
 8009070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009072:	f003 0307 	and.w	r3, r3, #7
 8009076:	2b05      	cmp	r3, #5
 8009078:	d826      	bhi.n	80090c8 <UART_SetConfig+0x2c8>
 800907a:	a201      	add	r2, pc, #4	; (adr r2, 8009080 <UART_SetConfig+0x280>)
 800907c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009080:	08009099 	.word	0x08009099
 8009084:	080090a1 	.word	0x080090a1
 8009088:	080090a9 	.word	0x080090a9
 800908c:	080090b1 	.word	0x080090b1
 8009090:	080090b9 	.word	0x080090b9
 8009094:	080090c1 	.word	0x080090c1
 8009098:	2300      	movs	r3, #0
 800909a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800909e:	e180      	b.n	80093a2 <UART_SetConfig+0x5a2>
 80090a0:	2304      	movs	r3, #4
 80090a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090a6:	e17c      	b.n	80093a2 <UART_SetConfig+0x5a2>
 80090a8:	2308      	movs	r3, #8
 80090aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090ae:	e178      	b.n	80093a2 <UART_SetConfig+0x5a2>
 80090b0:	2310      	movs	r3, #16
 80090b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090b6:	e174      	b.n	80093a2 <UART_SetConfig+0x5a2>
 80090b8:	2320      	movs	r3, #32
 80090ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090be:	e170      	b.n	80093a2 <UART_SetConfig+0x5a2>
 80090c0:	2340      	movs	r3, #64	; 0x40
 80090c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090c6:	e16c      	b.n	80093a2 <UART_SetConfig+0x5a2>
 80090c8:	2380      	movs	r3, #128	; 0x80
 80090ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090ce:	e168      	b.n	80093a2 <UART_SetConfig+0x5a2>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a1d      	ldr	r2, [pc, #116]	; (800914c <UART_SetConfig+0x34c>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d142      	bne.n	8009160 <UART_SetConfig+0x360>
 80090da:	4b18      	ldr	r3, [pc, #96]	; (800913c <UART_SetConfig+0x33c>)
 80090dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090de:	f003 0307 	and.w	r3, r3, #7
 80090e2:	2b05      	cmp	r3, #5
 80090e4:	d838      	bhi.n	8009158 <UART_SetConfig+0x358>
 80090e6:	a201      	add	r2, pc, #4	; (adr r2, 80090ec <UART_SetConfig+0x2ec>)
 80090e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ec:	08009105 	.word	0x08009105
 80090f0:	0800910d 	.word	0x0800910d
 80090f4:	08009115 	.word	0x08009115
 80090f8:	0800911d 	.word	0x0800911d
 80090fc:	08009125 	.word	0x08009125
 8009100:	08009151 	.word	0x08009151
 8009104:	2300      	movs	r3, #0
 8009106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800910a:	e14a      	b.n	80093a2 <UART_SetConfig+0x5a2>
 800910c:	2304      	movs	r3, #4
 800910e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009112:	e146      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8009114:	2308      	movs	r3, #8
 8009116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800911a:	e142      	b.n	80093a2 <UART_SetConfig+0x5a2>
 800911c:	2310      	movs	r3, #16
 800911e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009122:	e13e      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8009124:	2320      	movs	r3, #32
 8009126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800912a:	e13a      	b.n	80093a2 <UART_SetConfig+0x5a2>
 800912c:	cfff69f3 	.word	0xcfff69f3
 8009130:	58000c00 	.word	0x58000c00
 8009134:	11fff4ff 	.word	0x11fff4ff
 8009138:	40011000 	.word	0x40011000
 800913c:	58024400 	.word	0x58024400
 8009140:	40004400 	.word	0x40004400
 8009144:	40004800 	.word	0x40004800
 8009148:	40004c00 	.word	0x40004c00
 800914c:	40005000 	.word	0x40005000
 8009150:	2340      	movs	r3, #64	; 0x40
 8009152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009156:	e124      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8009158:	2380      	movs	r3, #128	; 0x80
 800915a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800915e:	e120      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4acc      	ldr	r2, [pc, #816]	; (8009498 <UART_SetConfig+0x698>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d176      	bne.n	8009258 <UART_SetConfig+0x458>
 800916a:	4bcc      	ldr	r3, [pc, #816]	; (800949c <UART_SetConfig+0x69c>)
 800916c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800916e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009172:	2b28      	cmp	r3, #40	; 0x28
 8009174:	d86c      	bhi.n	8009250 <UART_SetConfig+0x450>
 8009176:	a201      	add	r2, pc, #4	; (adr r2, 800917c <UART_SetConfig+0x37c>)
 8009178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800917c:	08009221 	.word	0x08009221
 8009180:	08009251 	.word	0x08009251
 8009184:	08009251 	.word	0x08009251
 8009188:	08009251 	.word	0x08009251
 800918c:	08009251 	.word	0x08009251
 8009190:	08009251 	.word	0x08009251
 8009194:	08009251 	.word	0x08009251
 8009198:	08009251 	.word	0x08009251
 800919c:	08009229 	.word	0x08009229
 80091a0:	08009251 	.word	0x08009251
 80091a4:	08009251 	.word	0x08009251
 80091a8:	08009251 	.word	0x08009251
 80091ac:	08009251 	.word	0x08009251
 80091b0:	08009251 	.word	0x08009251
 80091b4:	08009251 	.word	0x08009251
 80091b8:	08009251 	.word	0x08009251
 80091bc:	08009231 	.word	0x08009231
 80091c0:	08009251 	.word	0x08009251
 80091c4:	08009251 	.word	0x08009251
 80091c8:	08009251 	.word	0x08009251
 80091cc:	08009251 	.word	0x08009251
 80091d0:	08009251 	.word	0x08009251
 80091d4:	08009251 	.word	0x08009251
 80091d8:	08009251 	.word	0x08009251
 80091dc:	08009239 	.word	0x08009239
 80091e0:	08009251 	.word	0x08009251
 80091e4:	08009251 	.word	0x08009251
 80091e8:	08009251 	.word	0x08009251
 80091ec:	08009251 	.word	0x08009251
 80091f0:	08009251 	.word	0x08009251
 80091f4:	08009251 	.word	0x08009251
 80091f8:	08009251 	.word	0x08009251
 80091fc:	08009241 	.word	0x08009241
 8009200:	08009251 	.word	0x08009251
 8009204:	08009251 	.word	0x08009251
 8009208:	08009251 	.word	0x08009251
 800920c:	08009251 	.word	0x08009251
 8009210:	08009251 	.word	0x08009251
 8009214:	08009251 	.word	0x08009251
 8009218:	08009251 	.word	0x08009251
 800921c:	08009249 	.word	0x08009249
 8009220:	2301      	movs	r3, #1
 8009222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009226:	e0bc      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8009228:	2304      	movs	r3, #4
 800922a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800922e:	e0b8      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8009230:	2308      	movs	r3, #8
 8009232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009236:	e0b4      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8009238:	2310      	movs	r3, #16
 800923a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800923e:	e0b0      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8009240:	2320      	movs	r3, #32
 8009242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009246:	e0ac      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8009248:	2340      	movs	r3, #64	; 0x40
 800924a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800924e:	e0a8      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8009250:	2380      	movs	r3, #128	; 0x80
 8009252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009256:	e0a4      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a90      	ldr	r2, [pc, #576]	; (80094a0 <UART_SetConfig+0x6a0>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d130      	bne.n	80092c4 <UART_SetConfig+0x4c4>
 8009262:	4b8e      	ldr	r3, [pc, #568]	; (800949c <UART_SetConfig+0x69c>)
 8009264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009266:	f003 0307 	and.w	r3, r3, #7
 800926a:	2b05      	cmp	r3, #5
 800926c:	d826      	bhi.n	80092bc <UART_SetConfig+0x4bc>
 800926e:	a201      	add	r2, pc, #4	; (adr r2, 8009274 <UART_SetConfig+0x474>)
 8009270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009274:	0800928d 	.word	0x0800928d
 8009278:	08009295 	.word	0x08009295
 800927c:	0800929d 	.word	0x0800929d
 8009280:	080092a5 	.word	0x080092a5
 8009284:	080092ad 	.word	0x080092ad
 8009288:	080092b5 	.word	0x080092b5
 800928c:	2300      	movs	r3, #0
 800928e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009292:	e086      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8009294:	2304      	movs	r3, #4
 8009296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800929a:	e082      	b.n	80093a2 <UART_SetConfig+0x5a2>
 800929c:	2308      	movs	r3, #8
 800929e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092a2:	e07e      	b.n	80093a2 <UART_SetConfig+0x5a2>
 80092a4:	2310      	movs	r3, #16
 80092a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092aa:	e07a      	b.n	80093a2 <UART_SetConfig+0x5a2>
 80092ac:	2320      	movs	r3, #32
 80092ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092b2:	e076      	b.n	80093a2 <UART_SetConfig+0x5a2>
 80092b4:	2340      	movs	r3, #64	; 0x40
 80092b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092ba:	e072      	b.n	80093a2 <UART_SetConfig+0x5a2>
 80092bc:	2380      	movs	r3, #128	; 0x80
 80092be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092c2:	e06e      	b.n	80093a2 <UART_SetConfig+0x5a2>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a76      	ldr	r2, [pc, #472]	; (80094a4 <UART_SetConfig+0x6a4>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d130      	bne.n	8009330 <UART_SetConfig+0x530>
 80092ce:	4b73      	ldr	r3, [pc, #460]	; (800949c <UART_SetConfig+0x69c>)
 80092d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092d2:	f003 0307 	and.w	r3, r3, #7
 80092d6:	2b05      	cmp	r3, #5
 80092d8:	d826      	bhi.n	8009328 <UART_SetConfig+0x528>
 80092da:	a201      	add	r2, pc, #4	; (adr r2, 80092e0 <UART_SetConfig+0x4e0>)
 80092dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e0:	080092f9 	.word	0x080092f9
 80092e4:	08009301 	.word	0x08009301
 80092e8:	08009309 	.word	0x08009309
 80092ec:	08009311 	.word	0x08009311
 80092f0:	08009319 	.word	0x08009319
 80092f4:	08009321 	.word	0x08009321
 80092f8:	2300      	movs	r3, #0
 80092fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092fe:	e050      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8009300:	2304      	movs	r3, #4
 8009302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009306:	e04c      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8009308:	2308      	movs	r3, #8
 800930a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800930e:	e048      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8009310:	2310      	movs	r3, #16
 8009312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009316:	e044      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8009318:	2320      	movs	r3, #32
 800931a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800931e:	e040      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8009320:	2340      	movs	r3, #64	; 0x40
 8009322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009326:	e03c      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8009328:	2380      	movs	r3, #128	; 0x80
 800932a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800932e:	e038      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a5c      	ldr	r2, [pc, #368]	; (80094a8 <UART_SetConfig+0x6a8>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d130      	bne.n	800939c <UART_SetConfig+0x59c>
 800933a:	4b58      	ldr	r3, [pc, #352]	; (800949c <UART_SetConfig+0x69c>)
 800933c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800933e:	f003 0307 	and.w	r3, r3, #7
 8009342:	2b05      	cmp	r3, #5
 8009344:	d826      	bhi.n	8009394 <UART_SetConfig+0x594>
 8009346:	a201      	add	r2, pc, #4	; (adr r2, 800934c <UART_SetConfig+0x54c>)
 8009348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800934c:	08009365 	.word	0x08009365
 8009350:	0800936d 	.word	0x0800936d
 8009354:	08009375 	.word	0x08009375
 8009358:	0800937d 	.word	0x0800937d
 800935c:	08009385 	.word	0x08009385
 8009360:	0800938d 	.word	0x0800938d
 8009364:	2302      	movs	r3, #2
 8009366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800936a:	e01a      	b.n	80093a2 <UART_SetConfig+0x5a2>
 800936c:	2304      	movs	r3, #4
 800936e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009372:	e016      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8009374:	2308      	movs	r3, #8
 8009376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800937a:	e012      	b.n	80093a2 <UART_SetConfig+0x5a2>
 800937c:	2310      	movs	r3, #16
 800937e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009382:	e00e      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8009384:	2320      	movs	r3, #32
 8009386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800938a:	e00a      	b.n	80093a2 <UART_SetConfig+0x5a2>
 800938c:	2340      	movs	r3, #64	; 0x40
 800938e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009392:	e006      	b.n	80093a2 <UART_SetConfig+0x5a2>
 8009394:	2380      	movs	r3, #128	; 0x80
 8009396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800939a:	e002      	b.n	80093a2 <UART_SetConfig+0x5a2>
 800939c:	2380      	movs	r3, #128	; 0x80
 800939e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a40      	ldr	r2, [pc, #256]	; (80094a8 <UART_SetConfig+0x6a8>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	f040 80ef 	bne.w	800958c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80093ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80093b2:	2b20      	cmp	r3, #32
 80093b4:	dc46      	bgt.n	8009444 <UART_SetConfig+0x644>
 80093b6:	2b02      	cmp	r3, #2
 80093b8:	f2c0 8081 	blt.w	80094be <UART_SetConfig+0x6be>
 80093bc:	3b02      	subs	r3, #2
 80093be:	2b1e      	cmp	r3, #30
 80093c0:	d87d      	bhi.n	80094be <UART_SetConfig+0x6be>
 80093c2:	a201      	add	r2, pc, #4	; (adr r2, 80093c8 <UART_SetConfig+0x5c8>)
 80093c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c8:	0800944b 	.word	0x0800944b
 80093cc:	080094bf 	.word	0x080094bf
 80093d0:	08009453 	.word	0x08009453
 80093d4:	080094bf 	.word	0x080094bf
 80093d8:	080094bf 	.word	0x080094bf
 80093dc:	080094bf 	.word	0x080094bf
 80093e0:	08009463 	.word	0x08009463
 80093e4:	080094bf 	.word	0x080094bf
 80093e8:	080094bf 	.word	0x080094bf
 80093ec:	080094bf 	.word	0x080094bf
 80093f0:	080094bf 	.word	0x080094bf
 80093f4:	080094bf 	.word	0x080094bf
 80093f8:	080094bf 	.word	0x080094bf
 80093fc:	080094bf 	.word	0x080094bf
 8009400:	08009473 	.word	0x08009473
 8009404:	080094bf 	.word	0x080094bf
 8009408:	080094bf 	.word	0x080094bf
 800940c:	080094bf 	.word	0x080094bf
 8009410:	080094bf 	.word	0x080094bf
 8009414:	080094bf 	.word	0x080094bf
 8009418:	080094bf 	.word	0x080094bf
 800941c:	080094bf 	.word	0x080094bf
 8009420:	080094bf 	.word	0x080094bf
 8009424:	080094bf 	.word	0x080094bf
 8009428:	080094bf 	.word	0x080094bf
 800942c:	080094bf 	.word	0x080094bf
 8009430:	080094bf 	.word	0x080094bf
 8009434:	080094bf 	.word	0x080094bf
 8009438:	080094bf 	.word	0x080094bf
 800943c:	080094bf 	.word	0x080094bf
 8009440:	080094b1 	.word	0x080094b1
 8009444:	2b40      	cmp	r3, #64	; 0x40
 8009446:	d036      	beq.n	80094b6 <UART_SetConfig+0x6b6>
 8009448:	e039      	b.n	80094be <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800944a:	f7fc fed3 	bl	80061f4 <HAL_RCCEx_GetD3PCLK1Freq>
 800944e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009450:	e03b      	b.n	80094ca <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009452:	f107 0314 	add.w	r3, r7, #20
 8009456:	4618      	mov	r0, r3
 8009458:	f7fc fee2 	bl	8006220 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800945c:	69bb      	ldr	r3, [r7, #24]
 800945e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009460:	e033      	b.n	80094ca <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009462:	f107 0308 	add.w	r3, r7, #8
 8009466:	4618      	mov	r0, r3
 8009468:	f7fd f82e 	bl	80064c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009470:	e02b      	b.n	80094ca <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009472:	4b0a      	ldr	r3, [pc, #40]	; (800949c <UART_SetConfig+0x69c>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f003 0320 	and.w	r3, r3, #32
 800947a:	2b00      	cmp	r3, #0
 800947c:	d009      	beq.n	8009492 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800947e:	4b07      	ldr	r3, [pc, #28]	; (800949c <UART_SetConfig+0x69c>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	08db      	lsrs	r3, r3, #3
 8009484:	f003 0303 	and.w	r3, r3, #3
 8009488:	4a08      	ldr	r2, [pc, #32]	; (80094ac <UART_SetConfig+0x6ac>)
 800948a:	fa22 f303 	lsr.w	r3, r2, r3
 800948e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009490:	e01b      	b.n	80094ca <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8009492:	4b06      	ldr	r3, [pc, #24]	; (80094ac <UART_SetConfig+0x6ac>)
 8009494:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009496:	e018      	b.n	80094ca <UART_SetConfig+0x6ca>
 8009498:	40011400 	.word	0x40011400
 800949c:	58024400 	.word	0x58024400
 80094a0:	40007800 	.word	0x40007800
 80094a4:	40007c00 	.word	0x40007c00
 80094a8:	58000c00 	.word	0x58000c00
 80094ac:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80094b0:	4bc4      	ldr	r3, [pc, #784]	; (80097c4 <UART_SetConfig+0x9c4>)
 80094b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80094b4:	e009      	b.n	80094ca <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80094bc:	e005      	b.n	80094ca <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80094be:	2300      	movs	r3, #0
 80094c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80094c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80094ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	f000 81da 	beq.w	8009886 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d6:	4abc      	ldr	r2, [pc, #752]	; (80097c8 <UART_SetConfig+0x9c8>)
 80094d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094dc:	461a      	mov	r2, r3
 80094de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80094e4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	685a      	ldr	r2, [r3, #4]
 80094ea:	4613      	mov	r3, r2
 80094ec:	005b      	lsls	r3, r3, #1
 80094ee:	4413      	add	r3, r2
 80094f0:	6a3a      	ldr	r2, [r7, #32]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d305      	bcc.n	8009502 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80094fc:	6a3a      	ldr	r2, [r7, #32]
 80094fe:	429a      	cmp	r2, r3
 8009500:	d903      	bls.n	800950a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009508:	e1bd      	b.n	8009886 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800950a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800950c:	4618      	mov	r0, r3
 800950e:	f04f 0100 	mov.w	r1, #0
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009516:	4aac      	ldr	r2, [pc, #688]	; (80097c8 <UART_SetConfig+0x9c8>)
 8009518:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800951c:	b29a      	uxth	r2, r3
 800951e:	f04f 0300 	mov.w	r3, #0
 8009522:	f7f6 fed9 	bl	80002d8 <__aeabi_uldivmod>
 8009526:	4602      	mov	r2, r0
 8009528:	460b      	mov	r3, r1
 800952a:	4610      	mov	r0, r2
 800952c:	4619      	mov	r1, r3
 800952e:	f04f 0200 	mov.w	r2, #0
 8009532:	f04f 0300 	mov.w	r3, #0
 8009536:	020b      	lsls	r3, r1, #8
 8009538:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800953c:	0202      	lsls	r2, r0, #8
 800953e:	6879      	ldr	r1, [r7, #4]
 8009540:	6849      	ldr	r1, [r1, #4]
 8009542:	0849      	lsrs	r1, r1, #1
 8009544:	4608      	mov	r0, r1
 8009546:	f04f 0100 	mov.w	r1, #0
 800954a:	1814      	adds	r4, r2, r0
 800954c:	eb43 0501 	adc.w	r5, r3, r1
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	461a      	mov	r2, r3
 8009556:	f04f 0300 	mov.w	r3, #0
 800955a:	4620      	mov	r0, r4
 800955c:	4629      	mov	r1, r5
 800955e:	f7f6 febb 	bl	80002d8 <__aeabi_uldivmod>
 8009562:	4602      	mov	r2, r0
 8009564:	460b      	mov	r3, r1
 8009566:	4613      	mov	r3, r2
 8009568:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800956a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009570:	d308      	bcc.n	8009584 <UART_SetConfig+0x784>
 8009572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009574:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009578:	d204      	bcs.n	8009584 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009580:	60da      	str	r2, [r3, #12]
 8009582:	e180      	b.n	8009886 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8009584:	2301      	movs	r3, #1
 8009586:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800958a:	e17c      	b.n	8009886 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	69db      	ldr	r3, [r3, #28]
 8009590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009594:	f040 80bf 	bne.w	8009716 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8009598:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800959c:	2b20      	cmp	r3, #32
 800959e:	dc49      	bgt.n	8009634 <UART_SetConfig+0x834>
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	db7c      	blt.n	800969e <UART_SetConfig+0x89e>
 80095a4:	2b20      	cmp	r3, #32
 80095a6:	d87a      	bhi.n	800969e <UART_SetConfig+0x89e>
 80095a8:	a201      	add	r2, pc, #4	; (adr r2, 80095b0 <UART_SetConfig+0x7b0>)
 80095aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ae:	bf00      	nop
 80095b0:	0800963b 	.word	0x0800963b
 80095b4:	08009643 	.word	0x08009643
 80095b8:	0800969f 	.word	0x0800969f
 80095bc:	0800969f 	.word	0x0800969f
 80095c0:	0800964b 	.word	0x0800964b
 80095c4:	0800969f 	.word	0x0800969f
 80095c8:	0800969f 	.word	0x0800969f
 80095cc:	0800969f 	.word	0x0800969f
 80095d0:	0800965b 	.word	0x0800965b
 80095d4:	0800969f 	.word	0x0800969f
 80095d8:	0800969f 	.word	0x0800969f
 80095dc:	0800969f 	.word	0x0800969f
 80095e0:	0800969f 	.word	0x0800969f
 80095e4:	0800969f 	.word	0x0800969f
 80095e8:	0800969f 	.word	0x0800969f
 80095ec:	0800969f 	.word	0x0800969f
 80095f0:	0800966b 	.word	0x0800966b
 80095f4:	0800969f 	.word	0x0800969f
 80095f8:	0800969f 	.word	0x0800969f
 80095fc:	0800969f 	.word	0x0800969f
 8009600:	0800969f 	.word	0x0800969f
 8009604:	0800969f 	.word	0x0800969f
 8009608:	0800969f 	.word	0x0800969f
 800960c:	0800969f 	.word	0x0800969f
 8009610:	0800969f 	.word	0x0800969f
 8009614:	0800969f 	.word	0x0800969f
 8009618:	0800969f 	.word	0x0800969f
 800961c:	0800969f 	.word	0x0800969f
 8009620:	0800969f 	.word	0x0800969f
 8009624:	0800969f 	.word	0x0800969f
 8009628:	0800969f 	.word	0x0800969f
 800962c:	0800969f 	.word	0x0800969f
 8009630:	08009691 	.word	0x08009691
 8009634:	2b40      	cmp	r3, #64	; 0x40
 8009636:	d02e      	beq.n	8009696 <UART_SetConfig+0x896>
 8009638:	e031      	b.n	800969e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800963a:	f7fb fe6f 	bl	800531c <HAL_RCC_GetPCLK1Freq>
 800963e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009640:	e033      	b.n	80096aa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009642:	f7fb fe81 	bl	8005348 <HAL_RCC_GetPCLK2Freq>
 8009646:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009648:	e02f      	b.n	80096aa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800964a:	f107 0314 	add.w	r3, r7, #20
 800964e:	4618      	mov	r0, r3
 8009650:	f7fc fde6 	bl	8006220 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009654:	69bb      	ldr	r3, [r7, #24]
 8009656:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009658:	e027      	b.n	80096aa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800965a:	f107 0308 	add.w	r3, r7, #8
 800965e:	4618      	mov	r0, r3
 8009660:	f7fc ff32 	bl	80064c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009668:	e01f      	b.n	80096aa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800966a:	4b58      	ldr	r3, [pc, #352]	; (80097cc <UART_SetConfig+0x9cc>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f003 0320 	and.w	r3, r3, #32
 8009672:	2b00      	cmp	r3, #0
 8009674:	d009      	beq.n	800968a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009676:	4b55      	ldr	r3, [pc, #340]	; (80097cc <UART_SetConfig+0x9cc>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	08db      	lsrs	r3, r3, #3
 800967c:	f003 0303 	and.w	r3, r3, #3
 8009680:	4a53      	ldr	r2, [pc, #332]	; (80097d0 <UART_SetConfig+0x9d0>)
 8009682:	fa22 f303 	lsr.w	r3, r2, r3
 8009686:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009688:	e00f      	b.n	80096aa <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800968a:	4b51      	ldr	r3, [pc, #324]	; (80097d0 <UART_SetConfig+0x9d0>)
 800968c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800968e:	e00c      	b.n	80096aa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009690:	4b4c      	ldr	r3, [pc, #304]	; (80097c4 <UART_SetConfig+0x9c4>)
 8009692:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009694:	e009      	b.n	80096aa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800969a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800969c:	e005      	b.n	80096aa <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800969e:	2300      	movs	r3, #0
 80096a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80096a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80096aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f000 80ea 	beq.w	8009886 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b6:	4a44      	ldr	r2, [pc, #272]	; (80097c8 <UART_SetConfig+0x9c8>)
 80096b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096bc:	461a      	mov	r2, r3
 80096be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80096c4:	005a      	lsls	r2, r3, #1
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	085b      	lsrs	r3, r3, #1
 80096cc:	441a      	add	r2, r3
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096dc:	2b0f      	cmp	r3, #15
 80096de:	d916      	bls.n	800970e <UART_SetConfig+0x90e>
 80096e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096e6:	d212      	bcs.n	800970e <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80096e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	f023 030f 	bic.w	r3, r3, #15
 80096f0:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80096f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f4:	085b      	lsrs	r3, r3, #1
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	f003 0307 	and.w	r3, r3, #7
 80096fc:	b29a      	uxth	r2, r3
 80096fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009700:	4313      	orrs	r3, r2
 8009702:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800970a:	60da      	str	r2, [r3, #12]
 800970c:	e0bb      	b.n	8009886 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009714:	e0b7      	b.n	8009886 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009716:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800971a:	2b20      	cmp	r3, #32
 800971c:	dc4a      	bgt.n	80097b4 <UART_SetConfig+0x9b4>
 800971e:	2b00      	cmp	r3, #0
 8009720:	f2c0 8086 	blt.w	8009830 <UART_SetConfig+0xa30>
 8009724:	2b20      	cmp	r3, #32
 8009726:	f200 8083 	bhi.w	8009830 <UART_SetConfig+0xa30>
 800972a:	a201      	add	r2, pc, #4	; (adr r2, 8009730 <UART_SetConfig+0x930>)
 800972c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009730:	080097bb 	.word	0x080097bb
 8009734:	080097d5 	.word	0x080097d5
 8009738:	08009831 	.word	0x08009831
 800973c:	08009831 	.word	0x08009831
 8009740:	080097dd 	.word	0x080097dd
 8009744:	08009831 	.word	0x08009831
 8009748:	08009831 	.word	0x08009831
 800974c:	08009831 	.word	0x08009831
 8009750:	080097ed 	.word	0x080097ed
 8009754:	08009831 	.word	0x08009831
 8009758:	08009831 	.word	0x08009831
 800975c:	08009831 	.word	0x08009831
 8009760:	08009831 	.word	0x08009831
 8009764:	08009831 	.word	0x08009831
 8009768:	08009831 	.word	0x08009831
 800976c:	08009831 	.word	0x08009831
 8009770:	080097fd 	.word	0x080097fd
 8009774:	08009831 	.word	0x08009831
 8009778:	08009831 	.word	0x08009831
 800977c:	08009831 	.word	0x08009831
 8009780:	08009831 	.word	0x08009831
 8009784:	08009831 	.word	0x08009831
 8009788:	08009831 	.word	0x08009831
 800978c:	08009831 	.word	0x08009831
 8009790:	08009831 	.word	0x08009831
 8009794:	08009831 	.word	0x08009831
 8009798:	08009831 	.word	0x08009831
 800979c:	08009831 	.word	0x08009831
 80097a0:	08009831 	.word	0x08009831
 80097a4:	08009831 	.word	0x08009831
 80097a8:	08009831 	.word	0x08009831
 80097ac:	08009831 	.word	0x08009831
 80097b0:	08009823 	.word	0x08009823
 80097b4:	2b40      	cmp	r3, #64	; 0x40
 80097b6:	d037      	beq.n	8009828 <UART_SetConfig+0xa28>
 80097b8:	e03a      	b.n	8009830 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097ba:	f7fb fdaf 	bl	800531c <HAL_RCC_GetPCLK1Freq>
 80097be:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80097c0:	e03c      	b.n	800983c <UART_SetConfig+0xa3c>
 80097c2:	bf00      	nop
 80097c4:	003d0900 	.word	0x003d0900
 80097c8:	0800a000 	.word	0x0800a000
 80097cc:	58024400 	.word	0x58024400
 80097d0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097d4:	f7fb fdb8 	bl	8005348 <HAL_RCC_GetPCLK2Freq>
 80097d8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80097da:	e02f      	b.n	800983c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097dc:	f107 0314 	add.w	r3, r7, #20
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7fc fd1d 	bl	8006220 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80097e6:	69bb      	ldr	r3, [r7, #24]
 80097e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097ea:	e027      	b.n	800983c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097ec:	f107 0308 	add.w	r3, r7, #8
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7fc fe69 	bl	80064c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80097fa:	e01f      	b.n	800983c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097fc:	4b2c      	ldr	r3, [pc, #176]	; (80098b0 <UART_SetConfig+0xab0>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f003 0320 	and.w	r3, r3, #32
 8009804:	2b00      	cmp	r3, #0
 8009806:	d009      	beq.n	800981c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009808:	4b29      	ldr	r3, [pc, #164]	; (80098b0 <UART_SetConfig+0xab0>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	08db      	lsrs	r3, r3, #3
 800980e:	f003 0303 	and.w	r3, r3, #3
 8009812:	4a28      	ldr	r2, [pc, #160]	; (80098b4 <UART_SetConfig+0xab4>)
 8009814:	fa22 f303 	lsr.w	r3, r2, r3
 8009818:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800981a:	e00f      	b.n	800983c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800981c:	4b25      	ldr	r3, [pc, #148]	; (80098b4 <UART_SetConfig+0xab4>)
 800981e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009820:	e00c      	b.n	800983c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009822:	4b25      	ldr	r3, [pc, #148]	; (80098b8 <UART_SetConfig+0xab8>)
 8009824:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009826:	e009      	b.n	800983c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009828:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800982c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800982e:	e005      	b.n	800983c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8009830:	2300      	movs	r3, #0
 8009832:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800983a:	bf00      	nop
    }

    if (pclk != 0U)
 800983c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983e:	2b00      	cmp	r3, #0
 8009840:	d021      	beq.n	8009886 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009846:	4a1d      	ldr	r2, [pc, #116]	; (80098bc <UART_SetConfig+0xabc>)
 8009848:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800984c:	461a      	mov	r2, r3
 800984e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009850:	fbb3 f2f2 	udiv	r2, r3, r2
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	085b      	lsrs	r3, r3, #1
 800985a:	441a      	add	r2, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	fbb2 f3f3 	udiv	r3, r2, r3
 8009864:	b29b      	uxth	r3, r3
 8009866:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800986a:	2b0f      	cmp	r3, #15
 800986c:	d908      	bls.n	8009880 <UART_SetConfig+0xa80>
 800986e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009874:	d204      	bcs.n	8009880 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800987c:	60da      	str	r2, [r3, #12]
 800987e:	e002      	b.n	8009886 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009880:	2301      	movs	r3, #1
 8009882:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2201      	movs	r2, #1
 800988a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2201      	movs	r2, #1
 8009892:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2200      	movs	r2, #0
 800989a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80098a2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3738      	adds	r7, #56	; 0x38
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bdb0      	pop	{r4, r5, r7, pc}
 80098ae:	bf00      	nop
 80098b0:	58024400 	.word	0x58024400
 80098b4:	03d09000 	.word	0x03d09000
 80098b8:	003d0900 	.word	0x003d0900
 80098bc:	0800a000 	.word	0x0800a000

080098c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098cc:	f003 0301 	and.w	r3, r3, #1
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d00a      	beq.n	80098ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	430a      	orrs	r2, r1
 80098e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ee:	f003 0302 	and.w	r3, r3, #2
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00a      	beq.n	800990c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	430a      	orrs	r2, r1
 800990a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009910:	f003 0304 	and.w	r3, r3, #4
 8009914:	2b00      	cmp	r3, #0
 8009916:	d00a      	beq.n	800992e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	430a      	orrs	r2, r1
 800992c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009932:	f003 0308 	and.w	r3, r3, #8
 8009936:	2b00      	cmp	r3, #0
 8009938:	d00a      	beq.n	8009950 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	430a      	orrs	r2, r1
 800994e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009954:	f003 0310 	and.w	r3, r3, #16
 8009958:	2b00      	cmp	r3, #0
 800995a:	d00a      	beq.n	8009972 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	430a      	orrs	r2, r1
 8009970:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009976:	f003 0320 	and.w	r3, r3, #32
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00a      	beq.n	8009994 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	689b      	ldr	r3, [r3, #8]
 8009984:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	430a      	orrs	r2, r1
 8009992:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800999c:	2b00      	cmp	r3, #0
 800999e:	d01a      	beq.n	80099d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	430a      	orrs	r2, r1
 80099b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80099be:	d10a      	bne.n	80099d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	430a      	orrs	r2, r1
 80099d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d00a      	beq.n	80099f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	430a      	orrs	r2, r1
 80099f6:	605a      	str	r2, [r3, #4]
  }
}
 80099f8:	bf00      	nop
 80099fa:	370c      	adds	r7, #12
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b086      	sub	sp, #24
 8009a08:	af02      	add	r7, sp, #8
 8009a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009a14:	f7f7 ff8e 	bl	8001934 <HAL_GetTick>
 8009a18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f003 0308 	and.w	r3, r3, #8
 8009a24:	2b08      	cmp	r3, #8
 8009a26:	d10e      	bne.n	8009a46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009a2c:	9300      	str	r3, [sp, #0]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2200      	movs	r2, #0
 8009a32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 f82f 	bl	8009a9a <UART_WaitOnFlagUntilTimeout>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d001      	beq.n	8009a46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a42:	2303      	movs	r3, #3
 8009a44:	e025      	b.n	8009a92 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f003 0304 	and.w	r3, r3, #4
 8009a50:	2b04      	cmp	r3, #4
 8009a52:	d10e      	bne.n	8009a72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009a58:	9300      	str	r3, [sp, #0]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 f819 	bl	8009a9a <UART_WaitOnFlagUntilTimeout>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d001      	beq.n	8009a72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a6e:	2303      	movs	r3, #3
 8009a70:	e00f      	b.n	8009a92 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2220      	movs	r2, #32
 8009a76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2220      	movs	r2, #32
 8009a7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2200      	movs	r2, #0
 8009a86:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009a90:	2300      	movs	r3, #0
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3710      	adds	r7, #16
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b084      	sub	sp, #16
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	60f8      	str	r0, [r7, #12]
 8009aa2:	60b9      	str	r1, [r7, #8]
 8009aa4:	603b      	str	r3, [r7, #0]
 8009aa6:	4613      	mov	r3, r2
 8009aa8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009aaa:	e062      	b.n	8009b72 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009aac:	69bb      	ldr	r3, [r7, #24]
 8009aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ab2:	d05e      	beq.n	8009b72 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ab4:	f7f7 ff3e 	bl	8001934 <HAL_GetTick>
 8009ab8:	4602      	mov	r2, r0
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	1ad3      	subs	r3, r2, r3
 8009abe:	69ba      	ldr	r2, [r7, #24]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d302      	bcc.n	8009aca <UART_WaitOnFlagUntilTimeout+0x30>
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d11d      	bne.n	8009b06 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009ad8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	689a      	ldr	r2, [r3, #8]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f022 0201 	bic.w	r2, r2, #1
 8009ae8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2220      	movs	r2, #32
 8009aee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2220      	movs	r2, #32
 8009af6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2200      	movs	r2, #0
 8009afe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009b02:	2303      	movs	r3, #3
 8009b04:	e045      	b.n	8009b92 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f003 0304 	and.w	r3, r3, #4
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d02e      	beq.n	8009b72 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	69db      	ldr	r3, [r3, #28]
 8009b1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b22:	d126      	bne.n	8009b72 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b2c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009b3c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	689a      	ldr	r2, [r3, #8]
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f022 0201 	bic.w	r2, r2, #1
 8009b4c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2220      	movs	r2, #32
 8009b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2220      	movs	r2, #32
 8009b5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2220      	movs	r2, #32
 8009b62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009b6e:	2303      	movs	r3, #3
 8009b70:	e00f      	b.n	8009b92 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	69da      	ldr	r2, [r3, #28]
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	4013      	ands	r3, r2
 8009b7c:	68ba      	ldr	r2, [r7, #8]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	bf0c      	ite	eq
 8009b82:	2301      	moveq	r3, #1
 8009b84:	2300      	movne	r3, #0
 8009b86:	b2db      	uxtb	r3, r3
 8009b88:	461a      	mov	r2, r3
 8009b8a:	79fb      	ldrb	r3, [r7, #7]
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d08d      	beq.n	8009aac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b90:	2300      	movs	r3, #0
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3710      	adds	r7, #16
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
	...

08009b9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b083      	sub	sp, #12
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009bb2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	6899      	ldr	r1, [r3, #8]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	4b0f      	ldr	r3, [pc, #60]	; (8009bfc <UART_EndRxTransfer+0x60>)
 8009bc0:	400b      	ands	r3, r1
 8009bc2:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d107      	bne.n	8009bdc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f022 0210 	bic.w	r2, r2, #16
 8009bda:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2220      	movs	r2, #32
 8009be0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2200      	movs	r2, #0
 8009bee:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009bf0:	bf00      	nop
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr
 8009bfc:	effffffe 	.word	0xeffffffe

08009c00 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b084      	sub	sp, #16
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f7ff f8d8 	bl	8008dd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c24:	bf00      	nop
 8009c26:	3710      	adds	r7, #16
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	681a      	ldr	r2, [r3, #0]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c42:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2220      	movs	r2, #32
 8009c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f7f7 f89e 	bl	8000d94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c58:	bf00      	nop
 8009c5a:	3708      	adds	r7, #8
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b086      	sub	sp, #24
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	607a      	str	r2, [r7, #4]
 8009c6c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d101      	bne.n	8009c78 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8009c74:	2301      	movs	r3, #1
 8009c76:	e056      	b.n	8009d26 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d106      	bne.n	8009c90 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2200      	movs	r2, #0
 8009c86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8009c8a:	68f8      	ldr	r0, [r7, #12]
 8009c8c:	f7f7 fac8 	bl	8001220 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2224      	movs	r2, #36	; 0x24
 8009c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f022 0201 	bic.w	r2, r2, #1
 8009ca6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f7ff f8a9 	bl	8008e00 <UART_SetConfig>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d101      	bne.n	8009cb8 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	e036      	b.n	8009d26 <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d002      	beq.n	8009cc6 <HAL_RS485Ex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8009cc0:	68f8      	ldr	r0, [r7, #12]
 8009cc2:	f7ff fdfd 	bl	80098c0 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	689a      	ldr	r2, [r3, #8]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009cd4:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	68ba      	ldr	r2, [r7, #8]
 8009ce6:	430a      	orrs	r2, r1
 8009ce8:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	055b      	lsls	r3, r3, #21
 8009cee:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	041b      	lsls	r3, r3, #16
 8009cf4:	697a      	ldr	r2, [r7, #20]
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	4b0b      	ldr	r3, [pc, #44]	; (8009d30 <HAL_RS485Ex_Init+0xd0>)
 8009d02:	4013      	ands	r3, r2
 8009d04:	68fa      	ldr	r2, [r7, #12]
 8009d06:	6812      	ldr	r2, [r2, #0]
 8009d08:	6979      	ldr	r1, [r7, #20]
 8009d0a:	430b      	orrs	r3, r1
 8009d0c:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f042 0201 	orr.w	r2, r2, #1
 8009d1c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009d1e:	68f8      	ldr	r0, [r7, #12]
 8009d20:	f7ff fe70 	bl	8009a04 <UART_CheckIdleState>
 8009d24:	4603      	mov	r3, r0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3718      	adds	r7, #24
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	fc00ffff 	.word	0xfc00ffff

08009d34 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009d3c:	bf00      	nop
 8009d3e:	370c      	adds	r7, #12
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009d50:	bf00      	nop
 8009d52:	370c      	adds	r7, #12
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b083      	sub	sp, #12
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009d64:	bf00      	nop
 8009d66:	370c      	adds	r7, #12
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b085      	sub	sp, #20
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	d101      	bne.n	8009d86 <HAL_UARTEx_DisableFifoMode+0x16>
 8009d82:	2302      	movs	r3, #2
 8009d84:	e027      	b.n	8009dd6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2201      	movs	r2, #1
 8009d8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2224      	movs	r2, #36	; 0x24
 8009d92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f022 0201 	bic.w	r2, r2, #1
 8009dac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009db4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2200      	movs	r2, #0
 8009dba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	68fa      	ldr	r2, [r7, #12]
 8009dc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2220      	movs	r2, #32
 8009dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009dd4:	2300      	movs	r3, #0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3714      	adds	r7, #20
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr

08009de2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009de2:	b580      	push	{r7, lr}
 8009de4:	b084      	sub	sp, #16
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
 8009dea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009df2:	2b01      	cmp	r3, #1
 8009df4:	d101      	bne.n	8009dfa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009df6:	2302      	movs	r3, #2
 8009df8:	e02d      	b.n	8009e56 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2224      	movs	r2, #36	; 0x24
 8009e06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f022 0201 	bic.w	r2, r2, #1
 8009e20:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	683a      	ldr	r2, [r7, #0]
 8009e32:	430a      	orrs	r2, r1
 8009e34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 f850 	bl	8009edc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	68fa      	ldr	r2, [r7, #12]
 8009e42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2220      	movs	r2, #32
 8009e48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e54:	2300      	movs	r3, #0
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b084      	sub	sp, #16
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
 8009e66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d101      	bne.n	8009e76 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009e72:	2302      	movs	r3, #2
 8009e74:	e02d      	b.n	8009ed2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2201      	movs	r2, #1
 8009e7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2224      	movs	r2, #36	; 0x24
 8009e82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f022 0201 	bic.w	r2, r2, #1
 8009e9c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	689b      	ldr	r3, [r3, #8]
 8009ea4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	683a      	ldr	r2, [r7, #0]
 8009eae:	430a      	orrs	r2, r1
 8009eb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 f812 	bl	8009edc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	68fa      	ldr	r2, [r7, #12]
 8009ebe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2220      	movs	r2, #32
 8009ec4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009ed0:	2300      	movs	r3, #0
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
	...

08009edc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d108      	bne.n	8009efe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009efc:	e031      	b.n	8009f62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009efe:	2310      	movs	r3, #16
 8009f00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009f02:	2310      	movs	r3, #16
 8009f04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	0e5b      	lsrs	r3, r3, #25
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	f003 0307 	and.w	r3, r3, #7
 8009f14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	689b      	ldr	r3, [r3, #8]
 8009f1c:	0f5b      	lsrs	r3, r3, #29
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	f003 0307 	and.w	r3, r3, #7
 8009f24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f26:	7bbb      	ldrb	r3, [r7, #14]
 8009f28:	7b3a      	ldrb	r2, [r7, #12]
 8009f2a:	4911      	ldr	r1, [pc, #68]	; (8009f70 <UARTEx_SetNbDataToProcess+0x94>)
 8009f2c:	5c8a      	ldrb	r2, [r1, r2]
 8009f2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009f32:	7b3a      	ldrb	r2, [r7, #12]
 8009f34:	490f      	ldr	r1, [pc, #60]	; (8009f74 <UARTEx_SetNbDataToProcess+0x98>)
 8009f36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f38:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f3c:	b29a      	uxth	r2, r3
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f44:	7bfb      	ldrb	r3, [r7, #15]
 8009f46:	7b7a      	ldrb	r2, [r7, #13]
 8009f48:	4909      	ldr	r1, [pc, #36]	; (8009f70 <UARTEx_SetNbDataToProcess+0x94>)
 8009f4a:	5c8a      	ldrb	r2, [r1, r2]
 8009f4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009f50:	7b7a      	ldrb	r2, [r7, #13]
 8009f52:	4908      	ldr	r1, [pc, #32]	; (8009f74 <UARTEx_SetNbDataToProcess+0x98>)
 8009f54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f56:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f5a:	b29a      	uxth	r2, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009f62:	bf00      	nop
 8009f64:	3714      	adds	r7, #20
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop
 8009f70:	0800a018 	.word	0x0800a018
 8009f74:	0800a020 	.word	0x0800a020

08009f78 <__libc_init_array>:
 8009f78:	b570      	push	{r4, r5, r6, lr}
 8009f7a:	4d0d      	ldr	r5, [pc, #52]	; (8009fb0 <__libc_init_array+0x38>)
 8009f7c:	4c0d      	ldr	r4, [pc, #52]	; (8009fb4 <__libc_init_array+0x3c>)
 8009f7e:	1b64      	subs	r4, r4, r5
 8009f80:	10a4      	asrs	r4, r4, #2
 8009f82:	2600      	movs	r6, #0
 8009f84:	42a6      	cmp	r6, r4
 8009f86:	d109      	bne.n	8009f9c <__libc_init_array+0x24>
 8009f88:	4d0b      	ldr	r5, [pc, #44]	; (8009fb8 <__libc_init_array+0x40>)
 8009f8a:	4c0c      	ldr	r4, [pc, #48]	; (8009fbc <__libc_init_array+0x44>)
 8009f8c:	f000 f820 	bl	8009fd0 <_init>
 8009f90:	1b64      	subs	r4, r4, r5
 8009f92:	10a4      	asrs	r4, r4, #2
 8009f94:	2600      	movs	r6, #0
 8009f96:	42a6      	cmp	r6, r4
 8009f98:	d105      	bne.n	8009fa6 <__libc_init_array+0x2e>
 8009f9a:	bd70      	pop	{r4, r5, r6, pc}
 8009f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fa0:	4798      	blx	r3
 8009fa2:	3601      	adds	r6, #1
 8009fa4:	e7ee      	b.n	8009f84 <__libc_init_array+0xc>
 8009fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009faa:	4798      	blx	r3
 8009fac:	3601      	adds	r6, #1
 8009fae:	e7f2      	b.n	8009f96 <__libc_init_array+0x1e>
 8009fb0:	0800a030 	.word	0x0800a030
 8009fb4:	0800a030 	.word	0x0800a030
 8009fb8:	0800a030 	.word	0x0800a030
 8009fbc:	0800a034 	.word	0x0800a034

08009fc0 <memset>:
 8009fc0:	4402      	add	r2, r0
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d100      	bne.n	8009fca <memset+0xa>
 8009fc8:	4770      	bx	lr
 8009fca:	f803 1b01 	strb.w	r1, [r3], #1
 8009fce:	e7f9      	b.n	8009fc4 <memset+0x4>

08009fd0 <_init>:
 8009fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fd2:	bf00      	nop
 8009fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fd6:	bc08      	pop	{r3}
 8009fd8:	469e      	mov	lr, r3
 8009fda:	4770      	bx	lr

08009fdc <_fini>:
 8009fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fde:	bf00      	nop
 8009fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fe2:	bc08      	pop	{r3}
 8009fe4:	469e      	mov	lr, r3
 8009fe6:	4770      	bx	lr
