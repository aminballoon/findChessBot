
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011988  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f0c  08011c28  08011c28  00021c28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013b34  08013b34  00023b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08013b3c  08013b3c  00023b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08013b44  08013b44  00023b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000003f0  24000000  08013b4c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001078  240003f0  08013f3c  000303f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001468  08013f3c  00031468  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000303f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003770b  00000000  00000000  0003041e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005387  00000000  00000000  00067b29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001618  00000000  00000000  0006ceb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001480  00000000  00000000  0006e4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00008a9a  00000000  00000000  0006f948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021915  00000000  00000000  000783e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016d5fb  00000000  00000000  00099cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002072f2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006d9c  00000000  00000000  00207348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240003f0 	.word	0x240003f0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011c10 	.word	0x08011c10

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240003f4 	.word	0x240003f4
 80002dc:	08011c10 	.word	0x08011c10

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <_ZN10RobotJointC1Ev>:
 *      Author: SakuranohanaTH
 */

#include "RobotJoint.h"

RobotJoint::RobotJoint() {
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4a32      	ldr	r2, [pc, #200]	; (800075c <_ZN10RobotJointC1Ev+0xd4>)
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	edd3 7a00 	vldr	s15, [r3]
 800069c:	2002      	movs	r0, #2
 800069e:	eeb0 0a67 	vmov.f32	s0, s15
 80006a2:	f000 fecd 	bl	8001440 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80006a6:	eeb0 7b40 	vmov.f64	d7, d0
 80006aa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	edc3 7a01 	vstr	s15, [r3, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	edd3 7a00 	vldr	s15, [r3]
 80006ba:	2003      	movs	r0, #3
 80006bc:	eeb0 0a67 	vmov.f32	s0, s15
 80006c0:	f000 febe 	bl	8001440 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80006c4:	eeb0 7b40 	vmov.f64	d7, d0
 80006c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	edc3 7a02 	vstr	s15, [r3, #8]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	edd3 7a00 	vldr	s15, [r3]
 80006d8:	2004      	movs	r0, #4
 80006da:	eeb0 0a67 	vmov.f32	s0, s15
 80006de:	f000 feaf 	bl	8001440 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80006e2:	eeb0 7b40 	vmov.f64	d7, d0
 80006e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	edc3 7a03 	vstr	s15, [r3, #12]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f04f 0200 	mov.w	r2, #0
 80006f6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f04f 0200 	mov.w	r2, #0
 8000700:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800070a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f04f 0200 	mov.w	r2, #0
 8000714:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800071e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f04f 0200 	mov.w	r2, #0
 8000728:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f04f 0200 	mov.w	r2, #0
 8000732:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	f04f 0200 	mov.w	r2, #0
 800073c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4a07      	ldr	r2, [pc, #28]	; (8000760 <_ZN10RobotJointC1Ev+0xd8>)
 8000744:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4a06      	ldr	r2, [pc, #24]	; (8000764 <_ZN10RobotJointC1Ev+0xdc>)
 800074c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

}
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4618      	mov	r0, r3
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	3b03126f 	.word	0x3b03126f
 8000760:	3dcccccd 	.word	0x3dcccccd
 8000764:	3a83126f 	.word	0x3a83126f

08000768 <_ZN10RobotJointD1Ev>:
RobotJoint::~RobotJoint() {
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]

}
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4618      	mov	r0, r3
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
	...

08000780 <_ZN10RobotJoint9UpdateIVKEffffffff>:
void RobotJoint::UpdateIVK(float _q1, float _q2, float _q3, float _q4, float Vx,
		float Vy, float Vz, float Wz) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b090      	sub	sp, #64	; 0x40
 8000784:	af00      	add	r7, sp, #0
 8000786:	6278      	str	r0, [r7, #36]	; 0x24
 8000788:	ed87 0a08 	vstr	s0, [r7, #32]
 800078c:	edc7 0a07 	vstr	s1, [r7, #28]
 8000790:	ed87 1a06 	vstr	s2, [r7, #24]
 8000794:	edc7 1a05 	vstr	s3, [r7, #20]
 8000798:	ed87 2a04 	vstr	s4, [r7, #16]
 800079c:	edc7 2a03 	vstr	s5, [r7, #12]
 80007a0:	ed87 3a02 	vstr	s6, [r7, #8]
 80007a4:	edc7 3a01 	vstr	s7, [r7, #4]
	float S13 = sin((_q1 + _q3)*1000.0);
 80007a8:	ed97 7a08 	vldr	s14, [r7, #32]
 80007ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80007b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007b8:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 80009b8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 80007bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007c0:	eeb0 0b47 	vmov.f64	d0, d7
 80007c4:	f00d fef0 	bl	800e5a8 <sin>
 80007c8:	eeb0 7b40 	vmov.f64	d7, d0
 80007cc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007d0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float C13 = cos((_q1 + _q3)*1000.0);
 80007d4:	ed97 7a08 	vldr	s14, [r7, #32]
 80007d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80007dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007e4:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80009b8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 80007e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007ec:	eeb0 0b47 	vmov.f64	d0, d7
 80007f0:	f00d fe92 	bl	800e518 <cos>
 80007f4:	eeb0 7b40 	vmov.f64	d7, d0
 80007f8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007fc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float S3 = sin(_q3*1000.0);
 8000800:	edd7 7a06 	vldr	s15, [r7, #24]
 8000804:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000808:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 80009b8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 800080c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000810:	eeb0 0b47 	vmov.f64	d0, d7
 8000814:	f00d fec8 	bl	800e5a8 <sin>
 8000818:	eeb0 7b40 	vmov.f64	d7, d0
 800081c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000820:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float S1 = sin(_q1*1000.0);
 8000824:	edd7 7a08 	vldr	s15, [r7, #32]
 8000828:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800082c:	ed9f 6b62 	vldr	d6, [pc, #392]	; 80009b8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000830:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000834:	eeb0 0b47 	vmov.f64	d0, d7
 8000838:	f00d feb6 	bl	800e5a8 <sin>
 800083c:	eeb0 7b40 	vmov.f64	d7, d0
 8000840:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000844:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float C1 = cos(_q1*1000.0);
 8000848:	edd7 7a08 	vldr	s15, [r7, #32]
 800084c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000850:	ed9f 6b59 	vldr	d6, [pc, #356]	; 80009b8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x238>
 8000854:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000858:	eeb0 0b47 	vmov.f64	d0, d7
 800085c:	f00d fe5c 	bl	800e518 <cos>
 8000860:	eeb0 7b40 	vmov.f64	d7, d0
 8000864:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000868:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float L3S3 = this->L3 * S3;
 800086c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000870:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80009c0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000874:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000878:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	this->w_q1 = ((Vx * C13 + Vy * S13) / (S3 * this->L12))* 1000.0;
 800087c:	ed97 7a04 	vldr	s14, [r7, #16]
 8000880:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000884:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000888:	edd7 6a03 	vldr	s13, [r7, #12]
 800088c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000890:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000894:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000898:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800089c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80009c4 <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 80008a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80008a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008a8:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80009c8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 80008ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	this->w_q2 = Vz * 1000.0;
 80008b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80008ba:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80009c8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 80008be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c4:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	this->w_q3 = (-(Vx * (this->L3 * C13 + this->L1 * C1 + this->L2 * C1))
 80008c8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80008cc:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80009c0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 80008d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80008d4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80008d8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80009cc <_ZN10RobotJoint9UpdateIVKEffffffff+0x24c>
 80008dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80008e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008e4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80008e8:	eddf 6a39 	vldr	s13, [pc, #228]	; 80009d0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x250>
 80008ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80008f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80008f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008fc:	eef1 6a67 	vneg.f32	s13, s15
			/ (L3S3 * this->L12)
 8000900:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000904:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80009c4 <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 8000908:	ee67 7a87 	vmul.f32	s15, s15, s14
 800090c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
			- (Vy * (this->L3 * S13 + this->L1 * S1 + this->L2 * S1))
 8000910:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000914:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80009c0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 8000918:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800091c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000920:	ed9f 6a2a 	vldr	s12, [pc, #168]	; 80009cc <_ZN10RobotJoint9UpdateIVKEffffffff+0x24c>
 8000924:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000928:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800092c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000930:	ed9f 6a27 	vldr	s12, [pc, #156]	; 80009d0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x250>
 8000934:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000938:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800093c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000940:	ee26 6aa7 	vmul.f32	s12, s13, s15
					/ (L3S3 * this->L12)) * 1000.0;
 8000944:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000948:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80009c4 <_ZN10RobotJoint9UpdateIVKEffffffff+0x244>
 800094c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000950:	eec6 7a26 	vdiv.f32	s15, s12, s13
			- (Vy * (this->L3 * S13 + this->L1 * S1 + this->L2 * S1))
 8000954:	ee77 7a67 	vsub.f32	s15, s14, s15
	this->w_q3 = (-(Vx * (this->L3 * C13 + this->L1 * C1 + this->L2 * C1))
 8000958:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80009c8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 800095c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000962:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	this->w_q4 = ((Vx * C1 + Vy * S1 + this->L3 * Wz * S3) / (L3S3)) * 1000.0;
 8000966:	ed97 7a04 	vldr	s14, [r7, #16]
 800096a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800096e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000972:	edd7 6a03 	vldr	s13, [r7, #12]
 8000976:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800097a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800097e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000982:	edd7 7a01 	vldr	s15, [r7, #4]
 8000986:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80009c0 <_ZN10RobotJoint9UpdateIVKEffffffff+0x240>
 800098a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800098e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000992:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000996:	ee77 6a27 	vadd.f32	s13, s14, s15
 800099a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800099e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009a2:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80009c8 <_ZN10RobotJoint9UpdateIVKEffffffff+0x248>
 80009a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ac:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
}
 80009b0:	bf00      	nop
 80009b2:	3740      	adds	r7, #64	; 0x40
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	00000000 	.word	0x00000000
 80009bc:	408f4000 	.word	0x408f4000
 80009c0:	439d8000 	.word	0x439d8000
 80009c4:	43bfa000 	.word	0x43bfa000
 80009c8:	447a0000 	.word	0x447a0000
 80009cc:	41540000 	.word	0x41540000
 80009d0:	43b90000 	.word	0x43b90000

080009d4 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>:
void RobotJoint::UpdateQuinticCoff(float T, float Start_pos, float Final_pos,
		float Start_velocity, float Final_velocity, float Start_acceleration,
		float Final_acceleration) {
 80009d4:	b480      	push	{r7}
 80009d6:	b091      	sub	sp, #68	; 0x44
 80009d8:	af00      	add	r7, sp, #0
 80009da:	61f8      	str	r0, [r7, #28]
 80009dc:	ed87 0a06 	vstr	s0, [r7, #24]
 80009e0:	edc7 0a05 	vstr	s1, [r7, #20]
 80009e4:	ed87 1a04 	vstr	s2, [r7, #16]
 80009e8:	edc7 1a03 	vstr	s3, [r7, #12]
 80009ec:	ed87 2a02 	vstr	s4, [r7, #8]
 80009f0:	edc7 2a01 	vstr	s5, [r7, #4]
 80009f4:	ed87 3a00 	vstr	s6, [r7]
	this->C0 = Start_pos;
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	697a      	ldr	r2, [r7, #20]
 80009fc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	this->C1 = Start_velocity;
 8000a00:	69fb      	ldr	r3, [r7, #28]
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	this->C2 = Start_acceleration / 2.0;
 8000a08:	ed97 7a01 	vldr	s14, [r7, #4]
 8000a0c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000a10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0

	const float A = Final_pos
			- (Start_pos + (Start_velocity * T)
 8000a1a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000a1e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a26:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a2a:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ (Start_acceleration * T * T / 2));
 8000a2e:	edd7 6a01 	vldr	s13, [r7, #4]
 8000a32:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a36:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000a3a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000a42:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8000a46:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000a4a:	ee77 7a27 	vadd.f32	s15, s14, s15
	const float A = Final_pos
 8000a4e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000a52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a56:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	const float B = Final_velocity
			- (Start_velocity + (Start_acceleration * T));
 8000a5a:	ed97 7a01 	vldr	s14, [r7, #4]
 8000a5e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a66:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a6a:	ee77 7a27 	vadd.f32	s15, s14, s15
	const float B = Final_velocity
 8000a6e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000a72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a76:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	const float C = Final_acceleration - Start_acceleration;
 8000a7a:	ed97 7a00 	vldr	s14, [r7]
 8000a7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a86:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	const float T2 = T * T;
 8000a8a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a8e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000a92:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	const float T3 = T * T * T;
 8000a96:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a9a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000a9e:	ed97 7a06 	vldr	s14, [r7, #24]
 8000aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aa6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	const float T4 = T * T * T * T;
 8000aaa:	edd7 7a06 	vldr	s15, [r7, #24]
 8000aae:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000ab2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aba:	ed97 7a06 	vldr	s14, [r7, #24]
 8000abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ac2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	const float T5 = T * T * T * T * T;
 8000ac6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000aca:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000ace:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ad2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ad6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ade:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ae6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	this->C3 = (10.0 * A / T3) - (4.0 * B / T2) + (C / (2.0 * T));
 8000aea:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000aee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000af2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8000af6:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000afa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000afe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b02:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000b06:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000b0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b0e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000b12:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000b16:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000b1a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000b1e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000b22:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000b26:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000b2a:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000b2e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000b32:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b36:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000b3a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000b3e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b42:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
	this->C4 = (-15.0 * A / T4) + (7.0 * B / T3) - (C / T2);
 8000b4c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000b50:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b54:	eeba 6b0e 	vmov.f64	d6, #174	; 0xc1700000 -15.0
 8000b58:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000b5c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000b60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b64:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000b68:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000b6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b70:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8000b74:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000b78:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000b7c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000b80:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000b84:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000b88:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 8000b8c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000b90:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8000b94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b98:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000b9c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
	this->C5 = (6.0 * A / T5) - (3.0 * B / T4) + (C / (2.0 * T3));
 8000ba6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000baa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bae:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8000bb2:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000bb6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000bba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bbe:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000bc2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000bc6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bca:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000bce:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000bd2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000bd6:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000bda:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000bde:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000be2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000be6:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000bea:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000bee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bf2:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000bf6:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000bfa:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000bfe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
	this->T = T;
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	69ba      	ldr	r2, [r7, #24]
 8000c0c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

}
 8000c10:	bf00      	nop
 8000c12:	3744      	adds	r7, #68	; 0x44
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <_ZN10RobotJoint13KalmanFillterEf>:
void RobotJoint::KalmanFillter(float theta_k) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	ed2d 8b08 	vpush	{d8-d11}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	ed87 0a00 	vstr	s0, [r7]
	float X1 = this->X11;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
	float X2 = this->X21;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000c3a:	623b      	str	r3, [r7, #32]
	float P11 = this->p11;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000c42:	61fb      	str	r3, [r7, #28]
	float P12 = this->p12;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000c4a:	61bb      	str	r3, [r7, #24]
	float P21 = this->p21;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000c52:	617b      	str	r3, [r7, #20]
	float P22 = this->p22;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8000c5a:	613b      	str	r3, [r7, #16]
	float Q = this->Q;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000c62:	60fb      	str	r3, [r7, #12]
	float R = this->R;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000c6a:	60bb      	str	r3, [r7, #8]

	this->X11 = X1 + (X2 * this->dt)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	ed93 7a00 	vldr	s14, [r3]
 8000c72:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c7a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000c7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c82:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- ((X1 - theta_k + X2 * this->dt)
 8000c86:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000c8a:	edd7 7a00 	vldr	s15, [r7]
 8000c8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	edd3 6a00 	vldr	s13, [r3]
 8000c98:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ca4:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	ed93 7a00 	vldr	s14, [r3]
 8000cae:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cb6:	edd7 7a07 	vldr	s15, [r7, #28]
 8000cba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cbe:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8000cc2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cc6:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	edd3 7a00 	vldr	s15, [r3]
 8000cd0:	2004      	movs	r0, #4
 8000cd2:	eeb0 0a67 	vmov.f32	s0, s15
 8000cd6:	f000 fbb3 	bl	8001440 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000cda:	eeb0 7b40 	vmov.f64	d7, d0
 8000cde:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8000ce2:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000ce6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cea:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt)))
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	ed93 7a00 	vldr	s14, [r3]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	edd3 5a00 	vldr	s11, [r3]
 8000cfa:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cfe:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8000d02:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d06:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8000d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d12:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000d16:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000d1a:	ed97 7a07 	vldr	s14, [r7, #28]
 8000d1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	edd3 6a00 	vldr	s13, [r3]
 8000d2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d38:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8000d3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d40:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	edd3 7a00 	vldr	s15, [r3]
 8000d4a:	2004      	movs	r0, #4
 8000d4c:	eeb0 0a67 	vmov.f32	s0, s15
 8000d50:	f000 fb76 	bl	8001440 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000d54:	eeb0 7b40 	vmov.f64	d7, d0
 8000d58:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8000d5c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000d60:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d64:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	ed93 7a00 	vldr	s14, [r3]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	edd3 5a00 	vldr	s11, [r3]
 8000d74:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d78:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8000d7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d80:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8000d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d8c:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000d90:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- ((X1 - theta_k + X2 * this->dt)
 8000d94:	ee38 7b47 	vsub.f64	d7, d8, d7
 8000d98:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->X11 = X1 + (X2 * this->dt)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	this->X21 = X2
 8000da2:	edd7 7a08 	vldr	s15, [r7, #32]
 8000da6:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 8000daa:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dae:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	edd3 7a00 	vldr	s15, [r3]
 8000db8:	2003      	movs	r0, #3
 8000dba:	eeb0 0a67 	vmov.f32	s0, s15
 8000dbe:	f000 fb3f 	bl	8001440 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000dc2:	eeb0 7b40 	vmov.f64	d7, d0
 8000dc6:	ee29 7b07 	vmul.f64	d7, d9, d7
 8000dca:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000dce:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	ed93 7a00 	vldr	s14, [r3]
 8000dd8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000de0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000de4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000de8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000df0:	ee36 6b07 	vadd.f64	d6, d6, d7
					* (X1 - theta_k + X2 * this->dt))
 8000df4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000df8:	edd7 7a00 	vldr	s15, [r7]
 8000dfc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	edd3 5a00 	vldr	s11, [r3]
 8000e06:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e0a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8000e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e12:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e16:	ee26 9b07 	vmul.f64	d9, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000e1a:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	edd3 6a00 	vldr	s13, [r3]
 8000e2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e38:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8000e3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e40:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	edd3 7a00 	vldr	s15, [r3]
 8000e4a:	2004      	movs	r0, #4
 8000e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e50:	f000 faf6 	bl	8001440 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000e54:	eeb0 7b40 	vmov.f64	d7, d0
 8000e58:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8000e5c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000e60:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e64:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	ed93 7a00 	vldr	s14, [r3]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	edd3 5a00 	vldr	s11, [r3]
 8000e74:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e78:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8000e7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e80:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8000e84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e8c:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000e90:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 8000e94:	ee38 7b47 	vsub.f64	d7, d8, d7
 8000e98:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->X21 = X2
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	ed93 7a00 	vldr	s14, [r3]
 8000ea8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000eac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000eb0:	edd7 7a07 	vldr	s15, [r7, #28]
 8000eb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eb8:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000ebc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ec0:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	edd3 7a00 	vldr	s15, [r3]
 8000eca:	2004      	movs	r0, #4
 8000ecc:	eeb0 0a67 	vmov.f32	s0, s15
 8000ed0:	f000 fab6 	bl	8001440 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000ed4:	eeb0 7b40 	vmov.f64	d7, d0
 8000ed8:	ee29 6b07 	vmul.f64	d6, d9, d7
 8000edc:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000ee0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ee4:	ee38 6b07 	vadd.f64	d6, d8, d7
			+ this->dt * (P12 + P22 * this->dt))
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	ed93 7a00 	vldr	s14, [r3]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	edd3 5a00 	vldr	s11, [r3]
 8000ef4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ef8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8000efc:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f00:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8000f04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f08:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f0c:	ee36 8b07 	vadd.f64	d8, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000f10:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f14:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	edd3 6a00 	vldr	s13, [r3]
 8000f22:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f2e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8000f32:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f36:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	edd3 7a00 	vldr	s15, [r3]
 8000f40:	2004      	movs	r0, #4
 8000f42:	eeb0 0a67 	vmov.f32	s0, s15
 8000f46:	f000 fa7b 	bl	8001440 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000f4a:	eeb0 7b40 	vmov.f64	d7, d0
 8000f4e:	ee2a 6b07 	vmul.f64	d6, d10, d7
 8000f52:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000f56:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f5a:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	ed93 7a00 	vldr	s14, [r3]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	edd3 5a00 	vldr	s11, [r3]
 8000f6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f6e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8000f72:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f76:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8000f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f82:	ee36 6b07 	vadd.f64	d6, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000f86:	ee88 7b06 	vdiv.f64	d7, d8, d6
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 8000f8a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000f8e:	ee37 7b46 	vsub.f64	d7, d7, d6
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000f92:	eeb1 8b47 	vneg.f64	d8, d7
			* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	ed93 7a00 	vldr	s14, [r3]
 8000f9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fa4:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fac:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8000fb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fb4:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	edd3 7a00 	vldr	s15, [r3]
 8000fbe:	2004      	movs	r0, #4
 8000fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8000fc4:	f000 fa3c 	bl	8001440 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000fc8:	eeb0 7b40 	vmov.f64	d7, d0
 8000fcc:	ee2a 6b07 	vmul.f64	d6, d10, d7
 8000fd0:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000fd4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fd8:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	ed93 7a00 	vldr	s14, [r3]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	edd3 5a00 	vldr	s11, [r3]
 8000fe8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fec:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8000ff0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ff4:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8000ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ffc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001000:	ee36 7b07 	vadd.f64	d7, d6, d7
			* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001004:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001008:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	ed93 7a00 	vldr	s14, [r3]
 8001018:	edd7 7a05 	vldr	s15, [r7, #20]
 800101c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001020:	edd7 7a07 	vldr	s15, [r7, #28]
 8001024:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001028:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800102c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001030:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	edd3 7a00 	vldr	s15, [r3]
 800103a:	2004      	movs	r0, #4
 800103c:	eeb0 0a67 	vmov.f32	s0, s15
 8001040:	f000 f9fe 	bl	8001440 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001044:	eeb0 7b40 	vmov.f64	d7, d0
 8001048:	ee29 6b07 	vmul.f64	d6, d9, d7
 800104c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001050:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001054:	ee38 6b07 	vadd.f64	d6, d8, d7
			+ this->dt * (P12 + P22 * this->dt))
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	ed93 7a00 	vldr	s14, [r3]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	edd3 5a00 	vldr	s11, [r3]
 8001064:	edd7 7a04 	vldr	s15, [r7, #16]
 8001068:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800106c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001070:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001078:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800107c:	ee36 8b07 	vadd.f64	d8, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001080:	ed97 7a07 	vldr	s14, [r7, #28]
 8001084:	edd7 7a02 	vldr	s15, [r7, #8]
 8001088:	ee37 7a27 	vadd.f32	s14, s14, s15
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	edd3 6a00 	vldr	s13, [r3]
 8001092:	edd7 7a05 	vldr	s15, [r7, #20]
 8001096:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800109a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800109e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80010a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80010a6:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	edd3 7a00 	vldr	s15, [r3]
 80010b0:	2004      	movs	r0, #4
 80010b2:	eeb0 0a67 	vmov.f32	s0, s15
 80010b6:	f000 f9c3 	bl	8001440 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80010ba:	eeb0 7b40 	vmov.f64	d7, d0
 80010be:	ee2a 6b07 	vmul.f64	d6, d10, d7
 80010c2:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80010c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010ca:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	ed93 7a00 	vldr	s14, [r3]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	edd3 5a00 	vldr	s11, [r3]
 80010da:	edd7 7a04 	vldr	s15, [r7, #16]
 80010de:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80010e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80010e6:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80010ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010f2:	ee36 6b07 	vadd.f64	d6, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80010f6:	ee88 7b06 	vdiv.f64	d7, d8, d6
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 80010fa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80010fe:	ee37 7b46 	vsub.f64	d7, d7, d6
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001102:	eeb1 8b47 	vneg.f64	d8, d7
			* ((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12);
 8001106:	edd7 7a03 	vldr	s15, [r7, #12]
 800110a:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	edd3 7a00 	vldr	s15, [r3]
 8001114:	2003      	movs	r0, #3
 8001116:	eeb0 0a67 	vmov.f32	s0, s15
 800111a:	f000 f991 	bl	8001440 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800111e:	eeb0 7b40 	vmov.f64	d7, d0
 8001122:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001126:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800112a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	ed93 7a00 	vldr	s14, [r3]
 8001134:	edd7 7a04 	vldr	s15, [r7, #16]
 8001138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800113c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001140:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001144:	edd7 7a06 	vldr	s15, [r7, #24]
 8001148:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800114c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001150:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001154:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
	this->p21 = P21 + P22 * this->dt + (Q * pow(this->dt, 3)) / 2
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	ed93 7a00 	vldr	s14, [r3]
 8001164:	edd7 7a04 	vldr	s15, [r7, #16]
 8001168:	ee27 7a27 	vmul.f32	s14, s14, s15
 800116c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001170:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001174:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001178:	edd7 7a03 	vldr	s15, [r7, #12]
 800117c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	edd3 7a00 	vldr	s15, [r3]
 8001186:	2003      	movs	r0, #3
 8001188:	eeb0 0a67 	vmov.f32	s0, s15
 800118c:	f000 f958 	bl	8001440 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001190:	eeb0 7b40 	vmov.f64	d7, d0
 8001194:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001198:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800119c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011a0:	ee38 8b07 	vadd.f64	d8, d8, d7
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 80011a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80011a8:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	edd3 7a00 	vldr	s15, [r3]
 80011b2:	2003      	movs	r0, #3
 80011b4:	eeb0 0a67 	vmov.f32	s0, s15
 80011b8:	f000 f942 	bl	8001440 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80011bc:	eeb0 7b40 	vmov.f64	d7, d0
 80011c0:	ee29 7b07 	vmul.f64	d7, d9, d7
 80011c4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80011c8:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	ed93 7a00 	vldr	s14, [r3]
 80011d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80011d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011de:	ee36 6b07 	vadd.f64	d6, d6, d7
 80011e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80011e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011ea:	ee36 9b07 	vadd.f64	d9, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	ed93 7a00 	vldr	s14, [r3]
 80011f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80011f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001200:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001204:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001208:	edd7 7a03 	vldr	s15, [r7, #12]
 800120c:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	edd3 7a00 	vldr	s15, [r3]
 8001216:	2004      	movs	r0, #4
 8001218:	eeb0 0a67 	vmov.f32	s0, s15
 800121c:	f000 f910 	bl	8001440 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001220:	eeb0 7b40 	vmov.f64	d7, d0
 8001224:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001228:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800122c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001230:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt)))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	ed93 7a00 	vldr	s14, [r3]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	edd3 5a00 	vldr	s11, [r3]
 8001240:	edd7 7a04 	vldr	s15, [r7, #16]
 8001244:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001248:	edd7 7a06 	vldr	s15, [r7, #24]
 800124c:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001254:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001258:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800125c:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001260:	ed97 7a07 	vldr	s14, [r7, #28]
 8001264:	edd7 7a02 	vldr	s15, [r7, #8]
 8001268:	ee37 7a27 	vadd.f32	s14, s14, s15
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	edd3 6a00 	vldr	s13, [r3]
 8001272:	edd7 7a05 	vldr	s15, [r7, #20]
 8001276:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800127a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800127e:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001282:	edd7 7a03 	vldr	s15, [r7, #12]
 8001286:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	edd3 7a00 	vldr	s15, [r3]
 8001290:	2004      	movs	r0, #4
 8001292:	eeb0 0a67 	vmov.f32	s0, s15
 8001296:	f000 f8d3 	bl	8001440 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800129a:	eeb0 7b40 	vmov.f64	d7, d0
 800129e:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80012a2:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80012a6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80012aa:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	ed93 7a00 	vldr	s14, [r3]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	edd3 5a00 	vldr	s11, [r3]
 80012ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80012be:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80012c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80012c6:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80012ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012d2:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80012d6:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 80012da:	ee38 7b47 	vsub.f64	d7, d8, d7
 80012de:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p21 = P21 + P22 * this->dt + (Q * pow(this->dt, 3)) / 2
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
	this->p22 = P22 + Q * pow(this->dt, 2)
 80012e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80012ec:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80012f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012f4:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	edd3 7a00 	vldr	s15, [r3]
 80012fe:	2002      	movs	r0, #2
 8001300:	eeb0 0a67 	vmov.f32	s0, s15
 8001304:	f000 f89c 	bl	8001440 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001308:	eeb0 7b40 	vmov.f64	d7, d0
 800130c:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001310:	ee38 8b07 	vadd.f64	d8, d8, d7
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12)
 8001314:	edd7 7a03 	vldr	s15, [r7, #12]
 8001318:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	edd3 7a00 	vldr	s15, [r3]
 8001322:	2003      	movs	r0, #3
 8001324:	eeb0 0a67 	vmov.f32	s0, s15
 8001328:	f000 f88a 	bl	8001440 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800132c:	eeb0 7b40 	vmov.f64	d7, d0
 8001330:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001334:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001338:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	ed93 7a00 	vldr	s14, [r3]
 8001342:	edd7 7a04 	vldr	s15, [r7, #16]
 8001346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800134a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800134e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001352:	edd7 7a06 	vldr	s15, [r7, #24]
 8001356:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800135a:	ee36 9b07 	vadd.f64	d9, d6, d7
					* ((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21))
 800135e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001362:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	edd3 7a00 	vldr	s15, [r3]
 800136c:	2003      	movs	r0, #3
 800136e:	eeb0 0a67 	vmov.f32	s0, s15
 8001372:	f000 f865 	bl	8001440 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001376:	eeb0 7b40 	vmov.f64	d7, d0
 800137a:	ee2a 7b07 	vmul.f64	d7, d10, d7
 800137e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001382:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	ed93 7a00 	vldr	s14, [r3]
 800138c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001394:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001398:	ee36 6b07 	vadd.f64	d6, d6, d7
 800139c:	edd7 7a05 	vldr	s15, [r7, #20]
 80013a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013a4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80013a8:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80013ac:	ed97 7a07 	vldr	s14, [r7, #28]
 80013b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80013b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	edd3 6a00 	vldr	s13, [r3]
 80013be:	edd7 7a05 	vldr	s15, [r7, #20]
 80013c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ca:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80013ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80013d2:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	edd3 7a00 	vldr	s15, [r3]
 80013dc:	2004      	movs	r0, #4
 80013de:	eeb0 0a67 	vmov.f32	s0, s15
 80013e2:	f000 f82d 	bl	8001440 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80013e6:	eeb0 7b40 	vmov.f64	d7, d0
 80013ea:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80013ee:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80013f2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80013f6:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	ed93 7a00 	vldr	s14, [r3]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	edd3 5a00 	vldr	s11, [r3]
 8001406:	edd7 7a04 	vldr	s15, [r7, #16]
 800140a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800140e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001412:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800141a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800141e:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001422:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12)
 8001426:	ee38 7b47 	vsub.f64	d7, d8, d7
 800142a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p22 = P22 + Q * pow(this->dt, 2)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4

}
 8001434:	bf00      	nop
 8001436:	3728      	adds	r7, #40	; 0x28
 8001438:	46bd      	mov	sp, r7
 800143a:	ecbd 8b08 	vpop	{d8-d11}
 800143e:	bd80      	pop	{r7, pc}

08001440 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	ed87 0a01 	vstr	s0, [r7, #4]
 800144a:	6038      	str	r0, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 800144c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001450:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	ee06 3a90 	vmov	s13, r3
 800145a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800145e:	eeb0 1b46 	vmov.f64	d1, d6
 8001462:	eeb0 0b47 	vmov.f64	d0, d7
 8001466:	f00c fd93 	bl	800df90 <pow>
 800146a:	eeb0 7b40 	vmov.f64	d7, d0
    }
 800146e:	eeb0 0b47 	vmov.f64	d0, d7
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <_ZSt5floorf>:
  { return __builtin_floorf(__x); }
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001482:	edd7 7a01 	vldr	s15, [r7, #4]
 8001486:	fefb 7a67 	vrintm.f32	s15, s15
 800148a:	eeb0 0a67 	vmov.f32	s0, s15
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	ed87 0a01 	vstr	s0, [r7, #4]
 80014a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80014a6:	fef8 7a67 	vrinta.f32	s15, s15
 80014aa:	eeb0 0a67 	vmov.f32	s0, s15
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>:
 *
 *  Created on: Jan 30, 2022
 *      Author: SakuranohanaTH
 */
#include "ServoMotor.h"
ServoMotor::ServoMotor(TIM_HandleTypeDef *_servo_htim,
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
		uint32_t _SERVO_TIM_CHANNEL) {
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2200      	movs	r2, #0
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2200      	movs	r2, #0
 80014d4:	611a      	str	r2, [r3, #16]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	22b4      	movs	r2, #180	; 0xb4
 80014da:	615a      	str	r2, [r3, #20]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2200      	movs	r2, #0
 80014e0:	761a      	strb	r2, [r3, #24]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2200      	movs	r2, #0
 80014e6:	765a      	strb	r2, [r3, #25]
	this->servo_htim = _servo_htim;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	601a      	str	r2, [r3, #0]
	this->SERVO_TIM_CHANNEL = _SERVO_TIM_CHANNEL;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	605a      	str	r2, [r3, #4]
	 * 2ms/20ms = 0.1 = 10%
	 *
	 * CRR = 0.1 * (19999 + 1) = 2000
	 *
	 */
	this->servo_htim->Instance->PSC = _PSC_SERVO_MOTOR - 1U;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	22ef      	movs	r2, #239	; 0xef
 80014fc:	629a      	str	r2, [r3, #40]	; 0x28
	this->servo_htim->Instance->ARR = _ARR_SERVO_MOTOR - 1U;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001508:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4618      	mov	r0, r3
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <_ZN10ServoMotorD1Ev>:
ServoMotor::~ServoMotor() {
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
}
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4618      	mov	r0, r3
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
	...

08001530 <_ZN10ServoMotor17ServoRotateDegreeEl>:
	HAL_TIM_PWM_Start(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Enable PWM for Servo Motor
}
void ServoMotor::ServoDisable() {
	HAL_TIM_PWM_Stop(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Disable PWM for Servo Motor
}
void ServoMotor::ServoRotateDegree(int32_t _sdegrotate) {
 8001530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001532:	b085      	sub	sp, #20
 8001534:	af02      	add	r7, sp, #8
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
	if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_1) {
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d13f      	bne.n	80015c2 <_ZN10ServoMotor17ServoRotateDegreeEl+0x92>
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	691c      	ldr	r4, [r3, #16]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	695d      	ldr	r5, [r3, #20]
				_sdegrotate, this->minsdeg, this->maxsdeg, // Mapping degree value to CRR value
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001552:	3301      	adds	r3, #1
 8001554:	ee07 3a90 	vmov	s15, r3
 8001558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800155c:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 80017e4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001560:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001564:	eeb0 0a67 	vmov.f32	s0, s15
 8001568:	f7ff ff96 	bl	8001498 <_ZSt5roundf>
 800156c:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8001570:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001574:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001580:	3301      	adds	r3, #1
 8001582:	ee07 3a90 	vmov	s15, r3
 8001586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800158a:	ed9f 7a97 	vldr	s14, [pc, #604]	; 80017e8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 800158e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001592:	eeb0 0a67 	vmov.f32	s0, s15
 8001596:	f7ff ff6f 	bl	8001478 <_ZSt5floorf>
 800159a:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 800159e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015a2:	ee17 3a90 	vmov	r3, s15
 80015a6:	9301      	str	r3, [sp, #4]
 80015a8:	9600      	str	r6, [sp, #0]
 80015aa:	462b      	mov	r3, r5
 80015ac:	4622      	mov	r2, r4
 80015ae:	6839      	ldr	r1, [r7, #0]
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f000 f9ad 	bl	8001910 <_ZN10ServoMotor10GripperMapElllll>
 80015b6:	4602      	mov	r2, r0
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR3 = 0;
		this->servo_htim->Instance->CCR4 = 0;
		this->servo_htim->Instance->CCR5 = 0;
		this->servo_htim->Instance->CCR6 = 0;
	}
}
 80015c0:	e176      	b.n	80018b0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_2) {
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	d13f      	bne.n	800164a <_ZN10ServoMotor17ServoRotateDegreeEl+0x11a>
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691c      	ldr	r4, [r3, #16]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015da:	3301      	adds	r3, #1
 80015dc:	ee07 3a90 	vmov	s15, r3
 80015e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015e4:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80017e4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 80015e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ec:	eeb0 0a67 	vmov.f32	s0, s15
 80015f0:	f7ff ff52 	bl	8001498 <_ZSt5roundf>
 80015f4:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 80015f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015fc:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001608:	3301      	adds	r3, #1
 800160a:	ee07 3a90 	vmov	s15, r3
 800160e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001612:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80017e8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001616:	ee67 7a87 	vmul.f32	s15, s15, s14
 800161a:	eeb0 0a67 	vmov.f32	s0, s15
 800161e:	f7ff ff2b 	bl	8001478 <_ZSt5floorf>
 8001622:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8001626:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800162a:	ee17 3a90 	vmov	r3, s15
 800162e:	9301      	str	r3, [sp, #4]
 8001630:	9600      	str	r6, [sp, #0]
 8001632:	462b      	mov	r3, r5
 8001634:	4622      	mov	r2, r4
 8001636:	6839      	ldr	r1, [r7, #0]
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 f969 	bl	8001910 <_ZN10ServoMotor10GripperMapElllll>
 800163e:	4602      	mov	r2, r0
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001648:	e132      	b.n	80018b0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_3) {
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b08      	cmp	r3, #8
 8001650:	d13f      	bne.n	80016d2 <_ZN10ServoMotor17ServoRotateDegreeEl+0x1a2>
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	691c      	ldr	r4, [r3, #16]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001662:	3301      	adds	r3, #1
 8001664:	ee07 3a90 	vmov	s15, r3
 8001668:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800166c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80017e4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001670:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001674:	eeb0 0a67 	vmov.f32	s0, s15
 8001678:	f7ff ff0e 	bl	8001498 <_ZSt5roundf>
 800167c:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001680:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001684:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001690:	3301      	adds	r3, #1
 8001692:	ee07 3a90 	vmov	s15, r3
 8001696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800169a:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80017e8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 800169e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016a2:	eeb0 0a67 	vmov.f32	s0, s15
 80016a6:	f7ff fee7 	bl	8001478 <_ZSt5floorf>
 80016aa:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 80016ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016b2:	ee17 3a90 	vmov	r3, s15
 80016b6:	9301      	str	r3, [sp, #4]
 80016b8:	9600      	str	r6, [sp, #0]
 80016ba:	462b      	mov	r3, r5
 80016bc:	4622      	mov	r2, r4
 80016be:	6839      	ldr	r1, [r7, #0]
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 f925 	bl	8001910 <_ZN10ServoMotor10GripperMapElllll>
 80016c6:	4602      	mov	r2, r0
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80016d0:	e0ee      	b.n	80018b0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_4) {
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b0c      	cmp	r3, #12
 80016d8:	d13f      	bne.n	800175a <_ZN10ServoMotor17ServoRotateDegreeEl+0x22a>
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691c      	ldr	r4, [r3, #16]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ea:	3301      	adds	r3, #1
 80016ec:	ee07 3a90 	vmov	s15, r3
 80016f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016f4:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80017e4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 80016f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001700:	f7ff feca 	bl	8001498 <_ZSt5roundf>
 8001704:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8001708:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800170c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001718:	3301      	adds	r3, #1
 800171a:	ee07 3a90 	vmov	s15, r3
 800171e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001722:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80017e8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001726:	ee67 7a87 	vmul.f32	s15, s15, s14
 800172a:	eeb0 0a67 	vmov.f32	s0, s15
 800172e:	f7ff fea3 	bl	8001478 <_ZSt5floorf>
 8001732:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8001736:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800173a:	ee17 3a90 	vmov	r3, s15
 800173e:	9301      	str	r3, [sp, #4]
 8001740:	9600      	str	r6, [sp, #0]
 8001742:	462b      	mov	r3, r5
 8001744:	4622      	mov	r2, r4
 8001746:	6839      	ldr	r1, [r7, #0]
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 f8e1 	bl	8001910 <_ZN10ServoMotor10GripperMapElllll>
 800174e:	4602      	mov	r2, r0
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001758:	e0aa      	b.n	80018b0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_5) {
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b10      	cmp	r3, #16
 8001760:	d144      	bne.n	80017ec <_ZN10ServoMotor17ServoRotateDegreeEl+0x2bc>
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	691c      	ldr	r4, [r3, #16]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001772:	3301      	adds	r3, #1
 8001774:	ee07 3a90 	vmov	s15, r3
 8001778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800177c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80017e4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001780:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001784:	eeb0 0a67 	vmov.f32	s0, s15
 8001788:	f7ff fe86 	bl	8001498 <_ZSt5roundf>
 800178c:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001790:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001794:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a0:	3301      	adds	r3, #1
 80017a2:	ee07 3a90 	vmov	s15, r3
 80017a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017aa:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80017e8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 80017ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017b2:	eeb0 0a67 	vmov.f32	s0, s15
 80017b6:	f7ff fe5f 	bl	8001478 <_ZSt5floorf>
 80017ba:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 80017be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017c2:	ee17 3a90 	vmov	r3, s15
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	9600      	str	r6, [sp, #0]
 80017ca:	462b      	mov	r3, r5
 80017cc:	4622      	mov	r2, r4
 80017ce:	6839      	ldr	r1, [r7, #0]
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 f89d 	bl	8001910 <_ZN10ServoMotor10GripperMapElllll>
 80017d6:	4602      	mov	r2, r0
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	659a      	str	r2, [r3, #88]	; 0x58
}
 80017e0:	e066      	b.n	80018b0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
 80017e2:	bf00      	nop
 80017e4:	3d4ccccd 	.word	0x3d4ccccd
 80017e8:	3e19999a 	.word	0x3e19999a
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_6) {
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b14      	cmp	r3, #20
 80017f2:	d13f      	bne.n	8001874 <_ZN10ServoMotor17ServoRotateDegreeEl+0x344>
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691c      	ldr	r4, [r3, #16]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001804:	3301      	adds	r3, #1
 8001806:	ee07 3a90 	vmov	s15, r3
 800180a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800180e:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 80017e4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001812:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001816:	eeb0 0a67 	vmov.f32	s0, s15
 800181a:	f7ff fe3d 	bl	8001498 <_ZSt5roundf>
 800181e:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001822:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001826:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001832:	3301      	adds	r3, #1
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800183c:	ed1f 7a16 	vldr	s14, [pc, #-88]	; 80017e8 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001840:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001844:	eeb0 0a67 	vmov.f32	s0, s15
 8001848:	f7ff fe16 	bl	8001478 <_ZSt5floorf>
 800184c:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001850:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001854:	ee17 3a90 	vmov	r3, s15
 8001858:	9301      	str	r3, [sp, #4]
 800185a:	9600      	str	r6, [sp, #0]
 800185c:	462b      	mov	r3, r5
 800185e:	4622      	mov	r2, r4
 8001860:	6839      	ldr	r1, [r7, #0]
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 f854 	bl	8001910 <_ZN10ServoMotor10GripperMapElllll>
 8001868:	4602      	mov	r2, r0
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001872:	e01d      	b.n	80018b0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
		this->servo_htim->Instance->CCR1 = 0;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2200      	movs	r2, #0
 800187c:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR2 = 0;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2200      	movs	r2, #0
 8001886:	639a      	str	r2, [r3, #56]	; 0x38
		this->servo_htim->Instance->CCR3 = 0;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2200      	movs	r2, #0
 8001890:	63da      	str	r2, [r3, #60]	; 0x3c
		this->servo_htim->Instance->CCR4 = 0;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2200      	movs	r2, #0
 800189a:	641a      	str	r2, [r3, #64]	; 0x40
		this->servo_htim->Instance->CCR5 = 0;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2200      	movs	r2, #0
 80018a4:	659a      	str	r2, [r3, #88]	; 0x58
		this->servo_htim->Instance->CCR6 = 0;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2200      	movs	r2, #0
 80018ae:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018b8 <_ZN10ServoMotor12GripperCloseEv>:
}
void ServoMotor::setDegreeGripperClose(int32_t _sdegclose) {
	this->sdegclose = _sdegclose;
	this->isSetDegreeGripperClose = true;
}
void ServoMotor::GripperClose() {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperClose)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	7e5b      	ldrb	r3, [r3, #25]
 80018c4:	f083 0301 	eor.w	r3, r3, #1
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d106      	bne.n	80018dc <_ZN10ServoMotor12GripperCloseEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegclose);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	4619      	mov	r1, r3
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff fe2b 	bl	8001530 <_ZN10ServoMotor17ServoRotateDegreeEl>
 80018da:	e000      	b.n	80018de <_ZN10ServoMotor12GripperCloseEv+0x26>
		return;
 80018dc:	bf00      	nop
}
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <_ZN10ServoMotor11GripperOpenEv>:
void ServoMotor::GripperOpen() {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperOpen)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	7e1b      	ldrb	r3, [r3, #24]
 80018f0:	f083 0301 	eor.w	r3, r3, #1
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d106      	bne.n	8001908 <_ZN10ServoMotor11GripperOpenEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegopen);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	4619      	mov	r1, r3
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff fe15 	bl	8001530 <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001906:	e000      	b.n	800190a <_ZN10ServoMotor11GripperOpenEv+0x26>
		return;
 8001908:	bf00      	nop
}
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <_ZN10ServoMotor10GripperMapElllll>:
int32_t ServoMotor::GripperMap(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min,
		int32_t out_max) {
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
 800191c:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	69f9      	ldr	r1, [r7, #28]
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	1a8a      	subs	r2, r1, r2
 800192a:	fb02 f203 	mul.w	r2, r2, r3
 800192e:	6839      	ldr	r1, [r7, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	1acb      	subs	r3, r1, r3
 8001934:	fb92 f2f3 	sdiv	r2, r2, r3
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	4413      	add	r3, r2
}
 800193c:	4618      	mov	r0, r3
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800194c:	4b13      	ldr	r3, [pc, #76]	; (800199c <MX_CRC_Init+0x54>)
 800194e:	4a14      	ldr	r2, [pc, #80]	; (80019a0 <MX_CRC_Init+0x58>)
 8001950:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8001952:	4b12      	ldr	r3, [pc, #72]	; (800199c <MX_CRC_Init+0x54>)
 8001954:	2201      	movs	r2, #1
 8001956:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8001958:	4b10      	ldr	r3, [pc, #64]	; (800199c <MX_CRC_Init+0x54>)
 800195a:	2201      	movs	r2, #1
 800195c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 32773;
 800195e:	4b0f      	ldr	r3, [pc, #60]	; (800199c <MX_CRC_Init+0x54>)
 8001960:	f248 0205 	movw	r2, #32773	; 0x8005
 8001964:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8001966:	4b0d      	ldr	r3, [pc, #52]	; (800199c <MX_CRC_Init+0x54>)
 8001968:	2208      	movs	r2, #8
 800196a:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <MX_CRC_Init+0x54>)
 800196e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001972:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8001974:	4b09      	ldr	r3, [pc, #36]	; (800199c <MX_CRC_Init+0x54>)
 8001976:	2220      	movs	r2, #32
 8001978:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 800197a:	4b08      	ldr	r3, [pc, #32]	; (800199c <MX_CRC_Init+0x54>)
 800197c:	2280      	movs	r2, #128	; 0x80
 800197e:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <MX_CRC_Init+0x54>)
 8001982:	2201      	movs	r2, #1
 8001984:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001986:	4805      	ldr	r0, [pc, #20]	; (800199c <MX_CRC_Init+0x54>)
 8001988:	f003 fa02 	bl	8004d90 <HAL_CRC_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_CRC_Init+0x4e>
  {
    Error_Handler();
 8001992:	f001 fb21 	bl	8002fd8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	24000c10 	.word	0x24000c10
 80019a0:	58024c00 	.word	0x58024c00

080019a4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a0b      	ldr	r2, [pc, #44]	; (80019e0 <HAL_CRC_MspInit+0x3c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d10e      	bne.n	80019d4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80019b6:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <HAL_CRC_MspInit+0x40>)
 80019b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019bc:	4a09      	ldr	r2, [pc, #36]	; (80019e4 <HAL_CRC_MspInit+0x40>)
 80019be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019c6:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <HAL_CRC_MspInit+0x40>)
 80019c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	58024c00 	.word	0x58024c00
 80019e4:	58024400 	.word	0x58024400

080019e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019ee:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <MX_DMA_Init+0x7c>)
 80019f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019f4:	4a1b      	ldr	r2, [pc, #108]	; (8001a64 <MX_DMA_Init+0x7c>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80019fe:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <MX_DMA_Init+0x7c>)
 8001a00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2100      	movs	r1, #0
 8001a10:	200b      	movs	r0, #11
 8001a12:	f003 f97c 	bl	8004d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001a16:	200b      	movs	r0, #11
 8001a18:	f003 f993 	bl	8004d42 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2100      	movs	r1, #0
 8001a20:	200c      	movs	r0, #12
 8001a22:	f003 f974 	bl	8004d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001a26:	200c      	movs	r0, #12
 8001a28:	f003 f98b 	bl	8004d42 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2100      	movs	r1, #0
 8001a30:	200d      	movs	r0, #13
 8001a32:	f003 f96c 	bl	8004d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001a36:	200d      	movs	r0, #13
 8001a38:	f003 f983 	bl	8004d42 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	2100      	movs	r1, #0
 8001a40:	200e      	movs	r0, #14
 8001a42:	f003 f964 	bl	8004d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001a46:	200e      	movs	r0, #14
 8001a48:	f003 f97b 	bl	8004d42 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2100      	movs	r1, #0
 8001a50:	200f      	movs	r0, #15
 8001a52:	f003 f95c 	bl	8004d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001a56:	200f      	movs	r0, #15
 8001a58:	f003 f973 	bl	8004d42 <HAL_NVIC_EnableIRQ>

}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	58024400 	.word	0x58024400

08001a68 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08c      	sub	sp, #48	; 0x30
 8001a6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6e:	f107 031c 	add.w	r3, r7, #28
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
 8001a7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a7e:	4b8e      	ldr	r3, [pc, #568]	; (8001cb8 <MX_GPIO_Init+0x250>)
 8001a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a84:	4a8c      	ldr	r2, [pc, #560]	; (8001cb8 <MX_GPIO_Init+0x250>)
 8001a86:	f043 0310 	orr.w	r3, r3, #16
 8001a8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a8e:	4b8a      	ldr	r3, [pc, #552]	; (8001cb8 <MX_GPIO_Init+0x250>)
 8001a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a94:	f003 0310 	and.w	r3, r3, #16
 8001a98:	61bb      	str	r3, [r7, #24]
 8001a9a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9c:	4b86      	ldr	r3, [pc, #536]	; (8001cb8 <MX_GPIO_Init+0x250>)
 8001a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa2:	4a85      	ldr	r2, [pc, #532]	; (8001cb8 <MX_GPIO_Init+0x250>)
 8001aa4:	f043 0304 	orr.w	r3, r3, #4
 8001aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aac:	4b82      	ldr	r3, [pc, #520]	; (8001cb8 <MX_GPIO_Init+0x250>)
 8001aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab2:	f003 0304 	and.w	r3, r3, #4
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aba:	4b7f      	ldr	r3, [pc, #508]	; (8001cb8 <MX_GPIO_Init+0x250>)
 8001abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac0:	4a7d      	ldr	r2, [pc, #500]	; (8001cb8 <MX_GPIO_Init+0x250>)
 8001ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aca:	4b7b      	ldr	r3, [pc, #492]	; (8001cb8 <MX_GPIO_Init+0x250>)
 8001acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad8:	4b77      	ldr	r3, [pc, #476]	; (8001cb8 <MX_GPIO_Init+0x250>)
 8001ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ade:	4a76      	ldr	r2, [pc, #472]	; (8001cb8 <MX_GPIO_Init+0x250>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ae8:	4b73      	ldr	r3, [pc, #460]	; (8001cb8 <MX_GPIO_Init+0x250>)
 8001aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	4b70      	ldr	r3, [pc, #448]	; (8001cb8 <MX_GPIO_Init+0x250>)
 8001af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001afc:	4a6e      	ldr	r2, [pc, #440]	; (8001cb8 <MX_GPIO_Init+0x250>)
 8001afe:	f043 0302 	orr.w	r3, r3, #2
 8001b02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b06:	4b6c      	ldr	r3, [pc, #432]	; (8001cb8 <MX_GPIO_Init+0x250>)
 8001b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b14:	4b68      	ldr	r3, [pc, #416]	; (8001cb8 <MX_GPIO_Init+0x250>)
 8001b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b1a:	4a67      	ldr	r2, [pc, #412]	; (8001cb8 <MX_GPIO_Init+0x250>)
 8001b1c:	f043 0308 	orr.w	r3, r3, #8
 8001b20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b24:	4b64      	ldr	r3, [pc, #400]	; (8001cb8 <MX_GPIO_Init+0x250>)
 8001b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	607b      	str	r3, [r7, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b32:	4b61      	ldr	r3, [pc, #388]	; (8001cb8 <MX_GPIO_Init+0x250>)
 8001b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b38:	4a5f      	ldr	r2, [pc, #380]	; (8001cb8 <MX_GPIO_Init+0x250>)
 8001b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b42:	4b5d      	ldr	r3, [pc, #372]	; (8001cb8 <MX_GPIO_Init+0x250>)
 8001b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b4c:	603b      	str	r3, [r7, #0]
 8001b4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8001b50:	2200      	movs	r2, #0
 8001b52:	f644 2121 	movw	r1, #18977	; 0x4a21
 8001b56:	4859      	ldr	r0, [pc, #356]	; (8001cbc <MX_GPIO_Init+0x254>)
 8001b58:	f006 fb02 	bl	8008160 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f24c 0102 	movw	r1, #49154	; 0xc002
 8001b62:	4857      	ldr	r0, [pc, #348]	; (8001cc0 <MX_GPIO_Init+0x258>)
 8001b64:	f006 fafc 	bl	8008160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b6e:	4855      	ldr	r0, [pc, #340]	; (8001cc4 <MX_GPIO_Init+0x25c>)
 8001b70:	f006 faf6 	bl	8008160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001b74:	2200      	movs	r2, #0
 8001b76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b7a:	4853      	ldr	r0, [pc, #332]	; (8001cc8 <MX_GPIO_Init+0x260>)
 8001b7c:	f006 faf0 	bl	8008160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 8001b80:	2200      	movs	r2, #0
 8001b82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b86:	4851      	ldr	r0, [pc, #324]	; (8001ccc <MX_GPIO_Init+0x264>)
 8001b88:	f006 faea 	bl	8008160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_Button_Pin_Pin;
 8001b8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b92:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Blue_Button_Pin_GPIO_Port, &GPIO_InitStruct);
 8001b9c:	f107 031c 	add.w	r3, r7, #28
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4849      	ldr	r0, [pc, #292]	; (8001cc8 <MX_GPIO_Init+0x260>)
 8001ba4:	f006 f92c 	bl	8007e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8001ba8:	f644 2321 	movw	r3, #18977	; 0x4a21
 8001bac:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bba:	f107 031c 	add.w	r3, r7, #28
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	483e      	ldr	r0, [pc, #248]	; (8001cbc <MX_GPIO_Init+0x254>)
 8001bc2:	f006 f91d 	bl	8007e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin;
 8001bc6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bcc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001bd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bd6:	f107 031c 	add.w	r3, r7, #28
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4838      	ldr	r0, [pc, #224]	; (8001cc0 <MX_GPIO_Init+0x258>)
 8001bde:	f006 f90f 	bl	8007e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 8001be2:	f24c 0302 	movw	r3, #49154	; 0xc002
 8001be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be8:	2301      	movs	r3, #1
 8001bea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bf4:	f107 031c 	add.w	r3, r7, #28
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4831      	ldr	r0, [pc, #196]	; (8001cc0 <MX_GPIO_Init+0x258>)
 8001bfc:	f006 f900 	bl	8007e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001c00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c06:	2301      	movs	r3, #1
 8001c08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001c12:	f107 031c 	add.w	r3, r7, #28
 8001c16:	4619      	mov	r1, r3
 8001c18:	482a      	ldr	r0, [pc, #168]	; (8001cc4 <MX_GPIO_Init+0x25c>)
 8001c1a:	f006 f8f1 	bl	8007e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8001c1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c24:	2301      	movs	r3, #1
 8001c26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001c30:	f107 031c 	add.w	r3, r7, #28
 8001c34:	4619      	mov	r1, r3
 8001c36:	4824      	ldr	r0, [pc, #144]	; (8001cc8 <MX_GPIO_Init+0x260>)
 8001c38:	f006 f8e2 	bl	8007e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 8001c3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c42:	2301      	movs	r3, #1
 8001c44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 8001c4e:	f107 031c 	add.w	r3, r7, #28
 8001c52:	4619      	mov	r1, r3
 8001c54:	481d      	ldr	r0, [pc, #116]	; (8001ccc <MX_GPIO_Init+0x264>)
 8001c56:	f006 f8d3 	bl	8007e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LM5_Pin;
 8001c5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c60:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 8001c6a:	f107 031c 	add.w	r3, r7, #28
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4817      	ldr	r0, [pc, #92]	; (8001cd0 <MX_GPIO_Init+0x268>)
 8001c72:	f006 f8c5 	bl	8007e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 8001c76:	23c0      	movs	r3, #192	; 0xc0
 8001c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c7a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c84:	f107 031c 	add.w	r3, r7, #28
 8001c88:	4619      	mov	r1, r3
 8001c8a:	480c      	ldr	r0, [pc, #48]	; (8001cbc <MX_GPIO_Init+0x254>)
 8001c8c:	f006 f8b8 	bl	8007e00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001c90:	2200      	movs	r2, #0
 8001c92:	2100      	movs	r1, #0
 8001c94:	2017      	movs	r0, #23
 8001c96:	f003 f83a 	bl	8004d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c9a:	2017      	movs	r0, #23
 8001c9c:	f003 f851 	bl	8004d42 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	2028      	movs	r0, #40	; 0x28
 8001ca6:	f003 f832 	bl	8004d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001caa:	2028      	movs	r0, #40	; 0x28
 8001cac:	f003 f849 	bl	8004d42 <HAL_NVIC_EnableIRQ>

}
 8001cb0:	bf00      	nop
 8001cb2:	3730      	adds	r7, #48	; 0x30
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	58024400 	.word	0x58024400
 8001cbc:	58020400 	.word	0x58020400
 8001cc0:	58021000 	.word	0x58021000
 8001cc4:	58020c00 	.word	0x58020c00
 8001cc8:	58020800 	.word	0x58020800
 8001ccc:	58020000 	.word	0x58020000
 8001cd0:	58021800 	.word	0x58021800

08001cd4 <_Z12Insert_queuei>:

volatile float Robot_X, Robot_Y, Robot_Z, Robot_Yaw;
volatile float Planning_q1, Planning_q2, Planning_q3, Planning_q4;

bool Insert_queue(int value)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
    if (bot == LIMIT - 1)
 8001cdc:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <_Z12Insert_queuei+0x5c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b09      	cmp	r3, #9
 8001ce2:	bf0c      	ite	eq
 8001ce4:	2301      	moveq	r3, #1
 8001ce6:	2300      	movne	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <_Z12Insert_queuei+0x1e>
    {
        return false;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	e018      	b.n	8001d24 <_Z12Insert_queuei+0x50>
    }
    else
    {
        if (first == - 1)
 8001cf2:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <_Z12Insert_queuei+0x60>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cfa:	bf0c      	ite	eq
 8001cfc:	2301      	moveq	r3, #1
 8001cfe:	2300      	movne	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d002      	beq.n	8001d0c <_Z12Insert_queuei+0x38>
        {
            first = 0;
 8001d06:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <_Z12Insert_queuei+0x60>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
        }
		bot++;
 8001d0c:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <_Z12Insert_queuei+0x5c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	3301      	adds	r3, #1
 8001d12:	4a07      	ldr	r2, [pc, #28]	; (8001d30 <_Z12Insert_queuei+0x5c>)
 8001d14:	6013      	str	r3, [r2, #0]
		queue[bot] = value;
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <_Z12Insert_queuei+0x5c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4907      	ldr	r1, [pc, #28]	; (8001d38 <_Z12Insert_queuei+0x64>)
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		return true;
 8001d22:	2301      	movs	r3, #1
    }
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	24000004 	.word	0x24000004
 8001d34:	24000000 	.word	0x24000000
 8001d38:	240009d0 	.word	0x240009d0

08001d3c <_Z10Call_queuev>:

int Call_queue()
    {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
    int output;
    if (first == - 1 || first > bot)
 8001d42:	4b23      	ldr	r3, [pc, #140]	; (8001dd0 <_Z10Call_queuev+0x94>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d4a:	d005      	beq.n	8001d58 <_Z10Call_queuev+0x1c>
 8001d4c:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <_Z10Call_queuev+0x94>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4b20      	ldr	r3, [pc, #128]	; (8001dd4 <_Z10Call_queuev+0x98>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	dd01      	ble.n	8001d5c <_Z10Call_queuev+0x20>
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e000      	b.n	8001d5e <_Z10Call_queuev+0x22>
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d026      	beq.n	8001db0 <_Z10Call_queuev+0x74>
    {
        printf("Don't have stack in queue \n");
 8001d62:	481d      	ldr	r0, [pc, #116]	; (8001dd8 <_Z10Call_queuev+0x9c>)
 8001d64:	f00d ff50 	bl	800fc08 <puts>
        for (int num = 0; num <= bot+1; num++)
 8001d68:	2300      	movs	r3, #0
 8001d6a:	603b      	str	r3, [r7, #0]
 8001d6c:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <_Z10Call_queuev+0x98>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	3301      	adds	r3, #1
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	bfd4      	ite	le
 8001d78:	2301      	movle	r3, #1
 8001d7a:	2300      	movgt	r3, #0
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d008      	beq.n	8001d94 <_Z10Call_queuev+0x58>
        {
        	queue[num] = 0;
 8001d82:	4a16      	ldr	r2, [pc, #88]	; (8001ddc <_Z10Call_queuev+0xa0>)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	2100      	movs	r1, #0
 8001d88:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int num = 0; num <= bot+1; num++)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	603b      	str	r3, [r7, #0]
 8001d92:	e7eb      	b.n	8001d6c <_Z10Call_queuev+0x30>
        }
        first = -1;
 8001d94:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <_Z10Call_queuev+0x94>)
 8001d96:	f04f 32ff 	mov.w	r2, #4294967295
 8001d9a:	601a      	str	r2, [r3, #0]
        bot = -1;
 8001d9c:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <_Z10Call_queuev+0x98>)
 8001d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8001da2:	601a      	str	r2, [r3, #0]
        printf("Clear queue \n");
 8001da4:	480e      	ldr	r0, [pc, #56]	; (8001de0 <_Z10Call_queuev+0xa4>)
 8001da6:	f00d ff2f 	bl	800fc08 <puts>
        output = 255;
 8001daa:	23ff      	movs	r3, #255	; 0xff
 8001dac:	607b      	str	r3, [r7, #4]
 8001dae:	e00a      	b.n	8001dc6 <_Z10Call_queuev+0x8a>
    }
    else
    {
    	output = queue[first];
 8001db0:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <_Z10Call_queuev+0x94>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a09      	ldr	r2, [pc, #36]	; (8001ddc <_Z10Call_queuev+0xa0>)
 8001db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dba:	607b      	str	r3, [r7, #4]
        first++;
 8001dbc:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <_Z10Call_queuev+0x94>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	4a03      	ldr	r2, [pc, #12]	; (8001dd0 <_Z10Call_queuev+0x94>)
 8001dc4:	6013      	str	r3, [r2, #0]
    }
    return output;
 8001dc6:	687b      	ldr	r3, [r7, #4]

}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	24000000 	.word	0x24000000
 8001dd4:	24000004 	.word	0x24000004
 8001dd8:	08011c28 	.word	0x08011c28
 8001ddc:	240009d0 	.word	0x240009d0
 8001de0:	08011c44 	.word	0x08011c44

08001de4 <_Z20Update_State_Machinev>:
int indexy;
void Update_State_Machine()
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
    switch (control_state)
 8001de8:	4b31      	ldr	r3, [pc, #196]	; (8001eb0 <_Z20Update_State_Machinev+0xcc>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	3b29      	subs	r3, #41	; 0x29
 8001df0:	2b0b      	cmp	r3, #11
 8001df2:	d857      	bhi.n	8001ea4 <_Z20Update_State_Machinev+0xc0>
 8001df4:	a201      	add	r2, pc, #4	; (adr r2, 8001dfc <_Z20Update_State_Machinev+0x18>)
 8001df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfa:	bf00      	nop
 8001dfc:	08001e2d 	.word	0x08001e2d
 8001e00:	08001e73 	.word	0x08001e73
 8001e04:	08001ea5 	.word	0x08001ea5
 8001e08:	08001ea5 	.word	0x08001ea5
 8001e0c:	08001ea5 	.word	0x08001ea5
 8001e10:	08001ea5 	.word	0x08001ea5
 8001e14:	08001ea5 	.word	0x08001ea5
 8001e18:	08001ea5 	.word	0x08001ea5
 8001e1c:	08001ea5 	.word	0x08001ea5
 8001e20:	08001ea5 	.word	0x08001ea5
 8001e24:	08001e7b 	.word	0x08001e7b
 8001e28:	08001e97 	.word	0x08001e97
    {
	case 41: // Update Trajectory
		indexy = Call_queue();
 8001e2c:	f7ff ff86 	bl	8001d3c <_Z10Call_queuev>
 8001e30:	4603      	mov	r3, r0
 8001e32:	4a20      	ldr	r2, [pc, #128]	; (8001eb4 <_Z20Update_State_Machinev+0xd0>)
 8001e34:	6013      	str	r3, [r2, #0]
    	test_value_r = radias[indexy];
 8001e36:	4b1f      	ldr	r3, [pc, #124]	; (8001eb4 <_Z20Update_State_Machinev+0xd0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a1f      	ldr	r2, [pc, #124]	; (8001eb8 <_Z20Update_State_Machinev+0xd4>)
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	edd3 7a00 	vldr	s15, [r3]
 8001e44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e48:	ee17 2a90 	vmov	r2, s15
 8001e4c:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <_Z20Update_State_Machinev+0xd8>)
 8001e4e:	601a      	str	r2, [r3, #0]
		test_value_theta = theta[indexy];
 8001e50:	4b18      	ldr	r3, [pc, #96]	; (8001eb4 <_Z20Update_State_Machinev+0xd0>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a1a      	ldr	r2, [pc, #104]	; (8001ec0 <_Z20Update_State_Machinev+0xdc>)
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	edd3 7a00 	vldr	s15, [r3]
 8001e5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e62:	ee17 2a90 	vmov	r2, s15
 8001e66:	4b17      	ldr	r3, [pc, #92]	; (8001ec4 <_Z20Update_State_Machinev+0xe0>)
 8001e68:	601a      	str	r2, [r3, #0]
		control_state = 42;
 8001e6a:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <_Z20Update_State_Machinev+0xcc>)
 8001e6c:	222a      	movs	r2, #42	; 0x2a
 8001e6e:	701a      	strb	r2, [r3, #0]
		break;
 8001e70:	e01c      	b.n	8001eac <_Z20Update_State_Machinev+0xc8>

	case 42:

		control_state = 0;
 8001e72:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <_Z20Update_State_Machinev+0xcc>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
		break;
 8001e78:	e018      	b.n	8001eac <_Z20Update_State_Machinev+0xc8>

	case 51:
		Traj_Flag = 1;
 8001e7a:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <_Z20Update_State_Machinev+0xe4>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]
		t = 0;
 8001e80:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <_Z20Update_State_Machinev+0xe8>)
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim14);
 8001e88:	4811      	ldr	r0, [pc, #68]	; (8001ed0 <_Z20Update_State_Machinev+0xec>)
 8001e8a:	f008 fe69 	bl	800ab60 <HAL_TIM_Base_Start_IT>
		control_state = 52;
 8001e8e:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <_Z20Update_State_Machinev+0xcc>)
 8001e90:	2234      	movs	r2, #52	; 0x34
 8001e92:	701a      	strb	r2, [r3, #0]
		break;
 8001e94:	e00a      	b.n	8001eac <_Z20Update_State_Machinev+0xc8>
	case 52:
		HAL_TIM_Base_Stop_IT(&htim14);
 8001e96:	480e      	ldr	r0, [pc, #56]	; (8001ed0 <_Z20Update_State_Machinev+0xec>)
 8001e98:	f008 feda 	bl	800ac50 <HAL_TIM_Base_Stop_IT>
		control_state = 0;
 8001e9c:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <_Z20Update_State_Machinev+0xcc>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	701a      	strb	r2, [r3, #0]
		break;
 8001ea2:	e003      	b.n	8001eac <_Z20Update_State_Machinev+0xc8>
	default:
		control_state = 0;
 8001ea4:	4b02      	ldr	r3, [pc, #8]	; (8001eb0 <_Z20Update_State_Machinev+0xcc>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	701a      	strb	r2, [r3, #0]
		break;
 8001eaa:	bf00      	nop
    }
}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	24000a00 	.word	0x24000a00
 8001eb4:	24000a20 	.word	0x24000a20
 8001eb8:	24000108 	.word	0x24000108
 8001ebc:	240009f8 	.word	0x240009f8
 8001ec0:	24000008 	.word	0x24000008
 8001ec4:	240009fc 	.word	0x240009fc
 8001ec8:	24000a08 	.word	0x24000a08
 8001ecc:	24000a0c 	.word	0x24000a0c
 8001ed0:	24000f1c 	.word	0x24000f1c

08001ed4 <HAL_UARTEx_RxEventCallback>:

#endif



void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001ed4:	b5b0      	push	{r4, r5, r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	807b      	strh	r3, [r7, #2]
	if (huart == &huart3) {
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a8c      	ldr	r2, [pc, #560]	; (8002114 <HAL_UARTEx_RxEventCallback+0x240>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	f040 8184 	bne.w	80021f2 <HAL_UARTEx_RxEventCallback+0x31e>
		memcpy(Old_Rx_Buffer, &New_Rx_Buffer, Rx_BUFFER_SIZE);	// Keep buffer.
 8001eea:	4a8b      	ldr	r2, [pc, #556]	; (8002118 <HAL_UARTEx_RxEventCallback+0x244>)
 8001eec:	4b8b      	ldr	r3, [pc, #556]	; (800211c <HAL_UARTEx_RxEventCallback+0x248>)
 8001eee:	4614      	mov	r4, r2
 8001ef0:	461d      	mov	r5, r3
 8001ef2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ef4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ef6:	682b      	ldr	r3, [r5, #0]
 8001ef8:	6023      	str	r3, [r4, #0]
		memset(New_Rx_Buffer, 0, Rx_BUFFER_SIZE);	// Clear received data.
 8001efa:	2214      	movs	r2, #20
 8001efc:	2100      	movs	r1, #0
 8001efe:	4887      	ldr	r0, [pc, #540]	; (800211c <HAL_UARTEx_RxEventCallback+0x248>)
 8001f00:	f00d f9ca 	bl	800f298 <memset>
		if (Size - 2 > 0 && Size <= Rx_BUFFER_SIZE) {// Check if there's some data.
 8001f04:	887b      	ldrh	r3, [r7, #2]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	f240 8162 	bls.w	80021d0 <HAL_UARTEx_RxEventCallback+0x2fc>
 8001f0c:	887b      	ldrh	r3, [r7, #2]
 8001f0e:	2b14      	cmp	r3, #20
 8001f10:	f200 815e 	bhi.w	80021d0 <HAL_UARTEx_RxEventCallback+0x2fc>
			cmdDataSize = Size - 2;	// Calculate data length.
 8001f14:	887b      	ldrh	r3, [r7, #2]
 8001f16:	3b02      	subs	r3, #2
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	4b81      	ldr	r3, [pc, #516]	; (8002120 <HAL_UARTEx_RxEventCallback+0x24c>)
 8001f1c:	801a      	strh	r2, [r3, #0]
			CRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) Old_Rx_Buffer,
 8001f1e:	4b80      	ldr	r3, [pc, #512]	; (8002120 <HAL_UARTEx_RxEventCallback+0x24c>)
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	461a      	mov	r2, r3
 8001f26:	497c      	ldr	r1, [pc, #496]	; (8002118 <HAL_UARTEx_RxEventCallback+0x244>)
 8001f28:	487e      	ldr	r0, [pc, #504]	; (8002124 <HAL_UARTEx_RxEventCallback+0x250>)
 8001f2a:	f002 ff95 	bl	8004e58 <HAL_CRC_Calculate>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	4b7d      	ldr	r3, [pc, #500]	; (8002128 <HAL_UARTEx_RxEventCallback+0x254>)
 8001f34:	801a      	strh	r2, [r3, #0]
					cmdDataSize); // Calculate data only by STM32 Hardware CRC.
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 8001f36:	4b7a      	ldr	r3, [pc, #488]	; (8002120 <HAL_UARTEx_RxEventCallback+0x24c>)
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4b76      	ldr	r3, [pc, #472]	; (8002118 <HAL_UARTEx_RxEventCallback+0x244>)
 8001f40:	5c9b      	ldrb	r3, [r3, r2]
 8001f42:	021b      	lsls	r3, r3, #8
					| Old_Rx_Buffer[cmdDataSize + 1]; // Read Expected CRC from Protocol.
 8001f44:	b21a      	sxth	r2, r3
 8001f46:	4b76      	ldr	r3, [pc, #472]	; (8002120 <HAL_UARTEx_RxEventCallback+0x24c>)
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	4972      	ldr	r1, [pc, #456]	; (8002118 <HAL_UARTEx_RxEventCallback+0x244>)
 8001f50:	5ccb      	ldrb	r3, [r1, r3]
 8001f52:	b21b      	sxth	r3, r3
 8001f54:	4313      	orrs	r3, r2
 8001f56:	b21b      	sxth	r3, r3
 8001f58:	b29a      	uxth	r2, r3
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 8001f5a:	4b74      	ldr	r3, [pc, #464]	; (800212c <HAL_UARTEx_RxEventCallback+0x258>)
 8001f5c:	801a      	strh	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001f5e:	4b72      	ldr	r3, [pc, #456]	; (8002128 <HAL_UARTEx_RxEventCallback+0x254>)
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	4b71      	ldr	r3, [pc, #452]	; (800212c <HAL_UARTEx_RxEventCallback+0x258>)
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	bf0c      	ite	eq
 8001f6e:	2301      	moveq	r3, #1
 8001f70:	2300      	movne	r3, #0
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 814d 	beq.w	8002214 <HAL_UARTEx_RxEventCallback+0x340>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	2102      	movs	r1, #2
 8001f7e:	486c      	ldr	r0, [pc, #432]	; (8002130 <HAL_UARTEx_RxEventCallback+0x25c>)
 8001f80:	f006 f8ee 	bl	8008160 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001f84:	2200      	movs	r2, #0
 8001f86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f8a:	486a      	ldr	r0, [pc, #424]	; (8002134 <HAL_UARTEx_RxEventCallback+0x260>)
 8001f8c:	f006 f8e8 	bl	8008160 <HAL_GPIO_WritePin>
//				}
//				else if (Old_Rx_Buffer[0] == 0x54 && cmdDataSize == 3) {// Linear Jog Yaw
////					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
//					dyaw = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
//				}
				if (Old_Rx_Buffer[0] == 0x61 && cmdDataSize == 5) // Joint Jog 4q
 8001f90:	4b61      	ldr	r3, [pc, #388]	; (8002118 <HAL_UARTEx_RxEventCallback+0x244>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b61      	cmp	r3, #97	; 0x61
 8001f96:	d106      	bne.n	8001fa6 <HAL_UARTEx_RxEventCallback+0xd2>
 8001f98:	4b61      	ldr	r3, [pc, #388]	; (8002120 <HAL_UARTEx_RxEventCallback+0x24c>)
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	2b05      	cmp	r3, #5
 8001fa0:	d101      	bne.n	8001fa6 <HAL_UARTEx_RxEventCallback+0xd2>
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e000      	b.n	8001fa8 <HAL_UARTEx_RxEventCallback+0xd4>
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d014      	beq.n	8001fd6 <HAL_UARTEx_RxEventCallback+0x102>
				{
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = Old_Rx_Buffer[1];
 8001fac:	4b5a      	ldr	r3, [pc, #360]	; (8002118 <HAL_UARTEx_RxEventCallback+0x244>)
 8001fae:	785b      	ldrb	r3, [r3, #1]
 8001fb0:	b25a      	sxtb	r2, r3
 8001fb2:	4b61      	ldr	r3, [pc, #388]	; (8002138 <HAL_UARTEx_RxEventCallback+0x264>)
 8001fb4:	701a      	strb	r2, [r3, #0]
					dq2 = Old_Rx_Buffer[2];
 8001fb6:	4b58      	ldr	r3, [pc, #352]	; (8002118 <HAL_UARTEx_RxEventCallback+0x244>)
 8001fb8:	789b      	ldrb	r3, [r3, #2]
 8001fba:	b25a      	sxtb	r2, r3
 8001fbc:	4b5f      	ldr	r3, [pc, #380]	; (800213c <HAL_UARTEx_RxEventCallback+0x268>)
 8001fbe:	701a      	strb	r2, [r3, #0]
					dq3 = Old_Rx_Buffer[3];
 8001fc0:	4b55      	ldr	r3, [pc, #340]	; (8002118 <HAL_UARTEx_RxEventCallback+0x244>)
 8001fc2:	78db      	ldrb	r3, [r3, #3]
 8001fc4:	b25a      	sxtb	r2, r3
 8001fc6:	4b5e      	ldr	r3, [pc, #376]	; (8002140 <HAL_UARTEx_RxEventCallback+0x26c>)
 8001fc8:	701a      	strb	r2, [r3, #0]
					dq4 = Old_Rx_Buffer[4];
 8001fca:	4b53      	ldr	r3, [pc, #332]	; (8002118 <HAL_UARTEx_RxEventCallback+0x244>)
 8001fcc:	791b      	ldrb	r3, [r3, #4]
 8001fce:	b25a      	sxtb	r2, r3
 8001fd0:	4b5c      	ldr	r3, [pc, #368]	; (8002144 <HAL_UARTEx_RxEventCallback+0x270>)
 8001fd2:	701a      	strb	r2, [r3, #0]
					py = (Old_Rx_Buffer[3] << 8) | Old_Rx_Buffer[4] ;
					pz = (Old_Rx_Buffer[5] << 8) | Old_Rx_Buffer[6] ;
					pyaw = Old_Rx_Buffer[7];
				}

			}
 8001fd4:	e11e      	b.n	8002214 <HAL_UARTEx_RxEventCallback+0x340>
				else if (Old_Rx_Buffer[0] == 0x71 && cmdDataSize == 5) // Linear Jog X,Y,Z,Yaw
 8001fd6:	4b50      	ldr	r3, [pc, #320]	; (8002118 <HAL_UARTEx_RxEventCallback+0x244>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b71      	cmp	r3, #113	; 0x71
 8001fdc:	d106      	bne.n	8001fec <HAL_UARTEx_RxEventCallback+0x118>
 8001fde:	4b50      	ldr	r3, [pc, #320]	; (8002120 <HAL_UARTEx_RxEventCallback+0x24c>)
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	2b05      	cmp	r3, #5
 8001fe6:	d101      	bne.n	8001fec <HAL_UARTEx_RxEventCallback+0x118>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e000      	b.n	8001fee <HAL_UARTEx_RxEventCallback+0x11a>
 8001fec:	2300      	movs	r3, #0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d014      	beq.n	800201c <HAL_UARTEx_RxEventCallback+0x148>
					dx = Old_Rx_Buffer[1];
 8001ff2:	4b49      	ldr	r3, [pc, #292]	; (8002118 <HAL_UARTEx_RxEventCallback+0x244>)
 8001ff4:	785b      	ldrb	r3, [r3, #1]
 8001ff6:	b25a      	sxtb	r2, r3
 8001ff8:	4b53      	ldr	r3, [pc, #332]	; (8002148 <HAL_UARTEx_RxEventCallback+0x274>)
 8001ffa:	701a      	strb	r2, [r3, #0]
					dy = Old_Rx_Buffer[2];
 8001ffc:	4b46      	ldr	r3, [pc, #280]	; (8002118 <HAL_UARTEx_RxEventCallback+0x244>)
 8001ffe:	789b      	ldrb	r3, [r3, #2]
 8002000:	b25a      	sxtb	r2, r3
 8002002:	4b52      	ldr	r3, [pc, #328]	; (800214c <HAL_UARTEx_RxEventCallback+0x278>)
 8002004:	701a      	strb	r2, [r3, #0]
					dz = Old_Rx_Buffer[3];
 8002006:	4b44      	ldr	r3, [pc, #272]	; (8002118 <HAL_UARTEx_RxEventCallback+0x244>)
 8002008:	78db      	ldrb	r3, [r3, #3]
 800200a:	b25a      	sxtb	r2, r3
 800200c:	4b50      	ldr	r3, [pc, #320]	; (8002150 <HAL_UARTEx_RxEventCallback+0x27c>)
 800200e:	701a      	strb	r2, [r3, #0]
					dyaw = Old_Rx_Buffer[4];
 8002010:	4b41      	ldr	r3, [pc, #260]	; (8002118 <HAL_UARTEx_RxEventCallback+0x244>)
 8002012:	791b      	ldrb	r3, [r3, #4]
 8002014:	b25a      	sxtb	r2, r3
 8002016:	4b4f      	ldr	r3, [pc, #316]	; (8002154 <HAL_UARTEx_RxEventCallback+0x280>)
 8002018:	701a      	strb	r2, [r3, #0]
			}
 800201a:	e0fb      	b.n	8002214 <HAL_UARTEx_RxEventCallback+0x340>
				else if(Old_Rx_Buffer[0] == 0x85 && cmdDataSize == 2)
 800201c:	4b3e      	ldr	r3, [pc, #248]	; (8002118 <HAL_UARTEx_RxEventCallback+0x244>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b85      	cmp	r3, #133	; 0x85
 8002022:	d106      	bne.n	8002032 <HAL_UARTEx_RxEventCallback+0x15e>
 8002024:	4b3e      	ldr	r3, [pc, #248]	; (8002120 <HAL_UARTEx_RxEventCallback+0x24c>)
 8002026:	881b      	ldrh	r3, [r3, #0]
 8002028:	b29b      	uxth	r3, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d101      	bne.n	8002032 <HAL_UARTEx_RxEventCallback+0x15e>
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <HAL_UARTEx_RxEventCallback+0x160>
 8002032:	2300      	movs	r3, #0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d014      	beq.n	8002062 <HAL_UARTEx_RxEventCallback+0x18e>
					trajstate = Old_Rx_Buffer[1];
 8002038:	4b37      	ldr	r3, [pc, #220]	; (8002118 <HAL_UARTEx_RxEventCallback+0x244>)
 800203a:	785b      	ldrb	r3, [r3, #1]
 800203c:	461a      	mov	r2, r3
 800203e:	4b46      	ldr	r3, [pc, #280]	; (8002158 <HAL_UARTEx_RxEventCallback+0x284>)
 8002040:	601a      	str	r2, [r3, #0]
					if (trajstate != 0)
 8002042:	4b45      	ldr	r3, [pc, #276]	; (8002158 <HAL_UARTEx_RxEventCallback+0x284>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	bf14      	ite	ne
 800204a:	2301      	movne	r3, #1
 800204c:	2300      	moveq	r3, #0
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 80df 	beq.w	8002214 <HAL_UARTEx_RxEventCallback+0x340>
						control_state = 51;
 8002056:	4b41      	ldr	r3, [pc, #260]	; (800215c <HAL_UARTEx_RxEventCallback+0x288>)
 8002058:	2233      	movs	r2, #51	; 0x33
 800205a:	701a      	strb	r2, [r3, #0]
						Update_State_Machine();
 800205c:	f7ff fec2 	bl	8001de4 <_Z20Update_State_Machinev>
			}
 8002060:	e0d8      	b.n	8002214 <HAL_UARTEx_RxEventCallback+0x340>
				else if(Old_Rx_Buffer[0] == 0x86 && cmdDataSize == 2) //
 8002062:	4b2d      	ldr	r3, [pc, #180]	; (8002118 <HAL_UARTEx_RxEventCallback+0x244>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b86      	cmp	r3, #134	; 0x86
 8002068:	d106      	bne.n	8002078 <HAL_UARTEx_RxEventCallback+0x1a4>
 800206a:	4b2d      	ldr	r3, [pc, #180]	; (8002120 <HAL_UARTEx_RxEventCallback+0x24c>)
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	b29b      	uxth	r3, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d101      	bne.n	8002078 <HAL_UARTEx_RxEventCallback+0x1a4>
 8002074:	2301      	movs	r3, #1
 8002076:	e000      	b.n	800207a <HAL_UARTEx_RxEventCallback+0x1a6>
 8002078:	2300      	movs	r3, #0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d006      	beq.n	800208c <HAL_UARTEx_RxEventCallback+0x1b8>
					int value_input = Old_Rx_Buffer[1];
 800207e:	4b26      	ldr	r3, [pc, #152]	; (8002118 <HAL_UARTEx_RxEventCallback+0x244>)
 8002080:	785b      	ldrb	r3, [r3, #1]
 8002082:	60fb      	str	r3, [r7, #12]
					Insert_queue(value_input);
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f7ff fe25 	bl	8001cd4 <_Z12Insert_queuei>
			}
 800208a:	e0c3      	b.n	8002214 <HAL_UARTEx_RxEventCallback+0x340>
				else if(Old_Rx_Buffer[0] == 0x87 && cmdDataSize == 2)
 800208c:	4b22      	ldr	r3, [pc, #136]	; (8002118 <HAL_UARTEx_RxEventCallback+0x244>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b87      	cmp	r3, #135	; 0x87
 8002092:	d106      	bne.n	80020a2 <HAL_UARTEx_RxEventCallback+0x1ce>
 8002094:	4b22      	ldr	r3, [pc, #136]	; (8002120 <HAL_UARTEx_RxEventCallback+0x24c>)
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	b29b      	uxth	r3, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d101      	bne.n	80020a2 <HAL_UARTEx_RxEventCallback+0x1ce>
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <HAL_UARTEx_RxEventCallback+0x1d0>
 80020a2:	2300      	movs	r3, #0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d005      	beq.n	80020b4 <HAL_UARTEx_RxEventCallback+0x1e0>
					control_state = 41;
 80020a8:	4b2c      	ldr	r3, [pc, #176]	; (800215c <HAL_UARTEx_RxEventCallback+0x288>)
 80020aa:	2229      	movs	r2, #41	; 0x29
 80020ac:	701a      	strb	r2, [r3, #0]
					Update_State_Machine();
 80020ae:	f7ff fe99 	bl	8001de4 <_Z20Update_State_Machinev>
			}
 80020b2:	e0af      	b.n	8002214 <HAL_UARTEx_RxEventCallback+0x340>
				else if (Old_Rx_Buffer[0] == 0x81 && cmdDataSize == 2) // Servo
 80020b4:	4b18      	ldr	r3, [pc, #96]	; (8002118 <HAL_UARTEx_RxEventCallback+0x244>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b81      	cmp	r3, #129	; 0x81
 80020ba:	d106      	bne.n	80020ca <HAL_UARTEx_RxEventCallback+0x1f6>
 80020bc:	4b18      	ldr	r3, [pc, #96]	; (8002120 <HAL_UARTEx_RxEventCallback+0x24c>)
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d101      	bne.n	80020ca <HAL_UARTEx_RxEventCallback+0x1f6>
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <HAL_UARTEx_RxEventCallback+0x1f8>
 80020ca:	2300      	movs	r3, #0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d015      	beq.n	80020fc <HAL_UARTEx_RxEventCallback+0x228>
					gripperstate = Old_Rx_Buffer[1];
 80020d0:	4b11      	ldr	r3, [pc, #68]	; (8002118 <HAL_UARTEx_RxEventCallback+0x244>)
 80020d2:	785b      	ldrb	r3, [r3, #1]
 80020d4:	461a      	mov	r2, r3
 80020d6:	4b22      	ldr	r3, [pc, #136]	; (8002160 <HAL_UARTEx_RxEventCallback+0x28c>)
 80020d8:	601a      	str	r2, [r3, #0]
					if (gripperstate == 0)
 80020da:	4b21      	ldr	r3, [pc, #132]	; (8002160 <HAL_UARTEx_RxEventCallback+0x28c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	bf0c      	ite	eq
 80020e2:	2301      	moveq	r3, #1
 80020e4:	2300      	movne	r3, #0
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <HAL_UARTEx_RxEventCallback+0x220>
						gripper.GripperOpen();
 80020ec:	481d      	ldr	r0, [pc, #116]	; (8002164 <HAL_UARTEx_RxEventCallback+0x290>)
 80020ee:	f7ff fbf9 	bl	80018e4 <_ZN10ServoMotor11GripperOpenEv>
			}
 80020f2:	e08f      	b.n	8002214 <HAL_UARTEx_RxEventCallback+0x340>
						gripper.GripperClose();
 80020f4:	481b      	ldr	r0, [pc, #108]	; (8002164 <HAL_UARTEx_RxEventCallback+0x290>)
 80020f6:	f7ff fbdf 	bl	80018b8 <_ZN10ServoMotor12GripperCloseEv>
			}
 80020fa:	e08b      	b.n	8002214 <HAL_UARTEx_RxEventCallback+0x340>
				else if (Old_Rx_Buffer[0] == 0x91 && cmdDataSize == 8)
 80020fc:	4b06      	ldr	r3, [pc, #24]	; (8002118 <HAL_UARTEx_RxEventCallback+0x244>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b91      	cmp	r3, #145	; 0x91
 8002102:	d131      	bne.n	8002168 <HAL_UARTEx_RxEventCallback+0x294>
 8002104:	4b06      	ldr	r3, [pc, #24]	; (8002120 <HAL_UARTEx_RxEventCallback+0x24c>)
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	b29b      	uxth	r3, r3
 800210a:	2b08      	cmp	r3, #8
 800210c:	d12c      	bne.n	8002168 <HAL_UARTEx_RxEventCallback+0x294>
 800210e:	2301      	movs	r3, #1
 8002110:	e02b      	b.n	800216a <HAL_UARTEx_RxEventCallback+0x296>
 8002112:	bf00      	nop
 8002114:	240011cc 	.word	0x240011cc
 8002118:	240009a4 	.word	0x240009a4
 800211c:	240009b8 	.word	0x240009b8
 8002120:	240009cc 	.word	0x240009cc
 8002124:	24000c10 	.word	0x24000c10
 8002128:	24000998 	.word	0x24000998
 800212c:	2400099a 	.word	0x2400099a
 8002130:	58021000 	.word	0x58021000
 8002134:	58020400 	.word	0x58020400
 8002138:	24000980 	.word	0x24000980
 800213c:	24000981 	.word	0x24000981
 8002140:	24000982 	.word	0x24000982
 8002144:	24000983 	.word	0x24000983
 8002148:	24000984 	.word	0x24000984
 800214c:	24000985 	.word	0x24000985
 8002150:	24000986 	.word	0x24000986
 8002154:	24000987 	.word	0x24000987
 8002158:	240009a0 	.word	0x240009a0
 800215c:	24000a00 	.word	0x24000a00
 8002160:	2400099c 	.word	0x2400099c
 8002164:	24000964 	.word	0x24000964
 8002168:	2300      	movs	r3, #0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d052      	beq.n	8002214 <HAL_UARTEx_RxEventCallback+0x340>
					px = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2] ;
 800216e:	4b5f      	ldr	r3, [pc, #380]	; (80022ec <HAL_UARTEx_RxEventCallback+0x418>)
 8002170:	785b      	ldrb	r3, [r3, #1]
 8002172:	021b      	lsls	r3, r3, #8
 8002174:	4a5d      	ldr	r2, [pc, #372]	; (80022ec <HAL_UARTEx_RxEventCallback+0x418>)
 8002176:	7892      	ldrb	r2, [r2, #2]
 8002178:	4313      	orrs	r3, r2
 800217a:	ee07 3a90 	vmov	s15, r3
 800217e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002182:	4b5b      	ldr	r3, [pc, #364]	; (80022f0 <HAL_UARTEx_RxEventCallback+0x41c>)
 8002184:	edc3 7a00 	vstr	s15, [r3]
					py = (Old_Rx_Buffer[3] << 8) | Old_Rx_Buffer[4] ;
 8002188:	4b58      	ldr	r3, [pc, #352]	; (80022ec <HAL_UARTEx_RxEventCallback+0x418>)
 800218a:	78db      	ldrb	r3, [r3, #3]
 800218c:	021b      	lsls	r3, r3, #8
 800218e:	4a57      	ldr	r2, [pc, #348]	; (80022ec <HAL_UARTEx_RxEventCallback+0x418>)
 8002190:	7912      	ldrb	r2, [r2, #4]
 8002192:	4313      	orrs	r3, r2
 8002194:	ee07 3a90 	vmov	s15, r3
 8002198:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800219c:	4b55      	ldr	r3, [pc, #340]	; (80022f4 <HAL_UARTEx_RxEventCallback+0x420>)
 800219e:	edc3 7a00 	vstr	s15, [r3]
					pz = (Old_Rx_Buffer[5] << 8) | Old_Rx_Buffer[6] ;
 80021a2:	4b52      	ldr	r3, [pc, #328]	; (80022ec <HAL_UARTEx_RxEventCallback+0x418>)
 80021a4:	795b      	ldrb	r3, [r3, #5]
 80021a6:	021b      	lsls	r3, r3, #8
 80021a8:	4a50      	ldr	r2, [pc, #320]	; (80022ec <HAL_UARTEx_RxEventCallback+0x418>)
 80021aa:	7992      	ldrb	r2, [r2, #6]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	ee07 3a90 	vmov	s15, r3
 80021b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021b6:	4b50      	ldr	r3, [pc, #320]	; (80022f8 <HAL_UARTEx_RxEventCallback+0x424>)
 80021b8:	edc3 7a00 	vstr	s15, [r3]
					pyaw = Old_Rx_Buffer[7];
 80021bc:	4b4b      	ldr	r3, [pc, #300]	; (80022ec <HAL_UARTEx_RxEventCallback+0x418>)
 80021be:	79db      	ldrb	r3, [r3, #7]
 80021c0:	ee07 3a90 	vmov	s15, r3
 80021c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021c8:	4b4c      	ldr	r3, [pc, #304]	; (80022fc <HAL_UARTEx_RxEventCallback+0x428>)
 80021ca:	edc3 7a00 	vstr	s15, [r3]
			}
 80021ce:	e021      	b.n	8002214 <HAL_UARTEx_RxEventCallback+0x340>
		} else {
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80021d0:	2200      	movs	r2, #0
 80021d2:	2102      	movs	r1, #2
 80021d4:	484a      	ldr	r0, [pc, #296]	; (8002300 <HAL_UARTEx_RxEventCallback+0x42c>)
 80021d6:	f005 ffc3 	bl	8008160 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80021da:	2201      	movs	r2, #1
 80021dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021e0:	4848      	ldr	r0, [pc, #288]	; (8002304 <HAL_UARTEx_RxEventCallback+0x430>)
 80021e2:	f005 ffbd 	bl	8008160 <HAL_GPIO_WritePin>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "CRC16 error\n", 12);
 80021e6:	220c      	movs	r2, #12
 80021e8:	4947      	ldr	r1, [pc, #284]	; (8002308 <HAL_UARTEx_RxEventCallback+0x434>)
 80021ea:	4848      	ldr	r0, [pc, #288]	; (800230c <HAL_UARTEx_RxEventCallback+0x438>)
 80021ec:	f009 fe9c 	bl	800bf28 <HAL_UART_Transmit_DMA>
 80021f0:	e011      	b.n	8002216 <HAL_UARTEx_RxEventCallback+0x342>
		}
	} else {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80021f2:	2200      	movs	r2, #0
 80021f4:	2102      	movs	r1, #2
 80021f6:	4842      	ldr	r0, [pc, #264]	; (8002300 <HAL_UARTEx_RxEventCallback+0x42c>)
 80021f8:	f005 ffb2 	bl	8008160 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80021fc:	2201      	movs	r2, #1
 80021fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002202:	4840      	ldr	r0, [pc, #256]	; (8002304 <HAL_UARTEx_RxEventCallback+0x430>)
 8002204:	f005 ffac 	bl	8008160 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "Protocol match error\n", 21);
 8002208:	2215      	movs	r2, #21
 800220a:	4941      	ldr	r1, [pc, #260]	; (8002310 <HAL_UARTEx_RxEventCallback+0x43c>)
 800220c:	483f      	ldr	r0, [pc, #252]	; (800230c <HAL_UARTEx_RxEventCallback+0x438>)
 800220e:	f009 fe8b 	bl	800bf28 <HAL_UART_Transmit_DMA>
 8002212:	e000      	b.n	8002216 <HAL_UARTEx_RxEventCallback+0x342>
			}
 8002214:	bf00      	nop
	}
	/* start the DMA again */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer,
 8002216:	2214      	movs	r2, #20
 8002218:	493e      	ldr	r1, [pc, #248]	; (8002314 <HAL_UARTEx_RxEventCallback+0x440>)
 800221a:	483c      	ldr	r0, [pc, #240]	; (800230c <HAL_UARTEx_RxEventCallback+0x438>)
 800221c:	f00b fdd7 	bl	800ddce <HAL_UARTEx_ReceiveToIdle_DMA>
			Rx_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8002220:	4b3d      	ldr	r3, [pc, #244]	; (8002318 <HAL_UARTEx_RxEventCallback+0x444>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a3d      	ldr	r2, [pc, #244]	; (800231c <HAL_UARTEx_RxEventCallback+0x448>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d04a      	beq.n	80022c0 <HAL_UARTEx_RxEventCallback+0x3ec>
 800222a:	4b3b      	ldr	r3, [pc, #236]	; (8002318 <HAL_UARTEx_RxEventCallback+0x444>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a3c      	ldr	r2, [pc, #240]	; (8002320 <HAL_UARTEx_RxEventCallback+0x44c>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d045      	beq.n	80022c0 <HAL_UARTEx_RxEventCallback+0x3ec>
 8002234:	4b38      	ldr	r3, [pc, #224]	; (8002318 <HAL_UARTEx_RxEventCallback+0x444>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a3a      	ldr	r2, [pc, #232]	; (8002324 <HAL_UARTEx_RxEventCallback+0x450>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d040      	beq.n	80022c0 <HAL_UARTEx_RxEventCallback+0x3ec>
 800223e:	4b36      	ldr	r3, [pc, #216]	; (8002318 <HAL_UARTEx_RxEventCallback+0x444>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a39      	ldr	r2, [pc, #228]	; (8002328 <HAL_UARTEx_RxEventCallback+0x454>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d03b      	beq.n	80022c0 <HAL_UARTEx_RxEventCallback+0x3ec>
 8002248:	4b33      	ldr	r3, [pc, #204]	; (8002318 <HAL_UARTEx_RxEventCallback+0x444>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a37      	ldr	r2, [pc, #220]	; (800232c <HAL_UARTEx_RxEventCallback+0x458>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d036      	beq.n	80022c0 <HAL_UARTEx_RxEventCallback+0x3ec>
 8002252:	4b31      	ldr	r3, [pc, #196]	; (8002318 <HAL_UARTEx_RxEventCallback+0x444>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a36      	ldr	r2, [pc, #216]	; (8002330 <HAL_UARTEx_RxEventCallback+0x45c>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d031      	beq.n	80022c0 <HAL_UARTEx_RxEventCallback+0x3ec>
 800225c:	4b2e      	ldr	r3, [pc, #184]	; (8002318 <HAL_UARTEx_RxEventCallback+0x444>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a34      	ldr	r2, [pc, #208]	; (8002334 <HAL_UARTEx_RxEventCallback+0x460>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d02c      	beq.n	80022c0 <HAL_UARTEx_RxEventCallback+0x3ec>
 8002266:	4b2c      	ldr	r3, [pc, #176]	; (8002318 <HAL_UARTEx_RxEventCallback+0x444>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a33      	ldr	r2, [pc, #204]	; (8002338 <HAL_UARTEx_RxEventCallback+0x464>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d027      	beq.n	80022c0 <HAL_UARTEx_RxEventCallback+0x3ec>
 8002270:	4b29      	ldr	r3, [pc, #164]	; (8002318 <HAL_UARTEx_RxEventCallback+0x444>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a31      	ldr	r2, [pc, #196]	; (800233c <HAL_UARTEx_RxEventCallback+0x468>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d022      	beq.n	80022c0 <HAL_UARTEx_RxEventCallback+0x3ec>
 800227a:	4b27      	ldr	r3, [pc, #156]	; (8002318 <HAL_UARTEx_RxEventCallback+0x444>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a30      	ldr	r2, [pc, #192]	; (8002340 <HAL_UARTEx_RxEventCallback+0x46c>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d01d      	beq.n	80022c0 <HAL_UARTEx_RxEventCallback+0x3ec>
 8002284:	4b24      	ldr	r3, [pc, #144]	; (8002318 <HAL_UARTEx_RxEventCallback+0x444>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a2e      	ldr	r2, [pc, #184]	; (8002344 <HAL_UARTEx_RxEventCallback+0x470>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d018      	beq.n	80022c0 <HAL_UARTEx_RxEventCallback+0x3ec>
 800228e:	4b22      	ldr	r3, [pc, #136]	; (8002318 <HAL_UARTEx_RxEventCallback+0x444>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a2d      	ldr	r2, [pc, #180]	; (8002348 <HAL_UARTEx_RxEventCallback+0x474>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d013      	beq.n	80022c0 <HAL_UARTEx_RxEventCallback+0x3ec>
 8002298:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <HAL_UARTEx_RxEventCallback+0x444>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a2b      	ldr	r2, [pc, #172]	; (800234c <HAL_UARTEx_RxEventCallback+0x478>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d00e      	beq.n	80022c0 <HAL_UARTEx_RxEventCallback+0x3ec>
 80022a2:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <HAL_UARTEx_RxEventCallback+0x444>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a2a      	ldr	r2, [pc, #168]	; (8002350 <HAL_UARTEx_RxEventCallback+0x47c>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d009      	beq.n	80022c0 <HAL_UARTEx_RxEventCallback+0x3ec>
 80022ac:	4b1a      	ldr	r3, [pc, #104]	; (8002318 <HAL_UARTEx_RxEventCallback+0x444>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a28      	ldr	r2, [pc, #160]	; (8002354 <HAL_UARTEx_RxEventCallback+0x480>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d004      	beq.n	80022c0 <HAL_UARTEx_RxEventCallback+0x3ec>
 80022b6:	4b18      	ldr	r3, [pc, #96]	; (8002318 <HAL_UARTEx_RxEventCallback+0x444>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a27      	ldr	r2, [pc, #156]	; (8002358 <HAL_UARTEx_RxEventCallback+0x484>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d108      	bne.n	80022d2 <HAL_UARTEx_RxEventCallback+0x3fe>
 80022c0:	4b15      	ldr	r3, [pc, #84]	; (8002318 <HAL_UARTEx_RxEventCallback+0x444>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	4b14      	ldr	r3, [pc, #80]	; (8002318 <HAL_UARTEx_RxEventCallback+0x444>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 0208 	bic.w	r2, r2, #8
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	e008      	b.n	80022e4 <HAL_UARTEx_RxEventCallback+0x410>
 80022d2:	4b11      	ldr	r3, [pc, #68]	; (8002318 <HAL_UARTEx_RxEventCallback+0x444>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <HAL_UARTEx_RxEventCallback+0x444>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0204 	bic.w	r2, r2, #4
 80022e0:	601a      	str	r2, [r3, #0]
}
 80022e2:	bf00      	nop
 80022e4:	bf00      	nop
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bdb0      	pop	{r4, r5, r7, pc}
 80022ec:	240009a4 	.word	0x240009a4
 80022f0:	24000988 	.word	0x24000988
 80022f4:	2400098c 	.word	0x2400098c
 80022f8:	24000990 	.word	0x24000990
 80022fc:	24000994 	.word	0x24000994
 8002300:	58021000 	.word	0x58021000
 8002304:	58020400 	.word	0x58020400
 8002308:	08011c54 	.word	0x08011c54
 800230c:	240011cc 	.word	0x240011cc
 8002310:	08011c64 	.word	0x08011c64
 8002314:	240009b8 	.word	0x240009b8
 8002318:	24001154 	.word	0x24001154
 800231c:	40020010 	.word	0x40020010
 8002320:	40020028 	.word	0x40020028
 8002324:	40020040 	.word	0x40020040
 8002328:	40020058 	.word	0x40020058
 800232c:	40020070 	.word	0x40020070
 8002330:	40020088 	.word	0x40020088
 8002334:	400200a0 	.word	0x400200a0
 8002338:	400200b8 	.word	0x400200b8
 800233c:	40020410 	.word	0x40020410
 8002340:	40020428 	.word	0x40020428
 8002344:	40020440 	.word	0x40020440
 8002348:	40020458 	.word	0x40020458
 800234c:	40020470 	.word	0x40020470
 8002350:	40020488 	.word	0x40020488
 8002354:	400204a0 	.word	0x400204a0
 8002358:	400204b8 	.word	0x400204b8
 800235c:	00000000 	.word	0x00000000

08002360 <HAL_TIM_PeriodElapsedCallback>:





void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]

	if (htim == &htim7) {	//

	}

	if (htim == &htim5) {	//
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a7d      	ldr	r2, [pc, #500]	; (8002560 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800236c:	4293      	cmp	r3, r2
 800236e:	f040 8119 	bne.w	80025a4 <HAL_TIM_PeriodElapsedCallback+0x244>
	//		stepperJ2.StepperSetFrequency(dq2);
	//		stepperJ3.StepperSetFrequency(dq3);
	//		stepperJ4.StepperSetFrequency(dq4);


			fcb_X.UpdateIVK(fcb_joint1.Encoder , 0.0,fcb_joint3.Encoder, 0.0, dx/1000.0, dy/1000.0, dz/1000.0, 0.0);
 8002372:	4b7c      	ldr	r3, [pc, #496]	; (8002564 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002374:	edd3 4a11 	vldr	s9, [r3, #68]	; 0x44
 8002378:	4b7b      	ldr	r3, [pc, #492]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800237a:	ed93 4a11 	vldr	s8, [r3, #68]	; 0x44
 800237e:	4b7b      	ldr	r3, [pc, #492]	; (800256c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	b25b      	sxtb	r3, r3
 8002384:	ee07 3a90 	vmov	s15, r3
 8002388:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800238c:	ed9f 5b72 	vldr	d5, [pc, #456]	; 8002558 <HAL_TIM_PeriodElapsedCallback+0x1f8>
 8002390:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002394:	eeb7 2bc7 	vcvt.f32.f64	s4, d7
 8002398:	4b75      	ldr	r3, [pc, #468]	; (8002570 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	b25b      	sxtb	r3, r3
 800239e:	ee07 3a90 	vmov	s15, r3
 80023a2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80023a6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8002558 <HAL_TIM_PeriodElapsedCallback+0x1f8>
 80023aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80023ae:	eef7 2bc7 	vcvt.f32.f64	s5, d7
 80023b2:	4b70      	ldr	r3, [pc, #448]	; (8002574 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	b25b      	sxtb	r3, r3
 80023b8:	ee07 3a90 	vmov	s15, r3
 80023bc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80023c0:	ed9f 5b65 	vldr	d5, [pc, #404]	; 8002558 <HAL_TIM_PeriodElapsedCallback+0x1f8>
 80023c4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80023c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80023cc:	eddf 3a6a 	vldr	s7, [pc, #424]	; 8002578 <HAL_TIM_PeriodElapsedCallback+0x218>
 80023d0:	eeb0 3a67 	vmov.f32	s6, s15
 80023d4:	eddf 1a68 	vldr	s3, [pc, #416]	; 8002578 <HAL_TIM_PeriodElapsedCallback+0x218>
 80023d8:	eeb0 1a44 	vmov.f32	s2, s8
 80023dc:	eddf 0a66 	vldr	s1, [pc, #408]	; 8002578 <HAL_TIM_PeriodElapsedCallback+0x218>
 80023e0:	eeb0 0a64 	vmov.f32	s0, s9
 80023e4:	4865      	ldr	r0, [pc, #404]	; (800257c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80023e6:	f7fe f9cb 	bl	8000780 <_ZN10RobotJoint9UpdateIVKEffffffff>

			int i;
					for (i = 1 ; i<num ; i++)
 80023ea:	2301      	movs	r3, #1
 80023ec:	61fb      	str	r3, [r7, #28]
 80023ee:	4b64      	ldr	r3, [pc, #400]	; (8002580 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	69fa      	ldr	r2, [r7, #28]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	da2f      	bge.n	8002458 <HAL_TIM_PeriodElapsedCallback+0xf8>
					{
						box_q1[i-1] = box_q1[i];
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	4961      	ldr	r1, [pc, #388]	; (8002584 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80023fe:	69fa      	ldr	r2, [r7, #28]
 8002400:	0092      	lsls	r2, r2, #2
 8002402:	440a      	add	r2, r1
 8002404:	6812      	ldr	r2, [r2, #0]
 8002406:	495f      	ldr	r1, [pc, #380]	; (8002584 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	601a      	str	r2, [r3, #0]
						box_q2[i-1] = box_q2[i];
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	3b01      	subs	r3, #1
 8002412:	495d      	ldr	r1, [pc, #372]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002414:	69fa      	ldr	r2, [r7, #28]
 8002416:	0092      	lsls	r2, r2, #2
 8002418:	440a      	add	r2, r1
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	495a      	ldr	r1, [pc, #360]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	601a      	str	r2, [r3, #0]
						box_q3[i-1] = box_q3[i];
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	3b01      	subs	r3, #1
 8002428:	4958      	ldr	r1, [pc, #352]	; (800258c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800242a:	69fa      	ldr	r2, [r7, #28]
 800242c:	0092      	lsls	r2, r2, #2
 800242e:	440a      	add	r2, r1
 8002430:	6812      	ldr	r2, [r2, #0]
 8002432:	4956      	ldr	r1, [pc, #344]	; (800258c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	440b      	add	r3, r1
 8002438:	601a      	str	r2, [r3, #0]
						box_q4[i-1] = box_q4[i];
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	3b01      	subs	r3, #1
 800243e:	4954      	ldr	r1, [pc, #336]	; (8002590 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002440:	69fa      	ldr	r2, [r7, #28]
 8002442:	0092      	lsls	r2, r2, #2
 8002444:	440a      	add	r2, r1
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	4951      	ldr	r1, [pc, #324]	; (8002590 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	601a      	str	r2, [r3, #0]
					for (i = 1 ; i<num ; i++)
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	3301      	adds	r3, #1
 8002454:	61fb      	str	r3, [r7, #28]
 8002456:	e7ca      	b.n	80023ee <HAL_TIM_PeriodElapsedCallback+0x8e>
					}
					 box_q1[num-1] = fcb_X.w_q1;
 8002458:	4b49      	ldr	r3, [pc, #292]	; (8002580 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	3b01      	subs	r3, #1
 800245e:	4a47      	ldr	r2, [pc, #284]	; (800257c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002460:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002462:	4948      	ldr	r1, [pc, #288]	; (8002584 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	601a      	str	r2, [r3, #0]
					 box_q2[num-1] = dz;
 800246a:	4b42      	ldr	r3, [pc, #264]	; (8002574 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	b25a      	sxtb	r2, r3
 8002470:	4b43      	ldr	r3, [pc, #268]	; (8002580 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	3b01      	subs	r3, #1
 8002476:	ee07 2a90 	vmov	s15, r2
 800247a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800247e:	4a42      	ldr	r2, [pc, #264]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	edc3 7a00 	vstr	s15, [r3]
					 box_q3[num-1] = fcb_X.w_q3;
 8002488:	4b3d      	ldr	r3, [pc, #244]	; (8002580 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	3b01      	subs	r3, #1
 800248e:	4a3b      	ldr	r2, [pc, #236]	; (800257c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002490:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002492:	493e      	ldr	r1, [pc, #248]	; (800258c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	440b      	add	r3, r1
 8002498:	601a      	str	r2, [r3, #0]
					 box_q4[num-1] = fcb_X.w_q4;
 800249a:	4b39      	ldr	r3, [pc, #228]	; (8002580 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	3b01      	subs	r3, #1
 80024a0:	4a36      	ldr	r2, [pc, #216]	; (800257c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80024a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024a4:	493a      	ldr	r1, [pc, #232]	; (8002590 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	601a      	str	r2, [r3, #0]

					u_q1 = 0.0;
 80024ac:	4b39      	ldr	r3, [pc, #228]	; (8002594 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
					u_q2 = 0.0;
 80024b4:	4b38      	ldr	r3, [pc, #224]	; (8002598 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
					u_q3 = 0.0;
 80024bc:	4b37      	ldr	r3, [pc, #220]	; (800259c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
					u_q4 = 0.0;
 80024c4:	4b36      	ldr	r3, [pc, #216]	; (80025a0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]

					for(i = 0; i < num; i++)
 80024cc:	2300      	movs	r3, #0
 80024ce:	61fb      	str	r3, [r7, #28]
 80024d0:	4b2b      	ldr	r3, [pc, #172]	; (8002580 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	69fa      	ldr	r2, [r7, #28]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	da64      	bge.n	80025a4 <HAL_TIM_PeriodElapsedCallback+0x244>
					{
						u_q1 += box_q1[i];
 80024da:	4a2a      	ldr	r2, [pc, #168]	; (8002584 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	ed93 7a00 	vldr	s14, [r3]
 80024e6:	4b2b      	ldr	r3, [pc, #172]	; (8002594 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80024e8:	edd3 7a00 	vldr	s15, [r3]
 80024ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f0:	4b28      	ldr	r3, [pc, #160]	; (8002594 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80024f2:	edc3 7a00 	vstr	s15, [r3]
						u_q2 += box_q2[i];
 80024f6:	4a24      	ldr	r2, [pc, #144]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	ed93 7a00 	vldr	s14, [r3]
 8002502:	4b25      	ldr	r3, [pc, #148]	; (8002598 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002504:	edd3 7a00 	vldr	s15, [r3]
 8002508:	ee77 7a27 	vadd.f32	s15, s14, s15
 800250c:	4b22      	ldr	r3, [pc, #136]	; (8002598 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800250e:	edc3 7a00 	vstr	s15, [r3]
						u_q3 += box_q3[i];
 8002512:	4a1e      	ldr	r2, [pc, #120]	; (800258c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	ed93 7a00 	vldr	s14, [r3]
 800251e:	4b1f      	ldr	r3, [pc, #124]	; (800259c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002520:	edd3 7a00 	vldr	s15, [r3]
 8002524:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002528:	4b1c      	ldr	r3, [pc, #112]	; (800259c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800252a:	edc3 7a00 	vstr	s15, [r3]
						u_q4 += box_q4[i];
 800252e:	4a18      	ldr	r2, [pc, #96]	; (8002590 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	ed93 7a00 	vldr	s14, [r3]
 800253a:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800253c:	edd3 7a00 	vldr	s15, [r3]
 8002540:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002544:	4b16      	ldr	r3, [pc, #88]	; (80025a0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002546:	edc3 7a00 	vstr	s15, [r3]
					for(i = 0; i < num; i++)
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3301      	adds	r3, #1
 800254e:	61fb      	str	r3, [r7, #28]
 8002550:	e7be      	b.n	80024d0 <HAL_TIM_PeriodElapsedCallback+0x170>
 8002552:	bf00      	nop
 8002554:	f3af 8000 	nop.w
 8002558:	00000000 	.word	0x00000000
 800255c:	408f4000 	.word	0x408f4000
 8002560:	24000d54 	.word	0x24000d54
 8002564:	2400040c 	.word	0x2400040c
 8002568:	240005d4 	.word	0x240005d4
 800256c:	24000984 	.word	0x24000984
 8002570:	24000985 	.word	0x24000985
 8002574:	24000986 	.word	0x24000986
 8002578:	00000000 	.word	0x00000000
 800257c:	24000880 	.word	0x24000880
 8002580:	2400020c 	.word	0x2400020c
 8002584:	24000a24 	.word	0x24000a24
 8002588:	24000a9c 	.word	0x24000a9c
 800258c:	24000b14 	.word	0x24000b14
 8002590:	24000b8c 	.word	0x24000b8c
 8002594:	24000a10 	.word	0x24000a10
 8002598:	24000a14 	.word	0x24000a14
 800259c:	24000a18 	.word	0x24000a18
 80025a0:	24000a1c 	.word	0x24000a1c
	if (htim == &htim16)
	{

	}

	if (htim == &htim14) {
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4ad4      	ldr	r2, [pc, #848]	; (80028f8 <HAL_TIM_PeriodElapsedCallback+0x598>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	f040 8395 	bne.w	8002cd8 <HAL_TIM_PeriodElapsedCallback+0x978>
//			fcb_joint4.Encoder = encoderJ4.getAngPos180() / 2.609 ;
//		}
		// #############################################################################

		// ######################## Setpoint ##########################################
		float t2 = t * t;
 80025ae:	4bd3      	ldr	r3, [pc, #844]	; (80028fc <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80025b0:	ed93 7a00 	vldr	s14, [r3]
 80025b4:	4bd1      	ldr	r3, [pc, #836]	; (80028fc <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80025b6:	edd3 7a00 	vldr	s15, [r3]
 80025ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025be:	edc7 7a06 	vstr	s15, [r7, #24]
		float t3 = t * t * t;
 80025c2:	4bce      	ldr	r3, [pc, #824]	; (80028fc <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80025c4:	ed93 7a00 	vldr	s14, [r3]
 80025c8:	4bcc      	ldr	r3, [pc, #816]	; (80028fc <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80025ca:	edd3 7a00 	vldr	s15, [r3]
 80025ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025d2:	4bca      	ldr	r3, [pc, #808]	; (80028fc <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80025d4:	edd3 7a00 	vldr	s15, [r3]
 80025d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025dc:	edc7 7a05 	vstr	s15, [r7, #20]
		float t4 = t * t * t * t;
 80025e0:	4bc6      	ldr	r3, [pc, #792]	; (80028fc <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80025e2:	ed93 7a00 	vldr	s14, [r3]
 80025e6:	4bc5      	ldr	r3, [pc, #788]	; (80028fc <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80025e8:	edd3 7a00 	vldr	s15, [r3]
 80025ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025f0:	4bc2      	ldr	r3, [pc, #776]	; (80028fc <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80025f2:	edd3 7a00 	vldr	s15, [r3]
 80025f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025fa:	4bc0      	ldr	r3, [pc, #768]	; (80028fc <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80025fc:	edd3 7a00 	vldr	s15, [r3]
 8002600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002604:	edc7 7a04 	vstr	s15, [r7, #16]
		float t5 = t * t * t * t * t;
 8002608:	4bbc      	ldr	r3, [pc, #752]	; (80028fc <HAL_TIM_PeriodElapsedCallback+0x59c>)
 800260a:	ed93 7a00 	vldr	s14, [r3]
 800260e:	4bbb      	ldr	r3, [pc, #748]	; (80028fc <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8002610:	edd3 7a00 	vldr	s15, [r3]
 8002614:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002618:	4bb8      	ldr	r3, [pc, #736]	; (80028fc <HAL_TIM_PeriodElapsedCallback+0x59c>)
 800261a:	edd3 7a00 	vldr	s15, [r3]
 800261e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002622:	4bb6      	ldr	r3, [pc, #728]	; (80028fc <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8002624:	edd3 7a00 	vldr	s15, [r3]
 8002628:	ee27 7a27 	vmul.f32	s14, s14, s15
 800262c:	4bb3      	ldr	r3, [pc, #716]	; (80028fc <HAL_TIM_PeriodElapsedCallback+0x59c>)
 800262e:	edd3 7a00 	vldr	s15, [r3]
 8002632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002636:	edc7 7a03 	vstr	s15, [r7, #12]
//		fcb_joint3.Goal_Velocity = fcb_X.w_q3;
//		fcb_joint4.Goal_Velocity = fcb_X.w_q4;
////	fcb_joint3.Goal_Position = fcb_X.q3;


		fcb_joint1.Goal_Velocity = fcb_joint1.C1 + (2.0*fcb_joint1.C2*t) + (3.0*fcb_joint1.C3*t2) + (4.0*fcb_joint1.C4*t3) + (5.0*fcb_joint1.C5*t4);
 800263a:	4bb1      	ldr	r3, [pc, #708]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 800263c:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8002640:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002644:	4bae      	ldr	r3, [pc, #696]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8002646:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 800264a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800264e:	ee37 5b07 	vadd.f64	d5, d7, d7
 8002652:	4baa      	ldr	r3, [pc, #680]	; (80028fc <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8002654:	edd3 7a00 	vldr	s15, [r3]
 8002658:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800265c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002660:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002664:	4ba6      	ldr	r3, [pc, #664]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8002666:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 800266a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800266e:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8002672:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002676:	edd7 7a06 	vldr	s15, [r7, #24]
 800267a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800267e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002682:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002686:	4b9e      	ldr	r3, [pc, #632]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8002688:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 800268c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002690:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8002694:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002698:	edd7 7a05 	vldr	s15, [r7, #20]
 800269c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026a0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80026a4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80026a8:	4b95      	ldr	r3, [pc, #596]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80026aa:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 80026ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026b2:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 80026b6:	ee27 5b05 	vmul.f64	d5, d7, d5
 80026ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80026be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026c2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80026c6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80026ca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80026ce:	4b8c      	ldr	r3, [pc, #560]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80026d0:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint1.Goal_Position = (fcb_joint1.C0 + (fcb_joint1.C1*t) + (fcb_joint1.C2*t2) + (fcb_joint1.C3*t3) + (fcb_joint1.C4*t4) + (fcb_joint1.C5*t5));
 80026d4:	4b8a      	ldr	r3, [pc, #552]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80026d6:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 80026da:	4b89      	ldr	r3, [pc, #548]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80026dc:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 80026e0:	4b86      	ldr	r3, [pc, #536]	; (80028fc <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80026e2:	edd3 7a00 	vldr	s15, [r3]
 80026e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026ee:	4b84      	ldr	r3, [pc, #528]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80026f0:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 80026f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80026f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002700:	4b7f      	ldr	r3, [pc, #508]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8002702:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8002706:	edd7 7a05 	vldr	s15, [r7, #20]
 800270a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800270e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002712:	4b7b      	ldr	r3, [pc, #492]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8002714:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8002718:	edd7 7a04 	vldr	s15, [r7, #16]
 800271c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002720:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002724:	4b76      	ldr	r3, [pc, #472]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8002726:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 800272a:	edd7 7a03 	vldr	s15, [r7, #12]
 800272e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002732:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002736:	4b72      	ldr	r3, [pc, #456]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8002738:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint3.Goal_Velocity = fcb_joint3.C1 + (2.0*fcb_joint3.C2*t) + (3.0*fcb_joint3.C3*t2) + (4.0*fcb_joint3.C4*t3) + (5.0*fcb_joint3.C5*t4);
 800273c:	4b71      	ldr	r3, [pc, #452]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 800273e:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8002742:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002746:	4b6f      	ldr	r3, [pc, #444]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8002748:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 800274c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002750:	ee37 5b07 	vadd.f64	d5, d7, d7
 8002754:	4b69      	ldr	r3, [pc, #420]	; (80028fc <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8002756:	edd3 7a00 	vldr	s15, [r3]
 800275a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800275e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002762:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002766:	4b67      	ldr	r3, [pc, #412]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8002768:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 800276c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002770:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8002774:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002778:	edd7 7a06 	vldr	s15, [r7, #24]
 800277c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002780:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002784:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002788:	4b5e      	ldr	r3, [pc, #376]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 800278a:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 800278e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002792:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8002796:	ee27 5b05 	vmul.f64	d5, d7, d5
 800279a:	edd7 7a05 	vldr	s15, [r7, #20]
 800279e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80027a2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80027a6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80027aa:	4b56      	ldr	r3, [pc, #344]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80027ac:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 80027b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80027b4:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 80027b8:	ee27 5b05 	vmul.f64	d5, d7, d5
 80027bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80027c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80027c4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80027c8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80027cc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80027d0:	4b4c      	ldr	r3, [pc, #304]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80027d2:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint3.Goal_Position = (fcb_joint3.C0 + (fcb_joint3.C1*t) + (fcb_joint3.C2*t2) + (fcb_joint3.C3*t3) + (fcb_joint3.C4*t4) + (fcb_joint3.C5*t5));
 80027d6:	4b4b      	ldr	r3, [pc, #300]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80027d8:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 80027dc:	4b49      	ldr	r3, [pc, #292]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80027de:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 80027e2:	4b46      	ldr	r3, [pc, #280]	; (80028fc <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80027e4:	edd3 7a00 	vldr	s15, [r3]
 80027e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027f0:	4b44      	ldr	r3, [pc, #272]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80027f2:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 80027f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80027fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002802:	4b40      	ldr	r3, [pc, #256]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8002804:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8002808:	edd7 7a05 	vldr	s15, [r7, #20]
 800280c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002810:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002814:	4b3b      	ldr	r3, [pc, #236]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8002816:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 800281a:	edd7 7a04 	vldr	s15, [r7, #16]
 800281e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002822:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002826:	4b37      	ldr	r3, [pc, #220]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8002828:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 800282c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002830:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002834:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002838:	4b32      	ldr	r3, [pc, #200]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 800283a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		//		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.Encoder;
		//		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
		//		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;


		fcb_joint1.KalmanFillter(fcb_joint1.Encoder);
 800283e:	4b30      	ldr	r3, [pc, #192]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8002840:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002844:	eeb0 0a67 	vmov.f32	s0, s15
 8002848:	482d      	ldr	r0, [pc, #180]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 800284a:	f7fe f9e7 	bl	8000c1c <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint1.kalman_pos = fcb_joint1.X11;
 800284e:	4b2c      	ldr	r3, [pc, #176]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8002850:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002854:	4a2a      	ldr	r2, [pc, #168]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8002856:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint1.kalman_velo = fcb_joint1.X21;
 800285a:	4b29      	ldr	r3, [pc, #164]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 800285c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002860:	4a27      	ldr	r2, [pc, #156]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8002862:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
 8002866:	4b27      	ldr	r3, [pc, #156]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8002868:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800286c:	eeb0 0a67 	vmov.f32	s0, s15
 8002870:	4824      	ldr	r0, [pc, #144]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8002872:	f7fe f9d3 	bl	8000c1c <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint3.kalman_pos = fcb_joint3.X11;
 8002876:	4b23      	ldr	r3, [pc, #140]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8002878:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800287c:	4a21      	ldr	r2, [pc, #132]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 800287e:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint3.kalman_velo = fcb_joint3.X21;
 8002882:	4b20      	ldr	r3, [pc, #128]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8002884:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002888:	4a1e      	ldr	r2, [pc, #120]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 800288a:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
//		fcb_joint1.Kd_p = 0.0004;
//		fcb_joint3.Kp_p = 0.015; // 0.015
//		fcb_joint3.Ki_p = 0.009; // 0.009
//		fcb_joint3.Kd_p = 0.0015; // 0.0015

		fcb_joint1.Kp_p = 0.0;
 800288e:	4b1c      	ldr	r3, [pc, #112]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint1.Ki_p = 0.0;
 8002896:	4b1a      	ldr	r3, [pc, #104]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint1.Kd_p = 0.0;
 800289e:	4b18      	ldr	r3, [pc, #96]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80028a0:	f04f 0200 	mov.w	r2, #0
 80028a4:	669a      	str	r2, [r3, #104]	; 0x68
		fcb_joint3.Kp_p = 0.0;
 80028a6:	4b17      	ldr	r3, [pc, #92]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80028a8:	f04f 0200 	mov.w	r2, #0
 80028ac:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint3.Ki_p = 0.0;
 80028ae:	4b15      	ldr	r3, [pc, #84]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint3.Kd_p = 0.0;
 80028b6:	4b13      	ldr	r3, [pc, #76]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	669a      	str	r2, [r3, #104]	; 0x68

		fcb_joint1.Kp_v = 0.0;
 80028be:	4b10      	ldr	r3, [pc, #64]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint1.Ki_v = 0.0;
 80028c6:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint1.Kd_v = 0.0;
 80028ce:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	675a      	str	r2, [r3, #116]	; 0x74
		fcb_joint3.Kp_v = 0.0;
 80028d6:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	66da      	str	r2, [r3, #108]	; 0x6c
		fcb_joint3.Ki_v = 0.0;
 80028de:	4b09      	ldr	r3, [pc, #36]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	671a      	str	r2, [r3, #112]	; 0x70
		fcb_joint3.Kd_v = 0.0;
 80028e6:	4b07      	ldr	r3, [pc, #28]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	675a      	str	r2, [r3, #116]	; 0x74

		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.Encoder;
 80028ee:	4b04      	ldr	r3, [pc, #16]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80028f0:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80028f4:	e008      	b.n	8002908 <HAL_TIM_PeriodElapsedCallback+0x5a8>
 80028f6:	bf00      	nop
 80028f8:	24000f1c 	.word	0x24000f1c
 80028fc:	24000a0c 	.word	0x24000a0c
 8002900:	2400040c 	.word	0x2400040c
 8002904:	240005d4 	.word	0x240005d4
 8002908:	4bb3      	ldr	r3, [pc, #716]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 800290a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800290e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002912:	4bb1      	ldr	r3, [pc, #708]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002914:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.Encoder;
 8002918:	4bb0      	ldr	r3, [pc, #704]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 800291a:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800291e:	4baf      	ldr	r3, [pc, #700]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002920:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002924:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002928:	4bac      	ldr	r3, [pc, #688]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 800292a:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint1.Error_v = fcb_joint1.Goal_Velocity - fcb_joint1.kalman_velo;
 800292e:	4baa      	ldr	r3, [pc, #680]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002930:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8002934:	4ba8      	ldr	r3, [pc, #672]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002936:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 800293a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800293e:	4ba6      	ldr	r3, [pc, #664]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002940:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		fcb_joint3.Error_v = fcb_joint3.Goal_Velocity - fcb_joint3.kalman_velo;
 8002944:	4ba5      	ldr	r3, [pc, #660]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002946:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800294a:	4ba4      	ldr	r3, [pc, #656]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 800294c:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8002950:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002954:	4ba1      	ldr	r3, [pc, #644]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002956:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84

		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
 800295a:	4b9f      	ldr	r3, [pc, #636]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 800295c:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8002960:	4b9d      	ldr	r3, [pc, #628]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002962:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002966:	ee77 7a27 	vadd.f32	s15, s14, s15
 800296a:	4b9b      	ldr	r3, [pc, #620]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 800296c:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;
 8002970:	4b9a      	ldr	r3, [pc, #616]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002972:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8002976:	4b99      	ldr	r3, [pc, #612]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002978:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800297c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002980:	4b96      	ldr	r3, [pc, #600]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002982:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint1.Sum_Error_v += fcb_joint1.Error_v;
 8002986:	4b94      	ldr	r3, [pc, #592]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002988:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 800298c:	4b92      	ldr	r3, [pc, #584]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 800298e:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002992:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002996:	4b90      	ldr	r3, [pc, #576]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002998:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
		fcb_joint3.Sum_Error_v += fcb_joint3.Error_v;
 800299c:	4b8f      	ldr	r3, [pc, #572]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 800299e:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 80029a2:	4b8e      	ldr	r3, [pc, #568]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 80029a4:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80029a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ac:	4b8b      	ldr	r3, [pc, #556]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 80029ae:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity +
 80029b2:	4b89      	ldr	r3, [pc, #548]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 80029b4:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
									(fcb_joint1.Kp_p * fcb_joint1.Error_p ) +
 80029b8:	4b87      	ldr	r3, [pc, #540]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 80029ba:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 80029be:	4b86      	ldr	r3, [pc, #536]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 80029c0:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80029c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity +
 80029c8:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Ki_p * fcb_joint1.Sum_Error_p ) +
 80029cc:	4b82      	ldr	r3, [pc, #520]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 80029ce:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 80029d2:	4b81      	ldr	r3, [pc, #516]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 80029d4:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80029d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Kp_p * fcb_joint1.Error_p ) +
 80029dc:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Kd_p * (fcb_joint1.Error_p - fcb_joint1.Old_p) ) +
 80029e0:	4b7d      	ldr	r3, [pc, #500]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 80029e2:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 80029e6:	4b7c      	ldr	r3, [pc, #496]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 80029e8:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 80029ec:	4b7a      	ldr	r3, [pc, #488]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 80029ee:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 80029f2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80029f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Ki_p * fcb_joint1.Sum_Error_p ) +
 80029fa:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Kp_v * fcb_joint1.Error_v ) +
 80029fe:	4b76      	ldr	r3, [pc, #472]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002a00:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8002a04:	4b74      	ldr	r3, [pc, #464]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002a06:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8002a0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Kd_p * (fcb_joint1.Error_p - fcb_joint1.Old_p) ) +
 8002a0e:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Ki_v * fcb_joint1.Sum_Error_v ) +
 8002a12:	4b71      	ldr	r3, [pc, #452]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002a14:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8002a18:	4b6f      	ldr	r3, [pc, #444]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002a1a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002a1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Kp_v * fcb_joint1.Error_v ) +
 8002a22:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint1.Kd_v * (fcb_joint1.Error_v - fcb_joint1.Old_v) ) ;
 8002a26:	4b6c      	ldr	r3, [pc, #432]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002a28:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8002a2c:	4b6a      	ldr	r3, [pc, #424]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002a2e:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8002a32:	4b69      	ldr	r3, [pc, #420]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002a34:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8002a38:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002a3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint1.Ki_v * fcb_joint1.Sum_Error_v ) +
 8002a40:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity +
 8002a44:	4b64      	ldr	r3, [pc, #400]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002a46:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity) +
 8002a4a:	4b64      	ldr	r3, [pc, #400]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002a4c:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
									(fcb_joint3.Kp_p * fcb_joint3.Error_p ) +
 8002a50:	4b62      	ldr	r3, [pc, #392]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002a52:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8002a56:	4b61      	ldr	r3, [pc, #388]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002a58:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002a5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity) +
 8002a60:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Ki_p * fcb_joint3.Sum_Error_p ) +
 8002a64:	4b5d      	ldr	r3, [pc, #372]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002a66:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8002a6a:	4b5c      	ldr	r3, [pc, #368]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002a6c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002a70:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Kp_p * fcb_joint3.Error_p ) +
 8002a74:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Kd_p * (fcb_joint3.Error_p - fcb_joint3.Old_p) ) +
 8002a78:	4b58      	ldr	r3, [pc, #352]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002a7a:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8002a7e:	4b57      	ldr	r3, [pc, #348]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002a80:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 8002a84:	4b55      	ldr	r3, [pc, #340]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002a86:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8002a8a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002a8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Ki_p * fcb_joint3.Sum_Error_p ) +
 8002a92:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Kp_v * fcb_joint3.Error_v) +
 8002a96:	4b51      	ldr	r3, [pc, #324]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002a98:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8002a9c:	4b4f      	ldr	r3, [pc, #316]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002a9e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8002aa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Kd_p * (fcb_joint3.Error_p - fcb_joint3.Old_p) ) +
 8002aa6:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Ki_v * fcb_joint3.Sum_Error_v ) +
 8002aaa:	4b4c      	ldr	r3, [pc, #304]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002aac:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8002ab0:	4b4a      	ldr	r3, [pc, #296]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002ab2:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002ab6:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Kp_v * fcb_joint3.Error_v) +
 8002aba:	ee37 7a27 	vadd.f32	s14, s14, s15
									(fcb_joint3.Kd_v * (fcb_joint3.Error_v - fcb_joint3.Old_v) ) ;
 8002abe:	4b47      	ldr	r3, [pc, #284]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002ac0:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8002ac4:	4b45      	ldr	r3, [pc, #276]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002ac6:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8002aca:	4b44      	ldr	r3, [pc, #272]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002acc:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8002ad0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002ad4:	ee66 7aa7 	vmul.f32	s15, s13, s15
									(fcb_joint3.Ki_v * fcb_joint3.Sum_Error_v ) +
 8002ad8:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity) +
 8002adc:	4b3f      	ldr	r3, [pc, #252]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002ade:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

//		stepperJ1.StepperOpenLoopSpeedM(fcb_joint1.Goal_Velocity);
//		stepperJ3.StepperOpenLoopSpeedM(fcb_joint3.Goal_Velocity);
//		stepperJ4.StepperOpenLoopSpeed(-4.0 * fcb_joint1.Goal_Velocity);

		fcb_joint1.Old_Error_p = fcb_joint1.Error_p;
 8002ae2:	4b3d      	ldr	r3, [pc, #244]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002ae4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ae6:	4a3c      	ldr	r2, [pc, #240]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002ae8:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint3.Old_Error_p = fcb_joint3.Error_p;
 8002aea:	4b3c      	ldr	r3, [pc, #240]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002aec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aee:	4a3b      	ldr	r2, [pc, #236]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002af0:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint1.Old_Error_v = fcb_joint1.Error_v;
 8002af2:	4b39      	ldr	r3, [pc, #228]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002af8:	4a37      	ldr	r2, [pc, #220]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002afa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		fcb_joint3.Old_Error_v = fcb_joint3.Error_v;
 8002afe:	4b37      	ldr	r3, [pc, #220]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b04:	4a35      	ldr	r2, [pc, #212]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002b06:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

		fcb_joint1.Old_p = fcb_joint1.Encoder;
 8002b0a:	4b33      	ldr	r3, [pc, #204]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0e:	4a32      	ldr	r2, [pc, #200]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002b10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint3.Old_p = fcb_joint3.Encoder;
 8002b14:	4b31      	ldr	r3, [pc, #196]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b18:	4a30      	ldr	r2, [pc, #192]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002b1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint1.Old_v = fcb_joint1.kalman_velo;
 8002b1e:	4b2e      	ldr	r3, [pc, #184]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002b20:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002b24:	4a2c      	ldr	r2, [pc, #176]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002b26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		fcb_joint3.Old_v = fcb_joint1.kalman_velo;
 8002b2a:	4b2b      	ldr	r3, [pc, #172]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002b2c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002b30:	4a2a      	ldr	r2, [pc, #168]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002b32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

//		if (Traj_Flag == 1){
//			t = t + sample_time_500;
//		}
		t = t + sample_time_500;
 8002b36:	4b2a      	ldr	r3, [pc, #168]	; (8002be0 <HAL_TIM_PeriodElapsedCallback+0x880>)
 8002b38:	ed93 7a00 	vldr	s14, [r3]
 8002b3c:	4b29      	ldr	r3, [pc, #164]	; (8002be4 <HAL_TIM_PeriodElapsedCallback+0x884>)
 8002b3e:	edd3 7a00 	vldr	s15, [r3]
 8002b42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b46:	4b26      	ldr	r3, [pc, #152]	; (8002be0 <HAL_TIM_PeriodElapsedCallback+0x880>)
 8002b48:	edc3 7a00 	vstr	s15, [r3]
		//-  (sample_time_500*40.0)
		if (t >= fcb_joint3.T )
 8002b4c:	4b23      	ldr	r3, [pc, #140]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002b4e:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 8002b52:	4b23      	ldr	r3, [pc, #140]	; (8002be0 <HAL_TIM_PeriodElapsedCallback+0x880>)
 8002b54:	edd3 7a00 	vldr	s15, [r3]
 8002b58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b60:	bf94      	ite	ls
 8002b62:	2301      	movls	r3, #1
 8002b64:	2300      	movhi	r3, #0
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 80b5 	beq.w	8002cd8 <HAL_TIM_PeriodElapsedCallback+0x978>
				{

//			stepperJ1.StepperOpenLoopSpeedM(0);
//			stepperJ3.StepperOpenLoopSpeedM(0);
			Traj_Flag = 0;
 8002b6e:	4b1e      	ldr	r3, [pc, #120]	; (8002be8 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
			if (direction_traj == 0)
 8002b74:	4b1d      	ldr	r3, [pc, #116]	; (8002bec <HAL_TIM_PeriodElapsedCallback+0x88c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	bf0c      	ite	eq
 8002b7c:	2301      	moveq	r3, #1
 8002b7e:	2300      	movne	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d03a      	beq.n	8002bfc <HAL_TIM_PeriodElapsedCallback+0x89c>
			{

//				fcb_joint1.UpdateQuinticCoff(15, fcb_joint1.Encoder, 0.0, 0.0, 0.0, 0.0, 0.0);
//				fcb_joint3.UpdateQuinticCoff(15, fcb_joint3.Encoder, 0.0, 0.0, 0.0, 0.0, 0.0);
				fcb_joint1.UpdateQuinticCoff(15, fcb_joint1.Encoder, -785.0, 0.0, 0.0, 0.0, 0.0);
 8002b86:	4b14      	ldr	r3, [pc, #80]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002b88:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002b8c:	ed9f 3a18 	vldr	s6, [pc, #96]	; 8002bf0 <HAL_TIM_PeriodElapsedCallback+0x890>
 8002b90:	eddf 2a17 	vldr	s5, [pc, #92]	; 8002bf0 <HAL_TIM_PeriodElapsedCallback+0x890>
 8002b94:	ed9f 2a16 	vldr	s4, [pc, #88]	; 8002bf0 <HAL_TIM_PeriodElapsedCallback+0x890>
 8002b98:	eddf 1a15 	vldr	s3, [pc, #84]	; 8002bf0 <HAL_TIM_PeriodElapsedCallback+0x890>
 8002b9c:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8002bf4 <HAL_TIM_PeriodElapsedCallback+0x894>
 8002ba0:	eef0 0a67 	vmov.f32	s1, s15
 8002ba4:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8002ba8:	480b      	ldr	r0, [pc, #44]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8002baa:	f7fd ff13 	bl	80009d4 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
//				fcb_joint3.UpdateQuinticCoff(15, fcb_joint3.Encoder, 1570.0, 0.0, 0.0, 0.0, 0.0);
				fcb_joint3.UpdateQuinticCoff(15, fcb_joint3.Encoder, 2400.0, 0.0, 0.0, 0.0, 0.0);
 8002bae:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002bb0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002bb4:	ed9f 3a0e 	vldr	s6, [pc, #56]	; 8002bf0 <HAL_TIM_PeriodElapsedCallback+0x890>
 8002bb8:	eddf 2a0d 	vldr	s5, [pc, #52]	; 8002bf0 <HAL_TIM_PeriodElapsedCallback+0x890>
 8002bbc:	ed9f 2a0c 	vldr	s4, [pc, #48]	; 8002bf0 <HAL_TIM_PeriodElapsedCallback+0x890>
 8002bc0:	eddf 1a0b 	vldr	s3, [pc, #44]	; 8002bf0 <HAL_TIM_PeriodElapsedCallback+0x890>
 8002bc4:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8002bf8 <HAL_TIM_PeriodElapsedCallback+0x898>
 8002bc8:	eef0 0a67 	vmov.f32	s1, s15
 8002bcc:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8002bd0:	4802      	ldr	r0, [pc, #8]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8002bd2:	f7fd feff 	bl	80009d4 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
 8002bd6:	e039      	b.n	8002c4c <HAL_TIM_PeriodElapsedCallback+0x8ec>
 8002bd8:	2400040c 	.word	0x2400040c
 8002bdc:	240005d4 	.word	0x240005d4
 8002be0:	24000a0c 	.word	0x24000a0c
 8002be4:	24000208 	.word	0x24000208
 8002be8:	24000a08 	.word	0x24000a08
 8002bec:	24000a04 	.word	0x24000a04
 8002bf0:	00000000 	.word	0x00000000
 8002bf4:	c4444000 	.word	0xc4444000
 8002bf8:	45160000 	.word	0x45160000

			else
			{
//				fcb_joint1.UpdateQuinticCoff(15, fcb_joint1.Encoder, 0, 0.0, 0.0, 0.0, 0.0);
//				fcb_joint3.UpdateQuinticCoff(15, fcb_joint3.Encoder, 0, 0.0, 0.0, 0.0, 0.0);
				fcb_joint1.UpdateQuinticCoff(15, fcb_joint1.Encoder, 785.0, 0.0, 0.0, 0.0, 0.0);
 8002bfc:	4b38      	ldr	r3, [pc, #224]	; (8002ce0 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8002bfe:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002c02:	ed9f 3a38 	vldr	s6, [pc, #224]	; 8002ce4 <HAL_TIM_PeriodElapsedCallback+0x984>
 8002c06:	eddf 2a37 	vldr	s5, [pc, #220]	; 8002ce4 <HAL_TIM_PeriodElapsedCallback+0x984>
 8002c0a:	ed9f 2a36 	vldr	s4, [pc, #216]	; 8002ce4 <HAL_TIM_PeriodElapsedCallback+0x984>
 8002c0e:	eddf 1a35 	vldr	s3, [pc, #212]	; 8002ce4 <HAL_TIM_PeriodElapsedCallback+0x984>
 8002c12:	ed9f 1a35 	vldr	s2, [pc, #212]	; 8002ce8 <HAL_TIM_PeriodElapsedCallback+0x988>
 8002c16:	eef0 0a67 	vmov.f32	s1, s15
 8002c1a:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8002c1e:	4830      	ldr	r0, [pc, #192]	; (8002ce0 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8002c20:	f7fd fed8 	bl	80009d4 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
//				fcb_joint3.UpdateQuinticCoff(15, fcb_joint3.Encoder, -1570.0, 0.0, 0.0, 0.0, 0.0);
				fcb_joint3.UpdateQuinticCoff(15, fcb_joint3.Encoder, -2400.0, 0.0, 0.0, 0.0, 0.0);
 8002c24:	4b31      	ldr	r3, [pc, #196]	; (8002cec <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8002c26:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002c2a:	ed9f 3a2e 	vldr	s6, [pc, #184]	; 8002ce4 <HAL_TIM_PeriodElapsedCallback+0x984>
 8002c2e:	eddf 2a2d 	vldr	s5, [pc, #180]	; 8002ce4 <HAL_TIM_PeriodElapsedCallback+0x984>
 8002c32:	ed9f 2a2c 	vldr	s4, [pc, #176]	; 8002ce4 <HAL_TIM_PeriodElapsedCallback+0x984>
 8002c36:	eddf 1a2b 	vldr	s3, [pc, #172]	; 8002ce4 <HAL_TIM_PeriodElapsedCallback+0x984>
 8002c3a:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 8002cf0 <HAL_TIM_PeriodElapsedCallback+0x990>
 8002c3e:	eef0 0a67 	vmov.f32	s1, s15
 8002c42:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8002c46:	4829      	ldr	r0, [pc, #164]	; (8002cec <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8002c48:	f7fd fec4 	bl	80009d4 <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>


//				fcb_X.UpdateQuinticCoff(5.0, Robot_X, Robot_X + 0.2, 0, 0, 0, 0);
			}

			direction_traj ^= 1;
 8002c4c:	4b29      	ldr	r3, [pc, #164]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0x994>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f083 0301 	eor.w	r3, r3, #1
 8002c54:	4a27      	ldr	r2, [pc, #156]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0x994>)
 8002c56:	6013      	str	r3, [r2, #0]


			t = (int)0;
 8002c58:	4b27      	ldr	r3, [pc, #156]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x998>)
 8002c5a:	f04f 0200 	mov.w	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
//			HAL_TIM_Base_Stop_IT(&htim14);
			fcb_joint1.Sum_Error_p = 0;
 8002c60:	4b1f      	ldr	r3, [pc, #124]	; (8002ce0 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			fcb_joint3.Sum_Error_p = 0;
 8002c6a:	4b20      	ldr	r3, [pc, #128]	; (8002cec <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8002c6c:	f04f 0200 	mov.w	r2, #0
 8002c70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			fcb_joint1.Sum_Error_v = 0;
 8002c74:	4b1a      	ldr	r3, [pc, #104]	; (8002ce0 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			fcb_joint3.Sum_Error_v = 0;
 8002c7e:	4b1b      	ldr	r3, [pc, #108]	; (8002cec <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			fcb_joint1.Old_Error_p = 0;
 8002c88:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	67da      	str	r2, [r3, #124]	; 0x7c
			fcb_joint3.Old_Error_p = 0;
 8002c90:	4b16      	ldr	r3, [pc, #88]	; (8002cec <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	67da      	str	r2, [r3, #124]	; 0x7c
			fcb_joint1.Old_Error_v = 0;
 8002c98:	4b11      	ldr	r3, [pc, #68]	; (8002ce0 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			fcb_joint3.Old_Error_v = 0;
 8002ca2:	4b12      	ldr	r3, [pc, #72]	; (8002cec <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8002ca4:	f04f 0200 	mov.w	r2, #0
 8002ca8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			fcb_joint1.Old_p = 0;
 8002cac:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			fcb_joint3.Old_p = 0;
 8002cb6:	4b0d      	ldr	r3, [pc, #52]	; (8002cec <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			fcb_joint1.Old_v = 0;
 8002cc0:	4b07      	ldr	r3, [pc, #28]	; (8002ce0 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			fcb_joint3.Old_v = 0;
 8002cca:	4b08      	ldr	r3, [pc, #32]	; (8002cec <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			Update_State_Machine();
 8002cd4:	f7ff f886 	bl	8001de4 <_Z20Update_State_Machinev>

				}


	}
}
 8002cd8:	bf00      	nop
 8002cda:	3720      	adds	r7, #32
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	2400040c 	.word	0x2400040c
 8002ce4:	00000000 	.word	0x00000000
 8002ce8:	44444000 	.word	0x44444000
 8002cec:	240005d4 	.word	0x240005d4
 8002cf0:	c5160000 	.word	0xc5160000
 8002cf4:	24000a04 	.word	0x24000a04
 8002cf8:	24000a0c 	.word	0x24000a0c

08002cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d00:	f001 fe8c 	bl	8004a1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d04:	f000 f8c8 	bl	8002e98 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d08:	f7fe feae 	bl	8001a68 <MX_GPIO_Init>
  MX_DMA_Init();
 8002d0c:	f7fe fe6c 	bl	80019e8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8002d10:	f001 fbd8 	bl	80044c4 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8002d14:	f000 fd96 	bl	8003844 <MX_TIM2_Init>
  MX_UART4_Init();
 8002d18:	f001 fb32 	bl	8004380 <MX_UART4_Init>
  MX_TIM4_Init();
 8002d1c:	f000 fe82 	bl	8003a24 <MX_TIM4_Init>
  MX_SPI3_Init();
 8002d20:	f000 f9da 	bl	80030d8 <MX_SPI3_Init>
  MX_TIM1_Init();
 8002d24:	f000 fce0 	bl	80036e8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002d28:	f000 fe04 	bl	8003934 <MX_TIM3_Init>
  MX_TIM5_Init();
 8002d2c:	f000 fef2 	bl	8003b14 <MX_TIM5_Init>
  MX_TIM15_Init();
 8002d30:	f001 f82c 	bl	8003d8c <MX_TIM15_Init>
  MX_CRC_Init();
 8002d34:	f7fe fe08 	bl	8001948 <MX_CRC_Init>
  MX_UART7_Init();
 8002d38:	f001 fb76 	bl	8004428 <MX_UART7_Init>
  MX_TIM6_Init();
 8002d3c:	f000 ff38 	bl	8003bb0 <MX_TIM6_Init>
  MX_TIM7_Init();
 8002d40:	f000 ff6c 	bl	8003c1c <MX_TIM7_Init>
  MX_TIM12_Init();
 8002d44:	f000 ffa0 	bl	8003c88 <MX_TIM12_Init>
  MX_TIM13_Init();
 8002d48:	f000 ffd8 	bl	8003cfc <MX_TIM13_Init>
  MX_TIM14_Init();
 8002d4c:	f000 fffa 	bl	8003d44 <MX_TIM14_Init>
  MX_TIM16_Init();
 8002d50:	f001 f8c0 	bl	8003ed4 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8002d54:	2201      	movs	r2, #1
 8002d56:	2101      	movs	r1, #1
 8002d58:	483a      	ldr	r0, [pc, #232]	; (8002e44 <main+0x148>)
 8002d5a:	f005 fa01 	bl	8008160 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002d5e:	2201      	movs	r2, #1
 8002d60:	2102      	movs	r1, #2
 8002d62:	4839      	ldr	r0, [pc, #228]	; (8002e48 <main+0x14c>)
 8002d64:	f005 f9fc 	bl	8008160 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d6e:	4835      	ldr	r0, [pc, #212]	; (8002e44 <main+0x148>)
 8002d70:	f005 f9f6 	bl	8008160 <HAL_GPIO_WritePin>
//		HAL_TIM_Base_Start_IT(&htim7); // Control 	1000 Hz
//		HAL_TIM_Base_Start_IT(&htim12); // 			2000 Hz
//		HAL_TIM_Base_Start_IT(&htim14); // 			500Hz
//		HAL_TIM_Base_Start_IT(&htim16); // 			1000Hz

	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer, Rx_BUFFER_SIZE);
 8002d74:	2214      	movs	r2, #20
 8002d76:	4935      	ldr	r1, [pc, #212]	; (8002e4c <main+0x150>)
 8002d78:	4835      	ldr	r0, [pc, #212]	; (8002e50 <main+0x154>)
 8002d7a:	f00b f828 	bl	800ddce <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8002d7e:	4b35      	ldr	r3, [pc, #212]	; (8002e54 <main+0x158>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a35      	ldr	r2, [pc, #212]	; (8002e58 <main+0x15c>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d04a      	beq.n	8002e1e <main+0x122>
 8002d88:	4b32      	ldr	r3, [pc, #200]	; (8002e54 <main+0x158>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a33      	ldr	r2, [pc, #204]	; (8002e5c <main+0x160>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d045      	beq.n	8002e1e <main+0x122>
 8002d92:	4b30      	ldr	r3, [pc, #192]	; (8002e54 <main+0x158>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a32      	ldr	r2, [pc, #200]	; (8002e60 <main+0x164>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d040      	beq.n	8002e1e <main+0x122>
 8002d9c:	4b2d      	ldr	r3, [pc, #180]	; (8002e54 <main+0x158>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a30      	ldr	r2, [pc, #192]	; (8002e64 <main+0x168>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d03b      	beq.n	8002e1e <main+0x122>
 8002da6:	4b2b      	ldr	r3, [pc, #172]	; (8002e54 <main+0x158>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a2f      	ldr	r2, [pc, #188]	; (8002e68 <main+0x16c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d036      	beq.n	8002e1e <main+0x122>
 8002db0:	4b28      	ldr	r3, [pc, #160]	; (8002e54 <main+0x158>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a2d      	ldr	r2, [pc, #180]	; (8002e6c <main+0x170>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d031      	beq.n	8002e1e <main+0x122>
 8002dba:	4b26      	ldr	r3, [pc, #152]	; (8002e54 <main+0x158>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a2c      	ldr	r2, [pc, #176]	; (8002e70 <main+0x174>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d02c      	beq.n	8002e1e <main+0x122>
 8002dc4:	4b23      	ldr	r3, [pc, #140]	; (8002e54 <main+0x158>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a2a      	ldr	r2, [pc, #168]	; (8002e74 <main+0x178>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d027      	beq.n	8002e1e <main+0x122>
 8002dce:	4b21      	ldr	r3, [pc, #132]	; (8002e54 <main+0x158>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a29      	ldr	r2, [pc, #164]	; (8002e78 <main+0x17c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d022      	beq.n	8002e1e <main+0x122>
 8002dd8:	4b1e      	ldr	r3, [pc, #120]	; (8002e54 <main+0x158>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a27      	ldr	r2, [pc, #156]	; (8002e7c <main+0x180>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d01d      	beq.n	8002e1e <main+0x122>
 8002de2:	4b1c      	ldr	r3, [pc, #112]	; (8002e54 <main+0x158>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a26      	ldr	r2, [pc, #152]	; (8002e80 <main+0x184>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d018      	beq.n	8002e1e <main+0x122>
 8002dec:	4b19      	ldr	r3, [pc, #100]	; (8002e54 <main+0x158>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a24      	ldr	r2, [pc, #144]	; (8002e84 <main+0x188>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d013      	beq.n	8002e1e <main+0x122>
 8002df6:	4b17      	ldr	r3, [pc, #92]	; (8002e54 <main+0x158>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a23      	ldr	r2, [pc, #140]	; (8002e88 <main+0x18c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d00e      	beq.n	8002e1e <main+0x122>
 8002e00:	4b14      	ldr	r3, [pc, #80]	; (8002e54 <main+0x158>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a21      	ldr	r2, [pc, #132]	; (8002e8c <main+0x190>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d009      	beq.n	8002e1e <main+0x122>
 8002e0a:	4b12      	ldr	r3, [pc, #72]	; (8002e54 <main+0x158>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a20      	ldr	r2, [pc, #128]	; (8002e90 <main+0x194>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d004      	beq.n	8002e1e <main+0x122>
 8002e14:	4b0f      	ldr	r3, [pc, #60]	; (8002e54 <main+0x158>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a1e      	ldr	r2, [pc, #120]	; (8002e94 <main+0x198>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d108      	bne.n	8002e30 <main+0x134>
 8002e1e:	4b0d      	ldr	r3, [pc, #52]	; (8002e54 <main+0x158>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <main+0x158>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0208 	bic.w	r2, r2, #8
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	e007      	b.n	8002e40 <main+0x144>
 8002e30:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <main+0x158>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	4b07      	ldr	r3, [pc, #28]	; (8002e54 <main+0x158>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0204 	bic.w	r2, r2, #4
 8002e3e:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8002e40:	e7fe      	b.n	8002e40 <main+0x144>
 8002e42:	bf00      	nop
 8002e44:	58020400 	.word	0x58020400
 8002e48:	58021000 	.word	0x58021000
 8002e4c:	240009b8 	.word	0x240009b8
 8002e50:	240011cc 	.word	0x240011cc
 8002e54:	24001154 	.word	0x24001154
 8002e58:	40020010 	.word	0x40020010
 8002e5c:	40020028 	.word	0x40020028
 8002e60:	40020040 	.word	0x40020040
 8002e64:	40020058 	.word	0x40020058
 8002e68:	40020070 	.word	0x40020070
 8002e6c:	40020088 	.word	0x40020088
 8002e70:	400200a0 	.word	0x400200a0
 8002e74:	400200b8 	.word	0x400200b8
 8002e78:	40020410 	.word	0x40020410
 8002e7c:	40020428 	.word	0x40020428
 8002e80:	40020440 	.word	0x40020440
 8002e84:	40020458 	.word	0x40020458
 8002e88:	40020470 	.word	0x40020470
 8002e8c:	40020488 	.word	0x40020488
 8002e90:	400204a0 	.word	0x400204a0
 8002e94:	400204b8 	.word	0x400204b8

08002e98 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b09c      	sub	sp, #112	; 0x70
 8002e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ea2:	224c      	movs	r2, #76	; 0x4c
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f00c f9f6 	bl	800f298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002eac:	1d3b      	adds	r3, r7, #4
 8002eae:	2220      	movs	r2, #32
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f00c f9f0 	bl	800f298 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002eb8:	2002      	movs	r0, #2
 8002eba:	f005 f985 	bl	80081c8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	603b      	str	r3, [r7, #0]
 8002ec2:	4b38      	ldr	r3, [pc, #224]	; (8002fa4 <_Z18SystemClock_Configv+0x10c>)
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	4a37      	ldr	r2, [pc, #220]	; (8002fa4 <_Z18SystemClock_Configv+0x10c>)
 8002ec8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ecc:	6193      	str	r3, [r2, #24]
 8002ece:	4b35      	ldr	r3, [pc, #212]	; (8002fa4 <_Z18SystemClock_Configv+0x10c>)
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ed6:	603b      	str	r3, [r7, #0]
 8002ed8:	4b33      	ldr	r3, [pc, #204]	; (8002fa8 <_Z18SystemClock_Configv+0x110>)
 8002eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002edc:	4a32      	ldr	r2, [pc, #200]	; (8002fa8 <_Z18SystemClock_Configv+0x110>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002ee4:	4b30      	ldr	r3, [pc, #192]	; (8002fa8 <_Z18SystemClock_Configv+0x110>)
 8002ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	603b      	str	r3, [r7, #0]
 8002eee:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002ef0:	4b2c      	ldr	r3, [pc, #176]	; (8002fa4 <_Z18SystemClock_Configv+0x10c>)
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002efc:	bf14      	ite	ne
 8002efe:	2301      	movne	r3, #1
 8002f00:	2300      	moveq	r3, #0
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d000      	beq.n	8002f0a <_Z18SystemClock_Configv+0x72>
 8002f08:	e7f2      	b.n	8002ef0 <_Z18SystemClock_Configv+0x58>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f12:	2340      	movs	r3, #64	; 0x40
 8002f14:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f16:	2302      	movs	r3, #2
 8002f18:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002f1e:	2304      	movs	r3, #4
 8002f20:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8002f22:	233c      	movs	r3, #60	; 0x3c
 8002f24:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002f26:	2302      	movs	r3, #2
 8002f28:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8002f2a:	2306      	movs	r3, #6
 8002f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002f32:	230c      	movs	r3, #12
 8002f34:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002f36:	2300      	movs	r3, #0
 8002f38:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f42:	4618      	mov	r0, r3
 8002f44:	f005 f97a 	bl	800823c <HAL_RCC_OscConfig>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	bf14      	ite	ne
 8002f4e:	2301      	movne	r3, #1
 8002f50:	2300      	moveq	r3, #0
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8002f58:	f000 f83e 	bl	8002fd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f5c:	233f      	movs	r3, #63	; 0x3f
 8002f5e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f60:	2303      	movs	r3, #3
 8002f62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002f64:	2300      	movs	r3, #0
 8002f66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002f68:	2308      	movs	r3, #8
 8002f6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002f6c:	2340      	movs	r3, #64	; 0x40
 8002f6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002f70:	2340      	movs	r3, #64	; 0x40
 8002f72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002f74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f78:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002f7a:	2340      	movs	r3, #64	; 0x40
 8002f7c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002f7e:	1d3b      	adds	r3, r7, #4
 8002f80:	2104      	movs	r1, #4
 8002f82:	4618      	mov	r0, r3
 8002f84:	f005 fd86 	bl	8008a94 <HAL_RCC_ClockConfig>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	bf14      	ite	ne
 8002f8e:	2301      	movne	r3, #1
 8002f90:	2300      	moveq	r3, #0
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8002f98:	f000 f81e 	bl	8002fd8 <Error_Handler>
  }
}
 8002f9c:	bf00      	nop
 8002f9e:	3770      	adds	r7, #112	; 0x70
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	58024800 	.word	0x58024800
 8002fa8:	58000400 	.word	0x58000400

08002fac <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]

}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	80fb      	strh	r3, [r7, #6]

}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
	...

08002fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2101      	movs	r1, #1
 8002fe0:	4808      	ldr	r0, [pc, #32]	; (8003004 <Error_Handler+0x2c>)
 8002fe2:	f005 f8bd 	bl	8008160 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2102      	movs	r1, #2
 8002fea:	4807      	ldr	r0, [pc, #28]	; (8003008 <Error_Handler+0x30>)
 8002fec:	f005 f8b8 	bl	8008160 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ff6:	4803      	ldr	r0, [pc, #12]	; (8003004 <Error_Handler+0x2c>)
 8002ff8:	f005 f8b2 	bl	8008160 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ffc:	b672      	cpsid	i
}
 8002ffe:	bf00      	nop
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 8003000:	e7fe      	b.n	8003000 <Error_Handler+0x28>
 8003002:	bf00      	nop
 8003004:	58020400 	.word	0x58020400
 8003008:	58021000 	.word	0x58021000

0800300c <_Z41__static_initialization_and_destruction_0ii>:
}
  /* USER CODE END Error_Handler_Debug */
}
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d11b      	bne.n	8003054 <_Z41__static_initialization_and_destruction_0ii+0x48>
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003022:	4293      	cmp	r3, r2
 8003024:	d116      	bne.n	8003054 <_Z41__static_initialization_and_destruction_0ii+0x48>
RobotJoint fcb_joint1;
 8003026:	481c      	ldr	r0, [pc, #112]	; (8003098 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003028:	f7fd fb2e 	bl	8000688 <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint2;
 800302c:	481b      	ldr	r0, [pc, #108]	; (800309c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800302e:	f7fd fb2b 	bl	8000688 <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint3;
 8003032:	481b      	ldr	r0, [pc, #108]	; (80030a0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8003034:	f7fd fb28 	bl	8000688 <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint4;
 8003038:	481a      	ldr	r0, [pc, #104]	; (80030a4 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800303a:	f7fd fb25 	bl	8000688 <_ZN10RobotJointC1Ev>
RobotJoint fcb_Y;
 800303e:	481a      	ldr	r0, [pc, #104]	; (80030a8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8003040:	f7fd fb22 	bl	8000688 <_ZN10RobotJointC1Ev>
RobotJoint fcb_X;
 8003044:	4819      	ldr	r0, [pc, #100]	; (80030ac <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8003046:	f7fd fb1f 	bl	8000688 <_ZN10RobotJointC1Ev>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 800304a:	2208      	movs	r2, #8
 800304c:	4918      	ldr	r1, [pc, #96]	; (80030b0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800304e:	4819      	ldr	r0, [pc, #100]	; (80030b4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8003050:	f7fe fa32 	bl	80014b8 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d119      	bne.n	800308e <_Z41__static_initialization_and_destruction_0ii+0x82>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003060:	4293      	cmp	r3, r2
 8003062:	d114      	bne.n	800308e <_Z41__static_initialization_and_destruction_0ii+0x82>
 8003064:	4813      	ldr	r0, [pc, #76]	; (80030b4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8003066:	f7fe fa57 	bl	8001518 <_ZN10ServoMotorD1Ev>
RobotJoint fcb_X;
 800306a:	4810      	ldr	r0, [pc, #64]	; (80030ac <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800306c:	f7fd fb7c 	bl	8000768 <_ZN10RobotJointD1Ev>
RobotJoint fcb_Y;
 8003070:	480d      	ldr	r0, [pc, #52]	; (80030a8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8003072:	f7fd fb79 	bl	8000768 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint4;
 8003076:	480b      	ldr	r0, [pc, #44]	; (80030a4 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8003078:	f7fd fb76 	bl	8000768 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint3;
 800307c:	4808      	ldr	r0, [pc, #32]	; (80030a0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800307e:	f7fd fb73 	bl	8000768 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint2;
 8003082:	4806      	ldr	r0, [pc, #24]	; (800309c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8003084:	f7fd fb70 	bl	8000768 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint1;
 8003088:	4803      	ldr	r0, [pc, #12]	; (8003098 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800308a:	f7fd fb6d 	bl	8000768 <_ZN10RobotJointD1Ev>
}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	2400040c 	.word	0x2400040c
 800309c:	240004f0 	.word	0x240004f0
 80030a0:	240005d4 	.word	0x240005d4
 80030a4:	240006b8 	.word	0x240006b8
 80030a8:	2400079c 	.word	0x2400079c
 80030ac:	24000880 	.word	0x24000880
 80030b0:	24000cbc 	.word	0x24000cbc
 80030b4:	24000964 	.word	0x24000964

080030b8 <_GLOBAL__sub_I_TIM_MS>:
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030c0:	2001      	movs	r0, #1
 80030c2:	f7ff ffa3 	bl	800300c <_Z41__static_initialization_and_destruction_0ii>
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <_GLOBAL__sub_D_TIM_MS>:
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030d0:	2000      	movs	r0, #0
 80030d2:	f7ff ff9b 	bl	800300c <_Z41__static_initialization_and_destruction_0ii>
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80030dc:	4b27      	ldr	r3, [pc, #156]	; (800317c <MX_SPI3_Init+0xa4>)
 80030de:	4a28      	ldr	r2, [pc, #160]	; (8003180 <MX_SPI3_Init+0xa8>)
 80030e0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80030e2:	4b26      	ldr	r3, [pc, #152]	; (800317c <MX_SPI3_Init+0xa4>)
 80030e4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80030e8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80030ea:	4b24      	ldr	r3, [pc, #144]	; (800317c <MX_SPI3_Init+0xa4>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80030f0:	4b22      	ldr	r3, [pc, #136]	; (800317c <MX_SPI3_Init+0xa4>)
 80030f2:	2203      	movs	r2, #3
 80030f4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80030f6:	4b21      	ldr	r3, [pc, #132]	; (800317c <MX_SPI3_Init+0xa4>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030fc:	4b1f      	ldr	r3, [pc, #124]	; (800317c <MX_SPI3_Init+0xa4>)
 80030fe:	2200      	movs	r2, #0
 8003100:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003102:	4b1e      	ldr	r3, [pc, #120]	; (800317c <MX_SPI3_Init+0xa4>)
 8003104:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003108:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800310a:	4b1c      	ldr	r3, [pc, #112]	; (800317c <MX_SPI3_Init+0xa4>)
 800310c:	2200      	movs	r2, #0
 800310e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003110:	4b1a      	ldr	r3, [pc, #104]	; (800317c <MX_SPI3_Init+0xa4>)
 8003112:	2200      	movs	r2, #0
 8003114:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003116:	4b19      	ldr	r3, [pc, #100]	; (800317c <MX_SPI3_Init+0xa4>)
 8003118:	2200      	movs	r2, #0
 800311a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800311c:	4b17      	ldr	r3, [pc, #92]	; (800317c <MX_SPI3_Init+0xa4>)
 800311e:	2200      	movs	r2, #0
 8003120:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8003122:	4b16      	ldr	r3, [pc, #88]	; (800317c <MX_SPI3_Init+0xa4>)
 8003124:	2200      	movs	r2, #0
 8003126:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003128:	4b14      	ldr	r3, [pc, #80]	; (800317c <MX_SPI3_Init+0xa4>)
 800312a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800312e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003130:	4b12      	ldr	r3, [pc, #72]	; (800317c <MX_SPI3_Init+0xa4>)
 8003132:	2200      	movs	r2, #0
 8003134:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003136:	4b11      	ldr	r3, [pc, #68]	; (800317c <MX_SPI3_Init+0xa4>)
 8003138:	2200      	movs	r2, #0
 800313a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800313c:	4b0f      	ldr	r3, [pc, #60]	; (800317c <MX_SPI3_Init+0xa4>)
 800313e:	2200      	movs	r2, #0
 8003140:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003142:	4b0e      	ldr	r3, [pc, #56]	; (800317c <MX_SPI3_Init+0xa4>)
 8003144:	2200      	movs	r2, #0
 8003146:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003148:	4b0c      	ldr	r3, [pc, #48]	; (800317c <MX_SPI3_Init+0xa4>)
 800314a:	2200      	movs	r2, #0
 800314c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800314e:	4b0b      	ldr	r3, [pc, #44]	; (800317c <MX_SPI3_Init+0xa4>)
 8003150:	2200      	movs	r2, #0
 8003152:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003154:	4b09      	ldr	r3, [pc, #36]	; (800317c <MX_SPI3_Init+0xa4>)
 8003156:	2200      	movs	r2, #0
 8003158:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800315a:	4b08      	ldr	r3, [pc, #32]	; (800317c <MX_SPI3_Init+0xa4>)
 800315c:	2200      	movs	r2, #0
 800315e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003160:	4b06      	ldr	r3, [pc, #24]	; (800317c <MX_SPI3_Init+0xa4>)
 8003162:	2200      	movs	r2, #0
 8003164:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003166:	4805      	ldr	r0, [pc, #20]	; (800317c <MX_SPI3_Init+0xa4>)
 8003168:	f007 fb82 	bl	800a870 <HAL_SPI_Init>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8003172:	f7ff ff31 	bl	8002fd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003176:	bf00      	nop
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	24000c34 	.word	0x24000c34
 8003180:	40003c00 	.word	0x40003c00

08003184 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b0b8      	sub	sp, #224	; 0xe0
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800318c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	605a      	str	r2, [r3, #4]
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	60da      	str	r2, [r3, #12]
 800319a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800319c:	f107 0310 	add.w	r3, r7, #16
 80031a0:	22bc      	movs	r2, #188	; 0xbc
 80031a2:	2100      	movs	r1, #0
 80031a4:	4618      	mov	r0, r3
 80031a6:	f00c f877 	bl	800f298 <memset>
  if(spiHandle->Instance==SPI3)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a25      	ldr	r2, [pc, #148]	; (8003244 <HAL_SPI_MspInit+0xc0>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d142      	bne.n	800323a <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80031b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031b8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80031ba:	2300      	movs	r3, #0
 80031bc:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031be:	f107 0310 	add.w	r3, r7, #16
 80031c2:	4618      	mov	r0, r3
 80031c4:	f005 fff2 	bl	80091ac <HAL_RCCEx_PeriphCLKConfig>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80031ce:	f7ff ff03 	bl	8002fd8 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80031d2:	4b1d      	ldr	r3, [pc, #116]	; (8003248 <HAL_SPI_MspInit+0xc4>)
 80031d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031d8:	4a1b      	ldr	r2, [pc, #108]	; (8003248 <HAL_SPI_MspInit+0xc4>)
 80031da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80031e2:	4b19      	ldr	r3, [pc, #100]	; (8003248 <HAL_SPI_MspInit+0xc4>)
 80031e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031f0:	4b15      	ldr	r3, [pc, #84]	; (8003248 <HAL_SPI_MspInit+0xc4>)
 80031f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031f6:	4a14      	ldr	r2, [pc, #80]	; (8003248 <HAL_SPI_MspInit+0xc4>)
 80031f8:	f043 0304 	orr.w	r3, r3, #4
 80031fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003200:	4b11      	ldr	r3, [pc, #68]	; (8003248 <HAL_SPI_MspInit+0xc4>)
 8003202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003206:	f003 0304 	and.w	r3, r3, #4
 800320a:	60bb      	str	r3, [r7, #8]
 800320c:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800320e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003212:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003216:	2302      	movs	r3, #2
 8003218:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321c:	2300      	movs	r3, #0
 800321e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003222:	2300      	movs	r3, #0
 8003224:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003228:	2306      	movs	r3, #6
 800322a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800322e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003232:	4619      	mov	r1, r3
 8003234:	4805      	ldr	r0, [pc, #20]	; (800324c <HAL_SPI_MspInit+0xc8>)
 8003236:	f004 fde3 	bl	8007e00 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800323a:	bf00      	nop
 800323c:	37e0      	adds	r7, #224	; 0xe0
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40003c00 	.word	0x40003c00
 8003248:	58024400 	.word	0x58024400
 800324c:	58020800 	.word	0x58020800

08003250 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003256:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <HAL_MspInit+0x30>)
 8003258:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800325c:	4a08      	ldr	r2, [pc, #32]	; (8003280 <HAL_MspInit+0x30>)
 800325e:	f043 0302 	orr.w	r3, r3, #2
 8003262:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003266:	4b06      	ldr	r3, [pc, #24]	; (8003280 <HAL_MspInit+0x30>)
 8003268:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	607b      	str	r3, [r7, #4]
 8003272:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	58024400 	.word	0x58024400

08003284 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003288:	e7fe      	b.n	8003288 <NMI_Handler+0x4>

0800328a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800328a:	b480      	push	{r7}
 800328c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800328e:	e7fe      	b.n	800328e <HardFault_Handler+0x4>

08003290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003294:	e7fe      	b.n	8003294 <MemManage_Handler+0x4>

08003296 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003296:	b480      	push	{r7}
 8003298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800329a:	e7fe      	b.n	800329a <BusFault_Handler+0x4>

0800329c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032a0:	e7fe      	b.n	80032a0 <UsageFault_Handler+0x4>

080032a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032a2:	b480      	push	{r7}
 80032a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032a6:	bf00      	nop
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032b4:	bf00      	nop
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032be:	b480      	push	{r7}
 80032c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032c2:	bf00      	nop
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032d0:	f001 fc16 	bl	8004b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80032d4:	f001 fd4f 	bl	8004d76 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80032d8:	bf00      	nop
 80032da:	bd80      	pop	{r7, pc}

080032dc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 80032e0:	4802      	ldr	r0, [pc, #8]	; (80032ec <DMA1_Stream0_IRQHandler+0x10>)
 80032e2:	f003 fa7b 	bl	80067dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80032e6:	bf00      	nop
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	240012d4 	.word	0x240012d4

080032f0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80032f4:	4802      	ldr	r0, [pc, #8]	; (8003300 <DMA1_Stream1_IRQHandler+0x10>)
 80032f6:	f003 fa71 	bl	80067dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80032fa:	bf00      	nop
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	24001154 	.word	0x24001154

08003304 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003308:	4802      	ldr	r0, [pc, #8]	; (8003314 <DMA1_Stream2_IRQHandler+0x10>)
 800330a:	f003 fa67 	bl	80067dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800330e:	bf00      	nop
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	2400125c 	.word	0x2400125c

08003318 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800331c:	4802      	ldr	r0, [pc, #8]	; (8003328 <DMA1_Stream3_IRQHandler+0x10>)
 800331e:	f003 fa5d 	bl	80067dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003322:	bf00      	nop
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	2400104c 	.word	0x2400104c

0800332c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8003330:	4802      	ldr	r0, [pc, #8]	; (800333c <DMA1_Stream4_IRQHandler+0x10>)
 8003332:	f003 fa53 	bl	80067dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003336:	bf00      	nop
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	240013dc 	.word	0x240013dc

08003340 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 8003344:	2040      	movs	r0, #64	; 0x40
 8003346:	f004 ff24 	bl	8008192 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM3_Pin);
 800334a:	2080      	movs	r0, #128	; 0x80
 800334c:	f004 ff21 	bl	8008192 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003350:	bf00      	nop
 8003352:	bd80      	pop	{r7, pc}

08003354 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003358:	4802      	ldr	r0, [pc, #8]	; (8003364 <USART3_IRQHandler+0x10>)
 800335a:	f008 fe77 	bl	800c04c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800335e:	bf00      	nop
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	240011cc 	.word	0x240011cc

08003368 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 800336c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003370:	f004 ff0f 	bl	8008192 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 8003374:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003378:	f004 ff0b 	bl	8008192 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin_Pin);
 800337c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003380:	f004 ff07 	bl	8008192 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 8003384:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003388:	f004 ff03 	bl	8008192 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800338c:	bf00      	nop
 800338e:	bd80      	pop	{r7, pc}

08003390 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8003394:	4802      	ldr	r0, [pc, #8]	; (80033a0 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8003396:	f007 fceb 	bl	800ad70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800339a:	bf00      	nop
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	24000f68 	.word	0x24000f68

080033a4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80033a8:	4802      	ldr	r0, [pc, #8]	; (80033b4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80033aa:	f007 fce1 	bl	800ad70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80033ae:	bf00      	nop
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	24000dec 	.word	0x24000dec

080033b8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80033bc:	4802      	ldr	r0, [pc, #8]	; (80033c8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80033be:	f007 fcd7 	bl	800ad70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80033c2:	bf00      	nop
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	24000f1c 	.word	0x24000f1c

080033cc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80033d0:	4802      	ldr	r0, [pc, #8]	; (80033dc <TIM5_IRQHandler+0x10>)
 80033d2:	f007 fccd 	bl	800ad70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80033d6:	bf00      	nop
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	24000d54 	.word	0x24000d54

080033e0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80033e4:	4802      	ldr	r0, [pc, #8]	; (80033f0 <UART4_IRQHandler+0x10>)
 80033e6:	f008 fe31 	bl	800c04c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80033ea:	bf00      	nop
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	2400134c 	.word	0x2400134c

080033f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80033f8:	4802      	ldr	r0, [pc, #8]	; (8003404 <TIM6_DAC_IRQHandler+0x10>)
 80033fa:	f007 fcb9 	bl	800ad70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80033fe:	bf00      	nop
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	24000e38 	.word	0x24000e38

08003408 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800340c:	4802      	ldr	r0, [pc, #8]	; (8003418 <TIM7_IRQHandler+0x10>)
 800340e:	f007 fcaf 	bl	800ad70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003412:	bf00      	nop
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	24001000 	.word	0x24001000

0800341c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8003420:	4802      	ldr	r0, [pc, #8]	; (800342c <UART7_IRQHandler+0x10>)
 8003422:	f008 fe13 	bl	800c04c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8003426:	bf00      	nop
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	240010c4 	.word	0x240010c4

08003430 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003434:	4802      	ldr	r0, [pc, #8]	; (8003440 <TIM16_IRQHandler+0x10>)
 8003436:	f007 fc9b 	bl	800ad70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800343a:	bf00      	nop
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	24000fb4 	.word	0x24000fb4

08003444 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
	return 1;
 8003448:	2301      	movs	r3, #1
}
 800344a:	4618      	mov	r0, r3
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <_kill>:

int _kill(int pid, int sig)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800345e:	f00b fef1 	bl	800f244 <__errno>
 8003462:	4603      	mov	r3, r0
 8003464:	2216      	movs	r2, #22
 8003466:	601a      	str	r2, [r3, #0]
	return -1;
 8003468:	f04f 33ff 	mov.w	r3, #4294967295
}
 800346c:	4618      	mov	r0, r3
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <_exit>:

void _exit (int status)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800347c:	f04f 31ff 	mov.w	r1, #4294967295
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7ff ffe7 	bl	8003454 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003486:	e7fe      	b.n	8003486 <_exit+0x12>

08003488 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003494:	2300      	movs	r3, #0
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	e00a      	b.n	80034b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800349a:	f3af 8000 	nop.w
 800349e:	4601      	mov	r1, r0
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	60ba      	str	r2, [r7, #8]
 80034a6:	b2ca      	uxtb	r2, r1
 80034a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	3301      	adds	r3, #1
 80034ae:	617b      	str	r3, [r7, #20]
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	dbf0      	blt.n	800349a <_read+0x12>
	}

return len;
 80034b8:	687b      	ldr	r3, [r7, #4]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3718      	adds	r7, #24
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b086      	sub	sp, #24
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	60f8      	str	r0, [r7, #12]
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ce:	2300      	movs	r3, #0
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	e009      	b.n	80034e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	60ba      	str	r2, [r7, #8]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	3301      	adds	r3, #1
 80034e6:	617b      	str	r3, [r7, #20]
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	dbf1      	blt.n	80034d4 <_write+0x12>
	}
	return len;
 80034f0:	687b      	ldr	r3, [r7, #4]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <_close>:

int _close(int file)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
	return -1;
 8003502:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003506:	4618      	mov	r0, r3
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003512:	b480      	push	{r7}
 8003514:	b083      	sub	sp, #12
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
 800351a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003522:	605a      	str	r2, [r3, #4]
	return 0;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <_isatty>:

int _isatty(int file)
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
	return 1;
 800353a:	2301      	movs	r3, #1
}
 800353c:	4618      	mov	r0, r3
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
	return 0;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
	...

08003564 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800356c:	4a14      	ldr	r2, [pc, #80]	; (80035c0 <_sbrk+0x5c>)
 800356e:	4b15      	ldr	r3, [pc, #84]	; (80035c4 <_sbrk+0x60>)
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003578:	4b13      	ldr	r3, [pc, #76]	; (80035c8 <_sbrk+0x64>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d102      	bne.n	8003586 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003580:	4b11      	ldr	r3, [pc, #68]	; (80035c8 <_sbrk+0x64>)
 8003582:	4a12      	ldr	r2, [pc, #72]	; (80035cc <_sbrk+0x68>)
 8003584:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003586:	4b10      	ldr	r3, [pc, #64]	; (80035c8 <_sbrk+0x64>)
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4413      	add	r3, r2
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	429a      	cmp	r2, r3
 8003592:	d207      	bcs.n	80035a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003594:	f00b fe56 	bl	800f244 <__errno>
 8003598:	4603      	mov	r3, r0
 800359a:	220c      	movs	r2, #12
 800359c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800359e:	f04f 33ff 	mov.w	r3, #4294967295
 80035a2:	e009      	b.n	80035b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035a4:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <_sbrk+0x64>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035aa:	4b07      	ldr	r3, [pc, #28]	; (80035c8 <_sbrk+0x64>)
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4413      	add	r3, r2
 80035b2:	4a05      	ldr	r2, [pc, #20]	; (80035c8 <_sbrk+0x64>)
 80035b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035b6:	68fb      	ldr	r3, [r7, #12]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	24001a68 	.word	0x24001a68
 80035c4:	00000400 	.word	0x00000400
 80035c8:	24000c04 	.word	0x24000c04
 80035cc:	24001468 	.word	0x24001468

080035d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80035d4:	4b39      	ldr	r3, [pc, #228]	; (80036bc <SystemInit+0xec>)
 80035d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035da:	4a38      	ldr	r2, [pc, #224]	; (80036bc <SystemInit+0xec>)
 80035dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80035e4:	4b36      	ldr	r3, [pc, #216]	; (80036c0 <SystemInit+0xf0>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 030f 	and.w	r3, r3, #15
 80035ec:	2b06      	cmp	r3, #6
 80035ee:	d807      	bhi.n	8003600 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80035f0:	4b33      	ldr	r3, [pc, #204]	; (80036c0 <SystemInit+0xf0>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f023 030f 	bic.w	r3, r3, #15
 80035f8:	4a31      	ldr	r2, [pc, #196]	; (80036c0 <SystemInit+0xf0>)
 80035fa:	f043 0307 	orr.w	r3, r3, #7
 80035fe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003600:	4b30      	ldr	r3, [pc, #192]	; (80036c4 <SystemInit+0xf4>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a2f      	ldr	r2, [pc, #188]	; (80036c4 <SystemInit+0xf4>)
 8003606:	f043 0301 	orr.w	r3, r3, #1
 800360a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800360c:	4b2d      	ldr	r3, [pc, #180]	; (80036c4 <SystemInit+0xf4>)
 800360e:	2200      	movs	r2, #0
 8003610:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003612:	4b2c      	ldr	r3, [pc, #176]	; (80036c4 <SystemInit+0xf4>)
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	492b      	ldr	r1, [pc, #172]	; (80036c4 <SystemInit+0xf4>)
 8003618:	4b2b      	ldr	r3, [pc, #172]	; (80036c8 <SystemInit+0xf8>)
 800361a:	4013      	ands	r3, r2
 800361c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800361e:	4b28      	ldr	r3, [pc, #160]	; (80036c0 <SystemInit+0xf0>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	2b00      	cmp	r3, #0
 8003628:	d007      	beq.n	800363a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800362a:	4b25      	ldr	r3, [pc, #148]	; (80036c0 <SystemInit+0xf0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f023 030f 	bic.w	r3, r3, #15
 8003632:	4a23      	ldr	r2, [pc, #140]	; (80036c0 <SystemInit+0xf0>)
 8003634:	f043 0307 	orr.w	r3, r3, #7
 8003638:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800363a:	4b22      	ldr	r3, [pc, #136]	; (80036c4 <SystemInit+0xf4>)
 800363c:	2200      	movs	r2, #0
 800363e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003640:	4b20      	ldr	r3, [pc, #128]	; (80036c4 <SystemInit+0xf4>)
 8003642:	2200      	movs	r2, #0
 8003644:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003646:	4b1f      	ldr	r3, [pc, #124]	; (80036c4 <SystemInit+0xf4>)
 8003648:	2200      	movs	r2, #0
 800364a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800364c:	4b1d      	ldr	r3, [pc, #116]	; (80036c4 <SystemInit+0xf4>)
 800364e:	4a1f      	ldr	r2, [pc, #124]	; (80036cc <SystemInit+0xfc>)
 8003650:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003652:	4b1c      	ldr	r3, [pc, #112]	; (80036c4 <SystemInit+0xf4>)
 8003654:	4a1e      	ldr	r2, [pc, #120]	; (80036d0 <SystemInit+0x100>)
 8003656:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003658:	4b1a      	ldr	r3, [pc, #104]	; (80036c4 <SystemInit+0xf4>)
 800365a:	4a1e      	ldr	r2, [pc, #120]	; (80036d4 <SystemInit+0x104>)
 800365c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800365e:	4b19      	ldr	r3, [pc, #100]	; (80036c4 <SystemInit+0xf4>)
 8003660:	2200      	movs	r2, #0
 8003662:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003664:	4b17      	ldr	r3, [pc, #92]	; (80036c4 <SystemInit+0xf4>)
 8003666:	4a1b      	ldr	r2, [pc, #108]	; (80036d4 <SystemInit+0x104>)
 8003668:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800366a:	4b16      	ldr	r3, [pc, #88]	; (80036c4 <SystemInit+0xf4>)
 800366c:	2200      	movs	r2, #0
 800366e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003670:	4b14      	ldr	r3, [pc, #80]	; (80036c4 <SystemInit+0xf4>)
 8003672:	4a18      	ldr	r2, [pc, #96]	; (80036d4 <SystemInit+0x104>)
 8003674:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003676:	4b13      	ldr	r3, [pc, #76]	; (80036c4 <SystemInit+0xf4>)
 8003678:	2200      	movs	r2, #0
 800367a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800367c:	4b11      	ldr	r3, [pc, #68]	; (80036c4 <SystemInit+0xf4>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a10      	ldr	r2, [pc, #64]	; (80036c4 <SystemInit+0xf4>)
 8003682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003686:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003688:	4b0e      	ldr	r3, [pc, #56]	; (80036c4 <SystemInit+0xf4>)
 800368a:	2200      	movs	r2, #0
 800368c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800368e:	4b12      	ldr	r3, [pc, #72]	; (80036d8 <SystemInit+0x108>)
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	4b12      	ldr	r3, [pc, #72]	; (80036dc <SystemInit+0x10c>)
 8003694:	4013      	ands	r3, r2
 8003696:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800369a:	d202      	bcs.n	80036a2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800369c:	4b10      	ldr	r3, [pc, #64]	; (80036e0 <SystemInit+0x110>)
 800369e:	2201      	movs	r2, #1
 80036a0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80036a2:	4b10      	ldr	r3, [pc, #64]	; (80036e4 <SystemInit+0x114>)
 80036a4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80036a8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80036aa:	4b04      	ldr	r3, [pc, #16]	; (80036bc <SystemInit+0xec>)
 80036ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036b0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80036b2:	bf00      	nop
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	e000ed00 	.word	0xe000ed00
 80036c0:	52002000 	.word	0x52002000
 80036c4:	58024400 	.word	0x58024400
 80036c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80036cc:	02020200 	.word	0x02020200
 80036d0:	01ff0000 	.word	0x01ff0000
 80036d4:	01010280 	.word	0x01010280
 80036d8:	5c001000 	.word	0x5c001000
 80036dc:	ffff0000 	.word	0xffff0000
 80036e0:	51008108 	.word	0x51008108
 80036e4:	52004000 	.word	0x52004000

080036e8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b09a      	sub	sp, #104	; 0x68
 80036ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80036f2:	2200      	movs	r2, #0
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	605a      	str	r2, [r3, #4]
 80036f8:	609a      	str	r2, [r3, #8]
 80036fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	605a      	str	r2, [r3, #4]
 8003706:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003708:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	605a      	str	r2, [r3, #4]
 8003712:	609a      	str	r2, [r3, #8]
 8003714:	60da      	str	r2, [r3, #12]
 8003716:	611a      	str	r2, [r3, #16]
 8003718:	615a      	str	r2, [r3, #20]
 800371a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800371c:	1d3b      	adds	r3, r7, #4
 800371e:	222c      	movs	r2, #44	; 0x2c
 8003720:	2100      	movs	r1, #0
 8003722:	4618      	mov	r0, r3
 8003724:	f00b fdb8 	bl	800f298 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003728:	4b44      	ldr	r3, [pc, #272]	; (800383c <MX_TIM1_Init+0x154>)
 800372a:	4a45      	ldr	r2, [pc, #276]	; (8003840 <MX_TIM1_Init+0x158>)
 800372c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 800372e:	4b43      	ldr	r3, [pc, #268]	; (800383c <MX_TIM1_Init+0x154>)
 8003730:	22c7      	movs	r2, #199	; 0xc7
 8003732:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003734:	4b41      	ldr	r3, [pc, #260]	; (800383c <MX_TIM1_Init+0x154>)
 8003736:	2200      	movs	r2, #0
 8003738:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 800373a:	4b40      	ldr	r3, [pc, #256]	; (800383c <MX_TIM1_Init+0x154>)
 800373c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8003740:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003742:	4b3e      	ldr	r3, [pc, #248]	; (800383c <MX_TIM1_Init+0x154>)
 8003744:	2200      	movs	r2, #0
 8003746:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003748:	4b3c      	ldr	r3, [pc, #240]	; (800383c <MX_TIM1_Init+0x154>)
 800374a:	2200      	movs	r2, #0
 800374c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800374e:	4b3b      	ldr	r3, [pc, #236]	; (800383c <MX_TIM1_Init+0x154>)
 8003750:	2280      	movs	r2, #128	; 0x80
 8003752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003754:	4839      	ldr	r0, [pc, #228]	; (800383c <MX_TIM1_Init+0x154>)
 8003756:	f007 f9ac 	bl	800aab2 <HAL_TIM_Base_Init>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003760:	f7ff fc3a 	bl	8002fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003768:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800376a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800376e:	4619      	mov	r1, r3
 8003770:	4832      	ldr	r0, [pc, #200]	; (800383c <MX_TIM1_Init+0x154>)
 8003772:	f007 fd31 	bl	800b1d8 <HAL_TIM_ConfigClockSource>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800377c:	f7ff fc2c 	bl	8002fd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003780:	482e      	ldr	r0, [pc, #184]	; (800383c <MX_TIM1_Init+0x154>)
 8003782:	f007 fa94 	bl	800acae <HAL_TIM_PWM_Init>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800378c:	f7ff fc24 	bl	8002fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003790:	2300      	movs	r3, #0
 8003792:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003794:	2300      	movs	r3, #0
 8003796:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003798:	2300      	movs	r3, #0
 800379a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800379c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80037a0:	4619      	mov	r1, r3
 80037a2:	4826      	ldr	r0, [pc, #152]	; (800383c <MX_TIM1_Init+0x154>)
 80037a4:	f008 fa46 	bl	800bc34 <HAL_TIMEx_MasterConfigSynchronization>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80037ae:	f7ff fc13 	bl	8002fd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037b2:	2360      	movs	r3, #96	; 0x60
 80037b4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 80037b6:	f240 1339 	movw	r3, #313	; 0x139
 80037ba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037bc:	2300      	movs	r3, #0
 80037be:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80037c0:	2300      	movs	r3, #0
 80037c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037c4:	2300      	movs	r3, #0
 80037c6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80037c8:	2300      	movs	r3, #0
 80037ca:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80037cc:	2300      	movs	r3, #0
 80037ce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80037d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037d4:	2204      	movs	r2, #4
 80037d6:	4619      	mov	r1, r3
 80037d8:	4818      	ldr	r0, [pc, #96]	; (800383c <MX_TIM1_Init+0x154>)
 80037da:	f007 fbe9 	bl	800afb0 <HAL_TIM_PWM_ConfigChannel>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80037e4:	f7ff fbf8 	bl	8002fd8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80037e8:	2300      	movs	r3, #0
 80037ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80037ec:	2300      	movs	r3, #0
 80037ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80037f0:	2300      	movs	r3, #0
 80037f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80037f4:	2300      	movs	r3, #0
 80037f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80037f8:	2300      	movs	r3, #0
 80037fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80037fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003800:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003802:	2300      	movs	r3, #0
 8003804:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003806:	2300      	movs	r3, #0
 8003808:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800380a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800380e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003810:	2300      	movs	r3, #0
 8003812:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003814:	2300      	movs	r3, #0
 8003816:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003818:	1d3b      	adds	r3, r7, #4
 800381a:	4619      	mov	r1, r3
 800381c:	4807      	ldr	r0, [pc, #28]	; (800383c <MX_TIM1_Init+0x154>)
 800381e:	f008 fa97 	bl	800bd50 <HAL_TIMEx_ConfigBreakDeadTime>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8003828:	f7ff fbd6 	bl	8002fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800382c:	4803      	ldr	r0, [pc, #12]	; (800383c <MX_TIM1_Init+0x154>)
 800382e:	f000 fccb 	bl	80041c8 <HAL_TIM_MspPostInit>

}
 8003832:	bf00      	nop
 8003834:	3768      	adds	r7, #104	; 0x68
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	24000e84 	.word	0x24000e84
 8003840:	40010000 	.word	0x40010000

08003844 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b08e      	sub	sp, #56	; 0x38
 8003848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800384a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	605a      	str	r2, [r3, #4]
 8003854:	609a      	str	r2, [r3, #8]
 8003856:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003858:	f107 031c 	add.w	r3, r7, #28
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	605a      	str	r2, [r3, #4]
 8003862:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003864:	463b      	mov	r3, r7
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	605a      	str	r2, [r3, #4]
 800386c:	609a      	str	r2, [r3, #8]
 800386e:	60da      	str	r2, [r3, #12]
 8003870:	611a      	str	r2, [r3, #16]
 8003872:	615a      	str	r2, [r3, #20]
 8003874:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003876:	4b2e      	ldr	r3, [pc, #184]	; (8003930 <MX_TIM2_Init+0xec>)
 8003878:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800387c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 800387e:	4b2c      	ldr	r3, [pc, #176]	; (8003930 <MX_TIM2_Init+0xec>)
 8003880:	22c7      	movs	r2, #199	; 0xc7
 8003882:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003884:	4b2a      	ldr	r3, [pc, #168]	; (8003930 <MX_TIM2_Init+0xec>)
 8003886:	2200      	movs	r2, #0
 8003888:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 800388a:	4b29      	ldr	r3, [pc, #164]	; (8003930 <MX_TIM2_Init+0xec>)
 800388c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8003890:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003892:	4b27      	ldr	r3, [pc, #156]	; (8003930 <MX_TIM2_Init+0xec>)
 8003894:	2200      	movs	r2, #0
 8003896:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003898:	4b25      	ldr	r3, [pc, #148]	; (8003930 <MX_TIM2_Init+0xec>)
 800389a:	2280      	movs	r2, #128	; 0x80
 800389c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800389e:	4824      	ldr	r0, [pc, #144]	; (8003930 <MX_TIM2_Init+0xec>)
 80038a0:	f007 f907 	bl	800aab2 <HAL_TIM_Base_Init>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80038aa:	f7ff fb95 	bl	8002fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80038b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038b8:	4619      	mov	r1, r3
 80038ba:	481d      	ldr	r0, [pc, #116]	; (8003930 <MX_TIM2_Init+0xec>)
 80038bc:	f007 fc8c 	bl	800b1d8 <HAL_TIM_ConfigClockSource>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80038c6:	f7ff fb87 	bl	8002fd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80038ca:	4819      	ldr	r0, [pc, #100]	; (8003930 <MX_TIM2_Init+0xec>)
 80038cc:	f007 f9ef 	bl	800acae <HAL_TIM_PWM_Init>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80038d6:	f7ff fb7f 	bl	8002fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038da:	2300      	movs	r3, #0
 80038dc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038de:	2300      	movs	r3, #0
 80038e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80038e2:	f107 031c 	add.w	r3, r7, #28
 80038e6:	4619      	mov	r1, r3
 80038e8:	4811      	ldr	r0, [pc, #68]	; (8003930 <MX_TIM2_Init+0xec>)
 80038ea:	f008 f9a3 	bl	800bc34 <HAL_TIMEx_MasterConfigSynchronization>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80038f4:	f7ff fb70 	bl	8002fd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038f8:	2360      	movs	r3, #96	; 0x60
 80038fa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 80038fc:	f240 1339 	movw	r3, #313	; 0x139
 8003900:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003902:	2300      	movs	r3, #0
 8003904:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003906:	2300      	movs	r3, #0
 8003908:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800390a:	463b      	mov	r3, r7
 800390c:	2208      	movs	r2, #8
 800390e:	4619      	mov	r1, r3
 8003910:	4807      	ldr	r0, [pc, #28]	; (8003930 <MX_TIM2_Init+0xec>)
 8003912:	f007 fb4d 	bl	800afb0 <HAL_TIM_PWM_ConfigChannel>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800391c:	f7ff fb5c 	bl	8002fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003920:	4803      	ldr	r0, [pc, #12]	; (8003930 <MX_TIM2_Init+0xec>)
 8003922:	f000 fc51 	bl	80041c8 <HAL_TIM_MspPostInit>

}
 8003926:	bf00      	nop
 8003928:	3738      	adds	r7, #56	; 0x38
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	24000ed0 	.word	0x24000ed0

08003934 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b08e      	sub	sp, #56	; 0x38
 8003938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800393a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	605a      	str	r2, [r3, #4]
 8003944:	609a      	str	r2, [r3, #8]
 8003946:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003948:	f107 031c 	add.w	r3, r7, #28
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	605a      	str	r2, [r3, #4]
 8003952:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003954:	463b      	mov	r3, r7
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	605a      	str	r2, [r3, #4]
 800395c:	609a      	str	r2, [r3, #8]
 800395e:	60da      	str	r2, [r3, #12]
 8003960:	611a      	str	r2, [r3, #16]
 8003962:	615a      	str	r2, [r3, #20]
 8003964:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003966:	4b2d      	ldr	r3, [pc, #180]	; (8003a1c <MX_TIM3_Init+0xe8>)
 8003968:	4a2d      	ldr	r2, [pc, #180]	; (8003a20 <MX_TIM3_Init+0xec>)
 800396a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 800396c:	4b2b      	ldr	r3, [pc, #172]	; (8003a1c <MX_TIM3_Init+0xe8>)
 800396e:	22c7      	movs	r2, #199	; 0xc7
 8003970:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003972:	4b2a      	ldr	r3, [pc, #168]	; (8003a1c <MX_TIM3_Init+0xe8>)
 8003974:	2200      	movs	r2, #0
 8003976:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2400-1;
 8003978:	4b28      	ldr	r3, [pc, #160]	; (8003a1c <MX_TIM3_Init+0xe8>)
 800397a:	f640 125f 	movw	r2, #2399	; 0x95f
 800397e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003980:	4b26      	ldr	r3, [pc, #152]	; (8003a1c <MX_TIM3_Init+0xe8>)
 8003982:	2200      	movs	r2, #0
 8003984:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003986:	4b25      	ldr	r3, [pc, #148]	; (8003a1c <MX_TIM3_Init+0xe8>)
 8003988:	2280      	movs	r2, #128	; 0x80
 800398a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800398c:	4823      	ldr	r0, [pc, #140]	; (8003a1c <MX_TIM3_Init+0xe8>)
 800398e:	f007 f890 	bl	800aab2 <HAL_TIM_Base_Init>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003998:	f7ff fb1e 	bl	8002fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800399c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039a0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80039a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039a6:	4619      	mov	r1, r3
 80039a8:	481c      	ldr	r0, [pc, #112]	; (8003a1c <MX_TIM3_Init+0xe8>)
 80039aa:	f007 fc15 	bl	800b1d8 <HAL_TIM_ConfigClockSource>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80039b4:	f7ff fb10 	bl	8002fd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80039b8:	4818      	ldr	r0, [pc, #96]	; (8003a1c <MX_TIM3_Init+0xe8>)
 80039ba:	f007 f978 	bl	800acae <HAL_TIM_PWM_Init>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80039c4:	f7ff fb08 	bl	8002fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039c8:	2300      	movs	r3, #0
 80039ca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039cc:	2300      	movs	r3, #0
 80039ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80039d0:	f107 031c 	add.w	r3, r7, #28
 80039d4:	4619      	mov	r1, r3
 80039d6:	4811      	ldr	r0, [pc, #68]	; (8003a1c <MX_TIM3_Init+0xe8>)
 80039d8:	f008 f92c 	bl	800bc34 <HAL_TIMEx_MasterConfigSynchronization>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80039e2:	f7ff faf9 	bl	8002fd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039e6:	2360      	movs	r3, #96	; 0x60
 80039e8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80039ea:	2300      	movs	r3, #0
 80039ec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039ee:	2300      	movs	r3, #0
 80039f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039f2:	2300      	movs	r3, #0
 80039f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80039f6:	463b      	mov	r3, r7
 80039f8:	2200      	movs	r2, #0
 80039fa:	4619      	mov	r1, r3
 80039fc:	4807      	ldr	r0, [pc, #28]	; (8003a1c <MX_TIM3_Init+0xe8>)
 80039fe:	f007 fad7 	bl	800afb0 <HAL_TIM_PWM_ConfigChannel>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003a08:	f7ff fae6 	bl	8002fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003a0c:	4803      	ldr	r0, [pc, #12]	; (8003a1c <MX_TIM3_Init+0xe8>)
 8003a0e:	f000 fbdb 	bl	80041c8 <HAL_TIM_MspPostInit>

}
 8003a12:	bf00      	nop
 8003a14:	3738      	adds	r7, #56	; 0x38
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	24000da0 	.word	0x24000da0
 8003a20:	40000400 	.word	0x40000400

08003a24 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b08e      	sub	sp, #56	; 0x38
 8003a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	605a      	str	r2, [r3, #4]
 8003a34:	609a      	str	r2, [r3, #8]
 8003a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a38:	f107 031c 	add.w	r3, r7, #28
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	605a      	str	r2, [r3, #4]
 8003a42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a44:	463b      	mov	r3, r7
 8003a46:	2200      	movs	r2, #0
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	605a      	str	r2, [r3, #4]
 8003a4c:	609a      	str	r2, [r3, #8]
 8003a4e:	60da      	str	r2, [r3, #12]
 8003a50:	611a      	str	r2, [r3, #16]
 8003a52:	615a      	str	r2, [r3, #20]
 8003a54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003a56:	4b2d      	ldr	r3, [pc, #180]	; (8003b0c <MX_TIM4_Init+0xe8>)
 8003a58:	4a2d      	ldr	r2, [pc, #180]	; (8003b10 <MX_TIM4_Init+0xec>)
 8003a5a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8003a5c:	4b2b      	ldr	r3, [pc, #172]	; (8003b0c <MX_TIM4_Init+0xe8>)
 8003a5e:	22ef      	movs	r2, #239	; 0xef
 8003a60:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a62:	4b2a      	ldr	r3, [pc, #168]	; (8003b0c <MX_TIM4_Init+0xe8>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 8003a68:	4b28      	ldr	r3, [pc, #160]	; (8003b0c <MX_TIM4_Init+0xe8>)
 8003a6a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003a6e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a70:	4b26      	ldr	r3, [pc, #152]	; (8003b0c <MX_TIM4_Init+0xe8>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003a76:	4b25      	ldr	r3, [pc, #148]	; (8003b0c <MX_TIM4_Init+0xe8>)
 8003a78:	2280      	movs	r2, #128	; 0x80
 8003a7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003a7c:	4823      	ldr	r0, [pc, #140]	; (8003b0c <MX_TIM4_Init+0xe8>)
 8003a7e:	f007 f818 	bl	800aab2 <HAL_TIM_Base_Init>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8003a88:	f7ff faa6 	bl	8002fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a90:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003a92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a96:	4619      	mov	r1, r3
 8003a98:	481c      	ldr	r0, [pc, #112]	; (8003b0c <MX_TIM4_Init+0xe8>)
 8003a9a:	f007 fb9d 	bl	800b1d8 <HAL_TIM_ConfigClockSource>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8003aa4:	f7ff fa98 	bl	8002fd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003aa8:	4818      	ldr	r0, [pc, #96]	; (8003b0c <MX_TIM4_Init+0xe8>)
 8003aaa:	f007 f900 	bl	800acae <HAL_TIM_PWM_Init>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8003ab4:	f7ff fa90 	bl	8002fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003abc:	2300      	movs	r3, #0
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003ac0:	f107 031c 	add.w	r3, r7, #28
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4811      	ldr	r0, [pc, #68]	; (8003b0c <MX_TIM4_Init+0xe8>)
 8003ac8:	f008 f8b4 	bl	800bc34 <HAL_TIMEx_MasterConfigSynchronization>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8003ad2:	f7ff fa81 	bl	8002fd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ad6:	2360      	movs	r3, #96	; 0x60
 8003ad8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003ada:	2300      	movs	r3, #0
 8003adc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003ae6:	463b      	mov	r3, r7
 8003ae8:	2208      	movs	r2, #8
 8003aea:	4619      	mov	r1, r3
 8003aec:	4807      	ldr	r0, [pc, #28]	; (8003b0c <MX_TIM4_Init+0xe8>)
 8003aee:	f007 fa5f 	bl	800afb0 <HAL_TIM_PWM_ConfigChannel>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8003af8:	f7ff fa6e 	bl	8002fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003afc:	4803      	ldr	r0, [pc, #12]	; (8003b0c <MX_TIM4_Init+0xe8>)
 8003afe:	f000 fb63 	bl	80041c8 <HAL_TIM_MspPostInit>

}
 8003b02:	bf00      	nop
 8003b04:	3738      	adds	r7, #56	; 0x38
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	24000cbc 	.word	0x24000cbc
 8003b10:	40000800 	.word	0x40000800

08003b14 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b088      	sub	sp, #32
 8003b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b1a:	f107 0310 	add.w	r3, r7, #16
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	605a      	str	r2, [r3, #4]
 8003b24:	609a      	str	r2, [r3, #8]
 8003b26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b28:	1d3b      	adds	r3, r7, #4
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	605a      	str	r2, [r3, #4]
 8003b30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003b32:	4b1d      	ldr	r3, [pc, #116]	; (8003ba8 <MX_TIM5_Init+0x94>)
 8003b34:	4a1d      	ldr	r2, [pc, #116]	; (8003bac <MX_TIM5_Init+0x98>)
 8003b36:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 8003b38:	4b1b      	ldr	r3, [pc, #108]	; (8003ba8 <MX_TIM5_Init+0x94>)
 8003b3a:	22c7      	movs	r2, #199	; 0xc7
 8003b3c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b3e:	4b1a      	ldr	r3, [pc, #104]	; (8003ba8 <MX_TIM5_Init+0x94>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 8003b44:	4b18      	ldr	r3, [pc, #96]	; (8003ba8 <MX_TIM5_Init+0x94>)
 8003b46:	f642 62df 	movw	r2, #11999	; 0x2edf
 8003b4a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b4c:	4b16      	ldr	r3, [pc, #88]	; (8003ba8 <MX_TIM5_Init+0x94>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b52:	4b15      	ldr	r3, [pc, #84]	; (8003ba8 <MX_TIM5_Init+0x94>)
 8003b54:	2280      	movs	r2, #128	; 0x80
 8003b56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003b58:	4813      	ldr	r0, [pc, #76]	; (8003ba8 <MX_TIM5_Init+0x94>)
 8003b5a:	f006 ffaa 	bl	800aab2 <HAL_TIM_Base_Init>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003b64:	f7ff fa38 	bl	8002fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003b6e:	f107 0310 	add.w	r3, r7, #16
 8003b72:	4619      	mov	r1, r3
 8003b74:	480c      	ldr	r0, [pc, #48]	; (8003ba8 <MX_TIM5_Init+0x94>)
 8003b76:	f007 fb2f 	bl	800b1d8 <HAL_TIM_ConfigClockSource>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003b80:	f7ff fa2a 	bl	8002fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b84:	2300      	movs	r3, #0
 8003b86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003b8c:	1d3b      	adds	r3, r7, #4
 8003b8e:	4619      	mov	r1, r3
 8003b90:	4805      	ldr	r0, [pc, #20]	; (8003ba8 <MX_TIM5_Init+0x94>)
 8003b92:	f008 f84f 	bl	800bc34 <HAL_TIMEx_MasterConfigSynchronization>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003b9c:	f7ff fa1c 	bl	8002fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003ba0:	bf00      	nop
 8003ba2:	3720      	adds	r7, #32
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	24000d54 	.word	0x24000d54
 8003bac:	40000c00 	.word	0x40000c00

08003bb0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bb6:	1d3b      	adds	r3, r7, #4
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	605a      	str	r2, [r3, #4]
 8003bbe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003bc0:	4b14      	ldr	r3, [pc, #80]	; (8003c14 <MX_TIM6_Init+0x64>)
 8003bc2:	4a15      	ldr	r2, [pc, #84]	; (8003c18 <MX_TIM6_Init+0x68>)
 8003bc4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 8003bc6:	4b13      	ldr	r3, [pc, #76]	; (8003c14 <MX_TIM6_Init+0x64>)
 8003bc8:	22c7      	movs	r2, #199	; 0xc7
 8003bca:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bcc:	4b11      	ldr	r3, [pc, #68]	; (8003c14 <MX_TIM6_Init+0x64>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6000-1;
 8003bd2:	4b10      	ldr	r3, [pc, #64]	; (8003c14 <MX_TIM6_Init+0x64>)
 8003bd4:	f241 726f 	movw	r2, #5999	; 0x176f
 8003bd8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003bda:	4b0e      	ldr	r3, [pc, #56]	; (8003c14 <MX_TIM6_Init+0x64>)
 8003bdc:	2280      	movs	r2, #128	; 0x80
 8003bde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003be0:	480c      	ldr	r0, [pc, #48]	; (8003c14 <MX_TIM6_Init+0x64>)
 8003be2:	f006 ff66 	bl	800aab2 <HAL_TIM_Base_Init>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003bec:	f7ff f9f4 	bl	8002fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003bf8:	1d3b      	adds	r3, r7, #4
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4805      	ldr	r0, [pc, #20]	; (8003c14 <MX_TIM6_Init+0x64>)
 8003bfe:	f008 f819 	bl	800bc34 <HAL_TIMEx_MasterConfigSynchronization>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003c08:	f7ff f9e6 	bl	8002fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003c0c:	bf00      	nop
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	24000e38 	.word	0x24000e38
 8003c18:	40001000 	.word	0x40001000

08003c1c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c22:	1d3b      	adds	r3, r7, #4
 8003c24:	2200      	movs	r2, #0
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	605a      	str	r2, [r3, #4]
 8003c2a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003c2c:	4b14      	ldr	r3, [pc, #80]	; (8003c80 <MX_TIM7_Init+0x64>)
 8003c2e:	4a15      	ldr	r2, [pc, #84]	; (8003c84 <MX_TIM7_Init+0x68>)
 8003c30:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 8003c32:	4b13      	ldr	r3, [pc, #76]	; (8003c80 <MX_TIM7_Init+0x64>)
 8003c34:	22c7      	movs	r2, #199	; 0xc7
 8003c36:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c38:	4b11      	ldr	r3, [pc, #68]	; (8003c80 <MX_TIM7_Init+0x64>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1200-1;
 8003c3e:	4b10      	ldr	r3, [pc, #64]	; (8003c80 <MX_TIM7_Init+0x64>)
 8003c40:	f240 42af 	movw	r2, #1199	; 0x4af
 8003c44:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003c46:	4b0e      	ldr	r3, [pc, #56]	; (8003c80 <MX_TIM7_Init+0x64>)
 8003c48:	2280      	movs	r2, #128	; 0x80
 8003c4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003c4c:	480c      	ldr	r0, [pc, #48]	; (8003c80 <MX_TIM7_Init+0x64>)
 8003c4e:	f006 ff30 	bl	800aab2 <HAL_TIM_Base_Init>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003c58:	f7ff f9be 	bl	8002fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c60:	2300      	movs	r3, #0
 8003c62:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003c64:	1d3b      	adds	r3, r7, #4
 8003c66:	4619      	mov	r1, r3
 8003c68:	4805      	ldr	r0, [pc, #20]	; (8003c80 <MX_TIM7_Init+0x64>)
 8003c6a:	f007 ffe3 	bl	800bc34 <HAL_TIMEx_MasterConfigSynchronization>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003c74:	f7ff f9b0 	bl	8002fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003c78:	bf00      	nop
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	24001000 	.word	0x24001000
 8003c84:	40001400 	.word	0x40001400

08003c88 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c8e:	463b      	mov	r3, r7
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	605a      	str	r2, [r3, #4]
 8003c96:	609a      	str	r2, [r3, #8]
 8003c98:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8003c9a:	4b16      	ldr	r3, [pc, #88]	; (8003cf4 <MX_TIM12_Init+0x6c>)
 8003c9c:	4a16      	ldr	r2, [pc, #88]	; (8003cf8 <MX_TIM12_Init+0x70>)
 8003c9e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 8003ca0:	4b14      	ldr	r3, [pc, #80]	; (8003cf4 <MX_TIM12_Init+0x6c>)
 8003ca2:	22c7      	movs	r2, #199	; 0xc7
 8003ca4:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ca6:	4b13      	ldr	r3, [pc, #76]	; (8003cf4 <MX_TIM12_Init+0x6c>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 600-1;
 8003cac:	4b11      	ldr	r3, [pc, #68]	; (8003cf4 <MX_TIM12_Init+0x6c>)
 8003cae:	f240 2257 	movw	r2, #599	; 0x257
 8003cb2:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cb4:	4b0f      	ldr	r3, [pc, #60]	; (8003cf4 <MX_TIM12_Init+0x6c>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003cba:	4b0e      	ldr	r3, [pc, #56]	; (8003cf4 <MX_TIM12_Init+0x6c>)
 8003cbc:	2280      	movs	r2, #128	; 0x80
 8003cbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8003cc0:	480c      	ldr	r0, [pc, #48]	; (8003cf4 <MX_TIM12_Init+0x6c>)
 8003cc2:	f006 fef6 	bl	800aab2 <HAL_TIM_Base_Init>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8003ccc:	f7ff f984 	bl	8002fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cd4:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8003cd6:	463b      	mov	r3, r7
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4806      	ldr	r0, [pc, #24]	; (8003cf4 <MX_TIM12_Init+0x6c>)
 8003cdc:	f007 fa7c 	bl	800b1d8 <HAL_TIM_ConfigClockSource>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8003ce6:	f7ff f977 	bl	8002fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8003cea:	bf00      	nop
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	24000f68 	.word	0x24000f68
 8003cf8:	40001800 	.word	0x40001800

08003cfc <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003d00:	4b0e      	ldr	r3, [pc, #56]	; (8003d3c <MX_TIM13_Init+0x40>)
 8003d02:	4a0f      	ldr	r2, [pc, #60]	; (8003d40 <MX_TIM13_Init+0x44>)
 8003d04:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 200-1;
 8003d06:	4b0d      	ldr	r3, [pc, #52]	; (8003d3c <MX_TIM13_Init+0x40>)
 8003d08:	22c7      	movs	r2, #199	; 0xc7
 8003d0a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d0c:	4b0b      	ldr	r3, [pc, #44]	; (8003d3c <MX_TIM13_Init+0x40>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 600-1;
 8003d12:	4b0a      	ldr	r3, [pc, #40]	; (8003d3c <MX_TIM13_Init+0x40>)
 8003d14:	f240 2257 	movw	r2, #599	; 0x257
 8003d18:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d1a:	4b08      	ldr	r3, [pc, #32]	; (8003d3c <MX_TIM13_Init+0x40>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003d20:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <MX_TIM13_Init+0x40>)
 8003d22:	2280      	movs	r2, #128	; 0x80
 8003d24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003d26:	4805      	ldr	r0, [pc, #20]	; (8003d3c <MX_TIM13_Init+0x40>)
 8003d28:	f006 fec3 	bl	800aab2 <HAL_TIM_Base_Init>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8003d32:	f7ff f951 	bl	8002fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8003d36:	bf00      	nop
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	24000dec 	.word	0x24000dec
 8003d40:	40001c00 	.word	0x40001c00

08003d44 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003d48:	4b0e      	ldr	r3, [pc, #56]	; (8003d84 <MX_TIM14_Init+0x40>)
 8003d4a:	4a0f      	ldr	r2, [pc, #60]	; (8003d88 <MX_TIM14_Init+0x44>)
 8003d4c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 200-1;
 8003d4e:	4b0d      	ldr	r3, [pc, #52]	; (8003d84 <MX_TIM14_Init+0x40>)
 8003d50:	22c7      	movs	r2, #199	; 0xc7
 8003d52:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d54:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <MX_TIM14_Init+0x40>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2400-1;
 8003d5a:	4b0a      	ldr	r3, [pc, #40]	; (8003d84 <MX_TIM14_Init+0x40>)
 8003d5c:	f640 125f 	movw	r2, #2399	; 0x95f
 8003d60:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d62:	4b08      	ldr	r3, [pc, #32]	; (8003d84 <MX_TIM14_Init+0x40>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003d68:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <MX_TIM14_Init+0x40>)
 8003d6a:	2280      	movs	r2, #128	; 0x80
 8003d6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003d6e:	4805      	ldr	r0, [pc, #20]	; (8003d84 <MX_TIM14_Init+0x40>)
 8003d70:	f006 fe9f 	bl	800aab2 <HAL_TIM_Base_Init>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8003d7a:	f7ff f92d 	bl	8002fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003d7e:	bf00      	nop
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	24000f1c 	.word	0x24000f1c
 8003d88:	40002000 	.word	0x40002000

08003d8c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b09a      	sub	sp, #104	; 0x68
 8003d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d92:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003d96:	2200      	movs	r2, #0
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	605a      	str	r2, [r3, #4]
 8003d9c:	609a      	str	r2, [r3, #8]
 8003d9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003da0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003da4:	2200      	movs	r2, #0
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	605a      	str	r2, [r3, #4]
 8003daa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003dac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	605a      	str	r2, [r3, #4]
 8003db6:	609a      	str	r2, [r3, #8]
 8003db8:	60da      	str	r2, [r3, #12]
 8003dba:	611a      	str	r2, [r3, #16]
 8003dbc:	615a      	str	r2, [r3, #20]
 8003dbe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003dc0:	1d3b      	adds	r3, r7, #4
 8003dc2:	222c      	movs	r2, #44	; 0x2c
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f00b fa66 	bl	800f298 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003dcc:	4b3f      	ldr	r3, [pc, #252]	; (8003ecc <MX_TIM15_Init+0x140>)
 8003dce:	4a40      	ldr	r2, [pc, #256]	; (8003ed0 <MX_TIM15_Init+0x144>)
 8003dd0:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8003dd2:	4b3e      	ldr	r3, [pc, #248]	; (8003ecc <MX_TIM15_Init+0x140>)
 8003dd4:	22ef      	movs	r2, #239	; 0xef
 8003dd6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dd8:	4b3c      	ldr	r3, [pc, #240]	; (8003ecc <MX_TIM15_Init+0x140>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 8003dde:	4b3b      	ldr	r3, [pc, #236]	; (8003ecc <MX_TIM15_Init+0x140>)
 8003de0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003de4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003de6:	4b39      	ldr	r3, [pc, #228]	; (8003ecc <MX_TIM15_Init+0x140>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003dec:	4b37      	ldr	r3, [pc, #220]	; (8003ecc <MX_TIM15_Init+0x140>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003df2:	4b36      	ldr	r3, [pc, #216]	; (8003ecc <MX_TIM15_Init+0x140>)
 8003df4:	2280      	movs	r2, #128	; 0x80
 8003df6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8003df8:	4834      	ldr	r0, [pc, #208]	; (8003ecc <MX_TIM15_Init+0x140>)
 8003dfa:	f006 fe5a 	bl	800aab2 <HAL_TIM_Base_Init>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d001      	beq.n	8003e08 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8003e04:	f7ff f8e8 	bl	8002fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e0c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8003e0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e12:	4619      	mov	r1, r3
 8003e14:	482d      	ldr	r0, [pc, #180]	; (8003ecc <MX_TIM15_Init+0x140>)
 8003e16:	f007 f9df 	bl	800b1d8 <HAL_TIM_ConfigClockSource>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8003e20:	f7ff f8da 	bl	8002fd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8003e24:	4829      	ldr	r0, [pc, #164]	; (8003ecc <MX_TIM15_Init+0x140>)
 8003e26:	f006 ff42 	bl	800acae <HAL_TIM_PWM_Init>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8003e30:	f7ff f8d2 	bl	8002fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e34:	2300      	movs	r3, #0
 8003e36:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003e3c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e40:	4619      	mov	r1, r3
 8003e42:	4822      	ldr	r0, [pc, #136]	; (8003ecc <MX_TIM15_Init+0x140>)
 8003e44:	f007 fef6 	bl	800bc34 <HAL_TIMEx_MasterConfigSynchronization>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8003e4e:	f7ff f8c3 	bl	8002fd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e52:	2360      	movs	r3, #96	; 0x60
 8003e54:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8003e56:	f240 1339 	movw	r3, #313	; 0x139
 8003e5a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003e60:	2300      	movs	r3, #0
 8003e62:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e64:	2300      	movs	r3, #0
 8003e66:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003e70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e74:	2204      	movs	r2, #4
 8003e76:	4619      	mov	r1, r3
 8003e78:	4814      	ldr	r0, [pc, #80]	; (8003ecc <MX_TIM15_Init+0x140>)
 8003e7a:	f007 f899 	bl	800afb0 <HAL_TIM_PWM_ConfigChannel>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8003e84:	f7ff f8a8 	bl	8002fd8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003e90:	2300      	movs	r3, #0
 8003e92:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003e94:	2300      	movs	r3, #0
 8003e96:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003e9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ea0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8003eaa:	1d3b      	adds	r3, r7, #4
 8003eac:	4619      	mov	r1, r3
 8003eae:	4807      	ldr	r0, [pc, #28]	; (8003ecc <MX_TIM15_Init+0x140>)
 8003eb0:	f007 ff4e 	bl	800bd50 <HAL_TIMEx_ConfigBreakDeadTime>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8003eba:	f7ff f88d 	bl	8002fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8003ebe:	4803      	ldr	r0, [pc, #12]	; (8003ecc <MX_TIM15_Init+0x140>)
 8003ec0:	f000 f982 	bl	80041c8 <HAL_TIM_MspPostInit>

}
 8003ec4:	bf00      	nop
 8003ec6:	3768      	adds	r7, #104	; 0x68
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	24000d08 	.word	0x24000d08
 8003ed0:	40014000 	.word	0x40014000

08003ed4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003ed8:	4b0f      	ldr	r3, [pc, #60]	; (8003f18 <MX_TIM16_Init+0x44>)
 8003eda:	4a10      	ldr	r2, [pc, #64]	; (8003f1c <MX_TIM16_Init+0x48>)
 8003edc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 240-1;
 8003ede:	4b0e      	ldr	r3, [pc, #56]	; (8003f18 <MX_TIM16_Init+0x44>)
 8003ee0:	22ef      	movs	r2, #239	; 0xef
 8003ee2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ee4:	4b0c      	ldr	r3, [pc, #48]	; (8003f18 <MX_TIM16_Init+0x44>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8003eea:	4b0b      	ldr	r3, [pc, #44]	; (8003f18 <MX_TIM16_Init+0x44>)
 8003eec:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003ef0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ef2:	4b09      	ldr	r3, [pc, #36]	; (8003f18 <MX_TIM16_Init+0x44>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003ef8:	4b07      	ldr	r3, [pc, #28]	; (8003f18 <MX_TIM16_Init+0x44>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003efe:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <MX_TIM16_Init+0x44>)
 8003f00:	2280      	movs	r2, #128	; 0x80
 8003f02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003f04:	4804      	ldr	r0, [pc, #16]	; (8003f18 <MX_TIM16_Init+0x44>)
 8003f06:	f006 fdd4 	bl	800aab2 <HAL_TIM_Base_Init>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8003f10:	f7ff f862 	bl	8002fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003f14:	bf00      	nop
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	24000fb4 	.word	0x24000fb4
 8003f1c:	40014400 	.word	0x40014400

08003f20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b08e      	sub	sp, #56	; 0x38
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a9a      	ldr	r2, [pc, #616]	; (8004198 <HAL_TIM_Base_MspInit+0x278>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d10f      	bne.n	8003f52 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f32:	4b9a      	ldr	r3, [pc, #616]	; (800419c <HAL_TIM_Base_MspInit+0x27c>)
 8003f34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f38:	4a98      	ldr	r2, [pc, #608]	; (800419c <HAL_TIM_Base_MspInit+0x27c>)
 8003f3a:	f043 0301 	orr.w	r3, r3, #1
 8003f3e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003f42:	4b96      	ldr	r3, [pc, #600]	; (800419c <HAL_TIM_Base_MspInit+0x27c>)
 8003f44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8003f50:	e11d      	b.n	800418e <HAL_TIM_Base_MspInit+0x26e>
  else if(tim_baseHandle->Instance==TIM2)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f5a:	d10f      	bne.n	8003f7c <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f5c:	4b8f      	ldr	r3, [pc, #572]	; (800419c <HAL_TIM_Base_MspInit+0x27c>)
 8003f5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f62:	4a8e      	ldr	r2, [pc, #568]	; (800419c <HAL_TIM_Base_MspInit+0x27c>)
 8003f64:	f043 0301 	orr.w	r3, r3, #1
 8003f68:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f6c:	4b8b      	ldr	r3, [pc, #556]	; (800419c <HAL_TIM_Base_MspInit+0x27c>)
 8003f6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	633b      	str	r3, [r7, #48]	; 0x30
 8003f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003f7a:	e108      	b.n	800418e <HAL_TIM_Base_MspInit+0x26e>
  else if(tim_baseHandle->Instance==TIM3)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a87      	ldr	r2, [pc, #540]	; (80041a0 <HAL_TIM_Base_MspInit+0x280>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d10f      	bne.n	8003fa6 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f86:	4b85      	ldr	r3, [pc, #532]	; (800419c <HAL_TIM_Base_MspInit+0x27c>)
 8003f88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f8c:	4a83      	ldr	r2, [pc, #524]	; (800419c <HAL_TIM_Base_MspInit+0x27c>)
 8003f8e:	f043 0302 	orr.w	r3, r3, #2
 8003f92:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f96:	4b81      	ldr	r3, [pc, #516]	; (800419c <HAL_TIM_Base_MspInit+0x27c>)
 8003f98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003fa4:	e0f3      	b.n	800418e <HAL_TIM_Base_MspInit+0x26e>
  else if(tim_baseHandle->Instance==TIM4)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a7e      	ldr	r2, [pc, #504]	; (80041a4 <HAL_TIM_Base_MspInit+0x284>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d10f      	bne.n	8003fd0 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003fb0:	4b7a      	ldr	r3, [pc, #488]	; (800419c <HAL_TIM_Base_MspInit+0x27c>)
 8003fb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fb6:	4a79      	ldr	r2, [pc, #484]	; (800419c <HAL_TIM_Base_MspInit+0x27c>)
 8003fb8:	f043 0304 	orr.w	r3, r3, #4
 8003fbc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003fc0:	4b76      	ldr	r3, [pc, #472]	; (800419c <HAL_TIM_Base_MspInit+0x27c>)
 8003fc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fc6:	f003 0304 	and.w	r3, r3, #4
 8003fca:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003fce:	e0de      	b.n	800418e <HAL_TIM_Base_MspInit+0x26e>
  else if(tim_baseHandle->Instance==TIM5)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a74      	ldr	r2, [pc, #464]	; (80041a8 <HAL_TIM_Base_MspInit+0x288>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d117      	bne.n	800400a <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003fda:	4b70      	ldr	r3, [pc, #448]	; (800419c <HAL_TIM_Base_MspInit+0x27c>)
 8003fdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fe0:	4a6e      	ldr	r2, [pc, #440]	; (800419c <HAL_TIM_Base_MspInit+0x27c>)
 8003fe2:	f043 0308 	orr.w	r3, r3, #8
 8003fe6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003fea:	4b6c      	ldr	r3, [pc, #432]	; (800419c <HAL_TIM_Base_MspInit+0x27c>)
 8003fec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	2032      	movs	r0, #50	; 0x32
 8003ffe:	f000 fe86 	bl	8004d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004002:	2032      	movs	r0, #50	; 0x32
 8004004:	f000 fe9d 	bl	8004d42 <HAL_NVIC_EnableIRQ>
}
 8004008:	e0c1      	b.n	800418e <HAL_TIM_Base_MspInit+0x26e>
  else if(tim_baseHandle->Instance==TIM6)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a67      	ldr	r2, [pc, #412]	; (80041ac <HAL_TIM_Base_MspInit+0x28c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d117      	bne.n	8004044 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004014:	4b61      	ldr	r3, [pc, #388]	; (800419c <HAL_TIM_Base_MspInit+0x27c>)
 8004016:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800401a:	4a60      	ldr	r2, [pc, #384]	; (800419c <HAL_TIM_Base_MspInit+0x27c>)
 800401c:	f043 0310 	orr.w	r3, r3, #16
 8004020:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004024:	4b5d      	ldr	r3, [pc, #372]	; (800419c <HAL_TIM_Base_MspInit+0x27c>)
 8004026:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800402a:	f003 0310 	and.w	r3, r3, #16
 800402e:	623b      	str	r3, [r7, #32]
 8004030:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004032:	2200      	movs	r2, #0
 8004034:	2100      	movs	r1, #0
 8004036:	2036      	movs	r0, #54	; 0x36
 8004038:	f000 fe69 	bl	8004d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800403c:	2036      	movs	r0, #54	; 0x36
 800403e:	f000 fe80 	bl	8004d42 <HAL_NVIC_EnableIRQ>
}
 8004042:	e0a4      	b.n	800418e <HAL_TIM_Base_MspInit+0x26e>
  else if(tim_baseHandle->Instance==TIM7)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a59      	ldr	r2, [pc, #356]	; (80041b0 <HAL_TIM_Base_MspInit+0x290>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d117      	bne.n	800407e <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800404e:	4b53      	ldr	r3, [pc, #332]	; (800419c <HAL_TIM_Base_MspInit+0x27c>)
 8004050:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004054:	4a51      	ldr	r2, [pc, #324]	; (800419c <HAL_TIM_Base_MspInit+0x27c>)
 8004056:	f043 0320 	orr.w	r3, r3, #32
 800405a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800405e:	4b4f      	ldr	r3, [pc, #316]	; (800419c <HAL_TIM_Base_MspInit+0x27c>)
 8004060:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004064:	f003 0320 	and.w	r3, r3, #32
 8004068:	61fb      	str	r3, [r7, #28]
 800406a:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800406c:	2200      	movs	r2, #0
 800406e:	2100      	movs	r1, #0
 8004070:	2037      	movs	r0, #55	; 0x37
 8004072:	f000 fe4c 	bl	8004d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004076:	2037      	movs	r0, #55	; 0x37
 8004078:	f000 fe63 	bl	8004d42 <HAL_NVIC_EnableIRQ>
}
 800407c:	e087      	b.n	800418e <HAL_TIM_Base_MspInit+0x26e>
  else if(tim_baseHandle->Instance==TIM12)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a4c      	ldr	r2, [pc, #304]	; (80041b4 <HAL_TIM_Base_MspInit+0x294>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d117      	bne.n	80040b8 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004088:	4b44      	ldr	r3, [pc, #272]	; (800419c <HAL_TIM_Base_MspInit+0x27c>)
 800408a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800408e:	4a43      	ldr	r2, [pc, #268]	; (800419c <HAL_TIM_Base_MspInit+0x27c>)
 8004090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004094:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004098:	4b40      	ldr	r3, [pc, #256]	; (800419c <HAL_TIM_Base_MspInit+0x27c>)
 800409a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800409e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a2:	61bb      	str	r3, [r7, #24]
 80040a4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80040a6:	2200      	movs	r2, #0
 80040a8:	2100      	movs	r1, #0
 80040aa:	202b      	movs	r0, #43	; 0x2b
 80040ac:	f000 fe2f 	bl	8004d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80040b0:	202b      	movs	r0, #43	; 0x2b
 80040b2:	f000 fe46 	bl	8004d42 <HAL_NVIC_EnableIRQ>
}
 80040b6:	e06a      	b.n	800418e <HAL_TIM_Base_MspInit+0x26e>
  else if(tim_baseHandle->Instance==TIM13)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a3e      	ldr	r2, [pc, #248]	; (80041b8 <HAL_TIM_Base_MspInit+0x298>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d117      	bne.n	80040f2 <HAL_TIM_Base_MspInit+0x1d2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80040c2:	4b36      	ldr	r3, [pc, #216]	; (800419c <HAL_TIM_Base_MspInit+0x27c>)
 80040c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040c8:	4a34      	ldr	r2, [pc, #208]	; (800419c <HAL_TIM_Base_MspInit+0x27c>)
 80040ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80040d2:	4b32      	ldr	r3, [pc, #200]	; (800419c <HAL_TIM_Base_MspInit+0x27c>)
 80040d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040dc:	617b      	str	r3, [r7, #20]
 80040de:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80040e0:	2200      	movs	r2, #0
 80040e2:	2100      	movs	r1, #0
 80040e4:	202c      	movs	r0, #44	; 0x2c
 80040e6:	f000 fe12 	bl	8004d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80040ea:	202c      	movs	r0, #44	; 0x2c
 80040ec:	f000 fe29 	bl	8004d42 <HAL_NVIC_EnableIRQ>
}
 80040f0:	e04d      	b.n	800418e <HAL_TIM_Base_MspInit+0x26e>
  else if(tim_baseHandle->Instance==TIM14)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a31      	ldr	r2, [pc, #196]	; (80041bc <HAL_TIM_Base_MspInit+0x29c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d117      	bne.n	800412c <HAL_TIM_Base_MspInit+0x20c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80040fc:	4b27      	ldr	r3, [pc, #156]	; (800419c <HAL_TIM_Base_MspInit+0x27c>)
 80040fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004102:	4a26      	ldr	r2, [pc, #152]	; (800419c <HAL_TIM_Base_MspInit+0x27c>)
 8004104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004108:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800410c:	4b23      	ldr	r3, [pc, #140]	; (800419c <HAL_TIM_Base_MspInit+0x27c>)
 800410e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004116:	613b      	str	r3, [r7, #16]
 8004118:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800411a:	2200      	movs	r2, #0
 800411c:	2100      	movs	r1, #0
 800411e:	202d      	movs	r0, #45	; 0x2d
 8004120:	f000 fdf5 	bl	8004d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004124:	202d      	movs	r0, #45	; 0x2d
 8004126:	f000 fe0c 	bl	8004d42 <HAL_NVIC_EnableIRQ>
}
 800412a:	e030      	b.n	800418e <HAL_TIM_Base_MspInit+0x26e>
  else if(tim_baseHandle->Instance==TIM15)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a23      	ldr	r2, [pc, #140]	; (80041c0 <HAL_TIM_Base_MspInit+0x2a0>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d10f      	bne.n	8004156 <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004136:	4b19      	ldr	r3, [pc, #100]	; (800419c <HAL_TIM_Base_MspInit+0x27c>)
 8004138:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800413c:	4a17      	ldr	r2, [pc, #92]	; (800419c <HAL_TIM_Base_MspInit+0x27c>)
 800413e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004142:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004146:	4b15      	ldr	r3, [pc, #84]	; (800419c <HAL_TIM_Base_MspInit+0x27c>)
 8004148:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800414c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	68fb      	ldr	r3, [r7, #12]
}
 8004154:	e01b      	b.n	800418e <HAL_TIM_Base_MspInit+0x26e>
  else if(tim_baseHandle->Instance==TIM16)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a1a      	ldr	r2, [pc, #104]	; (80041c4 <HAL_TIM_Base_MspInit+0x2a4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d116      	bne.n	800418e <HAL_TIM_Base_MspInit+0x26e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004160:	4b0e      	ldr	r3, [pc, #56]	; (800419c <HAL_TIM_Base_MspInit+0x27c>)
 8004162:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004166:	4a0d      	ldr	r2, [pc, #52]	; (800419c <HAL_TIM_Base_MspInit+0x27c>)
 8004168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800416c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004170:	4b0a      	ldr	r3, [pc, #40]	; (800419c <HAL_TIM_Base_MspInit+0x27c>)
 8004172:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417a:	60bb      	str	r3, [r7, #8]
 800417c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800417e:	2200      	movs	r2, #0
 8004180:	2100      	movs	r1, #0
 8004182:	2075      	movs	r0, #117	; 0x75
 8004184:	f000 fdc3 	bl	8004d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8004188:	2075      	movs	r0, #117	; 0x75
 800418a:	f000 fdda 	bl	8004d42 <HAL_NVIC_EnableIRQ>
}
 800418e:	bf00      	nop
 8004190:	3738      	adds	r7, #56	; 0x38
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	40010000 	.word	0x40010000
 800419c:	58024400 	.word	0x58024400
 80041a0:	40000400 	.word	0x40000400
 80041a4:	40000800 	.word	0x40000800
 80041a8:	40000c00 	.word	0x40000c00
 80041ac:	40001000 	.word	0x40001000
 80041b0:	40001400 	.word	0x40001400
 80041b4:	40001800 	.word	0x40001800
 80041b8:	40001c00 	.word	0x40001c00
 80041bc:	40002000 	.word	0x40002000
 80041c0:	40014000 	.word	0x40014000
 80041c4:	40014400 	.word	0x40014400

080041c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b08c      	sub	sp, #48	; 0x30
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041d0:	f107 031c 	add.w	r3, r7, #28
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	605a      	str	r2, [r3, #4]
 80041da:	609a      	str	r2, [r3, #8]
 80041dc:	60da      	str	r2, [r3, #12]
 80041de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a5e      	ldr	r2, [pc, #376]	; (8004360 <HAL_TIM_MspPostInit+0x198>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d120      	bne.n	800422c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80041ea:	4b5e      	ldr	r3, [pc, #376]	; (8004364 <HAL_TIM_MspPostInit+0x19c>)
 80041ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041f0:	4a5c      	ldr	r2, [pc, #368]	; (8004364 <HAL_TIM_MspPostInit+0x19c>)
 80041f2:	f043 0310 	orr.w	r3, r3, #16
 80041f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041fa:	4b5a      	ldr	r3, [pc, #360]	; (8004364 <HAL_TIM_MspPostInit+0x19c>)
 80041fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004200:	f003 0310 	and.w	r3, r3, #16
 8004204:	61bb      	str	r3, [r7, #24]
 8004206:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8004208:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800420c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800420e:	2302      	movs	r3, #2
 8004210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004212:	2300      	movs	r3, #0
 8004214:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004216:	2300      	movs	r3, #0
 8004218:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800421a:	2301      	movs	r3, #1
 800421c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 800421e:	f107 031c 	add.w	r3, r7, #28
 8004222:	4619      	mov	r1, r3
 8004224:	4850      	ldr	r0, [pc, #320]	; (8004368 <HAL_TIM_MspPostInit+0x1a0>)
 8004226:	f003 fdeb 	bl	8007e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800422a:	e094      	b.n	8004356 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM2)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004234:	d120      	bne.n	8004278 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004236:	4b4b      	ldr	r3, [pc, #300]	; (8004364 <HAL_TIM_MspPostInit+0x19c>)
 8004238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800423c:	4a49      	ldr	r2, [pc, #292]	; (8004364 <HAL_TIM_MspPostInit+0x19c>)
 800423e:	f043 0302 	orr.w	r3, r3, #2
 8004242:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004246:	4b47      	ldr	r3, [pc, #284]	; (8004364 <HAL_TIM_MspPostInit+0x19c>)
 8004248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	617b      	str	r3, [r7, #20]
 8004252:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 8004254:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800425a:	2302      	movs	r3, #2
 800425c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800425e:	2300      	movs	r3, #0
 8004260:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004262:	2300      	movs	r3, #0
 8004264:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004266:	2301      	movs	r3, #1
 8004268:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 800426a:	f107 031c 	add.w	r3, r7, #28
 800426e:	4619      	mov	r1, r3
 8004270:	483e      	ldr	r0, [pc, #248]	; (800436c <HAL_TIM_MspPostInit+0x1a4>)
 8004272:	f003 fdc5 	bl	8007e00 <HAL_GPIO_Init>
}
 8004276:	e06e      	b.n	8004356 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM3)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a3c      	ldr	r2, [pc, #240]	; (8004370 <HAL_TIM_MspPostInit+0x1a8>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d11f      	bne.n	80042c2 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004282:	4b38      	ldr	r3, [pc, #224]	; (8004364 <HAL_TIM_MspPostInit+0x19c>)
 8004284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004288:	4a36      	ldr	r2, [pc, #216]	; (8004364 <HAL_TIM_MspPostInit+0x19c>)
 800428a:	f043 0301 	orr.w	r3, r3, #1
 800428e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004292:	4b34      	ldr	r3, [pc, #208]	; (8004364 <HAL_TIM_MspPostInit+0x19c>)
 8004294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	613b      	str	r3, [r7, #16]
 800429e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 80042a0:	2340      	movs	r3, #64	; 0x40
 80042a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a4:	2302      	movs	r3, #2
 80042a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a8:	2300      	movs	r3, #0
 80042aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042ac:	2300      	movs	r3, #0
 80042ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80042b0:	2302      	movs	r3, #2
 80042b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 80042b4:	f107 031c 	add.w	r3, r7, #28
 80042b8:	4619      	mov	r1, r3
 80042ba:	482e      	ldr	r0, [pc, #184]	; (8004374 <HAL_TIM_MspPostInit+0x1ac>)
 80042bc:	f003 fda0 	bl	8007e00 <HAL_GPIO_Init>
}
 80042c0:	e049      	b.n	8004356 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM4)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a2c      	ldr	r2, [pc, #176]	; (8004378 <HAL_TIM_MspPostInit+0x1b0>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d120      	bne.n	800430e <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042cc:	4b25      	ldr	r3, [pc, #148]	; (8004364 <HAL_TIM_MspPostInit+0x19c>)
 80042ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042d2:	4a24      	ldr	r2, [pc, #144]	; (8004364 <HAL_TIM_MspPostInit+0x19c>)
 80042d4:	f043 0302 	orr.w	r3, r3, #2
 80042d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042dc:	4b21      	ldr	r3, [pc, #132]	; (8004364 <HAL_TIM_MspPostInit+0x19c>)
 80042de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 80042ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042f0:	2302      	movs	r3, #2
 80042f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f4:	2300      	movs	r3, #0
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042f8:	2300      	movs	r3, #0
 80042fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80042fc:	2302      	movs	r3, #2
 80042fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8004300:	f107 031c 	add.w	r3, r7, #28
 8004304:	4619      	mov	r1, r3
 8004306:	4819      	ldr	r0, [pc, #100]	; (800436c <HAL_TIM_MspPostInit+0x1a4>)
 8004308:	f003 fd7a 	bl	8007e00 <HAL_GPIO_Init>
}
 800430c:	e023      	b.n	8004356 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM15)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a1a      	ldr	r2, [pc, #104]	; (800437c <HAL_TIM_MspPostInit+0x1b4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d11e      	bne.n	8004356 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004318:	4b12      	ldr	r3, [pc, #72]	; (8004364 <HAL_TIM_MspPostInit+0x19c>)
 800431a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800431e:	4a11      	ldr	r2, [pc, #68]	; (8004364 <HAL_TIM_MspPostInit+0x19c>)
 8004320:	f043 0310 	orr.w	r3, r3, #16
 8004324:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004328:	4b0e      	ldr	r3, [pc, #56]	; (8004364 <HAL_TIM_MspPostInit+0x19c>)
 800432a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800432e:	f003 0310 	and.w	r3, r3, #16
 8004332:	60bb      	str	r3, [r7, #8]
 8004334:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 8004336:	2340      	movs	r3, #64	; 0x40
 8004338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800433a:	2302      	movs	r3, #2
 800433c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800433e:	2300      	movs	r3, #0
 8004340:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004342:	2300      	movs	r3, #0
 8004344:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8004346:	2304      	movs	r3, #4
 8004348:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 800434a:	f107 031c 	add.w	r3, r7, #28
 800434e:	4619      	mov	r1, r3
 8004350:	4805      	ldr	r0, [pc, #20]	; (8004368 <HAL_TIM_MspPostInit+0x1a0>)
 8004352:	f003 fd55 	bl	8007e00 <HAL_GPIO_Init>
}
 8004356:	bf00      	nop
 8004358:	3730      	adds	r7, #48	; 0x30
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	40010000 	.word	0x40010000
 8004364:	58024400 	.word	0x58024400
 8004368:	58021000 	.word	0x58021000
 800436c:	58020400 	.word	0x58020400
 8004370:	40000400 	.word	0x40000400
 8004374:	58020000 	.word	0x58020000
 8004378:	40000800 	.word	0x40000800
 800437c:	40014000 	.word	0x40014000

08004380 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004384:	4b25      	ldr	r3, [pc, #148]	; (800441c <MX_UART4_Init+0x9c>)
 8004386:	4a26      	ldr	r2, [pc, #152]	; (8004420 <MX_UART4_Init+0xa0>)
 8004388:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 800438a:	4b24      	ldr	r3, [pc, #144]	; (800441c <MX_UART4_Init+0x9c>)
 800438c:	4a25      	ldr	r2, [pc, #148]	; (8004424 <MX_UART4_Init+0xa4>)
 800438e:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004390:	4b22      	ldr	r3, [pc, #136]	; (800441c <MX_UART4_Init+0x9c>)
 8004392:	2200      	movs	r2, #0
 8004394:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004396:	4b21      	ldr	r3, [pc, #132]	; (800441c <MX_UART4_Init+0x9c>)
 8004398:	2200      	movs	r2, #0
 800439a:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800439c:	4b1f      	ldr	r3, [pc, #124]	; (800441c <MX_UART4_Init+0x9c>)
 800439e:	2200      	movs	r2, #0
 80043a0:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80043a2:	4b1e      	ldr	r3, [pc, #120]	; (800441c <MX_UART4_Init+0x9c>)
 80043a4:	220c      	movs	r2, #12
 80043a6:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043a8:	4b1c      	ldr	r3, [pc, #112]	; (800441c <MX_UART4_Init+0x9c>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80043ae:	4b1b      	ldr	r3, [pc, #108]	; (800441c <MX_UART4_Init+0x9c>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80043b4:	4b19      	ldr	r3, [pc, #100]	; (800441c <MX_UART4_Init+0x9c>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80043ba:	4b18      	ldr	r3, [pc, #96]	; (800441c <MX_UART4_Init+0x9c>)
 80043bc:	2200      	movs	r2, #0
 80043be:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80043c0:	4b16      	ldr	r3, [pc, #88]	; (800441c <MX_UART4_Init+0x9c>)
 80043c2:	2208      	movs	r2, #8
 80043c4:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80043c6:	4b15      	ldr	r3, [pc, #84]	; (800441c <MX_UART4_Init+0x9c>)
 80043c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80043cc:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80043ce:	4813      	ldr	r0, [pc, #76]	; (800441c <MX_UART4_Init+0x9c>)
 80043d0:	f007 fd5a 	bl	800be88 <HAL_UART_Init>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 80043da:	f7fe fdfd 	bl	8002fd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 80043de:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 80043e2:	480e      	ldr	r0, [pc, #56]	; (800441c <MX_UART4_Init+0x9c>)
 80043e4:	f009 fc77 	bl	800dcd6 <HAL_UARTEx_SetTxFifoThreshold>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <MX_UART4_Init+0x72>
  {
    Error_Handler();
 80043ee:	f7fe fdf3 	bl	8002fd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 80043f2:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 80043f6:	4809      	ldr	r0, [pc, #36]	; (800441c <MX_UART4_Init+0x9c>)
 80043f8:	f009 fcab 	bl	800dd52 <HAL_UARTEx_SetRxFifoThreshold>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <MX_UART4_Init+0x86>
  {
    Error_Handler();
 8004402:	f7fe fde9 	bl	8002fd8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 8004406:	4805      	ldr	r0, [pc, #20]	; (800441c <MX_UART4_Init+0x9c>)
 8004408:	f009 fbf1 	bl	800dbee <HAL_UARTEx_EnableFifoMode>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <MX_UART4_Init+0x96>
  {
    Error_Handler();
 8004412:	f7fe fde1 	bl	8002fd8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004416:	bf00      	nop
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	2400134c 	.word	0x2400134c
 8004420:	40004c00 	.word	0x40004c00
 8004424:	001e8480 	.word	0x001e8480

08004428 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800442c:	4b23      	ldr	r3, [pc, #140]	; (80044bc <MX_UART7_Init+0x94>)
 800442e:	4a24      	ldr	r2, [pc, #144]	; (80044c0 <MX_UART7_Init+0x98>)
 8004430:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8004432:	4b22      	ldr	r3, [pc, #136]	; (80044bc <MX_UART7_Init+0x94>)
 8004434:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004438:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800443a:	4b20      	ldr	r3, [pc, #128]	; (80044bc <MX_UART7_Init+0x94>)
 800443c:	2200      	movs	r2, #0
 800443e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8004440:	4b1e      	ldr	r3, [pc, #120]	; (80044bc <MX_UART7_Init+0x94>)
 8004442:	2200      	movs	r2, #0
 8004444:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8004446:	4b1d      	ldr	r3, [pc, #116]	; (80044bc <MX_UART7_Init+0x94>)
 8004448:	2200      	movs	r2, #0
 800444a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800444c:	4b1b      	ldr	r3, [pc, #108]	; (80044bc <MX_UART7_Init+0x94>)
 800444e:	220c      	movs	r2, #12
 8004450:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004452:	4b1a      	ldr	r3, [pc, #104]	; (80044bc <MX_UART7_Init+0x94>)
 8004454:	2200      	movs	r2, #0
 8004456:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8004458:	4b18      	ldr	r3, [pc, #96]	; (80044bc <MX_UART7_Init+0x94>)
 800445a:	2200      	movs	r2, #0
 800445c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800445e:	4b17      	ldr	r3, [pc, #92]	; (80044bc <MX_UART7_Init+0x94>)
 8004460:	2200      	movs	r2, #0
 8004462:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004464:	4b15      	ldr	r3, [pc, #84]	; (80044bc <MX_UART7_Init+0x94>)
 8004466:	2200      	movs	r2, #0
 8004468:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800446a:	4b14      	ldr	r3, [pc, #80]	; (80044bc <MX_UART7_Init+0x94>)
 800446c:	2200      	movs	r2, #0
 800446e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8004470:	4812      	ldr	r0, [pc, #72]	; (80044bc <MX_UART7_Init+0x94>)
 8004472:	f007 fd09 	bl	800be88 <HAL_UART_Init>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 800447c:	f7fe fdac 	bl	8002fd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8004480:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8004484:	480d      	ldr	r0, [pc, #52]	; (80044bc <MX_UART7_Init+0x94>)
 8004486:	f009 fc26 	bl	800dcd6 <HAL_UARTEx_SetTxFifoThreshold>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 8004490:	f7fe fda2 	bl	8002fd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8004494:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8004498:	4808      	ldr	r0, [pc, #32]	; (80044bc <MX_UART7_Init+0x94>)
 800449a:	f009 fc5a 	bl	800dd52 <HAL_UARTEx_SetRxFifoThreshold>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <MX_UART7_Init+0x80>
  {
    Error_Handler();
 80044a4:	f7fe fd98 	bl	8002fd8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 80044a8:	4804      	ldr	r0, [pc, #16]	; (80044bc <MX_UART7_Init+0x94>)
 80044aa:	f009 fba0 	bl	800dbee <HAL_UARTEx_EnableFifoMode>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <MX_UART7_Init+0x90>
  {
    Error_Handler();
 80044b4:	f7fe fd90 	bl	8002fd8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80044b8:	bf00      	nop
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	240010c4 	.word	0x240010c4
 80044c0:	40007800 	.word	0x40007800

080044c4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80044c8:	4b22      	ldr	r3, [pc, #136]	; (8004554 <MX_USART3_UART_Init+0x90>)
 80044ca:	4a23      	ldr	r2, [pc, #140]	; (8004558 <MX_USART3_UART_Init+0x94>)
 80044cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80044ce:	4b21      	ldr	r3, [pc, #132]	; (8004554 <MX_USART3_UART_Init+0x90>)
 80044d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80044d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80044d6:	4b1f      	ldr	r3, [pc, #124]	; (8004554 <MX_USART3_UART_Init+0x90>)
 80044d8:	2200      	movs	r2, #0
 80044da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80044dc:	4b1d      	ldr	r3, [pc, #116]	; (8004554 <MX_USART3_UART_Init+0x90>)
 80044de:	2200      	movs	r2, #0
 80044e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80044e2:	4b1c      	ldr	r3, [pc, #112]	; (8004554 <MX_USART3_UART_Init+0x90>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80044e8:	4b1a      	ldr	r3, [pc, #104]	; (8004554 <MX_USART3_UART_Init+0x90>)
 80044ea:	220c      	movs	r2, #12
 80044ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044ee:	4b19      	ldr	r3, [pc, #100]	; (8004554 <MX_USART3_UART_Init+0x90>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80044f4:	4b17      	ldr	r3, [pc, #92]	; (8004554 <MX_USART3_UART_Init+0x90>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80044fa:	4b16      	ldr	r3, [pc, #88]	; (8004554 <MX_USART3_UART_Init+0x90>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004500:	4b14      	ldr	r3, [pc, #80]	; (8004554 <MX_USART3_UART_Init+0x90>)
 8004502:	2200      	movs	r2, #0
 8004504:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004506:	4b13      	ldr	r3, [pc, #76]	; (8004554 <MX_USART3_UART_Init+0x90>)
 8004508:	2200      	movs	r2, #0
 800450a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800450c:	4811      	ldr	r0, [pc, #68]	; (8004554 <MX_USART3_UART_Init+0x90>)
 800450e:	f007 fcbb 	bl	800be88 <HAL_UART_Init>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004518:	f7fe fd5e 	bl	8002fd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800451c:	2100      	movs	r1, #0
 800451e:	480d      	ldr	r0, [pc, #52]	; (8004554 <MX_USART3_UART_Init+0x90>)
 8004520:	f009 fbd9 	bl	800dcd6 <HAL_UARTEx_SetTxFifoThreshold>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800452a:	f7fe fd55 	bl	8002fd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800452e:	2100      	movs	r1, #0
 8004530:	4808      	ldr	r0, [pc, #32]	; (8004554 <MX_USART3_UART_Init+0x90>)
 8004532:	f009 fc0e 	bl	800dd52 <HAL_UARTEx_SetRxFifoThreshold>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800453c:	f7fe fd4c 	bl	8002fd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004540:	4804      	ldr	r0, [pc, #16]	; (8004554 <MX_USART3_UART_Init+0x90>)
 8004542:	f009 fb8f 	bl	800dc64 <HAL_UARTEx_DisableFifoMode>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800454c:	f7fe fd44 	bl	8002fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004550:	bf00      	nop
 8004552:	bd80      	pop	{r7, pc}
 8004554:	240011cc 	.word	0x240011cc
 8004558:	40004800 	.word	0x40004800

0800455c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b0bc      	sub	sp, #240	; 0xf0
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004564:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004568:	2200      	movs	r2, #0
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	605a      	str	r2, [r3, #4]
 800456e:	609a      	str	r2, [r3, #8]
 8004570:	60da      	str	r2, [r3, #12]
 8004572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004574:	f107 0320 	add.w	r3, r7, #32
 8004578:	22bc      	movs	r2, #188	; 0xbc
 800457a:	2100      	movs	r1, #0
 800457c:	4618      	mov	r0, r3
 800457e:	f00a fe8b 	bl	800f298 <memset>
  if(uartHandle->Instance==UART4)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4aa1      	ldr	r2, [pc, #644]	; (800480c <HAL_UART_MspInit+0x2b0>)
 8004588:	4293      	cmp	r3, r2
 800458a:	f040 80b7 	bne.w	80046fc <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800458e:	2302      	movs	r3, #2
 8004590:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004592:	2300      	movs	r3, #0
 8004594:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004598:	f107 0320 	add.w	r3, r7, #32
 800459c:	4618      	mov	r0, r3
 800459e:	f004 fe05 	bl	80091ac <HAL_RCCEx_PeriphCLKConfig>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80045a8:	f7fe fd16 	bl	8002fd8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80045ac:	4b98      	ldr	r3, [pc, #608]	; (8004810 <HAL_UART_MspInit+0x2b4>)
 80045ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045b2:	4a97      	ldr	r2, [pc, #604]	; (8004810 <HAL_UART_MspInit+0x2b4>)
 80045b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80045bc:	4b94      	ldr	r3, [pc, #592]	; (8004810 <HAL_UART_MspInit+0x2b4>)
 80045be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045c6:	61fb      	str	r3, [r7, #28]
 80045c8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80045ca:	4b91      	ldr	r3, [pc, #580]	; (8004810 <HAL_UART_MspInit+0x2b4>)
 80045cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045d0:	4a8f      	ldr	r2, [pc, #572]	; (8004810 <HAL_UART_MspInit+0x2b4>)
 80045d2:	f043 0308 	orr.w	r3, r3, #8
 80045d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80045da:	4b8d      	ldr	r3, [pc, #564]	; (8004810 <HAL_UART_MspInit+0x2b4>)
 80045dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045e0:	f003 0308 	and.w	r3, r3, #8
 80045e4:	61bb      	str	r3, [r7, #24]
 80045e6:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80045e8:	2303      	movs	r3, #3
 80045ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ee:	2302      	movs	r3, #2
 80045f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f4:	2300      	movs	r3, #0
 80045f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045fa:	2300      	movs	r3, #0
 80045fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004600:	2308      	movs	r3, #8
 8004602:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004606:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800460a:	4619      	mov	r1, r3
 800460c:	4881      	ldr	r0, [pc, #516]	; (8004814 <HAL_UART_MspInit+0x2b8>)
 800460e:	f003 fbf7 	bl	8007e00 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 8004612:	4b81      	ldr	r3, [pc, #516]	; (8004818 <HAL_UART_MspInit+0x2bc>)
 8004614:	4a81      	ldr	r2, [pc, #516]	; (800481c <HAL_UART_MspInit+0x2c0>)
 8004616:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8004618:	4b7f      	ldr	r3, [pc, #508]	; (8004818 <HAL_UART_MspInit+0x2bc>)
 800461a:	223f      	movs	r2, #63	; 0x3f
 800461c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800461e:	4b7e      	ldr	r3, [pc, #504]	; (8004818 <HAL_UART_MspInit+0x2bc>)
 8004620:	2200      	movs	r2, #0
 8004622:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004624:	4b7c      	ldr	r3, [pc, #496]	; (8004818 <HAL_UART_MspInit+0x2bc>)
 8004626:	2200      	movs	r2, #0
 8004628:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800462a:	4b7b      	ldr	r3, [pc, #492]	; (8004818 <HAL_UART_MspInit+0x2bc>)
 800462c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004630:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004632:	4b79      	ldr	r3, [pc, #484]	; (8004818 <HAL_UART_MspInit+0x2bc>)
 8004634:	2200      	movs	r2, #0
 8004636:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004638:	4b77      	ldr	r3, [pc, #476]	; (8004818 <HAL_UART_MspInit+0x2bc>)
 800463a:	2200      	movs	r2, #0
 800463c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800463e:	4b76      	ldr	r3, [pc, #472]	; (8004818 <HAL_UART_MspInit+0x2bc>)
 8004640:	2200      	movs	r2, #0
 8004642:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004644:	4b74      	ldr	r3, [pc, #464]	; (8004818 <HAL_UART_MspInit+0x2bc>)
 8004646:	2200      	movs	r2, #0
 8004648:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800464a:	4b73      	ldr	r3, [pc, #460]	; (8004818 <HAL_UART_MspInit+0x2bc>)
 800464c:	2204      	movs	r2, #4
 800464e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004650:	4b71      	ldr	r3, [pc, #452]	; (8004818 <HAL_UART_MspInit+0x2bc>)
 8004652:	2203      	movs	r2, #3
 8004654:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8004656:	4b70      	ldr	r3, [pc, #448]	; (8004818 <HAL_UART_MspInit+0x2bc>)
 8004658:	2200      	movs	r2, #0
 800465a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800465c:	4b6e      	ldr	r3, [pc, #440]	; (8004818 <HAL_UART_MspInit+0x2bc>)
 800465e:	2200      	movs	r2, #0
 8004660:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8004662:	486d      	ldr	r0, [pc, #436]	; (8004818 <HAL_UART_MspInit+0x2bc>)
 8004664:	f000 fd92 	bl	800518c <HAL_DMA_Init>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 800466e:	f7fe fcb3 	bl	8002fd8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a68      	ldr	r2, [pc, #416]	; (8004818 <HAL_UART_MspInit+0x2bc>)
 8004676:	67da      	str	r2, [r3, #124]	; 0x7c
 8004678:	4a67      	ldr	r2, [pc, #412]	; (8004818 <HAL_UART_MspInit+0x2bc>)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800467e:	4b68      	ldr	r3, [pc, #416]	; (8004820 <HAL_UART_MspInit+0x2c4>)
 8004680:	4a68      	ldr	r2, [pc, #416]	; (8004824 <HAL_UART_MspInit+0x2c8>)
 8004682:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8004684:	4b66      	ldr	r3, [pc, #408]	; (8004820 <HAL_UART_MspInit+0x2c4>)
 8004686:	2240      	movs	r2, #64	; 0x40
 8004688:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800468a:	4b65      	ldr	r3, [pc, #404]	; (8004820 <HAL_UART_MspInit+0x2c4>)
 800468c:	2240      	movs	r2, #64	; 0x40
 800468e:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004690:	4b63      	ldr	r3, [pc, #396]	; (8004820 <HAL_UART_MspInit+0x2c4>)
 8004692:	2200      	movs	r2, #0
 8004694:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004696:	4b62      	ldr	r3, [pc, #392]	; (8004820 <HAL_UART_MspInit+0x2c4>)
 8004698:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800469c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800469e:	4b60      	ldr	r3, [pc, #384]	; (8004820 <HAL_UART_MspInit+0x2c4>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046a4:	4b5e      	ldr	r3, [pc, #376]	; (8004820 <HAL_UART_MspInit+0x2c4>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80046aa:	4b5d      	ldr	r3, [pc, #372]	; (8004820 <HAL_UART_MspInit+0x2c4>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80046b0:	4b5b      	ldr	r3, [pc, #364]	; (8004820 <HAL_UART_MspInit+0x2c4>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80046b6:	4b5a      	ldr	r3, [pc, #360]	; (8004820 <HAL_UART_MspInit+0x2c4>)
 80046b8:	2204      	movs	r2, #4
 80046ba:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80046bc:	4b58      	ldr	r3, [pc, #352]	; (8004820 <HAL_UART_MspInit+0x2c4>)
 80046be:	2203      	movs	r2, #3
 80046c0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80046c2:	4b57      	ldr	r3, [pc, #348]	; (8004820 <HAL_UART_MspInit+0x2c4>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80046c8:	4b55      	ldr	r3, [pc, #340]	; (8004820 <HAL_UART_MspInit+0x2c4>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80046ce:	4854      	ldr	r0, [pc, #336]	; (8004820 <HAL_UART_MspInit+0x2c4>)
 80046d0:	f000 fd5c 	bl	800518c <HAL_DMA_Init>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 80046da:	f7fe fc7d 	bl	8002fd8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a4f      	ldr	r2, [pc, #316]	; (8004820 <HAL_UART_MspInit+0x2c4>)
 80046e2:	679a      	str	r2, [r3, #120]	; 0x78
 80046e4:	4a4e      	ldr	r2, [pc, #312]	; (8004820 <HAL_UART_MspInit+0x2c4>)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80046ea:	2200      	movs	r2, #0
 80046ec:	2100      	movs	r1, #0
 80046ee:	2034      	movs	r0, #52	; 0x34
 80046f0:	f000 fb0d 	bl	8004d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80046f4:	2034      	movs	r0, #52	; 0x34
 80046f6:	f000 fb24 	bl	8004d42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80046fa:	e153      	b.n	80049a4 <HAL_UART_MspInit+0x448>
  else if(uartHandle->Instance==UART7)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a49      	ldr	r2, [pc, #292]	; (8004828 <HAL_UART_MspInit+0x2cc>)
 8004702:	4293      	cmp	r3, r2
 8004704:	f040 8098 	bne.w	8004838 <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8004708:	2302      	movs	r3, #2
 800470a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800470c:	2300      	movs	r3, #0
 800470e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004712:	f107 0320 	add.w	r3, r7, #32
 8004716:	4618      	mov	r0, r3
 8004718:	f004 fd48 	bl	80091ac <HAL_RCCEx_PeriphCLKConfig>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 8004722:	f7fe fc59 	bl	8002fd8 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8004726:	4b3a      	ldr	r3, [pc, #232]	; (8004810 <HAL_UART_MspInit+0x2b4>)
 8004728:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800472c:	4a38      	ldr	r2, [pc, #224]	; (8004810 <HAL_UART_MspInit+0x2b4>)
 800472e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004732:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004736:	4b36      	ldr	r3, [pc, #216]	; (8004810 <HAL_UART_MspInit+0x2b4>)
 8004738:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800473c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004740:	617b      	str	r3, [r7, #20]
 8004742:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004744:	4b32      	ldr	r3, [pc, #200]	; (8004810 <HAL_UART_MspInit+0x2b4>)
 8004746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800474a:	4a31      	ldr	r2, [pc, #196]	; (8004810 <HAL_UART_MspInit+0x2b4>)
 800474c:	f043 0310 	orr.w	r3, r3, #16
 8004750:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004754:	4b2e      	ldr	r3, [pc, #184]	; (8004810 <HAL_UART_MspInit+0x2b4>)
 8004756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800475a:	f003 0310 	and.w	r3, r3, #16
 800475e:	613b      	str	r3, [r7, #16]
 8004760:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004762:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004766:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800476a:	2302      	movs	r3, #2
 800476c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004770:	2300      	movs	r3, #0
 8004772:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004776:	2300      	movs	r3, #0
 8004778:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800477c:	2307      	movs	r3, #7
 800477e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004782:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004786:	4619      	mov	r1, r3
 8004788:	4828      	ldr	r0, [pc, #160]	; (800482c <HAL_UART_MspInit+0x2d0>)
 800478a:	f003 fb39 	bl	8007e00 <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 800478e:	4b28      	ldr	r3, [pc, #160]	; (8004830 <HAL_UART_MspInit+0x2d4>)
 8004790:	4a28      	ldr	r2, [pc, #160]	; (8004834 <HAL_UART_MspInit+0x2d8>)
 8004792:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8004794:	4b26      	ldr	r3, [pc, #152]	; (8004830 <HAL_UART_MspInit+0x2d4>)
 8004796:	2250      	movs	r2, #80	; 0x50
 8004798:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800479a:	4b25      	ldr	r3, [pc, #148]	; (8004830 <HAL_UART_MspInit+0x2d4>)
 800479c:	2240      	movs	r2, #64	; 0x40
 800479e:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047a0:	4b23      	ldr	r3, [pc, #140]	; (8004830 <HAL_UART_MspInit+0x2d4>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 80047a6:	4b22      	ldr	r3, [pc, #136]	; (8004830 <HAL_UART_MspInit+0x2d4>)
 80047a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047ac:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047ae:	4b20      	ldr	r3, [pc, #128]	; (8004830 <HAL_UART_MspInit+0x2d4>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047b4:	4b1e      	ldr	r3, [pc, #120]	; (8004830 <HAL_UART_MspInit+0x2d4>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 80047ba:	4b1d      	ldr	r3, [pc, #116]	; (8004830 <HAL_UART_MspInit+0x2d4>)
 80047bc:	2200      	movs	r2, #0
 80047be:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 80047c0:	4b1b      	ldr	r3, [pc, #108]	; (8004830 <HAL_UART_MspInit+0x2d4>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80047c6:	4b1a      	ldr	r3, [pc, #104]	; (8004830 <HAL_UART_MspInit+0x2d4>)
 80047c8:	2204      	movs	r2, #4
 80047ca:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80047cc:	4b18      	ldr	r3, [pc, #96]	; (8004830 <HAL_UART_MspInit+0x2d4>)
 80047ce:	2203      	movs	r2, #3
 80047d0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80047d2:	4b17      	ldr	r3, [pc, #92]	; (8004830 <HAL_UART_MspInit+0x2d4>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80047d8:	4b15      	ldr	r3, [pc, #84]	; (8004830 <HAL_UART_MspInit+0x2d4>)
 80047da:	2200      	movs	r2, #0
 80047dc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 80047de:	4814      	ldr	r0, [pc, #80]	; (8004830 <HAL_UART_MspInit+0x2d4>)
 80047e0:	f000 fcd4 	bl	800518c <HAL_DMA_Init>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <HAL_UART_MspInit+0x292>
      Error_Handler();
 80047ea:	f7fe fbf5 	bl	8002fd8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a0f      	ldr	r2, [pc, #60]	; (8004830 <HAL_UART_MspInit+0x2d4>)
 80047f2:	679a      	str	r2, [r3, #120]	; 0x78
 80047f4:	4a0e      	ldr	r2, [pc, #56]	; (8004830 <HAL_UART_MspInit+0x2d4>)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 80047fa:	2200      	movs	r2, #0
 80047fc:	2100      	movs	r1, #0
 80047fe:	2052      	movs	r0, #82	; 0x52
 8004800:	f000 fa85 	bl	8004d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8004804:	2052      	movs	r0, #82	; 0x52
 8004806:	f000 fa9c 	bl	8004d42 <HAL_NVIC_EnableIRQ>
}
 800480a:	e0cb      	b.n	80049a4 <HAL_UART_MspInit+0x448>
 800480c:	40004c00 	.word	0x40004c00
 8004810:	58024400 	.word	0x58024400
 8004814:	58020c00 	.word	0x58020c00
 8004818:	2400104c 	.word	0x2400104c
 800481c:	40020058 	.word	0x40020058
 8004820:	240013dc 	.word	0x240013dc
 8004824:	40020070 	.word	0x40020070
 8004828:	40007800 	.word	0x40007800
 800482c:	58021000 	.word	0x58021000
 8004830:	240012d4 	.word	0x240012d4
 8004834:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART3)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a5b      	ldr	r2, [pc, #364]	; (80049ac <HAL_UART_MspInit+0x450>)
 800483e:	4293      	cmp	r3, r2
 8004840:	f040 80b0 	bne.w	80049a4 <HAL_UART_MspInit+0x448>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004844:	2302      	movs	r3, #2
 8004846:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004848:	2300      	movs	r3, #0
 800484a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800484e:	f107 0320 	add.w	r3, r7, #32
 8004852:	4618      	mov	r0, r3
 8004854:	f004 fcaa 	bl	80091ac <HAL_RCCEx_PeriphCLKConfig>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <HAL_UART_MspInit+0x306>
      Error_Handler();
 800485e:	f7fe fbbb 	bl	8002fd8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004862:	4b53      	ldr	r3, [pc, #332]	; (80049b0 <HAL_UART_MspInit+0x454>)
 8004864:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004868:	4a51      	ldr	r2, [pc, #324]	; (80049b0 <HAL_UART_MspInit+0x454>)
 800486a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800486e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004872:	4b4f      	ldr	r3, [pc, #316]	; (80049b0 <HAL_UART_MspInit+0x454>)
 8004874:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004878:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004880:	4b4b      	ldr	r3, [pc, #300]	; (80049b0 <HAL_UART_MspInit+0x454>)
 8004882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004886:	4a4a      	ldr	r2, [pc, #296]	; (80049b0 <HAL_UART_MspInit+0x454>)
 8004888:	f043 0308 	orr.w	r3, r3, #8
 800488c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004890:	4b47      	ldr	r3, [pc, #284]	; (80049b0 <HAL_UART_MspInit+0x454>)
 8004892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004896:	f003 0308 	and.w	r3, r3, #8
 800489a:	60bb      	str	r3, [r7, #8]
 800489c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800489e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80048a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048a6:	2302      	movs	r3, #2
 80048a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ac:	2300      	movs	r3, #0
 80048ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048b2:	2300      	movs	r3, #0
 80048b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80048b8:	2307      	movs	r3, #7
 80048ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048be:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80048c2:	4619      	mov	r1, r3
 80048c4:	483b      	ldr	r0, [pc, #236]	; (80049b4 <HAL_UART_MspInit+0x458>)
 80048c6:	f003 fa9b 	bl	8007e00 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80048ca:	4b3b      	ldr	r3, [pc, #236]	; (80049b8 <HAL_UART_MspInit+0x45c>)
 80048cc:	4a3b      	ldr	r2, [pc, #236]	; (80049bc <HAL_UART_MspInit+0x460>)
 80048ce:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80048d0:	4b39      	ldr	r3, [pc, #228]	; (80049b8 <HAL_UART_MspInit+0x45c>)
 80048d2:	222d      	movs	r2, #45	; 0x2d
 80048d4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048d6:	4b38      	ldr	r3, [pc, #224]	; (80049b8 <HAL_UART_MspInit+0x45c>)
 80048d8:	2200      	movs	r2, #0
 80048da:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048dc:	4b36      	ldr	r3, [pc, #216]	; (80049b8 <HAL_UART_MspInit+0x45c>)
 80048de:	2200      	movs	r2, #0
 80048e0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80048e2:	4b35      	ldr	r3, [pc, #212]	; (80049b8 <HAL_UART_MspInit+0x45c>)
 80048e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048e8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048ea:	4b33      	ldr	r3, [pc, #204]	; (80049b8 <HAL_UART_MspInit+0x45c>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048f0:	4b31      	ldr	r3, [pc, #196]	; (80049b8 <HAL_UART_MspInit+0x45c>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80048f6:	4b30      	ldr	r3, [pc, #192]	; (80049b8 <HAL_UART_MspInit+0x45c>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80048fc:	4b2e      	ldr	r3, [pc, #184]	; (80049b8 <HAL_UART_MspInit+0x45c>)
 80048fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004902:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004904:	4b2c      	ldr	r3, [pc, #176]	; (80049b8 <HAL_UART_MspInit+0x45c>)
 8004906:	2200      	movs	r2, #0
 8004908:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800490a:	482b      	ldr	r0, [pc, #172]	; (80049b8 <HAL_UART_MspInit+0x45c>)
 800490c:	f000 fc3e 	bl	800518c <HAL_DMA_Init>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <HAL_UART_MspInit+0x3be>
      Error_Handler();
 8004916:	f7fe fb5f 	bl	8002fd8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a26      	ldr	r2, [pc, #152]	; (80049b8 <HAL_UART_MspInit+0x45c>)
 800491e:	67da      	str	r2, [r3, #124]	; 0x7c
 8004920:	4a25      	ldr	r2, [pc, #148]	; (80049b8 <HAL_UART_MspInit+0x45c>)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8004926:	4b26      	ldr	r3, [pc, #152]	; (80049c0 <HAL_UART_MspInit+0x464>)
 8004928:	4a26      	ldr	r2, [pc, #152]	; (80049c4 <HAL_UART_MspInit+0x468>)
 800492a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800492c:	4b24      	ldr	r3, [pc, #144]	; (80049c0 <HAL_UART_MspInit+0x464>)
 800492e:	222e      	movs	r2, #46	; 0x2e
 8004930:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004932:	4b23      	ldr	r3, [pc, #140]	; (80049c0 <HAL_UART_MspInit+0x464>)
 8004934:	2240      	movs	r2, #64	; 0x40
 8004936:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004938:	4b21      	ldr	r3, [pc, #132]	; (80049c0 <HAL_UART_MspInit+0x464>)
 800493a:	2200      	movs	r2, #0
 800493c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800493e:	4b20      	ldr	r3, [pc, #128]	; (80049c0 <HAL_UART_MspInit+0x464>)
 8004940:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004944:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004946:	4b1e      	ldr	r3, [pc, #120]	; (80049c0 <HAL_UART_MspInit+0x464>)
 8004948:	2200      	movs	r2, #0
 800494a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800494c:	4b1c      	ldr	r3, [pc, #112]	; (80049c0 <HAL_UART_MspInit+0x464>)
 800494e:	2200      	movs	r2, #0
 8004950:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004952:	4b1b      	ldr	r3, [pc, #108]	; (80049c0 <HAL_UART_MspInit+0x464>)
 8004954:	2200      	movs	r2, #0
 8004956:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004958:	4b19      	ldr	r3, [pc, #100]	; (80049c0 <HAL_UART_MspInit+0x464>)
 800495a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800495e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004960:	4b17      	ldr	r3, [pc, #92]	; (80049c0 <HAL_UART_MspInit+0x464>)
 8004962:	2204      	movs	r2, #4
 8004964:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004966:	4b16      	ldr	r3, [pc, #88]	; (80049c0 <HAL_UART_MspInit+0x464>)
 8004968:	2203      	movs	r2, #3
 800496a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800496c:	4b14      	ldr	r3, [pc, #80]	; (80049c0 <HAL_UART_MspInit+0x464>)
 800496e:	2200      	movs	r2, #0
 8004970:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004972:	4b13      	ldr	r3, [pc, #76]	; (80049c0 <HAL_UART_MspInit+0x464>)
 8004974:	2200      	movs	r2, #0
 8004976:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004978:	4811      	ldr	r0, [pc, #68]	; (80049c0 <HAL_UART_MspInit+0x464>)
 800497a:	f000 fc07 	bl	800518c <HAL_DMA_Init>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <HAL_UART_MspInit+0x42c>
      Error_Handler();
 8004984:	f7fe fb28 	bl	8002fd8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a0d      	ldr	r2, [pc, #52]	; (80049c0 <HAL_UART_MspInit+0x464>)
 800498c:	679a      	str	r2, [r3, #120]	; 0x78
 800498e:	4a0c      	ldr	r2, [pc, #48]	; (80049c0 <HAL_UART_MspInit+0x464>)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004994:	2200      	movs	r2, #0
 8004996:	2100      	movs	r1, #0
 8004998:	2027      	movs	r0, #39	; 0x27
 800499a:	f000 f9b8 	bl	8004d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800499e:	2027      	movs	r0, #39	; 0x27
 80049a0:	f000 f9cf 	bl	8004d42 <HAL_NVIC_EnableIRQ>
}
 80049a4:	bf00      	nop
 80049a6:	37f0      	adds	r7, #240	; 0xf0
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	40004800 	.word	0x40004800
 80049b0:	58024400 	.word	0x58024400
 80049b4:	58020c00 	.word	0x58020c00
 80049b8:	24001154 	.word	0x24001154
 80049bc:	40020028 	.word	0x40020028
 80049c0:	2400125c 	.word	0x2400125c
 80049c4:	40020040 	.word	0x40020040

080049c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
ldr   sp, =_estack      /* set stack pointer */
 80049c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80049cc:	f7fe fe00 	bl	80035d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80049d0:	480c      	ldr	r0, [pc, #48]	; (8004a04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80049d2:	490d      	ldr	r1, [pc, #52]	; (8004a08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80049d4:	4a0d      	ldr	r2, [pc, #52]	; (8004a0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80049d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049d8:	e002      	b.n	80049e0 <LoopCopyDataInit>

080049da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049de:	3304      	adds	r3, #4

080049e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049e4:	d3f9      	bcc.n	80049da <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049e6:	4a0a      	ldr	r2, [pc, #40]	; (8004a10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80049e8:	4c0a      	ldr	r4, [pc, #40]	; (8004a14 <LoopFillZerobss+0x22>)
  movs r3, #0
 80049ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049ec:	e001      	b.n	80049f2 <LoopFillZerobss>

080049ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049f0:	3204      	adds	r2, #4

080049f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049f4:	d3fb      	bcc.n	80049ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80049f6:	f00a fc2b 	bl	800f250 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80049fa:	f7fe f97f 	bl	8002cfc <main>
  bx  lr
 80049fe:	4770      	bx	lr
ldr   sp, =_estack      /* set stack pointer */
 8004a00:	24001a68 	.word	0x24001a68
  ldr r0, =_sdata
 8004a04:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004a08:	240003f0 	.word	0x240003f0
  ldr r2, =_sidata
 8004a0c:	08013b4c 	.word	0x08013b4c
  ldr r2, =_sbss
 8004a10:	240003f0 	.word	0x240003f0
  ldr r4, =_ebss
 8004a14:	24001468 	.word	0x24001468

08004a18 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a18:	e7fe      	b.n	8004a18 <ADC3_IRQHandler>
	...

08004a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a22:	2003      	movs	r0, #3
 8004a24:	f000 f968 	bl	8004cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a28:	f004 f9ea 	bl	8008e00 <HAL_RCC_GetSysClockFreq>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	4b15      	ldr	r3, [pc, #84]	; (8004a84 <HAL_Init+0x68>)
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	0a1b      	lsrs	r3, r3, #8
 8004a34:	f003 030f 	and.w	r3, r3, #15
 8004a38:	4913      	ldr	r1, [pc, #76]	; (8004a88 <HAL_Init+0x6c>)
 8004a3a:	5ccb      	ldrb	r3, [r1, r3]
 8004a3c:	f003 031f 	and.w	r3, r3, #31
 8004a40:	fa22 f303 	lsr.w	r3, r2, r3
 8004a44:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a46:	4b0f      	ldr	r3, [pc, #60]	; (8004a84 <HAL_Init+0x68>)
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	f003 030f 	and.w	r3, r3, #15
 8004a4e:	4a0e      	ldr	r2, [pc, #56]	; (8004a88 <HAL_Init+0x6c>)
 8004a50:	5cd3      	ldrb	r3, [r2, r3]
 8004a52:	f003 031f 	and.w	r3, r3, #31
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	fa22 f303 	lsr.w	r3, r2, r3
 8004a5c:	4a0b      	ldr	r2, [pc, #44]	; (8004a8c <HAL_Init+0x70>)
 8004a5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a60:	4a0b      	ldr	r2, [pc, #44]	; (8004a90 <HAL_Init+0x74>)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a66:	2000      	movs	r0, #0
 8004a68:	f000 f814 	bl	8004a94 <HAL_InitTick>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e002      	b.n	8004a7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004a76:	f7fe fbeb 	bl	8003250 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3708      	adds	r7, #8
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	58024400 	.word	0x58024400
 8004a88:	08011c7c 	.word	0x08011c7c
 8004a8c:	24000214 	.word	0x24000214
 8004a90:	24000210 	.word	0x24000210

08004a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004a9c:	4b15      	ldr	r3, [pc, #84]	; (8004af4 <HAL_InitTick+0x60>)
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e021      	b.n	8004aec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004aa8:	4b13      	ldr	r3, [pc, #76]	; (8004af8 <HAL_InitTick+0x64>)
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	4b11      	ldr	r3, [pc, #68]	; (8004af4 <HAL_InitTick+0x60>)
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f000 f94d 	bl	8004d5e <HAL_SYSTICK_Config>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e00e      	b.n	8004aec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b0f      	cmp	r3, #15
 8004ad2:	d80a      	bhi.n	8004aea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	6879      	ldr	r1, [r7, #4]
 8004ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8004adc:	f000 f917 	bl	8004d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ae0:	4a06      	ldr	r2, [pc, #24]	; (8004afc <HAL_InitTick+0x68>)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	e000      	b.n	8004aec <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3708      	adds	r7, #8
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	2400021c 	.word	0x2400021c
 8004af8:	24000210 	.word	0x24000210
 8004afc:	24000218 	.word	0x24000218

08004b00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004b04:	4b06      	ldr	r3, [pc, #24]	; (8004b20 <HAL_IncTick+0x20>)
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	461a      	mov	r2, r3
 8004b0a:	4b06      	ldr	r3, [pc, #24]	; (8004b24 <HAL_IncTick+0x24>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4413      	add	r3, r2
 8004b10:	4a04      	ldr	r2, [pc, #16]	; (8004b24 <HAL_IncTick+0x24>)
 8004b12:	6013      	str	r3, [r2, #0]
}
 8004b14:	bf00      	nop
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	2400021c 	.word	0x2400021c
 8004b24:	24001454 	.word	0x24001454

08004b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8004b2c:	4b03      	ldr	r3, [pc, #12]	; (8004b3c <HAL_GetTick+0x14>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	24001454 	.word	0x24001454

08004b40 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004b44:	4b03      	ldr	r3, [pc, #12]	; (8004b54 <HAL_GetREVID+0x14>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	0c1b      	lsrs	r3, r3, #16
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	5c001000 	.word	0x5c001000

08004b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b68:	4b0b      	ldr	r3, [pc, #44]	; (8004b98 <__NVIC_SetPriorityGrouping+0x40>)
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b74:	4013      	ands	r3, r2
 8004b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b80:	4b06      	ldr	r3, [pc, #24]	; (8004b9c <__NVIC_SetPriorityGrouping+0x44>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b86:	4a04      	ldr	r2, [pc, #16]	; (8004b98 <__NVIC_SetPriorityGrouping+0x40>)
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	60d3      	str	r3, [r2, #12]
}
 8004b8c:	bf00      	nop
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	e000ed00 	.word	0xe000ed00
 8004b9c:	05fa0000 	.word	0x05fa0000

08004ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ba4:	4b04      	ldr	r3, [pc, #16]	; (8004bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	0a1b      	lsrs	r3, r3, #8
 8004baa:	f003 0307 	and.w	r3, r3, #7
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	e000ed00 	.word	0xe000ed00

08004bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004bc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	db0b      	blt.n	8004be6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bce:	88fb      	ldrh	r3, [r7, #6]
 8004bd0:	f003 021f 	and.w	r2, r3, #31
 8004bd4:	4907      	ldr	r1, [pc, #28]	; (8004bf4 <__NVIC_EnableIRQ+0x38>)
 8004bd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bda:	095b      	lsrs	r3, r3, #5
 8004bdc:	2001      	movs	r0, #1
 8004bde:	fa00 f202 	lsl.w	r2, r0, r2
 8004be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	e000e100 	.word	0xe000e100

08004bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	4603      	mov	r3, r0
 8004c00:	6039      	str	r1, [r7, #0]
 8004c02:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004c04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	db0a      	blt.n	8004c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	490c      	ldr	r1, [pc, #48]	; (8004c44 <__NVIC_SetPriority+0x4c>)
 8004c12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c16:	0112      	lsls	r2, r2, #4
 8004c18:	b2d2      	uxtb	r2, r2
 8004c1a:	440b      	add	r3, r1
 8004c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c20:	e00a      	b.n	8004c38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	4908      	ldr	r1, [pc, #32]	; (8004c48 <__NVIC_SetPriority+0x50>)
 8004c28:	88fb      	ldrh	r3, [r7, #6]
 8004c2a:	f003 030f 	and.w	r3, r3, #15
 8004c2e:	3b04      	subs	r3, #4
 8004c30:	0112      	lsls	r2, r2, #4
 8004c32:	b2d2      	uxtb	r2, r2
 8004c34:	440b      	add	r3, r1
 8004c36:	761a      	strb	r2, [r3, #24]
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr
 8004c44:	e000e100 	.word	0xe000e100
 8004c48:	e000ed00 	.word	0xe000ed00

08004c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b089      	sub	sp, #36	; 0x24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	f1c3 0307 	rsb	r3, r3, #7
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	bf28      	it	cs
 8004c6a:	2304      	movcs	r3, #4
 8004c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	3304      	adds	r3, #4
 8004c72:	2b06      	cmp	r3, #6
 8004c74:	d902      	bls.n	8004c7c <NVIC_EncodePriority+0x30>
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	3b03      	subs	r3, #3
 8004c7a:	e000      	b.n	8004c7e <NVIC_EncodePriority+0x32>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c80:	f04f 32ff 	mov.w	r2, #4294967295
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8a:	43da      	mvns	r2, r3
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	401a      	ands	r2, r3
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c94:	f04f 31ff 	mov.w	r1, #4294967295
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c9e:	43d9      	mvns	r1, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ca4:	4313      	orrs	r3, r2
         );
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3724      	adds	r7, #36	; 0x24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
	...

08004cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cc4:	d301      	bcc.n	8004cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e00f      	b.n	8004cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cca:	4a0a      	ldr	r2, [pc, #40]	; (8004cf4 <SysTick_Config+0x40>)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cd2:	210f      	movs	r1, #15
 8004cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd8:	f7ff ff8e 	bl	8004bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cdc:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <SysTick_Config+0x40>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ce2:	4b04      	ldr	r3, [pc, #16]	; (8004cf4 <SysTick_Config+0x40>)
 8004ce4:	2207      	movs	r2, #7
 8004ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	e000e010 	.word	0xe000e010

08004cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7ff ff29 	bl	8004b58 <__NVIC_SetPriorityGrouping>
}
 8004d06:	bf00      	nop
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b086      	sub	sp, #24
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	4603      	mov	r3, r0
 8004d16:	60b9      	str	r1, [r7, #8]
 8004d18:	607a      	str	r2, [r7, #4]
 8004d1a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d1c:	f7ff ff40 	bl	8004ba0 <__NVIC_GetPriorityGrouping>
 8004d20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	68b9      	ldr	r1, [r7, #8]
 8004d26:	6978      	ldr	r0, [r7, #20]
 8004d28:	f7ff ff90 	bl	8004c4c <NVIC_EncodePriority>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d32:	4611      	mov	r1, r2
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7ff ff5f 	bl	8004bf8 <__NVIC_SetPriority>
}
 8004d3a:	bf00      	nop
 8004d3c:	3718      	adds	r7, #24
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b082      	sub	sp, #8
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	4603      	mov	r3, r0
 8004d4a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7ff ff33 	bl	8004bbc <__NVIC_EnableIRQ>
}
 8004d56:	bf00      	nop
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b082      	sub	sp, #8
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7ff ffa4 	bl	8004cb4 <SysTick_Config>
 8004d6c:	4603      	mov	r3, r0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8004d7a:	f000 f802 	bl	8004d82 <HAL_SYSTICK_Callback>
}
 8004d7e:	bf00      	nop
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8004d82:	b480      	push	{r7}
 8004d84:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8004d86:	bf00      	nop
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e054      	b.n	8004e4c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	7f5b      	ldrb	r3, [r3, #29]
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d105      	bne.n	8004db8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7fc fdf6 	bl	80019a4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	791b      	ldrb	r3, [r3, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10c      	bne.n	8004de0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a22      	ldr	r2, [pc, #136]	; (8004e54 <HAL_CRC_Init+0xc4>)
 8004dcc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 0218 	bic.w	r2, r2, #24
 8004ddc:	609a      	str	r2, [r3, #8]
 8004dde:	e00c      	b.n	8004dfa <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6899      	ldr	r1, [r3, #8]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	461a      	mov	r2, r3
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f948 	bl	8005080 <HAL_CRCEx_Polynomial_Set>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e028      	b.n	8004e4c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	795b      	ldrb	r3, [r3, #5]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d105      	bne.n	8004e0e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f04f 32ff 	mov.w	r2, #4294967295
 8004e0a:	611a      	str	r2, [r3, #16]
 8004e0c:	e004      	b.n	8004e18 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	6912      	ldr	r2, [r2, #16]
 8004e16:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	695a      	ldr	r2, [r3, #20]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	699a      	ldr	r2, [r3, #24]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	430a      	orrs	r2, r1
 8004e42:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3708      	adds	r7, #8
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	04c11db7 	.word	0x04c11db7

08004e58 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8004e64:	2300      	movs	r3, #0
 8004e66:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f042 0201 	orr.w	r2, r2, #1
 8004e7c:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	2b03      	cmp	r3, #3
 8004e84:	d006      	beq.n	8004e94 <HAL_CRC_Calculate+0x3c>
 8004e86:	2b03      	cmp	r3, #3
 8004e88:	d829      	bhi.n	8004ede <HAL_CRC_Calculate+0x86>
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d019      	beq.n	8004ec2 <HAL_CRC_Calculate+0x6a>
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d01e      	beq.n	8004ed0 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8004e92:	e024      	b.n	8004ede <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8004e94:	2300      	movs	r3, #0
 8004e96:	617b      	str	r3, [r7, #20]
 8004e98:	e00a      	b.n	8004eb0 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	441a      	add	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6812      	ldr	r2, [r2, #0]
 8004ea8:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	3301      	adds	r3, #1
 8004eae:	617b      	str	r3, [r7, #20]
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d3f0      	bcc.n	8004e9a <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	613b      	str	r3, [r7, #16]
      break;
 8004ec0:	e00e      	b.n	8004ee0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	68b9      	ldr	r1, [r7, #8]
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 f812 	bl	8004ef0 <CRC_Handle_8>
 8004ecc:	6138      	str	r0, [r7, #16]
      break;
 8004ece:	e007      	b.n	8004ee0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	68b9      	ldr	r1, [r7, #8]
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f000 f899 	bl	800500c <CRC_Handle_16>
 8004eda:	6138      	str	r0, [r7, #16]
      break;
 8004edc:	e000      	b.n	8004ee0 <HAL_CRC_Calculate+0x88>
      break;
 8004ede:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8004ee6:	693b      	ldr	r3, [r7, #16]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3718      	adds	r7, #24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b089      	sub	sp, #36	; 0x24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8004efc:	2300      	movs	r3, #0
 8004efe:	61fb      	str	r3, [r7, #28]
 8004f00:	e023      	b.n	8004f4a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	4413      	add	r3, r2
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	3301      	adds	r3, #1
 8004f14:	68b9      	ldr	r1, [r7, #8]
 8004f16:	440b      	add	r3, r1
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004f1c:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	3302      	adds	r3, #2
 8004f24:	68b9      	ldr	r1, [r7, #8]
 8004f26:	440b      	add	r3, r1
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8004f2c:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	3303      	adds	r3, #3
 8004f34:	68b9      	ldr	r1, [r7, #8]
 8004f36:	440b      	add	r3, r1
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8004f40:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004f42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	3301      	adds	r3, #1
 8004f48:	61fb      	str	r3, [r7, #28]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	089b      	lsrs	r3, r3, #2
 8004f4e:	69fa      	ldr	r2, [r7, #28]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d3d6      	bcc.n	8004f02 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f003 0303 	and.w	r3, r3, #3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d04d      	beq.n	8004ffa <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f003 0303 	and.w	r3, r3, #3
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d107      	bne.n	8004f78 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	4413      	add	r3, r2
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	6812      	ldr	r2, [r2, #0]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f003 0303 	and.w	r3, r3, #3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d116      	bne.n	8004fb0 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	4413      	add	r3, r2
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	021b      	lsls	r3, r3, #8
 8004f8e:	b21a      	sxth	r2, r3
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	3301      	adds	r3, #1
 8004f96:	68b9      	ldr	r1, [r7, #8]
 8004f98:	440b      	add	r3, r1
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	b21b      	sxth	r3, r3
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	b21b      	sxth	r3, r3
 8004fa2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	8b7a      	ldrh	r2, [r7, #26]
 8004fae:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f003 0303 	and.w	r3, r3, #3
 8004fb6:	2b03      	cmp	r3, #3
 8004fb8:	d11f      	bne.n	8004ffa <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	021b      	lsls	r3, r3, #8
 8004fc6:	b21a      	sxth	r2, r3
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	3301      	adds	r3, #1
 8004fce:	68b9      	ldr	r1, [r7, #8]
 8004fd0:	440b      	add	r3, r1
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	b21b      	sxth	r3, r3
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	b21b      	sxth	r3, r3
 8004fda:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	8b7a      	ldrh	r2, [r7, #26]
 8004fe6:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	3302      	adds	r3, #2
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	6812      	ldr	r2, [r2, #0]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3724      	adds	r7, #36	; 0x24
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800500c:	b480      	push	{r7}
 800500e:	b087      	sub	sp, #28
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8005018:	2300      	movs	r3, #0
 800501a:	617b      	str	r3, [r7, #20]
 800501c:	e013      	b.n	8005046 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	4413      	add	r3, r2
 8005026:	881b      	ldrh	r3, [r3, #0]
 8005028:	041a      	lsls	r2, r3, #16
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	3302      	adds	r3, #2
 8005030:	68b9      	ldr	r1, [r7, #8]
 8005032:	440b      	add	r3, r1
 8005034:	881b      	ldrh	r3, [r3, #0]
 8005036:	4619      	mov	r1, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	430a      	orrs	r2, r1
 800503e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	3301      	adds	r3, #1
 8005044:	617b      	str	r3, [r7, #20]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	085b      	lsrs	r3, r3, #1
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	429a      	cmp	r2, r3
 800504e:	d3e6      	bcc.n	800501e <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	d009      	beq.n	800506e <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	4413      	add	r3, r2
 8005068:	881a      	ldrh	r2, [r3, #0]
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
}
 8005074:	4618      	mov	r0, r3
 8005076:	371c      	adds	r7, #28
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800508c:	2300      	movs	r3, #0
 800508e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005090:	231f      	movs	r3, #31
 8005092:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005094:	bf00      	nop
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1e5a      	subs	r2, r3, #1
 800509a:	613a      	str	r2, [r7, #16]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d009      	beq.n	80050b4 <HAL_CRCEx_Polynomial_Set+0x34>
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	f003 031f 	and.w	r3, r3, #31
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	fa22 f303 	lsr.w	r3, r2, r3
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0f0      	beq.n	8005096 <HAL_CRCEx_Polynomial_Set+0x16>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b18      	cmp	r3, #24
 80050b8:	d846      	bhi.n	8005148 <HAL_CRCEx_Polynomial_Set+0xc8>
 80050ba:	a201      	add	r2, pc, #4	; (adr r2, 80050c0 <HAL_CRCEx_Polynomial_Set+0x40>)
 80050bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c0:	0800514f 	.word	0x0800514f
 80050c4:	08005149 	.word	0x08005149
 80050c8:	08005149 	.word	0x08005149
 80050cc:	08005149 	.word	0x08005149
 80050d0:	08005149 	.word	0x08005149
 80050d4:	08005149 	.word	0x08005149
 80050d8:	08005149 	.word	0x08005149
 80050dc:	08005149 	.word	0x08005149
 80050e0:	0800513d 	.word	0x0800513d
 80050e4:	08005149 	.word	0x08005149
 80050e8:	08005149 	.word	0x08005149
 80050ec:	08005149 	.word	0x08005149
 80050f0:	08005149 	.word	0x08005149
 80050f4:	08005149 	.word	0x08005149
 80050f8:	08005149 	.word	0x08005149
 80050fc:	08005149 	.word	0x08005149
 8005100:	08005131 	.word	0x08005131
 8005104:	08005149 	.word	0x08005149
 8005108:	08005149 	.word	0x08005149
 800510c:	08005149 	.word	0x08005149
 8005110:	08005149 	.word	0x08005149
 8005114:	08005149 	.word	0x08005149
 8005118:	08005149 	.word	0x08005149
 800511c:	08005149 	.word	0x08005149
 8005120:	08005125 	.word	0x08005125
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	2b06      	cmp	r3, #6
 8005128:	d913      	bls.n	8005152 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800512e:	e010      	b.n	8005152 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	2b07      	cmp	r3, #7
 8005134:	d90f      	bls.n	8005156 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800513a:	e00c      	b.n	8005156 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	2b0f      	cmp	r3, #15
 8005140:	d90b      	bls.n	800515a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005146:	e008      	b.n	800515a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	75fb      	strb	r3, [r7, #23]
      break;
 800514c:	e006      	b.n	800515c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800514e:	bf00      	nop
 8005150:	e004      	b.n	800515c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005152:	bf00      	nop
 8005154:	e002      	b.n	800515c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005156:	bf00      	nop
 8005158:	e000      	b.n	800515c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800515a:	bf00      	nop
  }
  if (status == HAL_OK)
 800515c:	7dfb      	ldrb	r3, [r7, #23]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10d      	bne.n	800517e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f023 0118 	bic.w	r1, r3, #24
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	430a      	orrs	r2, r1
 800517c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800517e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005180:	4618      	mov	r0, r3
 8005182:	371c      	adds	r7, #28
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005194:	f7ff fcc8 	bl	8004b28 <HAL_GetTick>
 8005198:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e316      	b.n	80057d2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a66      	ldr	r2, [pc, #408]	; (8005344 <HAL_DMA_Init+0x1b8>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d04a      	beq.n	8005244 <HAL_DMA_Init+0xb8>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a65      	ldr	r2, [pc, #404]	; (8005348 <HAL_DMA_Init+0x1bc>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d045      	beq.n	8005244 <HAL_DMA_Init+0xb8>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a63      	ldr	r2, [pc, #396]	; (800534c <HAL_DMA_Init+0x1c0>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d040      	beq.n	8005244 <HAL_DMA_Init+0xb8>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a62      	ldr	r2, [pc, #392]	; (8005350 <HAL_DMA_Init+0x1c4>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d03b      	beq.n	8005244 <HAL_DMA_Init+0xb8>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a60      	ldr	r2, [pc, #384]	; (8005354 <HAL_DMA_Init+0x1c8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d036      	beq.n	8005244 <HAL_DMA_Init+0xb8>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a5f      	ldr	r2, [pc, #380]	; (8005358 <HAL_DMA_Init+0x1cc>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d031      	beq.n	8005244 <HAL_DMA_Init+0xb8>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a5d      	ldr	r2, [pc, #372]	; (800535c <HAL_DMA_Init+0x1d0>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d02c      	beq.n	8005244 <HAL_DMA_Init+0xb8>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a5c      	ldr	r2, [pc, #368]	; (8005360 <HAL_DMA_Init+0x1d4>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d027      	beq.n	8005244 <HAL_DMA_Init+0xb8>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a5a      	ldr	r2, [pc, #360]	; (8005364 <HAL_DMA_Init+0x1d8>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d022      	beq.n	8005244 <HAL_DMA_Init+0xb8>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a59      	ldr	r2, [pc, #356]	; (8005368 <HAL_DMA_Init+0x1dc>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d01d      	beq.n	8005244 <HAL_DMA_Init+0xb8>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a57      	ldr	r2, [pc, #348]	; (800536c <HAL_DMA_Init+0x1e0>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d018      	beq.n	8005244 <HAL_DMA_Init+0xb8>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a56      	ldr	r2, [pc, #344]	; (8005370 <HAL_DMA_Init+0x1e4>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d013      	beq.n	8005244 <HAL_DMA_Init+0xb8>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a54      	ldr	r2, [pc, #336]	; (8005374 <HAL_DMA_Init+0x1e8>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d00e      	beq.n	8005244 <HAL_DMA_Init+0xb8>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a53      	ldr	r2, [pc, #332]	; (8005378 <HAL_DMA_Init+0x1ec>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d009      	beq.n	8005244 <HAL_DMA_Init+0xb8>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a51      	ldr	r2, [pc, #324]	; (800537c <HAL_DMA_Init+0x1f0>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d004      	beq.n	8005244 <HAL_DMA_Init+0xb8>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a50      	ldr	r2, [pc, #320]	; (8005380 <HAL_DMA_Init+0x1f4>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d101      	bne.n	8005248 <HAL_DMA_Init+0xbc>
 8005244:	2301      	movs	r3, #1
 8005246:	e000      	b.n	800524a <HAL_DMA_Init+0xbe>
 8005248:	2300      	movs	r3, #0
 800524a:	2b00      	cmp	r3, #0
 800524c:	f000 813b 	beq.w	80054c6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a37      	ldr	r2, [pc, #220]	; (8005344 <HAL_DMA_Init+0x1b8>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d04a      	beq.n	8005300 <HAL_DMA_Init+0x174>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a36      	ldr	r2, [pc, #216]	; (8005348 <HAL_DMA_Init+0x1bc>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d045      	beq.n	8005300 <HAL_DMA_Init+0x174>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a34      	ldr	r2, [pc, #208]	; (800534c <HAL_DMA_Init+0x1c0>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d040      	beq.n	8005300 <HAL_DMA_Init+0x174>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a33      	ldr	r2, [pc, #204]	; (8005350 <HAL_DMA_Init+0x1c4>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d03b      	beq.n	8005300 <HAL_DMA_Init+0x174>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a31      	ldr	r2, [pc, #196]	; (8005354 <HAL_DMA_Init+0x1c8>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d036      	beq.n	8005300 <HAL_DMA_Init+0x174>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a30      	ldr	r2, [pc, #192]	; (8005358 <HAL_DMA_Init+0x1cc>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d031      	beq.n	8005300 <HAL_DMA_Init+0x174>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a2e      	ldr	r2, [pc, #184]	; (800535c <HAL_DMA_Init+0x1d0>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d02c      	beq.n	8005300 <HAL_DMA_Init+0x174>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a2d      	ldr	r2, [pc, #180]	; (8005360 <HAL_DMA_Init+0x1d4>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d027      	beq.n	8005300 <HAL_DMA_Init+0x174>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a2b      	ldr	r2, [pc, #172]	; (8005364 <HAL_DMA_Init+0x1d8>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d022      	beq.n	8005300 <HAL_DMA_Init+0x174>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a2a      	ldr	r2, [pc, #168]	; (8005368 <HAL_DMA_Init+0x1dc>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d01d      	beq.n	8005300 <HAL_DMA_Init+0x174>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a28      	ldr	r2, [pc, #160]	; (800536c <HAL_DMA_Init+0x1e0>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d018      	beq.n	8005300 <HAL_DMA_Init+0x174>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a27      	ldr	r2, [pc, #156]	; (8005370 <HAL_DMA_Init+0x1e4>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d013      	beq.n	8005300 <HAL_DMA_Init+0x174>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a25      	ldr	r2, [pc, #148]	; (8005374 <HAL_DMA_Init+0x1e8>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d00e      	beq.n	8005300 <HAL_DMA_Init+0x174>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a24      	ldr	r2, [pc, #144]	; (8005378 <HAL_DMA_Init+0x1ec>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d009      	beq.n	8005300 <HAL_DMA_Init+0x174>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a22      	ldr	r2, [pc, #136]	; (800537c <HAL_DMA_Init+0x1f0>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d004      	beq.n	8005300 <HAL_DMA_Init+0x174>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a21      	ldr	r2, [pc, #132]	; (8005380 <HAL_DMA_Init+0x1f4>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d108      	bne.n	8005312 <HAL_DMA_Init+0x186>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f022 0201 	bic.w	r2, r2, #1
 800530e:	601a      	str	r2, [r3, #0]
 8005310:	e007      	b.n	8005322 <HAL_DMA_Init+0x196>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0201 	bic.w	r2, r2, #1
 8005320:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005322:	e02f      	b.n	8005384 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005324:	f7ff fc00 	bl	8004b28 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b05      	cmp	r3, #5
 8005330:	d928      	bls.n	8005384 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2220      	movs	r2, #32
 8005336:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2203      	movs	r2, #3
 800533c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e246      	b.n	80057d2 <HAL_DMA_Init+0x646>
 8005344:	40020010 	.word	0x40020010
 8005348:	40020028 	.word	0x40020028
 800534c:	40020040 	.word	0x40020040
 8005350:	40020058 	.word	0x40020058
 8005354:	40020070 	.word	0x40020070
 8005358:	40020088 	.word	0x40020088
 800535c:	400200a0 	.word	0x400200a0
 8005360:	400200b8 	.word	0x400200b8
 8005364:	40020410 	.word	0x40020410
 8005368:	40020428 	.word	0x40020428
 800536c:	40020440 	.word	0x40020440
 8005370:	40020458 	.word	0x40020458
 8005374:	40020470 	.word	0x40020470
 8005378:	40020488 	.word	0x40020488
 800537c:	400204a0 	.word	0x400204a0
 8005380:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1c8      	bne.n	8005324 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	4b83      	ldr	r3, [pc, #524]	; (80055ac <HAL_DMA_Init+0x420>)
 800539e:	4013      	ands	r3, r2
 80053a0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80053aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053c2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a1b      	ldr	r3, [r3, #32]
 80053c8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	2b04      	cmp	r3, #4
 80053d6:	d107      	bne.n	80053e8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e0:	4313      	orrs	r3, r2
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80053e8:	4b71      	ldr	r3, [pc, #452]	; (80055b0 <HAL_DMA_Init+0x424>)
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	4b71      	ldr	r3, [pc, #452]	; (80055b4 <HAL_DMA_Init+0x428>)
 80053ee:	4013      	ands	r3, r2
 80053f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053f4:	d328      	bcc.n	8005448 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	2b28      	cmp	r3, #40	; 0x28
 80053fc:	d903      	bls.n	8005406 <HAL_DMA_Init+0x27a>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	2b2e      	cmp	r3, #46	; 0x2e
 8005404:	d917      	bls.n	8005436 <HAL_DMA_Init+0x2aa>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	2b3e      	cmp	r3, #62	; 0x3e
 800540c:	d903      	bls.n	8005416 <HAL_DMA_Init+0x28a>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	2b42      	cmp	r3, #66	; 0x42
 8005414:	d90f      	bls.n	8005436 <HAL_DMA_Init+0x2aa>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2b46      	cmp	r3, #70	; 0x46
 800541c:	d903      	bls.n	8005426 <HAL_DMA_Init+0x29a>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2b48      	cmp	r3, #72	; 0x48
 8005424:	d907      	bls.n	8005436 <HAL_DMA_Init+0x2aa>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2b4e      	cmp	r3, #78	; 0x4e
 800542c:	d905      	bls.n	800543a <HAL_DMA_Init+0x2ae>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	2b52      	cmp	r3, #82	; 0x52
 8005434:	d801      	bhi.n	800543a <HAL_DMA_Init+0x2ae>
 8005436:	2301      	movs	r3, #1
 8005438:	e000      	b.n	800543c <HAL_DMA_Init+0x2b0>
 800543a:	2300      	movs	r3, #0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d003      	beq.n	8005448 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005446:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	f023 0307 	bic.w	r3, r3, #7
 800545e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	4313      	orrs	r3, r2
 8005468:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	2b04      	cmp	r3, #4
 8005470:	d117      	bne.n	80054a2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	4313      	orrs	r3, r2
 800547a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005480:	2b00      	cmp	r3, #0
 8005482:	d00e      	beq.n	80054a2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f002 fb31 	bl	8007aec <DMA_CheckFifoParam>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d008      	beq.n	80054a2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2240      	movs	r2, #64	; 0x40
 8005494:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e197      	b.n	80057d2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f002 fa6c 	bl	8007988 <DMA_CalcBaseAndBitshift>
 80054b0:	4603      	mov	r3, r0
 80054b2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b8:	f003 031f 	and.w	r3, r3, #31
 80054bc:	223f      	movs	r2, #63	; 0x3f
 80054be:	409a      	lsls	r2, r3
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	609a      	str	r2, [r3, #8]
 80054c4:	e0cd      	b.n	8005662 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a3b      	ldr	r2, [pc, #236]	; (80055b8 <HAL_DMA_Init+0x42c>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d022      	beq.n	8005516 <HAL_DMA_Init+0x38a>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a39      	ldr	r2, [pc, #228]	; (80055bc <HAL_DMA_Init+0x430>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d01d      	beq.n	8005516 <HAL_DMA_Init+0x38a>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a38      	ldr	r2, [pc, #224]	; (80055c0 <HAL_DMA_Init+0x434>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d018      	beq.n	8005516 <HAL_DMA_Init+0x38a>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a36      	ldr	r2, [pc, #216]	; (80055c4 <HAL_DMA_Init+0x438>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d013      	beq.n	8005516 <HAL_DMA_Init+0x38a>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a35      	ldr	r2, [pc, #212]	; (80055c8 <HAL_DMA_Init+0x43c>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d00e      	beq.n	8005516 <HAL_DMA_Init+0x38a>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a33      	ldr	r2, [pc, #204]	; (80055cc <HAL_DMA_Init+0x440>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d009      	beq.n	8005516 <HAL_DMA_Init+0x38a>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a32      	ldr	r2, [pc, #200]	; (80055d0 <HAL_DMA_Init+0x444>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d004      	beq.n	8005516 <HAL_DMA_Init+0x38a>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a30      	ldr	r2, [pc, #192]	; (80055d4 <HAL_DMA_Init+0x448>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d101      	bne.n	800551a <HAL_DMA_Init+0x38e>
 8005516:	2301      	movs	r3, #1
 8005518:	e000      	b.n	800551c <HAL_DMA_Init+0x390>
 800551a:	2300      	movs	r3, #0
 800551c:	2b00      	cmp	r3, #0
 800551e:	f000 8097 	beq.w	8005650 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a24      	ldr	r2, [pc, #144]	; (80055b8 <HAL_DMA_Init+0x42c>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d021      	beq.n	8005570 <HAL_DMA_Init+0x3e4>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a22      	ldr	r2, [pc, #136]	; (80055bc <HAL_DMA_Init+0x430>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d01c      	beq.n	8005570 <HAL_DMA_Init+0x3e4>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a21      	ldr	r2, [pc, #132]	; (80055c0 <HAL_DMA_Init+0x434>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d017      	beq.n	8005570 <HAL_DMA_Init+0x3e4>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a1f      	ldr	r2, [pc, #124]	; (80055c4 <HAL_DMA_Init+0x438>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d012      	beq.n	8005570 <HAL_DMA_Init+0x3e4>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a1e      	ldr	r2, [pc, #120]	; (80055c8 <HAL_DMA_Init+0x43c>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d00d      	beq.n	8005570 <HAL_DMA_Init+0x3e4>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a1c      	ldr	r2, [pc, #112]	; (80055cc <HAL_DMA_Init+0x440>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d008      	beq.n	8005570 <HAL_DMA_Init+0x3e4>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a1b      	ldr	r2, [pc, #108]	; (80055d0 <HAL_DMA_Init+0x444>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d003      	beq.n	8005570 <HAL_DMA_Init+0x3e4>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a19      	ldr	r2, [pc, #100]	; (80055d4 <HAL_DMA_Init+0x448>)
 800556e:	4293      	cmp	r3, r2
 8005570:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2202      	movs	r2, #2
 8005576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	4b12      	ldr	r3, [pc, #72]	; (80055d8 <HAL_DMA_Init+0x44c>)
 800558e:	4013      	ands	r3, r2
 8005590:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	2b40      	cmp	r3, #64	; 0x40
 8005598:	d020      	beq.n	80055dc <HAL_DMA_Init+0x450>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	2b80      	cmp	r3, #128	; 0x80
 80055a0:	d102      	bne.n	80055a8 <HAL_DMA_Init+0x41c>
 80055a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80055a6:	e01a      	b.n	80055de <HAL_DMA_Init+0x452>
 80055a8:	2300      	movs	r3, #0
 80055aa:	e018      	b.n	80055de <HAL_DMA_Init+0x452>
 80055ac:	fe10803f 	.word	0xfe10803f
 80055b0:	5c001000 	.word	0x5c001000
 80055b4:	ffff0000 	.word	0xffff0000
 80055b8:	58025408 	.word	0x58025408
 80055bc:	5802541c 	.word	0x5802541c
 80055c0:	58025430 	.word	0x58025430
 80055c4:	58025444 	.word	0x58025444
 80055c8:	58025458 	.word	0x58025458
 80055cc:	5802546c 	.word	0x5802546c
 80055d0:	58025480 	.word	0x58025480
 80055d4:	58025494 	.word	0x58025494
 80055d8:	fffe000f 	.word	0xfffe000f
 80055dc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	68d2      	ldr	r2, [r2, #12]
 80055e2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80055e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80055ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80055f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80055fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005604:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800560c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	4313      	orrs	r3, r2
 8005612:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	461a      	mov	r2, r3
 8005622:	4b6e      	ldr	r3, [pc, #440]	; (80057dc <HAL_DMA_Init+0x650>)
 8005624:	4413      	add	r3, r2
 8005626:	4a6e      	ldr	r2, [pc, #440]	; (80057e0 <HAL_DMA_Init+0x654>)
 8005628:	fba2 2303 	umull	r2, r3, r2, r3
 800562c:	091b      	lsrs	r3, r3, #4
 800562e:	009a      	lsls	r2, r3, #2
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f002 f9a7 	bl	8007988 <DMA_CalcBaseAndBitshift>
 800563a:	4603      	mov	r3, r0
 800563c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005642:	f003 031f 	and.w	r3, r3, #31
 8005646:	2201      	movs	r2, #1
 8005648:	409a      	lsls	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	605a      	str	r2, [r3, #4]
 800564e:	e008      	b.n	8005662 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2240      	movs	r2, #64	; 0x40
 8005654:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2203      	movs	r2, #3
 800565a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e0b7      	b.n	80057d2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a5f      	ldr	r2, [pc, #380]	; (80057e4 <HAL_DMA_Init+0x658>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d072      	beq.n	8005752 <HAL_DMA_Init+0x5c6>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a5d      	ldr	r2, [pc, #372]	; (80057e8 <HAL_DMA_Init+0x65c>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d06d      	beq.n	8005752 <HAL_DMA_Init+0x5c6>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a5c      	ldr	r2, [pc, #368]	; (80057ec <HAL_DMA_Init+0x660>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d068      	beq.n	8005752 <HAL_DMA_Init+0x5c6>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a5a      	ldr	r2, [pc, #360]	; (80057f0 <HAL_DMA_Init+0x664>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d063      	beq.n	8005752 <HAL_DMA_Init+0x5c6>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a59      	ldr	r2, [pc, #356]	; (80057f4 <HAL_DMA_Init+0x668>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d05e      	beq.n	8005752 <HAL_DMA_Init+0x5c6>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a57      	ldr	r2, [pc, #348]	; (80057f8 <HAL_DMA_Init+0x66c>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d059      	beq.n	8005752 <HAL_DMA_Init+0x5c6>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a56      	ldr	r2, [pc, #344]	; (80057fc <HAL_DMA_Init+0x670>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d054      	beq.n	8005752 <HAL_DMA_Init+0x5c6>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a54      	ldr	r2, [pc, #336]	; (8005800 <HAL_DMA_Init+0x674>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d04f      	beq.n	8005752 <HAL_DMA_Init+0x5c6>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a53      	ldr	r2, [pc, #332]	; (8005804 <HAL_DMA_Init+0x678>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d04a      	beq.n	8005752 <HAL_DMA_Init+0x5c6>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a51      	ldr	r2, [pc, #324]	; (8005808 <HAL_DMA_Init+0x67c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d045      	beq.n	8005752 <HAL_DMA_Init+0x5c6>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a50      	ldr	r2, [pc, #320]	; (800580c <HAL_DMA_Init+0x680>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d040      	beq.n	8005752 <HAL_DMA_Init+0x5c6>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a4e      	ldr	r2, [pc, #312]	; (8005810 <HAL_DMA_Init+0x684>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d03b      	beq.n	8005752 <HAL_DMA_Init+0x5c6>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a4d      	ldr	r2, [pc, #308]	; (8005814 <HAL_DMA_Init+0x688>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d036      	beq.n	8005752 <HAL_DMA_Init+0x5c6>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a4b      	ldr	r2, [pc, #300]	; (8005818 <HAL_DMA_Init+0x68c>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d031      	beq.n	8005752 <HAL_DMA_Init+0x5c6>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a4a      	ldr	r2, [pc, #296]	; (800581c <HAL_DMA_Init+0x690>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d02c      	beq.n	8005752 <HAL_DMA_Init+0x5c6>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a48      	ldr	r2, [pc, #288]	; (8005820 <HAL_DMA_Init+0x694>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d027      	beq.n	8005752 <HAL_DMA_Init+0x5c6>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a47      	ldr	r2, [pc, #284]	; (8005824 <HAL_DMA_Init+0x698>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d022      	beq.n	8005752 <HAL_DMA_Init+0x5c6>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a45      	ldr	r2, [pc, #276]	; (8005828 <HAL_DMA_Init+0x69c>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d01d      	beq.n	8005752 <HAL_DMA_Init+0x5c6>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a44      	ldr	r2, [pc, #272]	; (800582c <HAL_DMA_Init+0x6a0>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d018      	beq.n	8005752 <HAL_DMA_Init+0x5c6>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a42      	ldr	r2, [pc, #264]	; (8005830 <HAL_DMA_Init+0x6a4>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d013      	beq.n	8005752 <HAL_DMA_Init+0x5c6>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a41      	ldr	r2, [pc, #260]	; (8005834 <HAL_DMA_Init+0x6a8>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d00e      	beq.n	8005752 <HAL_DMA_Init+0x5c6>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a3f      	ldr	r2, [pc, #252]	; (8005838 <HAL_DMA_Init+0x6ac>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d009      	beq.n	8005752 <HAL_DMA_Init+0x5c6>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a3e      	ldr	r2, [pc, #248]	; (800583c <HAL_DMA_Init+0x6b0>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d004      	beq.n	8005752 <HAL_DMA_Init+0x5c6>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a3c      	ldr	r2, [pc, #240]	; (8005840 <HAL_DMA_Init+0x6b4>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d101      	bne.n	8005756 <HAL_DMA_Init+0x5ca>
 8005752:	2301      	movs	r3, #1
 8005754:	e000      	b.n	8005758 <HAL_DMA_Init+0x5cc>
 8005756:	2300      	movs	r3, #0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d032      	beq.n	80057c2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f002 fa41 	bl	8007be4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	2b80      	cmp	r3, #128	; 0x80
 8005768:	d102      	bne.n	8005770 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005778:	b2d2      	uxtb	r2, r2
 800577a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005784:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d010      	beq.n	80057b0 <HAL_DMA_Init+0x624>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2b08      	cmp	r3, #8
 8005794:	d80c      	bhi.n	80057b0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f002 fabe 	bl	8007d18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057a0:	2200      	movs	r2, #0
 80057a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80057ac:	605a      	str	r2, [r3, #4]
 80057ae:	e008      	b.n	80057c2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3718      	adds	r7, #24
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	a7fdabf8 	.word	0xa7fdabf8
 80057e0:	cccccccd 	.word	0xcccccccd
 80057e4:	40020010 	.word	0x40020010
 80057e8:	40020028 	.word	0x40020028
 80057ec:	40020040 	.word	0x40020040
 80057f0:	40020058 	.word	0x40020058
 80057f4:	40020070 	.word	0x40020070
 80057f8:	40020088 	.word	0x40020088
 80057fc:	400200a0 	.word	0x400200a0
 8005800:	400200b8 	.word	0x400200b8
 8005804:	40020410 	.word	0x40020410
 8005808:	40020428 	.word	0x40020428
 800580c:	40020440 	.word	0x40020440
 8005810:	40020458 	.word	0x40020458
 8005814:	40020470 	.word	0x40020470
 8005818:	40020488 	.word	0x40020488
 800581c:	400204a0 	.word	0x400204a0
 8005820:	400204b8 	.word	0x400204b8
 8005824:	58025408 	.word	0x58025408
 8005828:	5802541c 	.word	0x5802541c
 800582c:	58025430 	.word	0x58025430
 8005830:	58025444 	.word	0x58025444
 8005834:	58025458 	.word	0x58025458
 8005838:	5802546c 	.word	0x5802546c
 800583c:	58025480 	.word	0x58025480
 8005840:	58025494 	.word	0x58025494

08005844 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b086      	sub	sp, #24
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
 8005850:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005852:	2300      	movs	r3, #0
 8005854:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d101      	bne.n	8005860 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e226      	b.n	8005cae <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005866:	2b01      	cmp	r3, #1
 8005868:	d101      	bne.n	800586e <HAL_DMA_Start_IT+0x2a>
 800586a:	2302      	movs	r3, #2
 800586c:	e21f      	b.n	8005cae <HAL_DMA_Start_IT+0x46a>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b01      	cmp	r3, #1
 8005880:	f040 820a 	bne.w	8005c98 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a68      	ldr	r2, [pc, #416]	; (8005a38 <HAL_DMA_Start_IT+0x1f4>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d04a      	beq.n	8005932 <HAL_DMA_Start_IT+0xee>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a66      	ldr	r2, [pc, #408]	; (8005a3c <HAL_DMA_Start_IT+0x1f8>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d045      	beq.n	8005932 <HAL_DMA_Start_IT+0xee>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a65      	ldr	r2, [pc, #404]	; (8005a40 <HAL_DMA_Start_IT+0x1fc>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d040      	beq.n	8005932 <HAL_DMA_Start_IT+0xee>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a63      	ldr	r2, [pc, #396]	; (8005a44 <HAL_DMA_Start_IT+0x200>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d03b      	beq.n	8005932 <HAL_DMA_Start_IT+0xee>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a62      	ldr	r2, [pc, #392]	; (8005a48 <HAL_DMA_Start_IT+0x204>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d036      	beq.n	8005932 <HAL_DMA_Start_IT+0xee>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a60      	ldr	r2, [pc, #384]	; (8005a4c <HAL_DMA_Start_IT+0x208>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d031      	beq.n	8005932 <HAL_DMA_Start_IT+0xee>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a5f      	ldr	r2, [pc, #380]	; (8005a50 <HAL_DMA_Start_IT+0x20c>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d02c      	beq.n	8005932 <HAL_DMA_Start_IT+0xee>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a5d      	ldr	r2, [pc, #372]	; (8005a54 <HAL_DMA_Start_IT+0x210>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d027      	beq.n	8005932 <HAL_DMA_Start_IT+0xee>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a5c      	ldr	r2, [pc, #368]	; (8005a58 <HAL_DMA_Start_IT+0x214>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d022      	beq.n	8005932 <HAL_DMA_Start_IT+0xee>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a5a      	ldr	r2, [pc, #360]	; (8005a5c <HAL_DMA_Start_IT+0x218>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d01d      	beq.n	8005932 <HAL_DMA_Start_IT+0xee>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a59      	ldr	r2, [pc, #356]	; (8005a60 <HAL_DMA_Start_IT+0x21c>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d018      	beq.n	8005932 <HAL_DMA_Start_IT+0xee>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a57      	ldr	r2, [pc, #348]	; (8005a64 <HAL_DMA_Start_IT+0x220>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d013      	beq.n	8005932 <HAL_DMA_Start_IT+0xee>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a56      	ldr	r2, [pc, #344]	; (8005a68 <HAL_DMA_Start_IT+0x224>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d00e      	beq.n	8005932 <HAL_DMA_Start_IT+0xee>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a54      	ldr	r2, [pc, #336]	; (8005a6c <HAL_DMA_Start_IT+0x228>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d009      	beq.n	8005932 <HAL_DMA_Start_IT+0xee>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a53      	ldr	r2, [pc, #332]	; (8005a70 <HAL_DMA_Start_IT+0x22c>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d004      	beq.n	8005932 <HAL_DMA_Start_IT+0xee>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a51      	ldr	r2, [pc, #324]	; (8005a74 <HAL_DMA_Start_IT+0x230>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d108      	bne.n	8005944 <HAL_DMA_Start_IT+0x100>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 0201 	bic.w	r2, r2, #1
 8005940:	601a      	str	r2, [r3, #0]
 8005942:	e007      	b.n	8005954 <HAL_DMA_Start_IT+0x110>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f022 0201 	bic.w	r2, r2, #1
 8005952:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	68b9      	ldr	r1, [r7, #8]
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f001 fe68 	bl	8007630 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a34      	ldr	r2, [pc, #208]	; (8005a38 <HAL_DMA_Start_IT+0x1f4>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d04a      	beq.n	8005a00 <HAL_DMA_Start_IT+0x1bc>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a33      	ldr	r2, [pc, #204]	; (8005a3c <HAL_DMA_Start_IT+0x1f8>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d045      	beq.n	8005a00 <HAL_DMA_Start_IT+0x1bc>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a31      	ldr	r2, [pc, #196]	; (8005a40 <HAL_DMA_Start_IT+0x1fc>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d040      	beq.n	8005a00 <HAL_DMA_Start_IT+0x1bc>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a30      	ldr	r2, [pc, #192]	; (8005a44 <HAL_DMA_Start_IT+0x200>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d03b      	beq.n	8005a00 <HAL_DMA_Start_IT+0x1bc>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a2e      	ldr	r2, [pc, #184]	; (8005a48 <HAL_DMA_Start_IT+0x204>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d036      	beq.n	8005a00 <HAL_DMA_Start_IT+0x1bc>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a2d      	ldr	r2, [pc, #180]	; (8005a4c <HAL_DMA_Start_IT+0x208>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d031      	beq.n	8005a00 <HAL_DMA_Start_IT+0x1bc>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a2b      	ldr	r2, [pc, #172]	; (8005a50 <HAL_DMA_Start_IT+0x20c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d02c      	beq.n	8005a00 <HAL_DMA_Start_IT+0x1bc>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a2a      	ldr	r2, [pc, #168]	; (8005a54 <HAL_DMA_Start_IT+0x210>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d027      	beq.n	8005a00 <HAL_DMA_Start_IT+0x1bc>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a28      	ldr	r2, [pc, #160]	; (8005a58 <HAL_DMA_Start_IT+0x214>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d022      	beq.n	8005a00 <HAL_DMA_Start_IT+0x1bc>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a27      	ldr	r2, [pc, #156]	; (8005a5c <HAL_DMA_Start_IT+0x218>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d01d      	beq.n	8005a00 <HAL_DMA_Start_IT+0x1bc>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a25      	ldr	r2, [pc, #148]	; (8005a60 <HAL_DMA_Start_IT+0x21c>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d018      	beq.n	8005a00 <HAL_DMA_Start_IT+0x1bc>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a24      	ldr	r2, [pc, #144]	; (8005a64 <HAL_DMA_Start_IT+0x220>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d013      	beq.n	8005a00 <HAL_DMA_Start_IT+0x1bc>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a22      	ldr	r2, [pc, #136]	; (8005a68 <HAL_DMA_Start_IT+0x224>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d00e      	beq.n	8005a00 <HAL_DMA_Start_IT+0x1bc>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a21      	ldr	r2, [pc, #132]	; (8005a6c <HAL_DMA_Start_IT+0x228>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d009      	beq.n	8005a00 <HAL_DMA_Start_IT+0x1bc>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a1f      	ldr	r2, [pc, #124]	; (8005a70 <HAL_DMA_Start_IT+0x22c>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d004      	beq.n	8005a00 <HAL_DMA_Start_IT+0x1bc>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a1e      	ldr	r2, [pc, #120]	; (8005a74 <HAL_DMA_Start_IT+0x230>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d101      	bne.n	8005a04 <HAL_DMA_Start_IT+0x1c0>
 8005a00:	2301      	movs	r3, #1
 8005a02:	e000      	b.n	8005a06 <HAL_DMA_Start_IT+0x1c2>
 8005a04:	2300      	movs	r3, #0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d036      	beq.n	8005a78 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f023 021e 	bic.w	r2, r3, #30
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f042 0216 	orr.w	r2, r2, #22
 8005a1c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d03e      	beq.n	8005aa4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f042 0208 	orr.w	r2, r2, #8
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	e035      	b.n	8005aa4 <HAL_DMA_Start_IT+0x260>
 8005a38:	40020010 	.word	0x40020010
 8005a3c:	40020028 	.word	0x40020028
 8005a40:	40020040 	.word	0x40020040
 8005a44:	40020058 	.word	0x40020058
 8005a48:	40020070 	.word	0x40020070
 8005a4c:	40020088 	.word	0x40020088
 8005a50:	400200a0 	.word	0x400200a0
 8005a54:	400200b8 	.word	0x400200b8
 8005a58:	40020410 	.word	0x40020410
 8005a5c:	40020428 	.word	0x40020428
 8005a60:	40020440 	.word	0x40020440
 8005a64:	40020458 	.word	0x40020458
 8005a68:	40020470 	.word	0x40020470
 8005a6c:	40020488 	.word	0x40020488
 8005a70:	400204a0 	.word	0x400204a0
 8005a74:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f023 020e 	bic.w	r2, r3, #14
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f042 020a 	orr.w	r2, r2, #10
 8005a8a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d007      	beq.n	8005aa4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f042 0204 	orr.w	r2, r2, #4
 8005aa2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a83      	ldr	r2, [pc, #524]	; (8005cb8 <HAL_DMA_Start_IT+0x474>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d072      	beq.n	8005b94 <HAL_DMA_Start_IT+0x350>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a82      	ldr	r2, [pc, #520]	; (8005cbc <HAL_DMA_Start_IT+0x478>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d06d      	beq.n	8005b94 <HAL_DMA_Start_IT+0x350>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a80      	ldr	r2, [pc, #512]	; (8005cc0 <HAL_DMA_Start_IT+0x47c>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d068      	beq.n	8005b94 <HAL_DMA_Start_IT+0x350>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a7f      	ldr	r2, [pc, #508]	; (8005cc4 <HAL_DMA_Start_IT+0x480>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d063      	beq.n	8005b94 <HAL_DMA_Start_IT+0x350>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a7d      	ldr	r2, [pc, #500]	; (8005cc8 <HAL_DMA_Start_IT+0x484>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d05e      	beq.n	8005b94 <HAL_DMA_Start_IT+0x350>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a7c      	ldr	r2, [pc, #496]	; (8005ccc <HAL_DMA_Start_IT+0x488>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d059      	beq.n	8005b94 <HAL_DMA_Start_IT+0x350>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a7a      	ldr	r2, [pc, #488]	; (8005cd0 <HAL_DMA_Start_IT+0x48c>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d054      	beq.n	8005b94 <HAL_DMA_Start_IT+0x350>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a79      	ldr	r2, [pc, #484]	; (8005cd4 <HAL_DMA_Start_IT+0x490>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d04f      	beq.n	8005b94 <HAL_DMA_Start_IT+0x350>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a77      	ldr	r2, [pc, #476]	; (8005cd8 <HAL_DMA_Start_IT+0x494>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d04a      	beq.n	8005b94 <HAL_DMA_Start_IT+0x350>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a76      	ldr	r2, [pc, #472]	; (8005cdc <HAL_DMA_Start_IT+0x498>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d045      	beq.n	8005b94 <HAL_DMA_Start_IT+0x350>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a74      	ldr	r2, [pc, #464]	; (8005ce0 <HAL_DMA_Start_IT+0x49c>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d040      	beq.n	8005b94 <HAL_DMA_Start_IT+0x350>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a73      	ldr	r2, [pc, #460]	; (8005ce4 <HAL_DMA_Start_IT+0x4a0>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d03b      	beq.n	8005b94 <HAL_DMA_Start_IT+0x350>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a71      	ldr	r2, [pc, #452]	; (8005ce8 <HAL_DMA_Start_IT+0x4a4>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d036      	beq.n	8005b94 <HAL_DMA_Start_IT+0x350>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a70      	ldr	r2, [pc, #448]	; (8005cec <HAL_DMA_Start_IT+0x4a8>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d031      	beq.n	8005b94 <HAL_DMA_Start_IT+0x350>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a6e      	ldr	r2, [pc, #440]	; (8005cf0 <HAL_DMA_Start_IT+0x4ac>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d02c      	beq.n	8005b94 <HAL_DMA_Start_IT+0x350>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a6d      	ldr	r2, [pc, #436]	; (8005cf4 <HAL_DMA_Start_IT+0x4b0>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d027      	beq.n	8005b94 <HAL_DMA_Start_IT+0x350>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a6b      	ldr	r2, [pc, #428]	; (8005cf8 <HAL_DMA_Start_IT+0x4b4>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d022      	beq.n	8005b94 <HAL_DMA_Start_IT+0x350>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a6a      	ldr	r2, [pc, #424]	; (8005cfc <HAL_DMA_Start_IT+0x4b8>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d01d      	beq.n	8005b94 <HAL_DMA_Start_IT+0x350>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a68      	ldr	r2, [pc, #416]	; (8005d00 <HAL_DMA_Start_IT+0x4bc>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d018      	beq.n	8005b94 <HAL_DMA_Start_IT+0x350>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a67      	ldr	r2, [pc, #412]	; (8005d04 <HAL_DMA_Start_IT+0x4c0>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d013      	beq.n	8005b94 <HAL_DMA_Start_IT+0x350>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a65      	ldr	r2, [pc, #404]	; (8005d08 <HAL_DMA_Start_IT+0x4c4>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d00e      	beq.n	8005b94 <HAL_DMA_Start_IT+0x350>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a64      	ldr	r2, [pc, #400]	; (8005d0c <HAL_DMA_Start_IT+0x4c8>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d009      	beq.n	8005b94 <HAL_DMA_Start_IT+0x350>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a62      	ldr	r2, [pc, #392]	; (8005d10 <HAL_DMA_Start_IT+0x4cc>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d004      	beq.n	8005b94 <HAL_DMA_Start_IT+0x350>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a61      	ldr	r2, [pc, #388]	; (8005d14 <HAL_DMA_Start_IT+0x4d0>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d101      	bne.n	8005b98 <HAL_DMA_Start_IT+0x354>
 8005b94:	2301      	movs	r3, #1
 8005b96:	e000      	b.n	8005b9a <HAL_DMA_Start_IT+0x356>
 8005b98:	2300      	movs	r3, #0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d01a      	beq.n	8005bd4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d007      	beq.n	8005bbc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bba:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d007      	beq.n	8005bd4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bd2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a37      	ldr	r2, [pc, #220]	; (8005cb8 <HAL_DMA_Start_IT+0x474>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d04a      	beq.n	8005c74 <HAL_DMA_Start_IT+0x430>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a36      	ldr	r2, [pc, #216]	; (8005cbc <HAL_DMA_Start_IT+0x478>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d045      	beq.n	8005c74 <HAL_DMA_Start_IT+0x430>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a34      	ldr	r2, [pc, #208]	; (8005cc0 <HAL_DMA_Start_IT+0x47c>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d040      	beq.n	8005c74 <HAL_DMA_Start_IT+0x430>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a33      	ldr	r2, [pc, #204]	; (8005cc4 <HAL_DMA_Start_IT+0x480>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d03b      	beq.n	8005c74 <HAL_DMA_Start_IT+0x430>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a31      	ldr	r2, [pc, #196]	; (8005cc8 <HAL_DMA_Start_IT+0x484>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d036      	beq.n	8005c74 <HAL_DMA_Start_IT+0x430>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a30      	ldr	r2, [pc, #192]	; (8005ccc <HAL_DMA_Start_IT+0x488>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d031      	beq.n	8005c74 <HAL_DMA_Start_IT+0x430>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a2e      	ldr	r2, [pc, #184]	; (8005cd0 <HAL_DMA_Start_IT+0x48c>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d02c      	beq.n	8005c74 <HAL_DMA_Start_IT+0x430>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a2d      	ldr	r2, [pc, #180]	; (8005cd4 <HAL_DMA_Start_IT+0x490>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d027      	beq.n	8005c74 <HAL_DMA_Start_IT+0x430>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a2b      	ldr	r2, [pc, #172]	; (8005cd8 <HAL_DMA_Start_IT+0x494>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d022      	beq.n	8005c74 <HAL_DMA_Start_IT+0x430>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a2a      	ldr	r2, [pc, #168]	; (8005cdc <HAL_DMA_Start_IT+0x498>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d01d      	beq.n	8005c74 <HAL_DMA_Start_IT+0x430>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a28      	ldr	r2, [pc, #160]	; (8005ce0 <HAL_DMA_Start_IT+0x49c>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d018      	beq.n	8005c74 <HAL_DMA_Start_IT+0x430>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a27      	ldr	r2, [pc, #156]	; (8005ce4 <HAL_DMA_Start_IT+0x4a0>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d013      	beq.n	8005c74 <HAL_DMA_Start_IT+0x430>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a25      	ldr	r2, [pc, #148]	; (8005ce8 <HAL_DMA_Start_IT+0x4a4>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d00e      	beq.n	8005c74 <HAL_DMA_Start_IT+0x430>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a24      	ldr	r2, [pc, #144]	; (8005cec <HAL_DMA_Start_IT+0x4a8>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d009      	beq.n	8005c74 <HAL_DMA_Start_IT+0x430>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a22      	ldr	r2, [pc, #136]	; (8005cf0 <HAL_DMA_Start_IT+0x4ac>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d004      	beq.n	8005c74 <HAL_DMA_Start_IT+0x430>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a21      	ldr	r2, [pc, #132]	; (8005cf4 <HAL_DMA_Start_IT+0x4b0>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d108      	bne.n	8005c86 <HAL_DMA_Start_IT+0x442>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f042 0201 	orr.w	r2, r2, #1
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	e012      	b.n	8005cac <HAL_DMA_Start_IT+0x468>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f042 0201 	orr.w	r2, r2, #1
 8005c94:	601a      	str	r2, [r3, #0]
 8005c96:	e009      	b.n	8005cac <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c9e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3718      	adds	r7, #24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	40020010 	.word	0x40020010
 8005cbc:	40020028 	.word	0x40020028
 8005cc0:	40020040 	.word	0x40020040
 8005cc4:	40020058 	.word	0x40020058
 8005cc8:	40020070 	.word	0x40020070
 8005ccc:	40020088 	.word	0x40020088
 8005cd0:	400200a0 	.word	0x400200a0
 8005cd4:	400200b8 	.word	0x400200b8
 8005cd8:	40020410 	.word	0x40020410
 8005cdc:	40020428 	.word	0x40020428
 8005ce0:	40020440 	.word	0x40020440
 8005ce4:	40020458 	.word	0x40020458
 8005ce8:	40020470 	.word	0x40020470
 8005cec:	40020488 	.word	0x40020488
 8005cf0:	400204a0 	.word	0x400204a0
 8005cf4:	400204b8 	.word	0x400204b8
 8005cf8:	58025408 	.word	0x58025408
 8005cfc:	5802541c 	.word	0x5802541c
 8005d00:	58025430 	.word	0x58025430
 8005d04:	58025444 	.word	0x58025444
 8005d08:	58025458 	.word	0x58025458
 8005d0c:	5802546c 	.word	0x5802546c
 8005d10:	58025480 	.word	0x58025480
 8005d14:	58025494 	.word	0x58025494

08005d18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005d20:	f7fe ff02 	bl	8004b28 <HAL_GetTick>
 8005d24:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e2dc      	b.n	80062ea <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d008      	beq.n	8005d4e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2280      	movs	r2, #128	; 0x80
 8005d40:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e2cd      	b.n	80062ea <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a76      	ldr	r2, [pc, #472]	; (8005f2c <HAL_DMA_Abort+0x214>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d04a      	beq.n	8005dee <HAL_DMA_Abort+0xd6>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a74      	ldr	r2, [pc, #464]	; (8005f30 <HAL_DMA_Abort+0x218>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d045      	beq.n	8005dee <HAL_DMA_Abort+0xd6>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a73      	ldr	r2, [pc, #460]	; (8005f34 <HAL_DMA_Abort+0x21c>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d040      	beq.n	8005dee <HAL_DMA_Abort+0xd6>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a71      	ldr	r2, [pc, #452]	; (8005f38 <HAL_DMA_Abort+0x220>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d03b      	beq.n	8005dee <HAL_DMA_Abort+0xd6>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a70      	ldr	r2, [pc, #448]	; (8005f3c <HAL_DMA_Abort+0x224>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d036      	beq.n	8005dee <HAL_DMA_Abort+0xd6>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a6e      	ldr	r2, [pc, #440]	; (8005f40 <HAL_DMA_Abort+0x228>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d031      	beq.n	8005dee <HAL_DMA_Abort+0xd6>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a6d      	ldr	r2, [pc, #436]	; (8005f44 <HAL_DMA_Abort+0x22c>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d02c      	beq.n	8005dee <HAL_DMA_Abort+0xd6>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a6b      	ldr	r2, [pc, #428]	; (8005f48 <HAL_DMA_Abort+0x230>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d027      	beq.n	8005dee <HAL_DMA_Abort+0xd6>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a6a      	ldr	r2, [pc, #424]	; (8005f4c <HAL_DMA_Abort+0x234>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d022      	beq.n	8005dee <HAL_DMA_Abort+0xd6>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a68      	ldr	r2, [pc, #416]	; (8005f50 <HAL_DMA_Abort+0x238>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d01d      	beq.n	8005dee <HAL_DMA_Abort+0xd6>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a67      	ldr	r2, [pc, #412]	; (8005f54 <HAL_DMA_Abort+0x23c>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d018      	beq.n	8005dee <HAL_DMA_Abort+0xd6>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a65      	ldr	r2, [pc, #404]	; (8005f58 <HAL_DMA_Abort+0x240>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d013      	beq.n	8005dee <HAL_DMA_Abort+0xd6>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a64      	ldr	r2, [pc, #400]	; (8005f5c <HAL_DMA_Abort+0x244>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d00e      	beq.n	8005dee <HAL_DMA_Abort+0xd6>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a62      	ldr	r2, [pc, #392]	; (8005f60 <HAL_DMA_Abort+0x248>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d009      	beq.n	8005dee <HAL_DMA_Abort+0xd6>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a61      	ldr	r2, [pc, #388]	; (8005f64 <HAL_DMA_Abort+0x24c>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d004      	beq.n	8005dee <HAL_DMA_Abort+0xd6>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a5f      	ldr	r2, [pc, #380]	; (8005f68 <HAL_DMA_Abort+0x250>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d101      	bne.n	8005df2 <HAL_DMA_Abort+0xda>
 8005dee:	2301      	movs	r3, #1
 8005df0:	e000      	b.n	8005df4 <HAL_DMA_Abort+0xdc>
 8005df2:	2300      	movs	r3, #0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d013      	beq.n	8005e20 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f022 021e 	bic.w	r2, r2, #30
 8005e06:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	695a      	ldr	r2, [r3, #20]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e16:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	617b      	str	r3, [r7, #20]
 8005e1e:	e00a      	b.n	8005e36 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f022 020e 	bic.w	r2, r2, #14
 8005e2e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a3c      	ldr	r2, [pc, #240]	; (8005f2c <HAL_DMA_Abort+0x214>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d072      	beq.n	8005f26 <HAL_DMA_Abort+0x20e>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a3a      	ldr	r2, [pc, #232]	; (8005f30 <HAL_DMA_Abort+0x218>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d06d      	beq.n	8005f26 <HAL_DMA_Abort+0x20e>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a39      	ldr	r2, [pc, #228]	; (8005f34 <HAL_DMA_Abort+0x21c>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d068      	beq.n	8005f26 <HAL_DMA_Abort+0x20e>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a37      	ldr	r2, [pc, #220]	; (8005f38 <HAL_DMA_Abort+0x220>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d063      	beq.n	8005f26 <HAL_DMA_Abort+0x20e>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a36      	ldr	r2, [pc, #216]	; (8005f3c <HAL_DMA_Abort+0x224>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d05e      	beq.n	8005f26 <HAL_DMA_Abort+0x20e>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a34      	ldr	r2, [pc, #208]	; (8005f40 <HAL_DMA_Abort+0x228>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d059      	beq.n	8005f26 <HAL_DMA_Abort+0x20e>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a33      	ldr	r2, [pc, #204]	; (8005f44 <HAL_DMA_Abort+0x22c>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d054      	beq.n	8005f26 <HAL_DMA_Abort+0x20e>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a31      	ldr	r2, [pc, #196]	; (8005f48 <HAL_DMA_Abort+0x230>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d04f      	beq.n	8005f26 <HAL_DMA_Abort+0x20e>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a30      	ldr	r2, [pc, #192]	; (8005f4c <HAL_DMA_Abort+0x234>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d04a      	beq.n	8005f26 <HAL_DMA_Abort+0x20e>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a2e      	ldr	r2, [pc, #184]	; (8005f50 <HAL_DMA_Abort+0x238>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d045      	beq.n	8005f26 <HAL_DMA_Abort+0x20e>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a2d      	ldr	r2, [pc, #180]	; (8005f54 <HAL_DMA_Abort+0x23c>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d040      	beq.n	8005f26 <HAL_DMA_Abort+0x20e>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a2b      	ldr	r2, [pc, #172]	; (8005f58 <HAL_DMA_Abort+0x240>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d03b      	beq.n	8005f26 <HAL_DMA_Abort+0x20e>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a2a      	ldr	r2, [pc, #168]	; (8005f5c <HAL_DMA_Abort+0x244>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d036      	beq.n	8005f26 <HAL_DMA_Abort+0x20e>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a28      	ldr	r2, [pc, #160]	; (8005f60 <HAL_DMA_Abort+0x248>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d031      	beq.n	8005f26 <HAL_DMA_Abort+0x20e>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a27      	ldr	r2, [pc, #156]	; (8005f64 <HAL_DMA_Abort+0x24c>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d02c      	beq.n	8005f26 <HAL_DMA_Abort+0x20e>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a25      	ldr	r2, [pc, #148]	; (8005f68 <HAL_DMA_Abort+0x250>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d027      	beq.n	8005f26 <HAL_DMA_Abort+0x20e>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a24      	ldr	r2, [pc, #144]	; (8005f6c <HAL_DMA_Abort+0x254>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d022      	beq.n	8005f26 <HAL_DMA_Abort+0x20e>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a22      	ldr	r2, [pc, #136]	; (8005f70 <HAL_DMA_Abort+0x258>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d01d      	beq.n	8005f26 <HAL_DMA_Abort+0x20e>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a21      	ldr	r2, [pc, #132]	; (8005f74 <HAL_DMA_Abort+0x25c>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d018      	beq.n	8005f26 <HAL_DMA_Abort+0x20e>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a1f      	ldr	r2, [pc, #124]	; (8005f78 <HAL_DMA_Abort+0x260>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d013      	beq.n	8005f26 <HAL_DMA_Abort+0x20e>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a1e      	ldr	r2, [pc, #120]	; (8005f7c <HAL_DMA_Abort+0x264>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d00e      	beq.n	8005f26 <HAL_DMA_Abort+0x20e>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a1c      	ldr	r2, [pc, #112]	; (8005f80 <HAL_DMA_Abort+0x268>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d009      	beq.n	8005f26 <HAL_DMA_Abort+0x20e>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a1b      	ldr	r2, [pc, #108]	; (8005f84 <HAL_DMA_Abort+0x26c>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d004      	beq.n	8005f26 <HAL_DMA_Abort+0x20e>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a19      	ldr	r2, [pc, #100]	; (8005f88 <HAL_DMA_Abort+0x270>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d132      	bne.n	8005f8c <HAL_DMA_Abort+0x274>
 8005f26:	2301      	movs	r3, #1
 8005f28:	e031      	b.n	8005f8e <HAL_DMA_Abort+0x276>
 8005f2a:	bf00      	nop
 8005f2c:	40020010 	.word	0x40020010
 8005f30:	40020028 	.word	0x40020028
 8005f34:	40020040 	.word	0x40020040
 8005f38:	40020058 	.word	0x40020058
 8005f3c:	40020070 	.word	0x40020070
 8005f40:	40020088 	.word	0x40020088
 8005f44:	400200a0 	.word	0x400200a0
 8005f48:	400200b8 	.word	0x400200b8
 8005f4c:	40020410 	.word	0x40020410
 8005f50:	40020428 	.word	0x40020428
 8005f54:	40020440 	.word	0x40020440
 8005f58:	40020458 	.word	0x40020458
 8005f5c:	40020470 	.word	0x40020470
 8005f60:	40020488 	.word	0x40020488
 8005f64:	400204a0 	.word	0x400204a0
 8005f68:	400204b8 	.word	0x400204b8
 8005f6c:	58025408 	.word	0x58025408
 8005f70:	5802541c 	.word	0x5802541c
 8005f74:	58025430 	.word	0x58025430
 8005f78:	58025444 	.word	0x58025444
 8005f7c:	58025458 	.word	0x58025458
 8005f80:	5802546c 	.word	0x5802546c
 8005f84:	58025480 	.word	0x58025480
 8005f88:	58025494 	.word	0x58025494
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d007      	beq.n	8005fa2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fa0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a6d      	ldr	r2, [pc, #436]	; (800615c <HAL_DMA_Abort+0x444>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d04a      	beq.n	8006042 <HAL_DMA_Abort+0x32a>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a6b      	ldr	r2, [pc, #428]	; (8006160 <HAL_DMA_Abort+0x448>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d045      	beq.n	8006042 <HAL_DMA_Abort+0x32a>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a6a      	ldr	r2, [pc, #424]	; (8006164 <HAL_DMA_Abort+0x44c>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d040      	beq.n	8006042 <HAL_DMA_Abort+0x32a>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a68      	ldr	r2, [pc, #416]	; (8006168 <HAL_DMA_Abort+0x450>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d03b      	beq.n	8006042 <HAL_DMA_Abort+0x32a>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a67      	ldr	r2, [pc, #412]	; (800616c <HAL_DMA_Abort+0x454>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d036      	beq.n	8006042 <HAL_DMA_Abort+0x32a>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a65      	ldr	r2, [pc, #404]	; (8006170 <HAL_DMA_Abort+0x458>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d031      	beq.n	8006042 <HAL_DMA_Abort+0x32a>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a64      	ldr	r2, [pc, #400]	; (8006174 <HAL_DMA_Abort+0x45c>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d02c      	beq.n	8006042 <HAL_DMA_Abort+0x32a>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a62      	ldr	r2, [pc, #392]	; (8006178 <HAL_DMA_Abort+0x460>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d027      	beq.n	8006042 <HAL_DMA_Abort+0x32a>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a61      	ldr	r2, [pc, #388]	; (800617c <HAL_DMA_Abort+0x464>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d022      	beq.n	8006042 <HAL_DMA_Abort+0x32a>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a5f      	ldr	r2, [pc, #380]	; (8006180 <HAL_DMA_Abort+0x468>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d01d      	beq.n	8006042 <HAL_DMA_Abort+0x32a>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a5e      	ldr	r2, [pc, #376]	; (8006184 <HAL_DMA_Abort+0x46c>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d018      	beq.n	8006042 <HAL_DMA_Abort+0x32a>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a5c      	ldr	r2, [pc, #368]	; (8006188 <HAL_DMA_Abort+0x470>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d013      	beq.n	8006042 <HAL_DMA_Abort+0x32a>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a5b      	ldr	r2, [pc, #364]	; (800618c <HAL_DMA_Abort+0x474>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d00e      	beq.n	8006042 <HAL_DMA_Abort+0x32a>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a59      	ldr	r2, [pc, #356]	; (8006190 <HAL_DMA_Abort+0x478>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d009      	beq.n	8006042 <HAL_DMA_Abort+0x32a>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a58      	ldr	r2, [pc, #352]	; (8006194 <HAL_DMA_Abort+0x47c>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d004      	beq.n	8006042 <HAL_DMA_Abort+0x32a>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a56      	ldr	r2, [pc, #344]	; (8006198 <HAL_DMA_Abort+0x480>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d108      	bne.n	8006054 <HAL_DMA_Abort+0x33c>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f022 0201 	bic.w	r2, r2, #1
 8006050:	601a      	str	r2, [r3, #0]
 8006052:	e007      	b.n	8006064 <HAL_DMA_Abort+0x34c>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 0201 	bic.w	r2, r2, #1
 8006062:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006064:	e013      	b.n	800608e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006066:	f7fe fd5f 	bl	8004b28 <HAL_GetTick>
 800606a:	4602      	mov	r2, r0
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	2b05      	cmp	r3, #5
 8006072:	d90c      	bls.n	800608e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2220      	movs	r2, #32
 8006078:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2203      	movs	r2, #3
 800607e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e12d      	b.n	80062ea <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1e5      	bne.n	8006066 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a2f      	ldr	r2, [pc, #188]	; (800615c <HAL_DMA_Abort+0x444>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d04a      	beq.n	800613a <HAL_DMA_Abort+0x422>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a2d      	ldr	r2, [pc, #180]	; (8006160 <HAL_DMA_Abort+0x448>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d045      	beq.n	800613a <HAL_DMA_Abort+0x422>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a2c      	ldr	r2, [pc, #176]	; (8006164 <HAL_DMA_Abort+0x44c>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d040      	beq.n	800613a <HAL_DMA_Abort+0x422>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a2a      	ldr	r2, [pc, #168]	; (8006168 <HAL_DMA_Abort+0x450>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d03b      	beq.n	800613a <HAL_DMA_Abort+0x422>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a29      	ldr	r2, [pc, #164]	; (800616c <HAL_DMA_Abort+0x454>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d036      	beq.n	800613a <HAL_DMA_Abort+0x422>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a27      	ldr	r2, [pc, #156]	; (8006170 <HAL_DMA_Abort+0x458>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d031      	beq.n	800613a <HAL_DMA_Abort+0x422>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a26      	ldr	r2, [pc, #152]	; (8006174 <HAL_DMA_Abort+0x45c>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d02c      	beq.n	800613a <HAL_DMA_Abort+0x422>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a24      	ldr	r2, [pc, #144]	; (8006178 <HAL_DMA_Abort+0x460>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d027      	beq.n	800613a <HAL_DMA_Abort+0x422>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a23      	ldr	r2, [pc, #140]	; (800617c <HAL_DMA_Abort+0x464>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d022      	beq.n	800613a <HAL_DMA_Abort+0x422>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a21      	ldr	r2, [pc, #132]	; (8006180 <HAL_DMA_Abort+0x468>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d01d      	beq.n	800613a <HAL_DMA_Abort+0x422>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a20      	ldr	r2, [pc, #128]	; (8006184 <HAL_DMA_Abort+0x46c>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d018      	beq.n	800613a <HAL_DMA_Abort+0x422>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a1e      	ldr	r2, [pc, #120]	; (8006188 <HAL_DMA_Abort+0x470>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d013      	beq.n	800613a <HAL_DMA_Abort+0x422>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a1d      	ldr	r2, [pc, #116]	; (800618c <HAL_DMA_Abort+0x474>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d00e      	beq.n	800613a <HAL_DMA_Abort+0x422>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a1b      	ldr	r2, [pc, #108]	; (8006190 <HAL_DMA_Abort+0x478>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d009      	beq.n	800613a <HAL_DMA_Abort+0x422>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a1a      	ldr	r2, [pc, #104]	; (8006194 <HAL_DMA_Abort+0x47c>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d004      	beq.n	800613a <HAL_DMA_Abort+0x422>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a18      	ldr	r2, [pc, #96]	; (8006198 <HAL_DMA_Abort+0x480>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d101      	bne.n	800613e <HAL_DMA_Abort+0x426>
 800613a:	2301      	movs	r3, #1
 800613c:	e000      	b.n	8006140 <HAL_DMA_Abort+0x428>
 800613e:	2300      	movs	r3, #0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d02b      	beq.n	800619c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006148:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800614e:	f003 031f 	and.w	r3, r3, #31
 8006152:	223f      	movs	r2, #63	; 0x3f
 8006154:	409a      	lsls	r2, r3
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	609a      	str	r2, [r3, #8]
 800615a:	e02a      	b.n	80061b2 <HAL_DMA_Abort+0x49a>
 800615c:	40020010 	.word	0x40020010
 8006160:	40020028 	.word	0x40020028
 8006164:	40020040 	.word	0x40020040
 8006168:	40020058 	.word	0x40020058
 800616c:	40020070 	.word	0x40020070
 8006170:	40020088 	.word	0x40020088
 8006174:	400200a0 	.word	0x400200a0
 8006178:	400200b8 	.word	0x400200b8
 800617c:	40020410 	.word	0x40020410
 8006180:	40020428 	.word	0x40020428
 8006184:	40020440 	.word	0x40020440
 8006188:	40020458 	.word	0x40020458
 800618c:	40020470 	.word	0x40020470
 8006190:	40020488 	.word	0x40020488
 8006194:	400204a0 	.word	0x400204a0
 8006198:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061a0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061a6:	f003 031f 	and.w	r3, r3, #31
 80061aa:	2201      	movs	r2, #1
 80061ac:	409a      	lsls	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a4f      	ldr	r2, [pc, #316]	; (80062f4 <HAL_DMA_Abort+0x5dc>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d072      	beq.n	80062a2 <HAL_DMA_Abort+0x58a>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a4d      	ldr	r2, [pc, #308]	; (80062f8 <HAL_DMA_Abort+0x5e0>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d06d      	beq.n	80062a2 <HAL_DMA_Abort+0x58a>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a4c      	ldr	r2, [pc, #304]	; (80062fc <HAL_DMA_Abort+0x5e4>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d068      	beq.n	80062a2 <HAL_DMA_Abort+0x58a>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a4a      	ldr	r2, [pc, #296]	; (8006300 <HAL_DMA_Abort+0x5e8>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d063      	beq.n	80062a2 <HAL_DMA_Abort+0x58a>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a49      	ldr	r2, [pc, #292]	; (8006304 <HAL_DMA_Abort+0x5ec>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d05e      	beq.n	80062a2 <HAL_DMA_Abort+0x58a>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a47      	ldr	r2, [pc, #284]	; (8006308 <HAL_DMA_Abort+0x5f0>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d059      	beq.n	80062a2 <HAL_DMA_Abort+0x58a>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a46      	ldr	r2, [pc, #280]	; (800630c <HAL_DMA_Abort+0x5f4>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d054      	beq.n	80062a2 <HAL_DMA_Abort+0x58a>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a44      	ldr	r2, [pc, #272]	; (8006310 <HAL_DMA_Abort+0x5f8>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d04f      	beq.n	80062a2 <HAL_DMA_Abort+0x58a>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a43      	ldr	r2, [pc, #268]	; (8006314 <HAL_DMA_Abort+0x5fc>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d04a      	beq.n	80062a2 <HAL_DMA_Abort+0x58a>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a41      	ldr	r2, [pc, #260]	; (8006318 <HAL_DMA_Abort+0x600>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d045      	beq.n	80062a2 <HAL_DMA_Abort+0x58a>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a40      	ldr	r2, [pc, #256]	; (800631c <HAL_DMA_Abort+0x604>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d040      	beq.n	80062a2 <HAL_DMA_Abort+0x58a>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a3e      	ldr	r2, [pc, #248]	; (8006320 <HAL_DMA_Abort+0x608>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d03b      	beq.n	80062a2 <HAL_DMA_Abort+0x58a>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a3d      	ldr	r2, [pc, #244]	; (8006324 <HAL_DMA_Abort+0x60c>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d036      	beq.n	80062a2 <HAL_DMA_Abort+0x58a>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a3b      	ldr	r2, [pc, #236]	; (8006328 <HAL_DMA_Abort+0x610>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d031      	beq.n	80062a2 <HAL_DMA_Abort+0x58a>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a3a      	ldr	r2, [pc, #232]	; (800632c <HAL_DMA_Abort+0x614>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d02c      	beq.n	80062a2 <HAL_DMA_Abort+0x58a>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a38      	ldr	r2, [pc, #224]	; (8006330 <HAL_DMA_Abort+0x618>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d027      	beq.n	80062a2 <HAL_DMA_Abort+0x58a>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a37      	ldr	r2, [pc, #220]	; (8006334 <HAL_DMA_Abort+0x61c>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d022      	beq.n	80062a2 <HAL_DMA_Abort+0x58a>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a35      	ldr	r2, [pc, #212]	; (8006338 <HAL_DMA_Abort+0x620>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d01d      	beq.n	80062a2 <HAL_DMA_Abort+0x58a>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a34      	ldr	r2, [pc, #208]	; (800633c <HAL_DMA_Abort+0x624>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d018      	beq.n	80062a2 <HAL_DMA_Abort+0x58a>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a32      	ldr	r2, [pc, #200]	; (8006340 <HAL_DMA_Abort+0x628>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d013      	beq.n	80062a2 <HAL_DMA_Abort+0x58a>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a31      	ldr	r2, [pc, #196]	; (8006344 <HAL_DMA_Abort+0x62c>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d00e      	beq.n	80062a2 <HAL_DMA_Abort+0x58a>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a2f      	ldr	r2, [pc, #188]	; (8006348 <HAL_DMA_Abort+0x630>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d009      	beq.n	80062a2 <HAL_DMA_Abort+0x58a>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a2e      	ldr	r2, [pc, #184]	; (800634c <HAL_DMA_Abort+0x634>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d004      	beq.n	80062a2 <HAL_DMA_Abort+0x58a>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a2c      	ldr	r2, [pc, #176]	; (8006350 <HAL_DMA_Abort+0x638>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d101      	bne.n	80062a6 <HAL_DMA_Abort+0x58e>
 80062a2:	2301      	movs	r3, #1
 80062a4:	e000      	b.n	80062a8 <HAL_DMA_Abort+0x590>
 80062a6:	2300      	movs	r3, #0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d015      	beq.n	80062d8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80062b4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00c      	beq.n	80062d8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062cc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80062d6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3718      	adds	r7, #24
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	40020010 	.word	0x40020010
 80062f8:	40020028 	.word	0x40020028
 80062fc:	40020040 	.word	0x40020040
 8006300:	40020058 	.word	0x40020058
 8006304:	40020070 	.word	0x40020070
 8006308:	40020088 	.word	0x40020088
 800630c:	400200a0 	.word	0x400200a0
 8006310:	400200b8 	.word	0x400200b8
 8006314:	40020410 	.word	0x40020410
 8006318:	40020428 	.word	0x40020428
 800631c:	40020440 	.word	0x40020440
 8006320:	40020458 	.word	0x40020458
 8006324:	40020470 	.word	0x40020470
 8006328:	40020488 	.word	0x40020488
 800632c:	400204a0 	.word	0x400204a0
 8006330:	400204b8 	.word	0x400204b8
 8006334:	58025408 	.word	0x58025408
 8006338:	5802541c 	.word	0x5802541c
 800633c:	58025430 	.word	0x58025430
 8006340:	58025444 	.word	0x58025444
 8006344:	58025458 	.word	0x58025458
 8006348:	5802546c 	.word	0x5802546c
 800634c:	58025480 	.word	0x58025480
 8006350:	58025494 	.word	0x58025494

08006354 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e205      	b.n	8006772 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b02      	cmp	r3, #2
 8006370:	d004      	beq.n	800637c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2280      	movs	r2, #128	; 0x80
 8006376:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e1fa      	b.n	8006772 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a8c      	ldr	r2, [pc, #560]	; (80065b4 <HAL_DMA_Abort_IT+0x260>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d04a      	beq.n	800641c <HAL_DMA_Abort_IT+0xc8>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a8b      	ldr	r2, [pc, #556]	; (80065b8 <HAL_DMA_Abort_IT+0x264>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d045      	beq.n	800641c <HAL_DMA_Abort_IT+0xc8>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a89      	ldr	r2, [pc, #548]	; (80065bc <HAL_DMA_Abort_IT+0x268>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d040      	beq.n	800641c <HAL_DMA_Abort_IT+0xc8>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a88      	ldr	r2, [pc, #544]	; (80065c0 <HAL_DMA_Abort_IT+0x26c>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d03b      	beq.n	800641c <HAL_DMA_Abort_IT+0xc8>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a86      	ldr	r2, [pc, #536]	; (80065c4 <HAL_DMA_Abort_IT+0x270>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d036      	beq.n	800641c <HAL_DMA_Abort_IT+0xc8>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a85      	ldr	r2, [pc, #532]	; (80065c8 <HAL_DMA_Abort_IT+0x274>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d031      	beq.n	800641c <HAL_DMA_Abort_IT+0xc8>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a83      	ldr	r2, [pc, #524]	; (80065cc <HAL_DMA_Abort_IT+0x278>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d02c      	beq.n	800641c <HAL_DMA_Abort_IT+0xc8>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a82      	ldr	r2, [pc, #520]	; (80065d0 <HAL_DMA_Abort_IT+0x27c>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d027      	beq.n	800641c <HAL_DMA_Abort_IT+0xc8>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a80      	ldr	r2, [pc, #512]	; (80065d4 <HAL_DMA_Abort_IT+0x280>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d022      	beq.n	800641c <HAL_DMA_Abort_IT+0xc8>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a7f      	ldr	r2, [pc, #508]	; (80065d8 <HAL_DMA_Abort_IT+0x284>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d01d      	beq.n	800641c <HAL_DMA_Abort_IT+0xc8>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a7d      	ldr	r2, [pc, #500]	; (80065dc <HAL_DMA_Abort_IT+0x288>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d018      	beq.n	800641c <HAL_DMA_Abort_IT+0xc8>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a7c      	ldr	r2, [pc, #496]	; (80065e0 <HAL_DMA_Abort_IT+0x28c>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d013      	beq.n	800641c <HAL_DMA_Abort_IT+0xc8>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a7a      	ldr	r2, [pc, #488]	; (80065e4 <HAL_DMA_Abort_IT+0x290>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d00e      	beq.n	800641c <HAL_DMA_Abort_IT+0xc8>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a79      	ldr	r2, [pc, #484]	; (80065e8 <HAL_DMA_Abort_IT+0x294>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d009      	beq.n	800641c <HAL_DMA_Abort_IT+0xc8>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a77      	ldr	r2, [pc, #476]	; (80065ec <HAL_DMA_Abort_IT+0x298>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d004      	beq.n	800641c <HAL_DMA_Abort_IT+0xc8>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a76      	ldr	r2, [pc, #472]	; (80065f0 <HAL_DMA_Abort_IT+0x29c>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d101      	bne.n	8006420 <HAL_DMA_Abort_IT+0xcc>
 800641c:	2301      	movs	r3, #1
 800641e:	e000      	b.n	8006422 <HAL_DMA_Abort_IT+0xce>
 8006420:	2300      	movs	r3, #0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d065      	beq.n	80064f2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2204      	movs	r2, #4
 800642a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a60      	ldr	r2, [pc, #384]	; (80065b4 <HAL_DMA_Abort_IT+0x260>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d04a      	beq.n	80064ce <HAL_DMA_Abort_IT+0x17a>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a5e      	ldr	r2, [pc, #376]	; (80065b8 <HAL_DMA_Abort_IT+0x264>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d045      	beq.n	80064ce <HAL_DMA_Abort_IT+0x17a>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a5d      	ldr	r2, [pc, #372]	; (80065bc <HAL_DMA_Abort_IT+0x268>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d040      	beq.n	80064ce <HAL_DMA_Abort_IT+0x17a>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a5b      	ldr	r2, [pc, #364]	; (80065c0 <HAL_DMA_Abort_IT+0x26c>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d03b      	beq.n	80064ce <HAL_DMA_Abort_IT+0x17a>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a5a      	ldr	r2, [pc, #360]	; (80065c4 <HAL_DMA_Abort_IT+0x270>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d036      	beq.n	80064ce <HAL_DMA_Abort_IT+0x17a>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a58      	ldr	r2, [pc, #352]	; (80065c8 <HAL_DMA_Abort_IT+0x274>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d031      	beq.n	80064ce <HAL_DMA_Abort_IT+0x17a>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a57      	ldr	r2, [pc, #348]	; (80065cc <HAL_DMA_Abort_IT+0x278>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d02c      	beq.n	80064ce <HAL_DMA_Abort_IT+0x17a>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a55      	ldr	r2, [pc, #340]	; (80065d0 <HAL_DMA_Abort_IT+0x27c>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d027      	beq.n	80064ce <HAL_DMA_Abort_IT+0x17a>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a54      	ldr	r2, [pc, #336]	; (80065d4 <HAL_DMA_Abort_IT+0x280>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d022      	beq.n	80064ce <HAL_DMA_Abort_IT+0x17a>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a52      	ldr	r2, [pc, #328]	; (80065d8 <HAL_DMA_Abort_IT+0x284>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d01d      	beq.n	80064ce <HAL_DMA_Abort_IT+0x17a>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a51      	ldr	r2, [pc, #324]	; (80065dc <HAL_DMA_Abort_IT+0x288>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d018      	beq.n	80064ce <HAL_DMA_Abort_IT+0x17a>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a4f      	ldr	r2, [pc, #316]	; (80065e0 <HAL_DMA_Abort_IT+0x28c>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d013      	beq.n	80064ce <HAL_DMA_Abort_IT+0x17a>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a4e      	ldr	r2, [pc, #312]	; (80065e4 <HAL_DMA_Abort_IT+0x290>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d00e      	beq.n	80064ce <HAL_DMA_Abort_IT+0x17a>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a4c      	ldr	r2, [pc, #304]	; (80065e8 <HAL_DMA_Abort_IT+0x294>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d009      	beq.n	80064ce <HAL_DMA_Abort_IT+0x17a>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a4b      	ldr	r2, [pc, #300]	; (80065ec <HAL_DMA_Abort_IT+0x298>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d004      	beq.n	80064ce <HAL_DMA_Abort_IT+0x17a>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a49      	ldr	r2, [pc, #292]	; (80065f0 <HAL_DMA_Abort_IT+0x29c>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d108      	bne.n	80064e0 <HAL_DMA_Abort_IT+0x18c>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f022 0201 	bic.w	r2, r2, #1
 80064dc:	601a      	str	r2, [r3, #0]
 80064de:	e147      	b.n	8006770 <HAL_DMA_Abort_IT+0x41c>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f022 0201 	bic.w	r2, r2, #1
 80064ee:	601a      	str	r2, [r3, #0]
 80064f0:	e13e      	b.n	8006770 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f022 020e 	bic.w	r2, r2, #14
 8006500:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a2b      	ldr	r2, [pc, #172]	; (80065b4 <HAL_DMA_Abort_IT+0x260>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d04a      	beq.n	80065a2 <HAL_DMA_Abort_IT+0x24e>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a29      	ldr	r2, [pc, #164]	; (80065b8 <HAL_DMA_Abort_IT+0x264>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d045      	beq.n	80065a2 <HAL_DMA_Abort_IT+0x24e>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a28      	ldr	r2, [pc, #160]	; (80065bc <HAL_DMA_Abort_IT+0x268>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d040      	beq.n	80065a2 <HAL_DMA_Abort_IT+0x24e>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a26      	ldr	r2, [pc, #152]	; (80065c0 <HAL_DMA_Abort_IT+0x26c>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d03b      	beq.n	80065a2 <HAL_DMA_Abort_IT+0x24e>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a25      	ldr	r2, [pc, #148]	; (80065c4 <HAL_DMA_Abort_IT+0x270>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d036      	beq.n	80065a2 <HAL_DMA_Abort_IT+0x24e>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a23      	ldr	r2, [pc, #140]	; (80065c8 <HAL_DMA_Abort_IT+0x274>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d031      	beq.n	80065a2 <HAL_DMA_Abort_IT+0x24e>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a22      	ldr	r2, [pc, #136]	; (80065cc <HAL_DMA_Abort_IT+0x278>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d02c      	beq.n	80065a2 <HAL_DMA_Abort_IT+0x24e>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a20      	ldr	r2, [pc, #128]	; (80065d0 <HAL_DMA_Abort_IT+0x27c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d027      	beq.n	80065a2 <HAL_DMA_Abort_IT+0x24e>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a1f      	ldr	r2, [pc, #124]	; (80065d4 <HAL_DMA_Abort_IT+0x280>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d022      	beq.n	80065a2 <HAL_DMA_Abort_IT+0x24e>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a1d      	ldr	r2, [pc, #116]	; (80065d8 <HAL_DMA_Abort_IT+0x284>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d01d      	beq.n	80065a2 <HAL_DMA_Abort_IT+0x24e>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a1c      	ldr	r2, [pc, #112]	; (80065dc <HAL_DMA_Abort_IT+0x288>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d018      	beq.n	80065a2 <HAL_DMA_Abort_IT+0x24e>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a1a      	ldr	r2, [pc, #104]	; (80065e0 <HAL_DMA_Abort_IT+0x28c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d013      	beq.n	80065a2 <HAL_DMA_Abort_IT+0x24e>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a19      	ldr	r2, [pc, #100]	; (80065e4 <HAL_DMA_Abort_IT+0x290>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d00e      	beq.n	80065a2 <HAL_DMA_Abort_IT+0x24e>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a17      	ldr	r2, [pc, #92]	; (80065e8 <HAL_DMA_Abort_IT+0x294>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d009      	beq.n	80065a2 <HAL_DMA_Abort_IT+0x24e>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a16      	ldr	r2, [pc, #88]	; (80065ec <HAL_DMA_Abort_IT+0x298>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d004      	beq.n	80065a2 <HAL_DMA_Abort_IT+0x24e>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a14      	ldr	r2, [pc, #80]	; (80065f0 <HAL_DMA_Abort_IT+0x29c>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d128      	bne.n	80065f4 <HAL_DMA_Abort_IT+0x2a0>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f022 0201 	bic.w	r2, r2, #1
 80065b0:	601a      	str	r2, [r3, #0]
 80065b2:	e027      	b.n	8006604 <HAL_DMA_Abort_IT+0x2b0>
 80065b4:	40020010 	.word	0x40020010
 80065b8:	40020028 	.word	0x40020028
 80065bc:	40020040 	.word	0x40020040
 80065c0:	40020058 	.word	0x40020058
 80065c4:	40020070 	.word	0x40020070
 80065c8:	40020088 	.word	0x40020088
 80065cc:	400200a0 	.word	0x400200a0
 80065d0:	400200b8 	.word	0x400200b8
 80065d4:	40020410 	.word	0x40020410
 80065d8:	40020428 	.word	0x40020428
 80065dc:	40020440 	.word	0x40020440
 80065e0:	40020458 	.word	0x40020458
 80065e4:	40020470 	.word	0x40020470
 80065e8:	40020488 	.word	0x40020488
 80065ec:	400204a0 	.word	0x400204a0
 80065f0:	400204b8 	.word	0x400204b8
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f022 0201 	bic.w	r2, r2, #1
 8006602:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a5c      	ldr	r2, [pc, #368]	; (800677c <HAL_DMA_Abort_IT+0x428>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d072      	beq.n	80066f4 <HAL_DMA_Abort_IT+0x3a0>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a5b      	ldr	r2, [pc, #364]	; (8006780 <HAL_DMA_Abort_IT+0x42c>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d06d      	beq.n	80066f4 <HAL_DMA_Abort_IT+0x3a0>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a59      	ldr	r2, [pc, #356]	; (8006784 <HAL_DMA_Abort_IT+0x430>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d068      	beq.n	80066f4 <HAL_DMA_Abort_IT+0x3a0>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a58      	ldr	r2, [pc, #352]	; (8006788 <HAL_DMA_Abort_IT+0x434>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d063      	beq.n	80066f4 <HAL_DMA_Abort_IT+0x3a0>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a56      	ldr	r2, [pc, #344]	; (800678c <HAL_DMA_Abort_IT+0x438>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d05e      	beq.n	80066f4 <HAL_DMA_Abort_IT+0x3a0>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a55      	ldr	r2, [pc, #340]	; (8006790 <HAL_DMA_Abort_IT+0x43c>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d059      	beq.n	80066f4 <HAL_DMA_Abort_IT+0x3a0>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a53      	ldr	r2, [pc, #332]	; (8006794 <HAL_DMA_Abort_IT+0x440>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d054      	beq.n	80066f4 <HAL_DMA_Abort_IT+0x3a0>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a52      	ldr	r2, [pc, #328]	; (8006798 <HAL_DMA_Abort_IT+0x444>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d04f      	beq.n	80066f4 <HAL_DMA_Abort_IT+0x3a0>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a50      	ldr	r2, [pc, #320]	; (800679c <HAL_DMA_Abort_IT+0x448>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d04a      	beq.n	80066f4 <HAL_DMA_Abort_IT+0x3a0>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a4f      	ldr	r2, [pc, #316]	; (80067a0 <HAL_DMA_Abort_IT+0x44c>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d045      	beq.n	80066f4 <HAL_DMA_Abort_IT+0x3a0>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a4d      	ldr	r2, [pc, #308]	; (80067a4 <HAL_DMA_Abort_IT+0x450>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d040      	beq.n	80066f4 <HAL_DMA_Abort_IT+0x3a0>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a4c      	ldr	r2, [pc, #304]	; (80067a8 <HAL_DMA_Abort_IT+0x454>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d03b      	beq.n	80066f4 <HAL_DMA_Abort_IT+0x3a0>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a4a      	ldr	r2, [pc, #296]	; (80067ac <HAL_DMA_Abort_IT+0x458>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d036      	beq.n	80066f4 <HAL_DMA_Abort_IT+0x3a0>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a49      	ldr	r2, [pc, #292]	; (80067b0 <HAL_DMA_Abort_IT+0x45c>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d031      	beq.n	80066f4 <HAL_DMA_Abort_IT+0x3a0>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a47      	ldr	r2, [pc, #284]	; (80067b4 <HAL_DMA_Abort_IT+0x460>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d02c      	beq.n	80066f4 <HAL_DMA_Abort_IT+0x3a0>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a46      	ldr	r2, [pc, #280]	; (80067b8 <HAL_DMA_Abort_IT+0x464>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d027      	beq.n	80066f4 <HAL_DMA_Abort_IT+0x3a0>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a44      	ldr	r2, [pc, #272]	; (80067bc <HAL_DMA_Abort_IT+0x468>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d022      	beq.n	80066f4 <HAL_DMA_Abort_IT+0x3a0>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a43      	ldr	r2, [pc, #268]	; (80067c0 <HAL_DMA_Abort_IT+0x46c>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d01d      	beq.n	80066f4 <HAL_DMA_Abort_IT+0x3a0>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a41      	ldr	r2, [pc, #260]	; (80067c4 <HAL_DMA_Abort_IT+0x470>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d018      	beq.n	80066f4 <HAL_DMA_Abort_IT+0x3a0>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a40      	ldr	r2, [pc, #256]	; (80067c8 <HAL_DMA_Abort_IT+0x474>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d013      	beq.n	80066f4 <HAL_DMA_Abort_IT+0x3a0>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a3e      	ldr	r2, [pc, #248]	; (80067cc <HAL_DMA_Abort_IT+0x478>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d00e      	beq.n	80066f4 <HAL_DMA_Abort_IT+0x3a0>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a3d      	ldr	r2, [pc, #244]	; (80067d0 <HAL_DMA_Abort_IT+0x47c>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d009      	beq.n	80066f4 <HAL_DMA_Abort_IT+0x3a0>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a3b      	ldr	r2, [pc, #236]	; (80067d4 <HAL_DMA_Abort_IT+0x480>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d004      	beq.n	80066f4 <HAL_DMA_Abort_IT+0x3a0>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a3a      	ldr	r2, [pc, #232]	; (80067d8 <HAL_DMA_Abort_IT+0x484>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d101      	bne.n	80066f8 <HAL_DMA_Abort_IT+0x3a4>
 80066f4:	2301      	movs	r3, #1
 80066f6:	e000      	b.n	80066fa <HAL_DMA_Abort_IT+0x3a6>
 80066f8:	2300      	movs	r3, #0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d028      	beq.n	8006750 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006708:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800670c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006712:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006718:	f003 031f 	and.w	r3, r3, #31
 800671c:	2201      	movs	r2, #1
 800671e:	409a      	lsls	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800672c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00c      	beq.n	8006750 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006740:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006744:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800674e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006764:	2b00      	cmp	r3, #0
 8006766:	d003      	beq.n	8006770 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	40020010 	.word	0x40020010
 8006780:	40020028 	.word	0x40020028
 8006784:	40020040 	.word	0x40020040
 8006788:	40020058 	.word	0x40020058
 800678c:	40020070 	.word	0x40020070
 8006790:	40020088 	.word	0x40020088
 8006794:	400200a0 	.word	0x400200a0
 8006798:	400200b8 	.word	0x400200b8
 800679c:	40020410 	.word	0x40020410
 80067a0:	40020428 	.word	0x40020428
 80067a4:	40020440 	.word	0x40020440
 80067a8:	40020458 	.word	0x40020458
 80067ac:	40020470 	.word	0x40020470
 80067b0:	40020488 	.word	0x40020488
 80067b4:	400204a0 	.word	0x400204a0
 80067b8:	400204b8 	.word	0x400204b8
 80067bc:	58025408 	.word	0x58025408
 80067c0:	5802541c 	.word	0x5802541c
 80067c4:	58025430 	.word	0x58025430
 80067c8:	58025444 	.word	0x58025444
 80067cc:	58025458 	.word	0x58025458
 80067d0:	5802546c 	.word	0x5802546c
 80067d4:	58025480 	.word	0x58025480
 80067d8:	58025494 	.word	0x58025494

080067dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b08a      	sub	sp, #40	; 0x28
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80067e4:	2300      	movs	r3, #0
 80067e6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80067e8:	4b67      	ldr	r3, [pc, #412]	; (8006988 <HAL_DMA_IRQHandler+0x1ac>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a67      	ldr	r2, [pc, #412]	; (800698c <HAL_DMA_IRQHandler+0x1b0>)
 80067ee:	fba2 2303 	umull	r2, r3, r2, r3
 80067f2:	0a9b      	lsrs	r3, r3, #10
 80067f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067fa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006800:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006802:	6a3b      	ldr	r3, [r7, #32]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a5f      	ldr	r2, [pc, #380]	; (8006990 <HAL_DMA_IRQHandler+0x1b4>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d04a      	beq.n	80068ae <HAL_DMA_IRQHandler+0xd2>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a5d      	ldr	r2, [pc, #372]	; (8006994 <HAL_DMA_IRQHandler+0x1b8>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d045      	beq.n	80068ae <HAL_DMA_IRQHandler+0xd2>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a5c      	ldr	r2, [pc, #368]	; (8006998 <HAL_DMA_IRQHandler+0x1bc>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d040      	beq.n	80068ae <HAL_DMA_IRQHandler+0xd2>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a5a      	ldr	r2, [pc, #360]	; (800699c <HAL_DMA_IRQHandler+0x1c0>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d03b      	beq.n	80068ae <HAL_DMA_IRQHandler+0xd2>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a59      	ldr	r2, [pc, #356]	; (80069a0 <HAL_DMA_IRQHandler+0x1c4>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d036      	beq.n	80068ae <HAL_DMA_IRQHandler+0xd2>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a57      	ldr	r2, [pc, #348]	; (80069a4 <HAL_DMA_IRQHandler+0x1c8>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d031      	beq.n	80068ae <HAL_DMA_IRQHandler+0xd2>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a56      	ldr	r2, [pc, #344]	; (80069a8 <HAL_DMA_IRQHandler+0x1cc>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d02c      	beq.n	80068ae <HAL_DMA_IRQHandler+0xd2>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a54      	ldr	r2, [pc, #336]	; (80069ac <HAL_DMA_IRQHandler+0x1d0>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d027      	beq.n	80068ae <HAL_DMA_IRQHandler+0xd2>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a53      	ldr	r2, [pc, #332]	; (80069b0 <HAL_DMA_IRQHandler+0x1d4>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d022      	beq.n	80068ae <HAL_DMA_IRQHandler+0xd2>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a51      	ldr	r2, [pc, #324]	; (80069b4 <HAL_DMA_IRQHandler+0x1d8>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d01d      	beq.n	80068ae <HAL_DMA_IRQHandler+0xd2>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a50      	ldr	r2, [pc, #320]	; (80069b8 <HAL_DMA_IRQHandler+0x1dc>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d018      	beq.n	80068ae <HAL_DMA_IRQHandler+0xd2>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a4e      	ldr	r2, [pc, #312]	; (80069bc <HAL_DMA_IRQHandler+0x1e0>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d013      	beq.n	80068ae <HAL_DMA_IRQHandler+0xd2>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a4d      	ldr	r2, [pc, #308]	; (80069c0 <HAL_DMA_IRQHandler+0x1e4>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d00e      	beq.n	80068ae <HAL_DMA_IRQHandler+0xd2>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a4b      	ldr	r2, [pc, #300]	; (80069c4 <HAL_DMA_IRQHandler+0x1e8>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d009      	beq.n	80068ae <HAL_DMA_IRQHandler+0xd2>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a4a      	ldr	r2, [pc, #296]	; (80069c8 <HAL_DMA_IRQHandler+0x1ec>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d004      	beq.n	80068ae <HAL_DMA_IRQHandler+0xd2>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a48      	ldr	r2, [pc, #288]	; (80069cc <HAL_DMA_IRQHandler+0x1f0>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d101      	bne.n	80068b2 <HAL_DMA_IRQHandler+0xd6>
 80068ae:	2301      	movs	r3, #1
 80068b0:	e000      	b.n	80068b4 <HAL_DMA_IRQHandler+0xd8>
 80068b2:	2300      	movs	r3, #0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f000 842b 	beq.w	8007110 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068be:	f003 031f 	and.w	r3, r3, #31
 80068c2:	2208      	movs	r2, #8
 80068c4:	409a      	lsls	r2, r3
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	4013      	ands	r3, r2
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f000 80a2 	beq.w	8006a14 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a2e      	ldr	r2, [pc, #184]	; (8006990 <HAL_DMA_IRQHandler+0x1b4>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d04a      	beq.n	8006970 <HAL_DMA_IRQHandler+0x194>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a2d      	ldr	r2, [pc, #180]	; (8006994 <HAL_DMA_IRQHandler+0x1b8>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d045      	beq.n	8006970 <HAL_DMA_IRQHandler+0x194>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a2b      	ldr	r2, [pc, #172]	; (8006998 <HAL_DMA_IRQHandler+0x1bc>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d040      	beq.n	8006970 <HAL_DMA_IRQHandler+0x194>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a2a      	ldr	r2, [pc, #168]	; (800699c <HAL_DMA_IRQHandler+0x1c0>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d03b      	beq.n	8006970 <HAL_DMA_IRQHandler+0x194>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a28      	ldr	r2, [pc, #160]	; (80069a0 <HAL_DMA_IRQHandler+0x1c4>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d036      	beq.n	8006970 <HAL_DMA_IRQHandler+0x194>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a27      	ldr	r2, [pc, #156]	; (80069a4 <HAL_DMA_IRQHandler+0x1c8>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d031      	beq.n	8006970 <HAL_DMA_IRQHandler+0x194>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a25      	ldr	r2, [pc, #148]	; (80069a8 <HAL_DMA_IRQHandler+0x1cc>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d02c      	beq.n	8006970 <HAL_DMA_IRQHandler+0x194>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a24      	ldr	r2, [pc, #144]	; (80069ac <HAL_DMA_IRQHandler+0x1d0>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d027      	beq.n	8006970 <HAL_DMA_IRQHandler+0x194>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a22      	ldr	r2, [pc, #136]	; (80069b0 <HAL_DMA_IRQHandler+0x1d4>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d022      	beq.n	8006970 <HAL_DMA_IRQHandler+0x194>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a21      	ldr	r2, [pc, #132]	; (80069b4 <HAL_DMA_IRQHandler+0x1d8>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d01d      	beq.n	8006970 <HAL_DMA_IRQHandler+0x194>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a1f      	ldr	r2, [pc, #124]	; (80069b8 <HAL_DMA_IRQHandler+0x1dc>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d018      	beq.n	8006970 <HAL_DMA_IRQHandler+0x194>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a1e      	ldr	r2, [pc, #120]	; (80069bc <HAL_DMA_IRQHandler+0x1e0>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d013      	beq.n	8006970 <HAL_DMA_IRQHandler+0x194>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a1c      	ldr	r2, [pc, #112]	; (80069c0 <HAL_DMA_IRQHandler+0x1e4>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d00e      	beq.n	8006970 <HAL_DMA_IRQHandler+0x194>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a1b      	ldr	r2, [pc, #108]	; (80069c4 <HAL_DMA_IRQHandler+0x1e8>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d009      	beq.n	8006970 <HAL_DMA_IRQHandler+0x194>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a19      	ldr	r2, [pc, #100]	; (80069c8 <HAL_DMA_IRQHandler+0x1ec>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d004      	beq.n	8006970 <HAL_DMA_IRQHandler+0x194>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a18      	ldr	r2, [pc, #96]	; (80069cc <HAL_DMA_IRQHandler+0x1f0>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d12f      	bne.n	80069d0 <HAL_DMA_IRQHandler+0x1f4>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0304 	and.w	r3, r3, #4
 800697a:	2b00      	cmp	r3, #0
 800697c:	bf14      	ite	ne
 800697e:	2301      	movne	r3, #1
 8006980:	2300      	moveq	r3, #0
 8006982:	b2db      	uxtb	r3, r3
 8006984:	e02e      	b.n	80069e4 <HAL_DMA_IRQHandler+0x208>
 8006986:	bf00      	nop
 8006988:	24000210 	.word	0x24000210
 800698c:	1b4e81b5 	.word	0x1b4e81b5
 8006990:	40020010 	.word	0x40020010
 8006994:	40020028 	.word	0x40020028
 8006998:	40020040 	.word	0x40020040
 800699c:	40020058 	.word	0x40020058
 80069a0:	40020070 	.word	0x40020070
 80069a4:	40020088 	.word	0x40020088
 80069a8:	400200a0 	.word	0x400200a0
 80069ac:	400200b8 	.word	0x400200b8
 80069b0:	40020410 	.word	0x40020410
 80069b4:	40020428 	.word	0x40020428
 80069b8:	40020440 	.word	0x40020440
 80069bc:	40020458 	.word	0x40020458
 80069c0:	40020470 	.word	0x40020470
 80069c4:	40020488 	.word	0x40020488
 80069c8:	400204a0 	.word	0x400204a0
 80069cc:	400204b8 	.word	0x400204b8
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0308 	and.w	r3, r3, #8
 80069da:	2b00      	cmp	r3, #0
 80069dc:	bf14      	ite	ne
 80069de:	2301      	movne	r3, #1
 80069e0:	2300      	moveq	r3, #0
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d015      	beq.n	8006a14 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f022 0204 	bic.w	r2, r2, #4
 80069f6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069fc:	f003 031f 	and.w	r3, r3, #31
 8006a00:	2208      	movs	r2, #8
 8006a02:	409a      	lsls	r2, r3
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a0c:	f043 0201 	orr.w	r2, r3, #1
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a18:	f003 031f 	and.w	r3, r3, #31
 8006a1c:	69ba      	ldr	r2, [r7, #24]
 8006a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d06e      	beq.n	8006b08 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a69      	ldr	r2, [pc, #420]	; (8006bd4 <HAL_DMA_IRQHandler+0x3f8>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d04a      	beq.n	8006aca <HAL_DMA_IRQHandler+0x2ee>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a67      	ldr	r2, [pc, #412]	; (8006bd8 <HAL_DMA_IRQHandler+0x3fc>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d045      	beq.n	8006aca <HAL_DMA_IRQHandler+0x2ee>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a66      	ldr	r2, [pc, #408]	; (8006bdc <HAL_DMA_IRQHandler+0x400>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d040      	beq.n	8006aca <HAL_DMA_IRQHandler+0x2ee>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a64      	ldr	r2, [pc, #400]	; (8006be0 <HAL_DMA_IRQHandler+0x404>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d03b      	beq.n	8006aca <HAL_DMA_IRQHandler+0x2ee>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a63      	ldr	r2, [pc, #396]	; (8006be4 <HAL_DMA_IRQHandler+0x408>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d036      	beq.n	8006aca <HAL_DMA_IRQHandler+0x2ee>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a61      	ldr	r2, [pc, #388]	; (8006be8 <HAL_DMA_IRQHandler+0x40c>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d031      	beq.n	8006aca <HAL_DMA_IRQHandler+0x2ee>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a60      	ldr	r2, [pc, #384]	; (8006bec <HAL_DMA_IRQHandler+0x410>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d02c      	beq.n	8006aca <HAL_DMA_IRQHandler+0x2ee>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a5e      	ldr	r2, [pc, #376]	; (8006bf0 <HAL_DMA_IRQHandler+0x414>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d027      	beq.n	8006aca <HAL_DMA_IRQHandler+0x2ee>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a5d      	ldr	r2, [pc, #372]	; (8006bf4 <HAL_DMA_IRQHandler+0x418>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d022      	beq.n	8006aca <HAL_DMA_IRQHandler+0x2ee>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a5b      	ldr	r2, [pc, #364]	; (8006bf8 <HAL_DMA_IRQHandler+0x41c>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d01d      	beq.n	8006aca <HAL_DMA_IRQHandler+0x2ee>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a5a      	ldr	r2, [pc, #360]	; (8006bfc <HAL_DMA_IRQHandler+0x420>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d018      	beq.n	8006aca <HAL_DMA_IRQHandler+0x2ee>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a58      	ldr	r2, [pc, #352]	; (8006c00 <HAL_DMA_IRQHandler+0x424>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d013      	beq.n	8006aca <HAL_DMA_IRQHandler+0x2ee>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a57      	ldr	r2, [pc, #348]	; (8006c04 <HAL_DMA_IRQHandler+0x428>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d00e      	beq.n	8006aca <HAL_DMA_IRQHandler+0x2ee>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a55      	ldr	r2, [pc, #340]	; (8006c08 <HAL_DMA_IRQHandler+0x42c>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d009      	beq.n	8006aca <HAL_DMA_IRQHandler+0x2ee>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a54      	ldr	r2, [pc, #336]	; (8006c0c <HAL_DMA_IRQHandler+0x430>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d004      	beq.n	8006aca <HAL_DMA_IRQHandler+0x2ee>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a52      	ldr	r2, [pc, #328]	; (8006c10 <HAL_DMA_IRQHandler+0x434>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d10a      	bne.n	8006ae0 <HAL_DMA_IRQHandler+0x304>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	bf14      	ite	ne
 8006ad8:	2301      	movne	r3, #1
 8006ada:	2300      	moveq	r3, #0
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	e003      	b.n	8006ae8 <HAL_DMA_IRQHandler+0x30c>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00d      	beq.n	8006b08 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006af0:	f003 031f 	and.w	r3, r3, #31
 8006af4:	2201      	movs	r2, #1
 8006af6:	409a      	lsls	r2, r3
 8006af8:	6a3b      	ldr	r3, [r7, #32]
 8006afa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b00:	f043 0202 	orr.w	r2, r3, #2
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b0c:	f003 031f 	and.w	r3, r3, #31
 8006b10:	2204      	movs	r2, #4
 8006b12:	409a      	lsls	r2, r3
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	4013      	ands	r3, r2
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 808f 	beq.w	8006c3c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a2c      	ldr	r2, [pc, #176]	; (8006bd4 <HAL_DMA_IRQHandler+0x3f8>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d04a      	beq.n	8006bbe <HAL_DMA_IRQHandler+0x3e2>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a2a      	ldr	r2, [pc, #168]	; (8006bd8 <HAL_DMA_IRQHandler+0x3fc>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d045      	beq.n	8006bbe <HAL_DMA_IRQHandler+0x3e2>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a29      	ldr	r2, [pc, #164]	; (8006bdc <HAL_DMA_IRQHandler+0x400>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d040      	beq.n	8006bbe <HAL_DMA_IRQHandler+0x3e2>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a27      	ldr	r2, [pc, #156]	; (8006be0 <HAL_DMA_IRQHandler+0x404>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d03b      	beq.n	8006bbe <HAL_DMA_IRQHandler+0x3e2>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a26      	ldr	r2, [pc, #152]	; (8006be4 <HAL_DMA_IRQHandler+0x408>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d036      	beq.n	8006bbe <HAL_DMA_IRQHandler+0x3e2>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a24      	ldr	r2, [pc, #144]	; (8006be8 <HAL_DMA_IRQHandler+0x40c>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d031      	beq.n	8006bbe <HAL_DMA_IRQHandler+0x3e2>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a23      	ldr	r2, [pc, #140]	; (8006bec <HAL_DMA_IRQHandler+0x410>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d02c      	beq.n	8006bbe <HAL_DMA_IRQHandler+0x3e2>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a21      	ldr	r2, [pc, #132]	; (8006bf0 <HAL_DMA_IRQHandler+0x414>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d027      	beq.n	8006bbe <HAL_DMA_IRQHandler+0x3e2>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a20      	ldr	r2, [pc, #128]	; (8006bf4 <HAL_DMA_IRQHandler+0x418>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d022      	beq.n	8006bbe <HAL_DMA_IRQHandler+0x3e2>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a1e      	ldr	r2, [pc, #120]	; (8006bf8 <HAL_DMA_IRQHandler+0x41c>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d01d      	beq.n	8006bbe <HAL_DMA_IRQHandler+0x3e2>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a1d      	ldr	r2, [pc, #116]	; (8006bfc <HAL_DMA_IRQHandler+0x420>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d018      	beq.n	8006bbe <HAL_DMA_IRQHandler+0x3e2>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a1b      	ldr	r2, [pc, #108]	; (8006c00 <HAL_DMA_IRQHandler+0x424>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d013      	beq.n	8006bbe <HAL_DMA_IRQHandler+0x3e2>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a1a      	ldr	r2, [pc, #104]	; (8006c04 <HAL_DMA_IRQHandler+0x428>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d00e      	beq.n	8006bbe <HAL_DMA_IRQHandler+0x3e2>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a18      	ldr	r2, [pc, #96]	; (8006c08 <HAL_DMA_IRQHandler+0x42c>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d009      	beq.n	8006bbe <HAL_DMA_IRQHandler+0x3e2>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a17      	ldr	r2, [pc, #92]	; (8006c0c <HAL_DMA_IRQHandler+0x430>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d004      	beq.n	8006bbe <HAL_DMA_IRQHandler+0x3e2>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a15      	ldr	r2, [pc, #84]	; (8006c10 <HAL_DMA_IRQHandler+0x434>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d12a      	bne.n	8006c14 <HAL_DMA_IRQHandler+0x438>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0302 	and.w	r3, r3, #2
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	bf14      	ite	ne
 8006bcc:	2301      	movne	r3, #1
 8006bce:	2300      	moveq	r3, #0
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	e023      	b.n	8006c1c <HAL_DMA_IRQHandler+0x440>
 8006bd4:	40020010 	.word	0x40020010
 8006bd8:	40020028 	.word	0x40020028
 8006bdc:	40020040 	.word	0x40020040
 8006be0:	40020058 	.word	0x40020058
 8006be4:	40020070 	.word	0x40020070
 8006be8:	40020088 	.word	0x40020088
 8006bec:	400200a0 	.word	0x400200a0
 8006bf0:	400200b8 	.word	0x400200b8
 8006bf4:	40020410 	.word	0x40020410
 8006bf8:	40020428 	.word	0x40020428
 8006bfc:	40020440 	.word	0x40020440
 8006c00:	40020458 	.word	0x40020458
 8006c04:	40020470 	.word	0x40020470
 8006c08:	40020488 	.word	0x40020488
 8006c0c:	400204a0 	.word	0x400204a0
 8006c10:	400204b8 	.word	0x400204b8
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00d      	beq.n	8006c3c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c24:	f003 031f 	and.w	r3, r3, #31
 8006c28:	2204      	movs	r2, #4
 8006c2a:	409a      	lsls	r2, r3
 8006c2c:	6a3b      	ldr	r3, [r7, #32]
 8006c2e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c34:	f043 0204 	orr.w	r2, r3, #4
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c40:	f003 031f 	and.w	r3, r3, #31
 8006c44:	2210      	movs	r2, #16
 8006c46:	409a      	lsls	r2, r3
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f000 80a6 	beq.w	8006d9e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a85      	ldr	r2, [pc, #532]	; (8006e6c <HAL_DMA_IRQHandler+0x690>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d04a      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0x516>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a83      	ldr	r2, [pc, #524]	; (8006e70 <HAL_DMA_IRQHandler+0x694>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d045      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0x516>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a82      	ldr	r2, [pc, #520]	; (8006e74 <HAL_DMA_IRQHandler+0x698>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d040      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0x516>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a80      	ldr	r2, [pc, #512]	; (8006e78 <HAL_DMA_IRQHandler+0x69c>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d03b      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0x516>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a7f      	ldr	r2, [pc, #508]	; (8006e7c <HAL_DMA_IRQHandler+0x6a0>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d036      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0x516>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a7d      	ldr	r2, [pc, #500]	; (8006e80 <HAL_DMA_IRQHandler+0x6a4>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d031      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0x516>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a7c      	ldr	r2, [pc, #496]	; (8006e84 <HAL_DMA_IRQHandler+0x6a8>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d02c      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0x516>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a7a      	ldr	r2, [pc, #488]	; (8006e88 <HAL_DMA_IRQHandler+0x6ac>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d027      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0x516>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a79      	ldr	r2, [pc, #484]	; (8006e8c <HAL_DMA_IRQHandler+0x6b0>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d022      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0x516>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a77      	ldr	r2, [pc, #476]	; (8006e90 <HAL_DMA_IRQHandler+0x6b4>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d01d      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0x516>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a76      	ldr	r2, [pc, #472]	; (8006e94 <HAL_DMA_IRQHandler+0x6b8>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d018      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0x516>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a74      	ldr	r2, [pc, #464]	; (8006e98 <HAL_DMA_IRQHandler+0x6bc>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d013      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0x516>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a73      	ldr	r2, [pc, #460]	; (8006e9c <HAL_DMA_IRQHandler+0x6c0>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d00e      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0x516>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a71      	ldr	r2, [pc, #452]	; (8006ea0 <HAL_DMA_IRQHandler+0x6c4>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d009      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0x516>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a70      	ldr	r2, [pc, #448]	; (8006ea4 <HAL_DMA_IRQHandler+0x6c8>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d004      	beq.n	8006cf2 <HAL_DMA_IRQHandler+0x516>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a6e      	ldr	r2, [pc, #440]	; (8006ea8 <HAL_DMA_IRQHandler+0x6cc>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d10a      	bne.n	8006d08 <HAL_DMA_IRQHandler+0x52c>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0308 	and.w	r3, r3, #8
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	bf14      	ite	ne
 8006d00:	2301      	movne	r3, #1
 8006d02:	2300      	moveq	r3, #0
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	e009      	b.n	8006d1c <HAL_DMA_IRQHandler+0x540>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0304 	and.w	r3, r3, #4
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	bf14      	ite	ne
 8006d16:	2301      	movne	r3, #1
 8006d18:	2300      	moveq	r3, #0
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d03e      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d24:	f003 031f 	and.w	r3, r3, #31
 8006d28:	2210      	movs	r2, #16
 8006d2a:	409a      	lsls	r2, r3
 8006d2c:	6a3b      	ldr	r3, [r7, #32]
 8006d2e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d018      	beq.n	8006d70 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d108      	bne.n	8006d5e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d024      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	4798      	blx	r3
 8006d5c:	e01f      	b.n	8006d9e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d01b      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	4798      	blx	r3
 8006d6e:	e016      	b.n	8006d9e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d107      	bne.n	8006d8e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f022 0208 	bic.w	r2, r2, #8
 8006d8c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006da2:	f003 031f 	and.w	r3, r3, #31
 8006da6:	2220      	movs	r2, #32
 8006da8:	409a      	lsls	r2, r3
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	4013      	ands	r3, r2
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f000 8110 	beq.w	8006fd4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a2c      	ldr	r2, [pc, #176]	; (8006e6c <HAL_DMA_IRQHandler+0x690>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d04a      	beq.n	8006e54 <HAL_DMA_IRQHandler+0x678>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a2b      	ldr	r2, [pc, #172]	; (8006e70 <HAL_DMA_IRQHandler+0x694>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d045      	beq.n	8006e54 <HAL_DMA_IRQHandler+0x678>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a29      	ldr	r2, [pc, #164]	; (8006e74 <HAL_DMA_IRQHandler+0x698>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d040      	beq.n	8006e54 <HAL_DMA_IRQHandler+0x678>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a28      	ldr	r2, [pc, #160]	; (8006e78 <HAL_DMA_IRQHandler+0x69c>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d03b      	beq.n	8006e54 <HAL_DMA_IRQHandler+0x678>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a26      	ldr	r2, [pc, #152]	; (8006e7c <HAL_DMA_IRQHandler+0x6a0>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d036      	beq.n	8006e54 <HAL_DMA_IRQHandler+0x678>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a25      	ldr	r2, [pc, #148]	; (8006e80 <HAL_DMA_IRQHandler+0x6a4>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d031      	beq.n	8006e54 <HAL_DMA_IRQHandler+0x678>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a23      	ldr	r2, [pc, #140]	; (8006e84 <HAL_DMA_IRQHandler+0x6a8>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d02c      	beq.n	8006e54 <HAL_DMA_IRQHandler+0x678>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a22      	ldr	r2, [pc, #136]	; (8006e88 <HAL_DMA_IRQHandler+0x6ac>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d027      	beq.n	8006e54 <HAL_DMA_IRQHandler+0x678>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a20      	ldr	r2, [pc, #128]	; (8006e8c <HAL_DMA_IRQHandler+0x6b0>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d022      	beq.n	8006e54 <HAL_DMA_IRQHandler+0x678>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a1f      	ldr	r2, [pc, #124]	; (8006e90 <HAL_DMA_IRQHandler+0x6b4>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d01d      	beq.n	8006e54 <HAL_DMA_IRQHandler+0x678>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a1d      	ldr	r2, [pc, #116]	; (8006e94 <HAL_DMA_IRQHandler+0x6b8>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d018      	beq.n	8006e54 <HAL_DMA_IRQHandler+0x678>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a1c      	ldr	r2, [pc, #112]	; (8006e98 <HAL_DMA_IRQHandler+0x6bc>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d013      	beq.n	8006e54 <HAL_DMA_IRQHandler+0x678>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a1a      	ldr	r2, [pc, #104]	; (8006e9c <HAL_DMA_IRQHandler+0x6c0>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d00e      	beq.n	8006e54 <HAL_DMA_IRQHandler+0x678>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a19      	ldr	r2, [pc, #100]	; (8006ea0 <HAL_DMA_IRQHandler+0x6c4>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d009      	beq.n	8006e54 <HAL_DMA_IRQHandler+0x678>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a17      	ldr	r2, [pc, #92]	; (8006ea4 <HAL_DMA_IRQHandler+0x6c8>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d004      	beq.n	8006e54 <HAL_DMA_IRQHandler+0x678>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a16      	ldr	r2, [pc, #88]	; (8006ea8 <HAL_DMA_IRQHandler+0x6cc>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d12b      	bne.n	8006eac <HAL_DMA_IRQHandler+0x6d0>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 0310 	and.w	r3, r3, #16
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	bf14      	ite	ne
 8006e62:	2301      	movne	r3, #1
 8006e64:	2300      	moveq	r3, #0
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	e02a      	b.n	8006ec0 <HAL_DMA_IRQHandler+0x6e4>
 8006e6a:	bf00      	nop
 8006e6c:	40020010 	.word	0x40020010
 8006e70:	40020028 	.word	0x40020028
 8006e74:	40020040 	.word	0x40020040
 8006e78:	40020058 	.word	0x40020058
 8006e7c:	40020070 	.word	0x40020070
 8006e80:	40020088 	.word	0x40020088
 8006e84:	400200a0 	.word	0x400200a0
 8006e88:	400200b8 	.word	0x400200b8
 8006e8c:	40020410 	.word	0x40020410
 8006e90:	40020428 	.word	0x40020428
 8006e94:	40020440 	.word	0x40020440
 8006e98:	40020458 	.word	0x40020458
 8006e9c:	40020470 	.word	0x40020470
 8006ea0:	40020488 	.word	0x40020488
 8006ea4:	400204a0 	.word	0x400204a0
 8006ea8:	400204b8 	.word	0x400204b8
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0302 	and.w	r3, r3, #2
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	bf14      	ite	ne
 8006eba:	2301      	movne	r3, #1
 8006ebc:	2300      	moveq	r3, #0
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f000 8087 	beq.w	8006fd4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eca:	f003 031f 	and.w	r3, r3, #31
 8006ece:	2220      	movs	r2, #32
 8006ed0:	409a      	lsls	r2, r3
 8006ed2:	6a3b      	ldr	r3, [r7, #32]
 8006ed4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b04      	cmp	r3, #4
 8006ee0:	d139      	bne.n	8006f56 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f022 0216 	bic.w	r2, r2, #22
 8006ef0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	695a      	ldr	r2, [r3, #20]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f00:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d103      	bne.n	8006f12 <HAL_DMA_IRQHandler+0x736>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d007      	beq.n	8006f22 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f022 0208 	bic.w	r2, r2, #8
 8006f20:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f26:	f003 031f 	and.w	r3, r3, #31
 8006f2a:	223f      	movs	r2, #63	; 0x3f
 8006f2c:	409a      	lsls	r2, r3
 8006f2e:	6a3b      	ldr	r3, [r7, #32]
 8006f30:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	f000 834a 	beq.w	80075e0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	4798      	blx	r3
          }
          return;
 8006f54:	e344      	b.n	80075e0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d018      	beq.n	8006f96 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d108      	bne.n	8006f84 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d02c      	beq.n	8006fd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	4798      	blx	r3
 8006f82:	e027      	b.n	8006fd4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d023      	beq.n	8006fd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	4798      	blx	r3
 8006f94:	e01e      	b.n	8006fd4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10f      	bne.n	8006fc4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f022 0210 	bic.w	r2, r2, #16
 8006fb2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f000 8306 	beq.w	80075ea <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f000 8088 	beq.w	80070fc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2204      	movs	r2, #4
 8006ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a7a      	ldr	r2, [pc, #488]	; (80071e4 <HAL_DMA_IRQHandler+0xa08>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d04a      	beq.n	8007094 <HAL_DMA_IRQHandler+0x8b8>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a79      	ldr	r2, [pc, #484]	; (80071e8 <HAL_DMA_IRQHandler+0xa0c>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d045      	beq.n	8007094 <HAL_DMA_IRQHandler+0x8b8>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a77      	ldr	r2, [pc, #476]	; (80071ec <HAL_DMA_IRQHandler+0xa10>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d040      	beq.n	8007094 <HAL_DMA_IRQHandler+0x8b8>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a76      	ldr	r2, [pc, #472]	; (80071f0 <HAL_DMA_IRQHandler+0xa14>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d03b      	beq.n	8007094 <HAL_DMA_IRQHandler+0x8b8>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a74      	ldr	r2, [pc, #464]	; (80071f4 <HAL_DMA_IRQHandler+0xa18>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d036      	beq.n	8007094 <HAL_DMA_IRQHandler+0x8b8>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a73      	ldr	r2, [pc, #460]	; (80071f8 <HAL_DMA_IRQHandler+0xa1c>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d031      	beq.n	8007094 <HAL_DMA_IRQHandler+0x8b8>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a71      	ldr	r2, [pc, #452]	; (80071fc <HAL_DMA_IRQHandler+0xa20>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d02c      	beq.n	8007094 <HAL_DMA_IRQHandler+0x8b8>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a70      	ldr	r2, [pc, #448]	; (8007200 <HAL_DMA_IRQHandler+0xa24>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d027      	beq.n	8007094 <HAL_DMA_IRQHandler+0x8b8>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a6e      	ldr	r2, [pc, #440]	; (8007204 <HAL_DMA_IRQHandler+0xa28>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d022      	beq.n	8007094 <HAL_DMA_IRQHandler+0x8b8>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a6d      	ldr	r2, [pc, #436]	; (8007208 <HAL_DMA_IRQHandler+0xa2c>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d01d      	beq.n	8007094 <HAL_DMA_IRQHandler+0x8b8>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a6b      	ldr	r2, [pc, #428]	; (800720c <HAL_DMA_IRQHandler+0xa30>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d018      	beq.n	8007094 <HAL_DMA_IRQHandler+0x8b8>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a6a      	ldr	r2, [pc, #424]	; (8007210 <HAL_DMA_IRQHandler+0xa34>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d013      	beq.n	8007094 <HAL_DMA_IRQHandler+0x8b8>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a68      	ldr	r2, [pc, #416]	; (8007214 <HAL_DMA_IRQHandler+0xa38>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d00e      	beq.n	8007094 <HAL_DMA_IRQHandler+0x8b8>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a67      	ldr	r2, [pc, #412]	; (8007218 <HAL_DMA_IRQHandler+0xa3c>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d009      	beq.n	8007094 <HAL_DMA_IRQHandler+0x8b8>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a65      	ldr	r2, [pc, #404]	; (800721c <HAL_DMA_IRQHandler+0xa40>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d004      	beq.n	8007094 <HAL_DMA_IRQHandler+0x8b8>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a64      	ldr	r2, [pc, #400]	; (8007220 <HAL_DMA_IRQHandler+0xa44>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d108      	bne.n	80070a6 <HAL_DMA_IRQHandler+0x8ca>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f022 0201 	bic.w	r2, r2, #1
 80070a2:	601a      	str	r2, [r3, #0]
 80070a4:	e007      	b.n	80070b6 <HAL_DMA_IRQHandler+0x8da>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f022 0201 	bic.w	r2, r2, #1
 80070b4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	3301      	adds	r3, #1
 80070ba:	60fb      	str	r3, [r7, #12]
 80070bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070be:	429a      	cmp	r2, r3
 80070c0:	d307      	bcc.n	80070d2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 0301 	and.w	r3, r3, #1
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1f2      	bne.n	80070b6 <HAL_DMA_IRQHandler+0x8da>
 80070d0:	e000      	b.n	80070d4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80070d2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0301 	and.w	r3, r3, #1
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d004      	beq.n	80070ec <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2203      	movs	r2, #3
 80070e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80070ea:	e003      	b.n	80070f4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007100:	2b00      	cmp	r3, #0
 8007102:	f000 8272 	beq.w	80075ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	4798      	blx	r3
 800710e:	e26c      	b.n	80075ea <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a43      	ldr	r2, [pc, #268]	; (8007224 <HAL_DMA_IRQHandler+0xa48>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d022      	beq.n	8007160 <HAL_DMA_IRQHandler+0x984>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a42      	ldr	r2, [pc, #264]	; (8007228 <HAL_DMA_IRQHandler+0xa4c>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d01d      	beq.n	8007160 <HAL_DMA_IRQHandler+0x984>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a40      	ldr	r2, [pc, #256]	; (800722c <HAL_DMA_IRQHandler+0xa50>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d018      	beq.n	8007160 <HAL_DMA_IRQHandler+0x984>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a3f      	ldr	r2, [pc, #252]	; (8007230 <HAL_DMA_IRQHandler+0xa54>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d013      	beq.n	8007160 <HAL_DMA_IRQHandler+0x984>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a3d      	ldr	r2, [pc, #244]	; (8007234 <HAL_DMA_IRQHandler+0xa58>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d00e      	beq.n	8007160 <HAL_DMA_IRQHandler+0x984>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a3c      	ldr	r2, [pc, #240]	; (8007238 <HAL_DMA_IRQHandler+0xa5c>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d009      	beq.n	8007160 <HAL_DMA_IRQHandler+0x984>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a3a      	ldr	r2, [pc, #232]	; (800723c <HAL_DMA_IRQHandler+0xa60>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d004      	beq.n	8007160 <HAL_DMA_IRQHandler+0x984>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a39      	ldr	r2, [pc, #228]	; (8007240 <HAL_DMA_IRQHandler+0xa64>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d101      	bne.n	8007164 <HAL_DMA_IRQHandler+0x988>
 8007160:	2301      	movs	r3, #1
 8007162:	e000      	b.n	8007166 <HAL_DMA_IRQHandler+0x98a>
 8007164:	2300      	movs	r3, #0
 8007166:	2b00      	cmp	r3, #0
 8007168:	f000 823f 	beq.w	80075ea <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007178:	f003 031f 	and.w	r3, r3, #31
 800717c:	2204      	movs	r2, #4
 800717e:	409a      	lsls	r2, r3
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	4013      	ands	r3, r2
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 80cd 	beq.w	8007324 <HAL_DMA_IRQHandler+0xb48>
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	f003 0304 	and.w	r3, r3, #4
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 80c7 	beq.w	8007324 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800719a:	f003 031f 	and.w	r3, r3, #31
 800719e:	2204      	movs	r2, #4
 80071a0:	409a      	lsls	r2, r3
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d049      	beq.n	8007244 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d109      	bne.n	80071ce <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f000 8210 	beq.w	80075e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071cc:	e20a      	b.n	80075e4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f000 8206 	beq.w	80075e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071e0:	e200      	b.n	80075e4 <HAL_DMA_IRQHandler+0xe08>
 80071e2:	bf00      	nop
 80071e4:	40020010 	.word	0x40020010
 80071e8:	40020028 	.word	0x40020028
 80071ec:	40020040 	.word	0x40020040
 80071f0:	40020058 	.word	0x40020058
 80071f4:	40020070 	.word	0x40020070
 80071f8:	40020088 	.word	0x40020088
 80071fc:	400200a0 	.word	0x400200a0
 8007200:	400200b8 	.word	0x400200b8
 8007204:	40020410 	.word	0x40020410
 8007208:	40020428 	.word	0x40020428
 800720c:	40020440 	.word	0x40020440
 8007210:	40020458 	.word	0x40020458
 8007214:	40020470 	.word	0x40020470
 8007218:	40020488 	.word	0x40020488
 800721c:	400204a0 	.word	0x400204a0
 8007220:	400204b8 	.word	0x400204b8
 8007224:	58025408 	.word	0x58025408
 8007228:	5802541c 	.word	0x5802541c
 800722c:	58025430 	.word	0x58025430
 8007230:	58025444 	.word	0x58025444
 8007234:	58025458 	.word	0x58025458
 8007238:	5802546c 	.word	0x5802546c
 800723c:	58025480 	.word	0x58025480
 8007240:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	f003 0320 	and.w	r3, r3, #32
 800724a:	2b00      	cmp	r3, #0
 800724c:	d160      	bne.n	8007310 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a8c      	ldr	r2, [pc, #560]	; (8007484 <HAL_DMA_IRQHandler+0xca8>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d04a      	beq.n	80072ee <HAL_DMA_IRQHandler+0xb12>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a8a      	ldr	r2, [pc, #552]	; (8007488 <HAL_DMA_IRQHandler+0xcac>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d045      	beq.n	80072ee <HAL_DMA_IRQHandler+0xb12>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a89      	ldr	r2, [pc, #548]	; (800748c <HAL_DMA_IRQHandler+0xcb0>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d040      	beq.n	80072ee <HAL_DMA_IRQHandler+0xb12>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a87      	ldr	r2, [pc, #540]	; (8007490 <HAL_DMA_IRQHandler+0xcb4>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d03b      	beq.n	80072ee <HAL_DMA_IRQHandler+0xb12>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a86      	ldr	r2, [pc, #536]	; (8007494 <HAL_DMA_IRQHandler+0xcb8>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d036      	beq.n	80072ee <HAL_DMA_IRQHandler+0xb12>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a84      	ldr	r2, [pc, #528]	; (8007498 <HAL_DMA_IRQHandler+0xcbc>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d031      	beq.n	80072ee <HAL_DMA_IRQHandler+0xb12>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a83      	ldr	r2, [pc, #524]	; (800749c <HAL_DMA_IRQHandler+0xcc0>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d02c      	beq.n	80072ee <HAL_DMA_IRQHandler+0xb12>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a81      	ldr	r2, [pc, #516]	; (80074a0 <HAL_DMA_IRQHandler+0xcc4>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d027      	beq.n	80072ee <HAL_DMA_IRQHandler+0xb12>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a80      	ldr	r2, [pc, #512]	; (80074a4 <HAL_DMA_IRQHandler+0xcc8>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d022      	beq.n	80072ee <HAL_DMA_IRQHandler+0xb12>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a7e      	ldr	r2, [pc, #504]	; (80074a8 <HAL_DMA_IRQHandler+0xccc>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d01d      	beq.n	80072ee <HAL_DMA_IRQHandler+0xb12>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a7d      	ldr	r2, [pc, #500]	; (80074ac <HAL_DMA_IRQHandler+0xcd0>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d018      	beq.n	80072ee <HAL_DMA_IRQHandler+0xb12>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a7b      	ldr	r2, [pc, #492]	; (80074b0 <HAL_DMA_IRQHandler+0xcd4>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d013      	beq.n	80072ee <HAL_DMA_IRQHandler+0xb12>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a7a      	ldr	r2, [pc, #488]	; (80074b4 <HAL_DMA_IRQHandler+0xcd8>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d00e      	beq.n	80072ee <HAL_DMA_IRQHandler+0xb12>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a78      	ldr	r2, [pc, #480]	; (80074b8 <HAL_DMA_IRQHandler+0xcdc>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d009      	beq.n	80072ee <HAL_DMA_IRQHandler+0xb12>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a77      	ldr	r2, [pc, #476]	; (80074bc <HAL_DMA_IRQHandler+0xce0>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d004      	beq.n	80072ee <HAL_DMA_IRQHandler+0xb12>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a75      	ldr	r2, [pc, #468]	; (80074c0 <HAL_DMA_IRQHandler+0xce4>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d108      	bne.n	8007300 <HAL_DMA_IRQHandler+0xb24>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f022 0208 	bic.w	r2, r2, #8
 80072fc:	601a      	str	r2, [r3, #0]
 80072fe:	e007      	b.n	8007310 <HAL_DMA_IRQHandler+0xb34>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f022 0204 	bic.w	r2, r2, #4
 800730e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 8165 	beq.w	80075e4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007322:	e15f      	b.n	80075e4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007328:	f003 031f 	and.w	r3, r3, #31
 800732c:	2202      	movs	r2, #2
 800732e:	409a      	lsls	r2, r3
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	4013      	ands	r3, r2
 8007334:	2b00      	cmp	r3, #0
 8007336:	f000 80c5 	beq.w	80074c4 <HAL_DMA_IRQHandler+0xce8>
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	f003 0302 	and.w	r3, r3, #2
 8007340:	2b00      	cmp	r3, #0
 8007342:	f000 80bf 	beq.w	80074c4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800734a:	f003 031f 	and.w	r3, r3, #31
 800734e:	2202      	movs	r2, #2
 8007350:	409a      	lsls	r2, r3
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d018      	beq.n	8007392 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d109      	bne.n	800737e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800736e:	2b00      	cmp	r3, #0
 8007370:	f000 813a 	beq.w	80075e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800737c:	e134      	b.n	80075e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007382:	2b00      	cmp	r3, #0
 8007384:	f000 8130 	beq.w	80075e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007390:	e12a      	b.n	80075e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	f003 0320 	and.w	r3, r3, #32
 8007398:	2b00      	cmp	r3, #0
 800739a:	d168      	bne.n	800746e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a38      	ldr	r2, [pc, #224]	; (8007484 <HAL_DMA_IRQHandler+0xca8>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d04a      	beq.n	800743c <HAL_DMA_IRQHandler+0xc60>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a37      	ldr	r2, [pc, #220]	; (8007488 <HAL_DMA_IRQHandler+0xcac>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d045      	beq.n	800743c <HAL_DMA_IRQHandler+0xc60>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a35      	ldr	r2, [pc, #212]	; (800748c <HAL_DMA_IRQHandler+0xcb0>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d040      	beq.n	800743c <HAL_DMA_IRQHandler+0xc60>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a34      	ldr	r2, [pc, #208]	; (8007490 <HAL_DMA_IRQHandler+0xcb4>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d03b      	beq.n	800743c <HAL_DMA_IRQHandler+0xc60>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a32      	ldr	r2, [pc, #200]	; (8007494 <HAL_DMA_IRQHandler+0xcb8>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d036      	beq.n	800743c <HAL_DMA_IRQHandler+0xc60>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a31      	ldr	r2, [pc, #196]	; (8007498 <HAL_DMA_IRQHandler+0xcbc>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d031      	beq.n	800743c <HAL_DMA_IRQHandler+0xc60>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a2f      	ldr	r2, [pc, #188]	; (800749c <HAL_DMA_IRQHandler+0xcc0>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d02c      	beq.n	800743c <HAL_DMA_IRQHandler+0xc60>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a2e      	ldr	r2, [pc, #184]	; (80074a0 <HAL_DMA_IRQHandler+0xcc4>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d027      	beq.n	800743c <HAL_DMA_IRQHandler+0xc60>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a2c      	ldr	r2, [pc, #176]	; (80074a4 <HAL_DMA_IRQHandler+0xcc8>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d022      	beq.n	800743c <HAL_DMA_IRQHandler+0xc60>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a2b      	ldr	r2, [pc, #172]	; (80074a8 <HAL_DMA_IRQHandler+0xccc>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d01d      	beq.n	800743c <HAL_DMA_IRQHandler+0xc60>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a29      	ldr	r2, [pc, #164]	; (80074ac <HAL_DMA_IRQHandler+0xcd0>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d018      	beq.n	800743c <HAL_DMA_IRQHandler+0xc60>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a28      	ldr	r2, [pc, #160]	; (80074b0 <HAL_DMA_IRQHandler+0xcd4>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d013      	beq.n	800743c <HAL_DMA_IRQHandler+0xc60>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a26      	ldr	r2, [pc, #152]	; (80074b4 <HAL_DMA_IRQHandler+0xcd8>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d00e      	beq.n	800743c <HAL_DMA_IRQHandler+0xc60>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a25      	ldr	r2, [pc, #148]	; (80074b8 <HAL_DMA_IRQHandler+0xcdc>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d009      	beq.n	800743c <HAL_DMA_IRQHandler+0xc60>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a23      	ldr	r2, [pc, #140]	; (80074bc <HAL_DMA_IRQHandler+0xce0>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d004      	beq.n	800743c <HAL_DMA_IRQHandler+0xc60>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a22      	ldr	r2, [pc, #136]	; (80074c0 <HAL_DMA_IRQHandler+0xce4>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d108      	bne.n	800744e <HAL_DMA_IRQHandler+0xc72>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f022 0214 	bic.w	r2, r2, #20
 800744a:	601a      	str	r2, [r3, #0]
 800744c:	e007      	b.n	800745e <HAL_DMA_IRQHandler+0xc82>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f022 020a 	bic.w	r2, r2, #10
 800745c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007472:	2b00      	cmp	r3, #0
 8007474:	f000 80b8 	beq.w	80075e8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007480:	e0b2      	b.n	80075e8 <HAL_DMA_IRQHandler+0xe0c>
 8007482:	bf00      	nop
 8007484:	40020010 	.word	0x40020010
 8007488:	40020028 	.word	0x40020028
 800748c:	40020040 	.word	0x40020040
 8007490:	40020058 	.word	0x40020058
 8007494:	40020070 	.word	0x40020070
 8007498:	40020088 	.word	0x40020088
 800749c:	400200a0 	.word	0x400200a0
 80074a0:	400200b8 	.word	0x400200b8
 80074a4:	40020410 	.word	0x40020410
 80074a8:	40020428 	.word	0x40020428
 80074ac:	40020440 	.word	0x40020440
 80074b0:	40020458 	.word	0x40020458
 80074b4:	40020470 	.word	0x40020470
 80074b8:	40020488 	.word	0x40020488
 80074bc:	400204a0 	.word	0x400204a0
 80074c0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074c8:	f003 031f 	and.w	r3, r3, #31
 80074cc:	2208      	movs	r2, #8
 80074ce:	409a      	lsls	r2, r3
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	4013      	ands	r3, r2
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	f000 8088 	beq.w	80075ea <HAL_DMA_IRQHandler+0xe0e>
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	f003 0308 	and.w	r3, r3, #8
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f000 8082 	beq.w	80075ea <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a41      	ldr	r2, [pc, #260]	; (80075f0 <HAL_DMA_IRQHandler+0xe14>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d04a      	beq.n	8007586 <HAL_DMA_IRQHandler+0xdaa>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a3f      	ldr	r2, [pc, #252]	; (80075f4 <HAL_DMA_IRQHandler+0xe18>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d045      	beq.n	8007586 <HAL_DMA_IRQHandler+0xdaa>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a3e      	ldr	r2, [pc, #248]	; (80075f8 <HAL_DMA_IRQHandler+0xe1c>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d040      	beq.n	8007586 <HAL_DMA_IRQHandler+0xdaa>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a3c      	ldr	r2, [pc, #240]	; (80075fc <HAL_DMA_IRQHandler+0xe20>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d03b      	beq.n	8007586 <HAL_DMA_IRQHandler+0xdaa>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a3b      	ldr	r2, [pc, #236]	; (8007600 <HAL_DMA_IRQHandler+0xe24>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d036      	beq.n	8007586 <HAL_DMA_IRQHandler+0xdaa>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a39      	ldr	r2, [pc, #228]	; (8007604 <HAL_DMA_IRQHandler+0xe28>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d031      	beq.n	8007586 <HAL_DMA_IRQHandler+0xdaa>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a38      	ldr	r2, [pc, #224]	; (8007608 <HAL_DMA_IRQHandler+0xe2c>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d02c      	beq.n	8007586 <HAL_DMA_IRQHandler+0xdaa>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a36      	ldr	r2, [pc, #216]	; (800760c <HAL_DMA_IRQHandler+0xe30>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d027      	beq.n	8007586 <HAL_DMA_IRQHandler+0xdaa>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a35      	ldr	r2, [pc, #212]	; (8007610 <HAL_DMA_IRQHandler+0xe34>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d022      	beq.n	8007586 <HAL_DMA_IRQHandler+0xdaa>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a33      	ldr	r2, [pc, #204]	; (8007614 <HAL_DMA_IRQHandler+0xe38>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d01d      	beq.n	8007586 <HAL_DMA_IRQHandler+0xdaa>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a32      	ldr	r2, [pc, #200]	; (8007618 <HAL_DMA_IRQHandler+0xe3c>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d018      	beq.n	8007586 <HAL_DMA_IRQHandler+0xdaa>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a30      	ldr	r2, [pc, #192]	; (800761c <HAL_DMA_IRQHandler+0xe40>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d013      	beq.n	8007586 <HAL_DMA_IRQHandler+0xdaa>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a2f      	ldr	r2, [pc, #188]	; (8007620 <HAL_DMA_IRQHandler+0xe44>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d00e      	beq.n	8007586 <HAL_DMA_IRQHandler+0xdaa>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a2d      	ldr	r2, [pc, #180]	; (8007624 <HAL_DMA_IRQHandler+0xe48>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d009      	beq.n	8007586 <HAL_DMA_IRQHandler+0xdaa>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a2c      	ldr	r2, [pc, #176]	; (8007628 <HAL_DMA_IRQHandler+0xe4c>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d004      	beq.n	8007586 <HAL_DMA_IRQHandler+0xdaa>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a2a      	ldr	r2, [pc, #168]	; (800762c <HAL_DMA_IRQHandler+0xe50>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d108      	bne.n	8007598 <HAL_DMA_IRQHandler+0xdbc>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f022 021c 	bic.w	r2, r2, #28
 8007594:	601a      	str	r2, [r3, #0]
 8007596:	e007      	b.n	80075a8 <HAL_DMA_IRQHandler+0xdcc>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f022 020e 	bic.w	r2, r2, #14
 80075a6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ac:	f003 031f 	and.w	r3, r3, #31
 80075b0:	2201      	movs	r2, #1
 80075b2:	409a      	lsls	r2, r3
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d009      	beq.n	80075ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	4798      	blx	r3
 80075de:	e004      	b.n	80075ea <HAL_DMA_IRQHandler+0xe0e>
          return;
 80075e0:	bf00      	nop
 80075e2:	e002      	b.n	80075ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075e4:	bf00      	nop
 80075e6:	e000      	b.n	80075ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075e8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80075ea:	3728      	adds	r7, #40	; 0x28
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	40020010 	.word	0x40020010
 80075f4:	40020028 	.word	0x40020028
 80075f8:	40020040 	.word	0x40020040
 80075fc:	40020058 	.word	0x40020058
 8007600:	40020070 	.word	0x40020070
 8007604:	40020088 	.word	0x40020088
 8007608:	400200a0 	.word	0x400200a0
 800760c:	400200b8 	.word	0x400200b8
 8007610:	40020410 	.word	0x40020410
 8007614:	40020428 	.word	0x40020428
 8007618:	40020440 	.word	0x40020440
 800761c:	40020458 	.word	0x40020458
 8007620:	40020470 	.word	0x40020470
 8007624:	40020488 	.word	0x40020488
 8007628:	400204a0 	.word	0x400204a0
 800762c:	400204b8 	.word	0x400204b8

08007630 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007630:	b480      	push	{r7}
 8007632:	b087      	sub	sp, #28
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	607a      	str	r2, [r7, #4]
 800763c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007642:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007648:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a84      	ldr	r2, [pc, #528]	; (8007860 <DMA_SetConfig+0x230>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d072      	beq.n	800773a <DMA_SetConfig+0x10a>
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a82      	ldr	r2, [pc, #520]	; (8007864 <DMA_SetConfig+0x234>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d06d      	beq.n	800773a <DMA_SetConfig+0x10a>
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a81      	ldr	r2, [pc, #516]	; (8007868 <DMA_SetConfig+0x238>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d068      	beq.n	800773a <DMA_SetConfig+0x10a>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a7f      	ldr	r2, [pc, #508]	; (800786c <DMA_SetConfig+0x23c>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d063      	beq.n	800773a <DMA_SetConfig+0x10a>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a7e      	ldr	r2, [pc, #504]	; (8007870 <DMA_SetConfig+0x240>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d05e      	beq.n	800773a <DMA_SetConfig+0x10a>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a7c      	ldr	r2, [pc, #496]	; (8007874 <DMA_SetConfig+0x244>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d059      	beq.n	800773a <DMA_SetConfig+0x10a>
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a7b      	ldr	r2, [pc, #492]	; (8007878 <DMA_SetConfig+0x248>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d054      	beq.n	800773a <DMA_SetConfig+0x10a>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a79      	ldr	r2, [pc, #484]	; (800787c <DMA_SetConfig+0x24c>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d04f      	beq.n	800773a <DMA_SetConfig+0x10a>
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a78      	ldr	r2, [pc, #480]	; (8007880 <DMA_SetConfig+0x250>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d04a      	beq.n	800773a <DMA_SetConfig+0x10a>
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a76      	ldr	r2, [pc, #472]	; (8007884 <DMA_SetConfig+0x254>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d045      	beq.n	800773a <DMA_SetConfig+0x10a>
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a75      	ldr	r2, [pc, #468]	; (8007888 <DMA_SetConfig+0x258>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d040      	beq.n	800773a <DMA_SetConfig+0x10a>
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a73      	ldr	r2, [pc, #460]	; (800788c <DMA_SetConfig+0x25c>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d03b      	beq.n	800773a <DMA_SetConfig+0x10a>
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a72      	ldr	r2, [pc, #456]	; (8007890 <DMA_SetConfig+0x260>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d036      	beq.n	800773a <DMA_SetConfig+0x10a>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a70      	ldr	r2, [pc, #448]	; (8007894 <DMA_SetConfig+0x264>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d031      	beq.n	800773a <DMA_SetConfig+0x10a>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a6f      	ldr	r2, [pc, #444]	; (8007898 <DMA_SetConfig+0x268>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d02c      	beq.n	800773a <DMA_SetConfig+0x10a>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a6d      	ldr	r2, [pc, #436]	; (800789c <DMA_SetConfig+0x26c>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d027      	beq.n	800773a <DMA_SetConfig+0x10a>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a6c      	ldr	r2, [pc, #432]	; (80078a0 <DMA_SetConfig+0x270>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d022      	beq.n	800773a <DMA_SetConfig+0x10a>
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a6a      	ldr	r2, [pc, #424]	; (80078a4 <DMA_SetConfig+0x274>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d01d      	beq.n	800773a <DMA_SetConfig+0x10a>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a69      	ldr	r2, [pc, #420]	; (80078a8 <DMA_SetConfig+0x278>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d018      	beq.n	800773a <DMA_SetConfig+0x10a>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a67      	ldr	r2, [pc, #412]	; (80078ac <DMA_SetConfig+0x27c>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d013      	beq.n	800773a <DMA_SetConfig+0x10a>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a66      	ldr	r2, [pc, #408]	; (80078b0 <DMA_SetConfig+0x280>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d00e      	beq.n	800773a <DMA_SetConfig+0x10a>
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a64      	ldr	r2, [pc, #400]	; (80078b4 <DMA_SetConfig+0x284>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d009      	beq.n	800773a <DMA_SetConfig+0x10a>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a63      	ldr	r2, [pc, #396]	; (80078b8 <DMA_SetConfig+0x288>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d004      	beq.n	800773a <DMA_SetConfig+0x10a>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a61      	ldr	r2, [pc, #388]	; (80078bc <DMA_SetConfig+0x28c>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d101      	bne.n	800773e <DMA_SetConfig+0x10e>
 800773a:	2301      	movs	r3, #1
 800773c:	e000      	b.n	8007740 <DMA_SetConfig+0x110>
 800773e:	2300      	movs	r3, #0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d00d      	beq.n	8007760 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800774c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007752:	2b00      	cmp	r3, #0
 8007754:	d004      	beq.n	8007760 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800775e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a3e      	ldr	r2, [pc, #248]	; (8007860 <DMA_SetConfig+0x230>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d04a      	beq.n	8007800 <DMA_SetConfig+0x1d0>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a3d      	ldr	r2, [pc, #244]	; (8007864 <DMA_SetConfig+0x234>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d045      	beq.n	8007800 <DMA_SetConfig+0x1d0>
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a3b      	ldr	r2, [pc, #236]	; (8007868 <DMA_SetConfig+0x238>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d040      	beq.n	8007800 <DMA_SetConfig+0x1d0>
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a3a      	ldr	r2, [pc, #232]	; (800786c <DMA_SetConfig+0x23c>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d03b      	beq.n	8007800 <DMA_SetConfig+0x1d0>
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a38      	ldr	r2, [pc, #224]	; (8007870 <DMA_SetConfig+0x240>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d036      	beq.n	8007800 <DMA_SetConfig+0x1d0>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a37      	ldr	r2, [pc, #220]	; (8007874 <DMA_SetConfig+0x244>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d031      	beq.n	8007800 <DMA_SetConfig+0x1d0>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a35      	ldr	r2, [pc, #212]	; (8007878 <DMA_SetConfig+0x248>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d02c      	beq.n	8007800 <DMA_SetConfig+0x1d0>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a34      	ldr	r2, [pc, #208]	; (800787c <DMA_SetConfig+0x24c>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d027      	beq.n	8007800 <DMA_SetConfig+0x1d0>
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a32      	ldr	r2, [pc, #200]	; (8007880 <DMA_SetConfig+0x250>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d022      	beq.n	8007800 <DMA_SetConfig+0x1d0>
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a31      	ldr	r2, [pc, #196]	; (8007884 <DMA_SetConfig+0x254>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d01d      	beq.n	8007800 <DMA_SetConfig+0x1d0>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a2f      	ldr	r2, [pc, #188]	; (8007888 <DMA_SetConfig+0x258>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d018      	beq.n	8007800 <DMA_SetConfig+0x1d0>
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a2e      	ldr	r2, [pc, #184]	; (800788c <DMA_SetConfig+0x25c>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d013      	beq.n	8007800 <DMA_SetConfig+0x1d0>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a2c      	ldr	r2, [pc, #176]	; (8007890 <DMA_SetConfig+0x260>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d00e      	beq.n	8007800 <DMA_SetConfig+0x1d0>
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a2b      	ldr	r2, [pc, #172]	; (8007894 <DMA_SetConfig+0x264>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d009      	beq.n	8007800 <DMA_SetConfig+0x1d0>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a29      	ldr	r2, [pc, #164]	; (8007898 <DMA_SetConfig+0x268>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d004      	beq.n	8007800 <DMA_SetConfig+0x1d0>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a28      	ldr	r2, [pc, #160]	; (800789c <DMA_SetConfig+0x26c>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d101      	bne.n	8007804 <DMA_SetConfig+0x1d4>
 8007800:	2301      	movs	r3, #1
 8007802:	e000      	b.n	8007806 <DMA_SetConfig+0x1d6>
 8007804:	2300      	movs	r3, #0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d05a      	beq.n	80078c0 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800780e:	f003 031f 	and.w	r3, r3, #31
 8007812:	223f      	movs	r2, #63	; 0x3f
 8007814:	409a      	lsls	r2, r3
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007828:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	683a      	ldr	r2, [r7, #0]
 8007830:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	2b40      	cmp	r3, #64	; 0x40
 8007838:	d108      	bne.n	800784c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68ba      	ldr	r2, [r7, #8]
 8007848:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800784a:	e087      	b.n	800795c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68ba      	ldr	r2, [r7, #8]
 8007852:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	60da      	str	r2, [r3, #12]
}
 800785c:	e07e      	b.n	800795c <DMA_SetConfig+0x32c>
 800785e:	bf00      	nop
 8007860:	40020010 	.word	0x40020010
 8007864:	40020028 	.word	0x40020028
 8007868:	40020040 	.word	0x40020040
 800786c:	40020058 	.word	0x40020058
 8007870:	40020070 	.word	0x40020070
 8007874:	40020088 	.word	0x40020088
 8007878:	400200a0 	.word	0x400200a0
 800787c:	400200b8 	.word	0x400200b8
 8007880:	40020410 	.word	0x40020410
 8007884:	40020428 	.word	0x40020428
 8007888:	40020440 	.word	0x40020440
 800788c:	40020458 	.word	0x40020458
 8007890:	40020470 	.word	0x40020470
 8007894:	40020488 	.word	0x40020488
 8007898:	400204a0 	.word	0x400204a0
 800789c:	400204b8 	.word	0x400204b8
 80078a0:	58025408 	.word	0x58025408
 80078a4:	5802541c 	.word	0x5802541c
 80078a8:	58025430 	.word	0x58025430
 80078ac:	58025444 	.word	0x58025444
 80078b0:	58025458 	.word	0x58025458
 80078b4:	5802546c 	.word	0x5802546c
 80078b8:	58025480 	.word	0x58025480
 80078bc:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a28      	ldr	r2, [pc, #160]	; (8007968 <DMA_SetConfig+0x338>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d022      	beq.n	8007910 <DMA_SetConfig+0x2e0>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a27      	ldr	r2, [pc, #156]	; (800796c <DMA_SetConfig+0x33c>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d01d      	beq.n	8007910 <DMA_SetConfig+0x2e0>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a25      	ldr	r2, [pc, #148]	; (8007970 <DMA_SetConfig+0x340>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d018      	beq.n	8007910 <DMA_SetConfig+0x2e0>
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a24      	ldr	r2, [pc, #144]	; (8007974 <DMA_SetConfig+0x344>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d013      	beq.n	8007910 <DMA_SetConfig+0x2e0>
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a22      	ldr	r2, [pc, #136]	; (8007978 <DMA_SetConfig+0x348>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d00e      	beq.n	8007910 <DMA_SetConfig+0x2e0>
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a21      	ldr	r2, [pc, #132]	; (800797c <DMA_SetConfig+0x34c>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d009      	beq.n	8007910 <DMA_SetConfig+0x2e0>
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a1f      	ldr	r2, [pc, #124]	; (8007980 <DMA_SetConfig+0x350>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d004      	beq.n	8007910 <DMA_SetConfig+0x2e0>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a1e      	ldr	r2, [pc, #120]	; (8007984 <DMA_SetConfig+0x354>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d101      	bne.n	8007914 <DMA_SetConfig+0x2e4>
 8007910:	2301      	movs	r3, #1
 8007912:	e000      	b.n	8007916 <DMA_SetConfig+0x2e6>
 8007914:	2300      	movs	r3, #0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d020      	beq.n	800795c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800791e:	f003 031f 	and.w	r3, r3, #31
 8007922:	2201      	movs	r2, #1
 8007924:	409a      	lsls	r2, r3
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	683a      	ldr	r2, [r7, #0]
 8007930:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	2b40      	cmp	r3, #64	; 0x40
 8007938:	d108      	bne.n	800794c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	68ba      	ldr	r2, [r7, #8]
 8007948:	60da      	str	r2, [r3, #12]
}
 800794a:	e007      	b.n	800795c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68ba      	ldr	r2, [r7, #8]
 8007952:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	60da      	str	r2, [r3, #12]
}
 800795c:	bf00      	nop
 800795e:	371c      	adds	r7, #28
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr
 8007968:	58025408 	.word	0x58025408
 800796c:	5802541c 	.word	0x5802541c
 8007970:	58025430 	.word	0x58025430
 8007974:	58025444 	.word	0x58025444
 8007978:	58025458 	.word	0x58025458
 800797c:	5802546c 	.word	0x5802546c
 8007980:	58025480 	.word	0x58025480
 8007984:	58025494 	.word	0x58025494

08007988 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a42      	ldr	r2, [pc, #264]	; (8007aa0 <DMA_CalcBaseAndBitshift+0x118>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d04a      	beq.n	8007a30 <DMA_CalcBaseAndBitshift+0xa8>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a41      	ldr	r2, [pc, #260]	; (8007aa4 <DMA_CalcBaseAndBitshift+0x11c>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d045      	beq.n	8007a30 <DMA_CalcBaseAndBitshift+0xa8>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a3f      	ldr	r2, [pc, #252]	; (8007aa8 <DMA_CalcBaseAndBitshift+0x120>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d040      	beq.n	8007a30 <DMA_CalcBaseAndBitshift+0xa8>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a3e      	ldr	r2, [pc, #248]	; (8007aac <DMA_CalcBaseAndBitshift+0x124>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d03b      	beq.n	8007a30 <DMA_CalcBaseAndBitshift+0xa8>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a3c      	ldr	r2, [pc, #240]	; (8007ab0 <DMA_CalcBaseAndBitshift+0x128>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d036      	beq.n	8007a30 <DMA_CalcBaseAndBitshift+0xa8>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a3b      	ldr	r2, [pc, #236]	; (8007ab4 <DMA_CalcBaseAndBitshift+0x12c>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d031      	beq.n	8007a30 <DMA_CalcBaseAndBitshift+0xa8>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a39      	ldr	r2, [pc, #228]	; (8007ab8 <DMA_CalcBaseAndBitshift+0x130>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d02c      	beq.n	8007a30 <DMA_CalcBaseAndBitshift+0xa8>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a38      	ldr	r2, [pc, #224]	; (8007abc <DMA_CalcBaseAndBitshift+0x134>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d027      	beq.n	8007a30 <DMA_CalcBaseAndBitshift+0xa8>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a36      	ldr	r2, [pc, #216]	; (8007ac0 <DMA_CalcBaseAndBitshift+0x138>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d022      	beq.n	8007a30 <DMA_CalcBaseAndBitshift+0xa8>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a35      	ldr	r2, [pc, #212]	; (8007ac4 <DMA_CalcBaseAndBitshift+0x13c>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d01d      	beq.n	8007a30 <DMA_CalcBaseAndBitshift+0xa8>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a33      	ldr	r2, [pc, #204]	; (8007ac8 <DMA_CalcBaseAndBitshift+0x140>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d018      	beq.n	8007a30 <DMA_CalcBaseAndBitshift+0xa8>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a32      	ldr	r2, [pc, #200]	; (8007acc <DMA_CalcBaseAndBitshift+0x144>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d013      	beq.n	8007a30 <DMA_CalcBaseAndBitshift+0xa8>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a30      	ldr	r2, [pc, #192]	; (8007ad0 <DMA_CalcBaseAndBitshift+0x148>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d00e      	beq.n	8007a30 <DMA_CalcBaseAndBitshift+0xa8>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a2f      	ldr	r2, [pc, #188]	; (8007ad4 <DMA_CalcBaseAndBitshift+0x14c>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d009      	beq.n	8007a30 <DMA_CalcBaseAndBitshift+0xa8>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a2d      	ldr	r2, [pc, #180]	; (8007ad8 <DMA_CalcBaseAndBitshift+0x150>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d004      	beq.n	8007a30 <DMA_CalcBaseAndBitshift+0xa8>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a2c      	ldr	r2, [pc, #176]	; (8007adc <DMA_CalcBaseAndBitshift+0x154>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d101      	bne.n	8007a34 <DMA_CalcBaseAndBitshift+0xac>
 8007a30:	2301      	movs	r3, #1
 8007a32:	e000      	b.n	8007a36 <DMA_CalcBaseAndBitshift+0xae>
 8007a34:	2300      	movs	r3, #0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d024      	beq.n	8007a84 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	3b10      	subs	r3, #16
 8007a42:	4a27      	ldr	r2, [pc, #156]	; (8007ae0 <DMA_CalcBaseAndBitshift+0x158>)
 8007a44:	fba2 2303 	umull	r2, r3, r2, r3
 8007a48:	091b      	lsrs	r3, r3, #4
 8007a4a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f003 0307 	and.w	r3, r3, #7
 8007a52:	4a24      	ldr	r2, [pc, #144]	; (8007ae4 <DMA_CalcBaseAndBitshift+0x15c>)
 8007a54:	5cd3      	ldrb	r3, [r2, r3]
 8007a56:	461a      	mov	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2b03      	cmp	r3, #3
 8007a60:	d908      	bls.n	8007a74 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	461a      	mov	r2, r3
 8007a68:	4b1f      	ldr	r3, [pc, #124]	; (8007ae8 <DMA_CalcBaseAndBitshift+0x160>)
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	1d1a      	adds	r2, r3, #4
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	659a      	str	r2, [r3, #88]	; 0x58
 8007a72:	e00d      	b.n	8007a90 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	461a      	mov	r2, r3
 8007a7a:	4b1b      	ldr	r3, [pc, #108]	; (8007ae8 <DMA_CalcBaseAndBitshift+0x160>)
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	6593      	str	r3, [r2, #88]	; 0x58
 8007a82:	e005      	b.n	8007a90 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3714      	adds	r7, #20
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr
 8007aa0:	40020010 	.word	0x40020010
 8007aa4:	40020028 	.word	0x40020028
 8007aa8:	40020040 	.word	0x40020040
 8007aac:	40020058 	.word	0x40020058
 8007ab0:	40020070 	.word	0x40020070
 8007ab4:	40020088 	.word	0x40020088
 8007ab8:	400200a0 	.word	0x400200a0
 8007abc:	400200b8 	.word	0x400200b8
 8007ac0:	40020410 	.word	0x40020410
 8007ac4:	40020428 	.word	0x40020428
 8007ac8:	40020440 	.word	0x40020440
 8007acc:	40020458 	.word	0x40020458
 8007ad0:	40020470 	.word	0x40020470
 8007ad4:	40020488 	.word	0x40020488
 8007ad8:	400204a0 	.word	0x400204a0
 8007adc:	400204b8 	.word	0x400204b8
 8007ae0:	aaaaaaab 	.word	0xaaaaaaab
 8007ae4:	08011c8c 	.word	0x08011c8c
 8007ae8:	fffffc00 	.word	0xfffffc00

08007aec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007af4:	2300      	movs	r3, #0
 8007af6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	699b      	ldr	r3, [r3, #24]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d120      	bne.n	8007b42 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b04:	2b03      	cmp	r3, #3
 8007b06:	d858      	bhi.n	8007bba <DMA_CheckFifoParam+0xce>
 8007b08:	a201      	add	r2, pc, #4	; (adr r2, 8007b10 <DMA_CheckFifoParam+0x24>)
 8007b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0e:	bf00      	nop
 8007b10:	08007b21 	.word	0x08007b21
 8007b14:	08007b33 	.word	0x08007b33
 8007b18:	08007b21 	.word	0x08007b21
 8007b1c:	08007bbb 	.word	0x08007bbb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d048      	beq.n	8007bbe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b30:	e045      	b.n	8007bbe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007b3a:	d142      	bne.n	8007bc2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b40:	e03f      	b.n	8007bc2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b4a:	d123      	bne.n	8007b94 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b50:	2b03      	cmp	r3, #3
 8007b52:	d838      	bhi.n	8007bc6 <DMA_CheckFifoParam+0xda>
 8007b54:	a201      	add	r2, pc, #4	; (adr r2, 8007b5c <DMA_CheckFifoParam+0x70>)
 8007b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b5a:	bf00      	nop
 8007b5c:	08007b6d 	.word	0x08007b6d
 8007b60:	08007b73 	.word	0x08007b73
 8007b64:	08007b6d 	.word	0x08007b6d
 8007b68:	08007b85 	.word	0x08007b85
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	73fb      	strb	r3, [r7, #15]
        break;
 8007b70:	e030      	b.n	8007bd4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d025      	beq.n	8007bca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b82:	e022      	b.n	8007bca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007b8c:	d11f      	bne.n	8007bce <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b92:	e01c      	b.n	8007bce <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d902      	bls.n	8007ba2 <DMA_CheckFifoParam+0xb6>
 8007b9c:	2b03      	cmp	r3, #3
 8007b9e:	d003      	beq.n	8007ba8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007ba0:	e018      	b.n	8007bd4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	73fb      	strb	r3, [r7, #15]
        break;
 8007ba6:	e015      	b.n	8007bd4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00e      	beq.n	8007bd2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	73fb      	strb	r3, [r7, #15]
    break;
 8007bb8:	e00b      	b.n	8007bd2 <DMA_CheckFifoParam+0xe6>
        break;
 8007bba:	bf00      	nop
 8007bbc:	e00a      	b.n	8007bd4 <DMA_CheckFifoParam+0xe8>
        break;
 8007bbe:	bf00      	nop
 8007bc0:	e008      	b.n	8007bd4 <DMA_CheckFifoParam+0xe8>
        break;
 8007bc2:	bf00      	nop
 8007bc4:	e006      	b.n	8007bd4 <DMA_CheckFifoParam+0xe8>
        break;
 8007bc6:	bf00      	nop
 8007bc8:	e004      	b.n	8007bd4 <DMA_CheckFifoParam+0xe8>
        break;
 8007bca:	bf00      	nop
 8007bcc:	e002      	b.n	8007bd4 <DMA_CheckFifoParam+0xe8>
        break;
 8007bce:	bf00      	nop
 8007bd0:	e000      	b.n	8007bd4 <DMA_CheckFifoParam+0xe8>
    break;
 8007bd2:	bf00      	nop
    }
  }

  return status;
 8007bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3714      	adds	r7, #20
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop

08007be4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a38      	ldr	r2, [pc, #224]	; (8007cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d022      	beq.n	8007c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a36      	ldr	r2, [pc, #216]	; (8007cdc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d01d      	beq.n	8007c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a35      	ldr	r2, [pc, #212]	; (8007ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d018      	beq.n	8007c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a33      	ldr	r2, [pc, #204]	; (8007ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d013      	beq.n	8007c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a32      	ldr	r2, [pc, #200]	; (8007ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d00e      	beq.n	8007c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a30      	ldr	r2, [pc, #192]	; (8007cec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d009      	beq.n	8007c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a2f      	ldr	r2, [pc, #188]	; (8007cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d004      	beq.n	8007c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a2d      	ldr	r2, [pc, #180]	; (8007cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d101      	bne.n	8007c46 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007c42:	2301      	movs	r3, #1
 8007c44:	e000      	b.n	8007c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007c46:	2300      	movs	r3, #0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d01a      	beq.n	8007c82 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	3b08      	subs	r3, #8
 8007c54:	4a28      	ldr	r2, [pc, #160]	; (8007cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007c56:	fba2 2303 	umull	r2, r3, r2, r3
 8007c5a:	091b      	lsrs	r3, r3, #4
 8007c5c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	4b26      	ldr	r3, [pc, #152]	; (8007cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007c62:	4413      	add	r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	461a      	mov	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a24      	ldr	r2, [pc, #144]	; (8007d00 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007c70:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f003 031f 	and.w	r3, r3, #31
 8007c78:	2201      	movs	r2, #1
 8007c7a:	409a      	lsls	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007c80:	e024      	b.n	8007ccc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	3b10      	subs	r3, #16
 8007c8a:	4a1e      	ldr	r2, [pc, #120]	; (8007d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c90:	091b      	lsrs	r3, r3, #4
 8007c92:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	4a1c      	ldr	r2, [pc, #112]	; (8007d08 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d806      	bhi.n	8007caa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	4a1b      	ldr	r2, [pc, #108]	; (8007d0c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d902      	bls.n	8007caa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	3308      	adds	r3, #8
 8007ca8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	4b18      	ldr	r3, [pc, #96]	; (8007d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007cae:	4413      	add	r3, r2
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a16      	ldr	r2, [pc, #88]	; (8007d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007cbc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f003 031f 	and.w	r3, r3, #31
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	409a      	lsls	r2, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007ccc:	bf00      	nop
 8007cce:	3714      	adds	r7, #20
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr
 8007cd8:	58025408 	.word	0x58025408
 8007cdc:	5802541c 	.word	0x5802541c
 8007ce0:	58025430 	.word	0x58025430
 8007ce4:	58025444 	.word	0x58025444
 8007ce8:	58025458 	.word	0x58025458
 8007cec:	5802546c 	.word	0x5802546c
 8007cf0:	58025480 	.word	0x58025480
 8007cf4:	58025494 	.word	0x58025494
 8007cf8:	cccccccd 	.word	0xcccccccd
 8007cfc:	16009600 	.word	0x16009600
 8007d00:	58025880 	.word	0x58025880
 8007d04:	aaaaaaab 	.word	0xaaaaaaab
 8007d08:	400204b8 	.word	0x400204b8
 8007d0c:	4002040f 	.word	0x4002040f
 8007d10:	10008200 	.word	0x10008200
 8007d14:	40020880 	.word	0x40020880

08007d18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d04a      	beq.n	8007dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2b08      	cmp	r3, #8
 8007d32:	d847      	bhi.n	8007dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a25      	ldr	r2, [pc, #148]	; (8007dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d022      	beq.n	8007d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a24      	ldr	r2, [pc, #144]	; (8007dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d01d      	beq.n	8007d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a22      	ldr	r2, [pc, #136]	; (8007dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d018      	beq.n	8007d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a21      	ldr	r2, [pc, #132]	; (8007ddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d013      	beq.n	8007d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a1f      	ldr	r2, [pc, #124]	; (8007de0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d00e      	beq.n	8007d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a1e      	ldr	r2, [pc, #120]	; (8007de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d009      	beq.n	8007d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a1c      	ldr	r2, [pc, #112]	; (8007de8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d004      	beq.n	8007d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a1b      	ldr	r2, [pc, #108]	; (8007dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d101      	bne.n	8007d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007d84:	2301      	movs	r3, #1
 8007d86:	e000      	b.n	8007d8a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007d88:	2300      	movs	r3, #0
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00a      	beq.n	8007da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	4b17      	ldr	r3, [pc, #92]	; (8007df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007d92:	4413      	add	r3, r2
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	461a      	mov	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4a15      	ldr	r2, [pc, #84]	; (8007df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007da0:	671a      	str	r2, [r3, #112]	; 0x70
 8007da2:	e009      	b.n	8007db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	4b14      	ldr	r3, [pc, #80]	; (8007df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007da8:	4413      	add	r3, r2
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	461a      	mov	r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a11      	ldr	r2, [pc, #68]	; (8007dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007db6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	409a      	lsls	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007dc4:	bf00      	nop
 8007dc6:	3714      	adds	r7, #20
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr
 8007dd0:	58025408 	.word	0x58025408
 8007dd4:	5802541c 	.word	0x5802541c
 8007dd8:	58025430 	.word	0x58025430
 8007ddc:	58025444 	.word	0x58025444
 8007de0:	58025458 	.word	0x58025458
 8007de4:	5802546c 	.word	0x5802546c
 8007de8:	58025480 	.word	0x58025480
 8007dec:	58025494 	.word	0x58025494
 8007df0:	1600963f 	.word	0x1600963f
 8007df4:	58025940 	.word	0x58025940
 8007df8:	1000823f 	.word	0x1000823f
 8007dfc:	40020940 	.word	0x40020940

08007e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b089      	sub	sp, #36	; 0x24
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007e0e:	4b89      	ldr	r3, [pc, #548]	; (8008034 <HAL_GPIO_Init+0x234>)
 8007e10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007e12:	e194      	b.n	800813e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	2101      	movs	r1, #1
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8007e20:	4013      	ands	r3, r2
 8007e22:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f000 8186 	beq.w	8008138 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	f003 0303 	and.w	r3, r3, #3
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d005      	beq.n	8007e44 <HAL_GPIO_Init+0x44>
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	f003 0303 	and.w	r3, r3, #3
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d130      	bne.n	8007ea6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	005b      	lsls	r3, r3, #1
 8007e4e:	2203      	movs	r2, #3
 8007e50:	fa02 f303 	lsl.w	r3, r2, r3
 8007e54:	43db      	mvns	r3, r3
 8007e56:	69ba      	ldr	r2, [r7, #24]
 8007e58:	4013      	ands	r3, r2
 8007e5a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	68da      	ldr	r2, [r3, #12]
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	005b      	lsls	r3, r3, #1
 8007e64:	fa02 f303 	lsl.w	r3, r2, r3
 8007e68:	69ba      	ldr	r2, [r7, #24]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	69ba      	ldr	r2, [r7, #24]
 8007e72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e82:	43db      	mvns	r3, r3
 8007e84:	69ba      	ldr	r2, [r7, #24]
 8007e86:	4013      	ands	r3, r2
 8007e88:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	091b      	lsrs	r3, r3, #4
 8007e90:	f003 0201 	and.w	r2, r3, #1
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	fa02 f303 	lsl.w	r3, r2, r3
 8007e9a:	69ba      	ldr	r2, [r7, #24]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	69ba      	ldr	r2, [r7, #24]
 8007ea4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	f003 0303 	and.w	r3, r3, #3
 8007eae:	2b03      	cmp	r3, #3
 8007eb0:	d017      	beq.n	8007ee2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	005b      	lsls	r3, r3, #1
 8007ebc:	2203      	movs	r2, #3
 8007ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec2:	43db      	mvns	r3, r3
 8007ec4:	69ba      	ldr	r2, [r7, #24]
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	689a      	ldr	r2, [r3, #8]
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	005b      	lsls	r3, r3, #1
 8007ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed6:	69ba      	ldr	r2, [r7, #24]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	69ba      	ldr	r2, [r7, #24]
 8007ee0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f003 0303 	and.w	r3, r3, #3
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d123      	bne.n	8007f36 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	08da      	lsrs	r2, r3, #3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	3208      	adds	r2, #8
 8007ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	f003 0307 	and.w	r3, r3, #7
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	220f      	movs	r2, #15
 8007f06:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0a:	43db      	mvns	r3, r3
 8007f0c:	69ba      	ldr	r2, [r7, #24]
 8007f0e:	4013      	ands	r3, r2
 8007f10:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	691a      	ldr	r2, [r3, #16]
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	f003 0307 	and.w	r3, r3, #7
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f22:	69ba      	ldr	r2, [r7, #24]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	08da      	lsrs	r2, r3, #3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	3208      	adds	r2, #8
 8007f30:	69b9      	ldr	r1, [r7, #24]
 8007f32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	005b      	lsls	r3, r3, #1
 8007f40:	2203      	movs	r2, #3
 8007f42:	fa02 f303 	lsl.w	r3, r2, r3
 8007f46:	43db      	mvns	r3, r3
 8007f48:	69ba      	ldr	r2, [r7, #24]
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	f003 0203 	and.w	r2, r3, #3
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	005b      	lsls	r3, r3, #1
 8007f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f5e:	69ba      	ldr	r2, [r7, #24]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	69ba      	ldr	r2, [r7, #24]
 8007f68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f000 80e0 	beq.w	8008138 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f78:	4b2f      	ldr	r3, [pc, #188]	; (8008038 <HAL_GPIO_Init+0x238>)
 8007f7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f7e:	4a2e      	ldr	r2, [pc, #184]	; (8008038 <HAL_GPIO_Init+0x238>)
 8007f80:	f043 0302 	orr.w	r3, r3, #2
 8007f84:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007f88:	4b2b      	ldr	r3, [pc, #172]	; (8008038 <HAL_GPIO_Init+0x238>)
 8007f8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f8e:	f003 0302 	and.w	r3, r3, #2
 8007f92:	60fb      	str	r3, [r7, #12]
 8007f94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007f96:	4a29      	ldr	r2, [pc, #164]	; (800803c <HAL_GPIO_Init+0x23c>)
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	089b      	lsrs	r3, r3, #2
 8007f9c:	3302      	adds	r3, #2
 8007f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	f003 0303 	and.w	r3, r3, #3
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	220f      	movs	r2, #15
 8007fae:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb2:	43db      	mvns	r3, r3
 8007fb4:	69ba      	ldr	r2, [r7, #24]
 8007fb6:	4013      	ands	r3, r2
 8007fb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a20      	ldr	r2, [pc, #128]	; (8008040 <HAL_GPIO_Init+0x240>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d052      	beq.n	8008068 <HAL_GPIO_Init+0x268>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a1f      	ldr	r2, [pc, #124]	; (8008044 <HAL_GPIO_Init+0x244>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d031      	beq.n	800802e <HAL_GPIO_Init+0x22e>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a1e      	ldr	r2, [pc, #120]	; (8008048 <HAL_GPIO_Init+0x248>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d02b      	beq.n	800802a <HAL_GPIO_Init+0x22a>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a1d      	ldr	r2, [pc, #116]	; (800804c <HAL_GPIO_Init+0x24c>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d025      	beq.n	8008026 <HAL_GPIO_Init+0x226>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a1c      	ldr	r2, [pc, #112]	; (8008050 <HAL_GPIO_Init+0x250>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d01f      	beq.n	8008022 <HAL_GPIO_Init+0x222>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a1b      	ldr	r2, [pc, #108]	; (8008054 <HAL_GPIO_Init+0x254>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d019      	beq.n	800801e <HAL_GPIO_Init+0x21e>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a1a      	ldr	r2, [pc, #104]	; (8008058 <HAL_GPIO_Init+0x258>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d013      	beq.n	800801a <HAL_GPIO_Init+0x21a>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a19      	ldr	r2, [pc, #100]	; (800805c <HAL_GPIO_Init+0x25c>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d00d      	beq.n	8008016 <HAL_GPIO_Init+0x216>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a18      	ldr	r2, [pc, #96]	; (8008060 <HAL_GPIO_Init+0x260>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d007      	beq.n	8008012 <HAL_GPIO_Init+0x212>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4a17      	ldr	r2, [pc, #92]	; (8008064 <HAL_GPIO_Init+0x264>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d101      	bne.n	800800e <HAL_GPIO_Init+0x20e>
 800800a:	2309      	movs	r3, #9
 800800c:	e02d      	b.n	800806a <HAL_GPIO_Init+0x26a>
 800800e:	230a      	movs	r3, #10
 8008010:	e02b      	b.n	800806a <HAL_GPIO_Init+0x26a>
 8008012:	2308      	movs	r3, #8
 8008014:	e029      	b.n	800806a <HAL_GPIO_Init+0x26a>
 8008016:	2307      	movs	r3, #7
 8008018:	e027      	b.n	800806a <HAL_GPIO_Init+0x26a>
 800801a:	2306      	movs	r3, #6
 800801c:	e025      	b.n	800806a <HAL_GPIO_Init+0x26a>
 800801e:	2305      	movs	r3, #5
 8008020:	e023      	b.n	800806a <HAL_GPIO_Init+0x26a>
 8008022:	2304      	movs	r3, #4
 8008024:	e021      	b.n	800806a <HAL_GPIO_Init+0x26a>
 8008026:	2303      	movs	r3, #3
 8008028:	e01f      	b.n	800806a <HAL_GPIO_Init+0x26a>
 800802a:	2302      	movs	r3, #2
 800802c:	e01d      	b.n	800806a <HAL_GPIO_Init+0x26a>
 800802e:	2301      	movs	r3, #1
 8008030:	e01b      	b.n	800806a <HAL_GPIO_Init+0x26a>
 8008032:	bf00      	nop
 8008034:	58000080 	.word	0x58000080
 8008038:	58024400 	.word	0x58024400
 800803c:	58000400 	.word	0x58000400
 8008040:	58020000 	.word	0x58020000
 8008044:	58020400 	.word	0x58020400
 8008048:	58020800 	.word	0x58020800
 800804c:	58020c00 	.word	0x58020c00
 8008050:	58021000 	.word	0x58021000
 8008054:	58021400 	.word	0x58021400
 8008058:	58021800 	.word	0x58021800
 800805c:	58021c00 	.word	0x58021c00
 8008060:	58022000 	.word	0x58022000
 8008064:	58022400 	.word	0x58022400
 8008068:	2300      	movs	r3, #0
 800806a:	69fa      	ldr	r2, [r7, #28]
 800806c:	f002 0203 	and.w	r2, r2, #3
 8008070:	0092      	lsls	r2, r2, #2
 8008072:	4093      	lsls	r3, r2
 8008074:	69ba      	ldr	r2, [r7, #24]
 8008076:	4313      	orrs	r3, r2
 8008078:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800807a:	4938      	ldr	r1, [pc, #224]	; (800815c <HAL_GPIO_Init+0x35c>)
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	089b      	lsrs	r3, r3, #2
 8008080:	3302      	adds	r3, #2
 8008082:	69ba      	ldr	r2, [r7, #24]
 8008084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	43db      	mvns	r3, r3
 8008094:	69ba      	ldr	r2, [r7, #24]
 8008096:	4013      	ands	r3, r2
 8008098:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d003      	beq.n	80080ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80080a6:	69ba      	ldr	r2, [r7, #24]
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80080ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80080b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	43db      	mvns	r3, r3
 80080c2:	69ba      	ldr	r2, [r7, #24]
 80080c4:	4013      	ands	r3, r2
 80080c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d003      	beq.n	80080dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80080d4:	69ba      	ldr	r2, [r7, #24]
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	4313      	orrs	r3, r2
 80080da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80080dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	43db      	mvns	r3, r3
 80080ee:	69ba      	ldr	r2, [r7, #24]
 80080f0:	4013      	ands	r3, r2
 80080f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d003      	beq.n	8008108 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008100:	69ba      	ldr	r2, [r7, #24]
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	4313      	orrs	r3, r2
 8008106:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	69ba      	ldr	r2, [r7, #24]
 800810c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	43db      	mvns	r3, r3
 8008118:	69ba      	ldr	r2, [r7, #24]
 800811a:	4013      	ands	r3, r2
 800811c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008126:	2b00      	cmp	r3, #0
 8008128:	d003      	beq.n	8008132 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800812a:	69ba      	ldr	r2, [r7, #24]
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	4313      	orrs	r3, r2
 8008130:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	69ba      	ldr	r2, [r7, #24]
 8008136:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	3301      	adds	r3, #1
 800813c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	fa22 f303 	lsr.w	r3, r2, r3
 8008148:	2b00      	cmp	r3, #0
 800814a:	f47f ae63 	bne.w	8007e14 <HAL_GPIO_Init+0x14>
  }
}
 800814e:	bf00      	nop
 8008150:	bf00      	nop
 8008152:	3724      	adds	r7, #36	; 0x24
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr
 800815c:	58000400 	.word	0x58000400

08008160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	460b      	mov	r3, r1
 800816a:	807b      	strh	r3, [r7, #2]
 800816c:	4613      	mov	r3, r2
 800816e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008170:	787b      	ldrb	r3, [r7, #1]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008176:	887a      	ldrh	r2, [r7, #2]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800817c:	e003      	b.n	8008186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800817e:	887b      	ldrh	r3, [r7, #2]
 8008180:	041a      	lsls	r2, r3, #16
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	619a      	str	r2, [r3, #24]
}
 8008186:	bf00      	nop
 8008188:	370c      	adds	r7, #12
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr

08008192 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b082      	sub	sp, #8
 8008196:	af00      	add	r7, sp, #0
 8008198:	4603      	mov	r3, r0
 800819a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800819c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081a0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80081a4:	88fb      	ldrh	r3, [r7, #6]
 80081a6:	4013      	ands	r3, r2
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d008      	beq.n	80081be <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80081ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081b0:	88fb      	ldrh	r3, [r7, #6]
 80081b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80081b6:	88fb      	ldrh	r3, [r7, #6]
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7fa ff01 	bl	8002fc0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80081be:	bf00      	nop
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
	...

080081c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80081d0:	4b19      	ldr	r3, [pc, #100]	; (8008238 <HAL_PWREx_ConfigSupply+0x70>)
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	f003 0304 	and.w	r3, r3, #4
 80081d8:	2b04      	cmp	r3, #4
 80081da:	d00a      	beq.n	80081f2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80081dc:	4b16      	ldr	r3, [pc, #88]	; (8008238 <HAL_PWREx_ConfigSupply+0x70>)
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	f003 0307 	and.w	r3, r3, #7
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d001      	beq.n	80081ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	e01f      	b.n	800822e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80081ee:	2300      	movs	r3, #0
 80081f0:	e01d      	b.n	800822e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80081f2:	4b11      	ldr	r3, [pc, #68]	; (8008238 <HAL_PWREx_ConfigSupply+0x70>)
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	f023 0207 	bic.w	r2, r3, #7
 80081fa:	490f      	ldr	r1, [pc, #60]	; (8008238 <HAL_PWREx_ConfigSupply+0x70>)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4313      	orrs	r3, r2
 8008200:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008202:	f7fc fc91 	bl	8004b28 <HAL_GetTick>
 8008206:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008208:	e009      	b.n	800821e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800820a:	f7fc fc8d 	bl	8004b28 <HAL_GetTick>
 800820e:	4602      	mov	r2, r0
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008218:	d901      	bls.n	800821e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800821a:	2301      	movs	r3, #1
 800821c:	e007      	b.n	800822e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800821e:	4b06      	ldr	r3, [pc, #24]	; (8008238 <HAL_PWREx_ConfigSupply+0x70>)
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800822a:	d1ee      	bne.n	800820a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	58024800 	.word	0x58024800

0800823c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b08c      	sub	sp, #48	; 0x30
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d102      	bne.n	8008250 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	f000 bc1c 	b.w	8008a88 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 0301 	and.w	r3, r3, #1
 8008258:	2b00      	cmp	r3, #0
 800825a:	f000 8087 	beq.w	800836c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800825e:	4b9e      	ldr	r3, [pc, #632]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008266:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008268:	4b9b      	ldr	r3, [pc, #620]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 800826a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800826c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800826e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008270:	2b10      	cmp	r3, #16
 8008272:	d007      	beq.n	8008284 <HAL_RCC_OscConfig+0x48>
 8008274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008276:	2b18      	cmp	r3, #24
 8008278:	d110      	bne.n	800829c <HAL_RCC_OscConfig+0x60>
 800827a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827c:	f003 0303 	and.w	r3, r3, #3
 8008280:	2b02      	cmp	r3, #2
 8008282:	d10b      	bne.n	800829c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008284:	4b94      	ldr	r3, [pc, #592]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800828c:	2b00      	cmp	r3, #0
 800828e:	d06c      	beq.n	800836a <HAL_RCC_OscConfig+0x12e>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d168      	bne.n	800836a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	e3f5      	b.n	8008a88 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082a4:	d106      	bne.n	80082b4 <HAL_RCC_OscConfig+0x78>
 80082a6:	4b8c      	ldr	r3, [pc, #560]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a8b      	ldr	r2, [pc, #556]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 80082ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082b0:	6013      	str	r3, [r2, #0]
 80082b2:	e02e      	b.n	8008312 <HAL_RCC_OscConfig+0xd6>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d10c      	bne.n	80082d6 <HAL_RCC_OscConfig+0x9a>
 80082bc:	4b86      	ldr	r3, [pc, #536]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a85      	ldr	r2, [pc, #532]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 80082c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082c6:	6013      	str	r3, [r2, #0]
 80082c8:	4b83      	ldr	r3, [pc, #524]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a82      	ldr	r2, [pc, #520]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 80082ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082d2:	6013      	str	r3, [r2, #0]
 80082d4:	e01d      	b.n	8008312 <HAL_RCC_OscConfig+0xd6>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80082de:	d10c      	bne.n	80082fa <HAL_RCC_OscConfig+0xbe>
 80082e0:	4b7d      	ldr	r3, [pc, #500]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a7c      	ldr	r2, [pc, #496]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 80082e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80082ea:	6013      	str	r3, [r2, #0]
 80082ec:	4b7a      	ldr	r3, [pc, #488]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a79      	ldr	r2, [pc, #484]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 80082f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082f6:	6013      	str	r3, [r2, #0]
 80082f8:	e00b      	b.n	8008312 <HAL_RCC_OscConfig+0xd6>
 80082fa:	4b77      	ldr	r3, [pc, #476]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a76      	ldr	r2, [pc, #472]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 8008300:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008304:	6013      	str	r3, [r2, #0]
 8008306:	4b74      	ldr	r3, [pc, #464]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a73      	ldr	r2, [pc, #460]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 800830c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008310:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d013      	beq.n	8008342 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800831a:	f7fc fc05 	bl	8004b28 <HAL_GetTick>
 800831e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008320:	e008      	b.n	8008334 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008322:	f7fc fc01 	bl	8004b28 <HAL_GetTick>
 8008326:	4602      	mov	r2, r0
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	1ad3      	subs	r3, r2, r3
 800832c:	2b64      	cmp	r3, #100	; 0x64
 800832e:	d901      	bls.n	8008334 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8008330:	2303      	movs	r3, #3
 8008332:	e3a9      	b.n	8008a88 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008334:	4b68      	ldr	r3, [pc, #416]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800833c:	2b00      	cmp	r3, #0
 800833e:	d0f0      	beq.n	8008322 <HAL_RCC_OscConfig+0xe6>
 8008340:	e014      	b.n	800836c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008342:	f7fc fbf1 	bl	8004b28 <HAL_GetTick>
 8008346:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008348:	e008      	b.n	800835c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800834a:	f7fc fbed 	bl	8004b28 <HAL_GetTick>
 800834e:	4602      	mov	r2, r0
 8008350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008352:	1ad3      	subs	r3, r2, r3
 8008354:	2b64      	cmp	r3, #100	; 0x64
 8008356:	d901      	bls.n	800835c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8008358:	2303      	movs	r3, #3
 800835a:	e395      	b.n	8008a88 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800835c:	4b5e      	ldr	r3, [pc, #376]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008364:	2b00      	cmp	r3, #0
 8008366:	d1f0      	bne.n	800834a <HAL_RCC_OscConfig+0x10e>
 8008368:	e000      	b.n	800836c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800836a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 0302 	and.w	r3, r3, #2
 8008374:	2b00      	cmp	r3, #0
 8008376:	f000 80ca 	beq.w	800850e <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800837a:	4b57      	ldr	r3, [pc, #348]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 800837c:	691b      	ldr	r3, [r3, #16]
 800837e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008382:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008384:	4b54      	ldr	r3, [pc, #336]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 8008386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008388:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800838a:	6a3b      	ldr	r3, [r7, #32]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d007      	beq.n	80083a0 <HAL_RCC_OscConfig+0x164>
 8008390:	6a3b      	ldr	r3, [r7, #32]
 8008392:	2b18      	cmp	r3, #24
 8008394:	d156      	bne.n	8008444 <HAL_RCC_OscConfig+0x208>
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	f003 0303 	and.w	r3, r3, #3
 800839c:	2b00      	cmp	r3, #0
 800839e:	d151      	bne.n	8008444 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083a0:	4b4d      	ldr	r3, [pc, #308]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 0304 	and.w	r3, r3, #4
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d005      	beq.n	80083b8 <HAL_RCC_OscConfig+0x17c>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d101      	bne.n	80083b8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80083b4:	2301      	movs	r3, #1
 80083b6:	e367      	b.n	8008a88 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80083b8:	4b47      	ldr	r3, [pc, #284]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f023 0219 	bic.w	r2, r3, #25
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	4944      	ldr	r1, [pc, #272]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 80083c6:	4313      	orrs	r3, r2
 80083c8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80083ca:	f7fc fbad 	bl	8004b28 <HAL_GetTick>
 80083ce:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083d0:	e008      	b.n	80083e4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80083d2:	f7fc fba9 	bl	8004b28 <HAL_GetTick>
 80083d6:	4602      	mov	r2, r0
 80083d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083da:	1ad3      	subs	r3, r2, r3
 80083dc:	2b02      	cmp	r3, #2
 80083de:	d901      	bls.n	80083e4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80083e0:	2303      	movs	r3, #3
 80083e2:	e351      	b.n	8008a88 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083e4:	4b3c      	ldr	r3, [pc, #240]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f003 0304 	and.w	r3, r3, #4
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d0f0      	beq.n	80083d2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083f0:	f7fc fba6 	bl	8004b40 <HAL_GetREVID>
 80083f4:	4603      	mov	r3, r0
 80083f6:	f241 0203 	movw	r2, #4099	; 0x1003
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d817      	bhi.n	800842e <HAL_RCC_OscConfig+0x1f2>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	2b40      	cmp	r3, #64	; 0x40
 8008404:	d108      	bne.n	8008418 <HAL_RCC_OscConfig+0x1dc>
 8008406:	4b34      	ldr	r3, [pc, #208]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800840e:	4a32      	ldr	r2, [pc, #200]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 8008410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008414:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008416:	e07a      	b.n	800850e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008418:	4b2f      	ldr	r3, [pc, #188]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	031b      	lsls	r3, r3, #12
 8008426:	492c      	ldr	r1, [pc, #176]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 8008428:	4313      	orrs	r3, r2
 800842a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800842c:	e06f      	b.n	800850e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800842e:	4b2a      	ldr	r3, [pc, #168]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	061b      	lsls	r3, r3, #24
 800843c:	4926      	ldr	r1, [pc, #152]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 800843e:	4313      	orrs	r3, r2
 8008440:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008442:	e064      	b.n	800850e <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d047      	beq.n	80084dc <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800844c:	4b22      	ldr	r3, [pc, #136]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f023 0219 	bic.w	r2, r3, #25
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	491f      	ldr	r1, [pc, #124]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 800845a:	4313      	orrs	r3, r2
 800845c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800845e:	f7fc fb63 	bl	8004b28 <HAL_GetTick>
 8008462:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008464:	e008      	b.n	8008478 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008466:	f7fc fb5f 	bl	8004b28 <HAL_GetTick>
 800846a:	4602      	mov	r2, r0
 800846c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846e:	1ad3      	subs	r3, r2, r3
 8008470:	2b02      	cmp	r3, #2
 8008472:	d901      	bls.n	8008478 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8008474:	2303      	movs	r3, #3
 8008476:	e307      	b.n	8008a88 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008478:	4b17      	ldr	r3, [pc, #92]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f003 0304 	and.w	r3, r3, #4
 8008480:	2b00      	cmp	r3, #0
 8008482:	d0f0      	beq.n	8008466 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008484:	f7fc fb5c 	bl	8004b40 <HAL_GetREVID>
 8008488:	4603      	mov	r3, r0
 800848a:	f241 0203 	movw	r2, #4099	; 0x1003
 800848e:	4293      	cmp	r3, r2
 8008490:	d817      	bhi.n	80084c2 <HAL_RCC_OscConfig+0x286>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	691b      	ldr	r3, [r3, #16]
 8008496:	2b40      	cmp	r3, #64	; 0x40
 8008498:	d108      	bne.n	80084ac <HAL_RCC_OscConfig+0x270>
 800849a:	4b0f      	ldr	r3, [pc, #60]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80084a2:	4a0d      	ldr	r2, [pc, #52]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 80084a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084a8:	6053      	str	r3, [r2, #4]
 80084aa:	e030      	b.n	800850e <HAL_RCC_OscConfig+0x2d2>
 80084ac:	4b0a      	ldr	r3, [pc, #40]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	031b      	lsls	r3, r3, #12
 80084ba:	4907      	ldr	r1, [pc, #28]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 80084bc:	4313      	orrs	r3, r2
 80084be:	604b      	str	r3, [r1, #4]
 80084c0:	e025      	b.n	800850e <HAL_RCC_OscConfig+0x2d2>
 80084c2:	4b05      	ldr	r3, [pc, #20]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	691b      	ldr	r3, [r3, #16]
 80084ce:	061b      	lsls	r3, r3, #24
 80084d0:	4901      	ldr	r1, [pc, #4]	; (80084d8 <HAL_RCC_OscConfig+0x29c>)
 80084d2:	4313      	orrs	r3, r2
 80084d4:	604b      	str	r3, [r1, #4]
 80084d6:	e01a      	b.n	800850e <HAL_RCC_OscConfig+0x2d2>
 80084d8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80084dc:	4b9e      	ldr	r3, [pc, #632]	; (8008758 <HAL_RCC_OscConfig+0x51c>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a9d      	ldr	r2, [pc, #628]	; (8008758 <HAL_RCC_OscConfig+0x51c>)
 80084e2:	f023 0301 	bic.w	r3, r3, #1
 80084e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084e8:	f7fc fb1e 	bl	8004b28 <HAL_GetTick>
 80084ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80084ee:	e008      	b.n	8008502 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80084f0:	f7fc fb1a 	bl	8004b28 <HAL_GetTick>
 80084f4:	4602      	mov	r2, r0
 80084f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d901      	bls.n	8008502 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80084fe:	2303      	movs	r3, #3
 8008500:	e2c2      	b.n	8008a88 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008502:	4b95      	ldr	r3, [pc, #596]	; (8008758 <HAL_RCC_OscConfig+0x51c>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 0304 	and.w	r3, r3, #4
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1f0      	bne.n	80084f0 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f003 0310 	and.w	r3, r3, #16
 8008516:	2b00      	cmp	r3, #0
 8008518:	f000 80a9 	beq.w	800866e <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800851c:	4b8e      	ldr	r3, [pc, #568]	; (8008758 <HAL_RCC_OscConfig+0x51c>)
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008524:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008526:	4b8c      	ldr	r3, [pc, #560]	; (8008758 <HAL_RCC_OscConfig+0x51c>)
 8008528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800852a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800852c:	69bb      	ldr	r3, [r7, #24]
 800852e:	2b08      	cmp	r3, #8
 8008530:	d007      	beq.n	8008542 <HAL_RCC_OscConfig+0x306>
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	2b18      	cmp	r3, #24
 8008536:	d13a      	bne.n	80085ae <HAL_RCC_OscConfig+0x372>
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	f003 0303 	and.w	r3, r3, #3
 800853e:	2b01      	cmp	r3, #1
 8008540:	d135      	bne.n	80085ae <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008542:	4b85      	ldr	r3, [pc, #532]	; (8008758 <HAL_RCC_OscConfig+0x51c>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800854a:	2b00      	cmp	r3, #0
 800854c:	d005      	beq.n	800855a <HAL_RCC_OscConfig+0x31e>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	69db      	ldr	r3, [r3, #28]
 8008552:	2b80      	cmp	r3, #128	; 0x80
 8008554:	d001      	beq.n	800855a <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	e296      	b.n	8008a88 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800855a:	f7fc faf1 	bl	8004b40 <HAL_GetREVID>
 800855e:	4603      	mov	r3, r0
 8008560:	f241 0203 	movw	r2, #4099	; 0x1003
 8008564:	4293      	cmp	r3, r2
 8008566:	d817      	bhi.n	8008598 <HAL_RCC_OscConfig+0x35c>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6a1b      	ldr	r3, [r3, #32]
 800856c:	2b20      	cmp	r3, #32
 800856e:	d108      	bne.n	8008582 <HAL_RCC_OscConfig+0x346>
 8008570:	4b79      	ldr	r3, [pc, #484]	; (8008758 <HAL_RCC_OscConfig+0x51c>)
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008578:	4a77      	ldr	r2, [pc, #476]	; (8008758 <HAL_RCC_OscConfig+0x51c>)
 800857a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800857e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008580:	e075      	b.n	800866e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008582:	4b75      	ldr	r3, [pc, #468]	; (8008758 <HAL_RCC_OscConfig+0x51c>)
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a1b      	ldr	r3, [r3, #32]
 800858e:	069b      	lsls	r3, r3, #26
 8008590:	4971      	ldr	r1, [pc, #452]	; (8008758 <HAL_RCC_OscConfig+0x51c>)
 8008592:	4313      	orrs	r3, r2
 8008594:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008596:	e06a      	b.n	800866e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008598:	4b6f      	ldr	r3, [pc, #444]	; (8008758 <HAL_RCC_OscConfig+0x51c>)
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6a1b      	ldr	r3, [r3, #32]
 80085a4:	061b      	lsls	r3, r3, #24
 80085a6:	496c      	ldr	r1, [pc, #432]	; (8008758 <HAL_RCC_OscConfig+0x51c>)
 80085a8:	4313      	orrs	r3, r2
 80085aa:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80085ac:	e05f      	b.n	800866e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	69db      	ldr	r3, [r3, #28]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d042      	beq.n	800863c <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80085b6:	4b68      	ldr	r3, [pc, #416]	; (8008758 <HAL_RCC_OscConfig+0x51c>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a67      	ldr	r2, [pc, #412]	; (8008758 <HAL_RCC_OscConfig+0x51c>)
 80085bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085c2:	f7fc fab1 	bl	8004b28 <HAL_GetTick>
 80085c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80085c8:	e008      	b.n	80085dc <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80085ca:	f7fc faad 	bl	8004b28 <HAL_GetTick>
 80085ce:	4602      	mov	r2, r0
 80085d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d2:	1ad3      	subs	r3, r2, r3
 80085d4:	2b02      	cmp	r3, #2
 80085d6:	d901      	bls.n	80085dc <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 80085d8:	2303      	movs	r3, #3
 80085da:	e255      	b.n	8008a88 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80085dc:	4b5e      	ldr	r3, [pc, #376]	; (8008758 <HAL_RCC_OscConfig+0x51c>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d0f0      	beq.n	80085ca <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80085e8:	f7fc faaa 	bl	8004b40 <HAL_GetREVID>
 80085ec:	4603      	mov	r3, r0
 80085ee:	f241 0203 	movw	r2, #4099	; 0x1003
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d817      	bhi.n	8008626 <HAL_RCC_OscConfig+0x3ea>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a1b      	ldr	r3, [r3, #32]
 80085fa:	2b20      	cmp	r3, #32
 80085fc:	d108      	bne.n	8008610 <HAL_RCC_OscConfig+0x3d4>
 80085fe:	4b56      	ldr	r3, [pc, #344]	; (8008758 <HAL_RCC_OscConfig+0x51c>)
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008606:	4a54      	ldr	r2, [pc, #336]	; (8008758 <HAL_RCC_OscConfig+0x51c>)
 8008608:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800860c:	6053      	str	r3, [r2, #4]
 800860e:	e02e      	b.n	800866e <HAL_RCC_OscConfig+0x432>
 8008610:	4b51      	ldr	r3, [pc, #324]	; (8008758 <HAL_RCC_OscConfig+0x51c>)
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6a1b      	ldr	r3, [r3, #32]
 800861c:	069b      	lsls	r3, r3, #26
 800861e:	494e      	ldr	r1, [pc, #312]	; (8008758 <HAL_RCC_OscConfig+0x51c>)
 8008620:	4313      	orrs	r3, r2
 8008622:	604b      	str	r3, [r1, #4]
 8008624:	e023      	b.n	800866e <HAL_RCC_OscConfig+0x432>
 8008626:	4b4c      	ldr	r3, [pc, #304]	; (8008758 <HAL_RCC_OscConfig+0x51c>)
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a1b      	ldr	r3, [r3, #32]
 8008632:	061b      	lsls	r3, r3, #24
 8008634:	4948      	ldr	r1, [pc, #288]	; (8008758 <HAL_RCC_OscConfig+0x51c>)
 8008636:	4313      	orrs	r3, r2
 8008638:	60cb      	str	r3, [r1, #12]
 800863a:	e018      	b.n	800866e <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800863c:	4b46      	ldr	r3, [pc, #280]	; (8008758 <HAL_RCC_OscConfig+0x51c>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a45      	ldr	r2, [pc, #276]	; (8008758 <HAL_RCC_OscConfig+0x51c>)
 8008642:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008648:	f7fc fa6e 	bl	8004b28 <HAL_GetTick>
 800864c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800864e:	e008      	b.n	8008662 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008650:	f7fc fa6a 	bl	8004b28 <HAL_GetTick>
 8008654:	4602      	mov	r2, r0
 8008656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	2b02      	cmp	r3, #2
 800865c:	d901      	bls.n	8008662 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 800865e:	2303      	movs	r3, #3
 8008660:	e212      	b.n	8008a88 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008662:	4b3d      	ldr	r3, [pc, #244]	; (8008758 <HAL_RCC_OscConfig+0x51c>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1f0      	bne.n	8008650 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 0308 	and.w	r3, r3, #8
 8008676:	2b00      	cmp	r3, #0
 8008678:	d036      	beq.n	80086e8 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	695b      	ldr	r3, [r3, #20]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d019      	beq.n	80086b6 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008682:	4b35      	ldr	r3, [pc, #212]	; (8008758 <HAL_RCC_OscConfig+0x51c>)
 8008684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008686:	4a34      	ldr	r2, [pc, #208]	; (8008758 <HAL_RCC_OscConfig+0x51c>)
 8008688:	f043 0301 	orr.w	r3, r3, #1
 800868c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800868e:	f7fc fa4b 	bl	8004b28 <HAL_GetTick>
 8008692:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008694:	e008      	b.n	80086a8 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008696:	f7fc fa47 	bl	8004b28 <HAL_GetTick>
 800869a:	4602      	mov	r2, r0
 800869c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869e:	1ad3      	subs	r3, r2, r3
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d901      	bls.n	80086a8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80086a4:	2303      	movs	r3, #3
 80086a6:	e1ef      	b.n	8008a88 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80086a8:	4b2b      	ldr	r3, [pc, #172]	; (8008758 <HAL_RCC_OscConfig+0x51c>)
 80086aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086ac:	f003 0302 	and.w	r3, r3, #2
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d0f0      	beq.n	8008696 <HAL_RCC_OscConfig+0x45a>
 80086b4:	e018      	b.n	80086e8 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80086b6:	4b28      	ldr	r3, [pc, #160]	; (8008758 <HAL_RCC_OscConfig+0x51c>)
 80086b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086ba:	4a27      	ldr	r2, [pc, #156]	; (8008758 <HAL_RCC_OscConfig+0x51c>)
 80086bc:	f023 0301 	bic.w	r3, r3, #1
 80086c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086c2:	f7fc fa31 	bl	8004b28 <HAL_GetTick>
 80086c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80086c8:	e008      	b.n	80086dc <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086ca:	f7fc fa2d 	bl	8004b28 <HAL_GetTick>
 80086ce:	4602      	mov	r2, r0
 80086d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d2:	1ad3      	subs	r3, r2, r3
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d901      	bls.n	80086dc <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80086d8:	2303      	movs	r3, #3
 80086da:	e1d5      	b.n	8008a88 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80086dc:	4b1e      	ldr	r3, [pc, #120]	; (8008758 <HAL_RCC_OscConfig+0x51c>)
 80086de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086e0:	f003 0302 	and.w	r3, r3, #2
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d1f0      	bne.n	80086ca <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f003 0320 	and.w	r3, r3, #32
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d039      	beq.n	8008768 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	699b      	ldr	r3, [r3, #24]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d019      	beq.n	8008730 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80086fc:	4b16      	ldr	r3, [pc, #88]	; (8008758 <HAL_RCC_OscConfig+0x51c>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a15      	ldr	r2, [pc, #84]	; (8008758 <HAL_RCC_OscConfig+0x51c>)
 8008702:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008706:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008708:	f7fc fa0e 	bl	8004b28 <HAL_GetTick>
 800870c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800870e:	e008      	b.n	8008722 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008710:	f7fc fa0a 	bl	8004b28 <HAL_GetTick>
 8008714:	4602      	mov	r2, r0
 8008716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	2b02      	cmp	r3, #2
 800871c:	d901      	bls.n	8008722 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 800871e:	2303      	movs	r3, #3
 8008720:	e1b2      	b.n	8008a88 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008722:	4b0d      	ldr	r3, [pc, #52]	; (8008758 <HAL_RCC_OscConfig+0x51c>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800872a:	2b00      	cmp	r3, #0
 800872c:	d0f0      	beq.n	8008710 <HAL_RCC_OscConfig+0x4d4>
 800872e:	e01b      	b.n	8008768 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008730:	4b09      	ldr	r3, [pc, #36]	; (8008758 <HAL_RCC_OscConfig+0x51c>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a08      	ldr	r2, [pc, #32]	; (8008758 <HAL_RCC_OscConfig+0x51c>)
 8008736:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800873a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800873c:	f7fc f9f4 	bl	8004b28 <HAL_GetTick>
 8008740:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008742:	e00b      	b.n	800875c <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008744:	f7fc f9f0 	bl	8004b28 <HAL_GetTick>
 8008748:	4602      	mov	r2, r0
 800874a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	2b02      	cmp	r3, #2
 8008750:	d904      	bls.n	800875c <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8008752:	2303      	movs	r3, #3
 8008754:	e198      	b.n	8008a88 <HAL_RCC_OscConfig+0x84c>
 8008756:	bf00      	nop
 8008758:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800875c:	4ba3      	ldr	r3, [pc, #652]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1ed      	bne.n	8008744 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f003 0304 	and.w	r3, r3, #4
 8008770:	2b00      	cmp	r3, #0
 8008772:	f000 8081 	beq.w	8008878 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008776:	4b9e      	ldr	r3, [pc, #632]	; (80089f0 <HAL_RCC_OscConfig+0x7b4>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a9d      	ldr	r2, [pc, #628]	; (80089f0 <HAL_RCC_OscConfig+0x7b4>)
 800877c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008780:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008782:	f7fc f9d1 	bl	8004b28 <HAL_GetTick>
 8008786:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008788:	e008      	b.n	800879c <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800878a:	f7fc f9cd 	bl	8004b28 <HAL_GetTick>
 800878e:	4602      	mov	r2, r0
 8008790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	2b64      	cmp	r3, #100	; 0x64
 8008796:	d901      	bls.n	800879c <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8008798:	2303      	movs	r3, #3
 800879a:	e175      	b.n	8008a88 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800879c:	4b94      	ldr	r3, [pc, #592]	; (80089f0 <HAL_RCC_OscConfig+0x7b4>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d0f0      	beq.n	800878a <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d106      	bne.n	80087be <HAL_RCC_OscConfig+0x582>
 80087b0:	4b8e      	ldr	r3, [pc, #568]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 80087b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087b4:	4a8d      	ldr	r2, [pc, #564]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 80087b6:	f043 0301 	orr.w	r3, r3, #1
 80087ba:	6713      	str	r3, [r2, #112]	; 0x70
 80087bc:	e02d      	b.n	800881a <HAL_RCC_OscConfig+0x5de>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d10c      	bne.n	80087e0 <HAL_RCC_OscConfig+0x5a4>
 80087c6:	4b89      	ldr	r3, [pc, #548]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 80087c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ca:	4a88      	ldr	r2, [pc, #544]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 80087cc:	f023 0301 	bic.w	r3, r3, #1
 80087d0:	6713      	str	r3, [r2, #112]	; 0x70
 80087d2:	4b86      	ldr	r3, [pc, #536]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 80087d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087d6:	4a85      	ldr	r2, [pc, #532]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 80087d8:	f023 0304 	bic.w	r3, r3, #4
 80087dc:	6713      	str	r3, [r2, #112]	; 0x70
 80087de:	e01c      	b.n	800881a <HAL_RCC_OscConfig+0x5de>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	2b05      	cmp	r3, #5
 80087e6:	d10c      	bne.n	8008802 <HAL_RCC_OscConfig+0x5c6>
 80087e8:	4b80      	ldr	r3, [pc, #512]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 80087ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ec:	4a7f      	ldr	r2, [pc, #508]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 80087ee:	f043 0304 	orr.w	r3, r3, #4
 80087f2:	6713      	str	r3, [r2, #112]	; 0x70
 80087f4:	4b7d      	ldr	r3, [pc, #500]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 80087f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087f8:	4a7c      	ldr	r2, [pc, #496]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 80087fa:	f043 0301 	orr.w	r3, r3, #1
 80087fe:	6713      	str	r3, [r2, #112]	; 0x70
 8008800:	e00b      	b.n	800881a <HAL_RCC_OscConfig+0x5de>
 8008802:	4b7a      	ldr	r3, [pc, #488]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 8008804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008806:	4a79      	ldr	r2, [pc, #484]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 8008808:	f023 0301 	bic.w	r3, r3, #1
 800880c:	6713      	str	r3, [r2, #112]	; 0x70
 800880e:	4b77      	ldr	r3, [pc, #476]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 8008810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008812:	4a76      	ldr	r2, [pc, #472]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 8008814:	f023 0304 	bic.w	r3, r3, #4
 8008818:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d015      	beq.n	800884e <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008822:	f7fc f981 	bl	8004b28 <HAL_GetTick>
 8008826:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008828:	e00a      	b.n	8008840 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800882a:	f7fc f97d 	bl	8004b28 <HAL_GetTick>
 800882e:	4602      	mov	r2, r0
 8008830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008832:	1ad3      	subs	r3, r2, r3
 8008834:	f241 3288 	movw	r2, #5000	; 0x1388
 8008838:	4293      	cmp	r3, r2
 800883a:	d901      	bls.n	8008840 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 800883c:	2303      	movs	r3, #3
 800883e:	e123      	b.n	8008a88 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008840:	4b6a      	ldr	r3, [pc, #424]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 8008842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008844:	f003 0302 	and.w	r3, r3, #2
 8008848:	2b00      	cmp	r3, #0
 800884a:	d0ee      	beq.n	800882a <HAL_RCC_OscConfig+0x5ee>
 800884c:	e014      	b.n	8008878 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800884e:	f7fc f96b 	bl	8004b28 <HAL_GetTick>
 8008852:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008854:	e00a      	b.n	800886c <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008856:	f7fc f967 	bl	8004b28 <HAL_GetTick>
 800885a:	4602      	mov	r2, r0
 800885c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885e:	1ad3      	subs	r3, r2, r3
 8008860:	f241 3288 	movw	r2, #5000	; 0x1388
 8008864:	4293      	cmp	r3, r2
 8008866:	d901      	bls.n	800886c <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8008868:	2303      	movs	r3, #3
 800886a:	e10d      	b.n	8008a88 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800886c:	4b5f      	ldr	r3, [pc, #380]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 800886e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008870:	f003 0302 	and.w	r3, r3, #2
 8008874:	2b00      	cmp	r3, #0
 8008876:	d1ee      	bne.n	8008856 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887c:	2b00      	cmp	r3, #0
 800887e:	f000 8102 	beq.w	8008a86 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008882:	4b5a      	ldr	r3, [pc, #360]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800888a:	2b18      	cmp	r3, #24
 800888c:	f000 80bd 	beq.w	8008a0a <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008894:	2b02      	cmp	r3, #2
 8008896:	f040 8095 	bne.w	80089c4 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800889a:	4b54      	ldr	r3, [pc, #336]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a53      	ldr	r2, [pc, #332]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 80088a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80088a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088a6:	f7fc f93f 	bl	8004b28 <HAL_GetTick>
 80088aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80088ac:	e008      	b.n	80088c0 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088ae:	f7fc f93b 	bl	8004b28 <HAL_GetTick>
 80088b2:	4602      	mov	r2, r0
 80088b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b6:	1ad3      	subs	r3, r2, r3
 80088b8:	2b02      	cmp	r3, #2
 80088ba:	d901      	bls.n	80088c0 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 80088bc:	2303      	movs	r3, #3
 80088be:	e0e3      	b.n	8008a88 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80088c0:	4b4a      	ldr	r3, [pc, #296]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d1f0      	bne.n	80088ae <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80088cc:	4b47      	ldr	r3, [pc, #284]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 80088ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088d0:	4b48      	ldr	r3, [pc, #288]	; (80089f4 <HAL_RCC_OscConfig+0x7b8>)
 80088d2:	4013      	ands	r3, r2
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80088dc:	0112      	lsls	r2, r2, #4
 80088de:	430a      	orrs	r2, r1
 80088e0:	4942      	ldr	r1, [pc, #264]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 80088e2:	4313      	orrs	r3, r2
 80088e4:	628b      	str	r3, [r1, #40]	; 0x28
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ea:	3b01      	subs	r3, #1
 80088ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088f4:	3b01      	subs	r3, #1
 80088f6:	025b      	lsls	r3, r3, #9
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	431a      	orrs	r2, r3
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008900:	3b01      	subs	r3, #1
 8008902:	041b      	lsls	r3, r3, #16
 8008904:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008908:	431a      	orrs	r2, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800890e:	3b01      	subs	r3, #1
 8008910:	061b      	lsls	r3, r3, #24
 8008912:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008916:	4935      	ldr	r1, [pc, #212]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 8008918:	4313      	orrs	r3, r2
 800891a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800891c:	4b33      	ldr	r3, [pc, #204]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 800891e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008920:	4a32      	ldr	r2, [pc, #200]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 8008922:	f023 0301 	bic.w	r3, r3, #1
 8008926:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008928:	4b30      	ldr	r3, [pc, #192]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 800892a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800892c:	4b32      	ldr	r3, [pc, #200]	; (80089f8 <HAL_RCC_OscConfig+0x7bc>)
 800892e:	4013      	ands	r3, r2
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008934:	00d2      	lsls	r2, r2, #3
 8008936:	492d      	ldr	r1, [pc, #180]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 8008938:	4313      	orrs	r3, r2
 800893a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800893c:	4b2b      	ldr	r3, [pc, #172]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 800893e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008940:	f023 020c 	bic.w	r2, r3, #12
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008948:	4928      	ldr	r1, [pc, #160]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 800894a:	4313      	orrs	r3, r2
 800894c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800894e:	4b27      	ldr	r3, [pc, #156]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 8008950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008952:	f023 0202 	bic.w	r2, r3, #2
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800895a:	4924      	ldr	r1, [pc, #144]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 800895c:	4313      	orrs	r3, r2
 800895e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008960:	4b22      	ldr	r3, [pc, #136]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 8008962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008964:	4a21      	ldr	r2, [pc, #132]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 8008966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800896a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800896c:	4b1f      	ldr	r3, [pc, #124]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 800896e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008970:	4a1e      	ldr	r2, [pc, #120]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 8008972:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008976:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008978:	4b1c      	ldr	r3, [pc, #112]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 800897a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897c:	4a1b      	ldr	r2, [pc, #108]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 800897e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008982:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008984:	4b19      	ldr	r3, [pc, #100]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 8008986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008988:	4a18      	ldr	r2, [pc, #96]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 800898a:	f043 0301 	orr.w	r3, r3, #1
 800898e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008990:	4b16      	ldr	r3, [pc, #88]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a15      	ldr	r2, [pc, #84]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 8008996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800899a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800899c:	f7fc f8c4 	bl	8004b28 <HAL_GetTick>
 80089a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80089a2:	e008      	b.n	80089b6 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089a4:	f7fc f8c0 	bl	8004b28 <HAL_GetTick>
 80089a8:	4602      	mov	r2, r0
 80089aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ac:	1ad3      	subs	r3, r2, r3
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	d901      	bls.n	80089b6 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 80089b2:	2303      	movs	r3, #3
 80089b4:	e068      	b.n	8008a88 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80089b6:	4b0d      	ldr	r3, [pc, #52]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d0f0      	beq.n	80089a4 <HAL_RCC_OscConfig+0x768>
 80089c2:	e060      	b.n	8008a86 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089c4:	4b09      	ldr	r3, [pc, #36]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a08      	ldr	r2, [pc, #32]	; (80089ec <HAL_RCC_OscConfig+0x7b0>)
 80089ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80089ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089d0:	f7fc f8aa 	bl	8004b28 <HAL_GetTick>
 80089d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089d6:	e011      	b.n	80089fc <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089d8:	f7fc f8a6 	bl	8004b28 <HAL_GetTick>
 80089dc:	4602      	mov	r2, r0
 80089de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	2b02      	cmp	r3, #2
 80089e4:	d90a      	bls.n	80089fc <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 80089e6:	2303      	movs	r3, #3
 80089e8:	e04e      	b.n	8008a88 <HAL_RCC_OscConfig+0x84c>
 80089ea:	bf00      	nop
 80089ec:	58024400 	.word	0x58024400
 80089f0:	58024800 	.word	0x58024800
 80089f4:	fffffc0c 	.word	0xfffffc0c
 80089f8:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089fc:	4b24      	ldr	r3, [pc, #144]	; (8008a90 <HAL_RCC_OscConfig+0x854>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d1e7      	bne.n	80089d8 <HAL_RCC_OscConfig+0x79c>
 8008a08:	e03d      	b.n	8008a86 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008a0a:	4b21      	ldr	r3, [pc, #132]	; (8008a90 <HAL_RCC_OscConfig+0x854>)
 8008a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a0e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008a10:	4b1f      	ldr	r3, [pc, #124]	; (8008a90 <HAL_RCC_OscConfig+0x854>)
 8008a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a14:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d031      	beq.n	8008a82 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	f003 0203 	and.w	r2, r3, #3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d12a      	bne.n	8008a82 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	091b      	lsrs	r3, r3, #4
 8008a30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d122      	bne.n	8008a82 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a46:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d11a      	bne.n	8008a82 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	0a5b      	lsrs	r3, r3, #9
 8008a50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a58:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d111      	bne.n	8008a82 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	0c1b      	lsrs	r3, r3, #16
 8008a62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a6a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d108      	bne.n	8008a82 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	0e1b      	lsrs	r3, r3, #24
 8008a74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a7c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d001      	beq.n	8008a86 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	e000      	b.n	8008a88 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3730      	adds	r7, #48	; 0x30
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	58024400 	.word	0x58024400

08008a94 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b086      	sub	sp, #24
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d101      	bne.n	8008aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e19c      	b.n	8008de2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008aa8:	4b8a      	ldr	r3, [pc, #552]	; (8008cd4 <HAL_RCC_ClockConfig+0x240>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f003 030f 	and.w	r3, r3, #15
 8008ab0:	683a      	ldr	r2, [r7, #0]
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d910      	bls.n	8008ad8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ab6:	4b87      	ldr	r3, [pc, #540]	; (8008cd4 <HAL_RCC_ClockConfig+0x240>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f023 020f 	bic.w	r2, r3, #15
 8008abe:	4985      	ldr	r1, [pc, #532]	; (8008cd4 <HAL_RCC_ClockConfig+0x240>)
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ac6:	4b83      	ldr	r3, [pc, #524]	; (8008cd4 <HAL_RCC_ClockConfig+0x240>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f003 030f 	and.w	r3, r3, #15
 8008ace:	683a      	ldr	r2, [r7, #0]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d001      	beq.n	8008ad8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e184      	b.n	8008de2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f003 0304 	and.w	r3, r3, #4
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d010      	beq.n	8008b06 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	691a      	ldr	r2, [r3, #16]
 8008ae8:	4b7b      	ldr	r3, [pc, #492]	; (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008aea:	699b      	ldr	r3, [r3, #24]
 8008aec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d908      	bls.n	8008b06 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008af4:	4b78      	ldr	r3, [pc, #480]	; (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008af6:	699b      	ldr	r3, [r3, #24]
 8008af8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	691b      	ldr	r3, [r3, #16]
 8008b00:	4975      	ldr	r1, [pc, #468]	; (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008b02:	4313      	orrs	r3, r2
 8008b04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f003 0308 	and.w	r3, r3, #8
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d010      	beq.n	8008b34 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	695a      	ldr	r2, [r3, #20]
 8008b16:	4b70      	ldr	r3, [pc, #448]	; (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008b18:	69db      	ldr	r3, [r3, #28]
 8008b1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d908      	bls.n	8008b34 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008b22:	4b6d      	ldr	r3, [pc, #436]	; (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008b24:	69db      	ldr	r3, [r3, #28]
 8008b26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	695b      	ldr	r3, [r3, #20]
 8008b2e:	496a      	ldr	r1, [pc, #424]	; (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008b30:	4313      	orrs	r3, r2
 8008b32:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f003 0310 	and.w	r3, r3, #16
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d010      	beq.n	8008b62 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	699a      	ldr	r2, [r3, #24]
 8008b44:	4b64      	ldr	r3, [pc, #400]	; (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008b46:	69db      	ldr	r3, [r3, #28]
 8008b48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d908      	bls.n	8008b62 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008b50:	4b61      	ldr	r3, [pc, #388]	; (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008b52:	69db      	ldr	r3, [r3, #28]
 8008b54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	699b      	ldr	r3, [r3, #24]
 8008b5c:	495e      	ldr	r1, [pc, #376]	; (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f003 0320 	and.w	r3, r3, #32
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d010      	beq.n	8008b90 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	69da      	ldr	r2, [r3, #28]
 8008b72:	4b59      	ldr	r3, [pc, #356]	; (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008b74:	6a1b      	ldr	r3, [r3, #32]
 8008b76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d908      	bls.n	8008b90 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008b7e:	4b56      	ldr	r3, [pc, #344]	; (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008b80:	6a1b      	ldr	r3, [r3, #32]
 8008b82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	69db      	ldr	r3, [r3, #28]
 8008b8a:	4953      	ldr	r1, [pc, #332]	; (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f003 0302 	and.w	r3, r3, #2
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d010      	beq.n	8008bbe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	68da      	ldr	r2, [r3, #12]
 8008ba0:	4b4d      	ldr	r3, [pc, #308]	; (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008ba2:	699b      	ldr	r3, [r3, #24]
 8008ba4:	f003 030f 	and.w	r3, r3, #15
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d908      	bls.n	8008bbe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008bac:	4b4a      	ldr	r3, [pc, #296]	; (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008bae:	699b      	ldr	r3, [r3, #24]
 8008bb0:	f023 020f 	bic.w	r2, r3, #15
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	4947      	ldr	r1, [pc, #284]	; (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f003 0301 	and.w	r3, r3, #1
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d055      	beq.n	8008c76 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008bca:	4b43      	ldr	r3, [pc, #268]	; (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008bcc:	699b      	ldr	r3, [r3, #24]
 8008bce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	4940      	ldr	r1, [pc, #256]	; (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	2b02      	cmp	r3, #2
 8008be2:	d107      	bne.n	8008bf4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008be4:	4b3c      	ldr	r3, [pc, #240]	; (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d121      	bne.n	8008c34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e0f6      	b.n	8008de2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	2b03      	cmp	r3, #3
 8008bfa:	d107      	bne.n	8008c0c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008bfc:	4b36      	ldr	r3, [pc, #216]	; (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d115      	bne.n	8008c34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e0ea      	b.n	8008de2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d107      	bne.n	8008c24 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008c14:	4b30      	ldr	r3, [pc, #192]	; (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d109      	bne.n	8008c34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e0de      	b.n	8008de2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c24:	4b2c      	ldr	r3, [pc, #176]	; (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 0304 	and.w	r3, r3, #4
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d101      	bne.n	8008c34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	e0d6      	b.n	8008de2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008c34:	4b28      	ldr	r3, [pc, #160]	; (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008c36:	691b      	ldr	r3, [r3, #16]
 8008c38:	f023 0207 	bic.w	r2, r3, #7
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	4925      	ldr	r1, [pc, #148]	; (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008c42:	4313      	orrs	r3, r2
 8008c44:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c46:	f7fb ff6f 	bl	8004b28 <HAL_GetTick>
 8008c4a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c4c:	e00a      	b.n	8008c64 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c4e:	f7fb ff6b 	bl	8004b28 <HAL_GetTick>
 8008c52:	4602      	mov	r2, r0
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	1ad3      	subs	r3, r2, r3
 8008c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d901      	bls.n	8008c64 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008c60:	2303      	movs	r3, #3
 8008c62:	e0be      	b.n	8008de2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c64:	4b1c      	ldr	r3, [pc, #112]	; (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	00db      	lsls	r3, r3, #3
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d1eb      	bne.n	8008c4e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f003 0302 	and.w	r3, r3, #2
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d010      	beq.n	8008ca4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	68da      	ldr	r2, [r3, #12]
 8008c86:	4b14      	ldr	r3, [pc, #80]	; (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008c88:	699b      	ldr	r3, [r3, #24]
 8008c8a:	f003 030f 	and.w	r3, r3, #15
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d208      	bcs.n	8008ca4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c92:	4b11      	ldr	r3, [pc, #68]	; (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008c94:	699b      	ldr	r3, [r3, #24]
 8008c96:	f023 020f 	bic.w	r2, r3, #15
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	490e      	ldr	r1, [pc, #56]	; (8008cd8 <HAL_RCC_ClockConfig+0x244>)
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008ca4:	4b0b      	ldr	r3, [pc, #44]	; (8008cd4 <HAL_RCC_ClockConfig+0x240>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f003 030f 	and.w	r3, r3, #15
 8008cac:	683a      	ldr	r2, [r7, #0]
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d214      	bcs.n	8008cdc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cb2:	4b08      	ldr	r3, [pc, #32]	; (8008cd4 <HAL_RCC_ClockConfig+0x240>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f023 020f 	bic.w	r2, r3, #15
 8008cba:	4906      	ldr	r1, [pc, #24]	; (8008cd4 <HAL_RCC_ClockConfig+0x240>)
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cc2:	4b04      	ldr	r3, [pc, #16]	; (8008cd4 <HAL_RCC_ClockConfig+0x240>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f003 030f 	and.w	r3, r3, #15
 8008cca:	683a      	ldr	r2, [r7, #0]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d005      	beq.n	8008cdc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e086      	b.n	8008de2 <HAL_RCC_ClockConfig+0x34e>
 8008cd4:	52002000 	.word	0x52002000
 8008cd8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f003 0304 	and.w	r3, r3, #4
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d010      	beq.n	8008d0a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	691a      	ldr	r2, [r3, #16]
 8008cec:	4b3f      	ldr	r3, [pc, #252]	; (8008dec <HAL_RCC_ClockConfig+0x358>)
 8008cee:	699b      	ldr	r3, [r3, #24]
 8008cf0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d208      	bcs.n	8008d0a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008cf8:	4b3c      	ldr	r3, [pc, #240]	; (8008dec <HAL_RCC_ClockConfig+0x358>)
 8008cfa:	699b      	ldr	r3, [r3, #24]
 8008cfc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	691b      	ldr	r3, [r3, #16]
 8008d04:	4939      	ldr	r1, [pc, #228]	; (8008dec <HAL_RCC_ClockConfig+0x358>)
 8008d06:	4313      	orrs	r3, r2
 8008d08:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f003 0308 	and.w	r3, r3, #8
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d010      	beq.n	8008d38 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	695a      	ldr	r2, [r3, #20]
 8008d1a:	4b34      	ldr	r3, [pc, #208]	; (8008dec <HAL_RCC_ClockConfig+0x358>)
 8008d1c:	69db      	ldr	r3, [r3, #28]
 8008d1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d208      	bcs.n	8008d38 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008d26:	4b31      	ldr	r3, [pc, #196]	; (8008dec <HAL_RCC_ClockConfig+0x358>)
 8008d28:	69db      	ldr	r3, [r3, #28]
 8008d2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	695b      	ldr	r3, [r3, #20]
 8008d32:	492e      	ldr	r1, [pc, #184]	; (8008dec <HAL_RCC_ClockConfig+0x358>)
 8008d34:	4313      	orrs	r3, r2
 8008d36:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f003 0310 	and.w	r3, r3, #16
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d010      	beq.n	8008d66 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	699a      	ldr	r2, [r3, #24]
 8008d48:	4b28      	ldr	r3, [pc, #160]	; (8008dec <HAL_RCC_ClockConfig+0x358>)
 8008d4a:	69db      	ldr	r3, [r3, #28]
 8008d4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d208      	bcs.n	8008d66 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008d54:	4b25      	ldr	r3, [pc, #148]	; (8008dec <HAL_RCC_ClockConfig+0x358>)
 8008d56:	69db      	ldr	r3, [r3, #28]
 8008d58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	699b      	ldr	r3, [r3, #24]
 8008d60:	4922      	ldr	r1, [pc, #136]	; (8008dec <HAL_RCC_ClockConfig+0x358>)
 8008d62:	4313      	orrs	r3, r2
 8008d64:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f003 0320 	and.w	r3, r3, #32
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d010      	beq.n	8008d94 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	69da      	ldr	r2, [r3, #28]
 8008d76:	4b1d      	ldr	r3, [pc, #116]	; (8008dec <HAL_RCC_ClockConfig+0x358>)
 8008d78:	6a1b      	ldr	r3, [r3, #32]
 8008d7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d208      	bcs.n	8008d94 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008d82:	4b1a      	ldr	r3, [pc, #104]	; (8008dec <HAL_RCC_ClockConfig+0x358>)
 8008d84:	6a1b      	ldr	r3, [r3, #32]
 8008d86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	69db      	ldr	r3, [r3, #28]
 8008d8e:	4917      	ldr	r1, [pc, #92]	; (8008dec <HAL_RCC_ClockConfig+0x358>)
 8008d90:	4313      	orrs	r3, r2
 8008d92:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008d94:	f000 f834 	bl	8008e00 <HAL_RCC_GetSysClockFreq>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	4b14      	ldr	r3, [pc, #80]	; (8008dec <HAL_RCC_ClockConfig+0x358>)
 8008d9c:	699b      	ldr	r3, [r3, #24]
 8008d9e:	0a1b      	lsrs	r3, r3, #8
 8008da0:	f003 030f 	and.w	r3, r3, #15
 8008da4:	4912      	ldr	r1, [pc, #72]	; (8008df0 <HAL_RCC_ClockConfig+0x35c>)
 8008da6:	5ccb      	ldrb	r3, [r1, r3]
 8008da8:	f003 031f 	and.w	r3, r3, #31
 8008dac:	fa22 f303 	lsr.w	r3, r2, r3
 8008db0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008db2:	4b0e      	ldr	r3, [pc, #56]	; (8008dec <HAL_RCC_ClockConfig+0x358>)
 8008db4:	699b      	ldr	r3, [r3, #24]
 8008db6:	f003 030f 	and.w	r3, r3, #15
 8008dba:	4a0d      	ldr	r2, [pc, #52]	; (8008df0 <HAL_RCC_ClockConfig+0x35c>)
 8008dbc:	5cd3      	ldrb	r3, [r2, r3]
 8008dbe:	f003 031f 	and.w	r3, r3, #31
 8008dc2:	693a      	ldr	r2, [r7, #16]
 8008dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8008dc8:	4a0a      	ldr	r2, [pc, #40]	; (8008df4 <HAL_RCC_ClockConfig+0x360>)
 8008dca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008dcc:	4a0a      	ldr	r2, [pc, #40]	; (8008df8 <HAL_RCC_ClockConfig+0x364>)
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008dd2:	4b0a      	ldr	r3, [pc, #40]	; (8008dfc <HAL_RCC_ClockConfig+0x368>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7fb fe5c 	bl	8004a94 <HAL_InitTick>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3718      	adds	r7, #24
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	58024400 	.word	0x58024400
 8008df0:	08011c7c 	.word	0x08011c7c
 8008df4:	24000214 	.word	0x24000214
 8008df8:	24000210 	.word	0x24000210
 8008dfc:	24000218 	.word	0x24000218

08008e00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b089      	sub	sp, #36	; 0x24
 8008e04:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008e06:	4bb3      	ldr	r3, [pc, #716]	; (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e08:	691b      	ldr	r3, [r3, #16]
 8008e0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e0e:	2b18      	cmp	r3, #24
 8008e10:	f200 8155 	bhi.w	80090be <HAL_RCC_GetSysClockFreq+0x2be>
 8008e14:	a201      	add	r2, pc, #4	; (adr r2, 8008e1c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1a:	bf00      	nop
 8008e1c:	08008e81 	.word	0x08008e81
 8008e20:	080090bf 	.word	0x080090bf
 8008e24:	080090bf 	.word	0x080090bf
 8008e28:	080090bf 	.word	0x080090bf
 8008e2c:	080090bf 	.word	0x080090bf
 8008e30:	080090bf 	.word	0x080090bf
 8008e34:	080090bf 	.word	0x080090bf
 8008e38:	080090bf 	.word	0x080090bf
 8008e3c:	08008ea7 	.word	0x08008ea7
 8008e40:	080090bf 	.word	0x080090bf
 8008e44:	080090bf 	.word	0x080090bf
 8008e48:	080090bf 	.word	0x080090bf
 8008e4c:	080090bf 	.word	0x080090bf
 8008e50:	080090bf 	.word	0x080090bf
 8008e54:	080090bf 	.word	0x080090bf
 8008e58:	080090bf 	.word	0x080090bf
 8008e5c:	08008ead 	.word	0x08008ead
 8008e60:	080090bf 	.word	0x080090bf
 8008e64:	080090bf 	.word	0x080090bf
 8008e68:	080090bf 	.word	0x080090bf
 8008e6c:	080090bf 	.word	0x080090bf
 8008e70:	080090bf 	.word	0x080090bf
 8008e74:	080090bf 	.word	0x080090bf
 8008e78:	080090bf 	.word	0x080090bf
 8008e7c:	08008eb3 	.word	0x08008eb3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e80:	4b94      	ldr	r3, [pc, #592]	; (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f003 0320 	and.w	r3, r3, #32
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d009      	beq.n	8008ea0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e8c:	4b91      	ldr	r3, [pc, #580]	; (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	08db      	lsrs	r3, r3, #3
 8008e92:	f003 0303 	and.w	r3, r3, #3
 8008e96:	4a90      	ldr	r2, [pc, #576]	; (80090d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008e98:	fa22 f303 	lsr.w	r3, r2, r3
 8008e9c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008e9e:	e111      	b.n	80090c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008ea0:	4b8d      	ldr	r3, [pc, #564]	; (80090d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ea2:	61bb      	str	r3, [r7, #24]
    break;
 8008ea4:	e10e      	b.n	80090c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008ea6:	4b8d      	ldr	r3, [pc, #564]	; (80090dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008ea8:	61bb      	str	r3, [r7, #24]
    break;
 8008eaa:	e10b      	b.n	80090c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008eac:	4b8c      	ldr	r3, [pc, #560]	; (80090e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008eae:	61bb      	str	r3, [r7, #24]
    break;
 8008eb0:	e108      	b.n	80090c4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008eb2:	4b88      	ldr	r3, [pc, #544]	; (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb6:	f003 0303 	and.w	r3, r3, #3
 8008eba:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008ebc:	4b85      	ldr	r3, [pc, #532]	; (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec0:	091b      	lsrs	r3, r3, #4
 8008ec2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ec6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008ec8:	4b82      	ldr	r3, [pc, #520]	; (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ecc:	f003 0301 	and.w	r3, r3, #1
 8008ed0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008ed2:	4b80      	ldr	r3, [pc, #512]	; (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ed6:	08db      	lsrs	r3, r3, #3
 8008ed8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	fb02 f303 	mul.w	r3, r2, r3
 8008ee2:	ee07 3a90 	vmov	s15, r3
 8008ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eea:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	f000 80e1 	beq.w	80090b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	2b02      	cmp	r3, #2
 8008efa:	f000 8083 	beq.w	8009004 <HAL_RCC_GetSysClockFreq+0x204>
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	f200 80a1 	bhi.w	8009048 <HAL_RCC_GetSysClockFreq+0x248>
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d003      	beq.n	8008f14 <HAL_RCC_GetSysClockFreq+0x114>
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d056      	beq.n	8008fc0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008f12:	e099      	b.n	8009048 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f14:	4b6f      	ldr	r3, [pc, #444]	; (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f003 0320 	and.w	r3, r3, #32
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d02d      	beq.n	8008f7c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f20:	4b6c      	ldr	r3, [pc, #432]	; (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	08db      	lsrs	r3, r3, #3
 8008f26:	f003 0303 	and.w	r3, r3, #3
 8008f2a:	4a6b      	ldr	r2, [pc, #428]	; (80090d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f30:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	ee07 3a90 	vmov	s15, r3
 8008f38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	ee07 3a90 	vmov	s15, r3
 8008f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f4a:	4b62      	ldr	r3, [pc, #392]	; (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f52:	ee07 3a90 	vmov	s15, r3
 8008f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f5e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80090e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008f7a:	e087      	b.n	800908c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	ee07 3a90 	vmov	s15, r3
 8008f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f86:	eddf 6a58 	vldr	s13, [pc, #352]	; 80090e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f8e:	4b51      	ldr	r3, [pc, #324]	; (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f96:	ee07 3a90 	vmov	s15, r3
 8008f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008fa2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80090e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fbe:	e065      	b.n	800908c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	ee07 3a90 	vmov	s15, r3
 8008fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fca:	eddf 6a48 	vldr	s13, [pc, #288]	; 80090ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8008fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fd2:	4b40      	ldr	r3, [pc, #256]	; (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fda:	ee07 3a90 	vmov	s15, r3
 8008fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fe2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008fe6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80090e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ff2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ffe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009002:	e043      	b.n	800908c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	ee07 3a90 	vmov	s15, r3
 800900a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800900e:	eddf 6a38 	vldr	s13, [pc, #224]	; 80090f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009016:	4b2f      	ldr	r3, [pc, #188]	; (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800901a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800901e:	ee07 3a90 	vmov	s15, r3
 8009022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009026:	ed97 6a02 	vldr	s12, [r7, #8]
 800902a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80090e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800902e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009036:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800903a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800903e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009042:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009046:	e021      	b.n	800908c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	ee07 3a90 	vmov	s15, r3
 800904e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009052:	eddf 6a26 	vldr	s13, [pc, #152]	; 80090ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8009056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800905a:	4b1e      	ldr	r3, [pc, #120]	; (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800905c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800905e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009062:	ee07 3a90 	vmov	s15, r3
 8009066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800906a:	ed97 6a02 	vldr	s12, [r7, #8]
 800906e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80090e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800907a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800907e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009086:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800908a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800908c:	4b11      	ldr	r3, [pc, #68]	; (80090d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800908e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009090:	0a5b      	lsrs	r3, r3, #9
 8009092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009096:	3301      	adds	r3, #1
 8009098:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	ee07 3a90 	vmov	s15, r3
 80090a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80090a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80090a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090b0:	ee17 3a90 	vmov	r3, s15
 80090b4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80090b6:	e005      	b.n	80090c4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80090b8:	2300      	movs	r3, #0
 80090ba:	61bb      	str	r3, [r7, #24]
    break;
 80090bc:	e002      	b.n	80090c4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80090be:	4b07      	ldr	r3, [pc, #28]	; (80090dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80090c0:	61bb      	str	r3, [r7, #24]
    break;
 80090c2:	bf00      	nop
  }

  return sysclockfreq;
 80090c4:	69bb      	ldr	r3, [r7, #24]
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3724      	adds	r7, #36	; 0x24
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	58024400 	.word	0x58024400
 80090d8:	03d09000 	.word	0x03d09000
 80090dc:	003d0900 	.word	0x003d0900
 80090e0:	02dc6c00 	.word	0x02dc6c00
 80090e4:	46000000 	.word	0x46000000
 80090e8:	4c742400 	.word	0x4c742400
 80090ec:	4a742400 	.word	0x4a742400
 80090f0:	4c371b00 	.word	0x4c371b00

080090f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80090fa:	f7ff fe81 	bl	8008e00 <HAL_RCC_GetSysClockFreq>
 80090fe:	4602      	mov	r2, r0
 8009100:	4b10      	ldr	r3, [pc, #64]	; (8009144 <HAL_RCC_GetHCLKFreq+0x50>)
 8009102:	699b      	ldr	r3, [r3, #24]
 8009104:	0a1b      	lsrs	r3, r3, #8
 8009106:	f003 030f 	and.w	r3, r3, #15
 800910a:	490f      	ldr	r1, [pc, #60]	; (8009148 <HAL_RCC_GetHCLKFreq+0x54>)
 800910c:	5ccb      	ldrb	r3, [r1, r3]
 800910e:	f003 031f 	and.w	r3, r3, #31
 8009112:	fa22 f303 	lsr.w	r3, r2, r3
 8009116:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009118:	4b0a      	ldr	r3, [pc, #40]	; (8009144 <HAL_RCC_GetHCLKFreq+0x50>)
 800911a:	699b      	ldr	r3, [r3, #24]
 800911c:	f003 030f 	and.w	r3, r3, #15
 8009120:	4a09      	ldr	r2, [pc, #36]	; (8009148 <HAL_RCC_GetHCLKFreq+0x54>)
 8009122:	5cd3      	ldrb	r3, [r2, r3]
 8009124:	f003 031f 	and.w	r3, r3, #31
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	fa22 f303 	lsr.w	r3, r2, r3
 800912e:	4a07      	ldr	r2, [pc, #28]	; (800914c <HAL_RCC_GetHCLKFreq+0x58>)
 8009130:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009132:	4a07      	ldr	r2, [pc, #28]	; (8009150 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009138:	4b04      	ldr	r3, [pc, #16]	; (800914c <HAL_RCC_GetHCLKFreq+0x58>)
 800913a:	681b      	ldr	r3, [r3, #0]
}
 800913c:	4618      	mov	r0, r3
 800913e:	3708      	adds	r7, #8
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}
 8009144:	58024400 	.word	0x58024400
 8009148:	08011c7c 	.word	0x08011c7c
 800914c:	24000214 	.word	0x24000214
 8009150:	24000210 	.word	0x24000210

08009154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009158:	f7ff ffcc 	bl	80090f4 <HAL_RCC_GetHCLKFreq>
 800915c:	4602      	mov	r2, r0
 800915e:	4b06      	ldr	r3, [pc, #24]	; (8009178 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009160:	69db      	ldr	r3, [r3, #28]
 8009162:	091b      	lsrs	r3, r3, #4
 8009164:	f003 0307 	and.w	r3, r3, #7
 8009168:	4904      	ldr	r1, [pc, #16]	; (800917c <HAL_RCC_GetPCLK1Freq+0x28>)
 800916a:	5ccb      	ldrb	r3, [r1, r3]
 800916c:	f003 031f 	and.w	r3, r3, #31
 8009170:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009174:	4618      	mov	r0, r3
 8009176:	bd80      	pop	{r7, pc}
 8009178:	58024400 	.word	0x58024400
 800917c:	08011c7c 	.word	0x08011c7c

08009180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009184:	f7ff ffb6 	bl	80090f4 <HAL_RCC_GetHCLKFreq>
 8009188:	4602      	mov	r2, r0
 800918a:	4b06      	ldr	r3, [pc, #24]	; (80091a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800918c:	69db      	ldr	r3, [r3, #28]
 800918e:	0a1b      	lsrs	r3, r3, #8
 8009190:	f003 0307 	and.w	r3, r3, #7
 8009194:	4904      	ldr	r1, [pc, #16]	; (80091a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009196:	5ccb      	ldrb	r3, [r1, r3]
 8009198:	f003 031f 	and.w	r3, r3, #31
 800919c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	58024400 	.word	0x58024400
 80091a8:	08011c7c 	.word	0x08011c7c

080091ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b086      	sub	sp, #24
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80091b4:	2300      	movs	r3, #0
 80091b6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80091b8:	2300      	movs	r3, #0
 80091ba:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d03f      	beq.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80091d0:	d02a      	beq.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80091d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80091d6:	d824      	bhi.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80091d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091dc:	d018      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80091de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091e2:	d81e      	bhi.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d003      	beq.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80091e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091ec:	d007      	beq.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 80091ee:	e018      	b.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091f0:	4bab      	ldr	r3, [pc, #684]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80091f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f4:	4aaa      	ldr	r2, [pc, #680]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80091f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80091fc:	e015      	b.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	3304      	adds	r3, #4
 8009202:	2102      	movs	r1, #2
 8009204:	4618      	mov	r0, r3
 8009206:	f001 f9cf 	bl	800a5a8 <RCCEx_PLL2_Config>
 800920a:	4603      	mov	r3, r0
 800920c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800920e:	e00c      	b.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	3324      	adds	r3, #36	; 0x24
 8009214:	2102      	movs	r1, #2
 8009216:	4618      	mov	r0, r3
 8009218:	f001 fa78 	bl	800a70c <RCCEx_PLL3_Config>
 800921c:	4603      	mov	r3, r0
 800921e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009220:	e003      	b.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009222:	2301      	movs	r3, #1
 8009224:	75fb      	strb	r3, [r7, #23]
      break;
 8009226:	e000      	b.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009228:	bf00      	nop
    }

    if(ret == HAL_OK)
 800922a:	7dfb      	ldrb	r3, [r7, #23]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d109      	bne.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009230:	4b9b      	ldr	r3, [pc, #620]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009234:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800923c:	4998      	ldr	r1, [pc, #608]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800923e:	4313      	orrs	r3, r2
 8009240:	650b      	str	r3, [r1, #80]	; 0x50
 8009242:	e001      	b.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009244:	7dfb      	ldrb	r3, [r7, #23]
 8009246:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009250:	2b00      	cmp	r3, #0
 8009252:	d03d      	beq.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009258:	2b04      	cmp	r3, #4
 800925a:	d826      	bhi.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800925c:	a201      	add	r2, pc, #4	; (adr r2, 8009264 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800925e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009262:	bf00      	nop
 8009264:	08009279 	.word	0x08009279
 8009268:	08009287 	.word	0x08009287
 800926c:	08009299 	.word	0x08009299
 8009270:	080092b1 	.word	0x080092b1
 8009274:	080092b1 	.word	0x080092b1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009278:	4b89      	ldr	r3, [pc, #548]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800927a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800927c:	4a88      	ldr	r2, [pc, #544]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800927e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009282:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009284:	e015      	b.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	3304      	adds	r3, #4
 800928a:	2100      	movs	r1, #0
 800928c:	4618      	mov	r0, r3
 800928e:	f001 f98b 	bl	800a5a8 <RCCEx_PLL2_Config>
 8009292:	4603      	mov	r3, r0
 8009294:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009296:	e00c      	b.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	3324      	adds	r3, #36	; 0x24
 800929c:	2100      	movs	r1, #0
 800929e:	4618      	mov	r0, r3
 80092a0:	f001 fa34 	bl	800a70c <RCCEx_PLL3_Config>
 80092a4:	4603      	mov	r3, r0
 80092a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80092a8:	e003      	b.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092aa:	2301      	movs	r3, #1
 80092ac:	75fb      	strb	r3, [r7, #23]
      break;
 80092ae:	e000      	b.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80092b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092b2:	7dfb      	ldrb	r3, [r7, #23]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d109      	bne.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80092b8:	4b79      	ldr	r3, [pc, #484]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80092ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092bc:	f023 0207 	bic.w	r2, r3, #7
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092c4:	4976      	ldr	r1, [pc, #472]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80092c6:	4313      	orrs	r3, r2
 80092c8:	650b      	str	r3, [r1, #80]	; 0x50
 80092ca:	e001      	b.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092cc:	7dfb      	ldrb	r3, [r7, #23]
 80092ce:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d042      	beq.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092e4:	d02b      	beq.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80092e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092ea:	d825      	bhi.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80092ec:	2bc0      	cmp	r3, #192	; 0xc0
 80092ee:	d028      	beq.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80092f0:	2bc0      	cmp	r3, #192	; 0xc0
 80092f2:	d821      	bhi.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80092f4:	2b80      	cmp	r3, #128	; 0x80
 80092f6:	d016      	beq.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80092f8:	2b80      	cmp	r3, #128	; 0x80
 80092fa:	d81d      	bhi.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d002      	beq.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009300:	2b40      	cmp	r3, #64	; 0x40
 8009302:	d007      	beq.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009304:	e018      	b.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009306:	4b66      	ldr	r3, [pc, #408]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930a:	4a65      	ldr	r2, [pc, #404]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800930c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009310:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009312:	e017      	b.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	3304      	adds	r3, #4
 8009318:	2100      	movs	r1, #0
 800931a:	4618      	mov	r0, r3
 800931c:	f001 f944 	bl	800a5a8 <RCCEx_PLL2_Config>
 8009320:	4603      	mov	r3, r0
 8009322:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009324:	e00e      	b.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	3324      	adds	r3, #36	; 0x24
 800932a:	2100      	movs	r1, #0
 800932c:	4618      	mov	r0, r3
 800932e:	f001 f9ed 	bl	800a70c <RCCEx_PLL3_Config>
 8009332:	4603      	mov	r3, r0
 8009334:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009336:	e005      	b.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009338:	2301      	movs	r3, #1
 800933a:	75fb      	strb	r3, [r7, #23]
      break;
 800933c:	e002      	b.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800933e:	bf00      	nop
 8009340:	e000      	b.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009342:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009344:	7dfb      	ldrb	r3, [r7, #23]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d109      	bne.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800934a:	4b55      	ldr	r3, [pc, #340]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800934c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800934e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009356:	4952      	ldr	r1, [pc, #328]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009358:	4313      	orrs	r3, r2
 800935a:	650b      	str	r3, [r1, #80]	; 0x50
 800935c:	e001      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800935e:	7dfb      	ldrb	r3, [r7, #23]
 8009360:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800936a:	2b00      	cmp	r3, #0
 800936c:	d049      	beq.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009374:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009378:	d030      	beq.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800937a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800937e:	d82a      	bhi.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009380:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009384:	d02c      	beq.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8009386:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800938a:	d824      	bhi.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800938c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009390:	d018      	beq.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8009392:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009396:	d81e      	bhi.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009398:	2b00      	cmp	r3, #0
 800939a:	d003      	beq.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800939c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80093a0:	d007      	beq.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80093a2:	e018      	b.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093a4:	4b3e      	ldr	r3, [pc, #248]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80093a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a8:	4a3d      	ldr	r2, [pc, #244]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80093aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093b0:	e017      	b.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	3304      	adds	r3, #4
 80093b6:	2100      	movs	r1, #0
 80093b8:	4618      	mov	r0, r3
 80093ba:	f001 f8f5 	bl	800a5a8 <RCCEx_PLL2_Config>
 80093be:	4603      	mov	r3, r0
 80093c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80093c2:	e00e      	b.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	3324      	adds	r3, #36	; 0x24
 80093c8:	2100      	movs	r1, #0
 80093ca:	4618      	mov	r0, r3
 80093cc:	f001 f99e 	bl	800a70c <RCCEx_PLL3_Config>
 80093d0:	4603      	mov	r3, r0
 80093d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093d4:	e005      	b.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80093d6:	2301      	movs	r3, #1
 80093d8:	75fb      	strb	r3, [r7, #23]
      break;
 80093da:	e002      	b.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80093dc:	bf00      	nop
 80093de:	e000      	b.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80093e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093e2:	7dfb      	ldrb	r3, [r7, #23]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d10a      	bne.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80093e8:	4b2d      	ldr	r3, [pc, #180]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80093ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093ec:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80093f6:	492a      	ldr	r1, [pc, #168]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80093f8:	4313      	orrs	r3, r2
 80093fa:	658b      	str	r3, [r1, #88]	; 0x58
 80093fc:	e001      	b.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093fe:	7dfb      	ldrb	r3, [r7, #23]
 8009400:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800940a:	2b00      	cmp	r3, #0
 800940c:	d04c      	beq.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009414:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009418:	d030      	beq.n	800947c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800941a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800941e:	d82a      	bhi.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009420:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009424:	d02c      	beq.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8009426:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800942a:	d824      	bhi.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800942c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009430:	d018      	beq.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8009432:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009436:	d81e      	bhi.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009438:	2b00      	cmp	r3, #0
 800943a:	d003      	beq.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800943c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009440:	d007      	beq.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009442:	e018      	b.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009444:	4b16      	ldr	r3, [pc, #88]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009448:	4a15      	ldr	r2, [pc, #84]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800944a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800944e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009450:	e017      	b.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	3304      	adds	r3, #4
 8009456:	2100      	movs	r1, #0
 8009458:	4618      	mov	r0, r3
 800945a:	f001 f8a5 	bl	800a5a8 <RCCEx_PLL2_Config>
 800945e:	4603      	mov	r3, r0
 8009460:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009462:	e00e      	b.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	3324      	adds	r3, #36	; 0x24
 8009468:	2100      	movs	r1, #0
 800946a:	4618      	mov	r0, r3
 800946c:	f001 f94e 	bl	800a70c <RCCEx_PLL3_Config>
 8009470:	4603      	mov	r3, r0
 8009472:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009474:	e005      	b.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009476:	2301      	movs	r3, #1
 8009478:	75fb      	strb	r3, [r7, #23]
      break;
 800947a:	e002      	b.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800947c:	bf00      	nop
 800947e:	e000      	b.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8009480:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009482:	7dfb      	ldrb	r3, [r7, #23]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d10d      	bne.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009488:	4b05      	ldr	r3, [pc, #20]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800948a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800948c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009496:	4902      	ldr	r1, [pc, #8]	; (80094a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009498:	4313      	orrs	r3, r2
 800949a:	658b      	str	r3, [r1, #88]	; 0x58
 800949c:	e004      	b.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800949e:	bf00      	nop
 80094a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094a4:	7dfb      	ldrb	r3, [r7, #23]
 80094a6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d032      	beq.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094b8:	2b30      	cmp	r3, #48	; 0x30
 80094ba:	d01c      	beq.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80094bc:	2b30      	cmp	r3, #48	; 0x30
 80094be:	d817      	bhi.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80094c0:	2b20      	cmp	r3, #32
 80094c2:	d00c      	beq.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x332>
 80094c4:	2b20      	cmp	r3, #32
 80094c6:	d813      	bhi.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d016      	beq.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80094cc:	2b10      	cmp	r3, #16
 80094ce:	d10f      	bne.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094d0:	4baf      	ldr	r3, [pc, #700]	; (8009790 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80094d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d4:	4aae      	ldr	r2, [pc, #696]	; (8009790 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80094d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80094dc:	e00e      	b.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	3304      	adds	r3, #4
 80094e2:	2102      	movs	r1, #2
 80094e4:	4618      	mov	r0, r3
 80094e6:	f001 f85f 	bl	800a5a8 <RCCEx_PLL2_Config>
 80094ea:	4603      	mov	r3, r0
 80094ec:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80094ee:	e005      	b.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80094f0:	2301      	movs	r3, #1
 80094f2:	75fb      	strb	r3, [r7, #23]
      break;
 80094f4:	e002      	b.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80094f6:	bf00      	nop
 80094f8:	e000      	b.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80094fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094fc:	7dfb      	ldrb	r3, [r7, #23]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d109      	bne.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009502:	4ba3      	ldr	r3, [pc, #652]	; (8009790 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009506:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800950e:	49a0      	ldr	r1, [pc, #640]	; (8009790 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009510:	4313      	orrs	r3, r2
 8009512:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009514:	e001      	b.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009516:	7dfb      	ldrb	r3, [r7, #23]
 8009518:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009522:	2b00      	cmp	r3, #0
 8009524:	d047      	beq.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800952a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800952e:	d030      	beq.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8009530:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009534:	d82a      	bhi.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009536:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800953a:	d02c      	beq.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800953c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009540:	d824      	bhi.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009546:	d018      	beq.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8009548:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800954c:	d81e      	bhi.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800954e:	2b00      	cmp	r3, #0
 8009550:	d003      	beq.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8009552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009556:	d007      	beq.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8009558:	e018      	b.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800955a:	4b8d      	ldr	r3, [pc, #564]	; (8009790 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800955c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800955e:	4a8c      	ldr	r2, [pc, #560]	; (8009790 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009564:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009566:	e017      	b.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	3304      	adds	r3, #4
 800956c:	2100      	movs	r1, #0
 800956e:	4618      	mov	r0, r3
 8009570:	f001 f81a 	bl	800a5a8 <RCCEx_PLL2_Config>
 8009574:	4603      	mov	r3, r0
 8009576:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009578:	e00e      	b.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	3324      	adds	r3, #36	; 0x24
 800957e:	2100      	movs	r1, #0
 8009580:	4618      	mov	r0, r3
 8009582:	f001 f8c3 	bl	800a70c <RCCEx_PLL3_Config>
 8009586:	4603      	mov	r3, r0
 8009588:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800958a:	e005      	b.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	75fb      	strb	r3, [r7, #23]
      break;
 8009590:	e002      	b.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8009592:	bf00      	nop
 8009594:	e000      	b.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8009596:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009598:	7dfb      	ldrb	r3, [r7, #23]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d109      	bne.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800959e:	4b7c      	ldr	r3, [pc, #496]	; (8009790 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80095a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095a2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095aa:	4979      	ldr	r1, [pc, #484]	; (8009790 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80095ac:	4313      	orrs	r3, r2
 80095ae:	650b      	str	r3, [r1, #80]	; 0x50
 80095b0:	e001      	b.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095b2:	7dfb      	ldrb	r3, [r7, #23]
 80095b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d049      	beq.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80095ca:	d02e      	beq.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80095cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80095d0:	d828      	bhi.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80095d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80095d6:	d02a      	beq.n	800962e <HAL_RCCEx_PeriphCLKConfig+0x482>
 80095d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80095dc:	d822      	bhi.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80095de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80095e2:	d026      	beq.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80095e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80095e8:	d81c      	bhi.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80095ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095ee:	d010      	beq.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80095f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095f4:	d816      	bhi.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d01d      	beq.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80095fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095fe:	d111      	bne.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	3304      	adds	r3, #4
 8009604:	2101      	movs	r1, #1
 8009606:	4618      	mov	r0, r3
 8009608:	f000 ffce 	bl	800a5a8 <RCCEx_PLL2_Config>
 800960c:	4603      	mov	r3, r0
 800960e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009610:	e012      	b.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	3324      	adds	r3, #36	; 0x24
 8009616:	2101      	movs	r1, #1
 8009618:	4618      	mov	r0, r3
 800961a:	f001 f877 	bl	800a70c <RCCEx_PLL3_Config>
 800961e:	4603      	mov	r3, r0
 8009620:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009622:	e009      	b.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009624:	2301      	movs	r3, #1
 8009626:	75fb      	strb	r3, [r7, #23]
      break;
 8009628:	e006      	b.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800962a:	bf00      	nop
 800962c:	e004      	b.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800962e:	bf00      	nop
 8009630:	e002      	b.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009632:	bf00      	nop
 8009634:	e000      	b.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009636:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009638:	7dfb      	ldrb	r3, [r7, #23]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d109      	bne.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800963e:	4b54      	ldr	r3, [pc, #336]	; (8009790 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009642:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800964a:	4951      	ldr	r1, [pc, #324]	; (8009790 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800964c:	4313      	orrs	r3, r2
 800964e:	650b      	str	r3, [r1, #80]	; 0x50
 8009650:	e001      	b.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009652:	7dfb      	ldrb	r3, [r7, #23]
 8009654:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800965e:	2b00      	cmp	r3, #0
 8009660:	d04b      	beq.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009668:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800966c:	d02e      	beq.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x520>
 800966e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009672:	d828      	bhi.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009678:	d02a      	beq.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800967a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800967e:	d822      	bhi.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009680:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009684:	d026      	beq.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8009686:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800968a:	d81c      	bhi.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800968c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009690:	d010      	beq.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8009692:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009696:	d816      	bhi.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009698:	2b00      	cmp	r3, #0
 800969a:	d01d      	beq.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800969c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096a0:	d111      	bne.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	3304      	adds	r3, #4
 80096a6:	2101      	movs	r1, #1
 80096a8:	4618      	mov	r0, r3
 80096aa:	f000 ff7d 	bl	800a5a8 <RCCEx_PLL2_Config>
 80096ae:	4603      	mov	r3, r0
 80096b0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80096b2:	e012      	b.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	3324      	adds	r3, #36	; 0x24
 80096b8:	2101      	movs	r1, #1
 80096ba:	4618      	mov	r0, r3
 80096bc:	f001 f826 	bl	800a70c <RCCEx_PLL3_Config>
 80096c0:	4603      	mov	r3, r0
 80096c2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80096c4:	e009      	b.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80096c6:	2301      	movs	r3, #1
 80096c8:	75fb      	strb	r3, [r7, #23]
      break;
 80096ca:	e006      	b.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80096cc:	bf00      	nop
 80096ce:	e004      	b.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80096d0:	bf00      	nop
 80096d2:	e002      	b.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80096d4:	bf00      	nop
 80096d6:	e000      	b.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80096d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096da:	7dfb      	ldrb	r3, [r7, #23]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d10a      	bne.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80096e0:	4b2b      	ldr	r3, [pc, #172]	; (8009790 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80096e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096e4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80096ee:	4928      	ldr	r1, [pc, #160]	; (8009790 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80096f0:	4313      	orrs	r3, r2
 80096f2:	658b      	str	r3, [r1, #88]	; 0x58
 80096f4:	e001      	b.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096f6:	7dfb      	ldrb	r3, [r7, #23]
 80096f8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009702:	2b00      	cmp	r3, #0
 8009704:	d02f      	beq.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800970a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800970e:	d00e      	beq.n	800972e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009714:	d814      	bhi.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8009716:	2b00      	cmp	r3, #0
 8009718:	d015      	beq.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800971a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800971e:	d10f      	bne.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009720:	4b1b      	ldr	r3, [pc, #108]	; (8009790 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009724:	4a1a      	ldr	r2, [pc, #104]	; (8009790 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009726:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800972a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800972c:	e00c      	b.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	3304      	adds	r3, #4
 8009732:	2101      	movs	r1, #1
 8009734:	4618      	mov	r0, r3
 8009736:	f000 ff37 	bl	800a5a8 <RCCEx_PLL2_Config>
 800973a:	4603      	mov	r3, r0
 800973c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800973e:	e003      	b.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009740:	2301      	movs	r3, #1
 8009742:	75fb      	strb	r3, [r7, #23]
      break;
 8009744:	e000      	b.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8009746:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009748:	7dfb      	ldrb	r3, [r7, #23]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d109      	bne.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800974e:	4b10      	ldr	r3, [pc, #64]	; (8009790 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009752:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800975a:	490d      	ldr	r1, [pc, #52]	; (8009790 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800975c:	4313      	orrs	r3, r2
 800975e:	650b      	str	r3, [r1, #80]	; 0x50
 8009760:	e001      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009762:	7dfb      	ldrb	r3, [r7, #23]
 8009764:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800976e:	2b00      	cmp	r3, #0
 8009770:	d033      	beq.n	80097da <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009776:	2b03      	cmp	r3, #3
 8009778:	d81c      	bhi.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800977a:	a201      	add	r2, pc, #4	; (adr r2, 8009780 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800977c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009780:	080097bb 	.word	0x080097bb
 8009784:	08009795 	.word	0x08009795
 8009788:	080097a3 	.word	0x080097a3
 800978c:	080097bb 	.word	0x080097bb
 8009790:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009794:	4bb8      	ldr	r3, [pc, #736]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009798:	4ab7      	ldr	r2, [pc, #732]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800979a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800979e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80097a0:	e00c      	b.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	3304      	adds	r3, #4
 80097a6:	2102      	movs	r1, #2
 80097a8:	4618      	mov	r0, r3
 80097aa:	f000 fefd 	bl	800a5a8 <RCCEx_PLL2_Config>
 80097ae:	4603      	mov	r3, r0
 80097b0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80097b2:	e003      	b.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	75fb      	strb	r3, [r7, #23]
      break;
 80097b8:	e000      	b.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80097ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097bc:	7dfb      	ldrb	r3, [r7, #23]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d109      	bne.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80097c2:	4bad      	ldr	r3, [pc, #692]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80097c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097c6:	f023 0203 	bic.w	r2, r3, #3
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097ce:	49aa      	ldr	r1, [pc, #680]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80097d0:	4313      	orrs	r3, r2
 80097d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80097d4:	e001      	b.n	80097da <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097d6:	7dfb      	ldrb	r3, [r7, #23]
 80097d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	f000 8086 	beq.w	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80097e8:	4ba4      	ldr	r3, [pc, #656]	; (8009a7c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4aa3      	ldr	r2, [pc, #652]	; (8009a7c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80097ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80097f4:	f7fb f998 	bl	8004b28 <HAL_GetTick>
 80097f8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80097fa:	e009      	b.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80097fc:	f7fb f994 	bl	8004b28 <HAL_GetTick>
 8009800:	4602      	mov	r2, r0
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	1ad3      	subs	r3, r2, r3
 8009806:	2b64      	cmp	r3, #100	; 0x64
 8009808:	d902      	bls.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800980a:	2303      	movs	r3, #3
 800980c:	75fb      	strb	r3, [r7, #23]
        break;
 800980e:	e005      	b.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009810:	4b9a      	ldr	r3, [pc, #616]	; (8009a7c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009818:	2b00      	cmp	r3, #0
 800981a:	d0ef      	beq.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800981c:	7dfb      	ldrb	r3, [r7, #23]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d166      	bne.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009822:	4b95      	ldr	r3, [pc, #596]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009824:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800982c:	4053      	eors	r3, r2
 800982e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009832:	2b00      	cmp	r3, #0
 8009834:	d013      	beq.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009836:	4b90      	ldr	r3, [pc, #576]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800983a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800983e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009840:	4b8d      	ldr	r3, [pc, #564]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009844:	4a8c      	ldr	r2, [pc, #560]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800984a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800984c:	4b8a      	ldr	r3, [pc, #552]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800984e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009850:	4a89      	ldr	r2, [pc, #548]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009856:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009858:	4a87      	ldr	r2, [pc, #540]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009864:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009868:	d115      	bne.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800986a:	f7fb f95d 	bl	8004b28 <HAL_GetTick>
 800986e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009870:	e00b      	b.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009872:	f7fb f959 	bl	8004b28 <HAL_GetTick>
 8009876:	4602      	mov	r2, r0
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	1ad3      	subs	r3, r2, r3
 800987c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009880:	4293      	cmp	r3, r2
 8009882:	d902      	bls.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009884:	2303      	movs	r3, #3
 8009886:	75fb      	strb	r3, [r7, #23]
            break;
 8009888:	e005      	b.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800988a:	4b7b      	ldr	r3, [pc, #492]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800988c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800988e:	f003 0302 	and.w	r3, r3, #2
 8009892:	2b00      	cmp	r3, #0
 8009894:	d0ed      	beq.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8009896:	7dfb      	ldrb	r3, [r7, #23]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d126      	bne.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80098a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098aa:	d10d      	bne.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80098ac:	4b72      	ldr	r3, [pc, #456]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80098ba:	0919      	lsrs	r1, r3, #4
 80098bc:	4b70      	ldr	r3, [pc, #448]	; (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80098be:	400b      	ands	r3, r1
 80098c0:	496d      	ldr	r1, [pc, #436]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80098c2:	4313      	orrs	r3, r2
 80098c4:	610b      	str	r3, [r1, #16]
 80098c6:	e005      	b.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80098c8:	4b6b      	ldr	r3, [pc, #428]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	4a6a      	ldr	r2, [pc, #424]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80098ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80098d2:	6113      	str	r3, [r2, #16]
 80098d4:	4b68      	ldr	r3, [pc, #416]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80098d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80098de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098e2:	4965      	ldr	r1, [pc, #404]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80098e4:	4313      	orrs	r3, r2
 80098e6:	670b      	str	r3, [r1, #112]	; 0x70
 80098e8:	e004      	b.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80098ea:	7dfb      	ldrb	r3, [r7, #23]
 80098ec:	75bb      	strb	r3, [r7, #22]
 80098ee:	e001      	b.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098f0:	7dfb      	ldrb	r3, [r7, #23]
 80098f2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f003 0301 	and.w	r3, r3, #1
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d07e      	beq.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009904:	2b28      	cmp	r3, #40	; 0x28
 8009906:	d867      	bhi.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009908:	a201      	add	r2, pc, #4	; (adr r2, 8009910 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800990a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800990e:	bf00      	nop
 8009910:	080099df 	.word	0x080099df
 8009914:	080099d9 	.word	0x080099d9
 8009918:	080099d9 	.word	0x080099d9
 800991c:	080099d9 	.word	0x080099d9
 8009920:	080099d9 	.word	0x080099d9
 8009924:	080099d9 	.word	0x080099d9
 8009928:	080099d9 	.word	0x080099d9
 800992c:	080099d9 	.word	0x080099d9
 8009930:	080099b5 	.word	0x080099b5
 8009934:	080099d9 	.word	0x080099d9
 8009938:	080099d9 	.word	0x080099d9
 800993c:	080099d9 	.word	0x080099d9
 8009940:	080099d9 	.word	0x080099d9
 8009944:	080099d9 	.word	0x080099d9
 8009948:	080099d9 	.word	0x080099d9
 800994c:	080099d9 	.word	0x080099d9
 8009950:	080099c7 	.word	0x080099c7
 8009954:	080099d9 	.word	0x080099d9
 8009958:	080099d9 	.word	0x080099d9
 800995c:	080099d9 	.word	0x080099d9
 8009960:	080099d9 	.word	0x080099d9
 8009964:	080099d9 	.word	0x080099d9
 8009968:	080099d9 	.word	0x080099d9
 800996c:	080099d9 	.word	0x080099d9
 8009970:	080099df 	.word	0x080099df
 8009974:	080099d9 	.word	0x080099d9
 8009978:	080099d9 	.word	0x080099d9
 800997c:	080099d9 	.word	0x080099d9
 8009980:	080099d9 	.word	0x080099d9
 8009984:	080099d9 	.word	0x080099d9
 8009988:	080099d9 	.word	0x080099d9
 800998c:	080099d9 	.word	0x080099d9
 8009990:	080099df 	.word	0x080099df
 8009994:	080099d9 	.word	0x080099d9
 8009998:	080099d9 	.word	0x080099d9
 800999c:	080099d9 	.word	0x080099d9
 80099a0:	080099d9 	.word	0x080099d9
 80099a4:	080099d9 	.word	0x080099d9
 80099a8:	080099d9 	.word	0x080099d9
 80099ac:	080099d9 	.word	0x080099d9
 80099b0:	080099df 	.word	0x080099df
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	3304      	adds	r3, #4
 80099b8:	2101      	movs	r1, #1
 80099ba:	4618      	mov	r0, r3
 80099bc:	f000 fdf4 	bl	800a5a8 <RCCEx_PLL2_Config>
 80099c0:	4603      	mov	r3, r0
 80099c2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80099c4:	e00c      	b.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	3324      	adds	r3, #36	; 0x24
 80099ca:	2101      	movs	r1, #1
 80099cc:	4618      	mov	r0, r3
 80099ce:	f000 fe9d 	bl	800a70c <RCCEx_PLL3_Config>
 80099d2:	4603      	mov	r3, r0
 80099d4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80099d6:	e003      	b.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099d8:	2301      	movs	r3, #1
 80099da:	75fb      	strb	r3, [r7, #23]
      break;
 80099dc:	e000      	b.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80099de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099e0:	7dfb      	ldrb	r3, [r7, #23]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d109      	bne.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80099e6:	4b24      	ldr	r3, [pc, #144]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80099e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ea:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099f2:	4921      	ldr	r1, [pc, #132]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80099f4:	4313      	orrs	r3, r2
 80099f6:	654b      	str	r3, [r1, #84]	; 0x54
 80099f8:	e001      	b.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099fa:	7dfb      	ldrb	r3, [r7, #23]
 80099fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f003 0302 	and.w	r3, r3, #2
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d03e      	beq.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a0e:	2b05      	cmp	r3, #5
 8009a10:	d820      	bhi.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8009a12:	a201      	add	r2, pc, #4	; (adr r2, 8009a18 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8009a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a18:	08009a5b 	.word	0x08009a5b
 8009a1c:	08009a31 	.word	0x08009a31
 8009a20:	08009a43 	.word	0x08009a43
 8009a24:	08009a5b 	.word	0x08009a5b
 8009a28:	08009a5b 	.word	0x08009a5b
 8009a2c:	08009a5b 	.word	0x08009a5b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	3304      	adds	r3, #4
 8009a34:	2101      	movs	r1, #1
 8009a36:	4618      	mov	r0, r3
 8009a38:	f000 fdb6 	bl	800a5a8 <RCCEx_PLL2_Config>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009a40:	e00c      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	3324      	adds	r3, #36	; 0x24
 8009a46:	2101      	movs	r1, #1
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f000 fe5f 	bl	800a70c <RCCEx_PLL3_Config>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009a52:	e003      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a54:	2301      	movs	r3, #1
 8009a56:	75fb      	strb	r3, [r7, #23]
      break;
 8009a58:	e000      	b.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8009a5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a5c:	7dfb      	ldrb	r3, [r7, #23]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d110      	bne.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009a62:	4b05      	ldr	r3, [pc, #20]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a66:	f023 0207 	bic.w	r2, r3, #7
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a6e:	4902      	ldr	r1, [pc, #8]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009a70:	4313      	orrs	r3, r2
 8009a72:	654b      	str	r3, [r1, #84]	; 0x54
 8009a74:	e008      	b.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8009a76:	bf00      	nop
 8009a78:	58024400 	.word	0x58024400
 8009a7c:	58024800 	.word	0x58024800
 8009a80:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a84:	7dfb      	ldrb	r3, [r7, #23]
 8009a86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f003 0304 	and.w	r3, r3, #4
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d039      	beq.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a9a:	2b05      	cmp	r3, #5
 8009a9c:	d820      	bhi.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8009a9e:	a201      	add	r2, pc, #4	; (adr r2, 8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8009aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa4:	08009ae7 	.word	0x08009ae7
 8009aa8:	08009abd 	.word	0x08009abd
 8009aac:	08009acf 	.word	0x08009acf
 8009ab0:	08009ae7 	.word	0x08009ae7
 8009ab4:	08009ae7 	.word	0x08009ae7
 8009ab8:	08009ae7 	.word	0x08009ae7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	3304      	adds	r3, #4
 8009ac0:	2101      	movs	r1, #1
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f000 fd70 	bl	800a5a8 <RCCEx_PLL2_Config>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009acc:	e00c      	b.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	3324      	adds	r3, #36	; 0x24
 8009ad2:	2101      	movs	r1, #1
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f000 fe19 	bl	800a70c <RCCEx_PLL3_Config>
 8009ada:	4603      	mov	r3, r0
 8009adc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009ade:	e003      	b.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ae4:	e000      	b.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8009ae6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ae8:	7dfb      	ldrb	r3, [r7, #23]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d10a      	bne.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009aee:	4bb7      	ldr	r3, [pc, #732]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009af2:	f023 0207 	bic.w	r2, r3, #7
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009afc:	49b3      	ldr	r1, [pc, #716]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009afe:	4313      	orrs	r3, r2
 8009b00:	658b      	str	r3, [r1, #88]	; 0x58
 8009b02:	e001      	b.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b04:	7dfb      	ldrb	r3, [r7, #23]
 8009b06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f003 0320 	and.w	r3, r3, #32
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d04b      	beq.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b1e:	d02e      	beq.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8009b20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b24:	d828      	bhi.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b2a:	d02a      	beq.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b30:	d822      	bhi.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009b32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b36:	d026      	beq.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009b38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b3c:	d81c      	bhi.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009b3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b42:	d010      	beq.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8009b44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b48:	d816      	bhi.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d01d      	beq.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009b4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b52:	d111      	bne.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	3304      	adds	r3, #4
 8009b58:	2100      	movs	r1, #0
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f000 fd24 	bl	800a5a8 <RCCEx_PLL2_Config>
 8009b60:	4603      	mov	r3, r0
 8009b62:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009b64:	e012      	b.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	3324      	adds	r3, #36	; 0x24
 8009b6a:	2102      	movs	r1, #2
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f000 fdcd 	bl	800a70c <RCCEx_PLL3_Config>
 8009b72:	4603      	mov	r3, r0
 8009b74:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009b76:	e009      	b.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8009b7c:	e006      	b.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009b7e:	bf00      	nop
 8009b80:	e004      	b.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009b82:	bf00      	nop
 8009b84:	e002      	b.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009b86:	bf00      	nop
 8009b88:	e000      	b.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009b8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b8c:	7dfb      	ldrb	r3, [r7, #23]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d10a      	bne.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009b92:	4b8e      	ldr	r3, [pc, #568]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b96:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ba0:	498a      	ldr	r1, [pc, #552]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	654b      	str	r3, [r1, #84]	; 0x54
 8009ba6:	e001      	b.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ba8:	7dfb      	ldrb	r3, [r7, #23]
 8009baa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d04b      	beq.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009bbe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009bc2:	d02e      	beq.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8009bc4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009bc8:	d828      	bhi.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bce:	d02a      	beq.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bd4:	d822      	bhi.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009bd6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009bda:	d026      	beq.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009bdc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009be0:	d81c      	bhi.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009be2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009be6:	d010      	beq.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8009be8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bec:	d816      	bhi.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d01d      	beq.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bf6:	d111      	bne.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	3304      	adds	r3, #4
 8009bfc:	2100      	movs	r1, #0
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f000 fcd2 	bl	800a5a8 <RCCEx_PLL2_Config>
 8009c04:	4603      	mov	r3, r0
 8009c06:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009c08:	e012      	b.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	3324      	adds	r3, #36	; 0x24
 8009c0e:	2102      	movs	r1, #2
 8009c10:	4618      	mov	r0, r3
 8009c12:	f000 fd7b 	bl	800a70c <RCCEx_PLL3_Config>
 8009c16:	4603      	mov	r3, r0
 8009c18:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009c1a:	e009      	b.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	75fb      	strb	r3, [r7, #23]
      break;
 8009c20:	e006      	b.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009c22:	bf00      	nop
 8009c24:	e004      	b.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009c26:	bf00      	nop
 8009c28:	e002      	b.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009c2a:	bf00      	nop
 8009c2c:	e000      	b.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009c2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c30:	7dfb      	ldrb	r3, [r7, #23]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d10a      	bne.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009c36:	4b65      	ldr	r3, [pc, #404]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c3a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009c44:	4961      	ldr	r1, [pc, #388]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009c46:	4313      	orrs	r3, r2
 8009c48:	658b      	str	r3, [r1, #88]	; 0x58
 8009c4a:	e001      	b.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c4c:	7dfb      	ldrb	r3, [r7, #23]
 8009c4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d04b      	beq.n	8009cf4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c62:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009c66:	d02e      	beq.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8009c68:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009c6c:	d828      	bhi.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c72:	d02a      	beq.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8009c74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c78:	d822      	bhi.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009c7a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009c7e:	d026      	beq.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009c80:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009c84:	d81c      	bhi.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009c86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c8a:	d010      	beq.n	8009cae <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8009c8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c90:	d816      	bhi.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d01d      	beq.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c9a:	d111      	bne.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	3304      	adds	r3, #4
 8009ca0:	2100      	movs	r1, #0
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f000 fc80 	bl	800a5a8 <RCCEx_PLL2_Config>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009cac:	e012      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	3324      	adds	r3, #36	; 0x24
 8009cb2:	2102      	movs	r1, #2
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f000 fd29 	bl	800a70c <RCCEx_PLL3_Config>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009cbe:	e009      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	75fb      	strb	r3, [r7, #23]
      break;
 8009cc4:	e006      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009cc6:	bf00      	nop
 8009cc8:	e004      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009cca:	bf00      	nop
 8009ccc:	e002      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009cce:	bf00      	nop
 8009cd0:	e000      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009cd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cd4:	7dfb      	ldrb	r3, [r7, #23]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d10a      	bne.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009cda:	4b3c      	ldr	r3, [pc, #240]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009ce8:	4938      	ldr	r1, [pc, #224]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009cea:	4313      	orrs	r3, r2
 8009cec:	658b      	str	r3, [r1, #88]	; 0x58
 8009cee:	e001      	b.n	8009cf4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cf0:	7dfb      	ldrb	r3, [r7, #23]
 8009cf2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f003 0308 	and.w	r3, r3, #8
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d01a      	beq.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d0a:	d10a      	bne.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	3324      	adds	r3, #36	; 0x24
 8009d10:	2102      	movs	r1, #2
 8009d12:	4618      	mov	r0, r3
 8009d14:	f000 fcfa 	bl	800a70c <RCCEx_PLL3_Config>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d001      	beq.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009d22:	4b2a      	ldr	r3, [pc, #168]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d26:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d30:	4926      	ldr	r1, [pc, #152]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009d32:	4313      	orrs	r3, r2
 8009d34:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f003 0310 	and.w	r3, r3, #16
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d01a      	beq.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d4c:	d10a      	bne.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	3324      	adds	r3, #36	; 0x24
 8009d52:	2102      	movs	r1, #2
 8009d54:	4618      	mov	r0, r3
 8009d56:	f000 fcd9 	bl	800a70c <RCCEx_PLL3_Config>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d001      	beq.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8009d60:	2301      	movs	r3, #1
 8009d62:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009d64:	4b19      	ldr	r3, [pc, #100]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d72:	4916      	ldr	r1, [pc, #88]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009d74:	4313      	orrs	r3, r2
 8009d76:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d036      	beq.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009d8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d8e:	d01f      	beq.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009d90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d94:	d817      	bhi.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d003      	beq.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8009d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d9e:	d009      	beq.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8009da0:	e011      	b.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	3304      	adds	r3, #4
 8009da6:	2100      	movs	r1, #0
 8009da8:	4618      	mov	r0, r3
 8009daa:	f000 fbfd 	bl	800a5a8 <RCCEx_PLL2_Config>
 8009dae:	4603      	mov	r3, r0
 8009db0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009db2:	e00e      	b.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	3324      	adds	r3, #36	; 0x24
 8009db8:	2102      	movs	r1, #2
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f000 fca6 	bl	800a70c <RCCEx_PLL3_Config>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009dc4:	e005      	b.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	75fb      	strb	r3, [r7, #23]
      break;
 8009dca:	e002      	b.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8009dcc:	58024400 	.word	0x58024400
      break;
 8009dd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009dd2:	7dfb      	ldrb	r3, [r7, #23]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d10a      	bne.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009dd8:	4b93      	ldr	r3, [pc, #588]	; (800a028 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ddc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009de6:	4990      	ldr	r1, [pc, #576]	; (800a028 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009de8:	4313      	orrs	r3, r2
 8009dea:	658b      	str	r3, [r1, #88]	; 0x58
 8009dec:	e001      	b.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dee:	7dfb      	ldrb	r3, [r7, #23]
 8009df0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d033      	beq.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e04:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009e08:	d01c      	beq.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8009e0a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009e0e:	d816      	bhi.n	8009e3e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8009e10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e14:	d003      	beq.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8009e16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e1a:	d007      	beq.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8009e1c:	e00f      	b.n	8009e3e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e1e:	4b82      	ldr	r3, [pc, #520]	; (800a028 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e22:	4a81      	ldr	r2, [pc, #516]	; (800a028 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009e2a:	e00c      	b.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	3324      	adds	r3, #36	; 0x24
 8009e30:	2101      	movs	r1, #1
 8009e32:	4618      	mov	r0, r3
 8009e34:	f000 fc6a 	bl	800a70c <RCCEx_PLL3_Config>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009e3c:	e003      	b.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	75fb      	strb	r3, [r7, #23]
      break;
 8009e42:	e000      	b.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8009e44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e46:	7dfb      	ldrb	r3, [r7, #23]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d10a      	bne.n	8009e62 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009e4c:	4b76      	ldr	r3, [pc, #472]	; (800a028 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e5a:	4973      	ldr	r1, [pc, #460]	; (800a028 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	654b      	str	r3, [r1, #84]	; 0x54
 8009e60:	e001      	b.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e62:	7dfb      	ldrb	r3, [r7, #23]
 8009e64:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d029      	beq.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d003      	beq.n	8009e82 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8009e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e7e:	d007      	beq.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8009e80:	e00f      	b.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e82:	4b69      	ldr	r3, [pc, #420]	; (800a028 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e86:	4a68      	ldr	r2, [pc, #416]	; (800a028 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009e8e:	e00b      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	3304      	adds	r3, #4
 8009e94:	2102      	movs	r1, #2
 8009e96:	4618      	mov	r0, r3
 8009e98:	f000 fb86 	bl	800a5a8 <RCCEx_PLL2_Config>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009ea0:	e002      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	75fb      	strb	r3, [r7, #23]
      break;
 8009ea6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ea8:	7dfb      	ldrb	r3, [r7, #23]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d109      	bne.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009eae:	4b5e      	ldr	r3, [pc, #376]	; (800a028 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009eb2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009eba:	495b      	ldr	r1, [pc, #364]	; (800a028 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009ec0:	e001      	b.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ec2:	7dfb      	ldrb	r3, [r7, #23]
 8009ec4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d00a      	beq.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	3324      	adds	r3, #36	; 0x24
 8009ed6:	2102      	movs	r1, #2
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f000 fc17 	bl	800a70c <RCCEx_PLL3_Config>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d001      	beq.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d030      	beq.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ef8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009efc:	d017      	beq.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8009efe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f02:	d811      	bhi.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f08:	d013      	beq.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009f0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f0e:	d80b      	bhi.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d010      	beq.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009f14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f18:	d106      	bne.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f1a:	4b43      	ldr	r3, [pc, #268]	; (800a028 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f1e:	4a42      	ldr	r2, [pc, #264]	; (800a028 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009f26:	e007      	b.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8009f2c:	e004      	b.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009f2e:	bf00      	nop
 8009f30:	e002      	b.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009f32:	bf00      	nop
 8009f34:	e000      	b.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009f36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f38:	7dfb      	ldrb	r3, [r7, #23]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d109      	bne.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009f3e:	4b3a      	ldr	r3, [pc, #232]	; (800a028 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f4a:	4937      	ldr	r1, [pc, #220]	; (800a028 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	654b      	str	r3, [r1, #84]	; 0x54
 8009f50:	e001      	b.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f52:	7dfb      	ldrb	r3, [r7, #23]
 8009f54:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d008      	beq.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009f62:	4b31      	ldr	r3, [pc, #196]	; (800a028 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f66:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f6e:	492e      	ldr	r1, [pc, #184]	; (800a028 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f70:	4313      	orrs	r3, r2
 8009f72:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d009      	beq.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009f80:	4b29      	ldr	r3, [pc, #164]	; (800a028 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f82:	691b      	ldr	r3, [r3, #16]
 8009f84:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009f8e:	4926      	ldr	r1, [pc, #152]	; (800a028 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f90:	4313      	orrs	r3, r2
 8009f92:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d008      	beq.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009fa0:	4b21      	ldr	r3, [pc, #132]	; (800a028 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fa4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fac:	491e      	ldr	r1, [pc, #120]	; (800a028 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d00d      	beq.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009fbe:	4b1a      	ldr	r3, [pc, #104]	; (800a028 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009fc0:	691b      	ldr	r3, [r3, #16]
 8009fc2:	4a19      	ldr	r2, [pc, #100]	; (800a028 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009fc4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009fc8:	6113      	str	r3, [r2, #16]
 8009fca:	4b17      	ldr	r3, [pc, #92]	; (800a028 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009fcc:	691a      	ldr	r2, [r3, #16]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009fd4:	4914      	ldr	r1, [pc, #80]	; (800a028 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	da08      	bge.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009fe2:	4b11      	ldr	r3, [pc, #68]	; (800a028 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fe6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fee:	490e      	ldr	r1, [pc, #56]	; (800a028 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d009      	beq.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a000:	4b09      	ldr	r3, [pc, #36]	; (800a028 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a004:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a00e:	4906      	ldr	r1, [pc, #24]	; (800a028 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a010:	4313      	orrs	r3, r2
 800a012:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a014:	7dbb      	ldrb	r3, [r7, #22]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d101      	bne.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800a01a:	2300      	movs	r3, #0
 800a01c:	e000      	b.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800a01e:	2301      	movs	r3, #1
}
 800a020:	4618      	mov	r0, r3
 800a022:	3718      	adds	r7, #24
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	58024400 	.word	0x58024400

0800a02c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a030:	f7ff f860 	bl	80090f4 <HAL_RCC_GetHCLKFreq>
 800a034:	4602      	mov	r2, r0
 800a036:	4b06      	ldr	r3, [pc, #24]	; (800a050 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a038:	6a1b      	ldr	r3, [r3, #32]
 800a03a:	091b      	lsrs	r3, r3, #4
 800a03c:	f003 0307 	and.w	r3, r3, #7
 800a040:	4904      	ldr	r1, [pc, #16]	; (800a054 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a042:	5ccb      	ldrb	r3, [r1, r3]
 800a044:	f003 031f 	and.w	r3, r3, #31
 800a048:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	bd80      	pop	{r7, pc}
 800a050:	58024400 	.word	0x58024400
 800a054:	08011c7c 	.word	0x08011c7c

0800a058 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a058:	b480      	push	{r7}
 800a05a:	b089      	sub	sp, #36	; 0x24
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a060:	4ba1      	ldr	r3, [pc, #644]	; (800a2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a064:	f003 0303 	and.w	r3, r3, #3
 800a068:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a06a:	4b9f      	ldr	r3, [pc, #636]	; (800a2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a06c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a06e:	0b1b      	lsrs	r3, r3, #12
 800a070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a074:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a076:	4b9c      	ldr	r3, [pc, #624]	; (800a2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07a:	091b      	lsrs	r3, r3, #4
 800a07c:	f003 0301 	and.w	r3, r3, #1
 800a080:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a082:	4b99      	ldr	r3, [pc, #612]	; (800a2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a086:	08db      	lsrs	r3, r3, #3
 800a088:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a08c:	693a      	ldr	r2, [r7, #16]
 800a08e:	fb02 f303 	mul.w	r3, r2, r3
 800a092:	ee07 3a90 	vmov	s15, r3
 800a096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a09a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	f000 8111 	beq.w	800a2c8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a0a6:	69bb      	ldr	r3, [r7, #24]
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	f000 8083 	beq.w	800a1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a0ae:	69bb      	ldr	r3, [r7, #24]
 800a0b0:	2b02      	cmp	r3, #2
 800a0b2:	f200 80a1 	bhi.w	800a1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d003      	beq.n	800a0c4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a0bc:	69bb      	ldr	r3, [r7, #24]
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d056      	beq.n	800a170 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a0c2:	e099      	b.n	800a1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0c4:	4b88      	ldr	r3, [pc, #544]	; (800a2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f003 0320 	and.w	r3, r3, #32
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d02d      	beq.n	800a12c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a0d0:	4b85      	ldr	r3, [pc, #532]	; (800a2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	08db      	lsrs	r3, r3, #3
 800a0d6:	f003 0303 	and.w	r3, r3, #3
 800a0da:	4a84      	ldr	r2, [pc, #528]	; (800a2ec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a0dc:	fa22 f303 	lsr.w	r3, r2, r3
 800a0e0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	ee07 3a90 	vmov	s15, r3
 800a0e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	ee07 3a90 	vmov	s15, r3
 800a0f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0fa:	4b7b      	ldr	r3, [pc, #492]	; (800a2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a102:	ee07 3a90 	vmov	s15, r3
 800a106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a10a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a10e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a2f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a11a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a11e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a122:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a126:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a12a:	e087      	b.n	800a23c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	ee07 3a90 	vmov	s15, r3
 800a132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a136:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a2f4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a13a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a13e:	4b6a      	ldr	r3, [pc, #424]	; (800a2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a146:	ee07 3a90 	vmov	s15, r3
 800a14a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a14e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a152:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a2f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a15a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a15e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a16a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a16e:	e065      	b.n	800a23c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	ee07 3a90 	vmov	s15, r3
 800a176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a17a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a2f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a17e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a182:	4b59      	ldr	r3, [pc, #356]	; (800a2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a18a:	ee07 3a90 	vmov	s15, r3
 800a18e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a192:	ed97 6a03 	vldr	s12, [r7, #12]
 800a196:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a2f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a19a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a19e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a1b2:	e043      	b.n	800a23c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	ee07 3a90 	vmov	s15, r3
 800a1ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a2fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a1c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1c6:	4b48      	ldr	r3, [pc, #288]	; (800a2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ce:	ee07 3a90 	vmov	s15, r3
 800a1d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1da:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a2f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a1de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a1f6:	e021      	b.n	800a23c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	ee07 3a90 	vmov	s15, r3
 800a1fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a202:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a2f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a20a:	4b37      	ldr	r3, [pc, #220]	; (800a2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a20c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a20e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a212:	ee07 3a90 	vmov	s15, r3
 800a216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a21a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a21e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a2f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a22a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a22e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a232:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a236:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a23a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a23c:	4b2a      	ldr	r3, [pc, #168]	; (800a2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a240:	0a5b      	lsrs	r3, r3, #9
 800a242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a246:	ee07 3a90 	vmov	s15, r3
 800a24a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a24e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a252:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a256:	edd7 6a07 	vldr	s13, [r7, #28]
 800a25a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a25e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a262:	ee17 2a90 	vmov	r2, s15
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a26a:	4b1f      	ldr	r3, [pc, #124]	; (800a2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a26c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a26e:	0c1b      	lsrs	r3, r3, #16
 800a270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a274:	ee07 3a90 	vmov	s15, r3
 800a278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a27c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a280:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a284:	edd7 6a07 	vldr	s13, [r7, #28]
 800a288:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a28c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a290:	ee17 2a90 	vmov	r2, s15
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a298:	4b13      	ldr	r3, [pc, #76]	; (800a2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a29a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a29c:	0e1b      	lsrs	r3, r3, #24
 800a29e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2a2:	ee07 3a90 	vmov	s15, r3
 800a2a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a2ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2be:	ee17 2a90 	vmov	r2, s15
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a2c6:	e008      	b.n	800a2da <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	609a      	str	r2, [r3, #8]
}
 800a2da:	bf00      	nop
 800a2dc:	3724      	adds	r7, #36	; 0x24
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr
 800a2e6:	bf00      	nop
 800a2e8:	58024400 	.word	0x58024400
 800a2ec:	03d09000 	.word	0x03d09000
 800a2f0:	46000000 	.word	0x46000000
 800a2f4:	4c742400 	.word	0x4c742400
 800a2f8:	4a742400 	.word	0x4a742400
 800a2fc:	4c371b00 	.word	0x4c371b00

0800a300 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a300:	b480      	push	{r7}
 800a302:	b089      	sub	sp, #36	; 0x24
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a308:	4ba1      	ldr	r3, [pc, #644]	; (800a590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a30a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a30c:	f003 0303 	and.w	r3, r3, #3
 800a310:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a312:	4b9f      	ldr	r3, [pc, #636]	; (800a590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a316:	0d1b      	lsrs	r3, r3, #20
 800a318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a31c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a31e:	4b9c      	ldr	r3, [pc, #624]	; (800a590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a322:	0a1b      	lsrs	r3, r3, #8
 800a324:	f003 0301 	and.w	r3, r3, #1
 800a328:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a32a:	4b99      	ldr	r3, [pc, #612]	; (800a590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a32c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a32e:	08db      	lsrs	r3, r3, #3
 800a330:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a334:	693a      	ldr	r2, [r7, #16]
 800a336:	fb02 f303 	mul.w	r3, r2, r3
 800a33a:	ee07 3a90 	vmov	s15, r3
 800a33e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a342:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f000 8111 	beq.w	800a570 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a34e:	69bb      	ldr	r3, [r7, #24]
 800a350:	2b02      	cmp	r3, #2
 800a352:	f000 8083 	beq.w	800a45c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	2b02      	cmp	r3, #2
 800a35a:	f200 80a1 	bhi.w	800a4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a35e:	69bb      	ldr	r3, [r7, #24]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d003      	beq.n	800a36c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a364:	69bb      	ldr	r3, [r7, #24]
 800a366:	2b01      	cmp	r3, #1
 800a368:	d056      	beq.n	800a418 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a36a:	e099      	b.n	800a4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a36c:	4b88      	ldr	r3, [pc, #544]	; (800a590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f003 0320 	and.w	r3, r3, #32
 800a374:	2b00      	cmp	r3, #0
 800a376:	d02d      	beq.n	800a3d4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a378:	4b85      	ldr	r3, [pc, #532]	; (800a590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	08db      	lsrs	r3, r3, #3
 800a37e:	f003 0303 	and.w	r3, r3, #3
 800a382:	4a84      	ldr	r2, [pc, #528]	; (800a594 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a384:	fa22 f303 	lsr.w	r3, r2, r3
 800a388:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	ee07 3a90 	vmov	s15, r3
 800a390:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	ee07 3a90 	vmov	s15, r3
 800a39a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a39e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3a2:	4b7b      	ldr	r3, [pc, #492]	; (800a590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3aa:	ee07 3a90 	vmov	s15, r3
 800a3ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a598 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a3ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3ce:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a3d2:	e087      	b.n	800a4e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	ee07 3a90 	vmov	s15, r3
 800a3da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a59c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a3e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3e6:	4b6a      	ldr	r3, [pc, #424]	; (800a590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3ee:	ee07 3a90 	vmov	s15, r3
 800a3f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a598 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a3fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a40a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a40e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a412:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a416:	e065      	b.n	800a4e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	ee07 3a90 	vmov	s15, r3
 800a41e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a422:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a5a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a42a:	4b59      	ldr	r3, [pc, #356]	; (800a590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a42c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a42e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a432:	ee07 3a90 	vmov	s15, r3
 800a436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a43a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a43e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a598 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a44a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a44e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a452:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a456:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a45a:	e043      	b.n	800a4e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	ee07 3a90 	vmov	s15, r3
 800a462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a466:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a46a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a46e:	4b48      	ldr	r3, [pc, #288]	; (800a590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a476:	ee07 3a90 	vmov	s15, r3
 800a47a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a47e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a482:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a598 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a48a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a48e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a49a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a49e:	e021      	b.n	800a4e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	ee07 3a90 	vmov	s15, r3
 800a4a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a5a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a4ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4b2:	4b37      	ldr	r3, [pc, #220]	; (800a590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4ba:	ee07 3a90 	vmov	s15, r3
 800a4be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a598 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a4ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a4e2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a4e4:	4b2a      	ldr	r3, [pc, #168]	; (800a590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e8:	0a5b      	lsrs	r3, r3, #9
 800a4ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4ee:	ee07 3a90 	vmov	s15, r3
 800a4f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800a502:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a50a:	ee17 2a90 	vmov	r2, s15
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a512:	4b1f      	ldr	r3, [pc, #124]	; (800a590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a516:	0c1b      	lsrs	r3, r3, #16
 800a518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a51c:	ee07 3a90 	vmov	s15, r3
 800a520:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a524:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a528:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a52c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a530:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a534:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a538:	ee17 2a90 	vmov	r2, s15
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a540:	4b13      	ldr	r3, [pc, #76]	; (800a590 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a544:	0e1b      	lsrs	r3, r3, #24
 800a546:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a54a:	ee07 3a90 	vmov	s15, r3
 800a54e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a552:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a556:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a55a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a55e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a562:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a566:	ee17 2a90 	vmov	r2, s15
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a56e:	e008      	b.n	800a582 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2200      	movs	r2, #0
 800a574:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2200      	movs	r2, #0
 800a57a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	609a      	str	r2, [r3, #8]
}
 800a582:	bf00      	nop
 800a584:	3724      	adds	r7, #36	; 0x24
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr
 800a58e:	bf00      	nop
 800a590:	58024400 	.word	0x58024400
 800a594:	03d09000 	.word	0x03d09000
 800a598:	46000000 	.word	0x46000000
 800a59c:	4c742400 	.word	0x4c742400
 800a5a0:	4a742400 	.word	0x4a742400
 800a5a4:	4c371b00 	.word	0x4c371b00

0800a5a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b084      	sub	sp, #16
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a5b6:	4b53      	ldr	r3, [pc, #332]	; (800a704 <RCCEx_PLL2_Config+0x15c>)
 800a5b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ba:	f003 0303 	and.w	r3, r3, #3
 800a5be:	2b03      	cmp	r3, #3
 800a5c0:	d101      	bne.n	800a5c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	e099      	b.n	800a6fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a5c6:	4b4f      	ldr	r3, [pc, #316]	; (800a704 <RCCEx_PLL2_Config+0x15c>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4a4e      	ldr	r2, [pc, #312]	; (800a704 <RCCEx_PLL2_Config+0x15c>)
 800a5cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a5d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5d2:	f7fa faa9 	bl	8004b28 <HAL_GetTick>
 800a5d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a5d8:	e008      	b.n	800a5ec <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a5da:	f7fa faa5 	bl	8004b28 <HAL_GetTick>
 800a5de:	4602      	mov	r2, r0
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	1ad3      	subs	r3, r2, r3
 800a5e4:	2b02      	cmp	r3, #2
 800a5e6:	d901      	bls.n	800a5ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a5e8:	2303      	movs	r3, #3
 800a5ea:	e086      	b.n	800a6fa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a5ec:	4b45      	ldr	r3, [pc, #276]	; (800a704 <RCCEx_PLL2_Config+0x15c>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d1f0      	bne.n	800a5da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a5f8:	4b42      	ldr	r3, [pc, #264]	; (800a704 <RCCEx_PLL2_Config+0x15c>)
 800a5fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5fc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	031b      	lsls	r3, r3, #12
 800a606:	493f      	ldr	r1, [pc, #252]	; (800a704 <RCCEx_PLL2_Config+0x15c>)
 800a608:	4313      	orrs	r3, r2
 800a60a:	628b      	str	r3, [r1, #40]	; 0x28
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	3b01      	subs	r3, #1
 800a612:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	3b01      	subs	r3, #1
 800a61c:	025b      	lsls	r3, r3, #9
 800a61e:	b29b      	uxth	r3, r3
 800a620:	431a      	orrs	r2, r3
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	68db      	ldr	r3, [r3, #12]
 800a626:	3b01      	subs	r3, #1
 800a628:	041b      	lsls	r3, r3, #16
 800a62a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a62e:	431a      	orrs	r2, r3
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	691b      	ldr	r3, [r3, #16]
 800a634:	3b01      	subs	r3, #1
 800a636:	061b      	lsls	r3, r3, #24
 800a638:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a63c:	4931      	ldr	r1, [pc, #196]	; (800a704 <RCCEx_PLL2_Config+0x15c>)
 800a63e:	4313      	orrs	r3, r2
 800a640:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a642:	4b30      	ldr	r3, [pc, #192]	; (800a704 <RCCEx_PLL2_Config+0x15c>)
 800a644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a646:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	695b      	ldr	r3, [r3, #20]
 800a64e:	492d      	ldr	r1, [pc, #180]	; (800a704 <RCCEx_PLL2_Config+0x15c>)
 800a650:	4313      	orrs	r3, r2
 800a652:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a654:	4b2b      	ldr	r3, [pc, #172]	; (800a704 <RCCEx_PLL2_Config+0x15c>)
 800a656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a658:	f023 0220 	bic.w	r2, r3, #32
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	699b      	ldr	r3, [r3, #24]
 800a660:	4928      	ldr	r1, [pc, #160]	; (800a704 <RCCEx_PLL2_Config+0x15c>)
 800a662:	4313      	orrs	r3, r2
 800a664:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a666:	4b27      	ldr	r3, [pc, #156]	; (800a704 <RCCEx_PLL2_Config+0x15c>)
 800a668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a66a:	4a26      	ldr	r2, [pc, #152]	; (800a704 <RCCEx_PLL2_Config+0x15c>)
 800a66c:	f023 0310 	bic.w	r3, r3, #16
 800a670:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a672:	4b24      	ldr	r3, [pc, #144]	; (800a704 <RCCEx_PLL2_Config+0x15c>)
 800a674:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a676:	4b24      	ldr	r3, [pc, #144]	; (800a708 <RCCEx_PLL2_Config+0x160>)
 800a678:	4013      	ands	r3, r2
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	69d2      	ldr	r2, [r2, #28]
 800a67e:	00d2      	lsls	r2, r2, #3
 800a680:	4920      	ldr	r1, [pc, #128]	; (800a704 <RCCEx_PLL2_Config+0x15c>)
 800a682:	4313      	orrs	r3, r2
 800a684:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a686:	4b1f      	ldr	r3, [pc, #124]	; (800a704 <RCCEx_PLL2_Config+0x15c>)
 800a688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a68a:	4a1e      	ldr	r2, [pc, #120]	; (800a704 <RCCEx_PLL2_Config+0x15c>)
 800a68c:	f043 0310 	orr.w	r3, r3, #16
 800a690:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d106      	bne.n	800a6a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a698:	4b1a      	ldr	r3, [pc, #104]	; (800a704 <RCCEx_PLL2_Config+0x15c>)
 800a69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a69c:	4a19      	ldr	r2, [pc, #100]	; (800a704 <RCCEx_PLL2_Config+0x15c>)
 800a69e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a6a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a6a4:	e00f      	b.n	800a6c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	2b01      	cmp	r3, #1
 800a6aa:	d106      	bne.n	800a6ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a6ac:	4b15      	ldr	r3, [pc, #84]	; (800a704 <RCCEx_PLL2_Config+0x15c>)
 800a6ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6b0:	4a14      	ldr	r2, [pc, #80]	; (800a704 <RCCEx_PLL2_Config+0x15c>)
 800a6b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a6b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a6b8:	e005      	b.n	800a6c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a6ba:	4b12      	ldr	r3, [pc, #72]	; (800a704 <RCCEx_PLL2_Config+0x15c>)
 800a6bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6be:	4a11      	ldr	r2, [pc, #68]	; (800a704 <RCCEx_PLL2_Config+0x15c>)
 800a6c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a6c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a6c6:	4b0f      	ldr	r3, [pc, #60]	; (800a704 <RCCEx_PLL2_Config+0x15c>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a0e      	ldr	r2, [pc, #56]	; (800a704 <RCCEx_PLL2_Config+0x15c>)
 800a6cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a6d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6d2:	f7fa fa29 	bl	8004b28 <HAL_GetTick>
 800a6d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a6d8:	e008      	b.n	800a6ec <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a6da:	f7fa fa25 	bl	8004b28 <HAL_GetTick>
 800a6de:	4602      	mov	r2, r0
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	1ad3      	subs	r3, r2, r3
 800a6e4:	2b02      	cmp	r3, #2
 800a6e6:	d901      	bls.n	800a6ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a6e8:	2303      	movs	r3, #3
 800a6ea:	e006      	b.n	800a6fa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a6ec:	4b05      	ldr	r3, [pc, #20]	; (800a704 <RCCEx_PLL2_Config+0x15c>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d0f0      	beq.n	800a6da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a6f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3710      	adds	r7, #16
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop
 800a704:	58024400 	.word	0x58024400
 800a708:	ffff0007 	.word	0xffff0007

0800a70c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a716:	2300      	movs	r3, #0
 800a718:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a71a:	4b53      	ldr	r3, [pc, #332]	; (800a868 <RCCEx_PLL3_Config+0x15c>)
 800a71c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a71e:	f003 0303 	and.w	r3, r3, #3
 800a722:	2b03      	cmp	r3, #3
 800a724:	d101      	bne.n	800a72a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a726:	2301      	movs	r3, #1
 800a728:	e099      	b.n	800a85e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a72a:	4b4f      	ldr	r3, [pc, #316]	; (800a868 <RCCEx_PLL3_Config+0x15c>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4a4e      	ldr	r2, [pc, #312]	; (800a868 <RCCEx_PLL3_Config+0x15c>)
 800a730:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a734:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a736:	f7fa f9f7 	bl	8004b28 <HAL_GetTick>
 800a73a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a73c:	e008      	b.n	800a750 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a73e:	f7fa f9f3 	bl	8004b28 <HAL_GetTick>
 800a742:	4602      	mov	r2, r0
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	1ad3      	subs	r3, r2, r3
 800a748:	2b02      	cmp	r3, #2
 800a74a:	d901      	bls.n	800a750 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a74c:	2303      	movs	r3, #3
 800a74e:	e086      	b.n	800a85e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a750:	4b45      	ldr	r3, [pc, #276]	; (800a868 <RCCEx_PLL3_Config+0x15c>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d1f0      	bne.n	800a73e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a75c:	4b42      	ldr	r3, [pc, #264]	; (800a868 <RCCEx_PLL3_Config+0x15c>)
 800a75e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a760:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	051b      	lsls	r3, r3, #20
 800a76a:	493f      	ldr	r1, [pc, #252]	; (800a868 <RCCEx_PLL3_Config+0x15c>)
 800a76c:	4313      	orrs	r3, r2
 800a76e:	628b      	str	r3, [r1, #40]	; 0x28
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	3b01      	subs	r3, #1
 800a776:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	689b      	ldr	r3, [r3, #8]
 800a77e:	3b01      	subs	r3, #1
 800a780:	025b      	lsls	r3, r3, #9
 800a782:	b29b      	uxth	r3, r3
 800a784:	431a      	orrs	r2, r3
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	3b01      	subs	r3, #1
 800a78c:	041b      	lsls	r3, r3, #16
 800a78e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a792:	431a      	orrs	r2, r3
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	691b      	ldr	r3, [r3, #16]
 800a798:	3b01      	subs	r3, #1
 800a79a:	061b      	lsls	r3, r3, #24
 800a79c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a7a0:	4931      	ldr	r1, [pc, #196]	; (800a868 <RCCEx_PLL3_Config+0x15c>)
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a7a6:	4b30      	ldr	r3, [pc, #192]	; (800a868 <RCCEx_PLL3_Config+0x15c>)
 800a7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	695b      	ldr	r3, [r3, #20]
 800a7b2:	492d      	ldr	r1, [pc, #180]	; (800a868 <RCCEx_PLL3_Config+0x15c>)
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a7b8:	4b2b      	ldr	r3, [pc, #172]	; (800a868 <RCCEx_PLL3_Config+0x15c>)
 800a7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7bc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	699b      	ldr	r3, [r3, #24]
 800a7c4:	4928      	ldr	r1, [pc, #160]	; (800a868 <RCCEx_PLL3_Config+0x15c>)
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a7ca:	4b27      	ldr	r3, [pc, #156]	; (800a868 <RCCEx_PLL3_Config+0x15c>)
 800a7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ce:	4a26      	ldr	r2, [pc, #152]	; (800a868 <RCCEx_PLL3_Config+0x15c>)
 800a7d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a7d6:	4b24      	ldr	r3, [pc, #144]	; (800a868 <RCCEx_PLL3_Config+0x15c>)
 800a7d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a7da:	4b24      	ldr	r3, [pc, #144]	; (800a86c <RCCEx_PLL3_Config+0x160>)
 800a7dc:	4013      	ands	r3, r2
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	69d2      	ldr	r2, [r2, #28]
 800a7e2:	00d2      	lsls	r2, r2, #3
 800a7e4:	4920      	ldr	r1, [pc, #128]	; (800a868 <RCCEx_PLL3_Config+0x15c>)
 800a7e6:	4313      	orrs	r3, r2
 800a7e8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a7ea:	4b1f      	ldr	r3, [pc, #124]	; (800a868 <RCCEx_PLL3_Config+0x15c>)
 800a7ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ee:	4a1e      	ldr	r2, [pc, #120]	; (800a868 <RCCEx_PLL3_Config+0x15c>)
 800a7f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d106      	bne.n	800a80a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a7fc:	4b1a      	ldr	r3, [pc, #104]	; (800a868 <RCCEx_PLL3_Config+0x15c>)
 800a7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a800:	4a19      	ldr	r2, [pc, #100]	; (800a868 <RCCEx_PLL3_Config+0x15c>)
 800a802:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a806:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a808:	e00f      	b.n	800a82a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d106      	bne.n	800a81e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a810:	4b15      	ldr	r3, [pc, #84]	; (800a868 <RCCEx_PLL3_Config+0x15c>)
 800a812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a814:	4a14      	ldr	r2, [pc, #80]	; (800a868 <RCCEx_PLL3_Config+0x15c>)
 800a816:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a81a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a81c:	e005      	b.n	800a82a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a81e:	4b12      	ldr	r3, [pc, #72]	; (800a868 <RCCEx_PLL3_Config+0x15c>)
 800a820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a822:	4a11      	ldr	r2, [pc, #68]	; (800a868 <RCCEx_PLL3_Config+0x15c>)
 800a824:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a828:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a82a:	4b0f      	ldr	r3, [pc, #60]	; (800a868 <RCCEx_PLL3_Config+0x15c>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4a0e      	ldr	r2, [pc, #56]	; (800a868 <RCCEx_PLL3_Config+0x15c>)
 800a830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a834:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a836:	f7fa f977 	bl	8004b28 <HAL_GetTick>
 800a83a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a83c:	e008      	b.n	800a850 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a83e:	f7fa f973 	bl	8004b28 <HAL_GetTick>
 800a842:	4602      	mov	r2, r0
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	1ad3      	subs	r3, r2, r3
 800a848:	2b02      	cmp	r3, #2
 800a84a:	d901      	bls.n	800a850 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a84c:	2303      	movs	r3, #3
 800a84e:	e006      	b.n	800a85e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a850:	4b05      	ldr	r3, [pc, #20]	; (800a868 <RCCEx_PLL3_Config+0x15c>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d0f0      	beq.n	800a83e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a85c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	58024400 	.word	0x58024400
 800a86c:	ffff0007 	.word	0xffff0007

0800a870 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d101      	bne.n	800a882 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a87e:	2301      	movs	r3, #1
 800a880:	e0f1      	b.n	800aa66 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2200      	movs	r2, #0
 800a886:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4a78      	ldr	r2, [pc, #480]	; (800aa70 <HAL_SPI_Init+0x200>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d00f      	beq.n	800a8b2 <HAL_SPI_Init+0x42>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a77      	ldr	r2, [pc, #476]	; (800aa74 <HAL_SPI_Init+0x204>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	d00a      	beq.n	800a8b2 <HAL_SPI_Init+0x42>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a75      	ldr	r2, [pc, #468]	; (800aa78 <HAL_SPI_Init+0x208>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d005      	beq.n	800a8b2 <HAL_SPI_Init+0x42>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	68db      	ldr	r3, [r3, #12]
 800a8aa:	2b0f      	cmp	r3, #15
 800a8ac:	d901      	bls.n	800a8b2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	e0d9      	b.n	800aa66 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 f8e2 	bl	800aa7c <SPI_GetPacketSize>
 800a8b8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4a6c      	ldr	r2, [pc, #432]	; (800aa70 <HAL_SPI_Init+0x200>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d00c      	beq.n	800a8de <HAL_SPI_Init+0x6e>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4a6a      	ldr	r2, [pc, #424]	; (800aa74 <HAL_SPI_Init+0x204>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d007      	beq.n	800a8de <HAL_SPI_Init+0x6e>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	4a69      	ldr	r2, [pc, #420]	; (800aa78 <HAL_SPI_Init+0x208>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d002      	beq.n	800a8de <HAL_SPI_Init+0x6e>
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2b08      	cmp	r3, #8
 800a8dc:	d811      	bhi.n	800a902 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a8e2:	4a63      	ldr	r2, [pc, #396]	; (800aa70 <HAL_SPI_Init+0x200>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d009      	beq.n	800a8fc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4a61      	ldr	r2, [pc, #388]	; (800aa74 <HAL_SPI_Init+0x204>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d004      	beq.n	800a8fc <HAL_SPI_Init+0x8c>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4a60      	ldr	r2, [pc, #384]	; (800aa78 <HAL_SPI_Init+0x208>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d104      	bne.n	800a906 <HAL_SPI_Init+0x96>
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2b10      	cmp	r3, #16
 800a900:	d901      	bls.n	800a906 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a902:	2301      	movs	r3, #1
 800a904:	e0af      	b.n	800aa66 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d106      	bne.n	800a920 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f7f8 fc32 	bl	8003184 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2202      	movs	r2, #2
 800a924:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	681a      	ldr	r2, [r3, #0]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f022 0201 	bic.w	r2, r2, #1
 800a936:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	689b      	ldr	r3, [r3, #8]
 800a93e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a942:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	699b      	ldr	r3, [r3, #24]
 800a948:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a94c:	d119      	bne.n	800a982 <HAL_SPI_Init+0x112>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a956:	d103      	bne.n	800a960 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d008      	beq.n	800a972 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a964:	2b00      	cmp	r3, #0
 800a966:	d10c      	bne.n	800a982 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a96c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a970:	d107      	bne.n	800a982 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a980:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	69da      	ldr	r2, [r3, #28]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a98a:	431a      	orrs	r2, r3
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	431a      	orrs	r2, r3
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a994:	ea42 0103 	orr.w	r1, r2, r3
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	68da      	ldr	r2, [r3, #12]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	430a      	orrs	r2, r1
 800a9a2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ac:	431a      	orrs	r2, r3
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9b2:	431a      	orrs	r2, r3
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	699b      	ldr	r3, [r3, #24]
 800a9b8:	431a      	orrs	r2, r3
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	691b      	ldr	r3, [r3, #16]
 800a9be:	431a      	orrs	r2, r3
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	695b      	ldr	r3, [r3, #20]
 800a9c4:	431a      	orrs	r2, r3
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6a1b      	ldr	r3, [r3, #32]
 800a9ca:	431a      	orrs	r2, r3
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	431a      	orrs	r2, r3
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9d6:	431a      	orrs	r2, r3
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	689b      	ldr	r3, [r3, #8]
 800a9dc:	431a      	orrs	r2, r3
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9e2:	ea42 0103 	orr.w	r1, r2, r3
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	430a      	orrs	r2, r1
 800a9f0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d113      	bne.n	800aa22 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	689b      	ldr	r3, [r3, #8]
 800aa00:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa0c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	689b      	ldr	r3, [r3, #8]
 800aa14:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800aa20:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f022 0201 	bic.w	r2, r2, #1
 800aa30:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d00a      	beq.n	800aa54 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	68db      	ldr	r3, [r3, #12]
 800aa44:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	430a      	orrs	r2, r1
 800aa52:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2201      	movs	r2, #1
 800aa60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800aa64:	2300      	movs	r3, #0
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3710      	adds	r7, #16
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	40013000 	.word	0x40013000
 800aa74:	40003800 	.word	0x40003800
 800aa78:	40003c00 	.word	0x40003c00

0800aa7c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b085      	sub	sp, #20
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa88:	095b      	lsrs	r3, r3, #5
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	68db      	ldr	r3, [r3, #12]
 800aa92:	3301      	adds	r3, #1
 800aa94:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	3307      	adds	r3, #7
 800aa9a:	08db      	lsrs	r3, r3, #3
 800aa9c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	68fa      	ldr	r2, [r7, #12]
 800aaa2:	fb02 f303 	mul.w	r3, r2, r3
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3714      	adds	r7, #20
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab0:	4770      	bx	lr

0800aab2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aab2:	b580      	push	{r7, lr}
 800aab4:	b082      	sub	sp, #8
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d101      	bne.n	800aac4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aac0:	2301      	movs	r3, #1
 800aac2:	e049      	b.n	800ab58 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d106      	bne.n	800aade <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2200      	movs	r2, #0
 800aad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f7f9 fa21 	bl	8003f20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2202      	movs	r2, #2
 800aae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	3304      	adds	r3, #4
 800aaee:	4619      	mov	r1, r3
 800aaf0:	4610      	mov	r0, r2
 800aaf2:	f000 fc91 	bl	800b418 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2201      	movs	r2, #1
 800aafa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2201      	movs	r2, #1
 800ab02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2201      	movs	r2, #1
 800ab0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2201      	movs	r2, #1
 800ab12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2201      	movs	r2, #1
 800ab1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2201      	movs	r2, #1
 800ab22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2201      	movs	r2, #1
 800ab2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2201      	movs	r2, #1
 800ab32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2201      	movs	r2, #1
 800ab3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2201      	movs	r2, #1
 800ab42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2201      	movs	r2, #1
 800ab4a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2201      	movs	r2, #1
 800ab52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab56:	2300      	movs	r3, #0
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3708      	adds	r7, #8
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b085      	sub	sp, #20
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab6e:	b2db      	uxtb	r3, r3
 800ab70:	2b01      	cmp	r3, #1
 800ab72:	d001      	beq.n	800ab78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ab74:	2301      	movs	r3, #1
 800ab76:	e054      	b.n	800ac22 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2202      	movs	r2, #2
 800ab7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	68da      	ldr	r2, [r3, #12]
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f042 0201 	orr.w	r2, r2, #1
 800ab8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a26      	ldr	r2, [pc, #152]	; (800ac30 <HAL_TIM_Base_Start_IT+0xd0>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d022      	beq.n	800abe0 <HAL_TIM_Base_Start_IT+0x80>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aba2:	d01d      	beq.n	800abe0 <HAL_TIM_Base_Start_IT+0x80>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4a22      	ldr	r2, [pc, #136]	; (800ac34 <HAL_TIM_Base_Start_IT+0xd4>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d018      	beq.n	800abe0 <HAL_TIM_Base_Start_IT+0x80>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4a21      	ldr	r2, [pc, #132]	; (800ac38 <HAL_TIM_Base_Start_IT+0xd8>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d013      	beq.n	800abe0 <HAL_TIM_Base_Start_IT+0x80>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a1f      	ldr	r2, [pc, #124]	; (800ac3c <HAL_TIM_Base_Start_IT+0xdc>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d00e      	beq.n	800abe0 <HAL_TIM_Base_Start_IT+0x80>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4a1e      	ldr	r2, [pc, #120]	; (800ac40 <HAL_TIM_Base_Start_IT+0xe0>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d009      	beq.n	800abe0 <HAL_TIM_Base_Start_IT+0x80>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a1c      	ldr	r2, [pc, #112]	; (800ac44 <HAL_TIM_Base_Start_IT+0xe4>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d004      	beq.n	800abe0 <HAL_TIM_Base_Start_IT+0x80>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4a1b      	ldr	r2, [pc, #108]	; (800ac48 <HAL_TIM_Base_Start_IT+0xe8>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d115      	bne.n	800ac0c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	689a      	ldr	r2, [r3, #8]
 800abe6:	4b19      	ldr	r3, [pc, #100]	; (800ac4c <HAL_TIM_Base_Start_IT+0xec>)
 800abe8:	4013      	ands	r3, r2
 800abea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2b06      	cmp	r3, #6
 800abf0:	d015      	beq.n	800ac1e <HAL_TIM_Base_Start_IT+0xbe>
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abf8:	d011      	beq.n	800ac1e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	681a      	ldr	r2, [r3, #0]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f042 0201 	orr.w	r2, r2, #1
 800ac08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac0a:	e008      	b.n	800ac1e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	681a      	ldr	r2, [r3, #0]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f042 0201 	orr.w	r2, r2, #1
 800ac1a:	601a      	str	r2, [r3, #0]
 800ac1c:	e000      	b.n	800ac20 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ac20:	2300      	movs	r3, #0
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3714      	adds	r7, #20
 800ac26:	46bd      	mov	sp, r7
 800ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2c:	4770      	bx	lr
 800ac2e:	bf00      	nop
 800ac30:	40010000 	.word	0x40010000
 800ac34:	40000400 	.word	0x40000400
 800ac38:	40000800 	.word	0x40000800
 800ac3c:	40000c00 	.word	0x40000c00
 800ac40:	40010400 	.word	0x40010400
 800ac44:	40001800 	.word	0x40001800
 800ac48:	40014000 	.word	0x40014000
 800ac4c:	00010007 	.word	0x00010007

0800ac50 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b083      	sub	sp, #12
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	68da      	ldr	r2, [r3, #12]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f022 0201 	bic.w	r2, r2, #1
 800ac66:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	6a1a      	ldr	r2, [r3, #32]
 800ac6e:	f241 1311 	movw	r3, #4369	; 0x1111
 800ac72:	4013      	ands	r3, r2
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d10f      	bne.n	800ac98 <HAL_TIM_Base_Stop_IT+0x48>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	6a1a      	ldr	r2, [r3, #32]
 800ac7e:	f240 4344 	movw	r3, #1092	; 0x444
 800ac82:	4013      	ands	r3, r2
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d107      	bne.n	800ac98 <HAL_TIM_Base_Stop_IT+0x48>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	681a      	ldr	r2, [r3, #0]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f022 0201 	bic.w	r2, r2, #1
 800ac96:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800aca0:	2300      	movs	r3, #0
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	370c      	adds	r7, #12
 800aca6:	46bd      	mov	sp, r7
 800aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acac:	4770      	bx	lr

0800acae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800acae:	b580      	push	{r7, lr}
 800acb0:	b082      	sub	sp, #8
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d101      	bne.n	800acc0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800acbc:	2301      	movs	r3, #1
 800acbe:	e049      	b.n	800ad54 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acc6:	b2db      	uxtb	r3, r3
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d106      	bne.n	800acda <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2200      	movs	r2, #0
 800acd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f000 f841 	bl	800ad5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2202      	movs	r2, #2
 800acde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681a      	ldr	r2, [r3, #0]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	3304      	adds	r3, #4
 800acea:	4619      	mov	r1, r3
 800acec:	4610      	mov	r0, r2
 800acee:	f000 fb93 	bl	800b418 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2201      	movs	r2, #1
 800acf6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2201      	movs	r2, #1
 800acfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2201      	movs	r2, #1
 800ad06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2201      	movs	r2, #1
 800ad16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2201      	movs	r2, #1
 800ad26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2201      	movs	r2, #1
 800ad36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2201      	movs	r2, #1
 800ad46:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ad52:	2300      	movs	r3, #0
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3708      	adds	r7, #8
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b083      	sub	sp, #12
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ad64:	bf00      	nop
 800ad66:	370c      	adds	r7, #12
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr

0800ad70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	691b      	ldr	r3, [r3, #16]
 800ad7e:	f003 0302 	and.w	r3, r3, #2
 800ad82:	2b02      	cmp	r3, #2
 800ad84:	d122      	bne.n	800adcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	68db      	ldr	r3, [r3, #12]
 800ad8c:	f003 0302 	and.w	r3, r3, #2
 800ad90:	2b02      	cmp	r3, #2
 800ad92:	d11b      	bne.n	800adcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f06f 0202 	mvn.w	r2, #2
 800ad9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2201      	movs	r2, #1
 800ada2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	699b      	ldr	r3, [r3, #24]
 800adaa:	f003 0303 	and.w	r3, r3, #3
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d003      	beq.n	800adba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 fb12 	bl	800b3dc <HAL_TIM_IC_CaptureCallback>
 800adb8:	e005      	b.n	800adc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 fb04 	bl	800b3c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f000 fb15 	bl	800b3f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2200      	movs	r2, #0
 800adca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	691b      	ldr	r3, [r3, #16]
 800add2:	f003 0304 	and.w	r3, r3, #4
 800add6:	2b04      	cmp	r3, #4
 800add8:	d122      	bne.n	800ae20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	68db      	ldr	r3, [r3, #12]
 800ade0:	f003 0304 	and.w	r3, r3, #4
 800ade4:	2b04      	cmp	r3, #4
 800ade6:	d11b      	bne.n	800ae20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f06f 0204 	mvn.w	r2, #4
 800adf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2202      	movs	r2, #2
 800adf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	699b      	ldr	r3, [r3, #24]
 800adfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d003      	beq.n	800ae0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 fae8 	bl	800b3dc <HAL_TIM_IC_CaptureCallback>
 800ae0c:	e005      	b.n	800ae1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 fada 	bl	800b3c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 faeb 	bl	800b3f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	691b      	ldr	r3, [r3, #16]
 800ae26:	f003 0308 	and.w	r3, r3, #8
 800ae2a:	2b08      	cmp	r3, #8
 800ae2c:	d122      	bne.n	800ae74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	68db      	ldr	r3, [r3, #12]
 800ae34:	f003 0308 	and.w	r3, r3, #8
 800ae38:	2b08      	cmp	r3, #8
 800ae3a:	d11b      	bne.n	800ae74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f06f 0208 	mvn.w	r2, #8
 800ae44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2204      	movs	r2, #4
 800ae4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	69db      	ldr	r3, [r3, #28]
 800ae52:	f003 0303 	and.w	r3, r3, #3
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d003      	beq.n	800ae62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 fabe 	bl	800b3dc <HAL_TIM_IC_CaptureCallback>
 800ae60:	e005      	b.n	800ae6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f000 fab0 	bl	800b3c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f000 fac1 	bl	800b3f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2200      	movs	r2, #0
 800ae72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	691b      	ldr	r3, [r3, #16]
 800ae7a:	f003 0310 	and.w	r3, r3, #16
 800ae7e:	2b10      	cmp	r3, #16
 800ae80:	d122      	bne.n	800aec8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	68db      	ldr	r3, [r3, #12]
 800ae88:	f003 0310 	and.w	r3, r3, #16
 800ae8c:	2b10      	cmp	r3, #16
 800ae8e:	d11b      	bne.n	800aec8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f06f 0210 	mvn.w	r2, #16
 800ae98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2208      	movs	r2, #8
 800ae9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	69db      	ldr	r3, [r3, #28]
 800aea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d003      	beq.n	800aeb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 fa94 	bl	800b3dc <HAL_TIM_IC_CaptureCallback>
 800aeb4:	e005      	b.n	800aec2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 fa86 	bl	800b3c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 fa97 	bl	800b3f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2200      	movs	r2, #0
 800aec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	691b      	ldr	r3, [r3, #16]
 800aece:	f003 0301 	and.w	r3, r3, #1
 800aed2:	2b01      	cmp	r3, #1
 800aed4:	d10e      	bne.n	800aef4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	68db      	ldr	r3, [r3, #12]
 800aedc:	f003 0301 	and.w	r3, r3, #1
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d107      	bne.n	800aef4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f06f 0201 	mvn.w	r2, #1
 800aeec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f7f7 fa36 	bl	8002360 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	691b      	ldr	r3, [r3, #16]
 800aefa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aefe:	2b80      	cmp	r3, #128	; 0x80
 800af00:	d10e      	bne.n	800af20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	68db      	ldr	r3, [r3, #12]
 800af08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af0c:	2b80      	cmp	r3, #128	; 0x80
 800af0e:	d107      	bne.n	800af20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800af18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 ffa0 	bl	800be60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	691b      	ldr	r3, [r3, #16]
 800af26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af2e:	d10e      	bne.n	800af4e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	68db      	ldr	r3, [r3, #12]
 800af36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af3a:	2b80      	cmp	r3, #128	; 0x80
 800af3c:	d107      	bne.n	800af4e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800af46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f000 ff93 	bl	800be74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	691b      	ldr	r3, [r3, #16]
 800af54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af58:	2b40      	cmp	r3, #64	; 0x40
 800af5a:	d10e      	bne.n	800af7a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	68db      	ldr	r3, [r3, #12]
 800af62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af66:	2b40      	cmp	r3, #64	; 0x40
 800af68:	d107      	bne.n	800af7a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800af72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 fa45 	bl	800b404 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	691b      	ldr	r3, [r3, #16]
 800af80:	f003 0320 	and.w	r3, r3, #32
 800af84:	2b20      	cmp	r3, #32
 800af86:	d10e      	bne.n	800afa6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	68db      	ldr	r3, [r3, #12]
 800af8e:	f003 0320 	and.w	r3, r3, #32
 800af92:	2b20      	cmp	r3, #32
 800af94:	d107      	bne.n	800afa6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f06f 0220 	mvn.w	r2, #32
 800af9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 ff53 	bl	800be4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800afa6:	bf00      	nop
 800afa8:	3708      	adds	r7, #8
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
	...

0800afb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b086      	sub	sp, #24
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	60f8      	str	r0, [r7, #12]
 800afb8:	60b9      	str	r1, [r7, #8]
 800afba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800afbc:	2300      	movs	r3, #0
 800afbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afc6:	2b01      	cmp	r3, #1
 800afc8:	d101      	bne.n	800afce <HAL_TIM_PWM_ConfigChannel+0x1e>
 800afca:	2302      	movs	r3, #2
 800afcc:	e0ff      	b.n	800b1ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	2201      	movs	r2, #1
 800afd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2b14      	cmp	r3, #20
 800afda:	f200 80f0 	bhi.w	800b1be <HAL_TIM_PWM_ConfigChannel+0x20e>
 800afde:	a201      	add	r2, pc, #4	; (adr r2, 800afe4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800afe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afe4:	0800b039 	.word	0x0800b039
 800afe8:	0800b1bf 	.word	0x0800b1bf
 800afec:	0800b1bf 	.word	0x0800b1bf
 800aff0:	0800b1bf 	.word	0x0800b1bf
 800aff4:	0800b079 	.word	0x0800b079
 800aff8:	0800b1bf 	.word	0x0800b1bf
 800affc:	0800b1bf 	.word	0x0800b1bf
 800b000:	0800b1bf 	.word	0x0800b1bf
 800b004:	0800b0bb 	.word	0x0800b0bb
 800b008:	0800b1bf 	.word	0x0800b1bf
 800b00c:	0800b1bf 	.word	0x0800b1bf
 800b010:	0800b1bf 	.word	0x0800b1bf
 800b014:	0800b0fb 	.word	0x0800b0fb
 800b018:	0800b1bf 	.word	0x0800b1bf
 800b01c:	0800b1bf 	.word	0x0800b1bf
 800b020:	0800b1bf 	.word	0x0800b1bf
 800b024:	0800b13d 	.word	0x0800b13d
 800b028:	0800b1bf 	.word	0x0800b1bf
 800b02c:	0800b1bf 	.word	0x0800b1bf
 800b030:	0800b1bf 	.word	0x0800b1bf
 800b034:	0800b17d 	.word	0x0800b17d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	68b9      	ldr	r1, [r7, #8]
 800b03e:	4618      	mov	r0, r3
 800b040:	f000 fa84 	bl	800b54c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	699a      	ldr	r2, [r3, #24]
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f042 0208 	orr.w	r2, r2, #8
 800b052:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	699a      	ldr	r2, [r3, #24]
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f022 0204 	bic.w	r2, r2, #4
 800b062:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	6999      	ldr	r1, [r3, #24]
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	691a      	ldr	r2, [r3, #16]
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	430a      	orrs	r2, r1
 800b074:	619a      	str	r2, [r3, #24]
      break;
 800b076:	e0a5      	b.n	800b1c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	68b9      	ldr	r1, [r7, #8]
 800b07e:	4618      	mov	r0, r3
 800b080:	f000 faf4 	bl	800b66c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	699a      	ldr	r2, [r3, #24]
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b092:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	699a      	ldr	r2, [r3, #24]
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b0a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	6999      	ldr	r1, [r3, #24]
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	691b      	ldr	r3, [r3, #16]
 800b0ae:	021a      	lsls	r2, r3, #8
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	430a      	orrs	r2, r1
 800b0b6:	619a      	str	r2, [r3, #24]
      break;
 800b0b8:	e084      	b.n	800b1c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	68b9      	ldr	r1, [r7, #8]
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f000 fb5d 	bl	800b780 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	69da      	ldr	r2, [r3, #28]
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f042 0208 	orr.w	r2, r2, #8
 800b0d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	69da      	ldr	r2, [r3, #28]
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f022 0204 	bic.w	r2, r2, #4
 800b0e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	69d9      	ldr	r1, [r3, #28]
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	691a      	ldr	r2, [r3, #16]
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	430a      	orrs	r2, r1
 800b0f6:	61da      	str	r2, [r3, #28]
      break;
 800b0f8:	e064      	b.n	800b1c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	68b9      	ldr	r1, [r7, #8]
 800b100:	4618      	mov	r0, r3
 800b102:	f000 fbc5 	bl	800b890 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	69da      	ldr	r2, [r3, #28]
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b114:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	69da      	ldr	r2, [r3, #28]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b124:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	69d9      	ldr	r1, [r3, #28]
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	691b      	ldr	r3, [r3, #16]
 800b130:	021a      	lsls	r2, r3, #8
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	430a      	orrs	r2, r1
 800b138:	61da      	str	r2, [r3, #28]
      break;
 800b13a:	e043      	b.n	800b1c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	68b9      	ldr	r1, [r7, #8]
 800b142:	4618      	mov	r0, r3
 800b144:	f000 fc0e 	bl	800b964 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f042 0208 	orr.w	r2, r2, #8
 800b156:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f022 0204 	bic.w	r2, r2, #4
 800b166:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	691a      	ldr	r2, [r3, #16]
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	430a      	orrs	r2, r1
 800b178:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b17a:	e023      	b.n	800b1c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	68b9      	ldr	r1, [r7, #8]
 800b182:	4618      	mov	r0, r3
 800b184:	f000 fc52 	bl	800ba2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b196:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b1a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	691b      	ldr	r3, [r3, #16]
 800b1b2:	021a      	lsls	r2, r3, #8
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	430a      	orrs	r2, r1
 800b1ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b1bc:	e002      	b.n	800b1c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b1be:	2301      	movs	r3, #1
 800b1c0:	75fb      	strb	r3, [r7, #23]
      break;
 800b1c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b1cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3718      	adds	r7, #24
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}
 800b1d6:	bf00      	nop

0800b1d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d101      	bne.n	800b1f4 <HAL_TIM_ConfigClockSource+0x1c>
 800b1f0:	2302      	movs	r3, #2
 800b1f2:	e0dc      	b.n	800b3ae <HAL_TIM_ConfigClockSource+0x1d6>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2202      	movs	r2, #2
 800b200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	689b      	ldr	r3, [r3, #8]
 800b20a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b20c:	68ba      	ldr	r2, [r7, #8]
 800b20e:	4b6a      	ldr	r3, [pc, #424]	; (800b3b8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b210:	4013      	ands	r3, r2
 800b212:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b21a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	68ba      	ldr	r2, [r7, #8]
 800b222:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4a64      	ldr	r2, [pc, #400]	; (800b3bc <HAL_TIM_ConfigClockSource+0x1e4>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	f000 80a9 	beq.w	800b382 <HAL_TIM_ConfigClockSource+0x1aa>
 800b230:	4a62      	ldr	r2, [pc, #392]	; (800b3bc <HAL_TIM_ConfigClockSource+0x1e4>)
 800b232:	4293      	cmp	r3, r2
 800b234:	f200 80ae 	bhi.w	800b394 <HAL_TIM_ConfigClockSource+0x1bc>
 800b238:	4a61      	ldr	r2, [pc, #388]	; (800b3c0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	f000 80a1 	beq.w	800b382 <HAL_TIM_ConfigClockSource+0x1aa>
 800b240:	4a5f      	ldr	r2, [pc, #380]	; (800b3c0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b242:	4293      	cmp	r3, r2
 800b244:	f200 80a6 	bhi.w	800b394 <HAL_TIM_ConfigClockSource+0x1bc>
 800b248:	4a5e      	ldr	r2, [pc, #376]	; (800b3c4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	f000 8099 	beq.w	800b382 <HAL_TIM_ConfigClockSource+0x1aa>
 800b250:	4a5c      	ldr	r2, [pc, #368]	; (800b3c4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b252:	4293      	cmp	r3, r2
 800b254:	f200 809e 	bhi.w	800b394 <HAL_TIM_ConfigClockSource+0x1bc>
 800b258:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b25c:	f000 8091 	beq.w	800b382 <HAL_TIM_ConfigClockSource+0x1aa>
 800b260:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b264:	f200 8096 	bhi.w	800b394 <HAL_TIM_ConfigClockSource+0x1bc>
 800b268:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b26c:	f000 8089 	beq.w	800b382 <HAL_TIM_ConfigClockSource+0x1aa>
 800b270:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b274:	f200 808e 	bhi.w	800b394 <HAL_TIM_ConfigClockSource+0x1bc>
 800b278:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b27c:	d03e      	beq.n	800b2fc <HAL_TIM_ConfigClockSource+0x124>
 800b27e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b282:	f200 8087 	bhi.w	800b394 <HAL_TIM_ConfigClockSource+0x1bc>
 800b286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b28a:	f000 8086 	beq.w	800b39a <HAL_TIM_ConfigClockSource+0x1c2>
 800b28e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b292:	d87f      	bhi.n	800b394 <HAL_TIM_ConfigClockSource+0x1bc>
 800b294:	2b70      	cmp	r3, #112	; 0x70
 800b296:	d01a      	beq.n	800b2ce <HAL_TIM_ConfigClockSource+0xf6>
 800b298:	2b70      	cmp	r3, #112	; 0x70
 800b29a:	d87b      	bhi.n	800b394 <HAL_TIM_ConfigClockSource+0x1bc>
 800b29c:	2b60      	cmp	r3, #96	; 0x60
 800b29e:	d050      	beq.n	800b342 <HAL_TIM_ConfigClockSource+0x16a>
 800b2a0:	2b60      	cmp	r3, #96	; 0x60
 800b2a2:	d877      	bhi.n	800b394 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2a4:	2b50      	cmp	r3, #80	; 0x50
 800b2a6:	d03c      	beq.n	800b322 <HAL_TIM_ConfigClockSource+0x14a>
 800b2a8:	2b50      	cmp	r3, #80	; 0x50
 800b2aa:	d873      	bhi.n	800b394 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2ac:	2b40      	cmp	r3, #64	; 0x40
 800b2ae:	d058      	beq.n	800b362 <HAL_TIM_ConfigClockSource+0x18a>
 800b2b0:	2b40      	cmp	r3, #64	; 0x40
 800b2b2:	d86f      	bhi.n	800b394 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2b4:	2b30      	cmp	r3, #48	; 0x30
 800b2b6:	d064      	beq.n	800b382 <HAL_TIM_ConfigClockSource+0x1aa>
 800b2b8:	2b30      	cmp	r3, #48	; 0x30
 800b2ba:	d86b      	bhi.n	800b394 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2bc:	2b20      	cmp	r3, #32
 800b2be:	d060      	beq.n	800b382 <HAL_TIM_ConfigClockSource+0x1aa>
 800b2c0:	2b20      	cmp	r3, #32
 800b2c2:	d867      	bhi.n	800b394 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d05c      	beq.n	800b382 <HAL_TIM_ConfigClockSource+0x1aa>
 800b2c8:	2b10      	cmp	r3, #16
 800b2ca:	d05a      	beq.n	800b382 <HAL_TIM_ConfigClockSource+0x1aa>
 800b2cc:	e062      	b.n	800b394 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6818      	ldr	r0, [r3, #0]
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	6899      	ldr	r1, [r3, #8]
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	685a      	ldr	r2, [r3, #4]
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	68db      	ldr	r3, [r3, #12]
 800b2de:	f000 fc89 	bl	800bbf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	689b      	ldr	r3, [r3, #8]
 800b2e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b2f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	68ba      	ldr	r2, [r7, #8]
 800b2f8:	609a      	str	r2, [r3, #8]
      break;
 800b2fa:	e04f      	b.n	800b39c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6818      	ldr	r0, [r3, #0]
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	6899      	ldr	r1, [r3, #8]
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	685a      	ldr	r2, [r3, #4]
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	68db      	ldr	r3, [r3, #12]
 800b30c:	f000 fc72 	bl	800bbf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	689a      	ldr	r2, [r3, #8]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b31e:	609a      	str	r2, [r3, #8]
      break;
 800b320:	e03c      	b.n	800b39c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6818      	ldr	r0, [r3, #0]
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	6859      	ldr	r1, [r3, #4]
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	68db      	ldr	r3, [r3, #12]
 800b32e:	461a      	mov	r2, r3
 800b330:	f000 fbe2 	bl	800baf8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	2150      	movs	r1, #80	; 0x50
 800b33a:	4618      	mov	r0, r3
 800b33c:	f000 fc3c 	bl	800bbb8 <TIM_ITRx_SetConfig>
      break;
 800b340:	e02c      	b.n	800b39c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6818      	ldr	r0, [r3, #0]
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	6859      	ldr	r1, [r3, #4]
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	68db      	ldr	r3, [r3, #12]
 800b34e:	461a      	mov	r2, r3
 800b350:	f000 fc01 	bl	800bb56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	2160      	movs	r1, #96	; 0x60
 800b35a:	4618      	mov	r0, r3
 800b35c:	f000 fc2c 	bl	800bbb8 <TIM_ITRx_SetConfig>
      break;
 800b360:	e01c      	b.n	800b39c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6818      	ldr	r0, [r3, #0]
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	6859      	ldr	r1, [r3, #4]
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	68db      	ldr	r3, [r3, #12]
 800b36e:	461a      	mov	r2, r3
 800b370:	f000 fbc2 	bl	800baf8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	2140      	movs	r1, #64	; 0x40
 800b37a:	4618      	mov	r0, r3
 800b37c:	f000 fc1c 	bl	800bbb8 <TIM_ITRx_SetConfig>
      break;
 800b380:	e00c      	b.n	800b39c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681a      	ldr	r2, [r3, #0]
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	4619      	mov	r1, r3
 800b38c:	4610      	mov	r0, r2
 800b38e:	f000 fc13 	bl	800bbb8 <TIM_ITRx_SetConfig>
      break;
 800b392:	e003      	b.n	800b39c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b394:	2301      	movs	r3, #1
 800b396:	73fb      	strb	r3, [r7, #15]
      break;
 800b398:	e000      	b.n	800b39c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b39a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2201      	movs	r2, #1
 800b3a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b3ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3710      	adds	r7, #16
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	bf00      	nop
 800b3b8:	ffceff88 	.word	0xffceff88
 800b3bc:	00100040 	.word	0x00100040
 800b3c0:	00100030 	.word	0x00100030
 800b3c4:	00100020 	.word	0x00100020

0800b3c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b083      	sub	sp, #12
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b3d0:	bf00      	nop
 800b3d2:	370c      	adds	r7, #12
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr

0800b3dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b083      	sub	sp, #12
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b3e4:	bf00      	nop
 800b3e6:	370c      	adds	r7, #12
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	4770      	bx	lr

0800b3f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b083      	sub	sp, #12
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b3f8:	bf00      	nop
 800b3fa:	370c      	adds	r7, #12
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr

0800b404 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b404:	b480      	push	{r7}
 800b406:	b083      	sub	sp, #12
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b40c:	bf00      	nop
 800b40e:	370c      	adds	r7, #12
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr

0800b418 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b418:	b480      	push	{r7}
 800b41a:	b085      	sub	sp, #20
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	4a40      	ldr	r2, [pc, #256]	; (800b52c <TIM_Base_SetConfig+0x114>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d013      	beq.n	800b458 <TIM_Base_SetConfig+0x40>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b436:	d00f      	beq.n	800b458 <TIM_Base_SetConfig+0x40>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	4a3d      	ldr	r2, [pc, #244]	; (800b530 <TIM_Base_SetConfig+0x118>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d00b      	beq.n	800b458 <TIM_Base_SetConfig+0x40>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	4a3c      	ldr	r2, [pc, #240]	; (800b534 <TIM_Base_SetConfig+0x11c>)
 800b444:	4293      	cmp	r3, r2
 800b446:	d007      	beq.n	800b458 <TIM_Base_SetConfig+0x40>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	4a3b      	ldr	r2, [pc, #236]	; (800b538 <TIM_Base_SetConfig+0x120>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d003      	beq.n	800b458 <TIM_Base_SetConfig+0x40>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	4a3a      	ldr	r2, [pc, #232]	; (800b53c <TIM_Base_SetConfig+0x124>)
 800b454:	4293      	cmp	r3, r2
 800b456:	d108      	bne.n	800b46a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b45e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	685b      	ldr	r3, [r3, #4]
 800b464:	68fa      	ldr	r2, [r7, #12]
 800b466:	4313      	orrs	r3, r2
 800b468:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	4a2f      	ldr	r2, [pc, #188]	; (800b52c <TIM_Base_SetConfig+0x114>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d01f      	beq.n	800b4b2 <TIM_Base_SetConfig+0x9a>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b478:	d01b      	beq.n	800b4b2 <TIM_Base_SetConfig+0x9a>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	4a2c      	ldr	r2, [pc, #176]	; (800b530 <TIM_Base_SetConfig+0x118>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d017      	beq.n	800b4b2 <TIM_Base_SetConfig+0x9a>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	4a2b      	ldr	r2, [pc, #172]	; (800b534 <TIM_Base_SetConfig+0x11c>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d013      	beq.n	800b4b2 <TIM_Base_SetConfig+0x9a>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	4a2a      	ldr	r2, [pc, #168]	; (800b538 <TIM_Base_SetConfig+0x120>)
 800b48e:	4293      	cmp	r3, r2
 800b490:	d00f      	beq.n	800b4b2 <TIM_Base_SetConfig+0x9a>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	4a29      	ldr	r2, [pc, #164]	; (800b53c <TIM_Base_SetConfig+0x124>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d00b      	beq.n	800b4b2 <TIM_Base_SetConfig+0x9a>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	4a28      	ldr	r2, [pc, #160]	; (800b540 <TIM_Base_SetConfig+0x128>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d007      	beq.n	800b4b2 <TIM_Base_SetConfig+0x9a>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	4a27      	ldr	r2, [pc, #156]	; (800b544 <TIM_Base_SetConfig+0x12c>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d003      	beq.n	800b4b2 <TIM_Base_SetConfig+0x9a>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	4a26      	ldr	r2, [pc, #152]	; (800b548 <TIM_Base_SetConfig+0x130>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d108      	bne.n	800b4c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b4b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	68db      	ldr	r3, [r3, #12]
 800b4be:	68fa      	ldr	r2, [r7, #12]
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	695b      	ldr	r3, [r3, #20]
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	68fa      	ldr	r2, [r7, #12]
 800b4d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	689a      	ldr	r2, [r3, #8]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	4a10      	ldr	r2, [pc, #64]	; (800b52c <TIM_Base_SetConfig+0x114>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d00f      	beq.n	800b510 <TIM_Base_SetConfig+0xf8>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	4a12      	ldr	r2, [pc, #72]	; (800b53c <TIM_Base_SetConfig+0x124>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d00b      	beq.n	800b510 <TIM_Base_SetConfig+0xf8>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	4a11      	ldr	r2, [pc, #68]	; (800b540 <TIM_Base_SetConfig+0x128>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d007      	beq.n	800b510 <TIM_Base_SetConfig+0xf8>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	4a10      	ldr	r2, [pc, #64]	; (800b544 <TIM_Base_SetConfig+0x12c>)
 800b504:	4293      	cmp	r3, r2
 800b506:	d003      	beq.n	800b510 <TIM_Base_SetConfig+0xf8>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	4a0f      	ldr	r2, [pc, #60]	; (800b548 <TIM_Base_SetConfig+0x130>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d103      	bne.n	800b518 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	691a      	ldr	r2, [r3, #16]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2201      	movs	r2, #1
 800b51c:	615a      	str	r2, [r3, #20]
}
 800b51e:	bf00      	nop
 800b520:	3714      	adds	r7, #20
 800b522:	46bd      	mov	sp, r7
 800b524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b528:	4770      	bx	lr
 800b52a:	bf00      	nop
 800b52c:	40010000 	.word	0x40010000
 800b530:	40000400 	.word	0x40000400
 800b534:	40000800 	.word	0x40000800
 800b538:	40000c00 	.word	0x40000c00
 800b53c:	40010400 	.word	0x40010400
 800b540:	40014000 	.word	0x40014000
 800b544:	40014400 	.word	0x40014400
 800b548:	40014800 	.word	0x40014800

0800b54c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b087      	sub	sp, #28
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
 800b554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6a1b      	ldr	r3, [r3, #32]
 800b55a:	f023 0201 	bic.w	r2, r3, #1
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6a1b      	ldr	r3, [r3, #32]
 800b566:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	699b      	ldr	r3, [r3, #24]
 800b572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b574:	68fa      	ldr	r2, [r7, #12]
 800b576:	4b37      	ldr	r3, [pc, #220]	; (800b654 <TIM_OC1_SetConfig+0x108>)
 800b578:	4013      	ands	r3, r2
 800b57a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f023 0303 	bic.w	r3, r3, #3
 800b582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	68fa      	ldr	r2, [r7, #12]
 800b58a:	4313      	orrs	r3, r2
 800b58c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	f023 0302 	bic.w	r3, r3, #2
 800b594:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	689b      	ldr	r3, [r3, #8]
 800b59a:	697a      	ldr	r2, [r7, #20]
 800b59c:	4313      	orrs	r3, r2
 800b59e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	4a2d      	ldr	r2, [pc, #180]	; (800b658 <TIM_OC1_SetConfig+0x10c>)
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	d00f      	beq.n	800b5c8 <TIM_OC1_SetConfig+0x7c>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	4a2c      	ldr	r2, [pc, #176]	; (800b65c <TIM_OC1_SetConfig+0x110>)
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d00b      	beq.n	800b5c8 <TIM_OC1_SetConfig+0x7c>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	4a2b      	ldr	r2, [pc, #172]	; (800b660 <TIM_OC1_SetConfig+0x114>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d007      	beq.n	800b5c8 <TIM_OC1_SetConfig+0x7c>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	4a2a      	ldr	r2, [pc, #168]	; (800b664 <TIM_OC1_SetConfig+0x118>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d003      	beq.n	800b5c8 <TIM_OC1_SetConfig+0x7c>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	4a29      	ldr	r2, [pc, #164]	; (800b668 <TIM_OC1_SetConfig+0x11c>)
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	d10c      	bne.n	800b5e2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	f023 0308 	bic.w	r3, r3, #8
 800b5ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	68db      	ldr	r3, [r3, #12]
 800b5d4:	697a      	ldr	r2, [r7, #20]
 800b5d6:	4313      	orrs	r3, r2
 800b5d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	f023 0304 	bic.w	r3, r3, #4
 800b5e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	4a1c      	ldr	r2, [pc, #112]	; (800b658 <TIM_OC1_SetConfig+0x10c>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d00f      	beq.n	800b60a <TIM_OC1_SetConfig+0xbe>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	4a1b      	ldr	r2, [pc, #108]	; (800b65c <TIM_OC1_SetConfig+0x110>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d00b      	beq.n	800b60a <TIM_OC1_SetConfig+0xbe>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	4a1a      	ldr	r2, [pc, #104]	; (800b660 <TIM_OC1_SetConfig+0x114>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d007      	beq.n	800b60a <TIM_OC1_SetConfig+0xbe>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	4a19      	ldr	r2, [pc, #100]	; (800b664 <TIM_OC1_SetConfig+0x118>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d003      	beq.n	800b60a <TIM_OC1_SetConfig+0xbe>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	4a18      	ldr	r2, [pc, #96]	; (800b668 <TIM_OC1_SetConfig+0x11c>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d111      	bne.n	800b62e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b610:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b618:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	695b      	ldr	r3, [r3, #20]
 800b61e:	693a      	ldr	r2, [r7, #16]
 800b620:	4313      	orrs	r3, r2
 800b622:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	699b      	ldr	r3, [r3, #24]
 800b628:	693a      	ldr	r2, [r7, #16]
 800b62a:	4313      	orrs	r3, r2
 800b62c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	693a      	ldr	r2, [r7, #16]
 800b632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	68fa      	ldr	r2, [r7, #12]
 800b638:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	685a      	ldr	r2, [r3, #4]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	697a      	ldr	r2, [r7, #20]
 800b646:	621a      	str	r2, [r3, #32]
}
 800b648:	bf00      	nop
 800b64a:	371c      	adds	r7, #28
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr
 800b654:	fffeff8f 	.word	0xfffeff8f
 800b658:	40010000 	.word	0x40010000
 800b65c:	40010400 	.word	0x40010400
 800b660:	40014000 	.word	0x40014000
 800b664:	40014400 	.word	0x40014400
 800b668:	40014800 	.word	0x40014800

0800b66c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b087      	sub	sp, #28
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6a1b      	ldr	r3, [r3, #32]
 800b67a:	f023 0210 	bic.w	r2, r3, #16
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6a1b      	ldr	r3, [r3, #32]
 800b686:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	699b      	ldr	r3, [r3, #24]
 800b692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b694:	68fa      	ldr	r2, [r7, #12]
 800b696:	4b34      	ldr	r3, [pc, #208]	; (800b768 <TIM_OC2_SetConfig+0xfc>)
 800b698:	4013      	ands	r3, r2
 800b69a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	021b      	lsls	r3, r3, #8
 800b6aa:	68fa      	ldr	r2, [r7, #12]
 800b6ac:	4313      	orrs	r3, r2
 800b6ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b6b0:	697b      	ldr	r3, [r7, #20]
 800b6b2:	f023 0320 	bic.w	r3, r3, #32
 800b6b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	689b      	ldr	r3, [r3, #8]
 800b6bc:	011b      	lsls	r3, r3, #4
 800b6be:	697a      	ldr	r2, [r7, #20]
 800b6c0:	4313      	orrs	r3, r2
 800b6c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	4a29      	ldr	r2, [pc, #164]	; (800b76c <TIM_OC2_SetConfig+0x100>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d003      	beq.n	800b6d4 <TIM_OC2_SetConfig+0x68>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	4a28      	ldr	r2, [pc, #160]	; (800b770 <TIM_OC2_SetConfig+0x104>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d10d      	bne.n	800b6f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b6d4:	697b      	ldr	r3, [r7, #20]
 800b6d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b6da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	68db      	ldr	r3, [r3, #12]
 800b6e0:	011b      	lsls	r3, r3, #4
 800b6e2:	697a      	ldr	r2, [r7, #20]
 800b6e4:	4313      	orrs	r3, r2
 800b6e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	4a1e      	ldr	r2, [pc, #120]	; (800b76c <TIM_OC2_SetConfig+0x100>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d00f      	beq.n	800b718 <TIM_OC2_SetConfig+0xac>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	4a1d      	ldr	r2, [pc, #116]	; (800b770 <TIM_OC2_SetConfig+0x104>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d00b      	beq.n	800b718 <TIM_OC2_SetConfig+0xac>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	4a1c      	ldr	r2, [pc, #112]	; (800b774 <TIM_OC2_SetConfig+0x108>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d007      	beq.n	800b718 <TIM_OC2_SetConfig+0xac>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	4a1b      	ldr	r2, [pc, #108]	; (800b778 <TIM_OC2_SetConfig+0x10c>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d003      	beq.n	800b718 <TIM_OC2_SetConfig+0xac>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	4a1a      	ldr	r2, [pc, #104]	; (800b77c <TIM_OC2_SetConfig+0x110>)
 800b714:	4293      	cmp	r3, r2
 800b716:	d113      	bne.n	800b740 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b71e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b726:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	695b      	ldr	r3, [r3, #20]
 800b72c:	009b      	lsls	r3, r3, #2
 800b72e:	693a      	ldr	r2, [r7, #16]
 800b730:	4313      	orrs	r3, r2
 800b732:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	699b      	ldr	r3, [r3, #24]
 800b738:	009b      	lsls	r3, r3, #2
 800b73a:	693a      	ldr	r2, [r7, #16]
 800b73c:	4313      	orrs	r3, r2
 800b73e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	693a      	ldr	r2, [r7, #16]
 800b744:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	68fa      	ldr	r2, [r7, #12]
 800b74a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	685a      	ldr	r2, [r3, #4]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	697a      	ldr	r2, [r7, #20]
 800b758:	621a      	str	r2, [r3, #32]
}
 800b75a:	bf00      	nop
 800b75c:	371c      	adds	r7, #28
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr
 800b766:	bf00      	nop
 800b768:	feff8fff 	.word	0xfeff8fff
 800b76c:	40010000 	.word	0x40010000
 800b770:	40010400 	.word	0x40010400
 800b774:	40014000 	.word	0x40014000
 800b778:	40014400 	.word	0x40014400
 800b77c:	40014800 	.word	0x40014800

0800b780 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b780:	b480      	push	{r7}
 800b782:	b087      	sub	sp, #28
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6a1b      	ldr	r3, [r3, #32]
 800b78e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6a1b      	ldr	r3, [r3, #32]
 800b79a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	685b      	ldr	r3, [r3, #4]
 800b7a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	69db      	ldr	r3, [r3, #28]
 800b7a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b7a8:	68fa      	ldr	r2, [r7, #12]
 800b7aa:	4b33      	ldr	r3, [pc, #204]	; (800b878 <TIM_OC3_SetConfig+0xf8>)
 800b7ac:	4013      	ands	r3, r2
 800b7ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f023 0303 	bic.w	r3, r3, #3
 800b7b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	68fa      	ldr	r2, [r7, #12]
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b7c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	689b      	ldr	r3, [r3, #8]
 800b7ce:	021b      	lsls	r3, r3, #8
 800b7d0:	697a      	ldr	r2, [r7, #20]
 800b7d2:	4313      	orrs	r3, r2
 800b7d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	4a28      	ldr	r2, [pc, #160]	; (800b87c <TIM_OC3_SetConfig+0xfc>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d003      	beq.n	800b7e6 <TIM_OC3_SetConfig+0x66>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	4a27      	ldr	r2, [pc, #156]	; (800b880 <TIM_OC3_SetConfig+0x100>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d10d      	bne.n	800b802 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b7ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	68db      	ldr	r3, [r3, #12]
 800b7f2:	021b      	lsls	r3, r3, #8
 800b7f4:	697a      	ldr	r2, [r7, #20]
 800b7f6:	4313      	orrs	r3, r2
 800b7f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	4a1d      	ldr	r2, [pc, #116]	; (800b87c <TIM_OC3_SetConfig+0xfc>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d00f      	beq.n	800b82a <TIM_OC3_SetConfig+0xaa>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	4a1c      	ldr	r2, [pc, #112]	; (800b880 <TIM_OC3_SetConfig+0x100>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d00b      	beq.n	800b82a <TIM_OC3_SetConfig+0xaa>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	4a1b      	ldr	r2, [pc, #108]	; (800b884 <TIM_OC3_SetConfig+0x104>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d007      	beq.n	800b82a <TIM_OC3_SetConfig+0xaa>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	4a1a      	ldr	r2, [pc, #104]	; (800b888 <TIM_OC3_SetConfig+0x108>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d003      	beq.n	800b82a <TIM_OC3_SetConfig+0xaa>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	4a19      	ldr	r2, [pc, #100]	; (800b88c <TIM_OC3_SetConfig+0x10c>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d113      	bne.n	800b852 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	695b      	ldr	r3, [r3, #20]
 800b83e:	011b      	lsls	r3, r3, #4
 800b840:	693a      	ldr	r2, [r7, #16]
 800b842:	4313      	orrs	r3, r2
 800b844:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	699b      	ldr	r3, [r3, #24]
 800b84a:	011b      	lsls	r3, r3, #4
 800b84c:	693a      	ldr	r2, [r7, #16]
 800b84e:	4313      	orrs	r3, r2
 800b850:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	693a      	ldr	r2, [r7, #16]
 800b856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	68fa      	ldr	r2, [r7, #12]
 800b85c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	685a      	ldr	r2, [r3, #4]
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	697a      	ldr	r2, [r7, #20]
 800b86a:	621a      	str	r2, [r3, #32]
}
 800b86c:	bf00      	nop
 800b86e:	371c      	adds	r7, #28
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr
 800b878:	fffeff8f 	.word	0xfffeff8f
 800b87c:	40010000 	.word	0x40010000
 800b880:	40010400 	.word	0x40010400
 800b884:	40014000 	.word	0x40014000
 800b888:	40014400 	.word	0x40014400
 800b88c:	40014800 	.word	0x40014800

0800b890 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b890:	b480      	push	{r7}
 800b892:	b087      	sub	sp, #28
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6a1b      	ldr	r3, [r3, #32]
 800b89e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6a1b      	ldr	r3, [r3, #32]
 800b8aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	69db      	ldr	r3, [r3, #28]
 800b8b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b8b8:	68fa      	ldr	r2, [r7, #12]
 800b8ba:	4b24      	ldr	r3, [pc, #144]	; (800b94c <TIM_OC4_SetConfig+0xbc>)
 800b8bc:	4013      	ands	r3, r2
 800b8be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b8c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	021b      	lsls	r3, r3, #8
 800b8ce:	68fa      	ldr	r2, [r7, #12]
 800b8d0:	4313      	orrs	r3, r2
 800b8d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b8da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	689b      	ldr	r3, [r3, #8]
 800b8e0:	031b      	lsls	r3, r3, #12
 800b8e2:	693a      	ldr	r2, [r7, #16]
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	4a19      	ldr	r2, [pc, #100]	; (800b950 <TIM_OC4_SetConfig+0xc0>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d00f      	beq.n	800b910 <TIM_OC4_SetConfig+0x80>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	4a18      	ldr	r2, [pc, #96]	; (800b954 <TIM_OC4_SetConfig+0xc4>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d00b      	beq.n	800b910 <TIM_OC4_SetConfig+0x80>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	4a17      	ldr	r2, [pc, #92]	; (800b958 <TIM_OC4_SetConfig+0xc8>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d007      	beq.n	800b910 <TIM_OC4_SetConfig+0x80>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	4a16      	ldr	r2, [pc, #88]	; (800b95c <TIM_OC4_SetConfig+0xcc>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d003      	beq.n	800b910 <TIM_OC4_SetConfig+0x80>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	4a15      	ldr	r2, [pc, #84]	; (800b960 <TIM_OC4_SetConfig+0xd0>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d109      	bne.n	800b924 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b916:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	695b      	ldr	r3, [r3, #20]
 800b91c:	019b      	lsls	r3, r3, #6
 800b91e:	697a      	ldr	r2, [r7, #20]
 800b920:	4313      	orrs	r3, r2
 800b922:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	697a      	ldr	r2, [r7, #20]
 800b928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	68fa      	ldr	r2, [r7, #12]
 800b92e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	685a      	ldr	r2, [r3, #4]
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	693a      	ldr	r2, [r7, #16]
 800b93c:	621a      	str	r2, [r3, #32]
}
 800b93e:	bf00      	nop
 800b940:	371c      	adds	r7, #28
 800b942:	46bd      	mov	sp, r7
 800b944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b948:	4770      	bx	lr
 800b94a:	bf00      	nop
 800b94c:	feff8fff 	.word	0xfeff8fff
 800b950:	40010000 	.word	0x40010000
 800b954:	40010400 	.word	0x40010400
 800b958:	40014000 	.word	0x40014000
 800b95c:	40014400 	.word	0x40014400
 800b960:	40014800 	.word	0x40014800

0800b964 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b964:	b480      	push	{r7}
 800b966:	b087      	sub	sp, #28
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
 800b96c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6a1b      	ldr	r3, [r3, #32]
 800b972:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6a1b      	ldr	r3, [r3, #32]
 800b97e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b98a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b98c:	68fa      	ldr	r2, [r7, #12]
 800b98e:	4b21      	ldr	r3, [pc, #132]	; (800ba14 <TIM_OC5_SetConfig+0xb0>)
 800b990:	4013      	ands	r3, r2
 800b992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	68fa      	ldr	r2, [r7, #12]
 800b99a:	4313      	orrs	r3, r2
 800b99c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b9a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	689b      	ldr	r3, [r3, #8]
 800b9aa:	041b      	lsls	r3, r3, #16
 800b9ac:	693a      	ldr	r2, [r7, #16]
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	4a18      	ldr	r2, [pc, #96]	; (800ba18 <TIM_OC5_SetConfig+0xb4>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d00f      	beq.n	800b9da <TIM_OC5_SetConfig+0x76>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	4a17      	ldr	r2, [pc, #92]	; (800ba1c <TIM_OC5_SetConfig+0xb8>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d00b      	beq.n	800b9da <TIM_OC5_SetConfig+0x76>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	4a16      	ldr	r2, [pc, #88]	; (800ba20 <TIM_OC5_SetConfig+0xbc>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d007      	beq.n	800b9da <TIM_OC5_SetConfig+0x76>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	4a15      	ldr	r2, [pc, #84]	; (800ba24 <TIM_OC5_SetConfig+0xc0>)
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d003      	beq.n	800b9da <TIM_OC5_SetConfig+0x76>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	4a14      	ldr	r2, [pc, #80]	; (800ba28 <TIM_OC5_SetConfig+0xc4>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d109      	bne.n	800b9ee <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b9e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	695b      	ldr	r3, [r3, #20]
 800b9e6:	021b      	lsls	r3, r3, #8
 800b9e8:	697a      	ldr	r2, [r7, #20]
 800b9ea:	4313      	orrs	r3, r2
 800b9ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	697a      	ldr	r2, [r7, #20]
 800b9f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	68fa      	ldr	r2, [r7, #12]
 800b9f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	685a      	ldr	r2, [r3, #4]
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	693a      	ldr	r2, [r7, #16]
 800ba06:	621a      	str	r2, [r3, #32]
}
 800ba08:	bf00      	nop
 800ba0a:	371c      	adds	r7, #28
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr
 800ba14:	fffeff8f 	.word	0xfffeff8f
 800ba18:	40010000 	.word	0x40010000
 800ba1c:	40010400 	.word	0x40010400
 800ba20:	40014000 	.word	0x40014000
 800ba24:	40014400 	.word	0x40014400
 800ba28:	40014800 	.word	0x40014800

0800ba2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b087      	sub	sp, #28
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6a1b      	ldr	r3, [r3, #32]
 800ba3a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6a1b      	ldr	r3, [r3, #32]
 800ba46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	685b      	ldr	r3, [r3, #4]
 800ba4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ba54:	68fa      	ldr	r2, [r7, #12]
 800ba56:	4b22      	ldr	r3, [pc, #136]	; (800bae0 <TIM_OC6_SetConfig+0xb4>)
 800ba58:	4013      	ands	r3, r2
 800ba5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	021b      	lsls	r3, r3, #8
 800ba62:	68fa      	ldr	r2, [r7, #12]
 800ba64:	4313      	orrs	r3, r2
 800ba66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ba6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	689b      	ldr	r3, [r3, #8]
 800ba74:	051b      	lsls	r3, r3, #20
 800ba76:	693a      	ldr	r2, [r7, #16]
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	4a19      	ldr	r2, [pc, #100]	; (800bae4 <TIM_OC6_SetConfig+0xb8>)
 800ba80:	4293      	cmp	r3, r2
 800ba82:	d00f      	beq.n	800baa4 <TIM_OC6_SetConfig+0x78>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	4a18      	ldr	r2, [pc, #96]	; (800bae8 <TIM_OC6_SetConfig+0xbc>)
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d00b      	beq.n	800baa4 <TIM_OC6_SetConfig+0x78>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	4a17      	ldr	r2, [pc, #92]	; (800baec <TIM_OC6_SetConfig+0xc0>)
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d007      	beq.n	800baa4 <TIM_OC6_SetConfig+0x78>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	4a16      	ldr	r2, [pc, #88]	; (800baf0 <TIM_OC6_SetConfig+0xc4>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d003      	beq.n	800baa4 <TIM_OC6_SetConfig+0x78>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	4a15      	ldr	r2, [pc, #84]	; (800baf4 <TIM_OC6_SetConfig+0xc8>)
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d109      	bne.n	800bab8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800baaa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	695b      	ldr	r3, [r3, #20]
 800bab0:	029b      	lsls	r3, r3, #10
 800bab2:	697a      	ldr	r2, [r7, #20]
 800bab4:	4313      	orrs	r3, r2
 800bab6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	697a      	ldr	r2, [r7, #20]
 800babc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	68fa      	ldr	r2, [r7, #12]
 800bac2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	685a      	ldr	r2, [r3, #4]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	693a      	ldr	r2, [r7, #16]
 800bad0:	621a      	str	r2, [r3, #32]
}
 800bad2:	bf00      	nop
 800bad4:	371c      	adds	r7, #28
 800bad6:	46bd      	mov	sp, r7
 800bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800badc:	4770      	bx	lr
 800bade:	bf00      	nop
 800bae0:	feff8fff 	.word	0xfeff8fff
 800bae4:	40010000 	.word	0x40010000
 800bae8:	40010400 	.word	0x40010400
 800baec:	40014000 	.word	0x40014000
 800baf0:	40014400 	.word	0x40014400
 800baf4:	40014800 	.word	0x40014800

0800baf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b087      	sub	sp, #28
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	60f8      	str	r0, [r7, #12]
 800bb00:	60b9      	str	r1, [r7, #8]
 800bb02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	6a1b      	ldr	r3, [r3, #32]
 800bb08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	6a1b      	ldr	r3, [r3, #32]
 800bb0e:	f023 0201 	bic.w	r2, r3, #1
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	699b      	ldr	r3, [r3, #24]
 800bb1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bb22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	011b      	lsls	r3, r3, #4
 800bb28:	693a      	ldr	r2, [r7, #16]
 800bb2a:	4313      	orrs	r3, r2
 800bb2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	f023 030a 	bic.w	r3, r3, #10
 800bb34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bb36:	697a      	ldr	r2, [r7, #20]
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	4313      	orrs	r3, r2
 800bb3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	693a      	ldr	r2, [r7, #16]
 800bb42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	697a      	ldr	r2, [r7, #20]
 800bb48:	621a      	str	r2, [r3, #32]
}
 800bb4a:	bf00      	nop
 800bb4c:	371c      	adds	r7, #28
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb54:	4770      	bx	lr

0800bb56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb56:	b480      	push	{r7}
 800bb58:	b087      	sub	sp, #28
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	60f8      	str	r0, [r7, #12]
 800bb5e:	60b9      	str	r1, [r7, #8]
 800bb60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	6a1b      	ldr	r3, [r3, #32]
 800bb66:	f023 0210 	bic.w	r2, r3, #16
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	699b      	ldr	r3, [r3, #24]
 800bb72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	6a1b      	ldr	r3, [r3, #32]
 800bb78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bb80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	031b      	lsls	r3, r3, #12
 800bb86:	697a      	ldr	r2, [r7, #20]
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bb92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	011b      	lsls	r3, r3, #4
 800bb98:	693a      	ldr	r2, [r7, #16]
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	697a      	ldr	r2, [r7, #20]
 800bba2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	693a      	ldr	r2, [r7, #16]
 800bba8:	621a      	str	r2, [r3, #32]
}
 800bbaa:	bf00      	nop
 800bbac:	371c      	adds	r7, #28
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb4:	4770      	bx	lr
	...

0800bbb8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b085      	sub	sp, #20
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	689b      	ldr	r3, [r3, #8]
 800bbc6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bbc8:	68fa      	ldr	r2, [r7, #12]
 800bbca:	4b09      	ldr	r3, [pc, #36]	; (800bbf0 <TIM_ITRx_SetConfig+0x38>)
 800bbcc:	4013      	ands	r3, r2
 800bbce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bbd0:	683a      	ldr	r2, [r7, #0]
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	f043 0307 	orr.w	r3, r3, #7
 800bbda:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	68fa      	ldr	r2, [r7, #12]
 800bbe0:	609a      	str	r2, [r3, #8]
}
 800bbe2:	bf00      	nop
 800bbe4:	3714      	adds	r7, #20
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbec:	4770      	bx	lr
 800bbee:	bf00      	nop
 800bbf0:	ffcfff8f 	.word	0xffcfff8f

0800bbf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b087      	sub	sp, #28
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	60f8      	str	r0, [r7, #12]
 800bbfc:	60b9      	str	r1, [r7, #8]
 800bbfe:	607a      	str	r2, [r7, #4]
 800bc00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	689b      	ldr	r3, [r3, #8]
 800bc06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	021a      	lsls	r2, r3, #8
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	431a      	orrs	r2, r3
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	697a      	ldr	r2, [r7, #20]
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	697a      	ldr	r2, [r7, #20]
 800bc26:	609a      	str	r2, [r3, #8]
}
 800bc28:	bf00      	nop
 800bc2a:	371c      	adds	r7, #28
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr

0800bc34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b085      	sub	sp, #20
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc44:	2b01      	cmp	r3, #1
 800bc46:	d101      	bne.n	800bc4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bc48:	2302      	movs	r3, #2
 800bc4a:	e06d      	b.n	800bd28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2201      	movs	r2, #1
 800bc50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2202      	movs	r2, #2
 800bc58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	685b      	ldr	r3, [r3, #4]
 800bc62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	689b      	ldr	r3, [r3, #8]
 800bc6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4a30      	ldr	r2, [pc, #192]	; (800bd34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d004      	beq.n	800bc80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	4a2f      	ldr	r2, [pc, #188]	; (800bd38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d108      	bne.n	800bc92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bc86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	68fa      	ldr	r2, [r7, #12]
 800bc8e:	4313      	orrs	r3, r2
 800bc90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	68fa      	ldr	r2, [r7, #12]
 800bca0:	4313      	orrs	r3, r2
 800bca2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	68fa      	ldr	r2, [r7, #12]
 800bcaa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4a20      	ldr	r2, [pc, #128]	; (800bd34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d022      	beq.n	800bcfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcbe:	d01d      	beq.n	800bcfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4a1d      	ldr	r2, [pc, #116]	; (800bd3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d018      	beq.n	800bcfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	4a1c      	ldr	r2, [pc, #112]	; (800bd40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d013      	beq.n	800bcfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	4a1a      	ldr	r2, [pc, #104]	; (800bd44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d00e      	beq.n	800bcfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	4a15      	ldr	r2, [pc, #84]	; (800bd38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d009      	beq.n	800bcfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4a16      	ldr	r2, [pc, #88]	; (800bd48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d004      	beq.n	800bcfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4a15      	ldr	r2, [pc, #84]	; (800bd4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d10c      	bne.n	800bd16 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	689b      	ldr	r3, [r3, #8]
 800bd08:	68ba      	ldr	r2, [r7, #8]
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	68ba      	ldr	r2, [r7, #8]
 800bd14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2201      	movs	r2, #1
 800bd1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2200      	movs	r2, #0
 800bd22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bd26:	2300      	movs	r3, #0
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3714      	adds	r7, #20
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr
 800bd34:	40010000 	.word	0x40010000
 800bd38:	40010400 	.word	0x40010400
 800bd3c:	40000400 	.word	0x40000400
 800bd40:	40000800 	.word	0x40000800
 800bd44:	40000c00 	.word	0x40000c00
 800bd48:	40001800 	.word	0x40001800
 800bd4c:	40014000 	.word	0x40014000

0800bd50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b085      	sub	sp, #20
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd64:	2b01      	cmp	r3, #1
 800bd66:	d101      	bne.n	800bd6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bd68:	2302      	movs	r3, #2
 800bd6a:	e065      	b.n	800be38 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2201      	movs	r2, #1
 800bd70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	68db      	ldr	r3, [r3, #12]
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	689b      	ldr	r3, [r3, #8]
 800bd8c:	4313      	orrs	r3, r2
 800bd8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	4313      	orrs	r3, r2
 800bd9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	691b      	ldr	r3, [r3, #16]
 800bdb6:	4313      	orrs	r3, r2
 800bdb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	695b      	ldr	r3, [r3, #20]
 800bdc4:	4313      	orrs	r3, r2
 800bdc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdd2:	4313      	orrs	r3, r2
 800bdd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	699b      	ldr	r3, [r3, #24]
 800bde0:	041b      	lsls	r3, r3, #16
 800bde2:	4313      	orrs	r3, r2
 800bde4:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	4a16      	ldr	r2, [pc, #88]	; (800be44 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d004      	beq.n	800bdfa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	4a14      	ldr	r2, [pc, #80]	; (800be48 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800bdf6:	4293      	cmp	r3, r2
 800bdf8:	d115      	bne.n	800be26 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be04:	051b      	lsls	r3, r3, #20
 800be06:	4313      	orrs	r3, r2
 800be08:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	69db      	ldr	r3, [r3, #28]
 800be14:	4313      	orrs	r3, r2
 800be16:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	6a1b      	ldr	r3, [r3, #32]
 800be22:	4313      	orrs	r3, r2
 800be24:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	68fa      	ldr	r2, [r7, #12]
 800be2c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2200      	movs	r2, #0
 800be32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800be36:	2300      	movs	r3, #0
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3714      	adds	r7, #20
 800be3c:	46bd      	mov	sp, r7
 800be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be42:	4770      	bx	lr
 800be44:	40010000 	.word	0x40010000
 800be48:	40010400 	.word	0x40010400

0800be4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b083      	sub	sp, #12
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800be54:	bf00      	nop
 800be56:	370c      	adds	r7, #12
 800be58:	46bd      	mov	sp, r7
 800be5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5e:	4770      	bx	lr

0800be60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800be60:	b480      	push	{r7}
 800be62:	b083      	sub	sp, #12
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800be68:	bf00      	nop
 800be6a:	370c      	adds	r7, #12
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr

0800be74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800be74:	b480      	push	{r7}
 800be76:	b083      	sub	sp, #12
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800be7c:	bf00      	nop
 800be7e:	370c      	adds	r7, #12
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr

0800be88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b082      	sub	sp, #8
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d101      	bne.n	800be9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800be96:	2301      	movs	r3, #1
 800be98:	e042      	b.n	800bf20 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d106      	bne.n	800beb2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2200      	movs	r2, #0
 800bea8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f7f8 fb55 	bl	800455c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2224      	movs	r2, #36	; 0x24
 800beb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	681a      	ldr	r2, [r3, #0]
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f022 0201 	bic.w	r2, r2, #1
 800bec8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 fc84 	bl	800c7d8 <UART_SetConfig>
 800bed0:	4603      	mov	r3, r0
 800bed2:	2b01      	cmp	r3, #1
 800bed4:	d101      	bne.n	800beda <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bed6:	2301      	movs	r3, #1
 800bed8:	e022      	b.n	800bf20 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d002      	beq.n	800bee8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f001 f9d8 	bl	800d298 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	685a      	ldr	r2, [r3, #4]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bef6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	689a      	ldr	r2, [r3, #8]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bf06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	681a      	ldr	r2, [r3, #0]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	f042 0201 	orr.w	r2, r2, #1
 800bf16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f001 fa5f 	bl	800d3dc <UART_CheckIdleState>
 800bf1e:	4603      	mov	r3, r0
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3708      	adds	r7, #8
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}

0800bf28 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b08a      	sub	sp, #40	; 0x28
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	60f8      	str	r0, [r7, #12]
 800bf30:	60b9      	str	r1, [r7, #8]
 800bf32:	4613      	mov	r3, r2
 800bf34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf3c:	2b20      	cmp	r3, #32
 800bf3e:	d17a      	bne.n	800c036 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d002      	beq.n	800bf4c <HAL_UART_Transmit_DMA+0x24>
 800bf46:	88fb      	ldrh	r3, [r7, #6]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d101      	bne.n	800bf50 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	e073      	b.n	800c038 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bf56:	2b01      	cmp	r3, #1
 800bf58:	d101      	bne.n	800bf5e <HAL_UART_Transmit_DMA+0x36>
 800bf5a:	2302      	movs	r3, #2
 800bf5c:	e06c      	b.n	800c038 <HAL_UART_Transmit_DMA+0x110>
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2201      	movs	r2, #1
 800bf62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	68ba      	ldr	r2, [r7, #8]
 800bf6a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	88fa      	ldrh	r2, [r7, #6]
 800bf70:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	88fa      	ldrh	r2, [r7, #6]
 800bf78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2221      	movs	r2, #33	; 0x21
 800bf88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d02c      	beq.n	800bfee <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf98:	4a29      	ldr	r2, [pc, #164]	; (800c040 <HAL_UART_Transmit_DMA+0x118>)
 800bf9a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bfa0:	4a28      	ldr	r2, [pc, #160]	; (800c044 <HAL_UART_Transmit_DMA+0x11c>)
 800bfa2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bfa8:	4a27      	ldr	r2, [pc, #156]	; (800c048 <HAL_UART_Transmit_DMA+0x120>)
 800bfaa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	3328      	adds	r3, #40	; 0x28
 800bfc4:	461a      	mov	r2, r3
 800bfc6:	88fb      	ldrh	r3, [r7, #6]
 800bfc8:	f7f9 fc3c 	bl	8005844 <HAL_DMA_Start_IT>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d00d      	beq.n	800bfee <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	2210      	movs	r2, #16
 800bfd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	2220      	movs	r2, #32
 800bfe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800bfea:	2301      	movs	r3, #1
 800bfec:	e024      	b.n	800c038 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	2240      	movs	r2, #64	; 0x40
 800bff4:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	2200      	movs	r2, #0
 800bffa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	3308      	adds	r3, #8
 800c004:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c006:	697b      	ldr	r3, [r7, #20]
 800c008:	e853 3f00 	ldrex	r3, [r3]
 800c00c:	613b      	str	r3, [r7, #16]
   return(result);
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c014:	627b      	str	r3, [r7, #36]	; 0x24
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	3308      	adds	r3, #8
 800c01c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c01e:	623a      	str	r2, [r7, #32]
 800c020:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c022:	69f9      	ldr	r1, [r7, #28]
 800c024:	6a3a      	ldr	r2, [r7, #32]
 800c026:	e841 2300 	strex	r3, r2, [r1]
 800c02a:	61bb      	str	r3, [r7, #24]
   return(result);
 800c02c:	69bb      	ldr	r3, [r7, #24]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d1e5      	bne.n	800bffe <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800c032:	2300      	movs	r3, #0
 800c034:	e000      	b.n	800c038 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800c036:	2302      	movs	r3, #2
  }
}
 800c038:	4618      	mov	r0, r3
 800c03a:	3728      	adds	r7, #40	; 0x28
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}
 800c040:	0800d8a5 	.word	0x0800d8a5
 800c044:	0800d93b 	.word	0x0800d93b
 800c048:	0800dab1 	.word	0x0800dab1

0800c04c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b0ba      	sub	sp, #232	; 0xe8
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	69db      	ldr	r3, [r3, #28]
 800c05a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	689b      	ldr	r3, [r3, #8]
 800c06e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c072:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c076:	f640 030f 	movw	r3, #2063	; 0x80f
 800c07a:	4013      	ands	r3, r2
 800c07c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c080:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c084:	2b00      	cmp	r3, #0
 800c086:	d11b      	bne.n	800c0c0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c08c:	f003 0320 	and.w	r3, r3, #32
 800c090:	2b00      	cmp	r3, #0
 800c092:	d015      	beq.n	800c0c0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c098:	f003 0320 	and.w	r3, r3, #32
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d105      	bne.n	800c0ac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c0a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c0a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d009      	beq.n	800c0c0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	f000 835a 	beq.w	800c76a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	4798      	blx	r3
      }
      return;
 800c0be:	e354      	b.n	800c76a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c0c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	f000 811f 	beq.w	800c308 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c0ca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c0ce:	4b8b      	ldr	r3, [pc, #556]	; (800c2fc <HAL_UART_IRQHandler+0x2b0>)
 800c0d0:	4013      	ands	r3, r2
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d106      	bne.n	800c0e4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c0d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c0da:	4b89      	ldr	r3, [pc, #548]	; (800c300 <HAL_UART_IRQHandler+0x2b4>)
 800c0dc:	4013      	ands	r3, r2
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	f000 8112 	beq.w	800c308 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c0e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0e8:	f003 0301 	and.w	r3, r3, #1
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d011      	beq.n	800c114 <HAL_UART_IRQHandler+0xc8>
 800c0f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d00b      	beq.n	800c114 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	2201      	movs	r2, #1
 800c102:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c10a:	f043 0201 	orr.w	r2, r3, #1
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c118:	f003 0302 	and.w	r3, r3, #2
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d011      	beq.n	800c144 <HAL_UART_IRQHandler+0xf8>
 800c120:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c124:	f003 0301 	and.w	r3, r3, #1
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d00b      	beq.n	800c144 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	2202      	movs	r2, #2
 800c132:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c13a:	f043 0204 	orr.w	r2, r3, #4
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c148:	f003 0304 	and.w	r3, r3, #4
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d011      	beq.n	800c174 <HAL_UART_IRQHandler+0x128>
 800c150:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c154:	f003 0301 	and.w	r3, r3, #1
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d00b      	beq.n	800c174 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	2204      	movs	r2, #4
 800c162:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c16a:	f043 0202 	orr.w	r2, r3, #2
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c178:	f003 0308 	and.w	r3, r3, #8
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d017      	beq.n	800c1b0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c184:	f003 0320 	and.w	r3, r3, #32
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d105      	bne.n	800c198 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c18c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c190:	4b5a      	ldr	r3, [pc, #360]	; (800c2fc <HAL_UART_IRQHandler+0x2b0>)
 800c192:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c194:	2b00      	cmp	r3, #0
 800c196:	d00b      	beq.n	800c1b0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	2208      	movs	r2, #8
 800c19e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1a6:	f043 0208 	orr.w	r2, r3, #8
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c1b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d012      	beq.n	800c1e2 <HAL_UART_IRQHandler+0x196>
 800c1bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d00c      	beq.n	800c1e2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c1d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1d8:	f043 0220 	orr.w	r2, r3, #32
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	f000 82c0 	beq.w	800c76e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c1ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1f2:	f003 0320 	and.w	r3, r3, #32
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d013      	beq.n	800c222 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c1fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1fe:	f003 0320 	and.w	r3, r3, #32
 800c202:	2b00      	cmp	r3, #0
 800c204:	d105      	bne.n	800c212 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c20a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d007      	beq.n	800c222 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c216:	2b00      	cmp	r3, #0
 800c218:	d003      	beq.n	800c222 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c228:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	689b      	ldr	r3, [r3, #8]
 800c232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c236:	2b40      	cmp	r3, #64	; 0x40
 800c238:	d005      	beq.n	800c246 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c23a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c23e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c242:	2b00      	cmp	r3, #0
 800c244:	d04f      	beq.n	800c2e6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f001 fac6 	bl	800d7d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	689b      	ldr	r3, [r3, #8]
 800c252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c256:	2b40      	cmp	r3, #64	; 0x40
 800c258:	d141      	bne.n	800c2de <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	3308      	adds	r3, #8
 800c260:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c264:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c268:	e853 3f00 	ldrex	r3, [r3]
 800c26c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c270:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c274:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c278:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	3308      	adds	r3, #8
 800c282:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c286:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c28a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c28e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c292:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c296:	e841 2300 	strex	r3, r2, [r1]
 800c29a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c29e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d1d9      	bne.n	800c25a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d013      	beq.n	800c2d6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2b2:	4a14      	ldr	r2, [pc, #80]	; (800c304 <HAL_UART_IRQHandler+0x2b8>)
 800c2b4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f7fa f84a 	bl	8006354 <HAL_DMA_Abort_IT>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d017      	beq.n	800c2f6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2cc:	687a      	ldr	r2, [r7, #4]
 800c2ce:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c2d0:	4610      	mov	r0, r2
 800c2d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2d4:	e00f      	b.n	800c2f6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f000 fa74 	bl	800c7c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2dc:	e00b      	b.n	800c2f6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f000 fa70 	bl	800c7c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2e4:	e007      	b.n	800c2f6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f000 fa6c 	bl	800c7c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c2f4:	e23b      	b.n	800c76e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2f6:	bf00      	nop
    return;
 800c2f8:	e239      	b.n	800c76e <HAL_UART_IRQHandler+0x722>
 800c2fa:	bf00      	nop
 800c2fc:	10000001 	.word	0x10000001
 800c300:	04000120 	.word	0x04000120
 800c304:	0800db31 	.word	0x0800db31

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	f040 81ce 	bne.w	800c6ae <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c316:	f003 0310 	and.w	r3, r3, #16
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	f000 81c7 	beq.w	800c6ae <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c324:	f003 0310 	and.w	r3, r3, #16
 800c328:	2b00      	cmp	r3, #0
 800c32a:	f000 81c0 	beq.w	800c6ae <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	2210      	movs	r2, #16
 800c334:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	689b      	ldr	r3, [r3, #8]
 800c33c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c340:	2b40      	cmp	r3, #64	; 0x40
 800c342:	f040 813b 	bne.w	800c5bc <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	4a8b      	ldr	r2, [pc, #556]	; (800c57c <HAL_UART_IRQHandler+0x530>)
 800c34e:	4293      	cmp	r3, r2
 800c350:	d059      	beq.n	800c406 <HAL_UART_IRQHandler+0x3ba>
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4a89      	ldr	r2, [pc, #548]	; (800c580 <HAL_UART_IRQHandler+0x534>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d053      	beq.n	800c406 <HAL_UART_IRQHandler+0x3ba>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	4a87      	ldr	r2, [pc, #540]	; (800c584 <HAL_UART_IRQHandler+0x538>)
 800c366:	4293      	cmp	r3, r2
 800c368:	d04d      	beq.n	800c406 <HAL_UART_IRQHandler+0x3ba>
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	4a85      	ldr	r2, [pc, #532]	; (800c588 <HAL_UART_IRQHandler+0x53c>)
 800c372:	4293      	cmp	r3, r2
 800c374:	d047      	beq.n	800c406 <HAL_UART_IRQHandler+0x3ba>
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	4a83      	ldr	r2, [pc, #524]	; (800c58c <HAL_UART_IRQHandler+0x540>)
 800c37e:	4293      	cmp	r3, r2
 800c380:	d041      	beq.n	800c406 <HAL_UART_IRQHandler+0x3ba>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	4a81      	ldr	r2, [pc, #516]	; (800c590 <HAL_UART_IRQHandler+0x544>)
 800c38a:	4293      	cmp	r3, r2
 800c38c:	d03b      	beq.n	800c406 <HAL_UART_IRQHandler+0x3ba>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	4a7f      	ldr	r2, [pc, #508]	; (800c594 <HAL_UART_IRQHandler+0x548>)
 800c396:	4293      	cmp	r3, r2
 800c398:	d035      	beq.n	800c406 <HAL_UART_IRQHandler+0x3ba>
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	4a7d      	ldr	r2, [pc, #500]	; (800c598 <HAL_UART_IRQHandler+0x54c>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d02f      	beq.n	800c406 <HAL_UART_IRQHandler+0x3ba>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4a7b      	ldr	r2, [pc, #492]	; (800c59c <HAL_UART_IRQHandler+0x550>)
 800c3ae:	4293      	cmp	r3, r2
 800c3b0:	d029      	beq.n	800c406 <HAL_UART_IRQHandler+0x3ba>
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	4a79      	ldr	r2, [pc, #484]	; (800c5a0 <HAL_UART_IRQHandler+0x554>)
 800c3ba:	4293      	cmp	r3, r2
 800c3bc:	d023      	beq.n	800c406 <HAL_UART_IRQHandler+0x3ba>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	4a77      	ldr	r2, [pc, #476]	; (800c5a4 <HAL_UART_IRQHandler+0x558>)
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d01d      	beq.n	800c406 <HAL_UART_IRQHandler+0x3ba>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4a75      	ldr	r2, [pc, #468]	; (800c5a8 <HAL_UART_IRQHandler+0x55c>)
 800c3d2:	4293      	cmp	r3, r2
 800c3d4:	d017      	beq.n	800c406 <HAL_UART_IRQHandler+0x3ba>
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	4a73      	ldr	r2, [pc, #460]	; (800c5ac <HAL_UART_IRQHandler+0x560>)
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	d011      	beq.n	800c406 <HAL_UART_IRQHandler+0x3ba>
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4a71      	ldr	r2, [pc, #452]	; (800c5b0 <HAL_UART_IRQHandler+0x564>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d00b      	beq.n	800c406 <HAL_UART_IRQHandler+0x3ba>
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4a6f      	ldr	r2, [pc, #444]	; (800c5b4 <HAL_UART_IRQHandler+0x568>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d005      	beq.n	800c406 <HAL_UART_IRQHandler+0x3ba>
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4a6d      	ldr	r2, [pc, #436]	; (800c5b8 <HAL_UART_IRQHandler+0x56c>)
 800c402:	4293      	cmp	r3, r2
 800c404:	d105      	bne.n	800c412 <HAL_UART_IRQHandler+0x3c6>
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	685b      	ldr	r3, [r3, #4]
 800c40e:	b29b      	uxth	r3, r3
 800c410:	e004      	b.n	800c41c <HAL_UART_IRQHandler+0x3d0>
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	b29b      	uxth	r3, r3
 800c41c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c420:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c424:	2b00      	cmp	r3, #0
 800c426:	f000 81a4 	beq.w	800c772 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c430:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c434:	429a      	cmp	r2, r3
 800c436:	f080 819c 	bcs.w	800c772 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c440:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c448:	69db      	ldr	r3, [r3, #28]
 800c44a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c44e:	f000 8086 	beq.w	800c55e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c45a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c45e:	e853 3f00 	ldrex	r3, [r3]
 800c462:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c466:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c46a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c46e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	461a      	mov	r2, r3
 800c478:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c47c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c480:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c484:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c488:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c48c:	e841 2300 	strex	r3, r2, [r1]
 800c490:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c494:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d1da      	bne.n	800c452 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	3308      	adds	r3, #8
 800c4a2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c4a6:	e853 3f00 	ldrex	r3, [r3]
 800c4aa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c4ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c4ae:	f023 0301 	bic.w	r3, r3, #1
 800c4b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	3308      	adds	r3, #8
 800c4bc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c4c0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c4c4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4c6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c4c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c4cc:	e841 2300 	strex	r3, r2, [r1]
 800c4d0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c4d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d1e1      	bne.n	800c49c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	3308      	adds	r3, #8
 800c4de:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c4e2:	e853 3f00 	ldrex	r3, [r3]
 800c4e6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c4e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	3308      	adds	r3, #8
 800c4f8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c4fc:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c4fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c500:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c502:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c504:	e841 2300 	strex	r3, r2, [r1]
 800c508:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c50a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d1e3      	bne.n	800c4d8 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2220      	movs	r2, #32
 800c514:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2200      	movs	r2, #0
 800c51c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c526:	e853 3f00 	ldrex	r3, [r3]
 800c52a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c52c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c52e:	f023 0310 	bic.w	r3, r3, #16
 800c532:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	461a      	mov	r2, r3
 800c53c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c540:	65bb      	str	r3, [r7, #88]	; 0x58
 800c542:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c544:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c546:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c548:	e841 2300 	strex	r3, r2, [r1]
 800c54c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c54e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c550:	2b00      	cmp	r3, #0
 800c552:	d1e4      	bne.n	800c51e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c558:	4618      	mov	r0, r3
 800c55a:	f7f9 fbdd 	bl	8005d18 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c56a:	b29b      	uxth	r3, r3
 800c56c:	1ad3      	subs	r3, r2, r3
 800c56e:	b29b      	uxth	r3, r3
 800c570:	4619      	mov	r1, r3
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f7f5 fcae 	bl	8001ed4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c578:	e0fb      	b.n	800c772 <HAL_UART_IRQHandler+0x726>
 800c57a:	bf00      	nop
 800c57c:	40020010 	.word	0x40020010
 800c580:	40020028 	.word	0x40020028
 800c584:	40020040 	.word	0x40020040
 800c588:	40020058 	.word	0x40020058
 800c58c:	40020070 	.word	0x40020070
 800c590:	40020088 	.word	0x40020088
 800c594:	400200a0 	.word	0x400200a0
 800c598:	400200b8 	.word	0x400200b8
 800c59c:	40020410 	.word	0x40020410
 800c5a0:	40020428 	.word	0x40020428
 800c5a4:	40020440 	.word	0x40020440
 800c5a8:	40020458 	.word	0x40020458
 800c5ac:	40020470 	.word	0x40020470
 800c5b0:	40020488 	.word	0x40020488
 800c5b4:	400204a0 	.word	0x400204a0
 800c5b8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c5c8:	b29b      	uxth	r3, r3
 800c5ca:	1ad3      	subs	r3, r2, r3
 800c5cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c5d6:	b29b      	uxth	r3, r3
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	f000 80cc 	beq.w	800c776 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800c5de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	f000 80c7 	beq.w	800c776 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f0:	e853 3f00 	ldrex	r3, [r3]
 800c5f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c5f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c5fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	461a      	mov	r2, r3
 800c606:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c60a:	647b      	str	r3, [r7, #68]	; 0x44
 800c60c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c60e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c610:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c612:	e841 2300 	strex	r3, r2, [r1]
 800c616:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d1e4      	bne.n	800c5e8 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	3308      	adds	r3, #8
 800c624:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c628:	e853 3f00 	ldrex	r3, [r3]
 800c62c:	623b      	str	r3, [r7, #32]
   return(result);
 800c62e:	6a3a      	ldr	r2, [r7, #32]
 800c630:	4b54      	ldr	r3, [pc, #336]	; (800c784 <HAL_UART_IRQHandler+0x738>)
 800c632:	4013      	ands	r3, r2
 800c634:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	3308      	adds	r3, #8
 800c63e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c642:	633a      	str	r2, [r7, #48]	; 0x30
 800c644:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c646:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c64a:	e841 2300 	strex	r3, r2, [r1]
 800c64e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c652:	2b00      	cmp	r3, #0
 800c654:	d1e3      	bne.n	800c61e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2220      	movs	r2, #32
 800c65a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2200      	movs	r2, #0
 800c662:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2200      	movs	r2, #0
 800c668:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c670:	693b      	ldr	r3, [r7, #16]
 800c672:	e853 3f00 	ldrex	r3, [r3]
 800c676:	60fb      	str	r3, [r7, #12]
   return(result);
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	f023 0310 	bic.w	r3, r3, #16
 800c67e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	461a      	mov	r2, r3
 800c688:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c68c:	61fb      	str	r3, [r7, #28]
 800c68e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c690:	69b9      	ldr	r1, [r7, #24]
 800c692:	69fa      	ldr	r2, [r7, #28]
 800c694:	e841 2300 	strex	r3, r2, [r1]
 800c698:	617b      	str	r3, [r7, #20]
   return(result);
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d1e4      	bne.n	800c66a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c6a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c6a4:	4619      	mov	r1, r3
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f7f5 fc14 	bl	8001ed4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c6ac:	e063      	b.n	800c776 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c6ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d00e      	beq.n	800c6d8 <HAL_UART_IRQHandler+0x68c>
 800c6ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c6be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d008      	beq.n	800c6d8 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c6ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f001 fa6e 	bl	800dbb2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c6d6:	e051      	b.n	800c77c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c6d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d014      	beq.n	800c70e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c6e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d105      	bne.n	800c6fc <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c6f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c6f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d008      	beq.n	800c70e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c700:	2b00      	cmp	r3, #0
 800c702:	d03a      	beq.n	800c77a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	4798      	blx	r3
    }
    return;
 800c70c:	e035      	b.n	800c77a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c70e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c716:	2b00      	cmp	r3, #0
 800c718:	d009      	beq.n	800c72e <HAL_UART_IRQHandler+0x6e2>
 800c71a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c71e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c722:	2b00      	cmp	r3, #0
 800c724:	d003      	beq.n	800c72e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f001 fa18 	bl	800db5c <UART_EndTransmit_IT>
    return;
 800c72c:	e026      	b.n	800c77c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c72e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c732:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c736:	2b00      	cmp	r3, #0
 800c738:	d009      	beq.n	800c74e <HAL_UART_IRQHandler+0x702>
 800c73a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c73e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c742:	2b00      	cmp	r3, #0
 800c744:	d003      	beq.n	800c74e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f001 fa47 	bl	800dbda <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c74c:	e016      	b.n	800c77c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c74e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c752:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c756:	2b00      	cmp	r3, #0
 800c758:	d010      	beq.n	800c77c <HAL_UART_IRQHandler+0x730>
 800c75a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c75e:	2b00      	cmp	r3, #0
 800c760:	da0c      	bge.n	800c77c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f001 fa2f 	bl	800dbc6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c768:	e008      	b.n	800c77c <HAL_UART_IRQHandler+0x730>
      return;
 800c76a:	bf00      	nop
 800c76c:	e006      	b.n	800c77c <HAL_UART_IRQHandler+0x730>
    return;
 800c76e:	bf00      	nop
 800c770:	e004      	b.n	800c77c <HAL_UART_IRQHandler+0x730>
      return;
 800c772:	bf00      	nop
 800c774:	e002      	b.n	800c77c <HAL_UART_IRQHandler+0x730>
      return;
 800c776:	bf00      	nop
 800c778:	e000      	b.n	800c77c <HAL_UART_IRQHandler+0x730>
    return;
 800c77a:	bf00      	nop
  }
}
 800c77c:	37e8      	adds	r7, #232	; 0xe8
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}
 800c782:	bf00      	nop
 800c784:	effffffe 	.word	0xeffffffe

0800c788 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c788:	b480      	push	{r7}
 800c78a:	b083      	sub	sp, #12
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c790:	bf00      	nop
 800c792:	370c      	adds	r7, #12
 800c794:	46bd      	mov	sp, r7
 800c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79a:	4770      	bx	lr

0800c79c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c79c:	b480      	push	{r7}
 800c79e:	b083      	sub	sp, #12
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c7a4:	bf00      	nop
 800c7a6:	370c      	adds	r7, #12
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ae:	4770      	bx	lr

0800c7b0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b083      	sub	sp, #12
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c7b8:	bf00      	nop
 800c7ba:	370c      	adds	r7, #12
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr

0800c7c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b083      	sub	sp, #12
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c7cc:	bf00      	nop
 800c7ce:	370c      	adds	r7, #12
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d6:	4770      	bx	lr

0800c7d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c7d8:	b5b0      	push	{r4, r5, r7, lr}
 800c7da:	b08e      	sub	sp, #56	; 0x38
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	689a      	ldr	r2, [r3, #8]
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	691b      	ldr	r3, [r3, #16]
 800c7ee:	431a      	orrs	r2, r3
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	695b      	ldr	r3, [r3, #20]
 800c7f4:	431a      	orrs	r2, r3
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	69db      	ldr	r3, [r3, #28]
 800c7fa:	4313      	orrs	r3, r2
 800c7fc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	681a      	ldr	r2, [r3, #0]
 800c804:	4bbf      	ldr	r3, [pc, #764]	; (800cb04 <UART_SetConfig+0x32c>)
 800c806:	4013      	ands	r3, r2
 800c808:	687a      	ldr	r2, [r7, #4]
 800c80a:	6812      	ldr	r2, [r2, #0]
 800c80c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c80e:	430b      	orrs	r3, r1
 800c810:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	68da      	ldr	r2, [r3, #12]
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	430a      	orrs	r2, r1
 800c826:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	699b      	ldr	r3, [r3, #24]
 800c82c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	4ab5      	ldr	r2, [pc, #724]	; (800cb08 <UART_SetConfig+0x330>)
 800c834:	4293      	cmp	r3, r2
 800c836:	d004      	beq.n	800c842 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6a1b      	ldr	r3, [r3, #32]
 800c83c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c83e:	4313      	orrs	r3, r2
 800c840:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	689a      	ldr	r2, [r3, #8]
 800c848:	4bb0      	ldr	r3, [pc, #704]	; (800cb0c <UART_SetConfig+0x334>)
 800c84a:	4013      	ands	r3, r2
 800c84c:	687a      	ldr	r2, [r7, #4]
 800c84e:	6812      	ldr	r2, [r2, #0]
 800c850:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c852:	430b      	orrs	r3, r1
 800c854:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c85c:	f023 010f 	bic.w	r1, r3, #15
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	430a      	orrs	r2, r1
 800c86a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	4aa7      	ldr	r2, [pc, #668]	; (800cb10 <UART_SetConfig+0x338>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d176      	bne.n	800c964 <UART_SetConfig+0x18c>
 800c876:	4ba7      	ldr	r3, [pc, #668]	; (800cb14 <UART_SetConfig+0x33c>)
 800c878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c87a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c87e:	2b28      	cmp	r3, #40	; 0x28
 800c880:	d86c      	bhi.n	800c95c <UART_SetConfig+0x184>
 800c882:	a201      	add	r2, pc, #4	; (adr r2, 800c888 <UART_SetConfig+0xb0>)
 800c884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c888:	0800c92d 	.word	0x0800c92d
 800c88c:	0800c95d 	.word	0x0800c95d
 800c890:	0800c95d 	.word	0x0800c95d
 800c894:	0800c95d 	.word	0x0800c95d
 800c898:	0800c95d 	.word	0x0800c95d
 800c89c:	0800c95d 	.word	0x0800c95d
 800c8a0:	0800c95d 	.word	0x0800c95d
 800c8a4:	0800c95d 	.word	0x0800c95d
 800c8a8:	0800c935 	.word	0x0800c935
 800c8ac:	0800c95d 	.word	0x0800c95d
 800c8b0:	0800c95d 	.word	0x0800c95d
 800c8b4:	0800c95d 	.word	0x0800c95d
 800c8b8:	0800c95d 	.word	0x0800c95d
 800c8bc:	0800c95d 	.word	0x0800c95d
 800c8c0:	0800c95d 	.word	0x0800c95d
 800c8c4:	0800c95d 	.word	0x0800c95d
 800c8c8:	0800c93d 	.word	0x0800c93d
 800c8cc:	0800c95d 	.word	0x0800c95d
 800c8d0:	0800c95d 	.word	0x0800c95d
 800c8d4:	0800c95d 	.word	0x0800c95d
 800c8d8:	0800c95d 	.word	0x0800c95d
 800c8dc:	0800c95d 	.word	0x0800c95d
 800c8e0:	0800c95d 	.word	0x0800c95d
 800c8e4:	0800c95d 	.word	0x0800c95d
 800c8e8:	0800c945 	.word	0x0800c945
 800c8ec:	0800c95d 	.word	0x0800c95d
 800c8f0:	0800c95d 	.word	0x0800c95d
 800c8f4:	0800c95d 	.word	0x0800c95d
 800c8f8:	0800c95d 	.word	0x0800c95d
 800c8fc:	0800c95d 	.word	0x0800c95d
 800c900:	0800c95d 	.word	0x0800c95d
 800c904:	0800c95d 	.word	0x0800c95d
 800c908:	0800c94d 	.word	0x0800c94d
 800c90c:	0800c95d 	.word	0x0800c95d
 800c910:	0800c95d 	.word	0x0800c95d
 800c914:	0800c95d 	.word	0x0800c95d
 800c918:	0800c95d 	.word	0x0800c95d
 800c91c:	0800c95d 	.word	0x0800c95d
 800c920:	0800c95d 	.word	0x0800c95d
 800c924:	0800c95d 	.word	0x0800c95d
 800c928:	0800c955 	.word	0x0800c955
 800c92c:	2301      	movs	r3, #1
 800c92e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c932:	e222      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800c934:	2304      	movs	r3, #4
 800c936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c93a:	e21e      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800c93c:	2308      	movs	r3, #8
 800c93e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c942:	e21a      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800c944:	2310      	movs	r3, #16
 800c946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c94a:	e216      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800c94c:	2320      	movs	r3, #32
 800c94e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c952:	e212      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800c954:	2340      	movs	r3, #64	; 0x40
 800c956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c95a:	e20e      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800c95c:	2380      	movs	r3, #128	; 0x80
 800c95e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c962:	e20a      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	4a6b      	ldr	r2, [pc, #428]	; (800cb18 <UART_SetConfig+0x340>)
 800c96a:	4293      	cmp	r3, r2
 800c96c:	d130      	bne.n	800c9d0 <UART_SetConfig+0x1f8>
 800c96e:	4b69      	ldr	r3, [pc, #420]	; (800cb14 <UART_SetConfig+0x33c>)
 800c970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c972:	f003 0307 	and.w	r3, r3, #7
 800c976:	2b05      	cmp	r3, #5
 800c978:	d826      	bhi.n	800c9c8 <UART_SetConfig+0x1f0>
 800c97a:	a201      	add	r2, pc, #4	; (adr r2, 800c980 <UART_SetConfig+0x1a8>)
 800c97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c980:	0800c999 	.word	0x0800c999
 800c984:	0800c9a1 	.word	0x0800c9a1
 800c988:	0800c9a9 	.word	0x0800c9a9
 800c98c:	0800c9b1 	.word	0x0800c9b1
 800c990:	0800c9b9 	.word	0x0800c9b9
 800c994:	0800c9c1 	.word	0x0800c9c1
 800c998:	2300      	movs	r3, #0
 800c99a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c99e:	e1ec      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800c9a0:	2304      	movs	r3, #4
 800c9a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9a6:	e1e8      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800c9a8:	2308      	movs	r3, #8
 800c9aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9ae:	e1e4      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800c9b0:	2310      	movs	r3, #16
 800c9b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9b6:	e1e0      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800c9b8:	2320      	movs	r3, #32
 800c9ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9be:	e1dc      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800c9c0:	2340      	movs	r3, #64	; 0x40
 800c9c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9c6:	e1d8      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800c9c8:	2380      	movs	r3, #128	; 0x80
 800c9ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9ce:	e1d4      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4a51      	ldr	r2, [pc, #324]	; (800cb1c <UART_SetConfig+0x344>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d130      	bne.n	800ca3c <UART_SetConfig+0x264>
 800c9da:	4b4e      	ldr	r3, [pc, #312]	; (800cb14 <UART_SetConfig+0x33c>)
 800c9dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9de:	f003 0307 	and.w	r3, r3, #7
 800c9e2:	2b05      	cmp	r3, #5
 800c9e4:	d826      	bhi.n	800ca34 <UART_SetConfig+0x25c>
 800c9e6:	a201      	add	r2, pc, #4	; (adr r2, 800c9ec <UART_SetConfig+0x214>)
 800c9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9ec:	0800ca05 	.word	0x0800ca05
 800c9f0:	0800ca0d 	.word	0x0800ca0d
 800c9f4:	0800ca15 	.word	0x0800ca15
 800c9f8:	0800ca1d 	.word	0x0800ca1d
 800c9fc:	0800ca25 	.word	0x0800ca25
 800ca00:	0800ca2d 	.word	0x0800ca2d
 800ca04:	2300      	movs	r3, #0
 800ca06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca0a:	e1b6      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800ca0c:	2304      	movs	r3, #4
 800ca0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca12:	e1b2      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800ca14:	2308      	movs	r3, #8
 800ca16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca1a:	e1ae      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800ca1c:	2310      	movs	r3, #16
 800ca1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca22:	e1aa      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800ca24:	2320      	movs	r3, #32
 800ca26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca2a:	e1a6      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800ca2c:	2340      	movs	r3, #64	; 0x40
 800ca2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca32:	e1a2      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800ca34:	2380      	movs	r3, #128	; 0x80
 800ca36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca3a:	e19e      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4a37      	ldr	r2, [pc, #220]	; (800cb20 <UART_SetConfig+0x348>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d130      	bne.n	800caa8 <UART_SetConfig+0x2d0>
 800ca46:	4b33      	ldr	r3, [pc, #204]	; (800cb14 <UART_SetConfig+0x33c>)
 800ca48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca4a:	f003 0307 	and.w	r3, r3, #7
 800ca4e:	2b05      	cmp	r3, #5
 800ca50:	d826      	bhi.n	800caa0 <UART_SetConfig+0x2c8>
 800ca52:	a201      	add	r2, pc, #4	; (adr r2, 800ca58 <UART_SetConfig+0x280>)
 800ca54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca58:	0800ca71 	.word	0x0800ca71
 800ca5c:	0800ca79 	.word	0x0800ca79
 800ca60:	0800ca81 	.word	0x0800ca81
 800ca64:	0800ca89 	.word	0x0800ca89
 800ca68:	0800ca91 	.word	0x0800ca91
 800ca6c:	0800ca99 	.word	0x0800ca99
 800ca70:	2300      	movs	r3, #0
 800ca72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca76:	e180      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800ca78:	2304      	movs	r3, #4
 800ca7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca7e:	e17c      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800ca80:	2308      	movs	r3, #8
 800ca82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca86:	e178      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800ca88:	2310      	movs	r3, #16
 800ca8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca8e:	e174      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800ca90:	2320      	movs	r3, #32
 800ca92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca96:	e170      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800ca98:	2340      	movs	r3, #64	; 0x40
 800ca9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca9e:	e16c      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800caa0:	2380      	movs	r3, #128	; 0x80
 800caa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caa6:	e168      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4a1d      	ldr	r2, [pc, #116]	; (800cb24 <UART_SetConfig+0x34c>)
 800caae:	4293      	cmp	r3, r2
 800cab0:	d142      	bne.n	800cb38 <UART_SetConfig+0x360>
 800cab2:	4b18      	ldr	r3, [pc, #96]	; (800cb14 <UART_SetConfig+0x33c>)
 800cab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cab6:	f003 0307 	and.w	r3, r3, #7
 800caba:	2b05      	cmp	r3, #5
 800cabc:	d838      	bhi.n	800cb30 <UART_SetConfig+0x358>
 800cabe:	a201      	add	r2, pc, #4	; (adr r2, 800cac4 <UART_SetConfig+0x2ec>)
 800cac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cac4:	0800cadd 	.word	0x0800cadd
 800cac8:	0800cae5 	.word	0x0800cae5
 800cacc:	0800caed 	.word	0x0800caed
 800cad0:	0800caf5 	.word	0x0800caf5
 800cad4:	0800cafd 	.word	0x0800cafd
 800cad8:	0800cb29 	.word	0x0800cb29
 800cadc:	2300      	movs	r3, #0
 800cade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cae2:	e14a      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800cae4:	2304      	movs	r3, #4
 800cae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caea:	e146      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800caec:	2308      	movs	r3, #8
 800caee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caf2:	e142      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800caf4:	2310      	movs	r3, #16
 800caf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cafa:	e13e      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800cafc:	2320      	movs	r3, #32
 800cafe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb02:	e13a      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800cb04:	cfff69f3 	.word	0xcfff69f3
 800cb08:	58000c00 	.word	0x58000c00
 800cb0c:	11fff4ff 	.word	0x11fff4ff
 800cb10:	40011000 	.word	0x40011000
 800cb14:	58024400 	.word	0x58024400
 800cb18:	40004400 	.word	0x40004400
 800cb1c:	40004800 	.word	0x40004800
 800cb20:	40004c00 	.word	0x40004c00
 800cb24:	40005000 	.word	0x40005000
 800cb28:	2340      	movs	r3, #64	; 0x40
 800cb2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb2e:	e124      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800cb30:	2380      	movs	r3, #128	; 0x80
 800cb32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb36:	e120      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	4acc      	ldr	r2, [pc, #816]	; (800ce70 <UART_SetConfig+0x698>)
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d176      	bne.n	800cc30 <UART_SetConfig+0x458>
 800cb42:	4bcc      	ldr	r3, [pc, #816]	; (800ce74 <UART_SetConfig+0x69c>)
 800cb44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cb4a:	2b28      	cmp	r3, #40	; 0x28
 800cb4c:	d86c      	bhi.n	800cc28 <UART_SetConfig+0x450>
 800cb4e:	a201      	add	r2, pc, #4	; (adr r2, 800cb54 <UART_SetConfig+0x37c>)
 800cb50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb54:	0800cbf9 	.word	0x0800cbf9
 800cb58:	0800cc29 	.word	0x0800cc29
 800cb5c:	0800cc29 	.word	0x0800cc29
 800cb60:	0800cc29 	.word	0x0800cc29
 800cb64:	0800cc29 	.word	0x0800cc29
 800cb68:	0800cc29 	.word	0x0800cc29
 800cb6c:	0800cc29 	.word	0x0800cc29
 800cb70:	0800cc29 	.word	0x0800cc29
 800cb74:	0800cc01 	.word	0x0800cc01
 800cb78:	0800cc29 	.word	0x0800cc29
 800cb7c:	0800cc29 	.word	0x0800cc29
 800cb80:	0800cc29 	.word	0x0800cc29
 800cb84:	0800cc29 	.word	0x0800cc29
 800cb88:	0800cc29 	.word	0x0800cc29
 800cb8c:	0800cc29 	.word	0x0800cc29
 800cb90:	0800cc29 	.word	0x0800cc29
 800cb94:	0800cc09 	.word	0x0800cc09
 800cb98:	0800cc29 	.word	0x0800cc29
 800cb9c:	0800cc29 	.word	0x0800cc29
 800cba0:	0800cc29 	.word	0x0800cc29
 800cba4:	0800cc29 	.word	0x0800cc29
 800cba8:	0800cc29 	.word	0x0800cc29
 800cbac:	0800cc29 	.word	0x0800cc29
 800cbb0:	0800cc29 	.word	0x0800cc29
 800cbb4:	0800cc11 	.word	0x0800cc11
 800cbb8:	0800cc29 	.word	0x0800cc29
 800cbbc:	0800cc29 	.word	0x0800cc29
 800cbc0:	0800cc29 	.word	0x0800cc29
 800cbc4:	0800cc29 	.word	0x0800cc29
 800cbc8:	0800cc29 	.word	0x0800cc29
 800cbcc:	0800cc29 	.word	0x0800cc29
 800cbd0:	0800cc29 	.word	0x0800cc29
 800cbd4:	0800cc19 	.word	0x0800cc19
 800cbd8:	0800cc29 	.word	0x0800cc29
 800cbdc:	0800cc29 	.word	0x0800cc29
 800cbe0:	0800cc29 	.word	0x0800cc29
 800cbe4:	0800cc29 	.word	0x0800cc29
 800cbe8:	0800cc29 	.word	0x0800cc29
 800cbec:	0800cc29 	.word	0x0800cc29
 800cbf0:	0800cc29 	.word	0x0800cc29
 800cbf4:	0800cc21 	.word	0x0800cc21
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbfe:	e0bc      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800cc00:	2304      	movs	r3, #4
 800cc02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc06:	e0b8      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800cc08:	2308      	movs	r3, #8
 800cc0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc0e:	e0b4      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800cc10:	2310      	movs	r3, #16
 800cc12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc16:	e0b0      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800cc18:	2320      	movs	r3, #32
 800cc1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc1e:	e0ac      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800cc20:	2340      	movs	r3, #64	; 0x40
 800cc22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc26:	e0a8      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800cc28:	2380      	movs	r3, #128	; 0x80
 800cc2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc2e:	e0a4      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	4a90      	ldr	r2, [pc, #576]	; (800ce78 <UART_SetConfig+0x6a0>)
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d130      	bne.n	800cc9c <UART_SetConfig+0x4c4>
 800cc3a:	4b8e      	ldr	r3, [pc, #568]	; (800ce74 <UART_SetConfig+0x69c>)
 800cc3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc3e:	f003 0307 	and.w	r3, r3, #7
 800cc42:	2b05      	cmp	r3, #5
 800cc44:	d826      	bhi.n	800cc94 <UART_SetConfig+0x4bc>
 800cc46:	a201      	add	r2, pc, #4	; (adr r2, 800cc4c <UART_SetConfig+0x474>)
 800cc48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc4c:	0800cc65 	.word	0x0800cc65
 800cc50:	0800cc6d 	.word	0x0800cc6d
 800cc54:	0800cc75 	.word	0x0800cc75
 800cc58:	0800cc7d 	.word	0x0800cc7d
 800cc5c:	0800cc85 	.word	0x0800cc85
 800cc60:	0800cc8d 	.word	0x0800cc8d
 800cc64:	2300      	movs	r3, #0
 800cc66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc6a:	e086      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800cc6c:	2304      	movs	r3, #4
 800cc6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc72:	e082      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800cc74:	2308      	movs	r3, #8
 800cc76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc7a:	e07e      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800cc7c:	2310      	movs	r3, #16
 800cc7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc82:	e07a      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800cc84:	2320      	movs	r3, #32
 800cc86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc8a:	e076      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800cc8c:	2340      	movs	r3, #64	; 0x40
 800cc8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc92:	e072      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800cc94:	2380      	movs	r3, #128	; 0x80
 800cc96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc9a:	e06e      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	4a76      	ldr	r2, [pc, #472]	; (800ce7c <UART_SetConfig+0x6a4>)
 800cca2:	4293      	cmp	r3, r2
 800cca4:	d130      	bne.n	800cd08 <UART_SetConfig+0x530>
 800cca6:	4b73      	ldr	r3, [pc, #460]	; (800ce74 <UART_SetConfig+0x69c>)
 800cca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccaa:	f003 0307 	and.w	r3, r3, #7
 800ccae:	2b05      	cmp	r3, #5
 800ccb0:	d826      	bhi.n	800cd00 <UART_SetConfig+0x528>
 800ccb2:	a201      	add	r2, pc, #4	; (adr r2, 800ccb8 <UART_SetConfig+0x4e0>)
 800ccb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccb8:	0800ccd1 	.word	0x0800ccd1
 800ccbc:	0800ccd9 	.word	0x0800ccd9
 800ccc0:	0800cce1 	.word	0x0800cce1
 800ccc4:	0800cce9 	.word	0x0800cce9
 800ccc8:	0800ccf1 	.word	0x0800ccf1
 800cccc:	0800ccf9 	.word	0x0800ccf9
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccd6:	e050      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800ccd8:	2304      	movs	r3, #4
 800ccda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccde:	e04c      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800cce0:	2308      	movs	r3, #8
 800cce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cce6:	e048      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800cce8:	2310      	movs	r3, #16
 800ccea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccee:	e044      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800ccf0:	2320      	movs	r3, #32
 800ccf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccf6:	e040      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800ccf8:	2340      	movs	r3, #64	; 0x40
 800ccfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccfe:	e03c      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800cd00:	2380      	movs	r3, #128	; 0x80
 800cd02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd06:	e038      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	4a5c      	ldr	r2, [pc, #368]	; (800ce80 <UART_SetConfig+0x6a8>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d130      	bne.n	800cd74 <UART_SetConfig+0x59c>
 800cd12:	4b58      	ldr	r3, [pc, #352]	; (800ce74 <UART_SetConfig+0x69c>)
 800cd14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd16:	f003 0307 	and.w	r3, r3, #7
 800cd1a:	2b05      	cmp	r3, #5
 800cd1c:	d826      	bhi.n	800cd6c <UART_SetConfig+0x594>
 800cd1e:	a201      	add	r2, pc, #4	; (adr r2, 800cd24 <UART_SetConfig+0x54c>)
 800cd20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd24:	0800cd3d 	.word	0x0800cd3d
 800cd28:	0800cd45 	.word	0x0800cd45
 800cd2c:	0800cd4d 	.word	0x0800cd4d
 800cd30:	0800cd55 	.word	0x0800cd55
 800cd34:	0800cd5d 	.word	0x0800cd5d
 800cd38:	0800cd65 	.word	0x0800cd65
 800cd3c:	2302      	movs	r3, #2
 800cd3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd42:	e01a      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800cd44:	2304      	movs	r3, #4
 800cd46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd4a:	e016      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800cd4c:	2308      	movs	r3, #8
 800cd4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd52:	e012      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800cd54:	2310      	movs	r3, #16
 800cd56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd5a:	e00e      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800cd5c:	2320      	movs	r3, #32
 800cd5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd62:	e00a      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800cd64:	2340      	movs	r3, #64	; 0x40
 800cd66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd6a:	e006      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800cd6c:	2380      	movs	r3, #128	; 0x80
 800cd6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd72:	e002      	b.n	800cd7a <UART_SetConfig+0x5a2>
 800cd74:	2380      	movs	r3, #128	; 0x80
 800cd76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	4a40      	ldr	r2, [pc, #256]	; (800ce80 <UART_SetConfig+0x6a8>)
 800cd80:	4293      	cmp	r3, r2
 800cd82:	f040 80ef 	bne.w	800cf64 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cd86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cd8a:	2b20      	cmp	r3, #32
 800cd8c:	dc46      	bgt.n	800ce1c <UART_SetConfig+0x644>
 800cd8e:	2b02      	cmp	r3, #2
 800cd90:	f2c0 8081 	blt.w	800ce96 <UART_SetConfig+0x6be>
 800cd94:	3b02      	subs	r3, #2
 800cd96:	2b1e      	cmp	r3, #30
 800cd98:	d87d      	bhi.n	800ce96 <UART_SetConfig+0x6be>
 800cd9a:	a201      	add	r2, pc, #4	; (adr r2, 800cda0 <UART_SetConfig+0x5c8>)
 800cd9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cda0:	0800ce23 	.word	0x0800ce23
 800cda4:	0800ce97 	.word	0x0800ce97
 800cda8:	0800ce2b 	.word	0x0800ce2b
 800cdac:	0800ce97 	.word	0x0800ce97
 800cdb0:	0800ce97 	.word	0x0800ce97
 800cdb4:	0800ce97 	.word	0x0800ce97
 800cdb8:	0800ce3b 	.word	0x0800ce3b
 800cdbc:	0800ce97 	.word	0x0800ce97
 800cdc0:	0800ce97 	.word	0x0800ce97
 800cdc4:	0800ce97 	.word	0x0800ce97
 800cdc8:	0800ce97 	.word	0x0800ce97
 800cdcc:	0800ce97 	.word	0x0800ce97
 800cdd0:	0800ce97 	.word	0x0800ce97
 800cdd4:	0800ce97 	.word	0x0800ce97
 800cdd8:	0800ce4b 	.word	0x0800ce4b
 800cddc:	0800ce97 	.word	0x0800ce97
 800cde0:	0800ce97 	.word	0x0800ce97
 800cde4:	0800ce97 	.word	0x0800ce97
 800cde8:	0800ce97 	.word	0x0800ce97
 800cdec:	0800ce97 	.word	0x0800ce97
 800cdf0:	0800ce97 	.word	0x0800ce97
 800cdf4:	0800ce97 	.word	0x0800ce97
 800cdf8:	0800ce97 	.word	0x0800ce97
 800cdfc:	0800ce97 	.word	0x0800ce97
 800ce00:	0800ce97 	.word	0x0800ce97
 800ce04:	0800ce97 	.word	0x0800ce97
 800ce08:	0800ce97 	.word	0x0800ce97
 800ce0c:	0800ce97 	.word	0x0800ce97
 800ce10:	0800ce97 	.word	0x0800ce97
 800ce14:	0800ce97 	.word	0x0800ce97
 800ce18:	0800ce89 	.word	0x0800ce89
 800ce1c:	2b40      	cmp	r3, #64	; 0x40
 800ce1e:	d036      	beq.n	800ce8e <UART_SetConfig+0x6b6>
 800ce20:	e039      	b.n	800ce96 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ce22:	f7fd f903 	bl	800a02c <HAL_RCCEx_GetD3PCLK1Freq>
 800ce26:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ce28:	e03b      	b.n	800cea2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce2a:	f107 0314 	add.w	r3, r7, #20
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7fd f912 	bl	800a058 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ce34:	69bb      	ldr	r3, [r7, #24]
 800ce36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce38:	e033      	b.n	800cea2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce3a:	f107 0308 	add.w	r3, r7, #8
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f7fd fa5e 	bl	800a300 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce48:	e02b      	b.n	800cea2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ce4a:	4b0a      	ldr	r3, [pc, #40]	; (800ce74 <UART_SetConfig+0x69c>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	f003 0320 	and.w	r3, r3, #32
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d009      	beq.n	800ce6a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ce56:	4b07      	ldr	r3, [pc, #28]	; (800ce74 <UART_SetConfig+0x69c>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	08db      	lsrs	r3, r3, #3
 800ce5c:	f003 0303 	and.w	r3, r3, #3
 800ce60:	4a08      	ldr	r2, [pc, #32]	; (800ce84 <UART_SetConfig+0x6ac>)
 800ce62:	fa22 f303 	lsr.w	r3, r2, r3
 800ce66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ce68:	e01b      	b.n	800cea2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800ce6a:	4b06      	ldr	r3, [pc, #24]	; (800ce84 <UART_SetConfig+0x6ac>)
 800ce6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce6e:	e018      	b.n	800cea2 <UART_SetConfig+0x6ca>
 800ce70:	40011400 	.word	0x40011400
 800ce74:	58024400 	.word	0x58024400
 800ce78:	40007800 	.word	0x40007800
 800ce7c:	40007c00 	.word	0x40007c00
 800ce80:	58000c00 	.word	0x58000c00
 800ce84:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ce88:	4bc4      	ldr	r3, [pc, #784]	; (800d19c <UART_SetConfig+0x9c4>)
 800ce8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce8c:	e009      	b.n	800cea2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ce8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ce92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce94:	e005      	b.n	800cea2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800ce96:	2300      	movs	r3, #0
 800ce98:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cea0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	f000 81da 	beq.w	800d25e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceae:	4abc      	ldr	r2, [pc, #752]	; (800d1a0 <UART_SetConfig+0x9c8>)
 800ceb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ceb4:	461a      	mov	r2, r3
 800ceb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800cebc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	685a      	ldr	r2, [r3, #4]
 800cec2:	4613      	mov	r3, r2
 800cec4:	005b      	lsls	r3, r3, #1
 800cec6:	4413      	add	r3, r2
 800cec8:	6a3a      	ldr	r2, [r7, #32]
 800ceca:	429a      	cmp	r2, r3
 800cecc:	d305      	bcc.n	800ceda <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	685b      	ldr	r3, [r3, #4]
 800ced2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ced4:	6a3a      	ldr	r2, [r7, #32]
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d903      	bls.n	800cee2 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800ceda:	2301      	movs	r3, #1
 800cedc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cee0:	e1bd      	b.n	800d25e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee4:	4618      	mov	r0, r3
 800cee6:	f04f 0100 	mov.w	r1, #0
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceee:	4aac      	ldr	r2, [pc, #688]	; (800d1a0 <UART_SetConfig+0x9c8>)
 800cef0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cef4:	b29a      	uxth	r2, r3
 800cef6:	f04f 0300 	mov.w	r3, #0
 800cefa:	f7f3 fa49 	bl	8000390 <__aeabi_uldivmod>
 800cefe:	4602      	mov	r2, r0
 800cf00:	460b      	mov	r3, r1
 800cf02:	4610      	mov	r0, r2
 800cf04:	4619      	mov	r1, r3
 800cf06:	f04f 0200 	mov.w	r2, #0
 800cf0a:	f04f 0300 	mov.w	r3, #0
 800cf0e:	020b      	lsls	r3, r1, #8
 800cf10:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cf14:	0202      	lsls	r2, r0, #8
 800cf16:	6879      	ldr	r1, [r7, #4]
 800cf18:	6849      	ldr	r1, [r1, #4]
 800cf1a:	0849      	lsrs	r1, r1, #1
 800cf1c:	4608      	mov	r0, r1
 800cf1e:	f04f 0100 	mov.w	r1, #0
 800cf22:	1814      	adds	r4, r2, r0
 800cf24:	eb43 0501 	adc.w	r5, r3, r1
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	461a      	mov	r2, r3
 800cf2e:	f04f 0300 	mov.w	r3, #0
 800cf32:	4620      	mov	r0, r4
 800cf34:	4629      	mov	r1, r5
 800cf36:	f7f3 fa2b 	bl	8000390 <__aeabi_uldivmod>
 800cf3a:	4602      	mov	r2, r0
 800cf3c:	460b      	mov	r3, r1
 800cf3e:	4613      	mov	r3, r2
 800cf40:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cf42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cf48:	d308      	bcc.n	800cf5c <UART_SetConfig+0x784>
 800cf4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf50:	d204      	bcs.n	800cf5c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf58:	60da      	str	r2, [r3, #12]
 800cf5a:	e180      	b.n	800d25e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cf62:	e17c      	b.n	800d25e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	69db      	ldr	r3, [r3, #28]
 800cf68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf6c:	f040 80be 	bne.w	800d0ec <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800cf70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cf74:	2b20      	cmp	r3, #32
 800cf76:	dc49      	bgt.n	800d00c <UART_SetConfig+0x834>
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	db7c      	blt.n	800d076 <UART_SetConfig+0x89e>
 800cf7c:	2b20      	cmp	r3, #32
 800cf7e:	d87a      	bhi.n	800d076 <UART_SetConfig+0x89e>
 800cf80:	a201      	add	r2, pc, #4	; (adr r2, 800cf88 <UART_SetConfig+0x7b0>)
 800cf82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf86:	bf00      	nop
 800cf88:	0800d013 	.word	0x0800d013
 800cf8c:	0800d01b 	.word	0x0800d01b
 800cf90:	0800d077 	.word	0x0800d077
 800cf94:	0800d077 	.word	0x0800d077
 800cf98:	0800d023 	.word	0x0800d023
 800cf9c:	0800d077 	.word	0x0800d077
 800cfa0:	0800d077 	.word	0x0800d077
 800cfa4:	0800d077 	.word	0x0800d077
 800cfa8:	0800d033 	.word	0x0800d033
 800cfac:	0800d077 	.word	0x0800d077
 800cfb0:	0800d077 	.word	0x0800d077
 800cfb4:	0800d077 	.word	0x0800d077
 800cfb8:	0800d077 	.word	0x0800d077
 800cfbc:	0800d077 	.word	0x0800d077
 800cfc0:	0800d077 	.word	0x0800d077
 800cfc4:	0800d077 	.word	0x0800d077
 800cfc8:	0800d043 	.word	0x0800d043
 800cfcc:	0800d077 	.word	0x0800d077
 800cfd0:	0800d077 	.word	0x0800d077
 800cfd4:	0800d077 	.word	0x0800d077
 800cfd8:	0800d077 	.word	0x0800d077
 800cfdc:	0800d077 	.word	0x0800d077
 800cfe0:	0800d077 	.word	0x0800d077
 800cfe4:	0800d077 	.word	0x0800d077
 800cfe8:	0800d077 	.word	0x0800d077
 800cfec:	0800d077 	.word	0x0800d077
 800cff0:	0800d077 	.word	0x0800d077
 800cff4:	0800d077 	.word	0x0800d077
 800cff8:	0800d077 	.word	0x0800d077
 800cffc:	0800d077 	.word	0x0800d077
 800d000:	0800d077 	.word	0x0800d077
 800d004:	0800d077 	.word	0x0800d077
 800d008:	0800d069 	.word	0x0800d069
 800d00c:	2b40      	cmp	r3, #64	; 0x40
 800d00e:	d02e      	beq.n	800d06e <UART_SetConfig+0x896>
 800d010:	e031      	b.n	800d076 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d012:	f7fc f89f 	bl	8009154 <HAL_RCC_GetPCLK1Freq>
 800d016:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d018:	e033      	b.n	800d082 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d01a:	f7fc f8b1 	bl	8009180 <HAL_RCC_GetPCLK2Freq>
 800d01e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d020:	e02f      	b.n	800d082 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d022:	f107 0314 	add.w	r3, r7, #20
 800d026:	4618      	mov	r0, r3
 800d028:	f7fd f816 	bl	800a058 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d02c:	69bb      	ldr	r3, [r7, #24]
 800d02e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d030:	e027      	b.n	800d082 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d032:	f107 0308 	add.w	r3, r7, #8
 800d036:	4618      	mov	r0, r3
 800d038:	f7fd f962 	bl	800a300 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d040:	e01f      	b.n	800d082 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d042:	4b58      	ldr	r3, [pc, #352]	; (800d1a4 <UART_SetConfig+0x9cc>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	f003 0320 	and.w	r3, r3, #32
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d009      	beq.n	800d062 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d04e:	4b55      	ldr	r3, [pc, #340]	; (800d1a4 <UART_SetConfig+0x9cc>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	08db      	lsrs	r3, r3, #3
 800d054:	f003 0303 	and.w	r3, r3, #3
 800d058:	4a53      	ldr	r2, [pc, #332]	; (800d1a8 <UART_SetConfig+0x9d0>)
 800d05a:	fa22 f303 	lsr.w	r3, r2, r3
 800d05e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d060:	e00f      	b.n	800d082 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800d062:	4b51      	ldr	r3, [pc, #324]	; (800d1a8 <UART_SetConfig+0x9d0>)
 800d064:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d066:	e00c      	b.n	800d082 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d068:	4b4c      	ldr	r3, [pc, #304]	; (800d19c <UART_SetConfig+0x9c4>)
 800d06a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d06c:	e009      	b.n	800d082 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d06e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d072:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d074:	e005      	b.n	800d082 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800d076:	2300      	movs	r3, #0
 800d078:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d07a:	2301      	movs	r3, #1
 800d07c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d080:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d084:	2b00      	cmp	r3, #0
 800d086:	f000 80ea 	beq.w	800d25e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d08e:	4a44      	ldr	r2, [pc, #272]	; (800d1a0 <UART_SetConfig+0x9c8>)
 800d090:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d094:	461a      	mov	r2, r3
 800d096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d098:	fbb3 f3f2 	udiv	r3, r3, r2
 800d09c:	005a      	lsls	r2, r3, #1
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	685b      	ldr	r3, [r3, #4]
 800d0a2:	085b      	lsrs	r3, r3, #1
 800d0a4:	441a      	add	r2, r3
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	685b      	ldr	r3, [r3, #4]
 800d0aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0ae:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b2:	2b0f      	cmp	r3, #15
 800d0b4:	d916      	bls.n	800d0e4 <UART_SetConfig+0x90c>
 800d0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0bc:	d212      	bcs.n	800d0e4 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0c0:	b29b      	uxth	r3, r3
 800d0c2:	f023 030f 	bic.w	r3, r3, #15
 800d0c6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ca:	085b      	lsrs	r3, r3, #1
 800d0cc:	b29b      	uxth	r3, r3
 800d0ce:	f003 0307 	and.w	r3, r3, #7
 800d0d2:	b29a      	uxth	r2, r3
 800d0d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d0d6:	4313      	orrs	r3, r2
 800d0d8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d0e0:	60da      	str	r2, [r3, #12]
 800d0e2:	e0bc      	b.n	800d25e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d0ea:	e0b8      	b.n	800d25e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d0ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d0f0:	2b20      	cmp	r3, #32
 800d0f2:	dc4b      	bgt.n	800d18c <UART_SetConfig+0x9b4>
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	f2c0 8087 	blt.w	800d208 <UART_SetConfig+0xa30>
 800d0fa:	2b20      	cmp	r3, #32
 800d0fc:	f200 8084 	bhi.w	800d208 <UART_SetConfig+0xa30>
 800d100:	a201      	add	r2, pc, #4	; (adr r2, 800d108 <UART_SetConfig+0x930>)
 800d102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d106:	bf00      	nop
 800d108:	0800d193 	.word	0x0800d193
 800d10c:	0800d1ad 	.word	0x0800d1ad
 800d110:	0800d209 	.word	0x0800d209
 800d114:	0800d209 	.word	0x0800d209
 800d118:	0800d1b5 	.word	0x0800d1b5
 800d11c:	0800d209 	.word	0x0800d209
 800d120:	0800d209 	.word	0x0800d209
 800d124:	0800d209 	.word	0x0800d209
 800d128:	0800d1c5 	.word	0x0800d1c5
 800d12c:	0800d209 	.word	0x0800d209
 800d130:	0800d209 	.word	0x0800d209
 800d134:	0800d209 	.word	0x0800d209
 800d138:	0800d209 	.word	0x0800d209
 800d13c:	0800d209 	.word	0x0800d209
 800d140:	0800d209 	.word	0x0800d209
 800d144:	0800d209 	.word	0x0800d209
 800d148:	0800d1d5 	.word	0x0800d1d5
 800d14c:	0800d209 	.word	0x0800d209
 800d150:	0800d209 	.word	0x0800d209
 800d154:	0800d209 	.word	0x0800d209
 800d158:	0800d209 	.word	0x0800d209
 800d15c:	0800d209 	.word	0x0800d209
 800d160:	0800d209 	.word	0x0800d209
 800d164:	0800d209 	.word	0x0800d209
 800d168:	0800d209 	.word	0x0800d209
 800d16c:	0800d209 	.word	0x0800d209
 800d170:	0800d209 	.word	0x0800d209
 800d174:	0800d209 	.word	0x0800d209
 800d178:	0800d209 	.word	0x0800d209
 800d17c:	0800d209 	.word	0x0800d209
 800d180:	0800d209 	.word	0x0800d209
 800d184:	0800d209 	.word	0x0800d209
 800d188:	0800d1fb 	.word	0x0800d1fb
 800d18c:	2b40      	cmp	r3, #64	; 0x40
 800d18e:	d037      	beq.n	800d200 <UART_SetConfig+0xa28>
 800d190:	e03a      	b.n	800d208 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d192:	f7fb ffdf 	bl	8009154 <HAL_RCC_GetPCLK1Freq>
 800d196:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d198:	e03c      	b.n	800d214 <UART_SetConfig+0xa3c>
 800d19a:	bf00      	nop
 800d19c:	003d0900 	.word	0x003d0900
 800d1a0:	08011c94 	.word	0x08011c94
 800d1a4:	58024400 	.word	0x58024400
 800d1a8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d1ac:	f7fb ffe8 	bl	8009180 <HAL_RCC_GetPCLK2Freq>
 800d1b0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d1b2:	e02f      	b.n	800d214 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1b4:	f107 0314 	add.w	r3, r7, #20
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f7fc ff4d 	bl	800a058 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d1be:	69bb      	ldr	r3, [r7, #24]
 800d1c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d1c2:	e027      	b.n	800d214 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d1c4:	f107 0308 	add.w	r3, r7, #8
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f7fd f899 	bl	800a300 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d1d2:	e01f      	b.n	800d214 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d1d4:	4b2c      	ldr	r3, [pc, #176]	; (800d288 <UART_SetConfig+0xab0>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	f003 0320 	and.w	r3, r3, #32
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d009      	beq.n	800d1f4 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d1e0:	4b29      	ldr	r3, [pc, #164]	; (800d288 <UART_SetConfig+0xab0>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	08db      	lsrs	r3, r3, #3
 800d1e6:	f003 0303 	and.w	r3, r3, #3
 800d1ea:	4a28      	ldr	r2, [pc, #160]	; (800d28c <UART_SetConfig+0xab4>)
 800d1ec:	fa22 f303 	lsr.w	r3, r2, r3
 800d1f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d1f2:	e00f      	b.n	800d214 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800d1f4:	4b25      	ldr	r3, [pc, #148]	; (800d28c <UART_SetConfig+0xab4>)
 800d1f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d1f8:	e00c      	b.n	800d214 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d1fa:	4b25      	ldr	r3, [pc, #148]	; (800d290 <UART_SetConfig+0xab8>)
 800d1fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d1fe:	e009      	b.n	800d214 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d200:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d204:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d206:	e005      	b.n	800d214 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800d208:	2300      	movs	r3, #0
 800d20a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d20c:	2301      	movs	r3, #1
 800d20e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d212:	bf00      	nop
    }

    if (pclk != 0U)
 800d214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d216:	2b00      	cmp	r3, #0
 800d218:	d021      	beq.n	800d25e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d21e:	4a1d      	ldr	r2, [pc, #116]	; (800d294 <UART_SetConfig+0xabc>)
 800d220:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d224:	461a      	mov	r2, r3
 800d226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d228:	fbb3 f2f2 	udiv	r2, r3, r2
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	685b      	ldr	r3, [r3, #4]
 800d230:	085b      	lsrs	r3, r3, #1
 800d232:	441a      	add	r2, r3
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	685b      	ldr	r3, [r3, #4]
 800d238:	fbb2 f3f3 	udiv	r3, r2, r3
 800d23c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d240:	2b0f      	cmp	r3, #15
 800d242:	d909      	bls.n	800d258 <UART_SetConfig+0xa80>
 800d244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d24a:	d205      	bcs.n	800d258 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d24e:	b29a      	uxth	r2, r3
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	60da      	str	r2, [r3, #12]
 800d256:	e002      	b.n	800d25e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d258:	2301      	movs	r3, #1
 800d25a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2201      	movs	r2, #1
 800d262:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2201      	movs	r2, #1
 800d26a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2200      	movs	r2, #0
 800d272:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2200      	movs	r2, #0
 800d278:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d27a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800d27e:	4618      	mov	r0, r3
 800d280:	3738      	adds	r7, #56	; 0x38
 800d282:	46bd      	mov	sp, r7
 800d284:	bdb0      	pop	{r4, r5, r7, pc}
 800d286:	bf00      	nop
 800d288:	58024400 	.word	0x58024400
 800d28c:	03d09000 	.word	0x03d09000
 800d290:	003d0900 	.word	0x003d0900
 800d294:	08011c94 	.word	0x08011c94

0800d298 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d298:	b480      	push	{r7}
 800d29a:	b083      	sub	sp, #12
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2a4:	f003 0301 	and.w	r3, r3, #1
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d00a      	beq.n	800d2c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	685b      	ldr	r3, [r3, #4]
 800d2b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	430a      	orrs	r2, r1
 800d2c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2c6:	f003 0302 	and.w	r3, r3, #2
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d00a      	beq.n	800d2e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	685b      	ldr	r3, [r3, #4]
 800d2d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	430a      	orrs	r2, r1
 800d2e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2e8:	f003 0304 	and.w	r3, r3, #4
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d00a      	beq.n	800d306 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	685b      	ldr	r3, [r3, #4]
 800d2f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	430a      	orrs	r2, r1
 800d304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d30a:	f003 0308 	and.w	r3, r3, #8
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d00a      	beq.n	800d328 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	685b      	ldr	r3, [r3, #4]
 800d318:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	430a      	orrs	r2, r1
 800d326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d32c:	f003 0310 	and.w	r3, r3, #16
 800d330:	2b00      	cmp	r3, #0
 800d332:	d00a      	beq.n	800d34a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	689b      	ldr	r3, [r3, #8]
 800d33a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	430a      	orrs	r2, r1
 800d348:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d34e:	f003 0320 	and.w	r3, r3, #32
 800d352:	2b00      	cmp	r3, #0
 800d354:	d00a      	beq.n	800d36c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	689b      	ldr	r3, [r3, #8]
 800d35c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	430a      	orrs	r2, r1
 800d36a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d374:	2b00      	cmp	r3, #0
 800d376:	d01a      	beq.n	800d3ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	685b      	ldr	r3, [r3, #4]
 800d37e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	430a      	orrs	r2, r1
 800d38c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d392:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d396:	d10a      	bne.n	800d3ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	685b      	ldr	r3, [r3, #4]
 800d39e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	430a      	orrs	r2, r1
 800d3ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d00a      	beq.n	800d3d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	685b      	ldr	r3, [r3, #4]
 800d3c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	430a      	orrs	r2, r1
 800d3ce:	605a      	str	r2, [r3, #4]
  }
}
 800d3d0:	bf00      	nop
 800d3d2:	370c      	adds	r7, #12
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3da:	4770      	bx	lr

0800d3dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b086      	sub	sp, #24
 800d3e0:	af02      	add	r7, sp, #8
 800d3e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d3ec:	f7f7 fb9c 	bl	8004b28 <HAL_GetTick>
 800d3f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	f003 0308 	and.w	r3, r3, #8
 800d3fc:	2b08      	cmp	r3, #8
 800d3fe:	d10e      	bne.n	800d41e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d400:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d404:	9300      	str	r3, [sp, #0]
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	2200      	movs	r2, #0
 800d40a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f000 f82f 	bl	800d472 <UART_WaitOnFlagUntilTimeout>
 800d414:	4603      	mov	r3, r0
 800d416:	2b00      	cmp	r3, #0
 800d418:	d001      	beq.n	800d41e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d41a:	2303      	movs	r3, #3
 800d41c:	e025      	b.n	800d46a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	f003 0304 	and.w	r3, r3, #4
 800d428:	2b04      	cmp	r3, #4
 800d42a:	d10e      	bne.n	800d44a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d42c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d430:	9300      	str	r3, [sp, #0]
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	2200      	movs	r2, #0
 800d436:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	f000 f819 	bl	800d472 <UART_WaitOnFlagUntilTimeout>
 800d440:	4603      	mov	r3, r0
 800d442:	2b00      	cmp	r3, #0
 800d444:	d001      	beq.n	800d44a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d446:	2303      	movs	r3, #3
 800d448:	e00f      	b.n	800d46a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2220      	movs	r2, #32
 800d44e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2220      	movs	r2, #32
 800d456:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2200      	movs	r2, #0
 800d45e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2200      	movs	r2, #0
 800d464:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d468:	2300      	movs	r3, #0
}
 800d46a:	4618      	mov	r0, r3
 800d46c:	3710      	adds	r7, #16
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}

0800d472 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d472:	b580      	push	{r7, lr}
 800d474:	b09c      	sub	sp, #112	; 0x70
 800d476:	af00      	add	r7, sp, #0
 800d478:	60f8      	str	r0, [r7, #12]
 800d47a:	60b9      	str	r1, [r7, #8]
 800d47c:	603b      	str	r3, [r7, #0]
 800d47e:	4613      	mov	r3, r2
 800d480:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d482:	e0a9      	b.n	800d5d8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d484:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d48a:	f000 80a5 	beq.w	800d5d8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d48e:	f7f7 fb4b 	bl	8004b28 <HAL_GetTick>
 800d492:	4602      	mov	r2, r0
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	1ad3      	subs	r3, r2, r3
 800d498:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d49a:	429a      	cmp	r2, r3
 800d49c:	d302      	bcc.n	800d4a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800d49e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d140      	bne.n	800d526 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4ac:	e853 3f00 	ldrex	r3, [r3]
 800d4b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d4b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d4b8:	667b      	str	r3, [r7, #100]	; 0x64
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	461a      	mov	r2, r3
 800d4c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d4c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d4c4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d4c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d4ca:	e841 2300 	strex	r3, r2, [r1]
 800d4ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d4d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d1e6      	bne.n	800d4a4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	3308      	adds	r3, #8
 800d4dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4e0:	e853 3f00 	ldrex	r3, [r3]
 800d4e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4e8:	f023 0301 	bic.w	r3, r3, #1
 800d4ec:	663b      	str	r3, [r7, #96]	; 0x60
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	3308      	adds	r3, #8
 800d4f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d4f6:	64ba      	str	r2, [r7, #72]	; 0x48
 800d4f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d4fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d4fe:	e841 2300 	strex	r3, r2, [r1]
 800d502:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d506:	2b00      	cmp	r3, #0
 800d508:	d1e5      	bne.n	800d4d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	2220      	movs	r2, #32
 800d50e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	2220      	movs	r2, #32
 800d516:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	2200      	movs	r2, #0
 800d51e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d522:	2303      	movs	r3, #3
 800d524:	e069      	b.n	800d5fa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	f003 0304 	and.w	r3, r3, #4
 800d530:	2b00      	cmp	r3, #0
 800d532:	d051      	beq.n	800d5d8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	69db      	ldr	r3, [r3, #28]
 800d53a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d53e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d542:	d149      	bne.n	800d5d8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d54c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d556:	e853 3f00 	ldrex	r3, [r3]
 800d55a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d55e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d562:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	461a      	mov	r2, r3
 800d56a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d56c:	637b      	str	r3, [r7, #52]	; 0x34
 800d56e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d570:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d572:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d574:	e841 2300 	strex	r3, r2, [r1]
 800d578:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d1e6      	bne.n	800d54e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	3308      	adds	r3, #8
 800d586:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d588:	697b      	ldr	r3, [r7, #20]
 800d58a:	e853 3f00 	ldrex	r3, [r3]
 800d58e:	613b      	str	r3, [r7, #16]
   return(result);
 800d590:	693b      	ldr	r3, [r7, #16]
 800d592:	f023 0301 	bic.w	r3, r3, #1
 800d596:	66bb      	str	r3, [r7, #104]	; 0x68
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	3308      	adds	r3, #8
 800d59e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d5a0:	623a      	str	r2, [r7, #32]
 800d5a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5a4:	69f9      	ldr	r1, [r7, #28]
 800d5a6:	6a3a      	ldr	r2, [r7, #32]
 800d5a8:	e841 2300 	strex	r3, r2, [r1]
 800d5ac:	61bb      	str	r3, [r7, #24]
   return(result);
 800d5ae:	69bb      	ldr	r3, [r7, #24]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d1e5      	bne.n	800d580 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	2220      	movs	r2, #32
 800d5b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	2220      	movs	r2, #32
 800d5c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	2220      	movs	r2, #32
 800d5c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d5d4:	2303      	movs	r3, #3
 800d5d6:	e010      	b.n	800d5fa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	69da      	ldr	r2, [r3, #28]
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	4013      	ands	r3, r2
 800d5e2:	68ba      	ldr	r2, [r7, #8]
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	bf0c      	ite	eq
 800d5e8:	2301      	moveq	r3, #1
 800d5ea:	2300      	movne	r3, #0
 800d5ec:	b2db      	uxtb	r3, r3
 800d5ee:	461a      	mov	r2, r3
 800d5f0:	79fb      	ldrb	r3, [r7, #7]
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	f43f af46 	beq.w	800d484 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d5f8:	2300      	movs	r3, #0
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3770      	adds	r7, #112	; 0x70
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
	...

0800d604 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b096      	sub	sp, #88	; 0x58
 800d608:	af00      	add	r7, sp, #0
 800d60a:	60f8      	str	r0, [r7, #12]
 800d60c:	60b9      	str	r1, [r7, #8]
 800d60e:	4613      	mov	r3, r2
 800d610:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	68ba      	ldr	r2, [r7, #8]
 800d616:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	88fa      	ldrh	r2, [r7, #6]
 800d61c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	2200      	movs	r2, #0
 800d624:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	2222      	movs	r2, #34	; 0x22
 800d62c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d634:	2b00      	cmp	r3, #0
 800d636:	d02c      	beq.n	800d692 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d63c:	4a42      	ldr	r2, [pc, #264]	; (800d748 <UART_Start_Receive_DMA+0x144>)
 800d63e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d644:	4a41      	ldr	r2, [pc, #260]	; (800d74c <UART_Start_Receive_DMA+0x148>)
 800d646:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d64c:	4a40      	ldr	r2, [pc, #256]	; (800d750 <UART_Start_Receive_DMA+0x14c>)
 800d64e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d654:	2200      	movs	r2, #0
 800d656:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	3324      	adds	r3, #36	; 0x24
 800d662:	4619      	mov	r1, r3
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d668:	461a      	mov	r2, r3
 800d66a:	88fb      	ldrh	r3, [r7, #6]
 800d66c:	f7f8 f8ea 	bl	8005844 <HAL_DMA_Start_IT>
 800d670:	4603      	mov	r3, r0
 800d672:	2b00      	cmp	r3, #0
 800d674:	d00d      	beq.n	800d692 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	2210      	movs	r2, #16
 800d67a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	2200      	movs	r2, #0
 800d682:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	2220      	movs	r2, #32
 800d68a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800d68e:	2301      	movs	r3, #1
 800d690:	e055      	b.n	800d73e <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	2200      	movs	r2, #0
 800d696:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	691b      	ldr	r3, [r3, #16]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d018      	beq.n	800d6d4 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6aa:	e853 3f00 	ldrex	r3, [r3]
 800d6ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d6b6:	657b      	str	r3, [r7, #84]	; 0x54
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	461a      	mov	r2, r3
 800d6be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800d6c2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d6c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d6c8:	e841 2300 	strex	r3, r2, [r1]
 800d6cc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d6ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d1e6      	bne.n	800d6a2 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	3308      	adds	r3, #8
 800d6da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6de:	e853 3f00 	ldrex	r3, [r3]
 800d6e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e6:	f043 0301 	orr.w	r3, r3, #1
 800d6ea:	653b      	str	r3, [r7, #80]	; 0x50
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	3308      	adds	r3, #8
 800d6f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d6f4:	637a      	str	r2, [r7, #52]	; 0x34
 800d6f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d6fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d6fc:	e841 2300 	strex	r3, r2, [r1]
 800d700:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d704:	2b00      	cmp	r3, #0
 800d706:	d1e5      	bne.n	800d6d4 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	3308      	adds	r3, #8
 800d70e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	e853 3f00 	ldrex	r3, [r3]
 800d716:	613b      	str	r3, [r7, #16]
   return(result);
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d71e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	3308      	adds	r3, #8
 800d726:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d728:	623a      	str	r2, [r7, #32]
 800d72a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d72c:	69f9      	ldr	r1, [r7, #28]
 800d72e:	6a3a      	ldr	r2, [r7, #32]
 800d730:	e841 2300 	strex	r3, r2, [r1]
 800d734:	61bb      	str	r3, [r7, #24]
   return(result);
 800d736:	69bb      	ldr	r3, [r7, #24]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d1e5      	bne.n	800d708 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800d73c:	2300      	movs	r3, #0
}
 800d73e:	4618      	mov	r0, r3
 800d740:	3758      	adds	r7, #88	; 0x58
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}
 800d746:	bf00      	nop
 800d748:	0800d957 	.word	0x0800d957
 800d74c:	0800da79 	.word	0x0800da79
 800d750:	0800dab1 	.word	0x0800dab1

0800d754 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d754:	b480      	push	{r7}
 800d756:	b08f      	sub	sp, #60	; 0x3c
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d762:	6a3b      	ldr	r3, [r7, #32]
 800d764:	e853 3f00 	ldrex	r3, [r3]
 800d768:	61fb      	str	r3, [r7, #28]
   return(result);
 800d76a:	69fb      	ldr	r3, [r7, #28]
 800d76c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d770:	637b      	str	r3, [r7, #52]	; 0x34
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	461a      	mov	r2, r3
 800d778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d77a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d77c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d77e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d782:	e841 2300 	strex	r3, r2, [r1]
 800d786:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d1e6      	bne.n	800d75c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	3308      	adds	r3, #8
 800d794:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	e853 3f00 	ldrex	r3, [r3]
 800d79c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d7a4:	633b      	str	r3, [r7, #48]	; 0x30
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	3308      	adds	r3, #8
 800d7ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7ae:	61ba      	str	r2, [r7, #24]
 800d7b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7b2:	6979      	ldr	r1, [r7, #20]
 800d7b4:	69ba      	ldr	r2, [r7, #24]
 800d7b6:	e841 2300 	strex	r3, r2, [r1]
 800d7ba:	613b      	str	r3, [r7, #16]
   return(result);
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d1e5      	bne.n	800d78e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2220      	movs	r2, #32
 800d7c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d7ca:	bf00      	nop
 800d7cc:	373c      	adds	r7, #60	; 0x3c
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d4:	4770      	bx	lr
	...

0800d7d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d7d8:	b480      	push	{r7}
 800d7da:	b095      	sub	sp, #84	; 0x54
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7e8:	e853 3f00 	ldrex	r3, [r3]
 800d7ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d7f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	461a      	mov	r2, r3
 800d7fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7fe:	643b      	str	r3, [r7, #64]	; 0x40
 800d800:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d802:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d804:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d806:	e841 2300 	strex	r3, r2, [r1]
 800d80a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d1e6      	bne.n	800d7e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	3308      	adds	r3, #8
 800d818:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d81a:	6a3b      	ldr	r3, [r7, #32]
 800d81c:	e853 3f00 	ldrex	r3, [r3]
 800d820:	61fb      	str	r3, [r7, #28]
   return(result);
 800d822:	69fa      	ldr	r2, [r7, #28]
 800d824:	4b1e      	ldr	r3, [pc, #120]	; (800d8a0 <UART_EndRxTransfer+0xc8>)
 800d826:	4013      	ands	r3, r2
 800d828:	64bb      	str	r3, [r7, #72]	; 0x48
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	3308      	adds	r3, #8
 800d830:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d832:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d834:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d836:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d83a:	e841 2300 	strex	r3, r2, [r1]
 800d83e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d842:	2b00      	cmp	r3, #0
 800d844:	d1e5      	bne.n	800d812 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d84a:	2b01      	cmp	r3, #1
 800d84c:	d118      	bne.n	800d880 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	e853 3f00 	ldrex	r3, [r3]
 800d85a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	f023 0310 	bic.w	r3, r3, #16
 800d862:	647b      	str	r3, [r7, #68]	; 0x44
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	461a      	mov	r2, r3
 800d86a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d86c:	61bb      	str	r3, [r7, #24]
 800d86e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d870:	6979      	ldr	r1, [r7, #20]
 800d872:	69ba      	ldr	r2, [r7, #24]
 800d874:	e841 2300 	strex	r3, r2, [r1]
 800d878:	613b      	str	r3, [r7, #16]
   return(result);
 800d87a:	693b      	ldr	r3, [r7, #16]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d1e6      	bne.n	800d84e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2220      	movs	r2, #32
 800d884:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2200      	movs	r2, #0
 800d88c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2200      	movs	r2, #0
 800d892:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d894:	bf00      	nop
 800d896:	3754      	adds	r7, #84	; 0x54
 800d898:	46bd      	mov	sp, r7
 800d89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89e:	4770      	bx	lr
 800d8a0:	effffffe 	.word	0xeffffffe

0800d8a4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b090      	sub	sp, #64	; 0x40
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8b0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	69db      	ldr	r3, [r3, #28]
 800d8b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d8ba:	d037      	beq.n	800d92c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d8bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8be:	2200      	movs	r2, #0
 800d8c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d8c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	3308      	adds	r3, #8
 800d8ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ce:	e853 3f00 	ldrex	r3, [r3]
 800d8d2:	623b      	str	r3, [r7, #32]
   return(result);
 800d8d4:	6a3b      	ldr	r3, [r7, #32]
 800d8d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d8da:	63bb      	str	r3, [r7, #56]	; 0x38
 800d8dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	3308      	adds	r3, #8
 800d8e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d8e4:	633a      	str	r2, [r7, #48]	; 0x30
 800d8e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d8ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8ec:	e841 2300 	strex	r3, r2, [r1]
 800d8f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d1e5      	bne.n	800d8c4 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d8f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	e853 3f00 	ldrex	r3, [r3]
 800d904:	60fb      	str	r3, [r7, #12]
   return(result);
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d90c:	637b      	str	r3, [r7, #52]	; 0x34
 800d90e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	461a      	mov	r2, r3
 800d914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d916:	61fb      	str	r3, [r7, #28]
 800d918:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d91a:	69b9      	ldr	r1, [r7, #24]
 800d91c:	69fa      	ldr	r2, [r7, #28]
 800d91e:	e841 2300 	strex	r3, r2, [r1]
 800d922:	617b      	str	r3, [r7, #20]
   return(result);
 800d924:	697b      	ldr	r3, [r7, #20]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d1e6      	bne.n	800d8f8 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d92a:	e002      	b.n	800d932 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d92c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d92e:	f7fe ff2b 	bl	800c788 <HAL_UART_TxCpltCallback>
}
 800d932:	bf00      	nop
 800d934:	3740      	adds	r7, #64	; 0x40
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}

0800d93a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d93a:	b580      	push	{r7, lr}
 800d93c:	b084      	sub	sp, #16
 800d93e:	af00      	add	r7, sp, #0
 800d940:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d946:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d948:	68f8      	ldr	r0, [r7, #12]
 800d94a:	f7fe ff27 	bl	800c79c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d94e:	bf00      	nop
 800d950:	3710      	adds	r7, #16
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}

0800d956 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d956:	b580      	push	{r7, lr}
 800d958:	b09c      	sub	sp, #112	; 0x70
 800d95a:	af00      	add	r7, sp, #0
 800d95c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d962:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	69db      	ldr	r3, [r3, #28]
 800d968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d96c:	d071      	beq.n	800da52 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d96e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d970:	2200      	movs	r2, #0
 800d972:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d97c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d97e:	e853 3f00 	ldrex	r3, [r3]
 800d982:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d986:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d98a:	66bb      	str	r3, [r7, #104]	; 0x68
 800d98c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	461a      	mov	r2, r3
 800d992:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d994:	65bb      	str	r3, [r7, #88]	; 0x58
 800d996:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d998:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d99a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d99c:	e841 2300 	strex	r3, r2, [r1]
 800d9a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d9a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d1e6      	bne.n	800d976 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	3308      	adds	r3, #8
 800d9ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9b2:	e853 3f00 	ldrex	r3, [r3]
 800d9b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d9b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9ba:	f023 0301 	bic.w	r3, r3, #1
 800d9be:	667b      	str	r3, [r7, #100]	; 0x64
 800d9c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	3308      	adds	r3, #8
 800d9c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d9c8:	647a      	str	r2, [r7, #68]	; 0x44
 800d9ca:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d9ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d9d0:	e841 2300 	strex	r3, r2, [r1]
 800d9d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d9d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d1e5      	bne.n	800d9a8 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d9dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	3308      	adds	r3, #8
 800d9e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e6:	e853 3f00 	ldrex	r3, [r3]
 800d9ea:	623b      	str	r3, [r7, #32]
   return(result);
 800d9ec:	6a3b      	ldr	r3, [r7, #32]
 800d9ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d9f2:	663b      	str	r3, [r7, #96]	; 0x60
 800d9f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	3308      	adds	r3, #8
 800d9fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d9fc:	633a      	str	r2, [r7, #48]	; 0x30
 800d9fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800da02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da04:	e841 2300 	strex	r3, r2, [r1]
 800da08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800da0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d1e5      	bne.n	800d9dc <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800da10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da12:	2220      	movs	r2, #32
 800da14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da1c:	2b01      	cmp	r3, #1
 800da1e:	d118      	bne.n	800da52 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	e853 3f00 	ldrex	r3, [r3]
 800da2c:	60fb      	str	r3, [r7, #12]
   return(result);
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	f023 0310 	bic.w	r3, r3, #16
 800da34:	65fb      	str	r3, [r7, #92]	; 0x5c
 800da36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	461a      	mov	r2, r3
 800da3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da3e:	61fb      	str	r3, [r7, #28]
 800da40:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da42:	69b9      	ldr	r1, [r7, #24]
 800da44:	69fa      	ldr	r2, [r7, #28]
 800da46:	e841 2300 	strex	r3, r2, [r1]
 800da4a:	617b      	str	r3, [r7, #20]
   return(result);
 800da4c:	697b      	ldr	r3, [r7, #20]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d1e6      	bne.n	800da20 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da56:	2b01      	cmp	r3, #1
 800da58:	d107      	bne.n	800da6a <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800da5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800da60:	4619      	mov	r1, r3
 800da62:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800da64:	f7f4 fa36 	bl	8001ed4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800da68:	e002      	b.n	800da70 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800da6a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800da6c:	f7f5 fa9e 	bl	8002fac <HAL_UART_RxCpltCallback>
}
 800da70:	bf00      	nop
 800da72:	3770      	adds	r7, #112	; 0x70
 800da74:	46bd      	mov	sp, r7
 800da76:	bd80      	pop	{r7, pc}

0800da78 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b084      	sub	sp, #16
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da84:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da8a:	2b01      	cmp	r3, #1
 800da8c:	d109      	bne.n	800daa2 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800da94:	085b      	lsrs	r3, r3, #1
 800da96:	b29b      	uxth	r3, r3
 800da98:	4619      	mov	r1, r3
 800da9a:	68f8      	ldr	r0, [r7, #12]
 800da9c:	f7f4 fa1a 	bl	8001ed4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800daa0:	e002      	b.n	800daa8 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800daa2:	68f8      	ldr	r0, [r7, #12]
 800daa4:	f7fe fe84 	bl	800c7b0 <HAL_UART_RxHalfCpltCallback>
}
 800daa8:	bf00      	nop
 800daaa:	3710      	adds	r7, #16
 800daac:	46bd      	mov	sp, r7
 800daae:	bd80      	pop	{r7, pc}

0800dab0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b086      	sub	sp, #24
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dabc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800dabe:	697b      	ldr	r3, [r7, #20]
 800dac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dac4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dacc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	689b      	ldr	r3, [r3, #8]
 800dad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dad8:	2b80      	cmp	r3, #128	; 0x80
 800dada:	d109      	bne.n	800daf0 <UART_DMAError+0x40>
 800dadc:	693b      	ldr	r3, [r7, #16]
 800dade:	2b21      	cmp	r3, #33	; 0x21
 800dae0:	d106      	bne.n	800daf0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	2200      	movs	r2, #0
 800dae6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800daea:	6978      	ldr	r0, [r7, #20]
 800daec:	f7ff fe32 	bl	800d754 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	689b      	ldr	r3, [r3, #8]
 800daf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dafa:	2b40      	cmp	r3, #64	; 0x40
 800dafc:	d109      	bne.n	800db12 <UART_DMAError+0x62>
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	2b22      	cmp	r3, #34	; 0x22
 800db02:	d106      	bne.n	800db12 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	2200      	movs	r2, #0
 800db08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800db0c:	6978      	ldr	r0, [r7, #20]
 800db0e:	f7ff fe63 	bl	800d7d8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db18:	f043 0210 	orr.w	r2, r3, #16
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800db22:	6978      	ldr	r0, [r7, #20]
 800db24:	f7fe fe4e 	bl	800c7c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db28:	bf00      	nop
 800db2a:	3718      	adds	r7, #24
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}

0800db30 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b084      	sub	sp, #16
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	2200      	movs	r2, #0
 800db42:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	2200      	movs	r2, #0
 800db4a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800db4e:	68f8      	ldr	r0, [r7, #12]
 800db50:	f7fe fe38 	bl	800c7c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db54:	bf00      	nop
 800db56:	3710      	adds	r7, #16
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}

0800db5c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b088      	sub	sp, #32
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	e853 3f00 	ldrex	r3, [r3]
 800db70:	60bb      	str	r3, [r7, #8]
   return(result);
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db78:	61fb      	str	r3, [r7, #28]
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	461a      	mov	r2, r3
 800db80:	69fb      	ldr	r3, [r7, #28]
 800db82:	61bb      	str	r3, [r7, #24]
 800db84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db86:	6979      	ldr	r1, [r7, #20]
 800db88:	69ba      	ldr	r2, [r7, #24]
 800db8a:	e841 2300 	strex	r3, r2, [r1]
 800db8e:	613b      	str	r3, [r7, #16]
   return(result);
 800db90:	693b      	ldr	r3, [r7, #16]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d1e6      	bne.n	800db64 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2220      	movs	r2, #32
 800db9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2200      	movs	r2, #0
 800dba2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	f7fe fdef 	bl	800c788 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dbaa:	bf00      	nop
 800dbac:	3720      	adds	r7, #32
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}

0800dbb2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dbb2:	b480      	push	{r7}
 800dbb4:	b083      	sub	sp, #12
 800dbb6:	af00      	add	r7, sp, #0
 800dbb8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dbba:	bf00      	nop
 800dbbc:	370c      	adds	r7, #12
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc4:	4770      	bx	lr

0800dbc6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dbc6:	b480      	push	{r7}
 800dbc8:	b083      	sub	sp, #12
 800dbca:	af00      	add	r7, sp, #0
 800dbcc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dbce:	bf00      	nop
 800dbd0:	370c      	adds	r7, #12
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd8:	4770      	bx	lr

0800dbda <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dbda:	b480      	push	{r7}
 800dbdc:	b083      	sub	sp, #12
 800dbde:	af00      	add	r7, sp, #0
 800dbe0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dbe2:	bf00      	nop
 800dbe4:	370c      	adds	r7, #12
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbec:	4770      	bx	lr

0800dbee <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800dbee:	b580      	push	{r7, lr}
 800dbf0:	b084      	sub	sp, #16
 800dbf2:	af00      	add	r7, sp, #0
 800dbf4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dbfc:	2b01      	cmp	r3, #1
 800dbfe:	d101      	bne.n	800dc04 <HAL_UARTEx_EnableFifoMode+0x16>
 800dc00:	2302      	movs	r3, #2
 800dc02:	e02b      	b.n	800dc5c <HAL_UARTEx_EnableFifoMode+0x6e>
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2201      	movs	r2, #1
 800dc08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2224      	movs	r2, #36	; 0x24
 800dc10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	681a      	ldr	r2, [r3, #0]
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	f022 0201 	bic.w	r2, r2, #1
 800dc2a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dc32:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800dc3a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	68fa      	ldr	r2, [r7, #12]
 800dc42:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	f000 f91f 	bl	800de88 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2220      	movs	r2, #32
 800dc4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2200      	movs	r2, #0
 800dc56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dc5a:	2300      	movs	r3, #0
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3710      	adds	r7, #16
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}

0800dc64 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dc64:	b480      	push	{r7}
 800dc66:	b085      	sub	sp, #20
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc72:	2b01      	cmp	r3, #1
 800dc74:	d101      	bne.n	800dc7a <HAL_UARTEx_DisableFifoMode+0x16>
 800dc76:	2302      	movs	r3, #2
 800dc78:	e027      	b.n	800dcca <HAL_UARTEx_DisableFifoMode+0x66>
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2201      	movs	r2, #1
 800dc7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2224      	movs	r2, #36	; 0x24
 800dc86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	681a      	ldr	r2, [r3, #0]
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	f022 0201 	bic.w	r2, r2, #1
 800dca0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dca8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2200      	movs	r2, #0
 800dcae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	68fa      	ldr	r2, [r7, #12]
 800dcb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2220      	movs	r2, #32
 800dcbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dcc8:	2300      	movs	r3, #0
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	3714      	adds	r7, #20
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd4:	4770      	bx	lr

0800dcd6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dcd6:	b580      	push	{r7, lr}
 800dcd8:	b084      	sub	sp, #16
 800dcda:	af00      	add	r7, sp, #0
 800dcdc:	6078      	str	r0, [r7, #4]
 800dcde:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dce6:	2b01      	cmp	r3, #1
 800dce8:	d101      	bne.n	800dcee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dcea:	2302      	movs	r3, #2
 800dcec:	e02d      	b.n	800dd4a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2201      	movs	r2, #1
 800dcf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2224      	movs	r2, #36	; 0x24
 800dcfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	681a      	ldr	r2, [r3, #0]
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	f022 0201 	bic.w	r2, r2, #1
 800dd14:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	689b      	ldr	r3, [r3, #8]
 800dd1c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	683a      	ldr	r2, [r7, #0]
 800dd26:	430a      	orrs	r2, r1
 800dd28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	f000 f8ac 	bl	800de88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	68fa      	ldr	r2, [r7, #12]
 800dd36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2220      	movs	r2, #32
 800dd3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2200      	movs	r2, #0
 800dd44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dd48:	2300      	movs	r3, #0
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	3710      	adds	r7, #16
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}

0800dd52 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dd52:	b580      	push	{r7, lr}
 800dd54:	b084      	sub	sp, #16
 800dd56:	af00      	add	r7, sp, #0
 800dd58:	6078      	str	r0, [r7, #4]
 800dd5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dd62:	2b01      	cmp	r3, #1
 800dd64:	d101      	bne.n	800dd6a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dd66:	2302      	movs	r3, #2
 800dd68:	e02d      	b.n	800ddc6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2201      	movs	r2, #1
 800dd6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2224      	movs	r2, #36	; 0x24
 800dd76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	681a      	ldr	r2, [r3, #0]
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	f022 0201 	bic.w	r2, r2, #1
 800dd90:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	689b      	ldr	r3, [r3, #8]
 800dd98:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	683a      	ldr	r2, [r7, #0]
 800dda2:	430a      	orrs	r2, r1
 800dda4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f000 f86e 	bl	800de88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	68fa      	ldr	r2, [r7, #12]
 800ddb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2220      	movs	r2, #32
 800ddb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ddc4:	2300      	movs	r3, #0
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	3710      	adds	r7, #16
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}

0800ddce <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ddce:	b580      	push	{r7, lr}
 800ddd0:	b08c      	sub	sp, #48	; 0x30
 800ddd2:	af00      	add	r7, sp, #0
 800ddd4:	60f8      	str	r0, [r7, #12]
 800ddd6:	60b9      	str	r1, [r7, #8]
 800ddd8:	4613      	mov	r3, r2
 800ddda:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dde2:	2b20      	cmp	r3, #32
 800dde4:	d14a      	bne.n	800de7c <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d002      	beq.n	800ddf2 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800ddec:	88fb      	ldrh	r3, [r7, #6]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d101      	bne.n	800ddf6 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	e043      	b.n	800de7e <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ddfc:	2b01      	cmp	r3, #1
 800ddfe:	d101      	bne.n	800de04 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800de00:	2302      	movs	r3, #2
 800de02:	e03c      	b.n	800de7e <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	2201      	movs	r2, #1
 800de08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	2201      	movs	r2, #1
 800de10:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800de12:	88fb      	ldrh	r3, [r7, #6]
 800de14:	461a      	mov	r2, r3
 800de16:	68b9      	ldr	r1, [r7, #8]
 800de18:	68f8      	ldr	r0, [r7, #12]
 800de1a:	f7ff fbf3 	bl	800d604 <UART_Start_Receive_DMA>
 800de1e:	4603      	mov	r3, r0
 800de20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800de24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d124      	bne.n	800de76 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de30:	2b01      	cmp	r3, #1
 800de32:	d11d      	bne.n	800de70 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	2210      	movs	r2, #16
 800de3a:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de42:	69bb      	ldr	r3, [r7, #24]
 800de44:	e853 3f00 	ldrex	r3, [r3]
 800de48:	617b      	str	r3, [r7, #20]
   return(result);
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	f043 0310 	orr.w	r3, r3, #16
 800de50:	62bb      	str	r3, [r7, #40]	; 0x28
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	461a      	mov	r2, r3
 800de58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de5a:	627b      	str	r3, [r7, #36]	; 0x24
 800de5c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de5e:	6a39      	ldr	r1, [r7, #32]
 800de60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de62:	e841 2300 	strex	r3, r2, [r1]
 800de66:	61fb      	str	r3, [r7, #28]
   return(result);
 800de68:	69fb      	ldr	r3, [r7, #28]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d1e6      	bne.n	800de3c <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800de6e:	e002      	b.n	800de76 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800de70:	2301      	movs	r3, #1
 800de72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800de76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800de7a:	e000      	b.n	800de7e <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800de7c:	2302      	movs	r3, #2
  }
}
 800de7e:	4618      	mov	r0, r3
 800de80:	3730      	adds	r7, #48	; 0x30
 800de82:	46bd      	mov	sp, r7
 800de84:	bd80      	pop	{r7, pc}
	...

0800de88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800de88:	b480      	push	{r7}
 800de8a:	b085      	sub	sp, #20
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de94:	2b00      	cmp	r3, #0
 800de96:	d108      	bne.n	800deaa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2201      	movs	r2, #1
 800de9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2201      	movs	r2, #1
 800dea4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dea8:	e031      	b.n	800df0e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800deaa:	2310      	movs	r3, #16
 800deac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800deae:	2310      	movs	r3, #16
 800deb0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	689b      	ldr	r3, [r3, #8]
 800deb8:	0e5b      	lsrs	r3, r3, #25
 800deba:	b2db      	uxtb	r3, r3
 800debc:	f003 0307 	and.w	r3, r3, #7
 800dec0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	689b      	ldr	r3, [r3, #8]
 800dec8:	0f5b      	lsrs	r3, r3, #29
 800deca:	b2db      	uxtb	r3, r3
 800decc:	f003 0307 	and.w	r3, r3, #7
 800ded0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ded2:	7bbb      	ldrb	r3, [r7, #14]
 800ded4:	7b3a      	ldrb	r2, [r7, #12]
 800ded6:	4911      	ldr	r1, [pc, #68]	; (800df1c <UARTEx_SetNbDataToProcess+0x94>)
 800ded8:	5c8a      	ldrb	r2, [r1, r2]
 800deda:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dede:	7b3a      	ldrb	r2, [r7, #12]
 800dee0:	490f      	ldr	r1, [pc, #60]	; (800df20 <UARTEx_SetNbDataToProcess+0x98>)
 800dee2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dee4:	fb93 f3f2 	sdiv	r3, r3, r2
 800dee8:	b29a      	uxth	r2, r3
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800def0:	7bfb      	ldrb	r3, [r7, #15]
 800def2:	7b7a      	ldrb	r2, [r7, #13]
 800def4:	4909      	ldr	r1, [pc, #36]	; (800df1c <UARTEx_SetNbDataToProcess+0x94>)
 800def6:	5c8a      	ldrb	r2, [r1, r2]
 800def8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800defc:	7b7a      	ldrb	r2, [r7, #13]
 800defe:	4908      	ldr	r1, [pc, #32]	; (800df20 <UARTEx_SetNbDataToProcess+0x98>)
 800df00:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800df02:	fb93 f3f2 	sdiv	r3, r3, r2
 800df06:	b29a      	uxth	r2, r3
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800df0e:	bf00      	nop
 800df10:	3714      	adds	r7, #20
 800df12:	46bd      	mov	sp, r7
 800df14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df18:	4770      	bx	lr
 800df1a:	bf00      	nop
 800df1c:	08011cac 	.word	0x08011cac
 800df20:	08011cb4 	.word	0x08011cb4

0800df24 <checkint>:
 800df24:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800df28:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800df2c:	429a      	cmp	r2, r3
 800df2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df30:	dd2b      	ble.n	800df8a <checkint+0x66>
 800df32:	f240 4333 	movw	r3, #1075	; 0x433
 800df36:	429a      	cmp	r2, r3
 800df38:	dc25      	bgt.n	800df86 <checkint+0x62>
 800df3a:	1a9b      	subs	r3, r3, r2
 800df3c:	f1a3 0620 	sub.w	r6, r3, #32
 800df40:	f04f 32ff 	mov.w	r2, #4294967295
 800df44:	fa02 f606 	lsl.w	r6, r2, r6
 800df48:	fa02 f403 	lsl.w	r4, r2, r3
 800df4c:	f1c3 0520 	rsb	r5, r3, #32
 800df50:	4334      	orrs	r4, r6
 800df52:	fa22 f505 	lsr.w	r5, r2, r5
 800df56:	432c      	orrs	r4, r5
 800df58:	409a      	lsls	r2, r3
 800df5a:	ea20 0602 	bic.w	r6, r0, r2
 800df5e:	ea21 0704 	bic.w	r7, r1, r4
 800df62:	ea56 0207 	orrs.w	r2, r6, r7
 800df66:	f1a3 0420 	sub.w	r4, r3, #32
 800df6a:	f1c3 0220 	rsb	r2, r3, #32
 800df6e:	d10c      	bne.n	800df8a <checkint+0x66>
 800df70:	40d8      	lsrs	r0, r3
 800df72:	fa01 f302 	lsl.w	r3, r1, r2
 800df76:	4318      	orrs	r0, r3
 800df78:	40e1      	lsrs	r1, r4
 800df7a:	4308      	orrs	r0, r1
 800df7c:	f000 0301 	and.w	r3, r0, #1
 800df80:	f1c3 0002 	rsb	r0, r3, #2
 800df84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df86:	2002      	movs	r0, #2
 800df88:	e7fc      	b.n	800df84 <checkint+0x60>
 800df8a:	2000      	movs	r0, #0
 800df8c:	e7fa      	b.n	800df84 <checkint+0x60>
	...

0800df90 <pow>:
 800df90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df94:	ed2d 8b0a 	vpush	{d8-d12}
 800df98:	b09b      	sub	sp, #108	; 0x6c
 800df9a:	ed8d 0b02 	vstr	d0, [sp, #8]
 800df9e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800dfa2:	ed8d 1b00 	vstr	d1, [sp]
 800dfa6:	ea4f 5915 	mov.w	r9, r5, lsr #20
 800dfaa:	e9dd 6700 	ldrd	r6, r7, [sp]
 800dfae:	f109 30ff 	add.w	r0, r9, #4294967295
 800dfb2:	f240 71fd 	movw	r1, #2045	; 0x7fd
 800dfb6:	4288      	cmp	r0, r1
 800dfb8:	46cc      	mov	ip, r9
 800dfba:	ea4f 5817 	mov.w	r8, r7, lsr #20
 800dfbe:	d806      	bhi.n	800dfce <pow+0x3e>
 800dfc0:	f3c8 010a 	ubfx	r1, r8, #0, #11
 800dfc4:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 800dfc8:	297f      	cmp	r1, #127	; 0x7f
 800dfca:	f240 81ab 	bls.w	800e324 <pow+0x394>
 800dfce:	19b1      	adds	r1, r6, r6
 800dfd0:	9104      	str	r1, [sp, #16]
 800dfd2:	eb47 0107 	adc.w	r1, r7, r7
 800dfd6:	9105      	str	r1, [sp, #20]
 800dfd8:	9904      	ldr	r1, [sp, #16]
 800dfda:	f111 31ff 	adds.w	r1, r1, #4294967295
 800dfde:	460a      	mov	r2, r1
 800dfe0:	9905      	ldr	r1, [sp, #20]
 800dfe2:	f141 31ff 	adc.w	r1, r1, #4294967295
 800dfe6:	460b      	mov	r3, r1
 800dfe8:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 800dfec:	f06f 0001 	mvn.w	r0, #1
 800dff0:	4299      	cmp	r1, r3
 800dff2:	bf08      	it	eq
 800dff4:	4290      	cmpeq	r0, r2
 800dff6:	d260      	bcs.n	800e0ba <pow+0x12a>
 800dff8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dffc:	4313      	orrs	r3, r2
 800dffe:	d11a      	bne.n	800e036 <pow+0xa6>
 800e000:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 800e004:	1923      	adds	r3, r4, r4
 800e006:	930c      	str	r3, [sp, #48]	; 0x30
 800e008:	eb42 0302 	adc.w	r3, r2, r2
 800e00c:	930d      	str	r3, [sp, #52]	; 0x34
 800e00e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e012:	4bcf      	ldr	r3, [pc, #828]	; (800e350 <pow+0x3c0>)
 800e014:	2200      	movs	r2, #0
 800e016:	428b      	cmp	r3, r1
 800e018:	bf08      	it	eq
 800e01a:	4282      	cmpeq	r2, r0
 800e01c:	f080 8265 	bcs.w	800e4ea <pow+0x55a>
 800e020:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e024:	ed9d 6b00 	vldr	d6, [sp]
 800e028:	ee37 0b06 	vadd.f64	d0, d7, d6
 800e02c:	b01b      	add	sp, #108	; 0x6c
 800e02e:	ecbd 8b0a 	vpop	{d8-d12}
 800e032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e036:	49c7      	ldr	r1, [pc, #796]	; (800e354 <pow+0x3c4>)
 800e038:	2000      	movs	r0, #0
 800e03a:	428d      	cmp	r5, r1
 800e03c:	bf08      	it	eq
 800e03e:	4284      	cmpeq	r4, r0
 800e040:	d10b      	bne.n	800e05a <pow+0xca>
 800e042:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e046:	19b3      	adds	r3, r6, r6
 800e048:	930e      	str	r3, [sp, #56]	; 0x38
 800e04a:	eb42 0302 	adc.w	r3, r2, r2
 800e04e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e050:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e054:	4bbe      	ldr	r3, [pc, #760]	; (800e350 <pow+0x3c0>)
 800e056:	2200      	movs	r2, #0
 800e058:	e7dd      	b.n	800e016 <pow+0x86>
 800e05a:	1921      	adds	r1, r4, r4
 800e05c:	9106      	str	r1, [sp, #24]
 800e05e:	eb45 0105 	adc.w	r1, r5, r5
 800e062:	9107      	str	r1, [sp, #28]
 800e064:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800e068:	49bb      	ldr	r1, [pc, #748]	; (800e358 <pow+0x3c8>)
 800e06a:	2000      	movs	r0, #0
 800e06c:	42a1      	cmp	r1, r4
 800e06e:	bf08      	it	eq
 800e070:	4298      	cmpeq	r0, r3
 800e072:	d3d5      	bcc.n	800e020 <pow+0x90>
 800e074:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800e078:	428c      	cmp	r4, r1
 800e07a:	bf08      	it	eq
 800e07c:	4283      	cmpeq	r3, r0
 800e07e:	d1cf      	bne.n	800e020 <pow+0x90>
 800e080:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800e084:	49b5      	ldr	r1, [pc, #724]	; (800e35c <pow+0x3cc>)
 800e086:	2000      	movs	r0, #0
 800e088:	428c      	cmp	r4, r1
 800e08a:	bf08      	it	eq
 800e08c:	4283      	cmpeq	r3, r0
 800e08e:	f000 822c 	beq.w	800e4ea <pow+0x55a>
 800e092:	49b3      	ldr	r1, [pc, #716]	; (800e360 <pow+0x3d0>)
 800e094:	f04f 30ff 	mov.w	r0, #4294967295
 800e098:	42a1      	cmp	r1, r4
 800e09a:	bf08      	it	eq
 800e09c:	4298      	cmpeq	r0, r3
 800e09e:	ea6f 0307 	mvn.w	r3, r7
 800e0a2:	bf34      	ite	cc
 800e0a4:	2201      	movcc	r2, #1
 800e0a6:	2200      	movcs	r2, #0
 800e0a8:	0fdb      	lsrs	r3, r3, #31
 800e0aa:	429a      	cmp	r2, r3
 800e0ac:	f040 821a 	bne.w	800e4e4 <pow+0x554>
 800e0b0:	ed9d 7b00 	vldr	d7, [sp]
 800e0b4:	ee27 0b07 	vmul.f64	d0, d7, d7
 800e0b8:	e7b8      	b.n	800e02c <pow+0x9c>
 800e0ba:	1923      	adds	r3, r4, r4
 800e0bc:	9308      	str	r3, [sp, #32]
 800e0be:	eb45 0305 	adc.w	r3, r5, r5
 800e0c2:	9309      	str	r3, [sp, #36]	; 0x24
 800e0c4:	9b08      	ldr	r3, [sp, #32]
 800e0c6:	f113 33ff 	adds.w	r3, r3, #4294967295
 800e0ca:	9310      	str	r3, [sp, #64]	; 0x40
 800e0cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0ce:	f143 33ff 	adc.w	r3, r3, #4294967295
 800e0d2:	9311      	str	r3, [sp, #68]	; 0x44
 800e0d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e0d8:	4299      	cmp	r1, r3
 800e0da:	bf08      	it	eq
 800e0dc:	4290      	cmpeq	r0, r2
 800e0de:	d22d      	bcs.n	800e13c <pow+0x1ac>
 800e0e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e0e4:	2c00      	cmp	r4, #0
 800e0e6:	f175 0300 	sbcs.w	r3, r5, #0
 800e0ea:	ee27 0b07 	vmul.f64	d0, d7, d7
 800e0ee:	da16      	bge.n	800e11e <pow+0x18e>
 800e0f0:	4630      	mov	r0, r6
 800e0f2:	4639      	mov	r1, r7
 800e0f4:	f7ff ff16 	bl	800df24 <checkint>
 800e0f8:	2801      	cmp	r0, #1
 800e0fa:	d110      	bne.n	800e11e <pow+0x18e>
 800e0fc:	eeb1 0b40 	vneg.f64	d0, d0
 800e100:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800e104:	4323      	orrs	r3, r4
 800e106:	d10c      	bne.n	800e122 <pow+0x192>
 800e108:	2e00      	cmp	r6, #0
 800e10a:	f177 0300 	sbcs.w	r3, r7, #0
 800e10e:	da8d      	bge.n	800e02c <pow+0x9c>
 800e110:	b01b      	add	sp, #108	; 0x6c
 800e112:	ecbd 8b0a 	vpop	{d8-d12}
 800e116:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e11a:	f000 bf3d 	b.w	800ef98 <__math_divzero>
 800e11e:	2000      	movs	r0, #0
 800e120:	e7ee      	b.n	800e100 <pow+0x170>
 800e122:	2e00      	cmp	r6, #0
 800e124:	f177 0300 	sbcs.w	r3, r7, #0
 800e128:	da80      	bge.n	800e02c <pow+0x9c>
 800e12a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e12e:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800e132:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800e136:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800e13a:	e777      	b.n	800e02c <pow+0x9c>
 800e13c:	2c00      	cmp	r4, #0
 800e13e:	f175 0300 	sbcs.w	r3, r5, #0
 800e142:	da35      	bge.n	800e1b0 <pow+0x220>
 800e144:	4630      	mov	r0, r6
 800e146:	4639      	mov	r1, r7
 800e148:	f7ff feec 	bl	800df24 <checkint>
 800e14c:	b940      	cbnz	r0, 800e160 <pow+0x1d0>
 800e14e:	ed9d 0b02 	vldr	d0, [sp, #8]
 800e152:	b01b      	add	sp, #108	; 0x6c
 800e154:	ecbd 8b0a 	vpop	{d8-d12}
 800e158:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e15c:	f000 bf34 	b.w	800efc8 <__math_invalid>
 800e160:	2801      	cmp	r0, #1
 800e162:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e166:	bf14      	ite	ne
 800e168:	2000      	movne	r0, #0
 800e16a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800e16e:	461d      	mov	r5, r3
 800e170:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 800e174:	f3c8 030a 	ubfx	r3, r8, #0, #11
 800e178:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 800e17c:	2a7f      	cmp	r2, #127	; 0x7f
 800e17e:	d933      	bls.n	800e1e8 <pow+0x258>
 800e180:	4974      	ldr	r1, [pc, #464]	; (800e354 <pow+0x3c4>)
 800e182:	2000      	movs	r0, #0
 800e184:	428d      	cmp	r5, r1
 800e186:	bf08      	it	eq
 800e188:	4284      	cmpeq	r4, r0
 800e18a:	f000 81ae 	beq.w	800e4ea <pow+0x55a>
 800e18e:	f240 32bd 	movw	r2, #957	; 0x3bd
 800e192:	4293      	cmp	r3, r2
 800e194:	d80e      	bhi.n	800e1b4 <pow+0x224>
 800e196:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e19a:	ed9d 7b00 	vldr	d7, [sp]
 800e19e:	42a9      	cmp	r1, r5
 800e1a0:	bf08      	it	eq
 800e1a2:	42a0      	cmpeq	r0, r4
 800e1a4:	bf34      	ite	cc
 800e1a6:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 800e1aa:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 800e1ae:	e73d      	b.n	800e02c <pow+0x9c>
 800e1b0:	2000      	movs	r0, #0
 800e1b2:	e7df      	b.n	800e174 <pow+0x1e4>
 800e1b4:	42a9      	cmp	r1, r5
 800e1b6:	bf08      	it	eq
 800e1b8:	42a0      	cmpeq	r0, r4
 800e1ba:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e1be:	bf2c      	ite	cs
 800e1c0:	2301      	movcs	r3, #1
 800e1c2:	2300      	movcc	r3, #0
 800e1c4:	4590      	cmp	r8, r2
 800e1c6:	bf8c      	ite	hi
 800e1c8:	f04f 0800 	movhi.w	r8, #0
 800e1cc:	f04f 0801 	movls.w	r8, #1
 800e1d0:	4543      	cmp	r3, r8
 800e1d2:	f04f 0000 	mov.w	r0, #0
 800e1d6:	f000 80af 	beq.w	800e338 <pow+0x3a8>
 800e1da:	b01b      	add	sp, #108	; 0x6c
 800e1dc:	ecbd 8b0a 	vpop	{d8-d12}
 800e1e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1e4:	f000 bed0 	b.w	800ef88 <__math_oflow>
 800e1e8:	f1bc 0f00 	cmp.w	ip, #0
 800e1ec:	d10e      	bne.n	800e20c <pow+0x27c>
 800e1ee:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800e348 <pow+0x3b8>
 800e1f2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e1f6:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e1fa:	ec57 6b17 	vmov	r6, r7, d7
 800e1fe:	4b59      	ldr	r3, [pc, #356]	; (800e364 <pow+0x3d4>)
 800e200:	2100      	movs	r1, #0
 800e202:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800e206:	1874      	adds	r4, r6, r1
 800e208:	eb42 0503 	adc.w	r5, r2, r3
 800e20c:	2300      	movs	r3, #0
 800e20e:	18e3      	adds	r3, r4, r3
 800e210:	4b55      	ldr	r3, [pc, #340]	; (800e368 <pow+0x3d8>)
 800e212:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800e216:	eb45 0303 	adc.w	r3, r5, r3
 800e21a:	1519      	asrs	r1, r3, #20
 800e21c:	ee03 1a10 	vmov	s6, r1
 800e220:	0d1e      	lsrs	r6, r3, #20
 800e222:	2100      	movs	r1, #0
 800e224:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800e228:	0536      	lsls	r6, r6, #20
 800e22a:	1a63      	subs	r3, r4, r1
 800e22c:	9312      	str	r3, [sp, #72]	; 0x48
 800e22e:	eb65 0306 	sbc.w	r3, r5, r6
 800e232:	9313      	str	r3, [sp, #76]	; 0x4c
 800e234:	4b4d      	ldr	r3, [pc, #308]	; (800e36c <pow+0x3dc>)
 800e236:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 800e23a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e23e:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 800e242:	eea5 6b07 	vfma.f64	d6, d5, d7
 800e246:	ed93 7b00 	vldr	d7, [r3]
 800e24a:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 800e24e:	ed93 4b02 	vldr	d4, [r3, #8]
 800e252:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800e256:	eea3 5b07 	vfma.f64	d5, d3, d7
 800e25a:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 800e25e:	ee36 9b05 	vadd.f64	d9, d6, d5
 800e262:	ee35 5b49 	vsub.f64	d5, d5, d9
 800e266:	eea3 7b04 	vfma.f64	d7, d3, d4
 800e26a:	ed93 4b04 	vldr	d4, [r3, #16]
 800e26e:	ee35 5b06 	vadd.f64	d5, d5, d6
 800e272:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e276:	ee26 4b04 	vmul.f64	d4, d6, d4
 800e27a:	ed93 3b08 	vldr	d3, [r3, #32]
 800e27e:	ee26 0b04 	vmul.f64	d0, d6, d4
 800e282:	eeb0 8b40 	vmov.f64	d8, d0
 800e286:	ee94 8b06 	vfnms.f64	d8, d4, d6
 800e28a:	ed93 4b06 	vldr	d4, [r3, #24]
 800e28e:	ee26 ab00 	vmul.f64	d10, d6, d0
 800e292:	ee39 1b00 	vadd.f64	d1, d9, d0
 800e296:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 800e29a:	eea6 4b03 	vfma.f64	d4, d6, d3
 800e29e:	ee39 9b41 	vsub.f64	d9, d9, d1
 800e2a2:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 800e2a6:	ee37 8b08 	vadd.f64	d8, d7, d8
 800e2aa:	ee39 9b00 	vadd.f64	d9, d9, d0
 800e2ae:	eea6 3b02 	vfma.f64	d3, d6, d2
 800e2b2:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800e2b6:	ee38 9b09 	vadd.f64	d9, d8, d9
 800e2ba:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 800e2be:	eea6 2b0c 	vfma.f64	d2, d6, d12
 800e2c2:	ed9d 6b00 	vldr	d6, [sp]
 800e2c6:	eea0 3b02 	vfma.f64	d3, d0, d2
 800e2ca:	eea0 4b03 	vfma.f64	d4, d0, d3
 800e2ce:	eeaa 9b04 	vfma.f64	d9, d10, d4
 800e2d2:	ee31 7b09 	vadd.f64	d7, d1, d9
 800e2d6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e2da:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e2de:	eeb0 3b46 	vmov.f64	d3, d6
 800e2e2:	ee31 1b47 	vsub.f64	d1, d1, d7
 800e2e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e2ea:	ee31 9b09 	vadd.f64	d9, d1, d9
 800e2ee:	ed9d 6b00 	vldr	d6, [sp]
 800e2f2:	f3c3 570a 	ubfx	r7, r3, #20, #11
 800e2f6:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 800e2fa:	193c      	adds	r4, r7, r4
 800e2fc:	2c3e      	cmp	r4, #62	; 0x3e
 800e2fe:	ee96 3b07 	vfnms.f64	d3, d6, d7
 800e302:	eea6 3b09 	vfma.f64	d3, d6, d9
 800e306:	d934      	bls.n	800e372 <pow+0x3e2>
 800e308:	428c      	cmp	r4, r1
 800e30a:	da0d      	bge.n	800e328 <pow+0x398>
 800e30c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e310:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e314:	ee37 0b00 	vadd.f64	d0, d7, d0
 800e318:	2800      	cmp	r0, #0
 800e31a:	f43f ae87 	beq.w	800e02c <pow+0x9c>
 800e31e:	eeb1 0b40 	vneg.f64	d0, d0
 800e322:	e683      	b.n	800e02c <pow+0x9c>
 800e324:	2000      	movs	r0, #0
 800e326:	e771      	b.n	800e20c <pow+0x27c>
 800e328:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 800e32c:	d920      	bls.n	800e370 <pow+0x3e0>
 800e32e:	2a00      	cmp	r2, #0
 800e330:	f173 0300 	sbcs.w	r3, r3, #0
 800e334:	f6bf af51 	bge.w	800e1da <pow+0x24a>
 800e338:	b01b      	add	sp, #108	; 0x6c
 800e33a:	ecbd 8b0a 	vpop	{d8-d12}
 800e33e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e342:	f000 be19 	b.w	800ef78 <__math_uflow>
 800e346:	bf00      	nop
 800e348:	00000000 	.word	0x00000000
 800e34c:	43300000 	.word	0x43300000
 800e350:	fff00000 	.word	0xfff00000
 800e354:	3ff00000 	.word	0x3ff00000
 800e358:	ffe00000 	.word	0xffe00000
 800e35c:	7fe00000 	.word	0x7fe00000
 800e360:	7fdfffff 	.word	0x7fdfffff
 800e364:	fcc00000 	.word	0xfcc00000
 800e368:	c0196aab 	.word	0xc0196aab
 800e36c:	08011cc0 	.word	0x08011cc0
 800e370:	460f      	mov	r7, r1
 800e372:	4e65      	ldr	r6, [pc, #404]	; (800e508 <pow+0x578>)
 800e374:	ed9d 4b02 	vldr	d4, [sp, #8]
 800e378:	ed96 6b02 	vldr	d6, [r6, #8]
 800e37c:	ed96 7b00 	vldr	d7, [r6]
 800e380:	eeb0 5b46 	vmov.f64	d5, d6
 800e384:	eea4 5b07 	vfma.f64	d5, d4, d7
 800e388:	ed8d 5b00 	vstr	d5, [sp]
 800e38c:	ee35 6b46 	vsub.f64	d6, d5, d6
 800e390:	eeb0 5b44 	vmov.f64	d5, d4
 800e394:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e398:	ed96 7b04 	vldr	d7, [r6, #16]
 800e39c:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 800e3a0:	eea6 5b07 	vfma.f64	d5, d6, d7
 800e3a4:	eeb0 7b45 	vmov.f64	d7, d5
 800e3a8:	ed96 5b06 	vldr	d5, [r6, #24]
 800e3ac:	1849      	adds	r1, r1, r1
 800e3ae:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 800e3b2:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800e3b6:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e3ba:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 800e3be:	ee33 3b07 	vadd.f64	d3, d3, d7
 800e3c2:	ee23 6b03 	vmul.f64	d6, d3, d3
 800e3c6:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 800e3ca:	ed96 5b08 	vldr	d5, [r6, #32]
 800e3ce:	ee33 7b07 	vadd.f64	d7, d3, d7
 800e3d2:	1814      	adds	r4, r2, r0
 800e3d4:	0365      	lsls	r5, r4, #13
 800e3d6:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 800e3da:	eea3 5b04 	vfma.f64	d5, d3, d4
 800e3de:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e3e2:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 800e3e6:	ee26 6b06 	vmul.f64	d6, d6, d6
 800e3ea:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 800e3ee:	2000      	movs	r0, #0
 800e3f0:	eb10 0a04 	adds.w	sl, r0, r4
 800e3f4:	eea3 5b04 	vfma.f64	d5, d3, d4
 800e3f8:	eb45 0b0c 	adc.w	fp, r5, ip
 800e3fc:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e400:	2f00      	cmp	r7, #0
 800e402:	d16a      	bne.n	800e4da <pow+0x54a>
 800e404:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 800e408:	4639      	mov	r1, r7
 800e40a:	ea50 0301 	orrs.w	r3, r0, r1
 800e40e:	f04f 0300 	mov.w	r3, #0
 800e412:	d115      	bne.n	800e440 <pow+0x4b0>
 800e414:	eb1a 0303 	adds.w	r3, sl, r3
 800e418:	ee0b 3a10 	vmov	s22, r3
 800e41c:	4b3b      	ldr	r3, [pc, #236]	; (800e50c <pow+0x57c>)
 800e41e:	ed9f 0b34 	vldr	d0, [pc, #208]	; 800e4f0 <pow+0x560>
 800e422:	eb4b 0303 	adc.w	r3, fp, r3
 800e426:	ee0b 3a90 	vmov	s23, r3
 800e42a:	eea7 bb0b 	vfma.f64	d11, d7, d11
 800e42e:	ee2b 0b00 	vmul.f64	d0, d11, d0
 800e432:	b01b      	add	sp, #108	; 0x6c
 800e434:	ecbd 8b0a 	vpop	{d8-d12}
 800e438:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e43c:	f000 bddc 	b.w	800eff8 <__math_check_oflow>
 800e440:	eb1a 0303 	adds.w	r3, sl, r3
 800e444:	930a      	str	r3, [sp, #40]	; 0x28
 800e446:	4b32      	ldr	r3, [pc, #200]	; (800e510 <pow+0x580>)
 800e448:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800e44c:	eb4b 0303 	adc.w	r3, fp, r3
 800e450:	930b      	str	r3, [sp, #44]	; 0x2c
 800e452:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800e456:	ee27 6b05 	vmul.f64	d6, d7, d5
 800e45a:	ee35 7b06 	vadd.f64	d7, d5, d6
 800e45e:	eeb0 3bc7 	vabs.f64	d3, d7
 800e462:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800e466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e46a:	ed9f 0b23 	vldr	d0, [pc, #140]	; 800e4f8 <pow+0x568>
 800e46e:	d52b      	bpl.n	800e4c8 <pow+0x538>
 800e470:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e474:	ee35 5b47 	vsub.f64	d5, d5, d7
 800e478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e47c:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800e480:	ee35 6b06 	vadd.f64	d6, d5, d6
 800e484:	bf48      	it	mi
 800e486:	eeb0 4b43 	vmovmi.f64	d4, d3
 800e48a:	ee37 3b04 	vadd.f64	d3, d7, d4
 800e48e:	ee34 5b43 	vsub.f64	d5, d4, d3
 800e492:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e496:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e49a:	ee37 7b03 	vadd.f64	d7, d7, d3
 800e49e:	ee37 7b44 	vsub.f64	d7, d7, d4
 800e4a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e4a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4aa:	d105      	bne.n	800e4b8 <pow+0x528>
 800e4ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e4ae:	463a      	mov	r2, r7
 800e4b0:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800e4b4:	ec43 2b17 	vmov	d7, r2, r3
 800e4b8:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 800e4bc:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 800e4c0:	ee26 6b00 	vmul.f64	d6, d6, d0
 800e4c4:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 800e4c8:	ee27 0b00 	vmul.f64	d0, d7, d0
 800e4cc:	b01b      	add	sp, #108	; 0x6c
 800e4ce:	ecbd 8b0a 	vpop	{d8-d12}
 800e4d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4d6:	f000 bd86 	b.w	800efe6 <__math_check_uflow>
 800e4da:	ec4b ab10 	vmov	d0, sl, fp
 800e4de:	eea7 0b00 	vfma.f64	d0, d7, d0
 800e4e2:	e5a3      	b.n	800e02c <pow+0x9c>
 800e4e4:	ed9f 0b06 	vldr	d0, [pc, #24]	; 800e500 <pow+0x570>
 800e4e8:	e5a0      	b.n	800e02c <pow+0x9c>
 800e4ea:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e4ee:	e59d      	b.n	800e02c <pow+0x9c>
 800e4f0:	00000000 	.word	0x00000000
 800e4f4:	7f000000 	.word	0x7f000000
 800e4f8:	00000000 	.word	0x00000000
 800e4fc:	00100000 	.word	0x00100000
	...
 800e508:	08012e90 	.word	0x08012e90
 800e50c:	c0f00000 	.word	0xc0f00000
 800e510:	3fe00000 	.word	0x3fe00000
 800e514:	00000000 	.word	0x00000000

0800e518 <cos>:
 800e518:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e51a:	eeb0 7b40 	vmov.f64	d7, d0
 800e51e:	ee17 3a90 	vmov	r3, s15
 800e522:	4a1f      	ldr	r2, [pc, #124]	; (800e5a0 <cos+0x88>)
 800e524:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e528:	4293      	cmp	r3, r2
 800e52a:	dc04      	bgt.n	800e536 <cos+0x1e>
 800e52c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 800e598 <cos+0x80>
 800e530:	f000 f9c2 	bl	800e8b8 <__kernel_cos>
 800e534:	e004      	b.n	800e540 <cos+0x28>
 800e536:	4a1b      	ldr	r2, [pc, #108]	; (800e5a4 <cos+0x8c>)
 800e538:	4293      	cmp	r3, r2
 800e53a:	dd04      	ble.n	800e546 <cos+0x2e>
 800e53c:	ee30 0b40 	vsub.f64	d0, d0, d0
 800e540:	b005      	add	sp, #20
 800e542:	f85d fb04 	ldr.w	pc, [sp], #4
 800e546:	4668      	mov	r0, sp
 800e548:	f000 f876 	bl	800e638 <__ieee754_rem_pio2>
 800e54c:	f000 0003 	and.w	r0, r0, #3
 800e550:	2801      	cmp	r0, #1
 800e552:	d007      	beq.n	800e564 <cos+0x4c>
 800e554:	2802      	cmp	r0, #2
 800e556:	d00e      	beq.n	800e576 <cos+0x5e>
 800e558:	b9a0      	cbnz	r0, 800e584 <cos+0x6c>
 800e55a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e55e:	ed9d 0b00 	vldr	d0, [sp]
 800e562:	e7e5      	b.n	800e530 <cos+0x18>
 800e564:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e568:	ed9d 0b00 	vldr	d0, [sp]
 800e56c:	f000 fc90 	bl	800ee90 <__kernel_sin>
 800e570:	eeb1 0b40 	vneg.f64	d0, d0
 800e574:	e7e4      	b.n	800e540 <cos+0x28>
 800e576:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e57a:	ed9d 0b00 	vldr	d0, [sp]
 800e57e:	f000 f99b 	bl	800e8b8 <__kernel_cos>
 800e582:	e7f5      	b.n	800e570 <cos+0x58>
 800e584:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e588:	ed9d 0b00 	vldr	d0, [sp]
 800e58c:	2001      	movs	r0, #1
 800e58e:	f000 fc7f 	bl	800ee90 <__kernel_sin>
 800e592:	e7d5      	b.n	800e540 <cos+0x28>
 800e594:	f3af 8000 	nop.w
	...
 800e5a0:	3fe921fb 	.word	0x3fe921fb
 800e5a4:	7fefffff 	.word	0x7fefffff

0800e5a8 <sin>:
 800e5a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e5aa:	eeb0 7b40 	vmov.f64	d7, d0
 800e5ae:	ee17 3a90 	vmov	r3, s15
 800e5b2:	4a1f      	ldr	r2, [pc, #124]	; (800e630 <sin+0x88>)
 800e5b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e5b8:	4293      	cmp	r3, r2
 800e5ba:	dc05      	bgt.n	800e5c8 <sin+0x20>
 800e5bc:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 800e628 <sin+0x80>
 800e5c0:	2000      	movs	r0, #0
 800e5c2:	f000 fc65 	bl	800ee90 <__kernel_sin>
 800e5c6:	e004      	b.n	800e5d2 <sin+0x2a>
 800e5c8:	4a1a      	ldr	r2, [pc, #104]	; (800e634 <sin+0x8c>)
 800e5ca:	4293      	cmp	r3, r2
 800e5cc:	dd04      	ble.n	800e5d8 <sin+0x30>
 800e5ce:	ee30 0b40 	vsub.f64	d0, d0, d0
 800e5d2:	b005      	add	sp, #20
 800e5d4:	f85d fb04 	ldr.w	pc, [sp], #4
 800e5d8:	4668      	mov	r0, sp
 800e5da:	f000 f82d 	bl	800e638 <__ieee754_rem_pio2>
 800e5de:	f000 0003 	and.w	r0, r0, #3
 800e5e2:	2801      	cmp	r0, #1
 800e5e4:	d008      	beq.n	800e5f8 <sin+0x50>
 800e5e6:	2802      	cmp	r0, #2
 800e5e8:	d00d      	beq.n	800e606 <sin+0x5e>
 800e5ea:	b9b0      	cbnz	r0, 800e61a <sin+0x72>
 800e5ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e5f0:	ed9d 0b00 	vldr	d0, [sp]
 800e5f4:	2001      	movs	r0, #1
 800e5f6:	e7e4      	b.n	800e5c2 <sin+0x1a>
 800e5f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e5fc:	ed9d 0b00 	vldr	d0, [sp]
 800e600:	f000 f95a 	bl	800e8b8 <__kernel_cos>
 800e604:	e7e5      	b.n	800e5d2 <sin+0x2a>
 800e606:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e60a:	ed9d 0b00 	vldr	d0, [sp]
 800e60e:	2001      	movs	r0, #1
 800e610:	f000 fc3e 	bl	800ee90 <__kernel_sin>
 800e614:	eeb1 0b40 	vneg.f64	d0, d0
 800e618:	e7db      	b.n	800e5d2 <sin+0x2a>
 800e61a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e61e:	ed9d 0b00 	vldr	d0, [sp]
 800e622:	f000 f949 	bl	800e8b8 <__kernel_cos>
 800e626:	e7f5      	b.n	800e614 <sin+0x6c>
	...
 800e630:	3fe921fb 	.word	0x3fe921fb
 800e634:	7fefffff 	.word	0x7fefffff

0800e638 <__ieee754_rem_pio2>:
 800e638:	b570      	push	{r4, r5, r6, lr}
 800e63a:	eeb0 7b40 	vmov.f64	d7, d0
 800e63e:	ee17 5a90 	vmov	r5, s15
 800e642:	4b97      	ldr	r3, [pc, #604]	; (800e8a0 <__ieee754_rem_pio2+0x268>)
 800e644:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e648:	429e      	cmp	r6, r3
 800e64a:	b088      	sub	sp, #32
 800e64c:	4604      	mov	r4, r0
 800e64e:	dc07      	bgt.n	800e660 <__ieee754_rem_pio2+0x28>
 800e650:	2200      	movs	r2, #0
 800e652:	2300      	movs	r3, #0
 800e654:	ed84 0b00 	vstr	d0, [r4]
 800e658:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e65c:	2000      	movs	r0, #0
 800e65e:	e01b      	b.n	800e698 <__ieee754_rem_pio2+0x60>
 800e660:	4b90      	ldr	r3, [pc, #576]	; (800e8a4 <__ieee754_rem_pio2+0x26c>)
 800e662:	429e      	cmp	r6, r3
 800e664:	dc3b      	bgt.n	800e6de <__ieee754_rem_pio2+0xa6>
 800e666:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800e66a:	2d00      	cmp	r5, #0
 800e66c:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800e860 <__ieee754_rem_pio2+0x228>
 800e670:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800e674:	dd19      	ble.n	800e6aa <__ieee754_rem_pio2+0x72>
 800e676:	ee30 7b46 	vsub.f64	d7, d0, d6
 800e67a:	429e      	cmp	r6, r3
 800e67c:	d00e      	beq.n	800e69c <__ieee754_rem_pio2+0x64>
 800e67e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800e868 <__ieee754_rem_pio2+0x230>
 800e682:	ee37 5b46 	vsub.f64	d5, d7, d6
 800e686:	ee37 7b45 	vsub.f64	d7, d7, d5
 800e68a:	ed84 5b00 	vstr	d5, [r4]
 800e68e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e692:	ed84 7b02 	vstr	d7, [r4, #8]
 800e696:	2001      	movs	r0, #1
 800e698:	b008      	add	sp, #32
 800e69a:	bd70      	pop	{r4, r5, r6, pc}
 800e69c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800e870 <__ieee754_rem_pio2+0x238>
 800e6a0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e6a4:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800e878 <__ieee754_rem_pio2+0x240>
 800e6a8:	e7eb      	b.n	800e682 <__ieee754_rem_pio2+0x4a>
 800e6aa:	429e      	cmp	r6, r3
 800e6ac:	ee30 7b06 	vadd.f64	d7, d0, d6
 800e6b0:	d00e      	beq.n	800e6d0 <__ieee754_rem_pio2+0x98>
 800e6b2:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 800e868 <__ieee754_rem_pio2+0x230>
 800e6b6:	ee37 5b06 	vadd.f64	d5, d7, d6
 800e6ba:	ee37 7b45 	vsub.f64	d7, d7, d5
 800e6be:	ed84 5b00 	vstr	d5, [r4]
 800e6c2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e6c6:	f04f 30ff 	mov.w	r0, #4294967295
 800e6ca:	ed84 7b02 	vstr	d7, [r4, #8]
 800e6ce:	e7e3      	b.n	800e698 <__ieee754_rem_pio2+0x60>
 800e6d0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800e870 <__ieee754_rem_pio2+0x238>
 800e6d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e6d8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800e878 <__ieee754_rem_pio2+0x240>
 800e6dc:	e7eb      	b.n	800e6b6 <__ieee754_rem_pio2+0x7e>
 800e6de:	4b72      	ldr	r3, [pc, #456]	; (800e8a8 <__ieee754_rem_pio2+0x270>)
 800e6e0:	429e      	cmp	r6, r3
 800e6e2:	dc6e      	bgt.n	800e7c2 <__ieee754_rem_pio2+0x18a>
 800e6e4:	f000 fc9c 	bl	800f020 <fabs>
 800e6e8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800e6ec:	ed9f 6b64 	vldr	d6, [pc, #400]	; 800e880 <__ieee754_rem_pio2+0x248>
 800e6f0:	eea0 7b06 	vfma.f64	d7, d0, d6
 800e6f4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800e6f8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800e6fc:	ee17 0a90 	vmov	r0, s15
 800e700:	eeb1 4b45 	vneg.f64	d4, d5
 800e704:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800e860 <__ieee754_rem_pio2+0x228>
 800e708:	eea5 0b47 	vfms.f64	d0, d5, d7
 800e70c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800e868 <__ieee754_rem_pio2+0x230>
 800e710:	281f      	cmp	r0, #31
 800e712:	ee25 7b07 	vmul.f64	d7, d5, d7
 800e716:	ee30 6b47 	vsub.f64	d6, d0, d7
 800e71a:	dc08      	bgt.n	800e72e <__ieee754_rem_pio2+0xf6>
 800e71c:	4b63      	ldr	r3, [pc, #396]	; (800e8ac <__ieee754_rem_pio2+0x274>)
 800e71e:	1e42      	subs	r2, r0, #1
 800e720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e724:	42b3      	cmp	r3, r6
 800e726:	d002      	beq.n	800e72e <__ieee754_rem_pio2+0xf6>
 800e728:	ed84 6b00 	vstr	d6, [r4]
 800e72c:	e024      	b.n	800e778 <__ieee754_rem_pio2+0x140>
 800e72e:	ee16 3a90 	vmov	r3, s13
 800e732:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800e736:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800e73a:	2b10      	cmp	r3, #16
 800e73c:	ea4f 5226 	mov.w	r2, r6, asr #20
 800e740:	ddf2      	ble.n	800e728 <__ieee754_rem_pio2+0xf0>
 800e742:	eeb0 6b40 	vmov.f64	d6, d0
 800e746:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 800e870 <__ieee754_rem_pio2+0x238>
 800e74a:	eea4 6b03 	vfma.f64	d6, d4, d3
 800e74e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800e752:	eea4 7b03 	vfma.f64	d7, d4, d3
 800e756:	ed9f 3b48 	vldr	d3, [pc, #288]	; 800e878 <__ieee754_rem_pio2+0x240>
 800e75a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800e75e:	ee36 3b47 	vsub.f64	d3, d6, d7
 800e762:	ee13 3a90 	vmov	r3, s7
 800e766:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800e76a:	1ad3      	subs	r3, r2, r3
 800e76c:	2b31      	cmp	r3, #49	; 0x31
 800e76e:	dc17      	bgt.n	800e7a0 <__ieee754_rem_pio2+0x168>
 800e770:	eeb0 0b46 	vmov.f64	d0, d6
 800e774:	ed84 3b00 	vstr	d3, [r4]
 800e778:	ed94 6b00 	vldr	d6, [r4]
 800e77c:	2d00      	cmp	r5, #0
 800e77e:	ee30 0b46 	vsub.f64	d0, d0, d6
 800e782:	ee30 7b47 	vsub.f64	d7, d0, d7
 800e786:	ed84 7b02 	vstr	d7, [r4, #8]
 800e78a:	da85      	bge.n	800e698 <__ieee754_rem_pio2+0x60>
 800e78c:	eeb1 6b46 	vneg.f64	d6, d6
 800e790:	ed84 6b00 	vstr	d6, [r4]
 800e794:	eeb1 7b47 	vneg.f64	d7, d7
 800e798:	4240      	negs	r0, r0
 800e79a:	ed84 7b02 	vstr	d7, [r4, #8]
 800e79e:	e77b      	b.n	800e698 <__ieee754_rem_pio2+0x60>
 800e7a0:	ed9f 3b39 	vldr	d3, [pc, #228]	; 800e888 <__ieee754_rem_pio2+0x250>
 800e7a4:	eeb0 0b46 	vmov.f64	d0, d6
 800e7a8:	eea4 0b03 	vfma.f64	d0, d4, d3
 800e7ac:	ee36 7b40 	vsub.f64	d7, d6, d0
 800e7b0:	ed9f 6b37 	vldr	d6, [pc, #220]	; 800e890 <__ieee754_rem_pio2+0x258>
 800e7b4:	eea4 7b03 	vfma.f64	d7, d4, d3
 800e7b8:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800e7bc:	ee30 6b47 	vsub.f64	d6, d0, d7
 800e7c0:	e7b2      	b.n	800e728 <__ieee754_rem_pio2+0xf0>
 800e7c2:	4b3b      	ldr	r3, [pc, #236]	; (800e8b0 <__ieee754_rem_pio2+0x278>)
 800e7c4:	429e      	cmp	r6, r3
 800e7c6:	dd06      	ble.n	800e7d6 <__ieee754_rem_pio2+0x19e>
 800e7c8:	ee30 7b40 	vsub.f64	d7, d0, d0
 800e7cc:	ed80 7b02 	vstr	d7, [r0, #8]
 800e7d0:	ed80 7b00 	vstr	d7, [r0]
 800e7d4:	e742      	b.n	800e65c <__ieee754_rem_pio2+0x24>
 800e7d6:	1532      	asrs	r2, r6, #20
 800e7d8:	ee10 0a10 	vmov	r0, s0
 800e7dc:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800e7e0:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800e7e4:	ec41 0b17 	vmov	d7, r0, r1
 800e7e8:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800e7ec:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 800e898 <__ieee754_rem_pio2+0x260>
 800e7f0:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800e7f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e7f8:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e7fc:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e800:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800e804:	a902      	add	r1, sp, #8
 800e806:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800e80a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e80e:	ed8d 6b04 	vstr	d6, [sp, #16]
 800e812:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e816:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e81a:	2603      	movs	r6, #3
 800e81c:	4608      	mov	r0, r1
 800e81e:	ed91 7b04 	vldr	d7, [r1, #16]
 800e822:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e82a:	4633      	mov	r3, r6
 800e82c:	f1a1 0108 	sub.w	r1, r1, #8
 800e830:	f106 36ff 	add.w	r6, r6, #4294967295
 800e834:	d0f3      	beq.n	800e81e <__ieee754_rem_pio2+0x1e6>
 800e836:	491f      	ldr	r1, [pc, #124]	; (800e8b4 <__ieee754_rem_pio2+0x27c>)
 800e838:	9101      	str	r1, [sp, #4]
 800e83a:	2102      	movs	r1, #2
 800e83c:	9100      	str	r1, [sp, #0]
 800e83e:	4621      	mov	r1, r4
 800e840:	f000 f8a6 	bl	800e990 <__kernel_rem_pio2>
 800e844:	2d00      	cmp	r5, #0
 800e846:	f6bf af27 	bge.w	800e698 <__ieee754_rem_pio2+0x60>
 800e84a:	ed94 7b00 	vldr	d7, [r4]
 800e84e:	eeb1 7b47 	vneg.f64	d7, d7
 800e852:	ed84 7b00 	vstr	d7, [r4]
 800e856:	ed94 7b02 	vldr	d7, [r4, #8]
 800e85a:	e79b      	b.n	800e794 <__ieee754_rem_pio2+0x15c>
 800e85c:	f3af 8000 	nop.w
 800e860:	54400000 	.word	0x54400000
 800e864:	3ff921fb 	.word	0x3ff921fb
 800e868:	1a626331 	.word	0x1a626331
 800e86c:	3dd0b461 	.word	0x3dd0b461
 800e870:	1a600000 	.word	0x1a600000
 800e874:	3dd0b461 	.word	0x3dd0b461
 800e878:	2e037073 	.word	0x2e037073
 800e87c:	3ba3198a 	.word	0x3ba3198a
 800e880:	6dc9c883 	.word	0x6dc9c883
 800e884:	3fe45f30 	.word	0x3fe45f30
 800e888:	2e000000 	.word	0x2e000000
 800e88c:	3ba3198a 	.word	0x3ba3198a
 800e890:	252049c1 	.word	0x252049c1
 800e894:	397b839a 	.word	0x397b839a
 800e898:	00000000 	.word	0x00000000
 800e89c:	41700000 	.word	0x41700000
 800e8a0:	3fe921fb 	.word	0x3fe921fb
 800e8a4:	4002d97b 	.word	0x4002d97b
 800e8a8:	413921fb 	.word	0x413921fb
 800e8ac:	08012d08 	.word	0x08012d08
 800e8b0:	7fefffff 	.word	0x7fefffff
 800e8b4:	08012d88 	.word	0x08012d88

0800e8b8 <__kernel_cos>:
 800e8b8:	ee10 1a90 	vmov	r1, s1
 800e8bc:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800e8c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e8c4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800e8c8:	da05      	bge.n	800e8d6 <__kernel_cos+0x1e>
 800e8ca:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800e8ce:	ee17 3a90 	vmov	r3, s15
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d03d      	beq.n	800e952 <__kernel_cos+0x9a>
 800e8d6:	ee20 3b00 	vmul.f64	d3, d0, d0
 800e8da:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800e958 <__kernel_cos+0xa0>
 800e8de:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800e960 <__kernel_cos+0xa8>
 800e8e2:	eea3 6b07 	vfma.f64	d6, d3, d7
 800e8e6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800e968 <__kernel_cos+0xb0>
 800e8ea:	eea6 7b03 	vfma.f64	d7, d6, d3
 800e8ee:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800e970 <__kernel_cos+0xb8>
 800e8f2:	eea7 6b03 	vfma.f64	d6, d7, d3
 800e8f6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800e978 <__kernel_cos+0xc0>
 800e8fa:	4b23      	ldr	r3, [pc, #140]	; (800e988 <__kernel_cos+0xd0>)
 800e8fc:	eea6 7b03 	vfma.f64	d7, d6, d3
 800e900:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800e980 <__kernel_cos+0xc8>
 800e904:	4299      	cmp	r1, r3
 800e906:	eea7 6b03 	vfma.f64	d6, d7, d3
 800e90a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800e90e:	ee26 5b03 	vmul.f64	d5, d6, d3
 800e912:	ee23 7b07 	vmul.f64	d7, d3, d7
 800e916:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800e91a:	eea3 6b05 	vfma.f64	d6, d3, d5
 800e91e:	dc04      	bgt.n	800e92a <__kernel_cos+0x72>
 800e920:	ee37 6b46 	vsub.f64	d6, d7, d6
 800e924:	ee34 0b46 	vsub.f64	d0, d4, d6
 800e928:	4770      	bx	lr
 800e92a:	4b18      	ldr	r3, [pc, #96]	; (800e98c <__kernel_cos+0xd4>)
 800e92c:	4299      	cmp	r1, r3
 800e92e:	dc0d      	bgt.n	800e94c <__kernel_cos+0x94>
 800e930:	2200      	movs	r2, #0
 800e932:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800e936:	ec43 2b15 	vmov	d5, r2, r3
 800e93a:	ee34 0b45 	vsub.f64	d0, d4, d5
 800e93e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800e942:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e946:	ee30 0b47 	vsub.f64	d0, d0, d7
 800e94a:	4770      	bx	lr
 800e94c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800e950:	e7f3      	b.n	800e93a <__kernel_cos+0x82>
 800e952:	eeb0 0b44 	vmov.f64	d0, d4
 800e956:	4770      	bx	lr
 800e958:	be8838d4 	.word	0xbe8838d4
 800e95c:	bda8fae9 	.word	0xbda8fae9
 800e960:	bdb4b1c4 	.word	0xbdb4b1c4
 800e964:	3e21ee9e 	.word	0x3e21ee9e
 800e968:	809c52ad 	.word	0x809c52ad
 800e96c:	be927e4f 	.word	0xbe927e4f
 800e970:	19cb1590 	.word	0x19cb1590
 800e974:	3efa01a0 	.word	0x3efa01a0
 800e978:	16c15177 	.word	0x16c15177
 800e97c:	bf56c16c 	.word	0xbf56c16c
 800e980:	5555554c 	.word	0x5555554c
 800e984:	3fa55555 	.word	0x3fa55555
 800e988:	3fd33332 	.word	0x3fd33332
 800e98c:	3fe90000 	.word	0x3fe90000

0800e990 <__kernel_rem_pio2>:
 800e990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e994:	ed2d 8b06 	vpush	{d8-d10}
 800e998:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 800e99c:	469b      	mov	fp, r3
 800e99e:	460f      	mov	r7, r1
 800e9a0:	4bcf      	ldr	r3, [pc, #828]	; (800ece0 <__kernel_rem_pio2+0x350>)
 800e9a2:	99a0      	ldr	r1, [sp, #640]	; 0x280
 800e9a4:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 800e9a8:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800e9ac:	9000      	str	r0, [sp, #0]
 800e9ae:	f112 0f14 	cmn.w	r2, #20
 800e9b2:	bfa8      	it	ge
 800e9b4:	2318      	movge	r3, #24
 800e9b6:	f10b 31ff 	add.w	r1, fp, #4294967295
 800e9ba:	bfb8      	it	lt
 800e9bc:	2300      	movlt	r3, #0
 800e9be:	f06f 0417 	mvn.w	r4, #23
 800e9c2:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 800ecc8 <__kernel_rem_pio2+0x338>
 800e9c6:	bfa4      	itt	ge
 800e9c8:	f1a2 0a03 	subge.w	sl, r2, #3
 800e9cc:	fb9a f3f3 	sdivge	r3, sl, r3
 800e9d0:	fb03 4404 	mla	r4, r3, r4, r4
 800e9d4:	1a5d      	subs	r5, r3, r1
 800e9d6:	4414      	add	r4, r2
 800e9d8:	eb09 0601 	add.w	r6, r9, r1
 800e9dc:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 800e9e0:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	42b2      	cmp	r2, r6
 800e9e8:	dd12      	ble.n	800ea10 <__kernel_rem_pio2+0x80>
 800e9ea:	aa18      	add	r2, sp, #96	; 0x60
 800e9ec:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800e9f0:	460e      	mov	r6, r1
 800e9f2:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 800e9f6:	f1cb 0a01 	rsb	sl, fp, #1
 800e9fa:	eb0a 0006 	add.w	r0, sl, r6
 800e9fe:	4581      	cmp	r9, r0
 800ea00:	db25      	blt.n	800ea4e <__kernel_rem_pio2+0xbe>
 800ea02:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 800ecc8 <__kernel_rem_pio2+0x338>
 800ea06:	f8dd e000 	ldr.w	lr, [sp]
 800ea0a:	4615      	mov	r5, r2
 800ea0c:	2000      	movs	r0, #0
 800ea0e:	e015      	b.n	800ea3c <__kernel_rem_pio2+0xac>
 800ea10:	42d5      	cmn	r5, r2
 800ea12:	d409      	bmi.n	800ea28 <__kernel_rem_pio2+0x98>
 800ea14:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 800ea18:	ee07 0a90 	vmov	s15, r0
 800ea1c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ea20:	eca8 7b02 	vstmia	r8!, {d7}
 800ea24:	3201      	adds	r2, #1
 800ea26:	e7de      	b.n	800e9e6 <__kernel_rem_pio2+0x56>
 800ea28:	eeb0 7b46 	vmov.f64	d7, d6
 800ea2c:	e7f8      	b.n	800ea20 <__kernel_rem_pio2+0x90>
 800ea2e:	ecbe 5b02 	vldmia	lr!, {d5}
 800ea32:	ed95 6b00 	vldr	d6, [r5]
 800ea36:	3001      	adds	r0, #1
 800ea38:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ea3c:	4288      	cmp	r0, r1
 800ea3e:	f1a5 0508 	sub.w	r5, r5, #8
 800ea42:	ddf4      	ble.n	800ea2e <__kernel_rem_pio2+0x9e>
 800ea44:	eca8 7b02 	vstmia	r8!, {d7}
 800ea48:	3208      	adds	r2, #8
 800ea4a:	3601      	adds	r6, #1
 800ea4c:	e7d5      	b.n	800e9fa <__kernel_rem_pio2+0x6a>
 800ea4e:	aa04      	add	r2, sp, #16
 800ea50:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 800ecd0 <__kernel_rem_pio2+0x340>
 800ea54:	ed9f aba0 	vldr	d10, [pc, #640]	; 800ecd8 <__kernel_rem_pio2+0x348>
 800ea58:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800ea5c:	9201      	str	r2, [sp, #4]
 800ea5e:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 800ea62:	464e      	mov	r6, r9
 800ea64:	ab90      	add	r3, sp, #576	; 0x240
 800ea66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ea6a:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800ea6e:	ab04      	add	r3, sp, #16
 800ea70:	4618      	mov	r0, r3
 800ea72:	4632      	mov	r2, r6
 800ea74:	2a00      	cmp	r2, #0
 800ea76:	dc4e      	bgt.n	800eb16 <__kernel_rem_pio2+0x186>
 800ea78:	4620      	mov	r0, r4
 800ea7a:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800ea7e:	f000 fb4f 	bl	800f120 <scalbn>
 800ea82:	eeb0 8b40 	vmov.f64	d8, d0
 800ea86:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800ea8a:	ee28 0b00 	vmul.f64	d0, d8, d0
 800ea8e:	f000 fad3 	bl	800f038 <floor>
 800ea92:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800ea96:	eea0 8b47 	vfms.f64	d8, d0, d7
 800ea9a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800ea9e:	2c00      	cmp	r4, #0
 800eaa0:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800eaa4:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 800eaa8:	ee38 8b40 	vsub.f64	d8, d8, d0
 800eaac:	ee17 8a90 	vmov	r8, s15
 800eab0:	dd46      	ble.n	800eb40 <__kernel_rem_pio2+0x1b0>
 800eab2:	1e70      	subs	r0, r6, #1
 800eab4:	aa04      	add	r2, sp, #16
 800eab6:	f1c4 0c18 	rsb	ip, r4, #24
 800eaba:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 800eabe:	fa45 f20c 	asr.w	r2, r5, ip
 800eac2:	4490      	add	r8, r2
 800eac4:	fa02 f20c 	lsl.w	r2, r2, ip
 800eac8:	1aad      	subs	r5, r5, r2
 800eaca:	aa04      	add	r2, sp, #16
 800eacc:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 800ead0:	f1c4 0217 	rsb	r2, r4, #23
 800ead4:	4115      	asrs	r5, r2
 800ead6:	2d00      	cmp	r5, #0
 800ead8:	dd41      	ble.n	800eb5e <__kernel_rem_pio2+0x1ce>
 800eada:	f04f 0c00 	mov.w	ip, #0
 800eade:	f108 0801 	add.w	r8, r8, #1
 800eae2:	4660      	mov	r0, ip
 800eae4:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800eae8:	4566      	cmp	r6, ip
 800eaea:	dc69      	bgt.n	800ebc0 <__kernel_rem_pio2+0x230>
 800eaec:	2c00      	cmp	r4, #0
 800eaee:	dd03      	ble.n	800eaf8 <__kernel_rem_pio2+0x168>
 800eaf0:	2c01      	cmp	r4, #1
 800eaf2:	d076      	beq.n	800ebe2 <__kernel_rem_pio2+0x252>
 800eaf4:	2c02      	cmp	r4, #2
 800eaf6:	d07f      	beq.n	800ebf8 <__kernel_rem_pio2+0x268>
 800eaf8:	2d02      	cmp	r5, #2
 800eafa:	d130      	bne.n	800eb5e <__kernel_rem_pio2+0x1ce>
 800eafc:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800eb00:	ee30 8b48 	vsub.f64	d8, d0, d8
 800eb04:	b358      	cbz	r0, 800eb5e <__kernel_rem_pio2+0x1ce>
 800eb06:	4620      	mov	r0, r4
 800eb08:	9102      	str	r1, [sp, #8]
 800eb0a:	f000 fb09 	bl	800f120 <scalbn>
 800eb0e:	9902      	ldr	r1, [sp, #8]
 800eb10:	ee38 8b40 	vsub.f64	d8, d8, d0
 800eb14:	e023      	b.n	800eb5e <__kernel_rem_pio2+0x1ce>
 800eb16:	ee20 7b09 	vmul.f64	d7, d0, d9
 800eb1a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800eb1e:	3a01      	subs	r2, #1
 800eb20:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800eb24:	ad68      	add	r5, sp, #416	; 0x1a0
 800eb26:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800eb2a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800eb2e:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800eb32:	eca0 0a01 	vstmia	r0!, {s0}
 800eb36:	ed95 0b00 	vldr	d0, [r5]
 800eb3a:	ee37 0b00 	vadd.f64	d0, d7, d0
 800eb3e:	e799      	b.n	800ea74 <__kernel_rem_pio2+0xe4>
 800eb40:	d105      	bne.n	800eb4e <__kernel_rem_pio2+0x1be>
 800eb42:	1e72      	subs	r2, r6, #1
 800eb44:	a804      	add	r0, sp, #16
 800eb46:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 800eb4a:	15ed      	asrs	r5, r5, #23
 800eb4c:	e7c3      	b.n	800ead6 <__kernel_rem_pio2+0x146>
 800eb4e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800eb52:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800eb56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb5a:	da2f      	bge.n	800ebbc <__kernel_rem_pio2+0x22c>
 800eb5c:	2500      	movs	r5, #0
 800eb5e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800eb62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb66:	f040 8087 	bne.w	800ec78 <__kernel_rem_pio2+0x2e8>
 800eb6a:	1e73      	subs	r3, r6, #1
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f04f 0c00 	mov.w	ip, #0
 800eb72:	4548      	cmp	r0, r9
 800eb74:	da47      	bge.n	800ec06 <__kernel_rem_pio2+0x276>
 800eb76:	f1bc 0f00 	cmp.w	ip, #0
 800eb7a:	d070      	beq.n	800ec5e <__kernel_rem_pio2+0x2ce>
 800eb7c:	aa04      	add	r2, sp, #16
 800eb7e:	3c18      	subs	r4, #24
 800eb80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800eb84:	2a00      	cmp	r2, #0
 800eb86:	d075      	beq.n	800ec74 <__kernel_rem_pio2+0x2e4>
 800eb88:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800eb8c:	4620      	mov	r0, r4
 800eb8e:	9300      	str	r3, [sp, #0]
 800eb90:	f000 fac6 	bl	800f120 <scalbn>
 800eb94:	9b00      	ldr	r3, [sp, #0]
 800eb96:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800ecd0 <__kernel_rem_pio2+0x340>
 800eb9a:	461a      	mov	r2, r3
 800eb9c:	2a00      	cmp	r2, #0
 800eb9e:	f280 80ac 	bge.w	800ecfa <__kernel_rem_pio2+0x36a>
 800eba2:	4619      	mov	r1, r3
 800eba4:	2000      	movs	r0, #0
 800eba6:	2900      	cmp	r1, #0
 800eba8:	f2c0 80cd 	blt.w	800ed46 <__kernel_rem_pio2+0x3b6>
 800ebac:	aa68      	add	r2, sp, #416	; 0x1a0
 800ebae:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 800ebb2:	ed9f 7b45 	vldr	d7, [pc, #276]	; 800ecc8 <__kernel_rem_pio2+0x338>
 800ebb6:	4e4b      	ldr	r6, [pc, #300]	; (800ece4 <__kernel_rem_pio2+0x354>)
 800ebb8:	2200      	movs	r2, #0
 800ebba:	e0b8      	b.n	800ed2e <__kernel_rem_pio2+0x39e>
 800ebbc:	2502      	movs	r5, #2
 800ebbe:	e78c      	b.n	800eada <__kernel_rem_pio2+0x14a>
 800ebc0:	681a      	ldr	r2, [r3, #0]
 800ebc2:	b948      	cbnz	r0, 800ebd8 <__kernel_rem_pio2+0x248>
 800ebc4:	b11a      	cbz	r2, 800ebce <__kernel_rem_pio2+0x23e>
 800ebc6:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800ebca:	601a      	str	r2, [r3, #0]
 800ebcc:	2201      	movs	r2, #1
 800ebce:	f10c 0c01 	add.w	ip, ip, #1
 800ebd2:	3304      	adds	r3, #4
 800ebd4:	4610      	mov	r0, r2
 800ebd6:	e787      	b.n	800eae8 <__kernel_rem_pio2+0x158>
 800ebd8:	ebae 0202 	sub.w	r2, lr, r2
 800ebdc:	601a      	str	r2, [r3, #0]
 800ebde:	4602      	mov	r2, r0
 800ebe0:	e7f5      	b.n	800ebce <__kernel_rem_pio2+0x23e>
 800ebe2:	1e72      	subs	r2, r6, #1
 800ebe4:	ab04      	add	r3, sp, #16
 800ebe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebea:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ebee:	f10d 0c10 	add.w	ip, sp, #16
 800ebf2:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 800ebf6:	e77f      	b.n	800eaf8 <__kernel_rem_pio2+0x168>
 800ebf8:	1e72      	subs	r2, r6, #1
 800ebfa:	ab04      	add	r3, sp, #16
 800ebfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec00:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ec04:	e7f3      	b.n	800ebee <__kernel_rem_pio2+0x25e>
 800ec06:	aa04      	add	r2, sp, #16
 800ec08:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800ec0c:	3801      	subs	r0, #1
 800ec0e:	ea4c 0c02 	orr.w	ip, ip, r2
 800ec12:	e7ae      	b.n	800eb72 <__kernel_rem_pio2+0x1e2>
 800ec14:	3001      	adds	r0, #1
 800ec16:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ec1a:	2a00      	cmp	r2, #0
 800ec1c:	d0fa      	beq.n	800ec14 <__kernel_rem_pio2+0x284>
 800ec1e:	eb06 020b 	add.w	r2, r6, fp
 800ec22:	ad18      	add	r5, sp, #96	; 0x60
 800ec24:	1c73      	adds	r3, r6, #1
 800ec26:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800ec2a:	4406      	add	r6, r0
 800ec2c:	429e      	cmp	r6, r3
 800ec2e:	f6ff af19 	blt.w	800ea64 <__kernel_rem_pio2+0xd4>
 800ec32:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800ec36:	9d00      	ldr	r5, [sp, #0]
 800ec38:	ee07 0a90 	vmov	s15, r0
 800ec3c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ec40:	2000      	movs	r0, #0
 800ec42:	eca2 7b02 	vstmia	r2!, {d7}
 800ec46:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ecc8 <__kernel_rem_pio2+0x338>
 800ec4a:	4694      	mov	ip, r2
 800ec4c:	4288      	cmp	r0, r1
 800ec4e:	dd09      	ble.n	800ec64 <__kernel_rem_pio2+0x2d4>
 800ec50:	a868      	add	r0, sp, #416	; 0x1a0
 800ec52:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800ec56:	ed80 7b00 	vstr	d7, [r0]
 800ec5a:	3301      	adds	r3, #1
 800ec5c:	e7e6      	b.n	800ec2c <__kernel_rem_pio2+0x29c>
 800ec5e:	9b01      	ldr	r3, [sp, #4]
 800ec60:	2001      	movs	r0, #1
 800ec62:	e7d8      	b.n	800ec16 <__kernel_rem_pio2+0x286>
 800ec64:	ecb5 5b02 	vldmia	r5!, {d5}
 800ec68:	ed3c 6b02 	vldmdb	ip!, {d6}
 800ec6c:	3001      	adds	r0, #1
 800ec6e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ec72:	e7eb      	b.n	800ec4c <__kernel_rem_pio2+0x2bc>
 800ec74:	3b01      	subs	r3, #1
 800ec76:	e781      	b.n	800eb7c <__kernel_rem_pio2+0x1ec>
 800ec78:	4260      	negs	r0, r4
 800ec7a:	eeb0 0b48 	vmov.f64	d0, d8
 800ec7e:	f000 fa4f 	bl	800f120 <scalbn>
 800ec82:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800ecd8 <__kernel_rem_pio2+0x348>
 800ec86:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800ec8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec8e:	db2b      	blt.n	800ece8 <__kernel_rem_pio2+0x358>
 800ec90:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800ecd0 <__kernel_rem_pio2+0x340>
 800ec94:	ee20 7b07 	vmul.f64	d7, d0, d7
 800ec98:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800ec9c:	aa04      	add	r2, sp, #16
 800ec9e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800eca2:	eea5 0b46 	vfms.f64	d0, d5, d6
 800eca6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ecaa:	a904      	add	r1, sp, #16
 800ecac:	ee10 3a10 	vmov	r3, s0
 800ecb0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800ecb4:	ee17 2a10 	vmov	r2, s14
 800ecb8:	1c73      	adds	r3, r6, #1
 800ecba:	3418      	adds	r4, #24
 800ecbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ecc0:	e762      	b.n	800eb88 <__kernel_rem_pio2+0x1f8>
 800ecc2:	bf00      	nop
 800ecc4:	f3af 8000 	nop.w
	...
 800ecd4:	3e700000 	.word	0x3e700000
 800ecd8:	00000000 	.word	0x00000000
 800ecdc:	41700000 	.word	0x41700000
 800ece0:	08013740 	.word	0x08013740
 800ece4:	08013700 	.word	0x08013700
 800ece8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ecec:	aa04      	add	r2, sp, #16
 800ecee:	ee10 3a10 	vmov	r3, s0
 800ecf2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800ecf6:	4633      	mov	r3, r6
 800ecf8:	e746      	b.n	800eb88 <__kernel_rem_pio2+0x1f8>
 800ecfa:	a804      	add	r0, sp, #16
 800ecfc:	a968      	add	r1, sp, #416	; 0x1a0
 800ecfe:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800ed02:	9000      	str	r0, [sp, #0]
 800ed04:	ee07 0a90 	vmov	s15, r0
 800ed08:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800ed0c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ed10:	3a01      	subs	r2, #1
 800ed12:	ee27 7b00 	vmul.f64	d7, d7, d0
 800ed16:	ee20 0b06 	vmul.f64	d0, d0, d6
 800ed1a:	ed81 7b00 	vstr	d7, [r1]
 800ed1e:	e73d      	b.n	800eb9c <__kernel_rem_pio2+0x20c>
 800ed20:	ecb6 5b02 	vldmia	r6!, {d5}
 800ed24:	ecb4 6b02 	vldmia	r4!, {d6}
 800ed28:	3201      	adds	r2, #1
 800ed2a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ed2e:	454a      	cmp	r2, r9
 800ed30:	dc01      	bgt.n	800ed36 <__kernel_rem_pio2+0x3a6>
 800ed32:	4290      	cmp	r0, r2
 800ed34:	daf4      	bge.n	800ed20 <__kernel_rem_pio2+0x390>
 800ed36:	aa40      	add	r2, sp, #256	; 0x100
 800ed38:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ed3c:	ed82 7b00 	vstr	d7, [r2]
 800ed40:	3901      	subs	r1, #1
 800ed42:	3001      	adds	r0, #1
 800ed44:	e72f      	b.n	800eba6 <__kernel_rem_pio2+0x216>
 800ed46:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800ed48:	2a02      	cmp	r2, #2
 800ed4a:	dc0a      	bgt.n	800ed62 <__kernel_rem_pio2+0x3d2>
 800ed4c:	2a00      	cmp	r2, #0
 800ed4e:	dc5a      	bgt.n	800ee06 <__kernel_rem_pio2+0x476>
 800ed50:	d039      	beq.n	800edc6 <__kernel_rem_pio2+0x436>
 800ed52:	f008 0007 	and.w	r0, r8, #7
 800ed56:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 800ed5a:	ecbd 8b06 	vpop	{d8-d10}
 800ed5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed62:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800ed64:	2a03      	cmp	r2, #3
 800ed66:	d1f4      	bne.n	800ed52 <__kernel_rem_pio2+0x3c2>
 800ed68:	aa40      	add	r2, sp, #256	; 0x100
 800ed6a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ed6e:	4611      	mov	r1, r2
 800ed70:	4618      	mov	r0, r3
 800ed72:	2800      	cmp	r0, #0
 800ed74:	f1a1 0108 	sub.w	r1, r1, #8
 800ed78:	dc52      	bgt.n	800ee20 <__kernel_rem_pio2+0x490>
 800ed7a:	4619      	mov	r1, r3
 800ed7c:	2901      	cmp	r1, #1
 800ed7e:	f1a2 0208 	sub.w	r2, r2, #8
 800ed82:	dc5d      	bgt.n	800ee40 <__kernel_rem_pio2+0x4b0>
 800ed84:	ed9f 7b40 	vldr	d7, [pc, #256]	; 800ee88 <__kernel_rem_pio2+0x4f8>
 800ed88:	2b01      	cmp	r3, #1
 800ed8a:	dc69      	bgt.n	800ee60 <__kernel_rem_pio2+0x4d0>
 800ed8c:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 800ed90:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 800ed94:	2d00      	cmp	r5, #0
 800ed96:	d16c      	bne.n	800ee72 <__kernel_rem_pio2+0x4e2>
 800ed98:	ed87 5b00 	vstr	d5, [r7]
 800ed9c:	ed87 6b02 	vstr	d6, [r7, #8]
 800eda0:	ed87 7b04 	vstr	d7, [r7, #16]
 800eda4:	e7d5      	b.n	800ed52 <__kernel_rem_pio2+0x3c2>
 800eda6:	aa40      	add	r2, sp, #256	; 0x100
 800eda8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800edac:	ed92 6b00 	vldr	d6, [r2]
 800edb0:	3b01      	subs	r3, #1
 800edb2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	daf5      	bge.n	800eda6 <__kernel_rem_pio2+0x416>
 800edba:	b10d      	cbz	r5, 800edc0 <__kernel_rem_pio2+0x430>
 800edbc:	eeb1 7b47 	vneg.f64	d7, d7
 800edc0:	ed87 7b00 	vstr	d7, [r7]
 800edc4:	e7c5      	b.n	800ed52 <__kernel_rem_pio2+0x3c2>
 800edc6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800ee88 <__kernel_rem_pio2+0x4f8>
 800edca:	e7f4      	b.n	800edb6 <__kernel_rem_pio2+0x426>
 800edcc:	a940      	add	r1, sp, #256	; 0x100
 800edce:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800edd2:	ed91 7b00 	vldr	d7, [r1]
 800edd6:	3a01      	subs	r2, #1
 800edd8:	ee36 6b07 	vadd.f64	d6, d6, d7
 800eddc:	2a00      	cmp	r2, #0
 800edde:	daf5      	bge.n	800edcc <__kernel_rem_pio2+0x43c>
 800ede0:	b1ad      	cbz	r5, 800ee0e <__kernel_rem_pio2+0x47e>
 800ede2:	eeb1 7b46 	vneg.f64	d7, d6
 800ede6:	ed87 7b00 	vstr	d7, [r7]
 800edea:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 800edee:	a942      	add	r1, sp, #264	; 0x108
 800edf0:	2201      	movs	r2, #1
 800edf2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800edf6:	4293      	cmp	r3, r2
 800edf8:	da0c      	bge.n	800ee14 <__kernel_rem_pio2+0x484>
 800edfa:	b10d      	cbz	r5, 800ee00 <__kernel_rem_pio2+0x470>
 800edfc:	eeb1 7b47 	vneg.f64	d7, d7
 800ee00:	ed87 7b02 	vstr	d7, [r7, #8]
 800ee04:	e7a5      	b.n	800ed52 <__kernel_rem_pio2+0x3c2>
 800ee06:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800ee88 <__kernel_rem_pio2+0x4f8>
 800ee0a:	461a      	mov	r2, r3
 800ee0c:	e7e6      	b.n	800eddc <__kernel_rem_pio2+0x44c>
 800ee0e:	eeb0 7b46 	vmov.f64	d7, d6
 800ee12:	e7e8      	b.n	800ede6 <__kernel_rem_pio2+0x456>
 800ee14:	ecb1 6b02 	vldmia	r1!, {d6}
 800ee18:	3201      	adds	r2, #1
 800ee1a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ee1e:	e7ea      	b.n	800edf6 <__kernel_rem_pio2+0x466>
 800ee20:	ed91 7b00 	vldr	d7, [r1]
 800ee24:	ed91 5b02 	vldr	d5, [r1, #8]
 800ee28:	3801      	subs	r0, #1
 800ee2a:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ee2e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ee32:	ed81 6b00 	vstr	d6, [r1]
 800ee36:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ee3a:	ed81 7b02 	vstr	d7, [r1, #8]
 800ee3e:	e798      	b.n	800ed72 <__kernel_rem_pio2+0x3e2>
 800ee40:	ed92 7b00 	vldr	d7, [r2]
 800ee44:	ed92 5b02 	vldr	d5, [r2, #8]
 800ee48:	3901      	subs	r1, #1
 800ee4a:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ee4e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ee52:	ed82 6b00 	vstr	d6, [r2]
 800ee56:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ee5a:	ed82 7b02 	vstr	d7, [r2, #8]
 800ee5e:	e78d      	b.n	800ed7c <__kernel_rem_pio2+0x3ec>
 800ee60:	aa40      	add	r2, sp, #256	; 0x100
 800ee62:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ee66:	ed92 6b00 	vldr	d6, [r2]
 800ee6a:	3b01      	subs	r3, #1
 800ee6c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ee70:	e78a      	b.n	800ed88 <__kernel_rem_pio2+0x3f8>
 800ee72:	eeb1 5b45 	vneg.f64	d5, d5
 800ee76:	eeb1 6b46 	vneg.f64	d6, d6
 800ee7a:	ed87 5b00 	vstr	d5, [r7]
 800ee7e:	eeb1 7b47 	vneg.f64	d7, d7
 800ee82:	ed87 6b02 	vstr	d6, [r7, #8]
 800ee86:	e78b      	b.n	800eda0 <__kernel_rem_pio2+0x410>
	...

0800ee90 <__kernel_sin>:
 800ee90:	ee10 3a90 	vmov	r3, s1
 800ee94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ee98:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ee9c:	da04      	bge.n	800eea8 <__kernel_sin+0x18>
 800ee9e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800eea2:	ee17 3a90 	vmov	r3, s15
 800eea6:	b35b      	cbz	r3, 800ef00 <__kernel_sin+0x70>
 800eea8:	ee20 6b00 	vmul.f64	d6, d0, d0
 800eeac:	ee20 5b06 	vmul.f64	d5, d0, d6
 800eeb0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800ef08 <__kernel_sin+0x78>
 800eeb4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800ef10 <__kernel_sin+0x80>
 800eeb8:	eea6 4b07 	vfma.f64	d4, d6, d7
 800eebc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800ef18 <__kernel_sin+0x88>
 800eec0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800eec4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800ef20 <__kernel_sin+0x90>
 800eec8:	eea7 4b06 	vfma.f64	d4, d7, d6
 800eecc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800ef28 <__kernel_sin+0x98>
 800eed0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800eed4:	b930      	cbnz	r0, 800eee4 <__kernel_sin+0x54>
 800eed6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800ef30 <__kernel_sin+0xa0>
 800eeda:	eea6 4b07 	vfma.f64	d4, d6, d7
 800eede:	eea4 0b05 	vfma.f64	d0, d4, d5
 800eee2:	4770      	bx	lr
 800eee4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800eee8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800eeec:	eea1 7b04 	vfma.f64	d7, d1, d4
 800eef0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800eef4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800ef38 <__kernel_sin+0xa8>
 800eef8:	eea5 1b07 	vfma.f64	d1, d5, d7
 800eefc:	ee30 0b41 	vsub.f64	d0, d0, d1
 800ef00:	4770      	bx	lr
 800ef02:	bf00      	nop
 800ef04:	f3af 8000 	nop.w
 800ef08:	5acfd57c 	.word	0x5acfd57c
 800ef0c:	3de5d93a 	.word	0x3de5d93a
 800ef10:	8a2b9ceb 	.word	0x8a2b9ceb
 800ef14:	be5ae5e6 	.word	0xbe5ae5e6
 800ef18:	57b1fe7d 	.word	0x57b1fe7d
 800ef1c:	3ec71de3 	.word	0x3ec71de3
 800ef20:	19c161d5 	.word	0x19c161d5
 800ef24:	bf2a01a0 	.word	0xbf2a01a0
 800ef28:	1110f8a6 	.word	0x1110f8a6
 800ef2c:	3f811111 	.word	0x3f811111
 800ef30:	55555549 	.word	0x55555549
 800ef34:	bfc55555 	.word	0xbfc55555
 800ef38:	55555549 	.word	0x55555549
 800ef3c:	3fc55555 	.word	0x3fc55555

0800ef40 <with_errno>:
 800ef40:	b513      	push	{r0, r1, r4, lr}
 800ef42:	4604      	mov	r4, r0
 800ef44:	ed8d 0b00 	vstr	d0, [sp]
 800ef48:	f000 f97c 	bl	800f244 <__errno>
 800ef4c:	ed9d 0b00 	vldr	d0, [sp]
 800ef50:	6004      	str	r4, [r0, #0]
 800ef52:	b002      	add	sp, #8
 800ef54:	bd10      	pop	{r4, pc}

0800ef56 <xflow>:
 800ef56:	b082      	sub	sp, #8
 800ef58:	b158      	cbz	r0, 800ef72 <xflow+0x1c>
 800ef5a:	eeb1 7b40 	vneg.f64	d7, d0
 800ef5e:	ed8d 7b00 	vstr	d7, [sp]
 800ef62:	ed9d 7b00 	vldr	d7, [sp]
 800ef66:	2022      	movs	r0, #34	; 0x22
 800ef68:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ef6c:	b002      	add	sp, #8
 800ef6e:	f7ff bfe7 	b.w	800ef40 <with_errno>
 800ef72:	eeb0 7b40 	vmov.f64	d7, d0
 800ef76:	e7f2      	b.n	800ef5e <xflow+0x8>

0800ef78 <__math_uflow>:
 800ef78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ef80 <__math_uflow+0x8>
 800ef7c:	f7ff bfeb 	b.w	800ef56 <xflow>
 800ef80:	00000000 	.word	0x00000000
 800ef84:	10000000 	.word	0x10000000

0800ef88 <__math_oflow>:
 800ef88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ef90 <__math_oflow+0x8>
 800ef8c:	f7ff bfe3 	b.w	800ef56 <xflow>
 800ef90:	00000000 	.word	0x00000000
 800ef94:	70000000 	.word	0x70000000

0800ef98 <__math_divzero>:
 800ef98:	b082      	sub	sp, #8
 800ef9a:	2800      	cmp	r0, #0
 800ef9c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800efa0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800efa4:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800efa8:	ed8d 7b00 	vstr	d7, [sp]
 800efac:	ed9d 0b00 	vldr	d0, [sp]
 800efb0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800efc0 <__math_divzero+0x28>
 800efb4:	2022      	movs	r0, #34	; 0x22
 800efb6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800efba:	b002      	add	sp, #8
 800efbc:	f7ff bfc0 	b.w	800ef40 <with_errno>
	...

0800efc8 <__math_invalid>:
 800efc8:	eeb0 7b40 	vmov.f64	d7, d0
 800efcc:	eeb4 7b47 	vcmp.f64	d7, d7
 800efd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efd4:	ee30 6b40 	vsub.f64	d6, d0, d0
 800efd8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800efdc:	d602      	bvs.n	800efe4 <__math_invalid+0x1c>
 800efde:	2021      	movs	r0, #33	; 0x21
 800efe0:	f7ff bfae 	b.w	800ef40 <with_errno>
 800efe4:	4770      	bx	lr

0800efe6 <__math_check_uflow>:
 800efe6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800efea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efee:	d102      	bne.n	800eff6 <__math_check_uflow+0x10>
 800eff0:	2022      	movs	r0, #34	; 0x22
 800eff2:	f7ff bfa5 	b.w	800ef40 <with_errno>
 800eff6:	4770      	bx	lr

0800eff8 <__math_check_oflow>:
 800eff8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800f018 <__math_check_oflow+0x20>
 800effc:	eeb0 7bc0 	vabs.f64	d7, d0
 800f000:	eeb4 7b46 	vcmp.f64	d7, d6
 800f004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f008:	dd02      	ble.n	800f010 <__math_check_oflow+0x18>
 800f00a:	2022      	movs	r0, #34	; 0x22
 800f00c:	f7ff bf98 	b.w	800ef40 <with_errno>
 800f010:	4770      	bx	lr
 800f012:	bf00      	nop
 800f014:	f3af 8000 	nop.w
 800f018:	ffffffff 	.word	0xffffffff
 800f01c:	7fefffff 	.word	0x7fefffff

0800f020 <fabs>:
 800f020:	ec51 0b10 	vmov	r0, r1, d0
 800f024:	ee10 2a10 	vmov	r2, s0
 800f028:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f02c:	ec43 2b10 	vmov	d0, r2, r3
 800f030:	4770      	bx	lr
 800f032:	0000      	movs	r0, r0
 800f034:	0000      	movs	r0, r0
	...

0800f038 <floor>:
 800f038:	ee10 1a90 	vmov	r1, s1
 800f03c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f040:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800f044:	2b13      	cmp	r3, #19
 800f046:	b530      	push	{r4, r5, lr}
 800f048:	ee10 0a10 	vmov	r0, s0
 800f04c:	ee10 5a10 	vmov	r5, s0
 800f050:	dc31      	bgt.n	800f0b6 <floor+0x7e>
 800f052:	2b00      	cmp	r3, #0
 800f054:	da15      	bge.n	800f082 <floor+0x4a>
 800f056:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800f110 <floor+0xd8>
 800f05a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f05e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f066:	dd07      	ble.n	800f078 <floor+0x40>
 800f068:	2900      	cmp	r1, #0
 800f06a:	da4e      	bge.n	800f10a <floor+0xd2>
 800f06c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f070:	4318      	orrs	r0, r3
 800f072:	d001      	beq.n	800f078 <floor+0x40>
 800f074:	4928      	ldr	r1, [pc, #160]	; (800f118 <floor+0xe0>)
 800f076:	2000      	movs	r0, #0
 800f078:	460b      	mov	r3, r1
 800f07a:	4602      	mov	r2, r0
 800f07c:	ec43 2b10 	vmov	d0, r2, r3
 800f080:	e020      	b.n	800f0c4 <floor+0x8c>
 800f082:	4a26      	ldr	r2, [pc, #152]	; (800f11c <floor+0xe4>)
 800f084:	411a      	asrs	r2, r3
 800f086:	ea01 0402 	and.w	r4, r1, r2
 800f08a:	4304      	orrs	r4, r0
 800f08c:	d01a      	beq.n	800f0c4 <floor+0x8c>
 800f08e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800f110 <floor+0xd8>
 800f092:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f096:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f09a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f09e:	ddeb      	ble.n	800f078 <floor+0x40>
 800f0a0:	2900      	cmp	r1, #0
 800f0a2:	bfbe      	ittt	lt
 800f0a4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800f0a8:	fa40 f303 	asrlt.w	r3, r0, r3
 800f0ac:	18c9      	addlt	r1, r1, r3
 800f0ae:	ea21 0102 	bic.w	r1, r1, r2
 800f0b2:	2000      	movs	r0, #0
 800f0b4:	e7e0      	b.n	800f078 <floor+0x40>
 800f0b6:	2b33      	cmp	r3, #51	; 0x33
 800f0b8:	dd05      	ble.n	800f0c6 <floor+0x8e>
 800f0ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f0be:	d101      	bne.n	800f0c4 <floor+0x8c>
 800f0c0:	ee30 0b00 	vadd.f64	d0, d0, d0
 800f0c4:	bd30      	pop	{r4, r5, pc}
 800f0c6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800f0ca:	f04f 32ff 	mov.w	r2, #4294967295
 800f0ce:	40e2      	lsrs	r2, r4
 800f0d0:	4202      	tst	r2, r0
 800f0d2:	d0f7      	beq.n	800f0c4 <floor+0x8c>
 800f0d4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800f110 <floor+0xd8>
 800f0d8:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f0dc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f0e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0e4:	ddc8      	ble.n	800f078 <floor+0x40>
 800f0e6:	2900      	cmp	r1, #0
 800f0e8:	da02      	bge.n	800f0f0 <floor+0xb8>
 800f0ea:	2b14      	cmp	r3, #20
 800f0ec:	d103      	bne.n	800f0f6 <floor+0xbe>
 800f0ee:	3101      	adds	r1, #1
 800f0f0:	ea20 0002 	bic.w	r0, r0, r2
 800f0f4:	e7c0      	b.n	800f078 <floor+0x40>
 800f0f6:	2401      	movs	r4, #1
 800f0f8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f0fc:	fa04 f303 	lsl.w	r3, r4, r3
 800f100:	4418      	add	r0, r3
 800f102:	42a8      	cmp	r0, r5
 800f104:	bf38      	it	cc
 800f106:	1909      	addcc	r1, r1, r4
 800f108:	e7f2      	b.n	800f0f0 <floor+0xb8>
 800f10a:	2000      	movs	r0, #0
 800f10c:	4601      	mov	r1, r0
 800f10e:	e7b3      	b.n	800f078 <floor+0x40>
 800f110:	8800759c 	.word	0x8800759c
 800f114:	7e37e43c 	.word	0x7e37e43c
 800f118:	bff00000 	.word	0xbff00000
 800f11c:	000fffff 	.word	0x000fffff

0800f120 <scalbn>:
 800f120:	b082      	sub	sp, #8
 800f122:	ed8d 0b00 	vstr	d0, [sp]
 800f126:	9b01      	ldr	r3, [sp, #4]
 800f128:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f12c:	b9a2      	cbnz	r2, 800f158 <scalbn+0x38>
 800f12e:	9a00      	ldr	r2, [sp, #0]
 800f130:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f134:	4313      	orrs	r3, r2
 800f136:	d03a      	beq.n	800f1ae <scalbn+0x8e>
 800f138:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800f210 <scalbn+0xf0>
 800f13c:	4b40      	ldr	r3, [pc, #256]	; (800f240 <scalbn+0x120>)
 800f13e:	ee20 7b07 	vmul.f64	d7, d0, d7
 800f142:	4298      	cmp	r0, r3
 800f144:	ed8d 7b00 	vstr	d7, [sp]
 800f148:	da11      	bge.n	800f16e <scalbn+0x4e>
 800f14a:	ed9f 7b33 	vldr	d7, [pc, #204]	; 800f218 <scalbn+0xf8>
 800f14e:	ed9d 6b00 	vldr	d6, [sp]
 800f152:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f156:	e007      	b.n	800f168 <scalbn+0x48>
 800f158:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f15c:	428a      	cmp	r2, r1
 800f15e:	d10a      	bne.n	800f176 <scalbn+0x56>
 800f160:	ed9d 7b00 	vldr	d7, [sp]
 800f164:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f168:	ed8d 7b00 	vstr	d7, [sp]
 800f16c:	e01f      	b.n	800f1ae <scalbn+0x8e>
 800f16e:	9b01      	ldr	r3, [sp, #4]
 800f170:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f174:	3a36      	subs	r2, #54	; 0x36
 800f176:	4402      	add	r2, r0
 800f178:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f17c:	428a      	cmp	r2, r1
 800f17e:	dd0a      	ble.n	800f196 <scalbn+0x76>
 800f180:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800f220 <scalbn+0x100>
 800f184:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800f228 <scalbn+0x108>
 800f188:	eeb0 6b47 	vmov.f64	d6, d7
 800f18c:	9b01      	ldr	r3, [sp, #4]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	fe27 7b05 	vselge.f64	d7, d7, d5
 800f194:	e7dd      	b.n	800f152 <scalbn+0x32>
 800f196:	2a00      	cmp	r2, #0
 800f198:	dd0d      	ble.n	800f1b6 <scalbn+0x96>
 800f19a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f19e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f1a2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f1a6:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f1aa:	e9cd 0100 	strd	r0, r1, [sp]
 800f1ae:	ed9d 0b00 	vldr	d0, [sp]
 800f1b2:	b002      	add	sp, #8
 800f1b4:	4770      	bx	lr
 800f1b6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f1ba:	da18      	bge.n	800f1ee <scalbn+0xce>
 800f1bc:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f1c0:	4298      	cmp	r0, r3
 800f1c2:	9b01      	ldr	r3, [sp, #4]
 800f1c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f1c8:	dd09      	ble.n	800f1de <scalbn+0xbe>
 800f1ca:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800f220 <scalbn+0x100>
 800f1ce:	ed9f 5b16 	vldr	d5, [pc, #88]	; 800f228 <scalbn+0x108>
 800f1d2:	eeb0 6b47 	vmov.f64	d6, d7
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	fe07 7b05 	vseleq.f64	d7, d7, d5
 800f1dc:	e7b9      	b.n	800f152 <scalbn+0x32>
 800f1de:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800f218 <scalbn+0xf8>
 800f1e2:	ed9f 5b13 	vldr	d5, [pc, #76]	; 800f230 <scalbn+0x110>
 800f1e6:	eeb0 6b47 	vmov.f64	d6, d7
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	e7f4      	b.n	800f1d8 <scalbn+0xb8>
 800f1ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f1f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f1f6:	3236      	adds	r2, #54	; 0x36
 800f1f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f1fc:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f200:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800f238 <scalbn+0x118>
 800f204:	ec41 0b17 	vmov	d7, r0, r1
 800f208:	e7a3      	b.n	800f152 <scalbn+0x32>
 800f20a:	bf00      	nop
 800f20c:	f3af 8000 	nop.w
 800f210:	00000000 	.word	0x00000000
 800f214:	43500000 	.word	0x43500000
 800f218:	c2f8f359 	.word	0xc2f8f359
 800f21c:	01a56e1f 	.word	0x01a56e1f
 800f220:	8800759c 	.word	0x8800759c
 800f224:	7e37e43c 	.word	0x7e37e43c
 800f228:	8800759c 	.word	0x8800759c
 800f22c:	fe37e43c 	.word	0xfe37e43c
 800f230:	c2f8f359 	.word	0xc2f8f359
 800f234:	81a56e1f 	.word	0x81a56e1f
 800f238:	00000000 	.word	0x00000000
 800f23c:	3c900000 	.word	0x3c900000
 800f240:	ffff3cb0 	.word	0xffff3cb0

0800f244 <__errno>:
 800f244:	4b01      	ldr	r3, [pc, #4]	; (800f24c <__errno+0x8>)
 800f246:	6818      	ldr	r0, [r3, #0]
 800f248:	4770      	bx	lr
 800f24a:	bf00      	nop
 800f24c:	24000220 	.word	0x24000220

0800f250 <__libc_init_array>:
 800f250:	b570      	push	{r4, r5, r6, lr}
 800f252:	4d0d      	ldr	r5, [pc, #52]	; (800f288 <__libc_init_array+0x38>)
 800f254:	4c0d      	ldr	r4, [pc, #52]	; (800f28c <__libc_init_array+0x3c>)
 800f256:	1b64      	subs	r4, r4, r5
 800f258:	10a4      	asrs	r4, r4, #2
 800f25a:	2600      	movs	r6, #0
 800f25c:	42a6      	cmp	r6, r4
 800f25e:	d109      	bne.n	800f274 <__libc_init_array+0x24>
 800f260:	4d0b      	ldr	r5, [pc, #44]	; (800f290 <__libc_init_array+0x40>)
 800f262:	4c0c      	ldr	r4, [pc, #48]	; (800f294 <__libc_init_array+0x44>)
 800f264:	f002 fcd4 	bl	8011c10 <_init>
 800f268:	1b64      	subs	r4, r4, r5
 800f26a:	10a4      	asrs	r4, r4, #2
 800f26c:	2600      	movs	r6, #0
 800f26e:	42a6      	cmp	r6, r4
 800f270:	d105      	bne.n	800f27e <__libc_init_array+0x2e>
 800f272:	bd70      	pop	{r4, r5, r6, pc}
 800f274:	f855 3b04 	ldr.w	r3, [r5], #4
 800f278:	4798      	blx	r3
 800f27a:	3601      	adds	r6, #1
 800f27c:	e7ee      	b.n	800f25c <__libc_init_array+0xc>
 800f27e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f282:	4798      	blx	r3
 800f284:	3601      	adds	r6, #1
 800f286:	e7f2      	b.n	800f26e <__libc_init_array+0x1e>
 800f288:	08013b3c 	.word	0x08013b3c
 800f28c:	08013b3c 	.word	0x08013b3c
 800f290:	08013b3c 	.word	0x08013b3c
 800f294:	08013b44 	.word	0x08013b44

0800f298 <memset>:
 800f298:	4402      	add	r2, r0
 800f29a:	4603      	mov	r3, r0
 800f29c:	4293      	cmp	r3, r2
 800f29e:	d100      	bne.n	800f2a2 <memset+0xa>
 800f2a0:	4770      	bx	lr
 800f2a2:	f803 1b01 	strb.w	r1, [r3], #1
 800f2a6:	e7f9      	b.n	800f29c <memset+0x4>

0800f2a8 <__cvt>:
 800f2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2aa:	ed2d 8b02 	vpush	{d8}
 800f2ae:	eeb0 8b40 	vmov.f64	d8, d0
 800f2b2:	b085      	sub	sp, #20
 800f2b4:	4617      	mov	r7, r2
 800f2b6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f2b8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f2ba:	ee18 2a90 	vmov	r2, s17
 800f2be:	f025 0520 	bic.w	r5, r5, #32
 800f2c2:	2a00      	cmp	r2, #0
 800f2c4:	bfb6      	itet	lt
 800f2c6:	222d      	movlt	r2, #45	; 0x2d
 800f2c8:	2200      	movge	r2, #0
 800f2ca:	eeb1 8b40 	vneglt.f64	d8, d0
 800f2ce:	2d46      	cmp	r5, #70	; 0x46
 800f2d0:	460c      	mov	r4, r1
 800f2d2:	701a      	strb	r2, [r3, #0]
 800f2d4:	d004      	beq.n	800f2e0 <__cvt+0x38>
 800f2d6:	2d45      	cmp	r5, #69	; 0x45
 800f2d8:	d100      	bne.n	800f2dc <__cvt+0x34>
 800f2da:	3401      	adds	r4, #1
 800f2dc:	2102      	movs	r1, #2
 800f2de:	e000      	b.n	800f2e2 <__cvt+0x3a>
 800f2e0:	2103      	movs	r1, #3
 800f2e2:	ab03      	add	r3, sp, #12
 800f2e4:	9301      	str	r3, [sp, #4]
 800f2e6:	ab02      	add	r3, sp, #8
 800f2e8:	9300      	str	r3, [sp, #0]
 800f2ea:	4622      	mov	r2, r4
 800f2ec:	4633      	mov	r3, r6
 800f2ee:	eeb0 0b48 	vmov.f64	d0, d8
 800f2f2:	f000 fddd 	bl	800feb0 <_dtoa_r>
 800f2f6:	2d47      	cmp	r5, #71	; 0x47
 800f2f8:	d109      	bne.n	800f30e <__cvt+0x66>
 800f2fa:	07fb      	lsls	r3, r7, #31
 800f2fc:	d407      	bmi.n	800f30e <__cvt+0x66>
 800f2fe:	9b03      	ldr	r3, [sp, #12]
 800f300:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f302:	1a1b      	subs	r3, r3, r0
 800f304:	6013      	str	r3, [r2, #0]
 800f306:	b005      	add	sp, #20
 800f308:	ecbd 8b02 	vpop	{d8}
 800f30c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f30e:	2d46      	cmp	r5, #70	; 0x46
 800f310:	eb00 0204 	add.w	r2, r0, r4
 800f314:	d10c      	bne.n	800f330 <__cvt+0x88>
 800f316:	7803      	ldrb	r3, [r0, #0]
 800f318:	2b30      	cmp	r3, #48	; 0x30
 800f31a:	d107      	bne.n	800f32c <__cvt+0x84>
 800f31c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f324:	bf1c      	itt	ne
 800f326:	f1c4 0401 	rsbne	r4, r4, #1
 800f32a:	6034      	strne	r4, [r6, #0]
 800f32c:	6833      	ldr	r3, [r6, #0]
 800f32e:	441a      	add	r2, r3
 800f330:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f338:	bf08      	it	eq
 800f33a:	9203      	streq	r2, [sp, #12]
 800f33c:	2130      	movs	r1, #48	; 0x30
 800f33e:	9b03      	ldr	r3, [sp, #12]
 800f340:	4293      	cmp	r3, r2
 800f342:	d2dc      	bcs.n	800f2fe <__cvt+0x56>
 800f344:	1c5c      	adds	r4, r3, #1
 800f346:	9403      	str	r4, [sp, #12]
 800f348:	7019      	strb	r1, [r3, #0]
 800f34a:	e7f8      	b.n	800f33e <__cvt+0x96>

0800f34c <__exponent>:
 800f34c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f34e:	4603      	mov	r3, r0
 800f350:	2900      	cmp	r1, #0
 800f352:	bfb8      	it	lt
 800f354:	4249      	neglt	r1, r1
 800f356:	f803 2b02 	strb.w	r2, [r3], #2
 800f35a:	bfb4      	ite	lt
 800f35c:	222d      	movlt	r2, #45	; 0x2d
 800f35e:	222b      	movge	r2, #43	; 0x2b
 800f360:	2909      	cmp	r1, #9
 800f362:	7042      	strb	r2, [r0, #1]
 800f364:	dd2a      	ble.n	800f3bc <__exponent+0x70>
 800f366:	f10d 0407 	add.w	r4, sp, #7
 800f36a:	46a4      	mov	ip, r4
 800f36c:	270a      	movs	r7, #10
 800f36e:	46a6      	mov	lr, r4
 800f370:	460a      	mov	r2, r1
 800f372:	fb91 f6f7 	sdiv	r6, r1, r7
 800f376:	fb07 1516 	mls	r5, r7, r6, r1
 800f37a:	3530      	adds	r5, #48	; 0x30
 800f37c:	2a63      	cmp	r2, #99	; 0x63
 800f37e:	f104 34ff 	add.w	r4, r4, #4294967295
 800f382:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f386:	4631      	mov	r1, r6
 800f388:	dcf1      	bgt.n	800f36e <__exponent+0x22>
 800f38a:	3130      	adds	r1, #48	; 0x30
 800f38c:	f1ae 0502 	sub.w	r5, lr, #2
 800f390:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f394:	1c44      	adds	r4, r0, #1
 800f396:	4629      	mov	r1, r5
 800f398:	4561      	cmp	r1, ip
 800f39a:	d30a      	bcc.n	800f3b2 <__exponent+0x66>
 800f39c:	f10d 0209 	add.w	r2, sp, #9
 800f3a0:	eba2 020e 	sub.w	r2, r2, lr
 800f3a4:	4565      	cmp	r5, ip
 800f3a6:	bf88      	it	hi
 800f3a8:	2200      	movhi	r2, #0
 800f3aa:	4413      	add	r3, r2
 800f3ac:	1a18      	subs	r0, r3, r0
 800f3ae:	b003      	add	sp, #12
 800f3b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f3b6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f3ba:	e7ed      	b.n	800f398 <__exponent+0x4c>
 800f3bc:	2330      	movs	r3, #48	; 0x30
 800f3be:	3130      	adds	r1, #48	; 0x30
 800f3c0:	7083      	strb	r3, [r0, #2]
 800f3c2:	70c1      	strb	r1, [r0, #3]
 800f3c4:	1d03      	adds	r3, r0, #4
 800f3c6:	e7f1      	b.n	800f3ac <__exponent+0x60>

0800f3c8 <_printf_float>:
 800f3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3cc:	b08b      	sub	sp, #44	; 0x2c
 800f3ce:	460c      	mov	r4, r1
 800f3d0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800f3d4:	4616      	mov	r6, r2
 800f3d6:	461f      	mov	r7, r3
 800f3d8:	4605      	mov	r5, r0
 800f3da:	f001 fca3 	bl	8010d24 <_localeconv_r>
 800f3de:	f8d0 b000 	ldr.w	fp, [r0]
 800f3e2:	4658      	mov	r0, fp
 800f3e4:	f7f0 ff7c 	bl	80002e0 <strlen>
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	9308      	str	r3, [sp, #32]
 800f3ec:	f8d8 3000 	ldr.w	r3, [r8]
 800f3f0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800f3f4:	6822      	ldr	r2, [r4, #0]
 800f3f6:	3307      	adds	r3, #7
 800f3f8:	f023 0307 	bic.w	r3, r3, #7
 800f3fc:	f103 0108 	add.w	r1, r3, #8
 800f400:	f8c8 1000 	str.w	r1, [r8]
 800f404:	4682      	mov	sl, r0
 800f406:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f40a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800f40e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800f670 <_printf_float+0x2a8>
 800f412:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800f416:	eeb0 6bc0 	vabs.f64	d6, d0
 800f41a:	eeb4 6b47 	vcmp.f64	d6, d7
 800f41e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f422:	dd24      	ble.n	800f46e <_printf_float+0xa6>
 800f424:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f42c:	d502      	bpl.n	800f434 <_printf_float+0x6c>
 800f42e:	232d      	movs	r3, #45	; 0x2d
 800f430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f434:	4b90      	ldr	r3, [pc, #576]	; (800f678 <_printf_float+0x2b0>)
 800f436:	4891      	ldr	r0, [pc, #580]	; (800f67c <_printf_float+0x2b4>)
 800f438:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800f43c:	bf94      	ite	ls
 800f43e:	4698      	movls	r8, r3
 800f440:	4680      	movhi	r8, r0
 800f442:	2303      	movs	r3, #3
 800f444:	6123      	str	r3, [r4, #16]
 800f446:	f022 0204 	bic.w	r2, r2, #4
 800f44a:	2300      	movs	r3, #0
 800f44c:	6022      	str	r2, [r4, #0]
 800f44e:	9304      	str	r3, [sp, #16]
 800f450:	9700      	str	r7, [sp, #0]
 800f452:	4633      	mov	r3, r6
 800f454:	aa09      	add	r2, sp, #36	; 0x24
 800f456:	4621      	mov	r1, r4
 800f458:	4628      	mov	r0, r5
 800f45a:	f000 f9d3 	bl	800f804 <_printf_common>
 800f45e:	3001      	adds	r0, #1
 800f460:	f040 808a 	bne.w	800f578 <_printf_float+0x1b0>
 800f464:	f04f 30ff 	mov.w	r0, #4294967295
 800f468:	b00b      	add	sp, #44	; 0x2c
 800f46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f46e:	eeb4 0b40 	vcmp.f64	d0, d0
 800f472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f476:	d709      	bvc.n	800f48c <_printf_float+0xc4>
 800f478:	ee10 3a90 	vmov	r3, s1
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	bfbc      	itt	lt
 800f480:	232d      	movlt	r3, #45	; 0x2d
 800f482:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f486:	487e      	ldr	r0, [pc, #504]	; (800f680 <_printf_float+0x2b8>)
 800f488:	4b7e      	ldr	r3, [pc, #504]	; (800f684 <_printf_float+0x2bc>)
 800f48a:	e7d5      	b.n	800f438 <_printf_float+0x70>
 800f48c:	6863      	ldr	r3, [r4, #4]
 800f48e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800f492:	9104      	str	r1, [sp, #16]
 800f494:	1c59      	adds	r1, r3, #1
 800f496:	d13c      	bne.n	800f512 <_printf_float+0x14a>
 800f498:	2306      	movs	r3, #6
 800f49a:	6063      	str	r3, [r4, #4]
 800f49c:	2300      	movs	r3, #0
 800f49e:	9303      	str	r3, [sp, #12]
 800f4a0:	ab08      	add	r3, sp, #32
 800f4a2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800f4a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f4aa:	ab07      	add	r3, sp, #28
 800f4ac:	6861      	ldr	r1, [r4, #4]
 800f4ae:	9300      	str	r3, [sp, #0]
 800f4b0:	6022      	str	r2, [r4, #0]
 800f4b2:	f10d 031b 	add.w	r3, sp, #27
 800f4b6:	4628      	mov	r0, r5
 800f4b8:	f7ff fef6 	bl	800f2a8 <__cvt>
 800f4bc:	9b04      	ldr	r3, [sp, #16]
 800f4be:	9907      	ldr	r1, [sp, #28]
 800f4c0:	2b47      	cmp	r3, #71	; 0x47
 800f4c2:	4680      	mov	r8, r0
 800f4c4:	d108      	bne.n	800f4d8 <_printf_float+0x110>
 800f4c6:	1cc8      	adds	r0, r1, #3
 800f4c8:	db02      	blt.n	800f4d0 <_printf_float+0x108>
 800f4ca:	6863      	ldr	r3, [r4, #4]
 800f4cc:	4299      	cmp	r1, r3
 800f4ce:	dd41      	ble.n	800f554 <_printf_float+0x18c>
 800f4d0:	f1a9 0902 	sub.w	r9, r9, #2
 800f4d4:	fa5f f989 	uxtb.w	r9, r9
 800f4d8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800f4dc:	d820      	bhi.n	800f520 <_printf_float+0x158>
 800f4de:	3901      	subs	r1, #1
 800f4e0:	464a      	mov	r2, r9
 800f4e2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f4e6:	9107      	str	r1, [sp, #28]
 800f4e8:	f7ff ff30 	bl	800f34c <__exponent>
 800f4ec:	9a08      	ldr	r2, [sp, #32]
 800f4ee:	9004      	str	r0, [sp, #16]
 800f4f0:	1813      	adds	r3, r2, r0
 800f4f2:	2a01      	cmp	r2, #1
 800f4f4:	6123      	str	r3, [r4, #16]
 800f4f6:	dc02      	bgt.n	800f4fe <_printf_float+0x136>
 800f4f8:	6822      	ldr	r2, [r4, #0]
 800f4fa:	07d2      	lsls	r2, r2, #31
 800f4fc:	d501      	bpl.n	800f502 <_printf_float+0x13a>
 800f4fe:	3301      	adds	r3, #1
 800f500:	6123      	str	r3, [r4, #16]
 800f502:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d0a2      	beq.n	800f450 <_printf_float+0x88>
 800f50a:	232d      	movs	r3, #45	; 0x2d
 800f50c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f510:	e79e      	b.n	800f450 <_printf_float+0x88>
 800f512:	9904      	ldr	r1, [sp, #16]
 800f514:	2947      	cmp	r1, #71	; 0x47
 800f516:	d1c1      	bne.n	800f49c <_printf_float+0xd4>
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d1bf      	bne.n	800f49c <_printf_float+0xd4>
 800f51c:	2301      	movs	r3, #1
 800f51e:	e7bc      	b.n	800f49a <_printf_float+0xd2>
 800f520:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800f524:	d118      	bne.n	800f558 <_printf_float+0x190>
 800f526:	2900      	cmp	r1, #0
 800f528:	6863      	ldr	r3, [r4, #4]
 800f52a:	dd0b      	ble.n	800f544 <_printf_float+0x17c>
 800f52c:	6121      	str	r1, [r4, #16]
 800f52e:	b913      	cbnz	r3, 800f536 <_printf_float+0x16e>
 800f530:	6822      	ldr	r2, [r4, #0]
 800f532:	07d0      	lsls	r0, r2, #31
 800f534:	d502      	bpl.n	800f53c <_printf_float+0x174>
 800f536:	3301      	adds	r3, #1
 800f538:	440b      	add	r3, r1
 800f53a:	6123      	str	r3, [r4, #16]
 800f53c:	2300      	movs	r3, #0
 800f53e:	65a1      	str	r1, [r4, #88]	; 0x58
 800f540:	9304      	str	r3, [sp, #16]
 800f542:	e7de      	b.n	800f502 <_printf_float+0x13a>
 800f544:	b913      	cbnz	r3, 800f54c <_printf_float+0x184>
 800f546:	6822      	ldr	r2, [r4, #0]
 800f548:	07d2      	lsls	r2, r2, #31
 800f54a:	d501      	bpl.n	800f550 <_printf_float+0x188>
 800f54c:	3302      	adds	r3, #2
 800f54e:	e7f4      	b.n	800f53a <_printf_float+0x172>
 800f550:	2301      	movs	r3, #1
 800f552:	e7f2      	b.n	800f53a <_printf_float+0x172>
 800f554:	f04f 0967 	mov.w	r9, #103	; 0x67
 800f558:	9b08      	ldr	r3, [sp, #32]
 800f55a:	4299      	cmp	r1, r3
 800f55c:	db05      	blt.n	800f56a <_printf_float+0x1a2>
 800f55e:	6823      	ldr	r3, [r4, #0]
 800f560:	6121      	str	r1, [r4, #16]
 800f562:	07d8      	lsls	r0, r3, #31
 800f564:	d5ea      	bpl.n	800f53c <_printf_float+0x174>
 800f566:	1c4b      	adds	r3, r1, #1
 800f568:	e7e7      	b.n	800f53a <_printf_float+0x172>
 800f56a:	2900      	cmp	r1, #0
 800f56c:	bfd4      	ite	le
 800f56e:	f1c1 0202 	rsble	r2, r1, #2
 800f572:	2201      	movgt	r2, #1
 800f574:	4413      	add	r3, r2
 800f576:	e7e0      	b.n	800f53a <_printf_float+0x172>
 800f578:	6823      	ldr	r3, [r4, #0]
 800f57a:	055a      	lsls	r2, r3, #21
 800f57c:	d407      	bmi.n	800f58e <_printf_float+0x1c6>
 800f57e:	6923      	ldr	r3, [r4, #16]
 800f580:	4642      	mov	r2, r8
 800f582:	4631      	mov	r1, r6
 800f584:	4628      	mov	r0, r5
 800f586:	47b8      	blx	r7
 800f588:	3001      	adds	r0, #1
 800f58a:	d12a      	bne.n	800f5e2 <_printf_float+0x21a>
 800f58c:	e76a      	b.n	800f464 <_printf_float+0x9c>
 800f58e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800f592:	f240 80e2 	bls.w	800f75a <_printf_float+0x392>
 800f596:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800f59a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f59e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5a2:	d133      	bne.n	800f60c <_printf_float+0x244>
 800f5a4:	4a38      	ldr	r2, [pc, #224]	; (800f688 <_printf_float+0x2c0>)
 800f5a6:	2301      	movs	r3, #1
 800f5a8:	4631      	mov	r1, r6
 800f5aa:	4628      	mov	r0, r5
 800f5ac:	47b8      	blx	r7
 800f5ae:	3001      	adds	r0, #1
 800f5b0:	f43f af58 	beq.w	800f464 <_printf_float+0x9c>
 800f5b4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	db02      	blt.n	800f5c2 <_printf_float+0x1fa>
 800f5bc:	6823      	ldr	r3, [r4, #0]
 800f5be:	07d8      	lsls	r0, r3, #31
 800f5c0:	d50f      	bpl.n	800f5e2 <_printf_float+0x21a>
 800f5c2:	4653      	mov	r3, sl
 800f5c4:	465a      	mov	r2, fp
 800f5c6:	4631      	mov	r1, r6
 800f5c8:	4628      	mov	r0, r5
 800f5ca:	47b8      	blx	r7
 800f5cc:	3001      	adds	r0, #1
 800f5ce:	f43f af49 	beq.w	800f464 <_printf_float+0x9c>
 800f5d2:	f04f 0800 	mov.w	r8, #0
 800f5d6:	f104 091a 	add.w	r9, r4, #26
 800f5da:	9b08      	ldr	r3, [sp, #32]
 800f5dc:	3b01      	subs	r3, #1
 800f5de:	4543      	cmp	r3, r8
 800f5e0:	dc09      	bgt.n	800f5f6 <_printf_float+0x22e>
 800f5e2:	6823      	ldr	r3, [r4, #0]
 800f5e4:	079b      	lsls	r3, r3, #30
 800f5e6:	f100 8108 	bmi.w	800f7fa <_printf_float+0x432>
 800f5ea:	68e0      	ldr	r0, [r4, #12]
 800f5ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5ee:	4298      	cmp	r0, r3
 800f5f0:	bfb8      	it	lt
 800f5f2:	4618      	movlt	r0, r3
 800f5f4:	e738      	b.n	800f468 <_printf_float+0xa0>
 800f5f6:	2301      	movs	r3, #1
 800f5f8:	464a      	mov	r2, r9
 800f5fa:	4631      	mov	r1, r6
 800f5fc:	4628      	mov	r0, r5
 800f5fe:	47b8      	blx	r7
 800f600:	3001      	adds	r0, #1
 800f602:	f43f af2f 	beq.w	800f464 <_printf_float+0x9c>
 800f606:	f108 0801 	add.w	r8, r8, #1
 800f60a:	e7e6      	b.n	800f5da <_printf_float+0x212>
 800f60c:	9b07      	ldr	r3, [sp, #28]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	dc3c      	bgt.n	800f68c <_printf_float+0x2c4>
 800f612:	4a1d      	ldr	r2, [pc, #116]	; (800f688 <_printf_float+0x2c0>)
 800f614:	2301      	movs	r3, #1
 800f616:	4631      	mov	r1, r6
 800f618:	4628      	mov	r0, r5
 800f61a:	47b8      	blx	r7
 800f61c:	3001      	adds	r0, #1
 800f61e:	f43f af21 	beq.w	800f464 <_printf_float+0x9c>
 800f622:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800f626:	4313      	orrs	r3, r2
 800f628:	d102      	bne.n	800f630 <_printf_float+0x268>
 800f62a:	6823      	ldr	r3, [r4, #0]
 800f62c:	07d9      	lsls	r1, r3, #31
 800f62e:	d5d8      	bpl.n	800f5e2 <_printf_float+0x21a>
 800f630:	4653      	mov	r3, sl
 800f632:	465a      	mov	r2, fp
 800f634:	4631      	mov	r1, r6
 800f636:	4628      	mov	r0, r5
 800f638:	47b8      	blx	r7
 800f63a:	3001      	adds	r0, #1
 800f63c:	f43f af12 	beq.w	800f464 <_printf_float+0x9c>
 800f640:	f04f 0900 	mov.w	r9, #0
 800f644:	f104 0a1a 	add.w	sl, r4, #26
 800f648:	9b07      	ldr	r3, [sp, #28]
 800f64a:	425b      	negs	r3, r3
 800f64c:	454b      	cmp	r3, r9
 800f64e:	dc01      	bgt.n	800f654 <_printf_float+0x28c>
 800f650:	9b08      	ldr	r3, [sp, #32]
 800f652:	e795      	b.n	800f580 <_printf_float+0x1b8>
 800f654:	2301      	movs	r3, #1
 800f656:	4652      	mov	r2, sl
 800f658:	4631      	mov	r1, r6
 800f65a:	4628      	mov	r0, r5
 800f65c:	47b8      	blx	r7
 800f65e:	3001      	adds	r0, #1
 800f660:	f43f af00 	beq.w	800f464 <_printf_float+0x9c>
 800f664:	f109 0901 	add.w	r9, r9, #1
 800f668:	e7ee      	b.n	800f648 <_printf_float+0x280>
 800f66a:	bf00      	nop
 800f66c:	f3af 8000 	nop.w
 800f670:	ffffffff 	.word	0xffffffff
 800f674:	7fefffff 	.word	0x7fefffff
 800f678:	08013754 	.word	0x08013754
 800f67c:	08013758 	.word	0x08013758
 800f680:	08013760 	.word	0x08013760
 800f684:	0801375c 	.word	0x0801375c
 800f688:	08013764 	.word	0x08013764
 800f68c:	9a08      	ldr	r2, [sp, #32]
 800f68e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f690:	429a      	cmp	r2, r3
 800f692:	bfa8      	it	ge
 800f694:	461a      	movge	r2, r3
 800f696:	2a00      	cmp	r2, #0
 800f698:	4691      	mov	r9, r2
 800f69a:	dc38      	bgt.n	800f70e <_printf_float+0x346>
 800f69c:	2300      	movs	r3, #0
 800f69e:	9305      	str	r3, [sp, #20]
 800f6a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f6a4:	f104 021a 	add.w	r2, r4, #26
 800f6a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f6aa:	9905      	ldr	r1, [sp, #20]
 800f6ac:	9304      	str	r3, [sp, #16]
 800f6ae:	eba3 0309 	sub.w	r3, r3, r9
 800f6b2:	428b      	cmp	r3, r1
 800f6b4:	dc33      	bgt.n	800f71e <_printf_float+0x356>
 800f6b6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800f6ba:	429a      	cmp	r2, r3
 800f6bc:	db3c      	blt.n	800f738 <_printf_float+0x370>
 800f6be:	6823      	ldr	r3, [r4, #0]
 800f6c0:	07da      	lsls	r2, r3, #31
 800f6c2:	d439      	bmi.n	800f738 <_printf_float+0x370>
 800f6c4:	9a08      	ldr	r2, [sp, #32]
 800f6c6:	9b04      	ldr	r3, [sp, #16]
 800f6c8:	9907      	ldr	r1, [sp, #28]
 800f6ca:	1ad3      	subs	r3, r2, r3
 800f6cc:	eba2 0901 	sub.w	r9, r2, r1
 800f6d0:	4599      	cmp	r9, r3
 800f6d2:	bfa8      	it	ge
 800f6d4:	4699      	movge	r9, r3
 800f6d6:	f1b9 0f00 	cmp.w	r9, #0
 800f6da:	dc35      	bgt.n	800f748 <_printf_float+0x380>
 800f6dc:	f04f 0800 	mov.w	r8, #0
 800f6e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f6e4:	f104 0a1a 	add.w	sl, r4, #26
 800f6e8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800f6ec:	1a9b      	subs	r3, r3, r2
 800f6ee:	eba3 0309 	sub.w	r3, r3, r9
 800f6f2:	4543      	cmp	r3, r8
 800f6f4:	f77f af75 	ble.w	800f5e2 <_printf_float+0x21a>
 800f6f8:	2301      	movs	r3, #1
 800f6fa:	4652      	mov	r2, sl
 800f6fc:	4631      	mov	r1, r6
 800f6fe:	4628      	mov	r0, r5
 800f700:	47b8      	blx	r7
 800f702:	3001      	adds	r0, #1
 800f704:	f43f aeae 	beq.w	800f464 <_printf_float+0x9c>
 800f708:	f108 0801 	add.w	r8, r8, #1
 800f70c:	e7ec      	b.n	800f6e8 <_printf_float+0x320>
 800f70e:	4613      	mov	r3, r2
 800f710:	4631      	mov	r1, r6
 800f712:	4642      	mov	r2, r8
 800f714:	4628      	mov	r0, r5
 800f716:	47b8      	blx	r7
 800f718:	3001      	adds	r0, #1
 800f71a:	d1bf      	bne.n	800f69c <_printf_float+0x2d4>
 800f71c:	e6a2      	b.n	800f464 <_printf_float+0x9c>
 800f71e:	2301      	movs	r3, #1
 800f720:	4631      	mov	r1, r6
 800f722:	4628      	mov	r0, r5
 800f724:	9204      	str	r2, [sp, #16]
 800f726:	47b8      	blx	r7
 800f728:	3001      	adds	r0, #1
 800f72a:	f43f ae9b 	beq.w	800f464 <_printf_float+0x9c>
 800f72e:	9b05      	ldr	r3, [sp, #20]
 800f730:	9a04      	ldr	r2, [sp, #16]
 800f732:	3301      	adds	r3, #1
 800f734:	9305      	str	r3, [sp, #20]
 800f736:	e7b7      	b.n	800f6a8 <_printf_float+0x2e0>
 800f738:	4653      	mov	r3, sl
 800f73a:	465a      	mov	r2, fp
 800f73c:	4631      	mov	r1, r6
 800f73e:	4628      	mov	r0, r5
 800f740:	47b8      	blx	r7
 800f742:	3001      	adds	r0, #1
 800f744:	d1be      	bne.n	800f6c4 <_printf_float+0x2fc>
 800f746:	e68d      	b.n	800f464 <_printf_float+0x9c>
 800f748:	9a04      	ldr	r2, [sp, #16]
 800f74a:	464b      	mov	r3, r9
 800f74c:	4442      	add	r2, r8
 800f74e:	4631      	mov	r1, r6
 800f750:	4628      	mov	r0, r5
 800f752:	47b8      	blx	r7
 800f754:	3001      	adds	r0, #1
 800f756:	d1c1      	bne.n	800f6dc <_printf_float+0x314>
 800f758:	e684      	b.n	800f464 <_printf_float+0x9c>
 800f75a:	9a08      	ldr	r2, [sp, #32]
 800f75c:	2a01      	cmp	r2, #1
 800f75e:	dc01      	bgt.n	800f764 <_printf_float+0x39c>
 800f760:	07db      	lsls	r3, r3, #31
 800f762:	d537      	bpl.n	800f7d4 <_printf_float+0x40c>
 800f764:	2301      	movs	r3, #1
 800f766:	4642      	mov	r2, r8
 800f768:	4631      	mov	r1, r6
 800f76a:	4628      	mov	r0, r5
 800f76c:	47b8      	blx	r7
 800f76e:	3001      	adds	r0, #1
 800f770:	f43f ae78 	beq.w	800f464 <_printf_float+0x9c>
 800f774:	4653      	mov	r3, sl
 800f776:	465a      	mov	r2, fp
 800f778:	4631      	mov	r1, r6
 800f77a:	4628      	mov	r0, r5
 800f77c:	47b8      	blx	r7
 800f77e:	3001      	adds	r0, #1
 800f780:	f43f ae70 	beq.w	800f464 <_printf_float+0x9c>
 800f784:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800f788:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f78c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f790:	d01b      	beq.n	800f7ca <_printf_float+0x402>
 800f792:	9b08      	ldr	r3, [sp, #32]
 800f794:	f108 0201 	add.w	r2, r8, #1
 800f798:	3b01      	subs	r3, #1
 800f79a:	4631      	mov	r1, r6
 800f79c:	4628      	mov	r0, r5
 800f79e:	47b8      	blx	r7
 800f7a0:	3001      	adds	r0, #1
 800f7a2:	d10e      	bne.n	800f7c2 <_printf_float+0x3fa>
 800f7a4:	e65e      	b.n	800f464 <_printf_float+0x9c>
 800f7a6:	2301      	movs	r3, #1
 800f7a8:	464a      	mov	r2, r9
 800f7aa:	4631      	mov	r1, r6
 800f7ac:	4628      	mov	r0, r5
 800f7ae:	47b8      	blx	r7
 800f7b0:	3001      	adds	r0, #1
 800f7b2:	f43f ae57 	beq.w	800f464 <_printf_float+0x9c>
 800f7b6:	f108 0801 	add.w	r8, r8, #1
 800f7ba:	9b08      	ldr	r3, [sp, #32]
 800f7bc:	3b01      	subs	r3, #1
 800f7be:	4543      	cmp	r3, r8
 800f7c0:	dcf1      	bgt.n	800f7a6 <_printf_float+0x3de>
 800f7c2:	9b04      	ldr	r3, [sp, #16]
 800f7c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f7c8:	e6db      	b.n	800f582 <_printf_float+0x1ba>
 800f7ca:	f04f 0800 	mov.w	r8, #0
 800f7ce:	f104 091a 	add.w	r9, r4, #26
 800f7d2:	e7f2      	b.n	800f7ba <_printf_float+0x3f2>
 800f7d4:	2301      	movs	r3, #1
 800f7d6:	4642      	mov	r2, r8
 800f7d8:	e7df      	b.n	800f79a <_printf_float+0x3d2>
 800f7da:	2301      	movs	r3, #1
 800f7dc:	464a      	mov	r2, r9
 800f7de:	4631      	mov	r1, r6
 800f7e0:	4628      	mov	r0, r5
 800f7e2:	47b8      	blx	r7
 800f7e4:	3001      	adds	r0, #1
 800f7e6:	f43f ae3d 	beq.w	800f464 <_printf_float+0x9c>
 800f7ea:	f108 0801 	add.w	r8, r8, #1
 800f7ee:	68e3      	ldr	r3, [r4, #12]
 800f7f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f7f2:	1a5b      	subs	r3, r3, r1
 800f7f4:	4543      	cmp	r3, r8
 800f7f6:	dcf0      	bgt.n	800f7da <_printf_float+0x412>
 800f7f8:	e6f7      	b.n	800f5ea <_printf_float+0x222>
 800f7fa:	f04f 0800 	mov.w	r8, #0
 800f7fe:	f104 0919 	add.w	r9, r4, #25
 800f802:	e7f4      	b.n	800f7ee <_printf_float+0x426>

0800f804 <_printf_common>:
 800f804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f808:	4616      	mov	r6, r2
 800f80a:	4699      	mov	r9, r3
 800f80c:	688a      	ldr	r2, [r1, #8]
 800f80e:	690b      	ldr	r3, [r1, #16]
 800f810:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f814:	4293      	cmp	r3, r2
 800f816:	bfb8      	it	lt
 800f818:	4613      	movlt	r3, r2
 800f81a:	6033      	str	r3, [r6, #0]
 800f81c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f820:	4607      	mov	r7, r0
 800f822:	460c      	mov	r4, r1
 800f824:	b10a      	cbz	r2, 800f82a <_printf_common+0x26>
 800f826:	3301      	adds	r3, #1
 800f828:	6033      	str	r3, [r6, #0]
 800f82a:	6823      	ldr	r3, [r4, #0]
 800f82c:	0699      	lsls	r1, r3, #26
 800f82e:	bf42      	ittt	mi
 800f830:	6833      	ldrmi	r3, [r6, #0]
 800f832:	3302      	addmi	r3, #2
 800f834:	6033      	strmi	r3, [r6, #0]
 800f836:	6825      	ldr	r5, [r4, #0]
 800f838:	f015 0506 	ands.w	r5, r5, #6
 800f83c:	d106      	bne.n	800f84c <_printf_common+0x48>
 800f83e:	f104 0a19 	add.w	sl, r4, #25
 800f842:	68e3      	ldr	r3, [r4, #12]
 800f844:	6832      	ldr	r2, [r6, #0]
 800f846:	1a9b      	subs	r3, r3, r2
 800f848:	42ab      	cmp	r3, r5
 800f84a:	dc26      	bgt.n	800f89a <_printf_common+0x96>
 800f84c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f850:	1e13      	subs	r3, r2, #0
 800f852:	6822      	ldr	r2, [r4, #0]
 800f854:	bf18      	it	ne
 800f856:	2301      	movne	r3, #1
 800f858:	0692      	lsls	r2, r2, #26
 800f85a:	d42b      	bmi.n	800f8b4 <_printf_common+0xb0>
 800f85c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f860:	4649      	mov	r1, r9
 800f862:	4638      	mov	r0, r7
 800f864:	47c0      	blx	r8
 800f866:	3001      	adds	r0, #1
 800f868:	d01e      	beq.n	800f8a8 <_printf_common+0xa4>
 800f86a:	6823      	ldr	r3, [r4, #0]
 800f86c:	68e5      	ldr	r5, [r4, #12]
 800f86e:	6832      	ldr	r2, [r6, #0]
 800f870:	f003 0306 	and.w	r3, r3, #6
 800f874:	2b04      	cmp	r3, #4
 800f876:	bf08      	it	eq
 800f878:	1aad      	subeq	r5, r5, r2
 800f87a:	68a3      	ldr	r3, [r4, #8]
 800f87c:	6922      	ldr	r2, [r4, #16]
 800f87e:	bf0c      	ite	eq
 800f880:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f884:	2500      	movne	r5, #0
 800f886:	4293      	cmp	r3, r2
 800f888:	bfc4      	itt	gt
 800f88a:	1a9b      	subgt	r3, r3, r2
 800f88c:	18ed      	addgt	r5, r5, r3
 800f88e:	2600      	movs	r6, #0
 800f890:	341a      	adds	r4, #26
 800f892:	42b5      	cmp	r5, r6
 800f894:	d11a      	bne.n	800f8cc <_printf_common+0xc8>
 800f896:	2000      	movs	r0, #0
 800f898:	e008      	b.n	800f8ac <_printf_common+0xa8>
 800f89a:	2301      	movs	r3, #1
 800f89c:	4652      	mov	r2, sl
 800f89e:	4649      	mov	r1, r9
 800f8a0:	4638      	mov	r0, r7
 800f8a2:	47c0      	blx	r8
 800f8a4:	3001      	adds	r0, #1
 800f8a6:	d103      	bne.n	800f8b0 <_printf_common+0xac>
 800f8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f8ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8b0:	3501      	adds	r5, #1
 800f8b2:	e7c6      	b.n	800f842 <_printf_common+0x3e>
 800f8b4:	18e1      	adds	r1, r4, r3
 800f8b6:	1c5a      	adds	r2, r3, #1
 800f8b8:	2030      	movs	r0, #48	; 0x30
 800f8ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f8be:	4422      	add	r2, r4
 800f8c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f8c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f8c8:	3302      	adds	r3, #2
 800f8ca:	e7c7      	b.n	800f85c <_printf_common+0x58>
 800f8cc:	2301      	movs	r3, #1
 800f8ce:	4622      	mov	r2, r4
 800f8d0:	4649      	mov	r1, r9
 800f8d2:	4638      	mov	r0, r7
 800f8d4:	47c0      	blx	r8
 800f8d6:	3001      	adds	r0, #1
 800f8d8:	d0e6      	beq.n	800f8a8 <_printf_common+0xa4>
 800f8da:	3601      	adds	r6, #1
 800f8dc:	e7d9      	b.n	800f892 <_printf_common+0x8e>
	...

0800f8e0 <_printf_i>:
 800f8e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f8e4:	460c      	mov	r4, r1
 800f8e6:	4691      	mov	r9, r2
 800f8e8:	7e27      	ldrb	r7, [r4, #24]
 800f8ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f8ec:	2f78      	cmp	r7, #120	; 0x78
 800f8ee:	4680      	mov	r8, r0
 800f8f0:	469a      	mov	sl, r3
 800f8f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f8f6:	d807      	bhi.n	800f908 <_printf_i+0x28>
 800f8f8:	2f62      	cmp	r7, #98	; 0x62
 800f8fa:	d80a      	bhi.n	800f912 <_printf_i+0x32>
 800f8fc:	2f00      	cmp	r7, #0
 800f8fe:	f000 80d8 	beq.w	800fab2 <_printf_i+0x1d2>
 800f902:	2f58      	cmp	r7, #88	; 0x58
 800f904:	f000 80a3 	beq.w	800fa4e <_printf_i+0x16e>
 800f908:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f90c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f910:	e03a      	b.n	800f988 <_printf_i+0xa8>
 800f912:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f916:	2b15      	cmp	r3, #21
 800f918:	d8f6      	bhi.n	800f908 <_printf_i+0x28>
 800f91a:	a001      	add	r0, pc, #4	; (adr r0, 800f920 <_printf_i+0x40>)
 800f91c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f920:	0800f979 	.word	0x0800f979
 800f924:	0800f98d 	.word	0x0800f98d
 800f928:	0800f909 	.word	0x0800f909
 800f92c:	0800f909 	.word	0x0800f909
 800f930:	0800f909 	.word	0x0800f909
 800f934:	0800f909 	.word	0x0800f909
 800f938:	0800f98d 	.word	0x0800f98d
 800f93c:	0800f909 	.word	0x0800f909
 800f940:	0800f909 	.word	0x0800f909
 800f944:	0800f909 	.word	0x0800f909
 800f948:	0800f909 	.word	0x0800f909
 800f94c:	0800fa99 	.word	0x0800fa99
 800f950:	0800f9bd 	.word	0x0800f9bd
 800f954:	0800fa7b 	.word	0x0800fa7b
 800f958:	0800f909 	.word	0x0800f909
 800f95c:	0800f909 	.word	0x0800f909
 800f960:	0800fabb 	.word	0x0800fabb
 800f964:	0800f909 	.word	0x0800f909
 800f968:	0800f9bd 	.word	0x0800f9bd
 800f96c:	0800f909 	.word	0x0800f909
 800f970:	0800f909 	.word	0x0800f909
 800f974:	0800fa83 	.word	0x0800fa83
 800f978:	680b      	ldr	r3, [r1, #0]
 800f97a:	1d1a      	adds	r2, r3, #4
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	600a      	str	r2, [r1, #0]
 800f980:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f984:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f988:	2301      	movs	r3, #1
 800f98a:	e0a3      	b.n	800fad4 <_printf_i+0x1f4>
 800f98c:	6825      	ldr	r5, [r4, #0]
 800f98e:	6808      	ldr	r0, [r1, #0]
 800f990:	062e      	lsls	r6, r5, #24
 800f992:	f100 0304 	add.w	r3, r0, #4
 800f996:	d50a      	bpl.n	800f9ae <_printf_i+0xce>
 800f998:	6805      	ldr	r5, [r0, #0]
 800f99a:	600b      	str	r3, [r1, #0]
 800f99c:	2d00      	cmp	r5, #0
 800f99e:	da03      	bge.n	800f9a8 <_printf_i+0xc8>
 800f9a0:	232d      	movs	r3, #45	; 0x2d
 800f9a2:	426d      	negs	r5, r5
 800f9a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f9a8:	485e      	ldr	r0, [pc, #376]	; (800fb24 <_printf_i+0x244>)
 800f9aa:	230a      	movs	r3, #10
 800f9ac:	e019      	b.n	800f9e2 <_printf_i+0x102>
 800f9ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f9b2:	6805      	ldr	r5, [r0, #0]
 800f9b4:	600b      	str	r3, [r1, #0]
 800f9b6:	bf18      	it	ne
 800f9b8:	b22d      	sxthne	r5, r5
 800f9ba:	e7ef      	b.n	800f99c <_printf_i+0xbc>
 800f9bc:	680b      	ldr	r3, [r1, #0]
 800f9be:	6825      	ldr	r5, [r4, #0]
 800f9c0:	1d18      	adds	r0, r3, #4
 800f9c2:	6008      	str	r0, [r1, #0]
 800f9c4:	0628      	lsls	r0, r5, #24
 800f9c6:	d501      	bpl.n	800f9cc <_printf_i+0xec>
 800f9c8:	681d      	ldr	r5, [r3, #0]
 800f9ca:	e002      	b.n	800f9d2 <_printf_i+0xf2>
 800f9cc:	0669      	lsls	r1, r5, #25
 800f9ce:	d5fb      	bpl.n	800f9c8 <_printf_i+0xe8>
 800f9d0:	881d      	ldrh	r5, [r3, #0]
 800f9d2:	4854      	ldr	r0, [pc, #336]	; (800fb24 <_printf_i+0x244>)
 800f9d4:	2f6f      	cmp	r7, #111	; 0x6f
 800f9d6:	bf0c      	ite	eq
 800f9d8:	2308      	moveq	r3, #8
 800f9da:	230a      	movne	r3, #10
 800f9dc:	2100      	movs	r1, #0
 800f9de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f9e2:	6866      	ldr	r6, [r4, #4]
 800f9e4:	60a6      	str	r6, [r4, #8]
 800f9e6:	2e00      	cmp	r6, #0
 800f9e8:	bfa2      	ittt	ge
 800f9ea:	6821      	ldrge	r1, [r4, #0]
 800f9ec:	f021 0104 	bicge.w	r1, r1, #4
 800f9f0:	6021      	strge	r1, [r4, #0]
 800f9f2:	b90d      	cbnz	r5, 800f9f8 <_printf_i+0x118>
 800f9f4:	2e00      	cmp	r6, #0
 800f9f6:	d04d      	beq.n	800fa94 <_printf_i+0x1b4>
 800f9f8:	4616      	mov	r6, r2
 800f9fa:	fbb5 f1f3 	udiv	r1, r5, r3
 800f9fe:	fb03 5711 	mls	r7, r3, r1, r5
 800fa02:	5dc7      	ldrb	r7, [r0, r7]
 800fa04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fa08:	462f      	mov	r7, r5
 800fa0a:	42bb      	cmp	r3, r7
 800fa0c:	460d      	mov	r5, r1
 800fa0e:	d9f4      	bls.n	800f9fa <_printf_i+0x11a>
 800fa10:	2b08      	cmp	r3, #8
 800fa12:	d10b      	bne.n	800fa2c <_printf_i+0x14c>
 800fa14:	6823      	ldr	r3, [r4, #0]
 800fa16:	07df      	lsls	r7, r3, #31
 800fa18:	d508      	bpl.n	800fa2c <_printf_i+0x14c>
 800fa1a:	6923      	ldr	r3, [r4, #16]
 800fa1c:	6861      	ldr	r1, [r4, #4]
 800fa1e:	4299      	cmp	r1, r3
 800fa20:	bfde      	ittt	le
 800fa22:	2330      	movle	r3, #48	; 0x30
 800fa24:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fa28:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fa2c:	1b92      	subs	r2, r2, r6
 800fa2e:	6122      	str	r2, [r4, #16]
 800fa30:	f8cd a000 	str.w	sl, [sp]
 800fa34:	464b      	mov	r3, r9
 800fa36:	aa03      	add	r2, sp, #12
 800fa38:	4621      	mov	r1, r4
 800fa3a:	4640      	mov	r0, r8
 800fa3c:	f7ff fee2 	bl	800f804 <_printf_common>
 800fa40:	3001      	adds	r0, #1
 800fa42:	d14c      	bne.n	800fade <_printf_i+0x1fe>
 800fa44:	f04f 30ff 	mov.w	r0, #4294967295
 800fa48:	b004      	add	sp, #16
 800fa4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa4e:	4835      	ldr	r0, [pc, #212]	; (800fb24 <_printf_i+0x244>)
 800fa50:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fa54:	6823      	ldr	r3, [r4, #0]
 800fa56:	680e      	ldr	r6, [r1, #0]
 800fa58:	061f      	lsls	r7, r3, #24
 800fa5a:	f856 5b04 	ldr.w	r5, [r6], #4
 800fa5e:	600e      	str	r6, [r1, #0]
 800fa60:	d514      	bpl.n	800fa8c <_printf_i+0x1ac>
 800fa62:	07d9      	lsls	r1, r3, #31
 800fa64:	bf44      	itt	mi
 800fa66:	f043 0320 	orrmi.w	r3, r3, #32
 800fa6a:	6023      	strmi	r3, [r4, #0]
 800fa6c:	b91d      	cbnz	r5, 800fa76 <_printf_i+0x196>
 800fa6e:	6823      	ldr	r3, [r4, #0]
 800fa70:	f023 0320 	bic.w	r3, r3, #32
 800fa74:	6023      	str	r3, [r4, #0]
 800fa76:	2310      	movs	r3, #16
 800fa78:	e7b0      	b.n	800f9dc <_printf_i+0xfc>
 800fa7a:	6823      	ldr	r3, [r4, #0]
 800fa7c:	f043 0320 	orr.w	r3, r3, #32
 800fa80:	6023      	str	r3, [r4, #0]
 800fa82:	2378      	movs	r3, #120	; 0x78
 800fa84:	4828      	ldr	r0, [pc, #160]	; (800fb28 <_printf_i+0x248>)
 800fa86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fa8a:	e7e3      	b.n	800fa54 <_printf_i+0x174>
 800fa8c:	065e      	lsls	r6, r3, #25
 800fa8e:	bf48      	it	mi
 800fa90:	b2ad      	uxthmi	r5, r5
 800fa92:	e7e6      	b.n	800fa62 <_printf_i+0x182>
 800fa94:	4616      	mov	r6, r2
 800fa96:	e7bb      	b.n	800fa10 <_printf_i+0x130>
 800fa98:	680b      	ldr	r3, [r1, #0]
 800fa9a:	6826      	ldr	r6, [r4, #0]
 800fa9c:	6960      	ldr	r0, [r4, #20]
 800fa9e:	1d1d      	adds	r5, r3, #4
 800faa0:	600d      	str	r5, [r1, #0]
 800faa2:	0635      	lsls	r5, r6, #24
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	d501      	bpl.n	800faac <_printf_i+0x1cc>
 800faa8:	6018      	str	r0, [r3, #0]
 800faaa:	e002      	b.n	800fab2 <_printf_i+0x1d2>
 800faac:	0671      	lsls	r1, r6, #25
 800faae:	d5fb      	bpl.n	800faa8 <_printf_i+0x1c8>
 800fab0:	8018      	strh	r0, [r3, #0]
 800fab2:	2300      	movs	r3, #0
 800fab4:	6123      	str	r3, [r4, #16]
 800fab6:	4616      	mov	r6, r2
 800fab8:	e7ba      	b.n	800fa30 <_printf_i+0x150>
 800faba:	680b      	ldr	r3, [r1, #0]
 800fabc:	1d1a      	adds	r2, r3, #4
 800fabe:	600a      	str	r2, [r1, #0]
 800fac0:	681e      	ldr	r6, [r3, #0]
 800fac2:	6862      	ldr	r2, [r4, #4]
 800fac4:	2100      	movs	r1, #0
 800fac6:	4630      	mov	r0, r6
 800fac8:	f7f0 fc12 	bl	80002f0 <memchr>
 800facc:	b108      	cbz	r0, 800fad2 <_printf_i+0x1f2>
 800face:	1b80      	subs	r0, r0, r6
 800fad0:	6060      	str	r0, [r4, #4]
 800fad2:	6863      	ldr	r3, [r4, #4]
 800fad4:	6123      	str	r3, [r4, #16]
 800fad6:	2300      	movs	r3, #0
 800fad8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fadc:	e7a8      	b.n	800fa30 <_printf_i+0x150>
 800fade:	6923      	ldr	r3, [r4, #16]
 800fae0:	4632      	mov	r2, r6
 800fae2:	4649      	mov	r1, r9
 800fae4:	4640      	mov	r0, r8
 800fae6:	47d0      	blx	sl
 800fae8:	3001      	adds	r0, #1
 800faea:	d0ab      	beq.n	800fa44 <_printf_i+0x164>
 800faec:	6823      	ldr	r3, [r4, #0]
 800faee:	079b      	lsls	r3, r3, #30
 800faf0:	d413      	bmi.n	800fb1a <_printf_i+0x23a>
 800faf2:	68e0      	ldr	r0, [r4, #12]
 800faf4:	9b03      	ldr	r3, [sp, #12]
 800faf6:	4298      	cmp	r0, r3
 800faf8:	bfb8      	it	lt
 800fafa:	4618      	movlt	r0, r3
 800fafc:	e7a4      	b.n	800fa48 <_printf_i+0x168>
 800fafe:	2301      	movs	r3, #1
 800fb00:	4632      	mov	r2, r6
 800fb02:	4649      	mov	r1, r9
 800fb04:	4640      	mov	r0, r8
 800fb06:	47d0      	blx	sl
 800fb08:	3001      	adds	r0, #1
 800fb0a:	d09b      	beq.n	800fa44 <_printf_i+0x164>
 800fb0c:	3501      	adds	r5, #1
 800fb0e:	68e3      	ldr	r3, [r4, #12]
 800fb10:	9903      	ldr	r1, [sp, #12]
 800fb12:	1a5b      	subs	r3, r3, r1
 800fb14:	42ab      	cmp	r3, r5
 800fb16:	dcf2      	bgt.n	800fafe <_printf_i+0x21e>
 800fb18:	e7eb      	b.n	800faf2 <_printf_i+0x212>
 800fb1a:	2500      	movs	r5, #0
 800fb1c:	f104 0619 	add.w	r6, r4, #25
 800fb20:	e7f5      	b.n	800fb0e <_printf_i+0x22e>
 800fb22:	bf00      	nop
 800fb24:	08013766 	.word	0x08013766
 800fb28:	08013777 	.word	0x08013777

0800fb2c <_puts_r>:
 800fb2c:	b570      	push	{r4, r5, r6, lr}
 800fb2e:	460e      	mov	r6, r1
 800fb30:	4605      	mov	r5, r0
 800fb32:	b118      	cbz	r0, 800fb3c <_puts_r+0x10>
 800fb34:	6983      	ldr	r3, [r0, #24]
 800fb36:	b90b      	cbnz	r3, 800fb3c <_puts_r+0x10>
 800fb38:	f001 f856 	bl	8010be8 <__sinit>
 800fb3c:	69ab      	ldr	r3, [r5, #24]
 800fb3e:	68ac      	ldr	r4, [r5, #8]
 800fb40:	b913      	cbnz	r3, 800fb48 <_puts_r+0x1c>
 800fb42:	4628      	mov	r0, r5
 800fb44:	f001 f850 	bl	8010be8 <__sinit>
 800fb48:	4b2c      	ldr	r3, [pc, #176]	; (800fbfc <_puts_r+0xd0>)
 800fb4a:	429c      	cmp	r4, r3
 800fb4c:	d120      	bne.n	800fb90 <_puts_r+0x64>
 800fb4e:	686c      	ldr	r4, [r5, #4]
 800fb50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fb52:	07db      	lsls	r3, r3, #31
 800fb54:	d405      	bmi.n	800fb62 <_puts_r+0x36>
 800fb56:	89a3      	ldrh	r3, [r4, #12]
 800fb58:	0598      	lsls	r0, r3, #22
 800fb5a:	d402      	bmi.n	800fb62 <_puts_r+0x36>
 800fb5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fb5e:	f001 f8e6 	bl	8010d2e <__retarget_lock_acquire_recursive>
 800fb62:	89a3      	ldrh	r3, [r4, #12]
 800fb64:	0719      	lsls	r1, r3, #28
 800fb66:	d51d      	bpl.n	800fba4 <_puts_r+0x78>
 800fb68:	6923      	ldr	r3, [r4, #16]
 800fb6a:	b1db      	cbz	r3, 800fba4 <_puts_r+0x78>
 800fb6c:	3e01      	subs	r6, #1
 800fb6e:	68a3      	ldr	r3, [r4, #8]
 800fb70:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fb74:	3b01      	subs	r3, #1
 800fb76:	60a3      	str	r3, [r4, #8]
 800fb78:	bb39      	cbnz	r1, 800fbca <_puts_r+0x9e>
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	da38      	bge.n	800fbf0 <_puts_r+0xc4>
 800fb7e:	4622      	mov	r2, r4
 800fb80:	210a      	movs	r1, #10
 800fb82:	4628      	mov	r0, r5
 800fb84:	f000 f848 	bl	800fc18 <__swbuf_r>
 800fb88:	3001      	adds	r0, #1
 800fb8a:	d011      	beq.n	800fbb0 <_puts_r+0x84>
 800fb8c:	250a      	movs	r5, #10
 800fb8e:	e011      	b.n	800fbb4 <_puts_r+0x88>
 800fb90:	4b1b      	ldr	r3, [pc, #108]	; (800fc00 <_puts_r+0xd4>)
 800fb92:	429c      	cmp	r4, r3
 800fb94:	d101      	bne.n	800fb9a <_puts_r+0x6e>
 800fb96:	68ac      	ldr	r4, [r5, #8]
 800fb98:	e7da      	b.n	800fb50 <_puts_r+0x24>
 800fb9a:	4b1a      	ldr	r3, [pc, #104]	; (800fc04 <_puts_r+0xd8>)
 800fb9c:	429c      	cmp	r4, r3
 800fb9e:	bf08      	it	eq
 800fba0:	68ec      	ldreq	r4, [r5, #12]
 800fba2:	e7d5      	b.n	800fb50 <_puts_r+0x24>
 800fba4:	4621      	mov	r1, r4
 800fba6:	4628      	mov	r0, r5
 800fba8:	f000 f888 	bl	800fcbc <__swsetup_r>
 800fbac:	2800      	cmp	r0, #0
 800fbae:	d0dd      	beq.n	800fb6c <_puts_r+0x40>
 800fbb0:	f04f 35ff 	mov.w	r5, #4294967295
 800fbb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fbb6:	07da      	lsls	r2, r3, #31
 800fbb8:	d405      	bmi.n	800fbc6 <_puts_r+0x9a>
 800fbba:	89a3      	ldrh	r3, [r4, #12]
 800fbbc:	059b      	lsls	r3, r3, #22
 800fbbe:	d402      	bmi.n	800fbc6 <_puts_r+0x9a>
 800fbc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fbc2:	f001 f8b5 	bl	8010d30 <__retarget_lock_release_recursive>
 800fbc6:	4628      	mov	r0, r5
 800fbc8:	bd70      	pop	{r4, r5, r6, pc}
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	da04      	bge.n	800fbd8 <_puts_r+0xac>
 800fbce:	69a2      	ldr	r2, [r4, #24]
 800fbd0:	429a      	cmp	r2, r3
 800fbd2:	dc06      	bgt.n	800fbe2 <_puts_r+0xb6>
 800fbd4:	290a      	cmp	r1, #10
 800fbd6:	d004      	beq.n	800fbe2 <_puts_r+0xb6>
 800fbd8:	6823      	ldr	r3, [r4, #0]
 800fbda:	1c5a      	adds	r2, r3, #1
 800fbdc:	6022      	str	r2, [r4, #0]
 800fbde:	7019      	strb	r1, [r3, #0]
 800fbe0:	e7c5      	b.n	800fb6e <_puts_r+0x42>
 800fbe2:	4622      	mov	r2, r4
 800fbe4:	4628      	mov	r0, r5
 800fbe6:	f000 f817 	bl	800fc18 <__swbuf_r>
 800fbea:	3001      	adds	r0, #1
 800fbec:	d1bf      	bne.n	800fb6e <_puts_r+0x42>
 800fbee:	e7df      	b.n	800fbb0 <_puts_r+0x84>
 800fbf0:	6823      	ldr	r3, [r4, #0]
 800fbf2:	250a      	movs	r5, #10
 800fbf4:	1c5a      	adds	r2, r3, #1
 800fbf6:	6022      	str	r2, [r4, #0]
 800fbf8:	701d      	strb	r5, [r3, #0]
 800fbfa:	e7db      	b.n	800fbb4 <_puts_r+0x88>
 800fbfc:	0801383c 	.word	0x0801383c
 800fc00:	0801385c 	.word	0x0801385c
 800fc04:	0801381c 	.word	0x0801381c

0800fc08 <puts>:
 800fc08:	4b02      	ldr	r3, [pc, #8]	; (800fc14 <puts+0xc>)
 800fc0a:	4601      	mov	r1, r0
 800fc0c:	6818      	ldr	r0, [r3, #0]
 800fc0e:	f7ff bf8d 	b.w	800fb2c <_puts_r>
 800fc12:	bf00      	nop
 800fc14:	24000220 	.word	0x24000220

0800fc18 <__swbuf_r>:
 800fc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc1a:	460e      	mov	r6, r1
 800fc1c:	4614      	mov	r4, r2
 800fc1e:	4605      	mov	r5, r0
 800fc20:	b118      	cbz	r0, 800fc2a <__swbuf_r+0x12>
 800fc22:	6983      	ldr	r3, [r0, #24]
 800fc24:	b90b      	cbnz	r3, 800fc2a <__swbuf_r+0x12>
 800fc26:	f000 ffdf 	bl	8010be8 <__sinit>
 800fc2a:	4b21      	ldr	r3, [pc, #132]	; (800fcb0 <__swbuf_r+0x98>)
 800fc2c:	429c      	cmp	r4, r3
 800fc2e:	d12b      	bne.n	800fc88 <__swbuf_r+0x70>
 800fc30:	686c      	ldr	r4, [r5, #4]
 800fc32:	69a3      	ldr	r3, [r4, #24]
 800fc34:	60a3      	str	r3, [r4, #8]
 800fc36:	89a3      	ldrh	r3, [r4, #12]
 800fc38:	071a      	lsls	r2, r3, #28
 800fc3a:	d52f      	bpl.n	800fc9c <__swbuf_r+0x84>
 800fc3c:	6923      	ldr	r3, [r4, #16]
 800fc3e:	b36b      	cbz	r3, 800fc9c <__swbuf_r+0x84>
 800fc40:	6923      	ldr	r3, [r4, #16]
 800fc42:	6820      	ldr	r0, [r4, #0]
 800fc44:	1ac0      	subs	r0, r0, r3
 800fc46:	6963      	ldr	r3, [r4, #20]
 800fc48:	b2f6      	uxtb	r6, r6
 800fc4a:	4283      	cmp	r3, r0
 800fc4c:	4637      	mov	r7, r6
 800fc4e:	dc04      	bgt.n	800fc5a <__swbuf_r+0x42>
 800fc50:	4621      	mov	r1, r4
 800fc52:	4628      	mov	r0, r5
 800fc54:	f000 ff34 	bl	8010ac0 <_fflush_r>
 800fc58:	bb30      	cbnz	r0, 800fca8 <__swbuf_r+0x90>
 800fc5a:	68a3      	ldr	r3, [r4, #8]
 800fc5c:	3b01      	subs	r3, #1
 800fc5e:	60a3      	str	r3, [r4, #8]
 800fc60:	6823      	ldr	r3, [r4, #0]
 800fc62:	1c5a      	adds	r2, r3, #1
 800fc64:	6022      	str	r2, [r4, #0]
 800fc66:	701e      	strb	r6, [r3, #0]
 800fc68:	6963      	ldr	r3, [r4, #20]
 800fc6a:	3001      	adds	r0, #1
 800fc6c:	4283      	cmp	r3, r0
 800fc6e:	d004      	beq.n	800fc7a <__swbuf_r+0x62>
 800fc70:	89a3      	ldrh	r3, [r4, #12]
 800fc72:	07db      	lsls	r3, r3, #31
 800fc74:	d506      	bpl.n	800fc84 <__swbuf_r+0x6c>
 800fc76:	2e0a      	cmp	r6, #10
 800fc78:	d104      	bne.n	800fc84 <__swbuf_r+0x6c>
 800fc7a:	4621      	mov	r1, r4
 800fc7c:	4628      	mov	r0, r5
 800fc7e:	f000 ff1f 	bl	8010ac0 <_fflush_r>
 800fc82:	b988      	cbnz	r0, 800fca8 <__swbuf_r+0x90>
 800fc84:	4638      	mov	r0, r7
 800fc86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc88:	4b0a      	ldr	r3, [pc, #40]	; (800fcb4 <__swbuf_r+0x9c>)
 800fc8a:	429c      	cmp	r4, r3
 800fc8c:	d101      	bne.n	800fc92 <__swbuf_r+0x7a>
 800fc8e:	68ac      	ldr	r4, [r5, #8]
 800fc90:	e7cf      	b.n	800fc32 <__swbuf_r+0x1a>
 800fc92:	4b09      	ldr	r3, [pc, #36]	; (800fcb8 <__swbuf_r+0xa0>)
 800fc94:	429c      	cmp	r4, r3
 800fc96:	bf08      	it	eq
 800fc98:	68ec      	ldreq	r4, [r5, #12]
 800fc9a:	e7ca      	b.n	800fc32 <__swbuf_r+0x1a>
 800fc9c:	4621      	mov	r1, r4
 800fc9e:	4628      	mov	r0, r5
 800fca0:	f000 f80c 	bl	800fcbc <__swsetup_r>
 800fca4:	2800      	cmp	r0, #0
 800fca6:	d0cb      	beq.n	800fc40 <__swbuf_r+0x28>
 800fca8:	f04f 37ff 	mov.w	r7, #4294967295
 800fcac:	e7ea      	b.n	800fc84 <__swbuf_r+0x6c>
 800fcae:	bf00      	nop
 800fcb0:	0801383c 	.word	0x0801383c
 800fcb4:	0801385c 	.word	0x0801385c
 800fcb8:	0801381c 	.word	0x0801381c

0800fcbc <__swsetup_r>:
 800fcbc:	4b32      	ldr	r3, [pc, #200]	; (800fd88 <__swsetup_r+0xcc>)
 800fcbe:	b570      	push	{r4, r5, r6, lr}
 800fcc0:	681d      	ldr	r5, [r3, #0]
 800fcc2:	4606      	mov	r6, r0
 800fcc4:	460c      	mov	r4, r1
 800fcc6:	b125      	cbz	r5, 800fcd2 <__swsetup_r+0x16>
 800fcc8:	69ab      	ldr	r3, [r5, #24]
 800fcca:	b913      	cbnz	r3, 800fcd2 <__swsetup_r+0x16>
 800fccc:	4628      	mov	r0, r5
 800fcce:	f000 ff8b 	bl	8010be8 <__sinit>
 800fcd2:	4b2e      	ldr	r3, [pc, #184]	; (800fd8c <__swsetup_r+0xd0>)
 800fcd4:	429c      	cmp	r4, r3
 800fcd6:	d10f      	bne.n	800fcf8 <__swsetup_r+0x3c>
 800fcd8:	686c      	ldr	r4, [r5, #4]
 800fcda:	89a3      	ldrh	r3, [r4, #12]
 800fcdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fce0:	0719      	lsls	r1, r3, #28
 800fce2:	d42c      	bmi.n	800fd3e <__swsetup_r+0x82>
 800fce4:	06dd      	lsls	r5, r3, #27
 800fce6:	d411      	bmi.n	800fd0c <__swsetup_r+0x50>
 800fce8:	2309      	movs	r3, #9
 800fcea:	6033      	str	r3, [r6, #0]
 800fcec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fcf0:	81a3      	strh	r3, [r4, #12]
 800fcf2:	f04f 30ff 	mov.w	r0, #4294967295
 800fcf6:	e03e      	b.n	800fd76 <__swsetup_r+0xba>
 800fcf8:	4b25      	ldr	r3, [pc, #148]	; (800fd90 <__swsetup_r+0xd4>)
 800fcfa:	429c      	cmp	r4, r3
 800fcfc:	d101      	bne.n	800fd02 <__swsetup_r+0x46>
 800fcfe:	68ac      	ldr	r4, [r5, #8]
 800fd00:	e7eb      	b.n	800fcda <__swsetup_r+0x1e>
 800fd02:	4b24      	ldr	r3, [pc, #144]	; (800fd94 <__swsetup_r+0xd8>)
 800fd04:	429c      	cmp	r4, r3
 800fd06:	bf08      	it	eq
 800fd08:	68ec      	ldreq	r4, [r5, #12]
 800fd0a:	e7e6      	b.n	800fcda <__swsetup_r+0x1e>
 800fd0c:	0758      	lsls	r0, r3, #29
 800fd0e:	d512      	bpl.n	800fd36 <__swsetup_r+0x7a>
 800fd10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fd12:	b141      	cbz	r1, 800fd26 <__swsetup_r+0x6a>
 800fd14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fd18:	4299      	cmp	r1, r3
 800fd1a:	d002      	beq.n	800fd22 <__swsetup_r+0x66>
 800fd1c:	4630      	mov	r0, r6
 800fd1e:	f001 fc11 	bl	8011544 <_free_r>
 800fd22:	2300      	movs	r3, #0
 800fd24:	6363      	str	r3, [r4, #52]	; 0x34
 800fd26:	89a3      	ldrh	r3, [r4, #12]
 800fd28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fd2c:	81a3      	strh	r3, [r4, #12]
 800fd2e:	2300      	movs	r3, #0
 800fd30:	6063      	str	r3, [r4, #4]
 800fd32:	6923      	ldr	r3, [r4, #16]
 800fd34:	6023      	str	r3, [r4, #0]
 800fd36:	89a3      	ldrh	r3, [r4, #12]
 800fd38:	f043 0308 	orr.w	r3, r3, #8
 800fd3c:	81a3      	strh	r3, [r4, #12]
 800fd3e:	6923      	ldr	r3, [r4, #16]
 800fd40:	b94b      	cbnz	r3, 800fd56 <__swsetup_r+0x9a>
 800fd42:	89a3      	ldrh	r3, [r4, #12]
 800fd44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fd48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd4c:	d003      	beq.n	800fd56 <__swsetup_r+0x9a>
 800fd4e:	4621      	mov	r1, r4
 800fd50:	4630      	mov	r0, r6
 800fd52:	f001 f813 	bl	8010d7c <__smakebuf_r>
 800fd56:	89a0      	ldrh	r0, [r4, #12]
 800fd58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fd5c:	f010 0301 	ands.w	r3, r0, #1
 800fd60:	d00a      	beq.n	800fd78 <__swsetup_r+0xbc>
 800fd62:	2300      	movs	r3, #0
 800fd64:	60a3      	str	r3, [r4, #8]
 800fd66:	6963      	ldr	r3, [r4, #20]
 800fd68:	425b      	negs	r3, r3
 800fd6a:	61a3      	str	r3, [r4, #24]
 800fd6c:	6923      	ldr	r3, [r4, #16]
 800fd6e:	b943      	cbnz	r3, 800fd82 <__swsetup_r+0xc6>
 800fd70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fd74:	d1ba      	bne.n	800fcec <__swsetup_r+0x30>
 800fd76:	bd70      	pop	{r4, r5, r6, pc}
 800fd78:	0781      	lsls	r1, r0, #30
 800fd7a:	bf58      	it	pl
 800fd7c:	6963      	ldrpl	r3, [r4, #20]
 800fd7e:	60a3      	str	r3, [r4, #8]
 800fd80:	e7f4      	b.n	800fd6c <__swsetup_r+0xb0>
 800fd82:	2000      	movs	r0, #0
 800fd84:	e7f7      	b.n	800fd76 <__swsetup_r+0xba>
 800fd86:	bf00      	nop
 800fd88:	24000220 	.word	0x24000220
 800fd8c:	0801383c 	.word	0x0801383c
 800fd90:	0801385c 	.word	0x0801385c
 800fd94:	0801381c 	.word	0x0801381c

0800fd98 <quorem>:
 800fd98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd9c:	6903      	ldr	r3, [r0, #16]
 800fd9e:	690c      	ldr	r4, [r1, #16]
 800fda0:	42a3      	cmp	r3, r4
 800fda2:	4607      	mov	r7, r0
 800fda4:	f2c0 8081 	blt.w	800feaa <quorem+0x112>
 800fda8:	3c01      	subs	r4, #1
 800fdaa:	f101 0814 	add.w	r8, r1, #20
 800fdae:	f100 0514 	add.w	r5, r0, #20
 800fdb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fdb6:	9301      	str	r3, [sp, #4]
 800fdb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fdbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fdc0:	3301      	adds	r3, #1
 800fdc2:	429a      	cmp	r2, r3
 800fdc4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fdc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fdcc:	fbb2 f6f3 	udiv	r6, r2, r3
 800fdd0:	d331      	bcc.n	800fe36 <quorem+0x9e>
 800fdd2:	f04f 0e00 	mov.w	lr, #0
 800fdd6:	4640      	mov	r0, r8
 800fdd8:	46ac      	mov	ip, r5
 800fdda:	46f2      	mov	sl, lr
 800fddc:	f850 2b04 	ldr.w	r2, [r0], #4
 800fde0:	b293      	uxth	r3, r2
 800fde2:	fb06 e303 	mla	r3, r6, r3, lr
 800fde6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fdea:	b29b      	uxth	r3, r3
 800fdec:	ebaa 0303 	sub.w	r3, sl, r3
 800fdf0:	0c12      	lsrs	r2, r2, #16
 800fdf2:	f8dc a000 	ldr.w	sl, [ip]
 800fdf6:	fb06 e202 	mla	r2, r6, r2, lr
 800fdfa:	fa13 f38a 	uxtah	r3, r3, sl
 800fdfe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fe02:	fa1f fa82 	uxth.w	sl, r2
 800fe06:	f8dc 2000 	ldr.w	r2, [ip]
 800fe0a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800fe0e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fe12:	b29b      	uxth	r3, r3
 800fe14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe18:	4581      	cmp	r9, r0
 800fe1a:	f84c 3b04 	str.w	r3, [ip], #4
 800fe1e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fe22:	d2db      	bcs.n	800fddc <quorem+0x44>
 800fe24:	f855 300b 	ldr.w	r3, [r5, fp]
 800fe28:	b92b      	cbnz	r3, 800fe36 <quorem+0x9e>
 800fe2a:	9b01      	ldr	r3, [sp, #4]
 800fe2c:	3b04      	subs	r3, #4
 800fe2e:	429d      	cmp	r5, r3
 800fe30:	461a      	mov	r2, r3
 800fe32:	d32e      	bcc.n	800fe92 <quorem+0xfa>
 800fe34:	613c      	str	r4, [r7, #16]
 800fe36:	4638      	mov	r0, r7
 800fe38:	f001 fa74 	bl	8011324 <__mcmp>
 800fe3c:	2800      	cmp	r0, #0
 800fe3e:	db24      	blt.n	800fe8a <quorem+0xf2>
 800fe40:	3601      	adds	r6, #1
 800fe42:	4628      	mov	r0, r5
 800fe44:	f04f 0c00 	mov.w	ip, #0
 800fe48:	f858 2b04 	ldr.w	r2, [r8], #4
 800fe4c:	f8d0 e000 	ldr.w	lr, [r0]
 800fe50:	b293      	uxth	r3, r2
 800fe52:	ebac 0303 	sub.w	r3, ip, r3
 800fe56:	0c12      	lsrs	r2, r2, #16
 800fe58:	fa13 f38e 	uxtah	r3, r3, lr
 800fe5c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fe60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fe64:	b29b      	uxth	r3, r3
 800fe66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe6a:	45c1      	cmp	r9, r8
 800fe6c:	f840 3b04 	str.w	r3, [r0], #4
 800fe70:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fe74:	d2e8      	bcs.n	800fe48 <quorem+0xb0>
 800fe76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fe7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fe7e:	b922      	cbnz	r2, 800fe8a <quorem+0xf2>
 800fe80:	3b04      	subs	r3, #4
 800fe82:	429d      	cmp	r5, r3
 800fe84:	461a      	mov	r2, r3
 800fe86:	d30a      	bcc.n	800fe9e <quorem+0x106>
 800fe88:	613c      	str	r4, [r7, #16]
 800fe8a:	4630      	mov	r0, r6
 800fe8c:	b003      	add	sp, #12
 800fe8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe92:	6812      	ldr	r2, [r2, #0]
 800fe94:	3b04      	subs	r3, #4
 800fe96:	2a00      	cmp	r2, #0
 800fe98:	d1cc      	bne.n	800fe34 <quorem+0x9c>
 800fe9a:	3c01      	subs	r4, #1
 800fe9c:	e7c7      	b.n	800fe2e <quorem+0x96>
 800fe9e:	6812      	ldr	r2, [r2, #0]
 800fea0:	3b04      	subs	r3, #4
 800fea2:	2a00      	cmp	r2, #0
 800fea4:	d1f0      	bne.n	800fe88 <quorem+0xf0>
 800fea6:	3c01      	subs	r4, #1
 800fea8:	e7eb      	b.n	800fe82 <quorem+0xea>
 800feaa:	2000      	movs	r0, #0
 800feac:	e7ee      	b.n	800fe8c <quorem+0xf4>
	...

0800feb0 <_dtoa_r>:
 800feb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feb4:	ec59 8b10 	vmov	r8, r9, d0
 800feb8:	b095      	sub	sp, #84	; 0x54
 800feba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800febc:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800febe:	9107      	str	r1, [sp, #28]
 800fec0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800fec4:	4606      	mov	r6, r0
 800fec6:	9209      	str	r2, [sp, #36]	; 0x24
 800fec8:	9310      	str	r3, [sp, #64]	; 0x40
 800feca:	b975      	cbnz	r5, 800feea <_dtoa_r+0x3a>
 800fecc:	2010      	movs	r0, #16
 800fece:	f000 ff95 	bl	8010dfc <malloc>
 800fed2:	4602      	mov	r2, r0
 800fed4:	6270      	str	r0, [r6, #36]	; 0x24
 800fed6:	b920      	cbnz	r0, 800fee2 <_dtoa_r+0x32>
 800fed8:	4bab      	ldr	r3, [pc, #684]	; (8010188 <_dtoa_r+0x2d8>)
 800feda:	21ea      	movs	r1, #234	; 0xea
 800fedc:	48ab      	ldr	r0, [pc, #684]	; (801018c <_dtoa_r+0x2dc>)
 800fede:	f001 fc41 	bl	8011764 <__assert_func>
 800fee2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fee6:	6005      	str	r5, [r0, #0]
 800fee8:	60c5      	str	r5, [r0, #12]
 800feea:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800feec:	6819      	ldr	r1, [r3, #0]
 800feee:	b151      	cbz	r1, 800ff06 <_dtoa_r+0x56>
 800fef0:	685a      	ldr	r2, [r3, #4]
 800fef2:	604a      	str	r2, [r1, #4]
 800fef4:	2301      	movs	r3, #1
 800fef6:	4093      	lsls	r3, r2
 800fef8:	608b      	str	r3, [r1, #8]
 800fefa:	4630      	mov	r0, r6
 800fefc:	f000 ffd4 	bl	8010ea8 <_Bfree>
 800ff00:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ff02:	2200      	movs	r2, #0
 800ff04:	601a      	str	r2, [r3, #0]
 800ff06:	f1b9 0300 	subs.w	r3, r9, #0
 800ff0a:	bfbb      	ittet	lt
 800ff0c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ff10:	9303      	strlt	r3, [sp, #12]
 800ff12:	2300      	movge	r3, #0
 800ff14:	2201      	movlt	r2, #1
 800ff16:	bfac      	ite	ge
 800ff18:	6023      	strge	r3, [r4, #0]
 800ff1a:	6022      	strlt	r2, [r4, #0]
 800ff1c:	4b9c      	ldr	r3, [pc, #624]	; (8010190 <_dtoa_r+0x2e0>)
 800ff1e:	9c03      	ldr	r4, [sp, #12]
 800ff20:	43a3      	bics	r3, r4
 800ff22:	d11a      	bne.n	800ff5a <_dtoa_r+0xaa>
 800ff24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ff26:	f242 730f 	movw	r3, #9999	; 0x270f
 800ff2a:	6013      	str	r3, [r2, #0]
 800ff2c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800ff30:	ea53 0308 	orrs.w	r3, r3, r8
 800ff34:	f000 8512 	beq.w	801095c <_dtoa_r+0xaac>
 800ff38:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ff3a:	b953      	cbnz	r3, 800ff52 <_dtoa_r+0xa2>
 800ff3c:	4b95      	ldr	r3, [pc, #596]	; (8010194 <_dtoa_r+0x2e4>)
 800ff3e:	e01f      	b.n	800ff80 <_dtoa_r+0xd0>
 800ff40:	4b95      	ldr	r3, [pc, #596]	; (8010198 <_dtoa_r+0x2e8>)
 800ff42:	9300      	str	r3, [sp, #0]
 800ff44:	3308      	adds	r3, #8
 800ff46:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ff48:	6013      	str	r3, [r2, #0]
 800ff4a:	9800      	ldr	r0, [sp, #0]
 800ff4c:	b015      	add	sp, #84	; 0x54
 800ff4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff52:	4b90      	ldr	r3, [pc, #576]	; (8010194 <_dtoa_r+0x2e4>)
 800ff54:	9300      	str	r3, [sp, #0]
 800ff56:	3303      	adds	r3, #3
 800ff58:	e7f5      	b.n	800ff46 <_dtoa_r+0x96>
 800ff5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ff5e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ff62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff66:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ff6a:	d10b      	bne.n	800ff84 <_dtoa_r+0xd4>
 800ff6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ff6e:	2301      	movs	r3, #1
 800ff70:	6013      	str	r3, [r2, #0]
 800ff72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	f000 84ee 	beq.w	8010956 <_dtoa_r+0xaa6>
 800ff7a:	4888      	ldr	r0, [pc, #544]	; (801019c <_dtoa_r+0x2ec>)
 800ff7c:	6018      	str	r0, [r3, #0]
 800ff7e:	1e43      	subs	r3, r0, #1
 800ff80:	9300      	str	r3, [sp, #0]
 800ff82:	e7e2      	b.n	800ff4a <_dtoa_r+0x9a>
 800ff84:	a913      	add	r1, sp, #76	; 0x4c
 800ff86:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ff8a:	aa12      	add	r2, sp, #72	; 0x48
 800ff8c:	4630      	mov	r0, r6
 800ff8e:	f001 fa6d 	bl	801146c <__d2b>
 800ff92:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800ff96:	4605      	mov	r5, r0
 800ff98:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ff9a:	2900      	cmp	r1, #0
 800ff9c:	d047      	beq.n	801002e <_dtoa_r+0x17e>
 800ff9e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800ffa0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ffa4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ffa8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800ffac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ffb0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800ffb4:	2400      	movs	r4, #0
 800ffb6:	ec43 2b16 	vmov	d6, r2, r3
 800ffba:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800ffbe:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8010170 <_dtoa_r+0x2c0>
 800ffc2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ffc6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8010178 <_dtoa_r+0x2c8>
 800ffca:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ffce:	eeb0 7b46 	vmov.f64	d7, d6
 800ffd2:	ee06 1a90 	vmov	s13, r1
 800ffd6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800ffda:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8010180 <_dtoa_r+0x2d0>
 800ffde:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ffe2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ffe6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ffea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffee:	ee16 ba90 	vmov	fp, s13
 800fff2:	9411      	str	r4, [sp, #68]	; 0x44
 800fff4:	d508      	bpl.n	8010008 <_dtoa_r+0x158>
 800fff6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800fffa:	eeb4 6b47 	vcmp.f64	d6, d7
 800fffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010002:	bf18      	it	ne
 8010004:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8010008:	f1bb 0f16 	cmp.w	fp, #22
 801000c:	d832      	bhi.n	8010074 <_dtoa_r+0x1c4>
 801000e:	4b64      	ldr	r3, [pc, #400]	; (80101a0 <_dtoa_r+0x2f0>)
 8010010:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010014:	ed93 7b00 	vldr	d7, [r3]
 8010018:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801001c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010024:	d501      	bpl.n	801002a <_dtoa_r+0x17a>
 8010026:	f10b 3bff 	add.w	fp, fp, #4294967295
 801002a:	2300      	movs	r3, #0
 801002c:	e023      	b.n	8010076 <_dtoa_r+0x1c6>
 801002e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8010030:	4401      	add	r1, r0
 8010032:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8010036:	2b20      	cmp	r3, #32
 8010038:	bfc3      	ittte	gt
 801003a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801003e:	fa04 f303 	lslgt.w	r3, r4, r3
 8010042:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8010046:	f1c3 0320 	rsble	r3, r3, #32
 801004a:	bfc6      	itte	gt
 801004c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8010050:	ea43 0308 	orrgt.w	r3, r3, r8
 8010054:	fa08 f303 	lslle.w	r3, r8, r3
 8010058:	ee07 3a90 	vmov	s15, r3
 801005c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010060:	3901      	subs	r1, #1
 8010062:	ed8d 7b00 	vstr	d7, [sp]
 8010066:	9c01      	ldr	r4, [sp, #4]
 8010068:	e9dd 2300 	ldrd	r2, r3, [sp]
 801006c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8010070:	2401      	movs	r4, #1
 8010072:	e7a0      	b.n	800ffb6 <_dtoa_r+0x106>
 8010074:	2301      	movs	r3, #1
 8010076:	930f      	str	r3, [sp, #60]	; 0x3c
 8010078:	1a43      	subs	r3, r0, r1
 801007a:	1e5a      	subs	r2, r3, #1
 801007c:	bf45      	ittet	mi
 801007e:	f1c3 0301 	rsbmi	r3, r3, #1
 8010082:	9305      	strmi	r3, [sp, #20]
 8010084:	2300      	movpl	r3, #0
 8010086:	2300      	movmi	r3, #0
 8010088:	9206      	str	r2, [sp, #24]
 801008a:	bf54      	ite	pl
 801008c:	9305      	strpl	r3, [sp, #20]
 801008e:	9306      	strmi	r3, [sp, #24]
 8010090:	f1bb 0f00 	cmp.w	fp, #0
 8010094:	db18      	blt.n	80100c8 <_dtoa_r+0x218>
 8010096:	9b06      	ldr	r3, [sp, #24]
 8010098:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801009c:	445b      	add	r3, fp
 801009e:	9306      	str	r3, [sp, #24]
 80100a0:	2300      	movs	r3, #0
 80100a2:	9a07      	ldr	r2, [sp, #28]
 80100a4:	2a09      	cmp	r2, #9
 80100a6:	d849      	bhi.n	801013c <_dtoa_r+0x28c>
 80100a8:	2a05      	cmp	r2, #5
 80100aa:	bfc4      	itt	gt
 80100ac:	3a04      	subgt	r2, #4
 80100ae:	9207      	strgt	r2, [sp, #28]
 80100b0:	9a07      	ldr	r2, [sp, #28]
 80100b2:	f1a2 0202 	sub.w	r2, r2, #2
 80100b6:	bfcc      	ite	gt
 80100b8:	2400      	movgt	r4, #0
 80100ba:	2401      	movle	r4, #1
 80100bc:	2a03      	cmp	r2, #3
 80100be:	d848      	bhi.n	8010152 <_dtoa_r+0x2a2>
 80100c0:	e8df f002 	tbb	[pc, r2]
 80100c4:	3a2c2e0b 	.word	0x3a2c2e0b
 80100c8:	9b05      	ldr	r3, [sp, #20]
 80100ca:	2200      	movs	r2, #0
 80100cc:	eba3 030b 	sub.w	r3, r3, fp
 80100d0:	9305      	str	r3, [sp, #20]
 80100d2:	920e      	str	r2, [sp, #56]	; 0x38
 80100d4:	f1cb 0300 	rsb	r3, fp, #0
 80100d8:	e7e3      	b.n	80100a2 <_dtoa_r+0x1f2>
 80100da:	2200      	movs	r2, #0
 80100dc:	9208      	str	r2, [sp, #32]
 80100de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80100e0:	2a00      	cmp	r2, #0
 80100e2:	dc39      	bgt.n	8010158 <_dtoa_r+0x2a8>
 80100e4:	f04f 0a01 	mov.w	sl, #1
 80100e8:	46d1      	mov	r9, sl
 80100ea:	4652      	mov	r2, sl
 80100ec:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80100f0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80100f2:	2100      	movs	r1, #0
 80100f4:	6079      	str	r1, [r7, #4]
 80100f6:	2004      	movs	r0, #4
 80100f8:	f100 0c14 	add.w	ip, r0, #20
 80100fc:	4594      	cmp	ip, r2
 80100fe:	6879      	ldr	r1, [r7, #4]
 8010100:	d92f      	bls.n	8010162 <_dtoa_r+0x2b2>
 8010102:	4630      	mov	r0, r6
 8010104:	930c      	str	r3, [sp, #48]	; 0x30
 8010106:	f000 fe8f 	bl	8010e28 <_Balloc>
 801010a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801010c:	9000      	str	r0, [sp, #0]
 801010e:	4602      	mov	r2, r0
 8010110:	2800      	cmp	r0, #0
 8010112:	d149      	bne.n	80101a8 <_dtoa_r+0x2f8>
 8010114:	4b23      	ldr	r3, [pc, #140]	; (80101a4 <_dtoa_r+0x2f4>)
 8010116:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801011a:	e6df      	b.n	800fedc <_dtoa_r+0x2c>
 801011c:	2201      	movs	r2, #1
 801011e:	e7dd      	b.n	80100dc <_dtoa_r+0x22c>
 8010120:	2200      	movs	r2, #0
 8010122:	9208      	str	r2, [sp, #32]
 8010124:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010126:	eb0b 0a02 	add.w	sl, fp, r2
 801012a:	f10a 0901 	add.w	r9, sl, #1
 801012e:	464a      	mov	r2, r9
 8010130:	2a01      	cmp	r2, #1
 8010132:	bfb8      	it	lt
 8010134:	2201      	movlt	r2, #1
 8010136:	e7db      	b.n	80100f0 <_dtoa_r+0x240>
 8010138:	2201      	movs	r2, #1
 801013a:	e7f2      	b.n	8010122 <_dtoa_r+0x272>
 801013c:	2401      	movs	r4, #1
 801013e:	2200      	movs	r2, #0
 8010140:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8010144:	f04f 3aff 	mov.w	sl, #4294967295
 8010148:	2100      	movs	r1, #0
 801014a:	46d1      	mov	r9, sl
 801014c:	2212      	movs	r2, #18
 801014e:	9109      	str	r1, [sp, #36]	; 0x24
 8010150:	e7ce      	b.n	80100f0 <_dtoa_r+0x240>
 8010152:	2201      	movs	r2, #1
 8010154:	9208      	str	r2, [sp, #32]
 8010156:	e7f5      	b.n	8010144 <_dtoa_r+0x294>
 8010158:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 801015c:	46d1      	mov	r9, sl
 801015e:	4652      	mov	r2, sl
 8010160:	e7c6      	b.n	80100f0 <_dtoa_r+0x240>
 8010162:	3101      	adds	r1, #1
 8010164:	6079      	str	r1, [r7, #4]
 8010166:	0040      	lsls	r0, r0, #1
 8010168:	e7c6      	b.n	80100f8 <_dtoa_r+0x248>
 801016a:	bf00      	nop
 801016c:	f3af 8000 	nop.w
 8010170:	636f4361 	.word	0x636f4361
 8010174:	3fd287a7 	.word	0x3fd287a7
 8010178:	8b60c8b3 	.word	0x8b60c8b3
 801017c:	3fc68a28 	.word	0x3fc68a28
 8010180:	509f79fb 	.word	0x509f79fb
 8010184:	3fd34413 	.word	0x3fd34413
 8010188:	08013795 	.word	0x08013795
 801018c:	080137ac 	.word	0x080137ac
 8010190:	7ff00000 	.word	0x7ff00000
 8010194:	08013791 	.word	0x08013791
 8010198:	08013788 	.word	0x08013788
 801019c:	08013765 	.word	0x08013765
 80101a0:	08013908 	.word	0x08013908
 80101a4:	0801380b 	.word	0x0801380b
 80101a8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80101aa:	9900      	ldr	r1, [sp, #0]
 80101ac:	6011      	str	r1, [r2, #0]
 80101ae:	f1b9 0f0e 	cmp.w	r9, #14
 80101b2:	d872      	bhi.n	801029a <_dtoa_r+0x3ea>
 80101b4:	2c00      	cmp	r4, #0
 80101b6:	d070      	beq.n	801029a <_dtoa_r+0x3ea>
 80101b8:	f1bb 0f00 	cmp.w	fp, #0
 80101bc:	f340 80a6 	ble.w	801030c <_dtoa_r+0x45c>
 80101c0:	49ca      	ldr	r1, [pc, #808]	; (80104ec <_dtoa_r+0x63c>)
 80101c2:	f00b 020f 	and.w	r2, fp, #15
 80101c6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80101ca:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80101ce:	ed92 7b00 	vldr	d7, [r2]
 80101d2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80101d6:	f000 808d 	beq.w	80102f4 <_dtoa_r+0x444>
 80101da:	4ac5      	ldr	r2, [pc, #788]	; (80104f0 <_dtoa_r+0x640>)
 80101dc:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80101e0:	ed92 6b08 	vldr	d6, [r2, #32]
 80101e4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80101e8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80101ec:	f001 010f 	and.w	r1, r1, #15
 80101f0:	2203      	movs	r2, #3
 80101f2:	48bf      	ldr	r0, [pc, #764]	; (80104f0 <_dtoa_r+0x640>)
 80101f4:	2900      	cmp	r1, #0
 80101f6:	d17f      	bne.n	80102f8 <_dtoa_r+0x448>
 80101f8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80101fc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010200:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010204:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010206:	2900      	cmp	r1, #0
 8010208:	f000 80b2 	beq.w	8010370 <_dtoa_r+0x4c0>
 801020c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010210:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010214:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801021c:	f140 80a8 	bpl.w	8010370 <_dtoa_r+0x4c0>
 8010220:	f1b9 0f00 	cmp.w	r9, #0
 8010224:	f000 80a4 	beq.w	8010370 <_dtoa_r+0x4c0>
 8010228:	f1ba 0f00 	cmp.w	sl, #0
 801022c:	dd31      	ble.n	8010292 <_dtoa_r+0x3e2>
 801022e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8010232:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010236:	ed8d 7b02 	vstr	d7, [sp, #8]
 801023a:	f10b 37ff 	add.w	r7, fp, #4294967295
 801023e:	3201      	adds	r2, #1
 8010240:	4650      	mov	r0, sl
 8010242:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010246:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801024a:	ee07 2a90 	vmov	s15, r2
 801024e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010252:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010256:	ed8d 5b02 	vstr	d5, [sp, #8]
 801025a:	9c03      	ldr	r4, [sp, #12]
 801025c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8010260:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8010264:	2800      	cmp	r0, #0
 8010266:	f040 8086 	bne.w	8010376 <_dtoa_r+0x4c6>
 801026a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801026e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010272:	ec42 1b17 	vmov	d7, r1, r2
 8010276:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801027a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801027e:	f300 8272 	bgt.w	8010766 <_dtoa_r+0x8b6>
 8010282:	eeb1 7b47 	vneg.f64	d7, d7
 8010286:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801028a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801028e:	f100 8267 	bmi.w	8010760 <_dtoa_r+0x8b0>
 8010292:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8010296:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801029a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801029c:	2a00      	cmp	r2, #0
 801029e:	f2c0 8129 	blt.w	80104f4 <_dtoa_r+0x644>
 80102a2:	f1bb 0f0e 	cmp.w	fp, #14
 80102a6:	f300 8125 	bgt.w	80104f4 <_dtoa_r+0x644>
 80102aa:	4b90      	ldr	r3, [pc, #576]	; (80104ec <_dtoa_r+0x63c>)
 80102ac:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80102b0:	ed93 6b00 	vldr	d6, [r3]
 80102b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	f280 80c3 	bge.w	8010442 <_dtoa_r+0x592>
 80102bc:	f1b9 0f00 	cmp.w	r9, #0
 80102c0:	f300 80bf 	bgt.w	8010442 <_dtoa_r+0x592>
 80102c4:	f040 824c 	bne.w	8010760 <_dtoa_r+0x8b0>
 80102c8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80102cc:	ee26 6b07 	vmul.f64	d6, d6, d7
 80102d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80102d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80102d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102dc:	464c      	mov	r4, r9
 80102de:	464f      	mov	r7, r9
 80102e0:	f280 8222 	bge.w	8010728 <_dtoa_r+0x878>
 80102e4:	f8dd 8000 	ldr.w	r8, [sp]
 80102e8:	2331      	movs	r3, #49	; 0x31
 80102ea:	f808 3b01 	strb.w	r3, [r8], #1
 80102ee:	f10b 0b01 	add.w	fp, fp, #1
 80102f2:	e21e      	b.n	8010732 <_dtoa_r+0x882>
 80102f4:	2202      	movs	r2, #2
 80102f6:	e77c      	b.n	80101f2 <_dtoa_r+0x342>
 80102f8:	07cc      	lsls	r4, r1, #31
 80102fa:	d504      	bpl.n	8010306 <_dtoa_r+0x456>
 80102fc:	ed90 6b00 	vldr	d6, [r0]
 8010300:	3201      	adds	r2, #1
 8010302:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010306:	1049      	asrs	r1, r1, #1
 8010308:	3008      	adds	r0, #8
 801030a:	e773      	b.n	80101f4 <_dtoa_r+0x344>
 801030c:	d02e      	beq.n	801036c <_dtoa_r+0x4bc>
 801030e:	f1cb 0100 	rsb	r1, fp, #0
 8010312:	4a76      	ldr	r2, [pc, #472]	; (80104ec <_dtoa_r+0x63c>)
 8010314:	f001 000f 	and.w	r0, r1, #15
 8010318:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801031c:	ed92 7b00 	vldr	d7, [r2]
 8010320:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8010324:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010328:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801032c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8010330:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8010334:	486e      	ldr	r0, [pc, #440]	; (80104f0 <_dtoa_r+0x640>)
 8010336:	1109      	asrs	r1, r1, #4
 8010338:	2400      	movs	r4, #0
 801033a:	2202      	movs	r2, #2
 801033c:	b939      	cbnz	r1, 801034e <_dtoa_r+0x49e>
 801033e:	2c00      	cmp	r4, #0
 8010340:	f43f af60 	beq.w	8010204 <_dtoa_r+0x354>
 8010344:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010348:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801034c:	e75a      	b.n	8010204 <_dtoa_r+0x354>
 801034e:	07cf      	lsls	r7, r1, #31
 8010350:	d509      	bpl.n	8010366 <_dtoa_r+0x4b6>
 8010352:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8010356:	ed90 7b00 	vldr	d7, [r0]
 801035a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801035e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8010362:	3201      	adds	r2, #1
 8010364:	2401      	movs	r4, #1
 8010366:	1049      	asrs	r1, r1, #1
 8010368:	3008      	adds	r0, #8
 801036a:	e7e7      	b.n	801033c <_dtoa_r+0x48c>
 801036c:	2202      	movs	r2, #2
 801036e:	e749      	b.n	8010204 <_dtoa_r+0x354>
 8010370:	465f      	mov	r7, fp
 8010372:	4648      	mov	r0, r9
 8010374:	e765      	b.n	8010242 <_dtoa_r+0x392>
 8010376:	ec42 1b17 	vmov	d7, r1, r2
 801037a:	4a5c      	ldr	r2, [pc, #368]	; (80104ec <_dtoa_r+0x63c>)
 801037c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010380:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010384:	9a00      	ldr	r2, [sp, #0]
 8010386:	1814      	adds	r4, r2, r0
 8010388:	9a08      	ldr	r2, [sp, #32]
 801038a:	b352      	cbz	r2, 80103e2 <_dtoa_r+0x532>
 801038c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8010390:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8010394:	f8dd 8000 	ldr.w	r8, [sp]
 8010398:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801039c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80103a0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80103a4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80103a8:	ee14 2a90 	vmov	r2, s9
 80103ac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80103b0:	3230      	adds	r2, #48	; 0x30
 80103b2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80103b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80103ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103be:	f808 2b01 	strb.w	r2, [r8], #1
 80103c2:	d439      	bmi.n	8010438 <_dtoa_r+0x588>
 80103c4:	ee32 5b46 	vsub.f64	d5, d2, d6
 80103c8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80103cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103d0:	d472      	bmi.n	80104b8 <_dtoa_r+0x608>
 80103d2:	45a0      	cmp	r8, r4
 80103d4:	f43f af5d 	beq.w	8010292 <_dtoa_r+0x3e2>
 80103d8:	ee27 7b03 	vmul.f64	d7, d7, d3
 80103dc:	ee26 6b03 	vmul.f64	d6, d6, d3
 80103e0:	e7e0      	b.n	80103a4 <_dtoa_r+0x4f4>
 80103e2:	f8dd 8000 	ldr.w	r8, [sp]
 80103e6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80103ea:	4621      	mov	r1, r4
 80103ec:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80103f0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80103f4:	ee14 2a90 	vmov	r2, s9
 80103f8:	3230      	adds	r2, #48	; 0x30
 80103fa:	f808 2b01 	strb.w	r2, [r8], #1
 80103fe:	45a0      	cmp	r8, r4
 8010400:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010404:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010408:	d118      	bne.n	801043c <_dtoa_r+0x58c>
 801040a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801040e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010412:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801041a:	dc4d      	bgt.n	80104b8 <_dtoa_r+0x608>
 801041c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010420:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010428:	f57f af33 	bpl.w	8010292 <_dtoa_r+0x3e2>
 801042c:	4688      	mov	r8, r1
 801042e:	3901      	subs	r1, #1
 8010430:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8010434:	2b30      	cmp	r3, #48	; 0x30
 8010436:	d0f9      	beq.n	801042c <_dtoa_r+0x57c>
 8010438:	46bb      	mov	fp, r7
 801043a:	e02a      	b.n	8010492 <_dtoa_r+0x5e2>
 801043c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010440:	e7d6      	b.n	80103f0 <_dtoa_r+0x540>
 8010442:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010446:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801044a:	f8dd 8000 	ldr.w	r8, [sp]
 801044e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010452:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010456:	ee15 3a10 	vmov	r3, s10
 801045a:	3330      	adds	r3, #48	; 0x30
 801045c:	f808 3b01 	strb.w	r3, [r8], #1
 8010460:	9b00      	ldr	r3, [sp, #0]
 8010462:	eba8 0303 	sub.w	r3, r8, r3
 8010466:	4599      	cmp	r9, r3
 8010468:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801046c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8010470:	d133      	bne.n	80104da <_dtoa_r+0x62a>
 8010472:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010476:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801047a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801047e:	dc1a      	bgt.n	80104b6 <_dtoa_r+0x606>
 8010480:	eeb4 7b46 	vcmp.f64	d7, d6
 8010484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010488:	d103      	bne.n	8010492 <_dtoa_r+0x5e2>
 801048a:	ee15 3a10 	vmov	r3, s10
 801048e:	07d9      	lsls	r1, r3, #31
 8010490:	d411      	bmi.n	80104b6 <_dtoa_r+0x606>
 8010492:	4629      	mov	r1, r5
 8010494:	4630      	mov	r0, r6
 8010496:	f000 fd07 	bl	8010ea8 <_Bfree>
 801049a:	2300      	movs	r3, #0
 801049c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801049e:	f888 3000 	strb.w	r3, [r8]
 80104a2:	f10b 0301 	add.w	r3, fp, #1
 80104a6:	6013      	str	r3, [r2, #0]
 80104a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	f43f ad4d 	beq.w	800ff4a <_dtoa_r+0x9a>
 80104b0:	f8c3 8000 	str.w	r8, [r3]
 80104b4:	e549      	b.n	800ff4a <_dtoa_r+0x9a>
 80104b6:	465f      	mov	r7, fp
 80104b8:	4643      	mov	r3, r8
 80104ba:	4698      	mov	r8, r3
 80104bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80104c0:	2a39      	cmp	r2, #57	; 0x39
 80104c2:	d106      	bne.n	80104d2 <_dtoa_r+0x622>
 80104c4:	9a00      	ldr	r2, [sp, #0]
 80104c6:	429a      	cmp	r2, r3
 80104c8:	d1f7      	bne.n	80104ba <_dtoa_r+0x60a>
 80104ca:	9900      	ldr	r1, [sp, #0]
 80104cc:	2230      	movs	r2, #48	; 0x30
 80104ce:	3701      	adds	r7, #1
 80104d0:	700a      	strb	r2, [r1, #0]
 80104d2:	781a      	ldrb	r2, [r3, #0]
 80104d4:	3201      	adds	r2, #1
 80104d6:	701a      	strb	r2, [r3, #0]
 80104d8:	e7ae      	b.n	8010438 <_dtoa_r+0x588>
 80104da:	ee27 7b04 	vmul.f64	d7, d7, d4
 80104de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80104e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104e6:	d1b2      	bne.n	801044e <_dtoa_r+0x59e>
 80104e8:	e7d3      	b.n	8010492 <_dtoa_r+0x5e2>
 80104ea:	bf00      	nop
 80104ec:	08013908 	.word	0x08013908
 80104f0:	080138e0 	.word	0x080138e0
 80104f4:	9908      	ldr	r1, [sp, #32]
 80104f6:	2900      	cmp	r1, #0
 80104f8:	f000 80d1 	beq.w	801069e <_dtoa_r+0x7ee>
 80104fc:	9907      	ldr	r1, [sp, #28]
 80104fe:	2901      	cmp	r1, #1
 8010500:	f300 80b4 	bgt.w	801066c <_dtoa_r+0x7bc>
 8010504:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010506:	2900      	cmp	r1, #0
 8010508:	f000 80ac 	beq.w	8010664 <_dtoa_r+0x7b4>
 801050c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010510:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010514:	461c      	mov	r4, r3
 8010516:	930a      	str	r3, [sp, #40]	; 0x28
 8010518:	9b05      	ldr	r3, [sp, #20]
 801051a:	4413      	add	r3, r2
 801051c:	9305      	str	r3, [sp, #20]
 801051e:	9b06      	ldr	r3, [sp, #24]
 8010520:	2101      	movs	r1, #1
 8010522:	4413      	add	r3, r2
 8010524:	4630      	mov	r0, r6
 8010526:	9306      	str	r3, [sp, #24]
 8010528:	f000 fd7a 	bl	8011020 <__i2b>
 801052c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801052e:	4607      	mov	r7, r0
 8010530:	f1b8 0f00 	cmp.w	r8, #0
 8010534:	dd0d      	ble.n	8010552 <_dtoa_r+0x6a2>
 8010536:	9a06      	ldr	r2, [sp, #24]
 8010538:	2a00      	cmp	r2, #0
 801053a:	dd0a      	ble.n	8010552 <_dtoa_r+0x6a2>
 801053c:	4542      	cmp	r2, r8
 801053e:	9905      	ldr	r1, [sp, #20]
 8010540:	bfa8      	it	ge
 8010542:	4642      	movge	r2, r8
 8010544:	1a89      	subs	r1, r1, r2
 8010546:	9105      	str	r1, [sp, #20]
 8010548:	9906      	ldr	r1, [sp, #24]
 801054a:	eba8 0802 	sub.w	r8, r8, r2
 801054e:	1a8a      	subs	r2, r1, r2
 8010550:	9206      	str	r2, [sp, #24]
 8010552:	b303      	cbz	r3, 8010596 <_dtoa_r+0x6e6>
 8010554:	9a08      	ldr	r2, [sp, #32]
 8010556:	2a00      	cmp	r2, #0
 8010558:	f000 80a6 	beq.w	80106a8 <_dtoa_r+0x7f8>
 801055c:	2c00      	cmp	r4, #0
 801055e:	dd13      	ble.n	8010588 <_dtoa_r+0x6d8>
 8010560:	4639      	mov	r1, r7
 8010562:	4622      	mov	r2, r4
 8010564:	4630      	mov	r0, r6
 8010566:	930c      	str	r3, [sp, #48]	; 0x30
 8010568:	f000 fe16 	bl	8011198 <__pow5mult>
 801056c:	462a      	mov	r2, r5
 801056e:	4601      	mov	r1, r0
 8010570:	4607      	mov	r7, r0
 8010572:	4630      	mov	r0, r6
 8010574:	f000 fd6a 	bl	801104c <__multiply>
 8010578:	4629      	mov	r1, r5
 801057a:	900a      	str	r0, [sp, #40]	; 0x28
 801057c:	4630      	mov	r0, r6
 801057e:	f000 fc93 	bl	8010ea8 <_Bfree>
 8010582:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010584:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010586:	4615      	mov	r5, r2
 8010588:	1b1a      	subs	r2, r3, r4
 801058a:	d004      	beq.n	8010596 <_dtoa_r+0x6e6>
 801058c:	4629      	mov	r1, r5
 801058e:	4630      	mov	r0, r6
 8010590:	f000 fe02 	bl	8011198 <__pow5mult>
 8010594:	4605      	mov	r5, r0
 8010596:	2101      	movs	r1, #1
 8010598:	4630      	mov	r0, r6
 801059a:	f000 fd41 	bl	8011020 <__i2b>
 801059e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	4604      	mov	r4, r0
 80105a4:	f340 8082 	ble.w	80106ac <_dtoa_r+0x7fc>
 80105a8:	461a      	mov	r2, r3
 80105aa:	4601      	mov	r1, r0
 80105ac:	4630      	mov	r0, r6
 80105ae:	f000 fdf3 	bl	8011198 <__pow5mult>
 80105b2:	9b07      	ldr	r3, [sp, #28]
 80105b4:	2b01      	cmp	r3, #1
 80105b6:	4604      	mov	r4, r0
 80105b8:	dd7b      	ble.n	80106b2 <_dtoa_r+0x802>
 80105ba:	2300      	movs	r3, #0
 80105bc:	930a      	str	r3, [sp, #40]	; 0x28
 80105be:	6922      	ldr	r2, [r4, #16]
 80105c0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80105c4:	6910      	ldr	r0, [r2, #16]
 80105c6:	f000 fcdb 	bl	8010f80 <__hi0bits>
 80105ca:	f1c0 0020 	rsb	r0, r0, #32
 80105ce:	9b06      	ldr	r3, [sp, #24]
 80105d0:	4418      	add	r0, r3
 80105d2:	f010 001f 	ands.w	r0, r0, #31
 80105d6:	f000 808d 	beq.w	80106f4 <_dtoa_r+0x844>
 80105da:	f1c0 0220 	rsb	r2, r0, #32
 80105de:	2a04      	cmp	r2, #4
 80105e0:	f340 8086 	ble.w	80106f0 <_dtoa_r+0x840>
 80105e4:	f1c0 001c 	rsb	r0, r0, #28
 80105e8:	9b05      	ldr	r3, [sp, #20]
 80105ea:	4403      	add	r3, r0
 80105ec:	9305      	str	r3, [sp, #20]
 80105ee:	9b06      	ldr	r3, [sp, #24]
 80105f0:	4403      	add	r3, r0
 80105f2:	4480      	add	r8, r0
 80105f4:	9306      	str	r3, [sp, #24]
 80105f6:	9b05      	ldr	r3, [sp, #20]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	dd05      	ble.n	8010608 <_dtoa_r+0x758>
 80105fc:	4629      	mov	r1, r5
 80105fe:	461a      	mov	r2, r3
 8010600:	4630      	mov	r0, r6
 8010602:	f000 fe23 	bl	801124c <__lshift>
 8010606:	4605      	mov	r5, r0
 8010608:	9b06      	ldr	r3, [sp, #24]
 801060a:	2b00      	cmp	r3, #0
 801060c:	dd05      	ble.n	801061a <_dtoa_r+0x76a>
 801060e:	4621      	mov	r1, r4
 8010610:	461a      	mov	r2, r3
 8010612:	4630      	mov	r0, r6
 8010614:	f000 fe1a 	bl	801124c <__lshift>
 8010618:	4604      	mov	r4, r0
 801061a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801061c:	2b00      	cmp	r3, #0
 801061e:	d06b      	beq.n	80106f8 <_dtoa_r+0x848>
 8010620:	4621      	mov	r1, r4
 8010622:	4628      	mov	r0, r5
 8010624:	f000 fe7e 	bl	8011324 <__mcmp>
 8010628:	2800      	cmp	r0, #0
 801062a:	da65      	bge.n	80106f8 <_dtoa_r+0x848>
 801062c:	2300      	movs	r3, #0
 801062e:	4629      	mov	r1, r5
 8010630:	220a      	movs	r2, #10
 8010632:	4630      	mov	r0, r6
 8010634:	f000 fc5a 	bl	8010eec <__multadd>
 8010638:	9b08      	ldr	r3, [sp, #32]
 801063a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801063e:	4605      	mov	r5, r0
 8010640:	2b00      	cmp	r3, #0
 8010642:	f000 8192 	beq.w	801096a <_dtoa_r+0xaba>
 8010646:	4639      	mov	r1, r7
 8010648:	2300      	movs	r3, #0
 801064a:	220a      	movs	r2, #10
 801064c:	4630      	mov	r0, r6
 801064e:	f000 fc4d 	bl	8010eec <__multadd>
 8010652:	f1ba 0f00 	cmp.w	sl, #0
 8010656:	4607      	mov	r7, r0
 8010658:	f300 808e 	bgt.w	8010778 <_dtoa_r+0x8c8>
 801065c:	9b07      	ldr	r3, [sp, #28]
 801065e:	2b02      	cmp	r3, #2
 8010660:	dc51      	bgt.n	8010706 <_dtoa_r+0x856>
 8010662:	e089      	b.n	8010778 <_dtoa_r+0x8c8>
 8010664:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010666:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801066a:	e751      	b.n	8010510 <_dtoa_r+0x660>
 801066c:	f109 34ff 	add.w	r4, r9, #4294967295
 8010670:	42a3      	cmp	r3, r4
 8010672:	bfbf      	itttt	lt
 8010674:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8010676:	1ae3      	sublt	r3, r4, r3
 8010678:	18d2      	addlt	r2, r2, r3
 801067a:	4613      	movlt	r3, r2
 801067c:	bfb7      	itett	lt
 801067e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010680:	1b1c      	subge	r4, r3, r4
 8010682:	4623      	movlt	r3, r4
 8010684:	2400      	movlt	r4, #0
 8010686:	f1b9 0f00 	cmp.w	r9, #0
 801068a:	bfb5      	itete	lt
 801068c:	9a05      	ldrlt	r2, [sp, #20]
 801068e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8010692:	eba2 0809 	sublt.w	r8, r2, r9
 8010696:	464a      	movge	r2, r9
 8010698:	bfb8      	it	lt
 801069a:	2200      	movlt	r2, #0
 801069c:	e73b      	b.n	8010516 <_dtoa_r+0x666>
 801069e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80106a2:	9f08      	ldr	r7, [sp, #32]
 80106a4:	461c      	mov	r4, r3
 80106a6:	e743      	b.n	8010530 <_dtoa_r+0x680>
 80106a8:	461a      	mov	r2, r3
 80106aa:	e76f      	b.n	801058c <_dtoa_r+0x6dc>
 80106ac:	9b07      	ldr	r3, [sp, #28]
 80106ae:	2b01      	cmp	r3, #1
 80106b0:	dc18      	bgt.n	80106e4 <_dtoa_r+0x834>
 80106b2:	9b02      	ldr	r3, [sp, #8]
 80106b4:	b9b3      	cbnz	r3, 80106e4 <_dtoa_r+0x834>
 80106b6:	9b03      	ldr	r3, [sp, #12]
 80106b8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80106bc:	b9a2      	cbnz	r2, 80106e8 <_dtoa_r+0x838>
 80106be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80106c2:	0d12      	lsrs	r2, r2, #20
 80106c4:	0512      	lsls	r2, r2, #20
 80106c6:	b18a      	cbz	r2, 80106ec <_dtoa_r+0x83c>
 80106c8:	9b05      	ldr	r3, [sp, #20]
 80106ca:	3301      	adds	r3, #1
 80106cc:	9305      	str	r3, [sp, #20]
 80106ce:	9b06      	ldr	r3, [sp, #24]
 80106d0:	3301      	adds	r3, #1
 80106d2:	9306      	str	r3, [sp, #24]
 80106d4:	2301      	movs	r3, #1
 80106d6:	930a      	str	r3, [sp, #40]	; 0x28
 80106d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80106da:	2b00      	cmp	r3, #0
 80106dc:	f47f af6f 	bne.w	80105be <_dtoa_r+0x70e>
 80106e0:	2001      	movs	r0, #1
 80106e2:	e774      	b.n	80105ce <_dtoa_r+0x71e>
 80106e4:	2300      	movs	r3, #0
 80106e6:	e7f6      	b.n	80106d6 <_dtoa_r+0x826>
 80106e8:	9b02      	ldr	r3, [sp, #8]
 80106ea:	e7f4      	b.n	80106d6 <_dtoa_r+0x826>
 80106ec:	920a      	str	r2, [sp, #40]	; 0x28
 80106ee:	e7f3      	b.n	80106d8 <_dtoa_r+0x828>
 80106f0:	d081      	beq.n	80105f6 <_dtoa_r+0x746>
 80106f2:	4610      	mov	r0, r2
 80106f4:	301c      	adds	r0, #28
 80106f6:	e777      	b.n	80105e8 <_dtoa_r+0x738>
 80106f8:	f1b9 0f00 	cmp.w	r9, #0
 80106fc:	dc37      	bgt.n	801076e <_dtoa_r+0x8be>
 80106fe:	9b07      	ldr	r3, [sp, #28]
 8010700:	2b02      	cmp	r3, #2
 8010702:	dd34      	ble.n	801076e <_dtoa_r+0x8be>
 8010704:	46ca      	mov	sl, r9
 8010706:	f1ba 0f00 	cmp.w	sl, #0
 801070a:	d10d      	bne.n	8010728 <_dtoa_r+0x878>
 801070c:	4621      	mov	r1, r4
 801070e:	4653      	mov	r3, sl
 8010710:	2205      	movs	r2, #5
 8010712:	4630      	mov	r0, r6
 8010714:	f000 fbea 	bl	8010eec <__multadd>
 8010718:	4601      	mov	r1, r0
 801071a:	4604      	mov	r4, r0
 801071c:	4628      	mov	r0, r5
 801071e:	f000 fe01 	bl	8011324 <__mcmp>
 8010722:	2800      	cmp	r0, #0
 8010724:	f73f adde 	bgt.w	80102e4 <_dtoa_r+0x434>
 8010728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801072a:	f8dd 8000 	ldr.w	r8, [sp]
 801072e:	ea6f 0b03 	mvn.w	fp, r3
 8010732:	f04f 0900 	mov.w	r9, #0
 8010736:	4621      	mov	r1, r4
 8010738:	4630      	mov	r0, r6
 801073a:	f000 fbb5 	bl	8010ea8 <_Bfree>
 801073e:	2f00      	cmp	r7, #0
 8010740:	f43f aea7 	beq.w	8010492 <_dtoa_r+0x5e2>
 8010744:	f1b9 0f00 	cmp.w	r9, #0
 8010748:	d005      	beq.n	8010756 <_dtoa_r+0x8a6>
 801074a:	45b9      	cmp	r9, r7
 801074c:	d003      	beq.n	8010756 <_dtoa_r+0x8a6>
 801074e:	4649      	mov	r1, r9
 8010750:	4630      	mov	r0, r6
 8010752:	f000 fba9 	bl	8010ea8 <_Bfree>
 8010756:	4639      	mov	r1, r7
 8010758:	4630      	mov	r0, r6
 801075a:	f000 fba5 	bl	8010ea8 <_Bfree>
 801075e:	e698      	b.n	8010492 <_dtoa_r+0x5e2>
 8010760:	2400      	movs	r4, #0
 8010762:	4627      	mov	r7, r4
 8010764:	e7e0      	b.n	8010728 <_dtoa_r+0x878>
 8010766:	46bb      	mov	fp, r7
 8010768:	4604      	mov	r4, r0
 801076a:	4607      	mov	r7, r0
 801076c:	e5ba      	b.n	80102e4 <_dtoa_r+0x434>
 801076e:	9b08      	ldr	r3, [sp, #32]
 8010770:	46ca      	mov	sl, r9
 8010772:	2b00      	cmp	r3, #0
 8010774:	f000 8100 	beq.w	8010978 <_dtoa_r+0xac8>
 8010778:	f1b8 0f00 	cmp.w	r8, #0
 801077c:	dd05      	ble.n	801078a <_dtoa_r+0x8da>
 801077e:	4639      	mov	r1, r7
 8010780:	4642      	mov	r2, r8
 8010782:	4630      	mov	r0, r6
 8010784:	f000 fd62 	bl	801124c <__lshift>
 8010788:	4607      	mov	r7, r0
 801078a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801078c:	2b00      	cmp	r3, #0
 801078e:	d05d      	beq.n	801084c <_dtoa_r+0x99c>
 8010790:	6879      	ldr	r1, [r7, #4]
 8010792:	4630      	mov	r0, r6
 8010794:	f000 fb48 	bl	8010e28 <_Balloc>
 8010798:	4680      	mov	r8, r0
 801079a:	b928      	cbnz	r0, 80107a8 <_dtoa_r+0x8f8>
 801079c:	4b82      	ldr	r3, [pc, #520]	; (80109a8 <_dtoa_r+0xaf8>)
 801079e:	4602      	mov	r2, r0
 80107a0:	f240 21ea 	movw	r1, #746	; 0x2ea
 80107a4:	f7ff bb9a 	b.w	800fedc <_dtoa_r+0x2c>
 80107a8:	693a      	ldr	r2, [r7, #16]
 80107aa:	3202      	adds	r2, #2
 80107ac:	0092      	lsls	r2, r2, #2
 80107ae:	f107 010c 	add.w	r1, r7, #12
 80107b2:	300c      	adds	r0, #12
 80107b4:	f000 fb2a 	bl	8010e0c <memcpy>
 80107b8:	2201      	movs	r2, #1
 80107ba:	4641      	mov	r1, r8
 80107bc:	4630      	mov	r0, r6
 80107be:	f000 fd45 	bl	801124c <__lshift>
 80107c2:	9b00      	ldr	r3, [sp, #0]
 80107c4:	3301      	adds	r3, #1
 80107c6:	9305      	str	r3, [sp, #20]
 80107c8:	9b00      	ldr	r3, [sp, #0]
 80107ca:	4453      	add	r3, sl
 80107cc:	9309      	str	r3, [sp, #36]	; 0x24
 80107ce:	9b02      	ldr	r3, [sp, #8]
 80107d0:	f003 0301 	and.w	r3, r3, #1
 80107d4:	46b9      	mov	r9, r7
 80107d6:	9308      	str	r3, [sp, #32]
 80107d8:	4607      	mov	r7, r0
 80107da:	9b05      	ldr	r3, [sp, #20]
 80107dc:	4621      	mov	r1, r4
 80107de:	3b01      	subs	r3, #1
 80107e0:	4628      	mov	r0, r5
 80107e2:	9302      	str	r3, [sp, #8]
 80107e4:	f7ff fad8 	bl	800fd98 <quorem>
 80107e8:	4603      	mov	r3, r0
 80107ea:	3330      	adds	r3, #48	; 0x30
 80107ec:	9006      	str	r0, [sp, #24]
 80107ee:	4649      	mov	r1, r9
 80107f0:	4628      	mov	r0, r5
 80107f2:	930a      	str	r3, [sp, #40]	; 0x28
 80107f4:	f000 fd96 	bl	8011324 <__mcmp>
 80107f8:	463a      	mov	r2, r7
 80107fa:	4682      	mov	sl, r0
 80107fc:	4621      	mov	r1, r4
 80107fe:	4630      	mov	r0, r6
 8010800:	f000 fdac 	bl	801135c <__mdiff>
 8010804:	68c2      	ldr	r2, [r0, #12]
 8010806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010808:	4680      	mov	r8, r0
 801080a:	bb0a      	cbnz	r2, 8010850 <_dtoa_r+0x9a0>
 801080c:	4601      	mov	r1, r0
 801080e:	4628      	mov	r0, r5
 8010810:	f000 fd88 	bl	8011324 <__mcmp>
 8010814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010816:	4602      	mov	r2, r0
 8010818:	4641      	mov	r1, r8
 801081a:	4630      	mov	r0, r6
 801081c:	920e      	str	r2, [sp, #56]	; 0x38
 801081e:	930a      	str	r3, [sp, #40]	; 0x28
 8010820:	f000 fb42 	bl	8010ea8 <_Bfree>
 8010824:	9b07      	ldr	r3, [sp, #28]
 8010826:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010828:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801082c:	ea43 0102 	orr.w	r1, r3, r2
 8010830:	9b08      	ldr	r3, [sp, #32]
 8010832:	430b      	orrs	r3, r1
 8010834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010836:	d10d      	bne.n	8010854 <_dtoa_r+0x9a4>
 8010838:	2b39      	cmp	r3, #57	; 0x39
 801083a:	d029      	beq.n	8010890 <_dtoa_r+0x9e0>
 801083c:	f1ba 0f00 	cmp.w	sl, #0
 8010840:	dd01      	ble.n	8010846 <_dtoa_r+0x996>
 8010842:	9b06      	ldr	r3, [sp, #24]
 8010844:	3331      	adds	r3, #49	; 0x31
 8010846:	9a02      	ldr	r2, [sp, #8]
 8010848:	7013      	strb	r3, [r2, #0]
 801084a:	e774      	b.n	8010736 <_dtoa_r+0x886>
 801084c:	4638      	mov	r0, r7
 801084e:	e7b8      	b.n	80107c2 <_dtoa_r+0x912>
 8010850:	2201      	movs	r2, #1
 8010852:	e7e1      	b.n	8010818 <_dtoa_r+0x968>
 8010854:	f1ba 0f00 	cmp.w	sl, #0
 8010858:	db06      	blt.n	8010868 <_dtoa_r+0x9b8>
 801085a:	9907      	ldr	r1, [sp, #28]
 801085c:	ea41 0a0a 	orr.w	sl, r1, sl
 8010860:	9908      	ldr	r1, [sp, #32]
 8010862:	ea5a 0101 	orrs.w	r1, sl, r1
 8010866:	d120      	bne.n	80108aa <_dtoa_r+0x9fa>
 8010868:	2a00      	cmp	r2, #0
 801086a:	ddec      	ble.n	8010846 <_dtoa_r+0x996>
 801086c:	4629      	mov	r1, r5
 801086e:	2201      	movs	r2, #1
 8010870:	4630      	mov	r0, r6
 8010872:	9305      	str	r3, [sp, #20]
 8010874:	f000 fcea 	bl	801124c <__lshift>
 8010878:	4621      	mov	r1, r4
 801087a:	4605      	mov	r5, r0
 801087c:	f000 fd52 	bl	8011324 <__mcmp>
 8010880:	2800      	cmp	r0, #0
 8010882:	9b05      	ldr	r3, [sp, #20]
 8010884:	dc02      	bgt.n	801088c <_dtoa_r+0x9dc>
 8010886:	d1de      	bne.n	8010846 <_dtoa_r+0x996>
 8010888:	07da      	lsls	r2, r3, #31
 801088a:	d5dc      	bpl.n	8010846 <_dtoa_r+0x996>
 801088c:	2b39      	cmp	r3, #57	; 0x39
 801088e:	d1d8      	bne.n	8010842 <_dtoa_r+0x992>
 8010890:	9a02      	ldr	r2, [sp, #8]
 8010892:	2339      	movs	r3, #57	; 0x39
 8010894:	7013      	strb	r3, [r2, #0]
 8010896:	4643      	mov	r3, r8
 8010898:	4698      	mov	r8, r3
 801089a:	3b01      	subs	r3, #1
 801089c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80108a0:	2a39      	cmp	r2, #57	; 0x39
 80108a2:	d051      	beq.n	8010948 <_dtoa_r+0xa98>
 80108a4:	3201      	adds	r2, #1
 80108a6:	701a      	strb	r2, [r3, #0]
 80108a8:	e745      	b.n	8010736 <_dtoa_r+0x886>
 80108aa:	2a00      	cmp	r2, #0
 80108ac:	dd03      	ble.n	80108b6 <_dtoa_r+0xa06>
 80108ae:	2b39      	cmp	r3, #57	; 0x39
 80108b0:	d0ee      	beq.n	8010890 <_dtoa_r+0x9e0>
 80108b2:	3301      	adds	r3, #1
 80108b4:	e7c7      	b.n	8010846 <_dtoa_r+0x996>
 80108b6:	9a05      	ldr	r2, [sp, #20]
 80108b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80108ba:	f802 3c01 	strb.w	r3, [r2, #-1]
 80108be:	428a      	cmp	r2, r1
 80108c0:	d02b      	beq.n	801091a <_dtoa_r+0xa6a>
 80108c2:	4629      	mov	r1, r5
 80108c4:	2300      	movs	r3, #0
 80108c6:	220a      	movs	r2, #10
 80108c8:	4630      	mov	r0, r6
 80108ca:	f000 fb0f 	bl	8010eec <__multadd>
 80108ce:	45b9      	cmp	r9, r7
 80108d0:	4605      	mov	r5, r0
 80108d2:	f04f 0300 	mov.w	r3, #0
 80108d6:	f04f 020a 	mov.w	r2, #10
 80108da:	4649      	mov	r1, r9
 80108dc:	4630      	mov	r0, r6
 80108de:	d107      	bne.n	80108f0 <_dtoa_r+0xa40>
 80108e0:	f000 fb04 	bl	8010eec <__multadd>
 80108e4:	4681      	mov	r9, r0
 80108e6:	4607      	mov	r7, r0
 80108e8:	9b05      	ldr	r3, [sp, #20]
 80108ea:	3301      	adds	r3, #1
 80108ec:	9305      	str	r3, [sp, #20]
 80108ee:	e774      	b.n	80107da <_dtoa_r+0x92a>
 80108f0:	f000 fafc 	bl	8010eec <__multadd>
 80108f4:	4639      	mov	r1, r7
 80108f6:	4681      	mov	r9, r0
 80108f8:	2300      	movs	r3, #0
 80108fa:	220a      	movs	r2, #10
 80108fc:	4630      	mov	r0, r6
 80108fe:	f000 faf5 	bl	8010eec <__multadd>
 8010902:	4607      	mov	r7, r0
 8010904:	e7f0      	b.n	80108e8 <_dtoa_r+0xa38>
 8010906:	f1ba 0f00 	cmp.w	sl, #0
 801090a:	9a00      	ldr	r2, [sp, #0]
 801090c:	bfcc      	ite	gt
 801090e:	46d0      	movgt	r8, sl
 8010910:	f04f 0801 	movle.w	r8, #1
 8010914:	4490      	add	r8, r2
 8010916:	f04f 0900 	mov.w	r9, #0
 801091a:	4629      	mov	r1, r5
 801091c:	2201      	movs	r2, #1
 801091e:	4630      	mov	r0, r6
 8010920:	9302      	str	r3, [sp, #8]
 8010922:	f000 fc93 	bl	801124c <__lshift>
 8010926:	4621      	mov	r1, r4
 8010928:	4605      	mov	r5, r0
 801092a:	f000 fcfb 	bl	8011324 <__mcmp>
 801092e:	2800      	cmp	r0, #0
 8010930:	dcb1      	bgt.n	8010896 <_dtoa_r+0x9e6>
 8010932:	d102      	bne.n	801093a <_dtoa_r+0xa8a>
 8010934:	9b02      	ldr	r3, [sp, #8]
 8010936:	07db      	lsls	r3, r3, #31
 8010938:	d4ad      	bmi.n	8010896 <_dtoa_r+0x9e6>
 801093a:	4643      	mov	r3, r8
 801093c:	4698      	mov	r8, r3
 801093e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010942:	2a30      	cmp	r2, #48	; 0x30
 8010944:	d0fa      	beq.n	801093c <_dtoa_r+0xa8c>
 8010946:	e6f6      	b.n	8010736 <_dtoa_r+0x886>
 8010948:	9a00      	ldr	r2, [sp, #0]
 801094a:	429a      	cmp	r2, r3
 801094c:	d1a4      	bne.n	8010898 <_dtoa_r+0x9e8>
 801094e:	f10b 0b01 	add.w	fp, fp, #1
 8010952:	2331      	movs	r3, #49	; 0x31
 8010954:	e778      	b.n	8010848 <_dtoa_r+0x998>
 8010956:	4b15      	ldr	r3, [pc, #84]	; (80109ac <_dtoa_r+0xafc>)
 8010958:	f7ff bb12 	b.w	800ff80 <_dtoa_r+0xd0>
 801095c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801095e:	2b00      	cmp	r3, #0
 8010960:	f47f aaee 	bne.w	800ff40 <_dtoa_r+0x90>
 8010964:	4b12      	ldr	r3, [pc, #72]	; (80109b0 <_dtoa_r+0xb00>)
 8010966:	f7ff bb0b 	b.w	800ff80 <_dtoa_r+0xd0>
 801096a:	f1ba 0f00 	cmp.w	sl, #0
 801096e:	dc03      	bgt.n	8010978 <_dtoa_r+0xac8>
 8010970:	9b07      	ldr	r3, [sp, #28]
 8010972:	2b02      	cmp	r3, #2
 8010974:	f73f aec7 	bgt.w	8010706 <_dtoa_r+0x856>
 8010978:	f8dd 8000 	ldr.w	r8, [sp]
 801097c:	4621      	mov	r1, r4
 801097e:	4628      	mov	r0, r5
 8010980:	f7ff fa0a 	bl	800fd98 <quorem>
 8010984:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010988:	f808 3b01 	strb.w	r3, [r8], #1
 801098c:	9a00      	ldr	r2, [sp, #0]
 801098e:	eba8 0202 	sub.w	r2, r8, r2
 8010992:	4592      	cmp	sl, r2
 8010994:	ddb7      	ble.n	8010906 <_dtoa_r+0xa56>
 8010996:	4629      	mov	r1, r5
 8010998:	2300      	movs	r3, #0
 801099a:	220a      	movs	r2, #10
 801099c:	4630      	mov	r0, r6
 801099e:	f000 faa5 	bl	8010eec <__multadd>
 80109a2:	4605      	mov	r5, r0
 80109a4:	e7ea      	b.n	801097c <_dtoa_r+0xacc>
 80109a6:	bf00      	nop
 80109a8:	0801380b 	.word	0x0801380b
 80109ac:	08013764 	.word	0x08013764
 80109b0:	08013788 	.word	0x08013788

080109b4 <__sflush_r>:
 80109b4:	898a      	ldrh	r2, [r1, #12]
 80109b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109ba:	4605      	mov	r5, r0
 80109bc:	0710      	lsls	r0, r2, #28
 80109be:	460c      	mov	r4, r1
 80109c0:	d458      	bmi.n	8010a74 <__sflush_r+0xc0>
 80109c2:	684b      	ldr	r3, [r1, #4]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	dc05      	bgt.n	80109d4 <__sflush_r+0x20>
 80109c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	dc02      	bgt.n	80109d4 <__sflush_r+0x20>
 80109ce:	2000      	movs	r0, #0
 80109d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80109d6:	2e00      	cmp	r6, #0
 80109d8:	d0f9      	beq.n	80109ce <__sflush_r+0x1a>
 80109da:	2300      	movs	r3, #0
 80109dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80109e0:	682f      	ldr	r7, [r5, #0]
 80109e2:	602b      	str	r3, [r5, #0]
 80109e4:	d032      	beq.n	8010a4c <__sflush_r+0x98>
 80109e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80109e8:	89a3      	ldrh	r3, [r4, #12]
 80109ea:	075a      	lsls	r2, r3, #29
 80109ec:	d505      	bpl.n	80109fa <__sflush_r+0x46>
 80109ee:	6863      	ldr	r3, [r4, #4]
 80109f0:	1ac0      	subs	r0, r0, r3
 80109f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80109f4:	b10b      	cbz	r3, 80109fa <__sflush_r+0x46>
 80109f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80109f8:	1ac0      	subs	r0, r0, r3
 80109fa:	2300      	movs	r3, #0
 80109fc:	4602      	mov	r2, r0
 80109fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010a00:	6a21      	ldr	r1, [r4, #32]
 8010a02:	4628      	mov	r0, r5
 8010a04:	47b0      	blx	r6
 8010a06:	1c43      	adds	r3, r0, #1
 8010a08:	89a3      	ldrh	r3, [r4, #12]
 8010a0a:	d106      	bne.n	8010a1a <__sflush_r+0x66>
 8010a0c:	6829      	ldr	r1, [r5, #0]
 8010a0e:	291d      	cmp	r1, #29
 8010a10:	d82c      	bhi.n	8010a6c <__sflush_r+0xb8>
 8010a12:	4a2a      	ldr	r2, [pc, #168]	; (8010abc <__sflush_r+0x108>)
 8010a14:	40ca      	lsrs	r2, r1
 8010a16:	07d6      	lsls	r6, r2, #31
 8010a18:	d528      	bpl.n	8010a6c <__sflush_r+0xb8>
 8010a1a:	2200      	movs	r2, #0
 8010a1c:	6062      	str	r2, [r4, #4]
 8010a1e:	04d9      	lsls	r1, r3, #19
 8010a20:	6922      	ldr	r2, [r4, #16]
 8010a22:	6022      	str	r2, [r4, #0]
 8010a24:	d504      	bpl.n	8010a30 <__sflush_r+0x7c>
 8010a26:	1c42      	adds	r2, r0, #1
 8010a28:	d101      	bne.n	8010a2e <__sflush_r+0x7a>
 8010a2a:	682b      	ldr	r3, [r5, #0]
 8010a2c:	b903      	cbnz	r3, 8010a30 <__sflush_r+0x7c>
 8010a2e:	6560      	str	r0, [r4, #84]	; 0x54
 8010a30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010a32:	602f      	str	r7, [r5, #0]
 8010a34:	2900      	cmp	r1, #0
 8010a36:	d0ca      	beq.n	80109ce <__sflush_r+0x1a>
 8010a38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a3c:	4299      	cmp	r1, r3
 8010a3e:	d002      	beq.n	8010a46 <__sflush_r+0x92>
 8010a40:	4628      	mov	r0, r5
 8010a42:	f000 fd7f 	bl	8011544 <_free_r>
 8010a46:	2000      	movs	r0, #0
 8010a48:	6360      	str	r0, [r4, #52]	; 0x34
 8010a4a:	e7c1      	b.n	80109d0 <__sflush_r+0x1c>
 8010a4c:	6a21      	ldr	r1, [r4, #32]
 8010a4e:	2301      	movs	r3, #1
 8010a50:	4628      	mov	r0, r5
 8010a52:	47b0      	blx	r6
 8010a54:	1c41      	adds	r1, r0, #1
 8010a56:	d1c7      	bne.n	80109e8 <__sflush_r+0x34>
 8010a58:	682b      	ldr	r3, [r5, #0]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d0c4      	beq.n	80109e8 <__sflush_r+0x34>
 8010a5e:	2b1d      	cmp	r3, #29
 8010a60:	d001      	beq.n	8010a66 <__sflush_r+0xb2>
 8010a62:	2b16      	cmp	r3, #22
 8010a64:	d101      	bne.n	8010a6a <__sflush_r+0xb6>
 8010a66:	602f      	str	r7, [r5, #0]
 8010a68:	e7b1      	b.n	80109ce <__sflush_r+0x1a>
 8010a6a:	89a3      	ldrh	r3, [r4, #12]
 8010a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a70:	81a3      	strh	r3, [r4, #12]
 8010a72:	e7ad      	b.n	80109d0 <__sflush_r+0x1c>
 8010a74:	690f      	ldr	r7, [r1, #16]
 8010a76:	2f00      	cmp	r7, #0
 8010a78:	d0a9      	beq.n	80109ce <__sflush_r+0x1a>
 8010a7a:	0793      	lsls	r3, r2, #30
 8010a7c:	680e      	ldr	r6, [r1, #0]
 8010a7e:	bf08      	it	eq
 8010a80:	694b      	ldreq	r3, [r1, #20]
 8010a82:	600f      	str	r7, [r1, #0]
 8010a84:	bf18      	it	ne
 8010a86:	2300      	movne	r3, #0
 8010a88:	eba6 0807 	sub.w	r8, r6, r7
 8010a8c:	608b      	str	r3, [r1, #8]
 8010a8e:	f1b8 0f00 	cmp.w	r8, #0
 8010a92:	dd9c      	ble.n	80109ce <__sflush_r+0x1a>
 8010a94:	6a21      	ldr	r1, [r4, #32]
 8010a96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010a98:	4643      	mov	r3, r8
 8010a9a:	463a      	mov	r2, r7
 8010a9c:	4628      	mov	r0, r5
 8010a9e:	47b0      	blx	r6
 8010aa0:	2800      	cmp	r0, #0
 8010aa2:	dc06      	bgt.n	8010ab2 <__sflush_r+0xfe>
 8010aa4:	89a3      	ldrh	r3, [r4, #12]
 8010aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010aaa:	81a3      	strh	r3, [r4, #12]
 8010aac:	f04f 30ff 	mov.w	r0, #4294967295
 8010ab0:	e78e      	b.n	80109d0 <__sflush_r+0x1c>
 8010ab2:	4407      	add	r7, r0
 8010ab4:	eba8 0800 	sub.w	r8, r8, r0
 8010ab8:	e7e9      	b.n	8010a8e <__sflush_r+0xda>
 8010aba:	bf00      	nop
 8010abc:	20400001 	.word	0x20400001

08010ac0 <_fflush_r>:
 8010ac0:	b538      	push	{r3, r4, r5, lr}
 8010ac2:	690b      	ldr	r3, [r1, #16]
 8010ac4:	4605      	mov	r5, r0
 8010ac6:	460c      	mov	r4, r1
 8010ac8:	b913      	cbnz	r3, 8010ad0 <_fflush_r+0x10>
 8010aca:	2500      	movs	r5, #0
 8010acc:	4628      	mov	r0, r5
 8010ace:	bd38      	pop	{r3, r4, r5, pc}
 8010ad0:	b118      	cbz	r0, 8010ada <_fflush_r+0x1a>
 8010ad2:	6983      	ldr	r3, [r0, #24]
 8010ad4:	b90b      	cbnz	r3, 8010ada <_fflush_r+0x1a>
 8010ad6:	f000 f887 	bl	8010be8 <__sinit>
 8010ada:	4b14      	ldr	r3, [pc, #80]	; (8010b2c <_fflush_r+0x6c>)
 8010adc:	429c      	cmp	r4, r3
 8010ade:	d11b      	bne.n	8010b18 <_fflush_r+0x58>
 8010ae0:	686c      	ldr	r4, [r5, #4]
 8010ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d0ef      	beq.n	8010aca <_fflush_r+0xa>
 8010aea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010aec:	07d0      	lsls	r0, r2, #31
 8010aee:	d404      	bmi.n	8010afa <_fflush_r+0x3a>
 8010af0:	0599      	lsls	r1, r3, #22
 8010af2:	d402      	bmi.n	8010afa <_fflush_r+0x3a>
 8010af4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010af6:	f000 f91a 	bl	8010d2e <__retarget_lock_acquire_recursive>
 8010afa:	4628      	mov	r0, r5
 8010afc:	4621      	mov	r1, r4
 8010afe:	f7ff ff59 	bl	80109b4 <__sflush_r>
 8010b02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010b04:	07da      	lsls	r2, r3, #31
 8010b06:	4605      	mov	r5, r0
 8010b08:	d4e0      	bmi.n	8010acc <_fflush_r+0xc>
 8010b0a:	89a3      	ldrh	r3, [r4, #12]
 8010b0c:	059b      	lsls	r3, r3, #22
 8010b0e:	d4dd      	bmi.n	8010acc <_fflush_r+0xc>
 8010b10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b12:	f000 f90d 	bl	8010d30 <__retarget_lock_release_recursive>
 8010b16:	e7d9      	b.n	8010acc <_fflush_r+0xc>
 8010b18:	4b05      	ldr	r3, [pc, #20]	; (8010b30 <_fflush_r+0x70>)
 8010b1a:	429c      	cmp	r4, r3
 8010b1c:	d101      	bne.n	8010b22 <_fflush_r+0x62>
 8010b1e:	68ac      	ldr	r4, [r5, #8]
 8010b20:	e7df      	b.n	8010ae2 <_fflush_r+0x22>
 8010b22:	4b04      	ldr	r3, [pc, #16]	; (8010b34 <_fflush_r+0x74>)
 8010b24:	429c      	cmp	r4, r3
 8010b26:	bf08      	it	eq
 8010b28:	68ec      	ldreq	r4, [r5, #12]
 8010b2a:	e7da      	b.n	8010ae2 <_fflush_r+0x22>
 8010b2c:	0801383c 	.word	0x0801383c
 8010b30:	0801385c 	.word	0x0801385c
 8010b34:	0801381c 	.word	0x0801381c

08010b38 <std>:
 8010b38:	2300      	movs	r3, #0
 8010b3a:	b510      	push	{r4, lr}
 8010b3c:	4604      	mov	r4, r0
 8010b3e:	e9c0 3300 	strd	r3, r3, [r0]
 8010b42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010b46:	6083      	str	r3, [r0, #8]
 8010b48:	8181      	strh	r1, [r0, #12]
 8010b4a:	6643      	str	r3, [r0, #100]	; 0x64
 8010b4c:	81c2      	strh	r2, [r0, #14]
 8010b4e:	6183      	str	r3, [r0, #24]
 8010b50:	4619      	mov	r1, r3
 8010b52:	2208      	movs	r2, #8
 8010b54:	305c      	adds	r0, #92	; 0x5c
 8010b56:	f7fe fb9f 	bl	800f298 <memset>
 8010b5a:	4b05      	ldr	r3, [pc, #20]	; (8010b70 <std+0x38>)
 8010b5c:	6263      	str	r3, [r4, #36]	; 0x24
 8010b5e:	4b05      	ldr	r3, [pc, #20]	; (8010b74 <std+0x3c>)
 8010b60:	62a3      	str	r3, [r4, #40]	; 0x28
 8010b62:	4b05      	ldr	r3, [pc, #20]	; (8010b78 <std+0x40>)
 8010b64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010b66:	4b05      	ldr	r3, [pc, #20]	; (8010b7c <std+0x44>)
 8010b68:	6224      	str	r4, [r4, #32]
 8010b6a:	6323      	str	r3, [r4, #48]	; 0x30
 8010b6c:	bd10      	pop	{r4, pc}
 8010b6e:	bf00      	nop
 8010b70:	080116b9 	.word	0x080116b9
 8010b74:	080116db 	.word	0x080116db
 8010b78:	08011713 	.word	0x08011713
 8010b7c:	08011737 	.word	0x08011737

08010b80 <_cleanup_r>:
 8010b80:	4901      	ldr	r1, [pc, #4]	; (8010b88 <_cleanup_r+0x8>)
 8010b82:	f000 b8af 	b.w	8010ce4 <_fwalk_reent>
 8010b86:	bf00      	nop
 8010b88:	08010ac1 	.word	0x08010ac1

08010b8c <__sfmoreglue>:
 8010b8c:	b570      	push	{r4, r5, r6, lr}
 8010b8e:	1e4a      	subs	r2, r1, #1
 8010b90:	2568      	movs	r5, #104	; 0x68
 8010b92:	4355      	muls	r5, r2
 8010b94:	460e      	mov	r6, r1
 8010b96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010b9a:	f000 fd23 	bl	80115e4 <_malloc_r>
 8010b9e:	4604      	mov	r4, r0
 8010ba0:	b140      	cbz	r0, 8010bb4 <__sfmoreglue+0x28>
 8010ba2:	2100      	movs	r1, #0
 8010ba4:	e9c0 1600 	strd	r1, r6, [r0]
 8010ba8:	300c      	adds	r0, #12
 8010baa:	60a0      	str	r0, [r4, #8]
 8010bac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010bb0:	f7fe fb72 	bl	800f298 <memset>
 8010bb4:	4620      	mov	r0, r4
 8010bb6:	bd70      	pop	{r4, r5, r6, pc}

08010bb8 <__sfp_lock_acquire>:
 8010bb8:	4801      	ldr	r0, [pc, #4]	; (8010bc0 <__sfp_lock_acquire+0x8>)
 8010bba:	f000 b8b8 	b.w	8010d2e <__retarget_lock_acquire_recursive>
 8010bbe:	bf00      	nop
 8010bc0:	24001460 	.word	0x24001460

08010bc4 <__sfp_lock_release>:
 8010bc4:	4801      	ldr	r0, [pc, #4]	; (8010bcc <__sfp_lock_release+0x8>)
 8010bc6:	f000 b8b3 	b.w	8010d30 <__retarget_lock_release_recursive>
 8010bca:	bf00      	nop
 8010bcc:	24001460 	.word	0x24001460

08010bd0 <__sinit_lock_acquire>:
 8010bd0:	4801      	ldr	r0, [pc, #4]	; (8010bd8 <__sinit_lock_acquire+0x8>)
 8010bd2:	f000 b8ac 	b.w	8010d2e <__retarget_lock_acquire_recursive>
 8010bd6:	bf00      	nop
 8010bd8:	2400145b 	.word	0x2400145b

08010bdc <__sinit_lock_release>:
 8010bdc:	4801      	ldr	r0, [pc, #4]	; (8010be4 <__sinit_lock_release+0x8>)
 8010bde:	f000 b8a7 	b.w	8010d30 <__retarget_lock_release_recursive>
 8010be2:	bf00      	nop
 8010be4:	2400145b 	.word	0x2400145b

08010be8 <__sinit>:
 8010be8:	b510      	push	{r4, lr}
 8010bea:	4604      	mov	r4, r0
 8010bec:	f7ff fff0 	bl	8010bd0 <__sinit_lock_acquire>
 8010bf0:	69a3      	ldr	r3, [r4, #24]
 8010bf2:	b11b      	cbz	r3, 8010bfc <__sinit+0x14>
 8010bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bf8:	f7ff bff0 	b.w	8010bdc <__sinit_lock_release>
 8010bfc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010c00:	6523      	str	r3, [r4, #80]	; 0x50
 8010c02:	4b13      	ldr	r3, [pc, #76]	; (8010c50 <__sinit+0x68>)
 8010c04:	4a13      	ldr	r2, [pc, #76]	; (8010c54 <__sinit+0x6c>)
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	62a2      	str	r2, [r4, #40]	; 0x28
 8010c0a:	42a3      	cmp	r3, r4
 8010c0c:	bf04      	itt	eq
 8010c0e:	2301      	moveq	r3, #1
 8010c10:	61a3      	streq	r3, [r4, #24]
 8010c12:	4620      	mov	r0, r4
 8010c14:	f000 f820 	bl	8010c58 <__sfp>
 8010c18:	6060      	str	r0, [r4, #4]
 8010c1a:	4620      	mov	r0, r4
 8010c1c:	f000 f81c 	bl	8010c58 <__sfp>
 8010c20:	60a0      	str	r0, [r4, #8]
 8010c22:	4620      	mov	r0, r4
 8010c24:	f000 f818 	bl	8010c58 <__sfp>
 8010c28:	2200      	movs	r2, #0
 8010c2a:	60e0      	str	r0, [r4, #12]
 8010c2c:	2104      	movs	r1, #4
 8010c2e:	6860      	ldr	r0, [r4, #4]
 8010c30:	f7ff ff82 	bl	8010b38 <std>
 8010c34:	68a0      	ldr	r0, [r4, #8]
 8010c36:	2201      	movs	r2, #1
 8010c38:	2109      	movs	r1, #9
 8010c3a:	f7ff ff7d 	bl	8010b38 <std>
 8010c3e:	68e0      	ldr	r0, [r4, #12]
 8010c40:	2202      	movs	r2, #2
 8010c42:	2112      	movs	r1, #18
 8010c44:	f7ff ff78 	bl	8010b38 <std>
 8010c48:	2301      	movs	r3, #1
 8010c4a:	61a3      	str	r3, [r4, #24]
 8010c4c:	e7d2      	b.n	8010bf4 <__sinit+0xc>
 8010c4e:	bf00      	nop
 8010c50:	08013750 	.word	0x08013750
 8010c54:	08010b81 	.word	0x08010b81

08010c58 <__sfp>:
 8010c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c5a:	4607      	mov	r7, r0
 8010c5c:	f7ff ffac 	bl	8010bb8 <__sfp_lock_acquire>
 8010c60:	4b1e      	ldr	r3, [pc, #120]	; (8010cdc <__sfp+0x84>)
 8010c62:	681e      	ldr	r6, [r3, #0]
 8010c64:	69b3      	ldr	r3, [r6, #24]
 8010c66:	b913      	cbnz	r3, 8010c6e <__sfp+0x16>
 8010c68:	4630      	mov	r0, r6
 8010c6a:	f7ff ffbd 	bl	8010be8 <__sinit>
 8010c6e:	3648      	adds	r6, #72	; 0x48
 8010c70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010c74:	3b01      	subs	r3, #1
 8010c76:	d503      	bpl.n	8010c80 <__sfp+0x28>
 8010c78:	6833      	ldr	r3, [r6, #0]
 8010c7a:	b30b      	cbz	r3, 8010cc0 <__sfp+0x68>
 8010c7c:	6836      	ldr	r6, [r6, #0]
 8010c7e:	e7f7      	b.n	8010c70 <__sfp+0x18>
 8010c80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010c84:	b9d5      	cbnz	r5, 8010cbc <__sfp+0x64>
 8010c86:	4b16      	ldr	r3, [pc, #88]	; (8010ce0 <__sfp+0x88>)
 8010c88:	60e3      	str	r3, [r4, #12]
 8010c8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010c8e:	6665      	str	r5, [r4, #100]	; 0x64
 8010c90:	f000 f84c 	bl	8010d2c <__retarget_lock_init_recursive>
 8010c94:	f7ff ff96 	bl	8010bc4 <__sfp_lock_release>
 8010c98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010c9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010ca0:	6025      	str	r5, [r4, #0]
 8010ca2:	61a5      	str	r5, [r4, #24]
 8010ca4:	2208      	movs	r2, #8
 8010ca6:	4629      	mov	r1, r5
 8010ca8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010cac:	f7fe faf4 	bl	800f298 <memset>
 8010cb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010cb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010cb8:	4620      	mov	r0, r4
 8010cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010cbc:	3468      	adds	r4, #104	; 0x68
 8010cbe:	e7d9      	b.n	8010c74 <__sfp+0x1c>
 8010cc0:	2104      	movs	r1, #4
 8010cc2:	4638      	mov	r0, r7
 8010cc4:	f7ff ff62 	bl	8010b8c <__sfmoreglue>
 8010cc8:	4604      	mov	r4, r0
 8010cca:	6030      	str	r0, [r6, #0]
 8010ccc:	2800      	cmp	r0, #0
 8010cce:	d1d5      	bne.n	8010c7c <__sfp+0x24>
 8010cd0:	f7ff ff78 	bl	8010bc4 <__sfp_lock_release>
 8010cd4:	230c      	movs	r3, #12
 8010cd6:	603b      	str	r3, [r7, #0]
 8010cd8:	e7ee      	b.n	8010cb8 <__sfp+0x60>
 8010cda:	bf00      	nop
 8010cdc:	08013750 	.word	0x08013750
 8010ce0:	ffff0001 	.word	0xffff0001

08010ce4 <_fwalk_reent>:
 8010ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ce8:	4606      	mov	r6, r0
 8010cea:	4688      	mov	r8, r1
 8010cec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010cf0:	2700      	movs	r7, #0
 8010cf2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010cf6:	f1b9 0901 	subs.w	r9, r9, #1
 8010cfa:	d505      	bpl.n	8010d08 <_fwalk_reent+0x24>
 8010cfc:	6824      	ldr	r4, [r4, #0]
 8010cfe:	2c00      	cmp	r4, #0
 8010d00:	d1f7      	bne.n	8010cf2 <_fwalk_reent+0xe>
 8010d02:	4638      	mov	r0, r7
 8010d04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d08:	89ab      	ldrh	r3, [r5, #12]
 8010d0a:	2b01      	cmp	r3, #1
 8010d0c:	d907      	bls.n	8010d1e <_fwalk_reent+0x3a>
 8010d0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010d12:	3301      	adds	r3, #1
 8010d14:	d003      	beq.n	8010d1e <_fwalk_reent+0x3a>
 8010d16:	4629      	mov	r1, r5
 8010d18:	4630      	mov	r0, r6
 8010d1a:	47c0      	blx	r8
 8010d1c:	4307      	orrs	r7, r0
 8010d1e:	3568      	adds	r5, #104	; 0x68
 8010d20:	e7e9      	b.n	8010cf6 <_fwalk_reent+0x12>
	...

08010d24 <_localeconv_r>:
 8010d24:	4800      	ldr	r0, [pc, #0]	; (8010d28 <_localeconv_r+0x4>)
 8010d26:	4770      	bx	lr
 8010d28:	24000374 	.word	0x24000374

08010d2c <__retarget_lock_init_recursive>:
 8010d2c:	4770      	bx	lr

08010d2e <__retarget_lock_acquire_recursive>:
 8010d2e:	4770      	bx	lr

08010d30 <__retarget_lock_release_recursive>:
 8010d30:	4770      	bx	lr

08010d32 <__swhatbuf_r>:
 8010d32:	b570      	push	{r4, r5, r6, lr}
 8010d34:	460e      	mov	r6, r1
 8010d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d3a:	2900      	cmp	r1, #0
 8010d3c:	b096      	sub	sp, #88	; 0x58
 8010d3e:	4614      	mov	r4, r2
 8010d40:	461d      	mov	r5, r3
 8010d42:	da07      	bge.n	8010d54 <__swhatbuf_r+0x22>
 8010d44:	2300      	movs	r3, #0
 8010d46:	602b      	str	r3, [r5, #0]
 8010d48:	89b3      	ldrh	r3, [r6, #12]
 8010d4a:	061a      	lsls	r2, r3, #24
 8010d4c:	d410      	bmi.n	8010d70 <__swhatbuf_r+0x3e>
 8010d4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d52:	e00e      	b.n	8010d72 <__swhatbuf_r+0x40>
 8010d54:	466a      	mov	r2, sp
 8010d56:	f000 fd45 	bl	80117e4 <_fstat_r>
 8010d5a:	2800      	cmp	r0, #0
 8010d5c:	dbf2      	blt.n	8010d44 <__swhatbuf_r+0x12>
 8010d5e:	9a01      	ldr	r2, [sp, #4]
 8010d60:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010d64:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010d68:	425a      	negs	r2, r3
 8010d6a:	415a      	adcs	r2, r3
 8010d6c:	602a      	str	r2, [r5, #0]
 8010d6e:	e7ee      	b.n	8010d4e <__swhatbuf_r+0x1c>
 8010d70:	2340      	movs	r3, #64	; 0x40
 8010d72:	2000      	movs	r0, #0
 8010d74:	6023      	str	r3, [r4, #0]
 8010d76:	b016      	add	sp, #88	; 0x58
 8010d78:	bd70      	pop	{r4, r5, r6, pc}
	...

08010d7c <__smakebuf_r>:
 8010d7c:	898b      	ldrh	r3, [r1, #12]
 8010d7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010d80:	079d      	lsls	r5, r3, #30
 8010d82:	4606      	mov	r6, r0
 8010d84:	460c      	mov	r4, r1
 8010d86:	d507      	bpl.n	8010d98 <__smakebuf_r+0x1c>
 8010d88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010d8c:	6023      	str	r3, [r4, #0]
 8010d8e:	6123      	str	r3, [r4, #16]
 8010d90:	2301      	movs	r3, #1
 8010d92:	6163      	str	r3, [r4, #20]
 8010d94:	b002      	add	sp, #8
 8010d96:	bd70      	pop	{r4, r5, r6, pc}
 8010d98:	ab01      	add	r3, sp, #4
 8010d9a:	466a      	mov	r2, sp
 8010d9c:	f7ff ffc9 	bl	8010d32 <__swhatbuf_r>
 8010da0:	9900      	ldr	r1, [sp, #0]
 8010da2:	4605      	mov	r5, r0
 8010da4:	4630      	mov	r0, r6
 8010da6:	f000 fc1d 	bl	80115e4 <_malloc_r>
 8010daa:	b948      	cbnz	r0, 8010dc0 <__smakebuf_r+0x44>
 8010dac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010db0:	059a      	lsls	r2, r3, #22
 8010db2:	d4ef      	bmi.n	8010d94 <__smakebuf_r+0x18>
 8010db4:	f023 0303 	bic.w	r3, r3, #3
 8010db8:	f043 0302 	orr.w	r3, r3, #2
 8010dbc:	81a3      	strh	r3, [r4, #12]
 8010dbe:	e7e3      	b.n	8010d88 <__smakebuf_r+0xc>
 8010dc0:	4b0d      	ldr	r3, [pc, #52]	; (8010df8 <__smakebuf_r+0x7c>)
 8010dc2:	62b3      	str	r3, [r6, #40]	; 0x28
 8010dc4:	89a3      	ldrh	r3, [r4, #12]
 8010dc6:	6020      	str	r0, [r4, #0]
 8010dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010dcc:	81a3      	strh	r3, [r4, #12]
 8010dce:	9b00      	ldr	r3, [sp, #0]
 8010dd0:	6163      	str	r3, [r4, #20]
 8010dd2:	9b01      	ldr	r3, [sp, #4]
 8010dd4:	6120      	str	r0, [r4, #16]
 8010dd6:	b15b      	cbz	r3, 8010df0 <__smakebuf_r+0x74>
 8010dd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ddc:	4630      	mov	r0, r6
 8010dde:	f000 fd13 	bl	8011808 <_isatty_r>
 8010de2:	b128      	cbz	r0, 8010df0 <__smakebuf_r+0x74>
 8010de4:	89a3      	ldrh	r3, [r4, #12]
 8010de6:	f023 0303 	bic.w	r3, r3, #3
 8010dea:	f043 0301 	orr.w	r3, r3, #1
 8010dee:	81a3      	strh	r3, [r4, #12]
 8010df0:	89a0      	ldrh	r0, [r4, #12]
 8010df2:	4305      	orrs	r5, r0
 8010df4:	81a5      	strh	r5, [r4, #12]
 8010df6:	e7cd      	b.n	8010d94 <__smakebuf_r+0x18>
 8010df8:	08010b81 	.word	0x08010b81

08010dfc <malloc>:
 8010dfc:	4b02      	ldr	r3, [pc, #8]	; (8010e08 <malloc+0xc>)
 8010dfe:	4601      	mov	r1, r0
 8010e00:	6818      	ldr	r0, [r3, #0]
 8010e02:	f000 bbef 	b.w	80115e4 <_malloc_r>
 8010e06:	bf00      	nop
 8010e08:	24000220 	.word	0x24000220

08010e0c <memcpy>:
 8010e0c:	440a      	add	r2, r1
 8010e0e:	4291      	cmp	r1, r2
 8010e10:	f100 33ff 	add.w	r3, r0, #4294967295
 8010e14:	d100      	bne.n	8010e18 <memcpy+0xc>
 8010e16:	4770      	bx	lr
 8010e18:	b510      	push	{r4, lr}
 8010e1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010e1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010e22:	4291      	cmp	r1, r2
 8010e24:	d1f9      	bne.n	8010e1a <memcpy+0xe>
 8010e26:	bd10      	pop	{r4, pc}

08010e28 <_Balloc>:
 8010e28:	b570      	push	{r4, r5, r6, lr}
 8010e2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010e2c:	4604      	mov	r4, r0
 8010e2e:	460d      	mov	r5, r1
 8010e30:	b976      	cbnz	r6, 8010e50 <_Balloc+0x28>
 8010e32:	2010      	movs	r0, #16
 8010e34:	f7ff ffe2 	bl	8010dfc <malloc>
 8010e38:	4602      	mov	r2, r0
 8010e3a:	6260      	str	r0, [r4, #36]	; 0x24
 8010e3c:	b920      	cbnz	r0, 8010e48 <_Balloc+0x20>
 8010e3e:	4b18      	ldr	r3, [pc, #96]	; (8010ea0 <_Balloc+0x78>)
 8010e40:	4818      	ldr	r0, [pc, #96]	; (8010ea4 <_Balloc+0x7c>)
 8010e42:	2166      	movs	r1, #102	; 0x66
 8010e44:	f000 fc8e 	bl	8011764 <__assert_func>
 8010e48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010e4c:	6006      	str	r6, [r0, #0]
 8010e4e:	60c6      	str	r6, [r0, #12]
 8010e50:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010e52:	68f3      	ldr	r3, [r6, #12]
 8010e54:	b183      	cbz	r3, 8010e78 <_Balloc+0x50>
 8010e56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010e58:	68db      	ldr	r3, [r3, #12]
 8010e5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010e5e:	b9b8      	cbnz	r0, 8010e90 <_Balloc+0x68>
 8010e60:	2101      	movs	r1, #1
 8010e62:	fa01 f605 	lsl.w	r6, r1, r5
 8010e66:	1d72      	adds	r2, r6, #5
 8010e68:	0092      	lsls	r2, r2, #2
 8010e6a:	4620      	mov	r0, r4
 8010e6c:	f000 fb5a 	bl	8011524 <_calloc_r>
 8010e70:	b160      	cbz	r0, 8010e8c <_Balloc+0x64>
 8010e72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010e76:	e00e      	b.n	8010e96 <_Balloc+0x6e>
 8010e78:	2221      	movs	r2, #33	; 0x21
 8010e7a:	2104      	movs	r1, #4
 8010e7c:	4620      	mov	r0, r4
 8010e7e:	f000 fb51 	bl	8011524 <_calloc_r>
 8010e82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010e84:	60f0      	str	r0, [r6, #12]
 8010e86:	68db      	ldr	r3, [r3, #12]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d1e4      	bne.n	8010e56 <_Balloc+0x2e>
 8010e8c:	2000      	movs	r0, #0
 8010e8e:	bd70      	pop	{r4, r5, r6, pc}
 8010e90:	6802      	ldr	r2, [r0, #0]
 8010e92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010e96:	2300      	movs	r3, #0
 8010e98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010e9c:	e7f7      	b.n	8010e8e <_Balloc+0x66>
 8010e9e:	bf00      	nop
 8010ea0:	08013795 	.word	0x08013795
 8010ea4:	0801387c 	.word	0x0801387c

08010ea8 <_Bfree>:
 8010ea8:	b570      	push	{r4, r5, r6, lr}
 8010eaa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010eac:	4605      	mov	r5, r0
 8010eae:	460c      	mov	r4, r1
 8010eb0:	b976      	cbnz	r6, 8010ed0 <_Bfree+0x28>
 8010eb2:	2010      	movs	r0, #16
 8010eb4:	f7ff ffa2 	bl	8010dfc <malloc>
 8010eb8:	4602      	mov	r2, r0
 8010eba:	6268      	str	r0, [r5, #36]	; 0x24
 8010ebc:	b920      	cbnz	r0, 8010ec8 <_Bfree+0x20>
 8010ebe:	4b09      	ldr	r3, [pc, #36]	; (8010ee4 <_Bfree+0x3c>)
 8010ec0:	4809      	ldr	r0, [pc, #36]	; (8010ee8 <_Bfree+0x40>)
 8010ec2:	218a      	movs	r1, #138	; 0x8a
 8010ec4:	f000 fc4e 	bl	8011764 <__assert_func>
 8010ec8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010ecc:	6006      	str	r6, [r0, #0]
 8010ece:	60c6      	str	r6, [r0, #12]
 8010ed0:	b13c      	cbz	r4, 8010ee2 <_Bfree+0x3a>
 8010ed2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010ed4:	6862      	ldr	r2, [r4, #4]
 8010ed6:	68db      	ldr	r3, [r3, #12]
 8010ed8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010edc:	6021      	str	r1, [r4, #0]
 8010ede:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010ee2:	bd70      	pop	{r4, r5, r6, pc}
 8010ee4:	08013795 	.word	0x08013795
 8010ee8:	0801387c 	.word	0x0801387c

08010eec <__multadd>:
 8010eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ef0:	690e      	ldr	r6, [r1, #16]
 8010ef2:	4607      	mov	r7, r0
 8010ef4:	4698      	mov	r8, r3
 8010ef6:	460c      	mov	r4, r1
 8010ef8:	f101 0014 	add.w	r0, r1, #20
 8010efc:	2300      	movs	r3, #0
 8010efe:	6805      	ldr	r5, [r0, #0]
 8010f00:	b2a9      	uxth	r1, r5
 8010f02:	fb02 8101 	mla	r1, r2, r1, r8
 8010f06:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8010f0a:	0c2d      	lsrs	r5, r5, #16
 8010f0c:	fb02 c505 	mla	r5, r2, r5, ip
 8010f10:	b289      	uxth	r1, r1
 8010f12:	3301      	adds	r3, #1
 8010f14:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8010f18:	429e      	cmp	r6, r3
 8010f1a:	f840 1b04 	str.w	r1, [r0], #4
 8010f1e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8010f22:	dcec      	bgt.n	8010efe <__multadd+0x12>
 8010f24:	f1b8 0f00 	cmp.w	r8, #0
 8010f28:	d022      	beq.n	8010f70 <__multadd+0x84>
 8010f2a:	68a3      	ldr	r3, [r4, #8]
 8010f2c:	42b3      	cmp	r3, r6
 8010f2e:	dc19      	bgt.n	8010f64 <__multadd+0x78>
 8010f30:	6861      	ldr	r1, [r4, #4]
 8010f32:	4638      	mov	r0, r7
 8010f34:	3101      	adds	r1, #1
 8010f36:	f7ff ff77 	bl	8010e28 <_Balloc>
 8010f3a:	4605      	mov	r5, r0
 8010f3c:	b928      	cbnz	r0, 8010f4a <__multadd+0x5e>
 8010f3e:	4602      	mov	r2, r0
 8010f40:	4b0d      	ldr	r3, [pc, #52]	; (8010f78 <__multadd+0x8c>)
 8010f42:	480e      	ldr	r0, [pc, #56]	; (8010f7c <__multadd+0x90>)
 8010f44:	21b5      	movs	r1, #181	; 0xb5
 8010f46:	f000 fc0d 	bl	8011764 <__assert_func>
 8010f4a:	6922      	ldr	r2, [r4, #16]
 8010f4c:	3202      	adds	r2, #2
 8010f4e:	f104 010c 	add.w	r1, r4, #12
 8010f52:	0092      	lsls	r2, r2, #2
 8010f54:	300c      	adds	r0, #12
 8010f56:	f7ff ff59 	bl	8010e0c <memcpy>
 8010f5a:	4621      	mov	r1, r4
 8010f5c:	4638      	mov	r0, r7
 8010f5e:	f7ff ffa3 	bl	8010ea8 <_Bfree>
 8010f62:	462c      	mov	r4, r5
 8010f64:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010f68:	3601      	adds	r6, #1
 8010f6a:	f8c3 8014 	str.w	r8, [r3, #20]
 8010f6e:	6126      	str	r6, [r4, #16]
 8010f70:	4620      	mov	r0, r4
 8010f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f76:	bf00      	nop
 8010f78:	0801380b 	.word	0x0801380b
 8010f7c:	0801387c 	.word	0x0801387c

08010f80 <__hi0bits>:
 8010f80:	0c03      	lsrs	r3, r0, #16
 8010f82:	041b      	lsls	r3, r3, #16
 8010f84:	b9d3      	cbnz	r3, 8010fbc <__hi0bits+0x3c>
 8010f86:	0400      	lsls	r0, r0, #16
 8010f88:	2310      	movs	r3, #16
 8010f8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010f8e:	bf04      	itt	eq
 8010f90:	0200      	lsleq	r0, r0, #8
 8010f92:	3308      	addeq	r3, #8
 8010f94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010f98:	bf04      	itt	eq
 8010f9a:	0100      	lsleq	r0, r0, #4
 8010f9c:	3304      	addeq	r3, #4
 8010f9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010fa2:	bf04      	itt	eq
 8010fa4:	0080      	lsleq	r0, r0, #2
 8010fa6:	3302      	addeq	r3, #2
 8010fa8:	2800      	cmp	r0, #0
 8010faa:	db05      	blt.n	8010fb8 <__hi0bits+0x38>
 8010fac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010fb0:	f103 0301 	add.w	r3, r3, #1
 8010fb4:	bf08      	it	eq
 8010fb6:	2320      	moveq	r3, #32
 8010fb8:	4618      	mov	r0, r3
 8010fba:	4770      	bx	lr
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	e7e4      	b.n	8010f8a <__hi0bits+0xa>

08010fc0 <__lo0bits>:
 8010fc0:	6803      	ldr	r3, [r0, #0]
 8010fc2:	f013 0207 	ands.w	r2, r3, #7
 8010fc6:	4601      	mov	r1, r0
 8010fc8:	d00b      	beq.n	8010fe2 <__lo0bits+0x22>
 8010fca:	07da      	lsls	r2, r3, #31
 8010fcc:	d424      	bmi.n	8011018 <__lo0bits+0x58>
 8010fce:	0798      	lsls	r0, r3, #30
 8010fd0:	bf49      	itett	mi
 8010fd2:	085b      	lsrmi	r3, r3, #1
 8010fd4:	089b      	lsrpl	r3, r3, #2
 8010fd6:	2001      	movmi	r0, #1
 8010fd8:	600b      	strmi	r3, [r1, #0]
 8010fda:	bf5c      	itt	pl
 8010fdc:	600b      	strpl	r3, [r1, #0]
 8010fde:	2002      	movpl	r0, #2
 8010fe0:	4770      	bx	lr
 8010fe2:	b298      	uxth	r0, r3
 8010fe4:	b9b0      	cbnz	r0, 8011014 <__lo0bits+0x54>
 8010fe6:	0c1b      	lsrs	r3, r3, #16
 8010fe8:	2010      	movs	r0, #16
 8010fea:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010fee:	bf04      	itt	eq
 8010ff0:	0a1b      	lsreq	r3, r3, #8
 8010ff2:	3008      	addeq	r0, #8
 8010ff4:	071a      	lsls	r2, r3, #28
 8010ff6:	bf04      	itt	eq
 8010ff8:	091b      	lsreq	r3, r3, #4
 8010ffa:	3004      	addeq	r0, #4
 8010ffc:	079a      	lsls	r2, r3, #30
 8010ffe:	bf04      	itt	eq
 8011000:	089b      	lsreq	r3, r3, #2
 8011002:	3002      	addeq	r0, #2
 8011004:	07da      	lsls	r2, r3, #31
 8011006:	d403      	bmi.n	8011010 <__lo0bits+0x50>
 8011008:	085b      	lsrs	r3, r3, #1
 801100a:	f100 0001 	add.w	r0, r0, #1
 801100e:	d005      	beq.n	801101c <__lo0bits+0x5c>
 8011010:	600b      	str	r3, [r1, #0]
 8011012:	4770      	bx	lr
 8011014:	4610      	mov	r0, r2
 8011016:	e7e8      	b.n	8010fea <__lo0bits+0x2a>
 8011018:	2000      	movs	r0, #0
 801101a:	4770      	bx	lr
 801101c:	2020      	movs	r0, #32
 801101e:	4770      	bx	lr

08011020 <__i2b>:
 8011020:	b510      	push	{r4, lr}
 8011022:	460c      	mov	r4, r1
 8011024:	2101      	movs	r1, #1
 8011026:	f7ff feff 	bl	8010e28 <_Balloc>
 801102a:	4602      	mov	r2, r0
 801102c:	b928      	cbnz	r0, 801103a <__i2b+0x1a>
 801102e:	4b05      	ldr	r3, [pc, #20]	; (8011044 <__i2b+0x24>)
 8011030:	4805      	ldr	r0, [pc, #20]	; (8011048 <__i2b+0x28>)
 8011032:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011036:	f000 fb95 	bl	8011764 <__assert_func>
 801103a:	2301      	movs	r3, #1
 801103c:	6144      	str	r4, [r0, #20]
 801103e:	6103      	str	r3, [r0, #16]
 8011040:	bd10      	pop	{r4, pc}
 8011042:	bf00      	nop
 8011044:	0801380b 	.word	0x0801380b
 8011048:	0801387c 	.word	0x0801387c

0801104c <__multiply>:
 801104c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011050:	4614      	mov	r4, r2
 8011052:	690a      	ldr	r2, [r1, #16]
 8011054:	6923      	ldr	r3, [r4, #16]
 8011056:	429a      	cmp	r2, r3
 8011058:	bfb8      	it	lt
 801105a:	460b      	movlt	r3, r1
 801105c:	460d      	mov	r5, r1
 801105e:	bfbc      	itt	lt
 8011060:	4625      	movlt	r5, r4
 8011062:	461c      	movlt	r4, r3
 8011064:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8011068:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801106c:	68ab      	ldr	r3, [r5, #8]
 801106e:	6869      	ldr	r1, [r5, #4]
 8011070:	eb0a 0709 	add.w	r7, sl, r9
 8011074:	42bb      	cmp	r3, r7
 8011076:	b085      	sub	sp, #20
 8011078:	bfb8      	it	lt
 801107a:	3101      	addlt	r1, #1
 801107c:	f7ff fed4 	bl	8010e28 <_Balloc>
 8011080:	b930      	cbnz	r0, 8011090 <__multiply+0x44>
 8011082:	4602      	mov	r2, r0
 8011084:	4b42      	ldr	r3, [pc, #264]	; (8011190 <__multiply+0x144>)
 8011086:	4843      	ldr	r0, [pc, #268]	; (8011194 <__multiply+0x148>)
 8011088:	f240 115d 	movw	r1, #349	; 0x15d
 801108c:	f000 fb6a 	bl	8011764 <__assert_func>
 8011090:	f100 0614 	add.w	r6, r0, #20
 8011094:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8011098:	4633      	mov	r3, r6
 801109a:	2200      	movs	r2, #0
 801109c:	4543      	cmp	r3, r8
 801109e:	d31e      	bcc.n	80110de <__multiply+0x92>
 80110a0:	f105 0c14 	add.w	ip, r5, #20
 80110a4:	f104 0314 	add.w	r3, r4, #20
 80110a8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80110ac:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80110b0:	9202      	str	r2, [sp, #8]
 80110b2:	ebac 0205 	sub.w	r2, ip, r5
 80110b6:	3a15      	subs	r2, #21
 80110b8:	f022 0203 	bic.w	r2, r2, #3
 80110bc:	3204      	adds	r2, #4
 80110be:	f105 0115 	add.w	r1, r5, #21
 80110c2:	458c      	cmp	ip, r1
 80110c4:	bf38      	it	cc
 80110c6:	2204      	movcc	r2, #4
 80110c8:	9201      	str	r2, [sp, #4]
 80110ca:	9a02      	ldr	r2, [sp, #8]
 80110cc:	9303      	str	r3, [sp, #12]
 80110ce:	429a      	cmp	r2, r3
 80110d0:	d808      	bhi.n	80110e4 <__multiply+0x98>
 80110d2:	2f00      	cmp	r7, #0
 80110d4:	dc55      	bgt.n	8011182 <__multiply+0x136>
 80110d6:	6107      	str	r7, [r0, #16]
 80110d8:	b005      	add	sp, #20
 80110da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110de:	f843 2b04 	str.w	r2, [r3], #4
 80110e2:	e7db      	b.n	801109c <__multiply+0x50>
 80110e4:	f8b3 a000 	ldrh.w	sl, [r3]
 80110e8:	f1ba 0f00 	cmp.w	sl, #0
 80110ec:	d020      	beq.n	8011130 <__multiply+0xe4>
 80110ee:	f105 0e14 	add.w	lr, r5, #20
 80110f2:	46b1      	mov	r9, r6
 80110f4:	2200      	movs	r2, #0
 80110f6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80110fa:	f8d9 b000 	ldr.w	fp, [r9]
 80110fe:	b2a1      	uxth	r1, r4
 8011100:	fa1f fb8b 	uxth.w	fp, fp
 8011104:	fb0a b101 	mla	r1, sl, r1, fp
 8011108:	4411      	add	r1, r2
 801110a:	f8d9 2000 	ldr.w	r2, [r9]
 801110e:	0c24      	lsrs	r4, r4, #16
 8011110:	0c12      	lsrs	r2, r2, #16
 8011112:	fb0a 2404 	mla	r4, sl, r4, r2
 8011116:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801111a:	b289      	uxth	r1, r1
 801111c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8011120:	45f4      	cmp	ip, lr
 8011122:	f849 1b04 	str.w	r1, [r9], #4
 8011126:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801112a:	d8e4      	bhi.n	80110f6 <__multiply+0xaa>
 801112c:	9901      	ldr	r1, [sp, #4]
 801112e:	5072      	str	r2, [r6, r1]
 8011130:	9a03      	ldr	r2, [sp, #12]
 8011132:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011136:	3304      	adds	r3, #4
 8011138:	f1b9 0f00 	cmp.w	r9, #0
 801113c:	d01f      	beq.n	801117e <__multiply+0x132>
 801113e:	6834      	ldr	r4, [r6, #0]
 8011140:	f105 0114 	add.w	r1, r5, #20
 8011144:	46b6      	mov	lr, r6
 8011146:	f04f 0a00 	mov.w	sl, #0
 801114a:	880a      	ldrh	r2, [r1, #0]
 801114c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8011150:	fb09 b202 	mla	r2, r9, r2, fp
 8011154:	4492      	add	sl, r2
 8011156:	b2a4      	uxth	r4, r4
 8011158:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801115c:	f84e 4b04 	str.w	r4, [lr], #4
 8011160:	f851 4b04 	ldr.w	r4, [r1], #4
 8011164:	f8be 2000 	ldrh.w	r2, [lr]
 8011168:	0c24      	lsrs	r4, r4, #16
 801116a:	fb09 2404 	mla	r4, r9, r4, r2
 801116e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8011172:	458c      	cmp	ip, r1
 8011174:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011178:	d8e7      	bhi.n	801114a <__multiply+0xfe>
 801117a:	9a01      	ldr	r2, [sp, #4]
 801117c:	50b4      	str	r4, [r6, r2]
 801117e:	3604      	adds	r6, #4
 8011180:	e7a3      	b.n	80110ca <__multiply+0x7e>
 8011182:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011186:	2b00      	cmp	r3, #0
 8011188:	d1a5      	bne.n	80110d6 <__multiply+0x8a>
 801118a:	3f01      	subs	r7, #1
 801118c:	e7a1      	b.n	80110d2 <__multiply+0x86>
 801118e:	bf00      	nop
 8011190:	0801380b 	.word	0x0801380b
 8011194:	0801387c 	.word	0x0801387c

08011198 <__pow5mult>:
 8011198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801119c:	4615      	mov	r5, r2
 801119e:	f012 0203 	ands.w	r2, r2, #3
 80111a2:	4606      	mov	r6, r0
 80111a4:	460f      	mov	r7, r1
 80111a6:	d007      	beq.n	80111b8 <__pow5mult+0x20>
 80111a8:	4c25      	ldr	r4, [pc, #148]	; (8011240 <__pow5mult+0xa8>)
 80111aa:	3a01      	subs	r2, #1
 80111ac:	2300      	movs	r3, #0
 80111ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80111b2:	f7ff fe9b 	bl	8010eec <__multadd>
 80111b6:	4607      	mov	r7, r0
 80111b8:	10ad      	asrs	r5, r5, #2
 80111ba:	d03d      	beq.n	8011238 <__pow5mult+0xa0>
 80111bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80111be:	b97c      	cbnz	r4, 80111e0 <__pow5mult+0x48>
 80111c0:	2010      	movs	r0, #16
 80111c2:	f7ff fe1b 	bl	8010dfc <malloc>
 80111c6:	4602      	mov	r2, r0
 80111c8:	6270      	str	r0, [r6, #36]	; 0x24
 80111ca:	b928      	cbnz	r0, 80111d8 <__pow5mult+0x40>
 80111cc:	4b1d      	ldr	r3, [pc, #116]	; (8011244 <__pow5mult+0xac>)
 80111ce:	481e      	ldr	r0, [pc, #120]	; (8011248 <__pow5mult+0xb0>)
 80111d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80111d4:	f000 fac6 	bl	8011764 <__assert_func>
 80111d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80111dc:	6004      	str	r4, [r0, #0]
 80111de:	60c4      	str	r4, [r0, #12]
 80111e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80111e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80111e8:	b94c      	cbnz	r4, 80111fe <__pow5mult+0x66>
 80111ea:	f240 2171 	movw	r1, #625	; 0x271
 80111ee:	4630      	mov	r0, r6
 80111f0:	f7ff ff16 	bl	8011020 <__i2b>
 80111f4:	2300      	movs	r3, #0
 80111f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80111fa:	4604      	mov	r4, r0
 80111fc:	6003      	str	r3, [r0, #0]
 80111fe:	f04f 0900 	mov.w	r9, #0
 8011202:	07eb      	lsls	r3, r5, #31
 8011204:	d50a      	bpl.n	801121c <__pow5mult+0x84>
 8011206:	4639      	mov	r1, r7
 8011208:	4622      	mov	r2, r4
 801120a:	4630      	mov	r0, r6
 801120c:	f7ff ff1e 	bl	801104c <__multiply>
 8011210:	4639      	mov	r1, r7
 8011212:	4680      	mov	r8, r0
 8011214:	4630      	mov	r0, r6
 8011216:	f7ff fe47 	bl	8010ea8 <_Bfree>
 801121a:	4647      	mov	r7, r8
 801121c:	106d      	asrs	r5, r5, #1
 801121e:	d00b      	beq.n	8011238 <__pow5mult+0xa0>
 8011220:	6820      	ldr	r0, [r4, #0]
 8011222:	b938      	cbnz	r0, 8011234 <__pow5mult+0x9c>
 8011224:	4622      	mov	r2, r4
 8011226:	4621      	mov	r1, r4
 8011228:	4630      	mov	r0, r6
 801122a:	f7ff ff0f 	bl	801104c <__multiply>
 801122e:	6020      	str	r0, [r4, #0]
 8011230:	f8c0 9000 	str.w	r9, [r0]
 8011234:	4604      	mov	r4, r0
 8011236:	e7e4      	b.n	8011202 <__pow5mult+0x6a>
 8011238:	4638      	mov	r0, r7
 801123a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801123e:	bf00      	nop
 8011240:	080139d0 	.word	0x080139d0
 8011244:	08013795 	.word	0x08013795
 8011248:	0801387c 	.word	0x0801387c

0801124c <__lshift>:
 801124c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011250:	460c      	mov	r4, r1
 8011252:	6849      	ldr	r1, [r1, #4]
 8011254:	6923      	ldr	r3, [r4, #16]
 8011256:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801125a:	68a3      	ldr	r3, [r4, #8]
 801125c:	4607      	mov	r7, r0
 801125e:	4691      	mov	r9, r2
 8011260:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011264:	f108 0601 	add.w	r6, r8, #1
 8011268:	42b3      	cmp	r3, r6
 801126a:	db0b      	blt.n	8011284 <__lshift+0x38>
 801126c:	4638      	mov	r0, r7
 801126e:	f7ff fddb 	bl	8010e28 <_Balloc>
 8011272:	4605      	mov	r5, r0
 8011274:	b948      	cbnz	r0, 801128a <__lshift+0x3e>
 8011276:	4602      	mov	r2, r0
 8011278:	4b28      	ldr	r3, [pc, #160]	; (801131c <__lshift+0xd0>)
 801127a:	4829      	ldr	r0, [pc, #164]	; (8011320 <__lshift+0xd4>)
 801127c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011280:	f000 fa70 	bl	8011764 <__assert_func>
 8011284:	3101      	adds	r1, #1
 8011286:	005b      	lsls	r3, r3, #1
 8011288:	e7ee      	b.n	8011268 <__lshift+0x1c>
 801128a:	2300      	movs	r3, #0
 801128c:	f100 0114 	add.w	r1, r0, #20
 8011290:	f100 0210 	add.w	r2, r0, #16
 8011294:	4618      	mov	r0, r3
 8011296:	4553      	cmp	r3, sl
 8011298:	db33      	blt.n	8011302 <__lshift+0xb6>
 801129a:	6920      	ldr	r0, [r4, #16]
 801129c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80112a0:	f104 0314 	add.w	r3, r4, #20
 80112a4:	f019 091f 	ands.w	r9, r9, #31
 80112a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80112ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80112b0:	d02b      	beq.n	801130a <__lshift+0xbe>
 80112b2:	f1c9 0e20 	rsb	lr, r9, #32
 80112b6:	468a      	mov	sl, r1
 80112b8:	2200      	movs	r2, #0
 80112ba:	6818      	ldr	r0, [r3, #0]
 80112bc:	fa00 f009 	lsl.w	r0, r0, r9
 80112c0:	4302      	orrs	r2, r0
 80112c2:	f84a 2b04 	str.w	r2, [sl], #4
 80112c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80112ca:	459c      	cmp	ip, r3
 80112cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80112d0:	d8f3      	bhi.n	80112ba <__lshift+0x6e>
 80112d2:	ebac 0304 	sub.w	r3, ip, r4
 80112d6:	3b15      	subs	r3, #21
 80112d8:	f023 0303 	bic.w	r3, r3, #3
 80112dc:	3304      	adds	r3, #4
 80112de:	f104 0015 	add.w	r0, r4, #21
 80112e2:	4584      	cmp	ip, r0
 80112e4:	bf38      	it	cc
 80112e6:	2304      	movcc	r3, #4
 80112e8:	50ca      	str	r2, [r1, r3]
 80112ea:	b10a      	cbz	r2, 80112f0 <__lshift+0xa4>
 80112ec:	f108 0602 	add.w	r6, r8, #2
 80112f0:	3e01      	subs	r6, #1
 80112f2:	4638      	mov	r0, r7
 80112f4:	612e      	str	r6, [r5, #16]
 80112f6:	4621      	mov	r1, r4
 80112f8:	f7ff fdd6 	bl	8010ea8 <_Bfree>
 80112fc:	4628      	mov	r0, r5
 80112fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011302:	f842 0f04 	str.w	r0, [r2, #4]!
 8011306:	3301      	adds	r3, #1
 8011308:	e7c5      	b.n	8011296 <__lshift+0x4a>
 801130a:	3904      	subs	r1, #4
 801130c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011310:	f841 2f04 	str.w	r2, [r1, #4]!
 8011314:	459c      	cmp	ip, r3
 8011316:	d8f9      	bhi.n	801130c <__lshift+0xc0>
 8011318:	e7ea      	b.n	80112f0 <__lshift+0xa4>
 801131a:	bf00      	nop
 801131c:	0801380b 	.word	0x0801380b
 8011320:	0801387c 	.word	0x0801387c

08011324 <__mcmp>:
 8011324:	b530      	push	{r4, r5, lr}
 8011326:	6902      	ldr	r2, [r0, #16]
 8011328:	690c      	ldr	r4, [r1, #16]
 801132a:	1b12      	subs	r2, r2, r4
 801132c:	d10e      	bne.n	801134c <__mcmp+0x28>
 801132e:	f100 0314 	add.w	r3, r0, #20
 8011332:	3114      	adds	r1, #20
 8011334:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011338:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801133c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011340:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011344:	42a5      	cmp	r5, r4
 8011346:	d003      	beq.n	8011350 <__mcmp+0x2c>
 8011348:	d305      	bcc.n	8011356 <__mcmp+0x32>
 801134a:	2201      	movs	r2, #1
 801134c:	4610      	mov	r0, r2
 801134e:	bd30      	pop	{r4, r5, pc}
 8011350:	4283      	cmp	r3, r0
 8011352:	d3f3      	bcc.n	801133c <__mcmp+0x18>
 8011354:	e7fa      	b.n	801134c <__mcmp+0x28>
 8011356:	f04f 32ff 	mov.w	r2, #4294967295
 801135a:	e7f7      	b.n	801134c <__mcmp+0x28>

0801135c <__mdiff>:
 801135c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011360:	460c      	mov	r4, r1
 8011362:	4606      	mov	r6, r0
 8011364:	4611      	mov	r1, r2
 8011366:	4620      	mov	r0, r4
 8011368:	4617      	mov	r7, r2
 801136a:	f7ff ffdb 	bl	8011324 <__mcmp>
 801136e:	1e05      	subs	r5, r0, #0
 8011370:	d110      	bne.n	8011394 <__mdiff+0x38>
 8011372:	4629      	mov	r1, r5
 8011374:	4630      	mov	r0, r6
 8011376:	f7ff fd57 	bl	8010e28 <_Balloc>
 801137a:	b930      	cbnz	r0, 801138a <__mdiff+0x2e>
 801137c:	4b39      	ldr	r3, [pc, #228]	; (8011464 <__mdiff+0x108>)
 801137e:	4602      	mov	r2, r0
 8011380:	f240 2132 	movw	r1, #562	; 0x232
 8011384:	4838      	ldr	r0, [pc, #224]	; (8011468 <__mdiff+0x10c>)
 8011386:	f000 f9ed 	bl	8011764 <__assert_func>
 801138a:	2301      	movs	r3, #1
 801138c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011390:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011394:	bfa4      	itt	ge
 8011396:	463b      	movge	r3, r7
 8011398:	4627      	movge	r7, r4
 801139a:	4630      	mov	r0, r6
 801139c:	6879      	ldr	r1, [r7, #4]
 801139e:	bfa6      	itte	ge
 80113a0:	461c      	movge	r4, r3
 80113a2:	2500      	movge	r5, #0
 80113a4:	2501      	movlt	r5, #1
 80113a6:	f7ff fd3f 	bl	8010e28 <_Balloc>
 80113aa:	b920      	cbnz	r0, 80113b6 <__mdiff+0x5a>
 80113ac:	4b2d      	ldr	r3, [pc, #180]	; (8011464 <__mdiff+0x108>)
 80113ae:	4602      	mov	r2, r0
 80113b0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80113b4:	e7e6      	b.n	8011384 <__mdiff+0x28>
 80113b6:	693e      	ldr	r6, [r7, #16]
 80113b8:	60c5      	str	r5, [r0, #12]
 80113ba:	6925      	ldr	r5, [r4, #16]
 80113bc:	f107 0114 	add.w	r1, r7, #20
 80113c0:	f104 0914 	add.w	r9, r4, #20
 80113c4:	f100 0e14 	add.w	lr, r0, #20
 80113c8:	f107 0210 	add.w	r2, r7, #16
 80113cc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80113d0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80113d4:	46f2      	mov	sl, lr
 80113d6:	2700      	movs	r7, #0
 80113d8:	f859 3b04 	ldr.w	r3, [r9], #4
 80113dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80113e0:	fa1f f883 	uxth.w	r8, r3
 80113e4:	fa17 f78b 	uxtah	r7, r7, fp
 80113e8:	0c1b      	lsrs	r3, r3, #16
 80113ea:	eba7 0808 	sub.w	r8, r7, r8
 80113ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80113f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80113f6:	fa1f f888 	uxth.w	r8, r8
 80113fa:	141f      	asrs	r7, r3, #16
 80113fc:	454d      	cmp	r5, r9
 80113fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011402:	f84a 3b04 	str.w	r3, [sl], #4
 8011406:	d8e7      	bhi.n	80113d8 <__mdiff+0x7c>
 8011408:	1b2b      	subs	r3, r5, r4
 801140a:	3b15      	subs	r3, #21
 801140c:	f023 0303 	bic.w	r3, r3, #3
 8011410:	3304      	adds	r3, #4
 8011412:	3415      	adds	r4, #21
 8011414:	42a5      	cmp	r5, r4
 8011416:	bf38      	it	cc
 8011418:	2304      	movcc	r3, #4
 801141a:	4419      	add	r1, r3
 801141c:	4473      	add	r3, lr
 801141e:	469e      	mov	lr, r3
 8011420:	460d      	mov	r5, r1
 8011422:	4565      	cmp	r5, ip
 8011424:	d30e      	bcc.n	8011444 <__mdiff+0xe8>
 8011426:	f10c 0203 	add.w	r2, ip, #3
 801142a:	1a52      	subs	r2, r2, r1
 801142c:	f022 0203 	bic.w	r2, r2, #3
 8011430:	3903      	subs	r1, #3
 8011432:	458c      	cmp	ip, r1
 8011434:	bf38      	it	cc
 8011436:	2200      	movcc	r2, #0
 8011438:	441a      	add	r2, r3
 801143a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801143e:	b17b      	cbz	r3, 8011460 <__mdiff+0x104>
 8011440:	6106      	str	r6, [r0, #16]
 8011442:	e7a5      	b.n	8011390 <__mdiff+0x34>
 8011444:	f855 8b04 	ldr.w	r8, [r5], #4
 8011448:	fa17 f488 	uxtah	r4, r7, r8
 801144c:	1422      	asrs	r2, r4, #16
 801144e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8011452:	b2a4      	uxth	r4, r4
 8011454:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8011458:	f84e 4b04 	str.w	r4, [lr], #4
 801145c:	1417      	asrs	r7, r2, #16
 801145e:	e7e0      	b.n	8011422 <__mdiff+0xc6>
 8011460:	3e01      	subs	r6, #1
 8011462:	e7ea      	b.n	801143a <__mdiff+0xde>
 8011464:	0801380b 	.word	0x0801380b
 8011468:	0801387c 	.word	0x0801387c

0801146c <__d2b>:
 801146c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011470:	4689      	mov	r9, r1
 8011472:	2101      	movs	r1, #1
 8011474:	ec57 6b10 	vmov	r6, r7, d0
 8011478:	4690      	mov	r8, r2
 801147a:	f7ff fcd5 	bl	8010e28 <_Balloc>
 801147e:	4604      	mov	r4, r0
 8011480:	b930      	cbnz	r0, 8011490 <__d2b+0x24>
 8011482:	4602      	mov	r2, r0
 8011484:	4b25      	ldr	r3, [pc, #148]	; (801151c <__d2b+0xb0>)
 8011486:	4826      	ldr	r0, [pc, #152]	; (8011520 <__d2b+0xb4>)
 8011488:	f240 310a 	movw	r1, #778	; 0x30a
 801148c:	f000 f96a 	bl	8011764 <__assert_func>
 8011490:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011494:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011498:	bb35      	cbnz	r5, 80114e8 <__d2b+0x7c>
 801149a:	2e00      	cmp	r6, #0
 801149c:	9301      	str	r3, [sp, #4]
 801149e:	d028      	beq.n	80114f2 <__d2b+0x86>
 80114a0:	4668      	mov	r0, sp
 80114a2:	9600      	str	r6, [sp, #0]
 80114a4:	f7ff fd8c 	bl	8010fc0 <__lo0bits>
 80114a8:	9900      	ldr	r1, [sp, #0]
 80114aa:	b300      	cbz	r0, 80114ee <__d2b+0x82>
 80114ac:	9a01      	ldr	r2, [sp, #4]
 80114ae:	f1c0 0320 	rsb	r3, r0, #32
 80114b2:	fa02 f303 	lsl.w	r3, r2, r3
 80114b6:	430b      	orrs	r3, r1
 80114b8:	40c2      	lsrs	r2, r0
 80114ba:	6163      	str	r3, [r4, #20]
 80114bc:	9201      	str	r2, [sp, #4]
 80114be:	9b01      	ldr	r3, [sp, #4]
 80114c0:	61a3      	str	r3, [r4, #24]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	bf14      	ite	ne
 80114c6:	2202      	movne	r2, #2
 80114c8:	2201      	moveq	r2, #1
 80114ca:	6122      	str	r2, [r4, #16]
 80114cc:	b1d5      	cbz	r5, 8011504 <__d2b+0x98>
 80114ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80114d2:	4405      	add	r5, r0
 80114d4:	f8c9 5000 	str.w	r5, [r9]
 80114d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80114dc:	f8c8 0000 	str.w	r0, [r8]
 80114e0:	4620      	mov	r0, r4
 80114e2:	b003      	add	sp, #12
 80114e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80114e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80114ec:	e7d5      	b.n	801149a <__d2b+0x2e>
 80114ee:	6161      	str	r1, [r4, #20]
 80114f0:	e7e5      	b.n	80114be <__d2b+0x52>
 80114f2:	a801      	add	r0, sp, #4
 80114f4:	f7ff fd64 	bl	8010fc0 <__lo0bits>
 80114f8:	9b01      	ldr	r3, [sp, #4]
 80114fa:	6163      	str	r3, [r4, #20]
 80114fc:	2201      	movs	r2, #1
 80114fe:	6122      	str	r2, [r4, #16]
 8011500:	3020      	adds	r0, #32
 8011502:	e7e3      	b.n	80114cc <__d2b+0x60>
 8011504:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011508:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801150c:	f8c9 0000 	str.w	r0, [r9]
 8011510:	6918      	ldr	r0, [r3, #16]
 8011512:	f7ff fd35 	bl	8010f80 <__hi0bits>
 8011516:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801151a:	e7df      	b.n	80114dc <__d2b+0x70>
 801151c:	0801380b 	.word	0x0801380b
 8011520:	0801387c 	.word	0x0801387c

08011524 <_calloc_r>:
 8011524:	b513      	push	{r0, r1, r4, lr}
 8011526:	434a      	muls	r2, r1
 8011528:	4611      	mov	r1, r2
 801152a:	9201      	str	r2, [sp, #4]
 801152c:	f000 f85a 	bl	80115e4 <_malloc_r>
 8011530:	4604      	mov	r4, r0
 8011532:	b118      	cbz	r0, 801153c <_calloc_r+0x18>
 8011534:	9a01      	ldr	r2, [sp, #4]
 8011536:	2100      	movs	r1, #0
 8011538:	f7fd feae 	bl	800f298 <memset>
 801153c:	4620      	mov	r0, r4
 801153e:	b002      	add	sp, #8
 8011540:	bd10      	pop	{r4, pc}
	...

08011544 <_free_r>:
 8011544:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011546:	2900      	cmp	r1, #0
 8011548:	d048      	beq.n	80115dc <_free_r+0x98>
 801154a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801154e:	9001      	str	r0, [sp, #4]
 8011550:	2b00      	cmp	r3, #0
 8011552:	f1a1 0404 	sub.w	r4, r1, #4
 8011556:	bfb8      	it	lt
 8011558:	18e4      	addlt	r4, r4, r3
 801155a:	f000 f989 	bl	8011870 <__malloc_lock>
 801155e:	4a20      	ldr	r2, [pc, #128]	; (80115e0 <_free_r+0x9c>)
 8011560:	9801      	ldr	r0, [sp, #4]
 8011562:	6813      	ldr	r3, [r2, #0]
 8011564:	4615      	mov	r5, r2
 8011566:	b933      	cbnz	r3, 8011576 <_free_r+0x32>
 8011568:	6063      	str	r3, [r4, #4]
 801156a:	6014      	str	r4, [r2, #0]
 801156c:	b003      	add	sp, #12
 801156e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011572:	f000 b983 	b.w	801187c <__malloc_unlock>
 8011576:	42a3      	cmp	r3, r4
 8011578:	d90b      	bls.n	8011592 <_free_r+0x4e>
 801157a:	6821      	ldr	r1, [r4, #0]
 801157c:	1862      	adds	r2, r4, r1
 801157e:	4293      	cmp	r3, r2
 8011580:	bf04      	itt	eq
 8011582:	681a      	ldreq	r2, [r3, #0]
 8011584:	685b      	ldreq	r3, [r3, #4]
 8011586:	6063      	str	r3, [r4, #4]
 8011588:	bf04      	itt	eq
 801158a:	1852      	addeq	r2, r2, r1
 801158c:	6022      	streq	r2, [r4, #0]
 801158e:	602c      	str	r4, [r5, #0]
 8011590:	e7ec      	b.n	801156c <_free_r+0x28>
 8011592:	461a      	mov	r2, r3
 8011594:	685b      	ldr	r3, [r3, #4]
 8011596:	b10b      	cbz	r3, 801159c <_free_r+0x58>
 8011598:	42a3      	cmp	r3, r4
 801159a:	d9fa      	bls.n	8011592 <_free_r+0x4e>
 801159c:	6811      	ldr	r1, [r2, #0]
 801159e:	1855      	adds	r5, r2, r1
 80115a0:	42a5      	cmp	r5, r4
 80115a2:	d10b      	bne.n	80115bc <_free_r+0x78>
 80115a4:	6824      	ldr	r4, [r4, #0]
 80115a6:	4421      	add	r1, r4
 80115a8:	1854      	adds	r4, r2, r1
 80115aa:	42a3      	cmp	r3, r4
 80115ac:	6011      	str	r1, [r2, #0]
 80115ae:	d1dd      	bne.n	801156c <_free_r+0x28>
 80115b0:	681c      	ldr	r4, [r3, #0]
 80115b2:	685b      	ldr	r3, [r3, #4]
 80115b4:	6053      	str	r3, [r2, #4]
 80115b6:	4421      	add	r1, r4
 80115b8:	6011      	str	r1, [r2, #0]
 80115ba:	e7d7      	b.n	801156c <_free_r+0x28>
 80115bc:	d902      	bls.n	80115c4 <_free_r+0x80>
 80115be:	230c      	movs	r3, #12
 80115c0:	6003      	str	r3, [r0, #0]
 80115c2:	e7d3      	b.n	801156c <_free_r+0x28>
 80115c4:	6825      	ldr	r5, [r4, #0]
 80115c6:	1961      	adds	r1, r4, r5
 80115c8:	428b      	cmp	r3, r1
 80115ca:	bf04      	itt	eq
 80115cc:	6819      	ldreq	r1, [r3, #0]
 80115ce:	685b      	ldreq	r3, [r3, #4]
 80115d0:	6063      	str	r3, [r4, #4]
 80115d2:	bf04      	itt	eq
 80115d4:	1949      	addeq	r1, r1, r5
 80115d6:	6021      	streq	r1, [r4, #0]
 80115d8:	6054      	str	r4, [r2, #4]
 80115da:	e7c7      	b.n	801156c <_free_r+0x28>
 80115dc:	b003      	add	sp, #12
 80115de:	bd30      	pop	{r4, r5, pc}
 80115e0:	24000c08 	.word	0x24000c08

080115e4 <_malloc_r>:
 80115e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115e6:	1ccd      	adds	r5, r1, #3
 80115e8:	f025 0503 	bic.w	r5, r5, #3
 80115ec:	3508      	adds	r5, #8
 80115ee:	2d0c      	cmp	r5, #12
 80115f0:	bf38      	it	cc
 80115f2:	250c      	movcc	r5, #12
 80115f4:	2d00      	cmp	r5, #0
 80115f6:	4606      	mov	r6, r0
 80115f8:	db01      	blt.n	80115fe <_malloc_r+0x1a>
 80115fa:	42a9      	cmp	r1, r5
 80115fc:	d903      	bls.n	8011606 <_malloc_r+0x22>
 80115fe:	230c      	movs	r3, #12
 8011600:	6033      	str	r3, [r6, #0]
 8011602:	2000      	movs	r0, #0
 8011604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011606:	f000 f933 	bl	8011870 <__malloc_lock>
 801160a:	4921      	ldr	r1, [pc, #132]	; (8011690 <_malloc_r+0xac>)
 801160c:	680a      	ldr	r2, [r1, #0]
 801160e:	4614      	mov	r4, r2
 8011610:	b99c      	cbnz	r4, 801163a <_malloc_r+0x56>
 8011612:	4f20      	ldr	r7, [pc, #128]	; (8011694 <_malloc_r+0xb0>)
 8011614:	683b      	ldr	r3, [r7, #0]
 8011616:	b923      	cbnz	r3, 8011622 <_malloc_r+0x3e>
 8011618:	4621      	mov	r1, r4
 801161a:	4630      	mov	r0, r6
 801161c:	f000 f83c 	bl	8011698 <_sbrk_r>
 8011620:	6038      	str	r0, [r7, #0]
 8011622:	4629      	mov	r1, r5
 8011624:	4630      	mov	r0, r6
 8011626:	f000 f837 	bl	8011698 <_sbrk_r>
 801162a:	1c43      	adds	r3, r0, #1
 801162c:	d123      	bne.n	8011676 <_malloc_r+0x92>
 801162e:	230c      	movs	r3, #12
 8011630:	6033      	str	r3, [r6, #0]
 8011632:	4630      	mov	r0, r6
 8011634:	f000 f922 	bl	801187c <__malloc_unlock>
 8011638:	e7e3      	b.n	8011602 <_malloc_r+0x1e>
 801163a:	6823      	ldr	r3, [r4, #0]
 801163c:	1b5b      	subs	r3, r3, r5
 801163e:	d417      	bmi.n	8011670 <_malloc_r+0x8c>
 8011640:	2b0b      	cmp	r3, #11
 8011642:	d903      	bls.n	801164c <_malloc_r+0x68>
 8011644:	6023      	str	r3, [r4, #0]
 8011646:	441c      	add	r4, r3
 8011648:	6025      	str	r5, [r4, #0]
 801164a:	e004      	b.n	8011656 <_malloc_r+0x72>
 801164c:	6863      	ldr	r3, [r4, #4]
 801164e:	42a2      	cmp	r2, r4
 8011650:	bf0c      	ite	eq
 8011652:	600b      	streq	r3, [r1, #0]
 8011654:	6053      	strne	r3, [r2, #4]
 8011656:	4630      	mov	r0, r6
 8011658:	f000 f910 	bl	801187c <__malloc_unlock>
 801165c:	f104 000b 	add.w	r0, r4, #11
 8011660:	1d23      	adds	r3, r4, #4
 8011662:	f020 0007 	bic.w	r0, r0, #7
 8011666:	1ac2      	subs	r2, r0, r3
 8011668:	d0cc      	beq.n	8011604 <_malloc_r+0x20>
 801166a:	1a1b      	subs	r3, r3, r0
 801166c:	50a3      	str	r3, [r4, r2]
 801166e:	e7c9      	b.n	8011604 <_malloc_r+0x20>
 8011670:	4622      	mov	r2, r4
 8011672:	6864      	ldr	r4, [r4, #4]
 8011674:	e7cc      	b.n	8011610 <_malloc_r+0x2c>
 8011676:	1cc4      	adds	r4, r0, #3
 8011678:	f024 0403 	bic.w	r4, r4, #3
 801167c:	42a0      	cmp	r0, r4
 801167e:	d0e3      	beq.n	8011648 <_malloc_r+0x64>
 8011680:	1a21      	subs	r1, r4, r0
 8011682:	4630      	mov	r0, r6
 8011684:	f000 f808 	bl	8011698 <_sbrk_r>
 8011688:	3001      	adds	r0, #1
 801168a:	d1dd      	bne.n	8011648 <_malloc_r+0x64>
 801168c:	e7cf      	b.n	801162e <_malloc_r+0x4a>
 801168e:	bf00      	nop
 8011690:	24000c08 	.word	0x24000c08
 8011694:	24000c0c 	.word	0x24000c0c

08011698 <_sbrk_r>:
 8011698:	b538      	push	{r3, r4, r5, lr}
 801169a:	4d06      	ldr	r5, [pc, #24]	; (80116b4 <_sbrk_r+0x1c>)
 801169c:	2300      	movs	r3, #0
 801169e:	4604      	mov	r4, r0
 80116a0:	4608      	mov	r0, r1
 80116a2:	602b      	str	r3, [r5, #0]
 80116a4:	f7f1 ff5e 	bl	8003564 <_sbrk>
 80116a8:	1c43      	adds	r3, r0, #1
 80116aa:	d102      	bne.n	80116b2 <_sbrk_r+0x1a>
 80116ac:	682b      	ldr	r3, [r5, #0]
 80116ae:	b103      	cbz	r3, 80116b2 <_sbrk_r+0x1a>
 80116b0:	6023      	str	r3, [r4, #0]
 80116b2:	bd38      	pop	{r3, r4, r5, pc}
 80116b4:	24001464 	.word	0x24001464

080116b8 <__sread>:
 80116b8:	b510      	push	{r4, lr}
 80116ba:	460c      	mov	r4, r1
 80116bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116c0:	f000 fa3c 	bl	8011b3c <_read_r>
 80116c4:	2800      	cmp	r0, #0
 80116c6:	bfab      	itete	ge
 80116c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80116ca:	89a3      	ldrhlt	r3, [r4, #12]
 80116cc:	181b      	addge	r3, r3, r0
 80116ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80116d2:	bfac      	ite	ge
 80116d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80116d6:	81a3      	strhlt	r3, [r4, #12]
 80116d8:	bd10      	pop	{r4, pc}

080116da <__swrite>:
 80116da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116de:	461f      	mov	r7, r3
 80116e0:	898b      	ldrh	r3, [r1, #12]
 80116e2:	05db      	lsls	r3, r3, #23
 80116e4:	4605      	mov	r5, r0
 80116e6:	460c      	mov	r4, r1
 80116e8:	4616      	mov	r6, r2
 80116ea:	d505      	bpl.n	80116f8 <__swrite+0x1e>
 80116ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116f0:	2302      	movs	r3, #2
 80116f2:	2200      	movs	r2, #0
 80116f4:	f000 f898 	bl	8011828 <_lseek_r>
 80116f8:	89a3      	ldrh	r3, [r4, #12]
 80116fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80116fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011702:	81a3      	strh	r3, [r4, #12]
 8011704:	4632      	mov	r2, r6
 8011706:	463b      	mov	r3, r7
 8011708:	4628      	mov	r0, r5
 801170a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801170e:	f000 b817 	b.w	8011740 <_write_r>

08011712 <__sseek>:
 8011712:	b510      	push	{r4, lr}
 8011714:	460c      	mov	r4, r1
 8011716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801171a:	f000 f885 	bl	8011828 <_lseek_r>
 801171e:	1c43      	adds	r3, r0, #1
 8011720:	89a3      	ldrh	r3, [r4, #12]
 8011722:	bf15      	itete	ne
 8011724:	6560      	strne	r0, [r4, #84]	; 0x54
 8011726:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801172a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801172e:	81a3      	strheq	r3, [r4, #12]
 8011730:	bf18      	it	ne
 8011732:	81a3      	strhne	r3, [r4, #12]
 8011734:	bd10      	pop	{r4, pc}

08011736 <__sclose>:
 8011736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801173a:	f000 b831 	b.w	80117a0 <_close_r>
	...

08011740 <_write_r>:
 8011740:	b538      	push	{r3, r4, r5, lr}
 8011742:	4d07      	ldr	r5, [pc, #28]	; (8011760 <_write_r+0x20>)
 8011744:	4604      	mov	r4, r0
 8011746:	4608      	mov	r0, r1
 8011748:	4611      	mov	r1, r2
 801174a:	2200      	movs	r2, #0
 801174c:	602a      	str	r2, [r5, #0]
 801174e:	461a      	mov	r2, r3
 8011750:	f7f1 feb7 	bl	80034c2 <_write>
 8011754:	1c43      	adds	r3, r0, #1
 8011756:	d102      	bne.n	801175e <_write_r+0x1e>
 8011758:	682b      	ldr	r3, [r5, #0]
 801175a:	b103      	cbz	r3, 801175e <_write_r+0x1e>
 801175c:	6023      	str	r3, [r4, #0]
 801175e:	bd38      	pop	{r3, r4, r5, pc}
 8011760:	24001464 	.word	0x24001464

08011764 <__assert_func>:
 8011764:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011766:	4614      	mov	r4, r2
 8011768:	461a      	mov	r2, r3
 801176a:	4b09      	ldr	r3, [pc, #36]	; (8011790 <__assert_func+0x2c>)
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	4605      	mov	r5, r0
 8011770:	68d8      	ldr	r0, [r3, #12]
 8011772:	b14c      	cbz	r4, 8011788 <__assert_func+0x24>
 8011774:	4b07      	ldr	r3, [pc, #28]	; (8011794 <__assert_func+0x30>)
 8011776:	9100      	str	r1, [sp, #0]
 8011778:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801177c:	4906      	ldr	r1, [pc, #24]	; (8011798 <__assert_func+0x34>)
 801177e:	462b      	mov	r3, r5
 8011780:	f000 f81e 	bl	80117c0 <fiprintf>
 8011784:	f000 f9f9 	bl	8011b7a <abort>
 8011788:	4b04      	ldr	r3, [pc, #16]	; (801179c <__assert_func+0x38>)
 801178a:	461c      	mov	r4, r3
 801178c:	e7f3      	b.n	8011776 <__assert_func+0x12>
 801178e:	bf00      	nop
 8011790:	24000220 	.word	0x24000220
 8011794:	080139dc 	.word	0x080139dc
 8011798:	080139e9 	.word	0x080139e9
 801179c:	08013a17 	.word	0x08013a17

080117a0 <_close_r>:
 80117a0:	b538      	push	{r3, r4, r5, lr}
 80117a2:	4d06      	ldr	r5, [pc, #24]	; (80117bc <_close_r+0x1c>)
 80117a4:	2300      	movs	r3, #0
 80117a6:	4604      	mov	r4, r0
 80117a8:	4608      	mov	r0, r1
 80117aa:	602b      	str	r3, [r5, #0]
 80117ac:	f7f1 fea5 	bl	80034fa <_close>
 80117b0:	1c43      	adds	r3, r0, #1
 80117b2:	d102      	bne.n	80117ba <_close_r+0x1a>
 80117b4:	682b      	ldr	r3, [r5, #0]
 80117b6:	b103      	cbz	r3, 80117ba <_close_r+0x1a>
 80117b8:	6023      	str	r3, [r4, #0]
 80117ba:	bd38      	pop	{r3, r4, r5, pc}
 80117bc:	24001464 	.word	0x24001464

080117c0 <fiprintf>:
 80117c0:	b40e      	push	{r1, r2, r3}
 80117c2:	b503      	push	{r0, r1, lr}
 80117c4:	4601      	mov	r1, r0
 80117c6:	ab03      	add	r3, sp, #12
 80117c8:	4805      	ldr	r0, [pc, #20]	; (80117e0 <fiprintf+0x20>)
 80117ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80117ce:	6800      	ldr	r0, [r0, #0]
 80117d0:	9301      	str	r3, [sp, #4]
 80117d2:	f000 f883 	bl	80118dc <_vfiprintf_r>
 80117d6:	b002      	add	sp, #8
 80117d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80117dc:	b003      	add	sp, #12
 80117de:	4770      	bx	lr
 80117e0:	24000220 	.word	0x24000220

080117e4 <_fstat_r>:
 80117e4:	b538      	push	{r3, r4, r5, lr}
 80117e6:	4d07      	ldr	r5, [pc, #28]	; (8011804 <_fstat_r+0x20>)
 80117e8:	2300      	movs	r3, #0
 80117ea:	4604      	mov	r4, r0
 80117ec:	4608      	mov	r0, r1
 80117ee:	4611      	mov	r1, r2
 80117f0:	602b      	str	r3, [r5, #0]
 80117f2:	f7f1 fe8e 	bl	8003512 <_fstat>
 80117f6:	1c43      	adds	r3, r0, #1
 80117f8:	d102      	bne.n	8011800 <_fstat_r+0x1c>
 80117fa:	682b      	ldr	r3, [r5, #0]
 80117fc:	b103      	cbz	r3, 8011800 <_fstat_r+0x1c>
 80117fe:	6023      	str	r3, [r4, #0]
 8011800:	bd38      	pop	{r3, r4, r5, pc}
 8011802:	bf00      	nop
 8011804:	24001464 	.word	0x24001464

08011808 <_isatty_r>:
 8011808:	b538      	push	{r3, r4, r5, lr}
 801180a:	4d06      	ldr	r5, [pc, #24]	; (8011824 <_isatty_r+0x1c>)
 801180c:	2300      	movs	r3, #0
 801180e:	4604      	mov	r4, r0
 8011810:	4608      	mov	r0, r1
 8011812:	602b      	str	r3, [r5, #0]
 8011814:	f7f1 fe8d 	bl	8003532 <_isatty>
 8011818:	1c43      	adds	r3, r0, #1
 801181a:	d102      	bne.n	8011822 <_isatty_r+0x1a>
 801181c:	682b      	ldr	r3, [r5, #0]
 801181e:	b103      	cbz	r3, 8011822 <_isatty_r+0x1a>
 8011820:	6023      	str	r3, [r4, #0]
 8011822:	bd38      	pop	{r3, r4, r5, pc}
 8011824:	24001464 	.word	0x24001464

08011828 <_lseek_r>:
 8011828:	b538      	push	{r3, r4, r5, lr}
 801182a:	4d07      	ldr	r5, [pc, #28]	; (8011848 <_lseek_r+0x20>)
 801182c:	4604      	mov	r4, r0
 801182e:	4608      	mov	r0, r1
 8011830:	4611      	mov	r1, r2
 8011832:	2200      	movs	r2, #0
 8011834:	602a      	str	r2, [r5, #0]
 8011836:	461a      	mov	r2, r3
 8011838:	f7f1 fe86 	bl	8003548 <_lseek>
 801183c:	1c43      	adds	r3, r0, #1
 801183e:	d102      	bne.n	8011846 <_lseek_r+0x1e>
 8011840:	682b      	ldr	r3, [r5, #0]
 8011842:	b103      	cbz	r3, 8011846 <_lseek_r+0x1e>
 8011844:	6023      	str	r3, [r4, #0]
 8011846:	bd38      	pop	{r3, r4, r5, pc}
 8011848:	24001464 	.word	0x24001464

0801184c <__ascii_mbtowc>:
 801184c:	b082      	sub	sp, #8
 801184e:	b901      	cbnz	r1, 8011852 <__ascii_mbtowc+0x6>
 8011850:	a901      	add	r1, sp, #4
 8011852:	b142      	cbz	r2, 8011866 <__ascii_mbtowc+0x1a>
 8011854:	b14b      	cbz	r3, 801186a <__ascii_mbtowc+0x1e>
 8011856:	7813      	ldrb	r3, [r2, #0]
 8011858:	600b      	str	r3, [r1, #0]
 801185a:	7812      	ldrb	r2, [r2, #0]
 801185c:	1e10      	subs	r0, r2, #0
 801185e:	bf18      	it	ne
 8011860:	2001      	movne	r0, #1
 8011862:	b002      	add	sp, #8
 8011864:	4770      	bx	lr
 8011866:	4610      	mov	r0, r2
 8011868:	e7fb      	b.n	8011862 <__ascii_mbtowc+0x16>
 801186a:	f06f 0001 	mvn.w	r0, #1
 801186e:	e7f8      	b.n	8011862 <__ascii_mbtowc+0x16>

08011870 <__malloc_lock>:
 8011870:	4801      	ldr	r0, [pc, #4]	; (8011878 <__malloc_lock+0x8>)
 8011872:	f7ff ba5c 	b.w	8010d2e <__retarget_lock_acquire_recursive>
 8011876:	bf00      	nop
 8011878:	2400145c 	.word	0x2400145c

0801187c <__malloc_unlock>:
 801187c:	4801      	ldr	r0, [pc, #4]	; (8011884 <__malloc_unlock+0x8>)
 801187e:	f7ff ba57 	b.w	8010d30 <__retarget_lock_release_recursive>
 8011882:	bf00      	nop
 8011884:	2400145c 	.word	0x2400145c

08011888 <__sfputc_r>:
 8011888:	6893      	ldr	r3, [r2, #8]
 801188a:	3b01      	subs	r3, #1
 801188c:	2b00      	cmp	r3, #0
 801188e:	b410      	push	{r4}
 8011890:	6093      	str	r3, [r2, #8]
 8011892:	da08      	bge.n	80118a6 <__sfputc_r+0x1e>
 8011894:	6994      	ldr	r4, [r2, #24]
 8011896:	42a3      	cmp	r3, r4
 8011898:	db01      	blt.n	801189e <__sfputc_r+0x16>
 801189a:	290a      	cmp	r1, #10
 801189c:	d103      	bne.n	80118a6 <__sfputc_r+0x1e>
 801189e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80118a2:	f7fe b9b9 	b.w	800fc18 <__swbuf_r>
 80118a6:	6813      	ldr	r3, [r2, #0]
 80118a8:	1c58      	adds	r0, r3, #1
 80118aa:	6010      	str	r0, [r2, #0]
 80118ac:	7019      	strb	r1, [r3, #0]
 80118ae:	4608      	mov	r0, r1
 80118b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80118b4:	4770      	bx	lr

080118b6 <__sfputs_r>:
 80118b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118b8:	4606      	mov	r6, r0
 80118ba:	460f      	mov	r7, r1
 80118bc:	4614      	mov	r4, r2
 80118be:	18d5      	adds	r5, r2, r3
 80118c0:	42ac      	cmp	r4, r5
 80118c2:	d101      	bne.n	80118c8 <__sfputs_r+0x12>
 80118c4:	2000      	movs	r0, #0
 80118c6:	e007      	b.n	80118d8 <__sfputs_r+0x22>
 80118c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118cc:	463a      	mov	r2, r7
 80118ce:	4630      	mov	r0, r6
 80118d0:	f7ff ffda 	bl	8011888 <__sfputc_r>
 80118d4:	1c43      	adds	r3, r0, #1
 80118d6:	d1f3      	bne.n	80118c0 <__sfputs_r+0xa>
 80118d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080118dc <_vfiprintf_r>:
 80118dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118e0:	460d      	mov	r5, r1
 80118e2:	b09d      	sub	sp, #116	; 0x74
 80118e4:	4614      	mov	r4, r2
 80118e6:	4698      	mov	r8, r3
 80118e8:	4606      	mov	r6, r0
 80118ea:	b118      	cbz	r0, 80118f4 <_vfiprintf_r+0x18>
 80118ec:	6983      	ldr	r3, [r0, #24]
 80118ee:	b90b      	cbnz	r3, 80118f4 <_vfiprintf_r+0x18>
 80118f0:	f7ff f97a 	bl	8010be8 <__sinit>
 80118f4:	4b89      	ldr	r3, [pc, #548]	; (8011b1c <_vfiprintf_r+0x240>)
 80118f6:	429d      	cmp	r5, r3
 80118f8:	d11b      	bne.n	8011932 <_vfiprintf_r+0x56>
 80118fa:	6875      	ldr	r5, [r6, #4]
 80118fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80118fe:	07d9      	lsls	r1, r3, #31
 8011900:	d405      	bmi.n	801190e <_vfiprintf_r+0x32>
 8011902:	89ab      	ldrh	r3, [r5, #12]
 8011904:	059a      	lsls	r2, r3, #22
 8011906:	d402      	bmi.n	801190e <_vfiprintf_r+0x32>
 8011908:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801190a:	f7ff fa10 	bl	8010d2e <__retarget_lock_acquire_recursive>
 801190e:	89ab      	ldrh	r3, [r5, #12]
 8011910:	071b      	lsls	r3, r3, #28
 8011912:	d501      	bpl.n	8011918 <_vfiprintf_r+0x3c>
 8011914:	692b      	ldr	r3, [r5, #16]
 8011916:	b9eb      	cbnz	r3, 8011954 <_vfiprintf_r+0x78>
 8011918:	4629      	mov	r1, r5
 801191a:	4630      	mov	r0, r6
 801191c:	f7fe f9ce 	bl	800fcbc <__swsetup_r>
 8011920:	b1c0      	cbz	r0, 8011954 <_vfiprintf_r+0x78>
 8011922:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011924:	07dc      	lsls	r4, r3, #31
 8011926:	d50e      	bpl.n	8011946 <_vfiprintf_r+0x6a>
 8011928:	f04f 30ff 	mov.w	r0, #4294967295
 801192c:	b01d      	add	sp, #116	; 0x74
 801192e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011932:	4b7b      	ldr	r3, [pc, #492]	; (8011b20 <_vfiprintf_r+0x244>)
 8011934:	429d      	cmp	r5, r3
 8011936:	d101      	bne.n	801193c <_vfiprintf_r+0x60>
 8011938:	68b5      	ldr	r5, [r6, #8]
 801193a:	e7df      	b.n	80118fc <_vfiprintf_r+0x20>
 801193c:	4b79      	ldr	r3, [pc, #484]	; (8011b24 <_vfiprintf_r+0x248>)
 801193e:	429d      	cmp	r5, r3
 8011940:	bf08      	it	eq
 8011942:	68f5      	ldreq	r5, [r6, #12]
 8011944:	e7da      	b.n	80118fc <_vfiprintf_r+0x20>
 8011946:	89ab      	ldrh	r3, [r5, #12]
 8011948:	0598      	lsls	r0, r3, #22
 801194a:	d4ed      	bmi.n	8011928 <_vfiprintf_r+0x4c>
 801194c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801194e:	f7ff f9ef 	bl	8010d30 <__retarget_lock_release_recursive>
 8011952:	e7e9      	b.n	8011928 <_vfiprintf_r+0x4c>
 8011954:	2300      	movs	r3, #0
 8011956:	9309      	str	r3, [sp, #36]	; 0x24
 8011958:	2320      	movs	r3, #32
 801195a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801195e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011962:	2330      	movs	r3, #48	; 0x30
 8011964:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011b28 <_vfiprintf_r+0x24c>
 8011968:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801196c:	f04f 0901 	mov.w	r9, #1
 8011970:	4623      	mov	r3, r4
 8011972:	469a      	mov	sl, r3
 8011974:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011978:	b10a      	cbz	r2, 801197e <_vfiprintf_r+0xa2>
 801197a:	2a25      	cmp	r2, #37	; 0x25
 801197c:	d1f9      	bne.n	8011972 <_vfiprintf_r+0x96>
 801197e:	ebba 0b04 	subs.w	fp, sl, r4
 8011982:	d00b      	beq.n	801199c <_vfiprintf_r+0xc0>
 8011984:	465b      	mov	r3, fp
 8011986:	4622      	mov	r2, r4
 8011988:	4629      	mov	r1, r5
 801198a:	4630      	mov	r0, r6
 801198c:	f7ff ff93 	bl	80118b6 <__sfputs_r>
 8011990:	3001      	adds	r0, #1
 8011992:	f000 80aa 	beq.w	8011aea <_vfiprintf_r+0x20e>
 8011996:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011998:	445a      	add	r2, fp
 801199a:	9209      	str	r2, [sp, #36]	; 0x24
 801199c:	f89a 3000 	ldrb.w	r3, [sl]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	f000 80a2 	beq.w	8011aea <_vfiprintf_r+0x20e>
 80119a6:	2300      	movs	r3, #0
 80119a8:	f04f 32ff 	mov.w	r2, #4294967295
 80119ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80119b0:	f10a 0a01 	add.w	sl, sl, #1
 80119b4:	9304      	str	r3, [sp, #16]
 80119b6:	9307      	str	r3, [sp, #28]
 80119b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80119bc:	931a      	str	r3, [sp, #104]	; 0x68
 80119be:	4654      	mov	r4, sl
 80119c0:	2205      	movs	r2, #5
 80119c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119c6:	4858      	ldr	r0, [pc, #352]	; (8011b28 <_vfiprintf_r+0x24c>)
 80119c8:	f7ee fc92 	bl	80002f0 <memchr>
 80119cc:	9a04      	ldr	r2, [sp, #16]
 80119ce:	b9d8      	cbnz	r0, 8011a08 <_vfiprintf_r+0x12c>
 80119d0:	06d1      	lsls	r1, r2, #27
 80119d2:	bf44      	itt	mi
 80119d4:	2320      	movmi	r3, #32
 80119d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80119da:	0713      	lsls	r3, r2, #28
 80119dc:	bf44      	itt	mi
 80119de:	232b      	movmi	r3, #43	; 0x2b
 80119e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80119e4:	f89a 3000 	ldrb.w	r3, [sl]
 80119e8:	2b2a      	cmp	r3, #42	; 0x2a
 80119ea:	d015      	beq.n	8011a18 <_vfiprintf_r+0x13c>
 80119ec:	9a07      	ldr	r2, [sp, #28]
 80119ee:	4654      	mov	r4, sl
 80119f0:	2000      	movs	r0, #0
 80119f2:	f04f 0c0a 	mov.w	ip, #10
 80119f6:	4621      	mov	r1, r4
 80119f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80119fc:	3b30      	subs	r3, #48	; 0x30
 80119fe:	2b09      	cmp	r3, #9
 8011a00:	d94e      	bls.n	8011aa0 <_vfiprintf_r+0x1c4>
 8011a02:	b1b0      	cbz	r0, 8011a32 <_vfiprintf_r+0x156>
 8011a04:	9207      	str	r2, [sp, #28]
 8011a06:	e014      	b.n	8011a32 <_vfiprintf_r+0x156>
 8011a08:	eba0 0308 	sub.w	r3, r0, r8
 8011a0c:	fa09 f303 	lsl.w	r3, r9, r3
 8011a10:	4313      	orrs	r3, r2
 8011a12:	9304      	str	r3, [sp, #16]
 8011a14:	46a2      	mov	sl, r4
 8011a16:	e7d2      	b.n	80119be <_vfiprintf_r+0xe2>
 8011a18:	9b03      	ldr	r3, [sp, #12]
 8011a1a:	1d19      	adds	r1, r3, #4
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	9103      	str	r1, [sp, #12]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	bfbb      	ittet	lt
 8011a24:	425b      	neglt	r3, r3
 8011a26:	f042 0202 	orrlt.w	r2, r2, #2
 8011a2a:	9307      	strge	r3, [sp, #28]
 8011a2c:	9307      	strlt	r3, [sp, #28]
 8011a2e:	bfb8      	it	lt
 8011a30:	9204      	strlt	r2, [sp, #16]
 8011a32:	7823      	ldrb	r3, [r4, #0]
 8011a34:	2b2e      	cmp	r3, #46	; 0x2e
 8011a36:	d10c      	bne.n	8011a52 <_vfiprintf_r+0x176>
 8011a38:	7863      	ldrb	r3, [r4, #1]
 8011a3a:	2b2a      	cmp	r3, #42	; 0x2a
 8011a3c:	d135      	bne.n	8011aaa <_vfiprintf_r+0x1ce>
 8011a3e:	9b03      	ldr	r3, [sp, #12]
 8011a40:	1d1a      	adds	r2, r3, #4
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	9203      	str	r2, [sp, #12]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	bfb8      	it	lt
 8011a4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8011a4e:	3402      	adds	r4, #2
 8011a50:	9305      	str	r3, [sp, #20]
 8011a52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011b38 <_vfiprintf_r+0x25c>
 8011a56:	7821      	ldrb	r1, [r4, #0]
 8011a58:	2203      	movs	r2, #3
 8011a5a:	4650      	mov	r0, sl
 8011a5c:	f7ee fc48 	bl	80002f0 <memchr>
 8011a60:	b140      	cbz	r0, 8011a74 <_vfiprintf_r+0x198>
 8011a62:	2340      	movs	r3, #64	; 0x40
 8011a64:	eba0 000a 	sub.w	r0, r0, sl
 8011a68:	fa03 f000 	lsl.w	r0, r3, r0
 8011a6c:	9b04      	ldr	r3, [sp, #16]
 8011a6e:	4303      	orrs	r3, r0
 8011a70:	3401      	adds	r4, #1
 8011a72:	9304      	str	r3, [sp, #16]
 8011a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a78:	482c      	ldr	r0, [pc, #176]	; (8011b2c <_vfiprintf_r+0x250>)
 8011a7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011a7e:	2206      	movs	r2, #6
 8011a80:	f7ee fc36 	bl	80002f0 <memchr>
 8011a84:	2800      	cmp	r0, #0
 8011a86:	d03f      	beq.n	8011b08 <_vfiprintf_r+0x22c>
 8011a88:	4b29      	ldr	r3, [pc, #164]	; (8011b30 <_vfiprintf_r+0x254>)
 8011a8a:	bb1b      	cbnz	r3, 8011ad4 <_vfiprintf_r+0x1f8>
 8011a8c:	9b03      	ldr	r3, [sp, #12]
 8011a8e:	3307      	adds	r3, #7
 8011a90:	f023 0307 	bic.w	r3, r3, #7
 8011a94:	3308      	adds	r3, #8
 8011a96:	9303      	str	r3, [sp, #12]
 8011a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a9a:	443b      	add	r3, r7
 8011a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8011a9e:	e767      	b.n	8011970 <_vfiprintf_r+0x94>
 8011aa0:	fb0c 3202 	mla	r2, ip, r2, r3
 8011aa4:	460c      	mov	r4, r1
 8011aa6:	2001      	movs	r0, #1
 8011aa8:	e7a5      	b.n	80119f6 <_vfiprintf_r+0x11a>
 8011aaa:	2300      	movs	r3, #0
 8011aac:	3401      	adds	r4, #1
 8011aae:	9305      	str	r3, [sp, #20]
 8011ab0:	4619      	mov	r1, r3
 8011ab2:	f04f 0c0a 	mov.w	ip, #10
 8011ab6:	4620      	mov	r0, r4
 8011ab8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011abc:	3a30      	subs	r2, #48	; 0x30
 8011abe:	2a09      	cmp	r2, #9
 8011ac0:	d903      	bls.n	8011aca <_vfiprintf_r+0x1ee>
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d0c5      	beq.n	8011a52 <_vfiprintf_r+0x176>
 8011ac6:	9105      	str	r1, [sp, #20]
 8011ac8:	e7c3      	b.n	8011a52 <_vfiprintf_r+0x176>
 8011aca:	fb0c 2101 	mla	r1, ip, r1, r2
 8011ace:	4604      	mov	r4, r0
 8011ad0:	2301      	movs	r3, #1
 8011ad2:	e7f0      	b.n	8011ab6 <_vfiprintf_r+0x1da>
 8011ad4:	ab03      	add	r3, sp, #12
 8011ad6:	9300      	str	r3, [sp, #0]
 8011ad8:	462a      	mov	r2, r5
 8011ada:	4b16      	ldr	r3, [pc, #88]	; (8011b34 <_vfiprintf_r+0x258>)
 8011adc:	a904      	add	r1, sp, #16
 8011ade:	4630      	mov	r0, r6
 8011ae0:	f7fd fc72 	bl	800f3c8 <_printf_float>
 8011ae4:	4607      	mov	r7, r0
 8011ae6:	1c78      	adds	r0, r7, #1
 8011ae8:	d1d6      	bne.n	8011a98 <_vfiprintf_r+0x1bc>
 8011aea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011aec:	07d9      	lsls	r1, r3, #31
 8011aee:	d405      	bmi.n	8011afc <_vfiprintf_r+0x220>
 8011af0:	89ab      	ldrh	r3, [r5, #12]
 8011af2:	059a      	lsls	r2, r3, #22
 8011af4:	d402      	bmi.n	8011afc <_vfiprintf_r+0x220>
 8011af6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011af8:	f7ff f91a 	bl	8010d30 <__retarget_lock_release_recursive>
 8011afc:	89ab      	ldrh	r3, [r5, #12]
 8011afe:	065b      	lsls	r3, r3, #25
 8011b00:	f53f af12 	bmi.w	8011928 <_vfiprintf_r+0x4c>
 8011b04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011b06:	e711      	b.n	801192c <_vfiprintf_r+0x50>
 8011b08:	ab03      	add	r3, sp, #12
 8011b0a:	9300      	str	r3, [sp, #0]
 8011b0c:	462a      	mov	r2, r5
 8011b0e:	4b09      	ldr	r3, [pc, #36]	; (8011b34 <_vfiprintf_r+0x258>)
 8011b10:	a904      	add	r1, sp, #16
 8011b12:	4630      	mov	r0, r6
 8011b14:	f7fd fee4 	bl	800f8e0 <_printf_i>
 8011b18:	e7e4      	b.n	8011ae4 <_vfiprintf_r+0x208>
 8011b1a:	bf00      	nop
 8011b1c:	0801383c 	.word	0x0801383c
 8011b20:	0801385c 	.word	0x0801385c
 8011b24:	0801381c 	.word	0x0801381c
 8011b28:	08013a22 	.word	0x08013a22
 8011b2c:	08013a2c 	.word	0x08013a2c
 8011b30:	0800f3c9 	.word	0x0800f3c9
 8011b34:	080118b7 	.word	0x080118b7
 8011b38:	08013a28 	.word	0x08013a28

08011b3c <_read_r>:
 8011b3c:	b538      	push	{r3, r4, r5, lr}
 8011b3e:	4d07      	ldr	r5, [pc, #28]	; (8011b5c <_read_r+0x20>)
 8011b40:	4604      	mov	r4, r0
 8011b42:	4608      	mov	r0, r1
 8011b44:	4611      	mov	r1, r2
 8011b46:	2200      	movs	r2, #0
 8011b48:	602a      	str	r2, [r5, #0]
 8011b4a:	461a      	mov	r2, r3
 8011b4c:	f7f1 fc9c 	bl	8003488 <_read>
 8011b50:	1c43      	adds	r3, r0, #1
 8011b52:	d102      	bne.n	8011b5a <_read_r+0x1e>
 8011b54:	682b      	ldr	r3, [r5, #0]
 8011b56:	b103      	cbz	r3, 8011b5a <_read_r+0x1e>
 8011b58:	6023      	str	r3, [r4, #0]
 8011b5a:	bd38      	pop	{r3, r4, r5, pc}
 8011b5c:	24001464 	.word	0x24001464

08011b60 <__ascii_wctomb>:
 8011b60:	b149      	cbz	r1, 8011b76 <__ascii_wctomb+0x16>
 8011b62:	2aff      	cmp	r2, #255	; 0xff
 8011b64:	bf85      	ittet	hi
 8011b66:	238a      	movhi	r3, #138	; 0x8a
 8011b68:	6003      	strhi	r3, [r0, #0]
 8011b6a:	700a      	strbls	r2, [r1, #0]
 8011b6c:	f04f 30ff 	movhi.w	r0, #4294967295
 8011b70:	bf98      	it	ls
 8011b72:	2001      	movls	r0, #1
 8011b74:	4770      	bx	lr
 8011b76:	4608      	mov	r0, r1
 8011b78:	4770      	bx	lr

08011b7a <abort>:
 8011b7a:	b508      	push	{r3, lr}
 8011b7c:	2006      	movs	r0, #6
 8011b7e:	f000 f82b 	bl	8011bd8 <raise>
 8011b82:	2001      	movs	r0, #1
 8011b84:	f7f1 fc76 	bl	8003474 <_exit>

08011b88 <_raise_r>:
 8011b88:	291f      	cmp	r1, #31
 8011b8a:	b538      	push	{r3, r4, r5, lr}
 8011b8c:	4604      	mov	r4, r0
 8011b8e:	460d      	mov	r5, r1
 8011b90:	d904      	bls.n	8011b9c <_raise_r+0x14>
 8011b92:	2316      	movs	r3, #22
 8011b94:	6003      	str	r3, [r0, #0]
 8011b96:	f04f 30ff 	mov.w	r0, #4294967295
 8011b9a:	bd38      	pop	{r3, r4, r5, pc}
 8011b9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011b9e:	b112      	cbz	r2, 8011ba6 <_raise_r+0x1e>
 8011ba0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011ba4:	b94b      	cbnz	r3, 8011bba <_raise_r+0x32>
 8011ba6:	4620      	mov	r0, r4
 8011ba8:	f000 f830 	bl	8011c0c <_getpid_r>
 8011bac:	462a      	mov	r2, r5
 8011bae:	4601      	mov	r1, r0
 8011bb0:	4620      	mov	r0, r4
 8011bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011bb6:	f000 b817 	b.w	8011be8 <_kill_r>
 8011bba:	2b01      	cmp	r3, #1
 8011bbc:	d00a      	beq.n	8011bd4 <_raise_r+0x4c>
 8011bbe:	1c59      	adds	r1, r3, #1
 8011bc0:	d103      	bne.n	8011bca <_raise_r+0x42>
 8011bc2:	2316      	movs	r3, #22
 8011bc4:	6003      	str	r3, [r0, #0]
 8011bc6:	2001      	movs	r0, #1
 8011bc8:	e7e7      	b.n	8011b9a <_raise_r+0x12>
 8011bca:	2400      	movs	r4, #0
 8011bcc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011bd0:	4628      	mov	r0, r5
 8011bd2:	4798      	blx	r3
 8011bd4:	2000      	movs	r0, #0
 8011bd6:	e7e0      	b.n	8011b9a <_raise_r+0x12>

08011bd8 <raise>:
 8011bd8:	4b02      	ldr	r3, [pc, #8]	; (8011be4 <raise+0xc>)
 8011bda:	4601      	mov	r1, r0
 8011bdc:	6818      	ldr	r0, [r3, #0]
 8011bde:	f7ff bfd3 	b.w	8011b88 <_raise_r>
 8011be2:	bf00      	nop
 8011be4:	24000220 	.word	0x24000220

08011be8 <_kill_r>:
 8011be8:	b538      	push	{r3, r4, r5, lr}
 8011bea:	4d07      	ldr	r5, [pc, #28]	; (8011c08 <_kill_r+0x20>)
 8011bec:	2300      	movs	r3, #0
 8011bee:	4604      	mov	r4, r0
 8011bf0:	4608      	mov	r0, r1
 8011bf2:	4611      	mov	r1, r2
 8011bf4:	602b      	str	r3, [r5, #0]
 8011bf6:	f7f1 fc2d 	bl	8003454 <_kill>
 8011bfa:	1c43      	adds	r3, r0, #1
 8011bfc:	d102      	bne.n	8011c04 <_kill_r+0x1c>
 8011bfe:	682b      	ldr	r3, [r5, #0]
 8011c00:	b103      	cbz	r3, 8011c04 <_kill_r+0x1c>
 8011c02:	6023      	str	r3, [r4, #0]
 8011c04:	bd38      	pop	{r3, r4, r5, pc}
 8011c06:	bf00      	nop
 8011c08:	24001464 	.word	0x24001464

08011c0c <_getpid_r>:
 8011c0c:	f7f1 bc1a 	b.w	8003444 <_getpid>

08011c10 <_init>:
 8011c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c12:	bf00      	nop
 8011c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c16:	bc08      	pop	{r3}
 8011c18:	469e      	mov	lr, r3
 8011c1a:	4770      	bx	lr

08011c1c <_fini>:
 8011c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c1e:	bf00      	nop
 8011c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c22:	bc08      	pop	{r3}
 8011c24:	469e      	mov	lr, r3
 8011c26:	4770      	bx	lr
