
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba68  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800bd08  0800bd08  0001bd08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bdf4  0800bdf4  0001bdf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bdfc  0800bdfc  0001bdfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800be00  0800be00  0001be00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  0800be04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000008c8  20000078  0800be78  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20000940  0800be78  00020940  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023a4d  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003975  00000000  00000000  00043aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001428  00000000  00000000  00047468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001310  00000000  00000000  00048890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000439c  00000000  00000000  00049ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019c0c  00000000  00000000  0004df3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167bdc  00000000  00000000  00067b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001cf724  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d38  00000000  00000000  001cf778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000078 	.word	0x20000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bcf0 	.word	0x0800bcf0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2000007c 	.word	0x2000007c
 80002dc:	0800bcf0 	.word	0x0800bcf0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067e:	f001 ff3b 	bl	80024f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000682:	f000 f8cd 	bl	8000820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  SysTick->LOAD = 480000 - 1;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000686:	f000 feed 	bl	8001464 <MX_GPIO_Init>
  MX_DMA_Init();
 800068a:	f000 fd9b 	bl	80011c4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800068e:	f000 fd4d 	bl	800112c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000692:	f000 fa67 	bl	8000b64 <MX_TIM2_Init>
  MX_UART4_Init();
 8000696:	f000 fcf9 	bl	800108c <MX_UART4_Init>
  MX_TIM4_Init();
 800069a:	f000 fb53 	bl	8000d44 <MX_TIM4_Init>
  MX_SPI3_Init();
 800069e:	f000 f95d 	bl	800095c <MX_SPI3_Init>
  MX_TIM1_Init();
 80006a2:	f000 f9b1 	bl	8000a08 <MX_TIM1_Init>
  MX_TIM3_Init();
 80006a6:	f000 fad5 	bl	8000c54 <MX_TIM3_Init>
  MX_TIM5_Init();
 80006aa:	f000 fbc3 	bl	8000e34 <MX_TIM5_Init>
  MX_TIM15_Init();
 80006ae:	f000 fc49 	bl	8000f44 <MX_TIM15_Init>
  MX_TIM12_Init();
 80006b2:	f000 fc0d 	bl	8000ed0 <MX_TIM12_Init>
  MX_CRC_Init();
 80006b6:	f000 f92f 	bl	8000918 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start_IT(&htim2);
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80006ba:	2201      	movs	r2, #1
 80006bc:	2101      	movs	r1, #1
 80006be:	4847      	ldr	r0, [pc, #284]	; (80007dc <main+0x164>)
 80006c0:	f004 fd86 	bl	80051d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2102      	movs	r1, #2
 80006c8:	4845      	ldr	r0, [pc, #276]	; (80007e0 <main+0x168>)
 80006ca:	f004 fd81 	bl	80051d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006d4:	4841      	ldr	r0, [pc, #260]	; (80007dc <main+0x164>)
 80006d6:	f004 fd7b 	bl	80051d0 <HAL_GPIO_WritePin>
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 80006da:	4b42      	ldr	r3, [pc, #264]	; (80007e4 <main+0x16c>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	4b40      	ldr	r3, [pc, #256]	; (80007e4 <main+0x16c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f042 0220 	orr.w	r2, r2, #32
 80006e8:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_TC);
 80006ea:	4b3e      	ldr	r3, [pc, #248]	; (80007e4 <main+0x16c>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	4b3c      	ldr	r3, [pc, #240]	; (80007e4 <main+0x16c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80006f8:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart3, UART3_RXBUFFER, 4);
 80006fa:	2204      	movs	r2, #4
 80006fc:	493a      	ldr	r1, [pc, #232]	; (80007e8 <main+0x170>)
 80006fe:	4839      	ldr	r0, [pc, #228]	; (80007e4 <main+0x16c>)
 8000700:	f008 fc02 	bl	8008f08 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(State_Checksum_Error)
 8000704:	4b39      	ldr	r3, [pc, #228]	; (80007ec <main+0x174>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d00b      	beq.n	8000724 <main+0xac>
	  {
		  State_Checksum_Error = 0;
 800070c:	4b37      	ldr	r3, [pc, #220]	; (80007ec <main+0x174>)
 800070e:	2200      	movs	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_CheckSumError_Address;
 8000712:	4b37      	ldr	r3, [pc, #220]	; (80007f0 <main+0x178>)
 8000714:	22ee      	movs	r2, #238	; 0xee
 8000716:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 8000718:	2364      	movs	r3, #100	; 0x64
 800071a:	2201      	movs	r2, #1
 800071c:	4934      	ldr	r1, [pc, #208]	; (80007f0 <main+0x178>)
 800071e:	4831      	ldr	r0, [pc, #196]	; (80007e4 <main+0x16c>)
 8000720:	f008 fb5c 	bl	8008ddc <HAL_UART_Transmit>
	  }
	  if(State_Print_4_Joint_State)
 8000724:	4b33      	ldr	r3, [pc, #204]	; (80007f4 <main+0x17c>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d018      	beq.n	800075e <main+0xe6>
	  {
		  State_Print_4_Joint_State = 0;
 800072c:	4b31      	ldr	r3, [pc, #196]	; (80007f4 <main+0x17c>)
 800072e:	2200      	movs	r2, #0
 8000730:	701a      	strb	r2, [r3, #0]
		  printf("\n%3d %3d %3d %3d\n\r", q1, q2, q3, q4);
 8000732:	4b31      	ldr	r3, [pc, #196]	; (80007f8 <main+0x180>)
 8000734:	6819      	ldr	r1, [r3, #0]
 8000736:	4b31      	ldr	r3, [pc, #196]	; (80007fc <main+0x184>)
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	4b31      	ldr	r3, [pc, #196]	; (8000800 <main+0x188>)
 800073c:	6818      	ldr	r0, [r3, #0]
 800073e:	4b31      	ldr	r3, [pc, #196]	; (8000804 <main+0x18c>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	4603      	mov	r3, r0
 8000746:	4830      	ldr	r0, [pc, #192]	; (8000808 <main+0x190>)
 8000748:	f00a fb7c 	bl	800ae44 <iprintf>
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ProcessIsCompleted_Address;
 800074c:	4b28      	ldr	r3, [pc, #160]	; (80007f0 <main+0x178>)
 800074e:	22ad      	movs	r2, #173	; 0xad
 8000750:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 8000752:	2364      	movs	r3, #100	; 0x64
 8000754:	2201      	movs	r2, #1
 8000756:	4926      	ldr	r1, [pc, #152]	; (80007f0 <main+0x178>)
 8000758:	4822      	ldr	r0, [pc, #136]	; (80007e4 <main+0x16c>)
 800075a:	f008 fb3f 	bl	8008ddc <HAL_UART_Transmit>
	  }
	  if(State_Activate_Gripper)
 800075e:	4b2b      	ldr	r3, [pc, #172]	; (800080c <main+0x194>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d00b      	beq.n	800077e <main+0x106>
	  {
		  State_Activate_Gripper = 0;
 8000766:	4b29      	ldr	r3, [pc, #164]	; (800080c <main+0x194>)
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ProcessIsCompleted_Address;
 800076c:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <main+0x178>)
 800076e:	22ad      	movs	r2, #173	; 0xad
 8000770:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 8000772:	2364      	movs	r3, #100	; 0x64
 8000774:	2201      	movs	r2, #1
 8000776:	491e      	ldr	r1, [pc, #120]	; (80007f0 <main+0x178>)
 8000778:	481a      	ldr	r0, [pc, #104]	; (80007e4 <main+0x16c>)
 800077a:	f008 fb2f 	bl	8008ddc <HAL_UART_Transmit>
	  }
	  if(State_Deactivate_Gripper)
 800077e:	4b24      	ldr	r3, [pc, #144]	; (8000810 <main+0x198>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d00b      	beq.n	800079e <main+0x126>
	  {
		  State_Deactivate_Gripper = 0;
 8000786:	4b22      	ldr	r3, [pc, #136]	; (8000810 <main+0x198>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ProcessIsCompleted_Address;
 800078c:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <main+0x178>)
 800078e:	22ad      	movs	r2, #173	; 0xad
 8000790:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 8000792:	2364      	movs	r3, #100	; 0x64
 8000794:	2201      	movs	r2, #1
 8000796:	4916      	ldr	r1, [pc, #88]	; (80007f0 <main+0x178>)
 8000798:	4812      	ldr	r0, [pc, #72]	; (80007e4 <main+0x16c>)
 800079a:	f008 fb1f 	bl	8008ddc <HAL_UART_Transmit>
	  }
	  if(State_Set_Home)
 800079e:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <main+0x19c>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d00b      	beq.n	80007be <main+0x146>
	  {
		  State_Set_Home = 0;
 80007a6:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <main+0x19c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ProcessIsCompleted_Address;
 80007ac:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <main+0x178>)
 80007ae:	22ad      	movs	r2, #173	; 0xad
 80007b0:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 80007b2:	2364      	movs	r3, #100	; 0x64
 80007b4:	2201      	movs	r2, #1
 80007b6:	490e      	ldr	r1, [pc, #56]	; (80007f0 <main+0x178>)
 80007b8:	480a      	ldr	r0, [pc, #40]	; (80007e4 <main+0x16c>)
 80007ba:	f008 fb0f 	bl	8008ddc <HAL_UART_Transmit>
	  }
	  if(State_PID_Control_Timer)
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <main+0x1a0>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d002      	beq.n	80007cc <main+0x154>
	  {
//		  HAL_TIM_Base_Start_IT(&htim5);
		  State_PID_Control_Timer = 0;
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <main+0x1a0>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	701a      	strb	r2, [r3, #0]
	  }
	  if(State_Casade_Control_Timer)
 80007cc:	4b13      	ldr	r3, [pc, #76]	; (800081c <main+0x1a4>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d097      	beq.n	8000704 <main+0x8c>
	  {
//		  HAL_TIM_Base_Start_IT(&htim12);
		  State_Casade_Control_Timer = 0;
 80007d4:	4b11      	ldr	r3, [pc, #68]	; (800081c <main+0x1a4>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	701a      	strb	r2, [r3, #0]
	  if(State_Checksum_Error)
 80007da:	e793      	b.n	8000704 <main+0x8c>
 80007dc:	58020400 	.word	0x58020400
 80007e0:	58021000 	.word	0x58021000
 80007e4:	200002d0 	.word	0x200002d0
 80007e8:	20000928 	.word	0x20000928
 80007ec:	200008a4 	.word	0x200008a4
 80007f0:	2000069c 	.word	0x2000069c
 80007f4:	2000069e 	.word	0x2000069e
 80007f8:	20000698 	.word	0x20000698
 80007fc:	20000460 	.word	0x20000460
 8000800:	20000690 	.word	0x20000690
 8000804:	200008a8 	.word	0x200008a8
 8000808:	0800bd08 	.word	0x0800bd08
 800080c:	20000924 	.word	0x20000924
 8000810:	2000045c 	.word	0x2000045c
 8000814:	2000069d 	.word	0x2000069d
 8000818:	20000694 	.word	0x20000694
 800081c:	20000800 	.word	0x20000800

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b09c      	sub	sp, #112	; 0x70
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082a:	224c      	movs	r2, #76	; 0x4c
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f00a fb00 	bl	800ae34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2220      	movs	r2, #32
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f00a fafa 	bl	800ae34 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000840:	2002      	movs	r0, #2
 8000842:	f004 fcf9 	bl	8005238 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000846:	2300      	movs	r3, #0
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	4b31      	ldr	r3, [pc, #196]	; (8000910 <SystemClock_Config+0xf0>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	4a30      	ldr	r2, [pc, #192]	; (8000910 <SystemClock_Config+0xf0>)
 8000850:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000854:	6193      	str	r3, [r2, #24]
 8000856:	4b2e      	ldr	r3, [pc, #184]	; (8000910 <SystemClock_Config+0xf0>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	4b2c      	ldr	r3, [pc, #176]	; (8000914 <SystemClock_Config+0xf4>)
 8000862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000864:	4a2b      	ldr	r2, [pc, #172]	; (8000914 <SystemClock_Config+0xf4>)
 8000866:	f043 0301 	orr.w	r3, r3, #1
 800086a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800086c:	4b29      	ldr	r3, [pc, #164]	; (8000914 <SystemClock_Config+0xf4>)
 800086e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000870:	f003 0301 	and.w	r3, r3, #1
 8000874:	603b      	str	r3, [r7, #0]
 8000876:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000878:	bf00      	nop
 800087a:	4b25      	ldr	r3, [pc, #148]	; (8000910 <SystemClock_Config+0xf0>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000886:	d1f8      	bne.n	800087a <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000888:	2302      	movs	r3, #2
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800088c:	2301      	movs	r3, #1
 800088e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000890:	2340      	movs	r3, #64	; 0x40
 8000892:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000894:	2302      	movs	r3, #2
 8000896:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000898:	2300      	movs	r3, #0
 800089a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800089c:	2304      	movs	r3, #4
 800089e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80008a0:	233c      	movs	r3, #60	; 0x3c
 80008a2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008a4:	2302      	movs	r3, #2
 80008a6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80008a8:	2306      	movs	r3, #6
 80008aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008ac:	2302      	movs	r3, #2
 80008ae:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008b0:	230c      	movs	r3, #12
 80008b2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c0:	4618      	mov	r0, r3
 80008c2:	f004 fcf3 	bl	80052ac <HAL_RCC_OscConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80008cc:	f001 f821 	bl	8001912 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d0:	233f      	movs	r3, #63	; 0x3f
 80008d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d4:	2303      	movs	r3, #3
 80008d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008dc:	2308      	movs	r3, #8
 80008de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008e0:	2340      	movs	r3, #64	; 0x40
 80008e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008e4:	2340      	movs	r3, #64	; 0x40
 80008e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008ee:	2340      	movs	r3, #64	; 0x40
 80008f0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	2104      	movs	r1, #4
 80008f6:	4618      	mov	r0, r3
 80008f8:	f005 f8e8 	bl	8005acc <HAL_RCC_ClockConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000902:	f001 f806 	bl	8001912 <Error_Handler>
  }
}
 8000906:	bf00      	nop
 8000908:	3770      	adds	r7, #112	; 0x70
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	58024800 	.word	0x58024800
 8000914:	58000400 	.word	0x58000400

08000918 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800091c:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <MX_CRC_Init+0x3c>)
 800091e:	4a0e      	ldr	r2, [pc, #56]	; (8000958 <MX_CRC_Init+0x40>)
 8000920:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_CRC_Init+0x3c>)
 8000924:	2200      	movs	r2, #0
 8000926:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <MX_CRC_Init+0x3c>)
 800092a:	2200      	movs	r2, #0
 800092c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_CRC_Init+0x3c>)
 8000930:	2200      	movs	r2, #0
 8000932:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000934:	4b07      	ldr	r3, [pc, #28]	; (8000954 <MX_CRC_Init+0x3c>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_CRC_Init+0x3c>)
 800093c:	2201      	movs	r2, #1
 800093e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_CRC_Init+0x3c>)
 8000942:	f001 ff87 	bl	8002854 <HAL_CRC_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800094c:	f000 ffe1 	bl	8001912 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000438 	.word	0x20000438
 8000958:	58024c00 	.word	0x58024c00

0800095c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000960:	4b27      	ldr	r3, [pc, #156]	; (8000a00 <MX_SPI3_Init+0xa4>)
 8000962:	4a28      	ldr	r2, [pc, #160]	; (8000a04 <MX_SPI3_Init+0xa8>)
 8000964:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000966:	4b26      	ldr	r3, [pc, #152]	; (8000a00 <MX_SPI3_Init+0xa4>)
 8000968:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800096c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800096e:	4b24      	ldr	r3, [pc, #144]	; (8000a00 <MX_SPI3_Init+0xa4>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000974:	4b22      	ldr	r3, [pc, #136]	; (8000a00 <MX_SPI3_Init+0xa4>)
 8000976:	2203      	movs	r2, #3
 8000978:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800097a:	4b21      	ldr	r3, [pc, #132]	; (8000a00 <MX_SPI3_Init+0xa4>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000980:	4b1f      	ldr	r3, [pc, #124]	; (8000a00 <MX_SPI3_Init+0xa4>)
 8000982:	2200      	movs	r2, #0
 8000984:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000986:	4b1e      	ldr	r3, [pc, #120]	; (8000a00 <MX_SPI3_Init+0xa4>)
 8000988:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800098c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800098e:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <MX_SPI3_Init+0xa4>)
 8000990:	2200      	movs	r2, #0
 8000992:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000994:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <MX_SPI3_Init+0xa4>)
 8000996:	2200      	movs	r2, #0
 8000998:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800099a:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <MX_SPI3_Init+0xa4>)
 800099c:	2200      	movs	r2, #0
 800099e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009a0:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <MX_SPI3_Init+0xa4>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80009a6:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <MX_SPI3_Init+0xa4>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <MX_SPI3_Init+0xa4>)
 80009ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009b2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <MX_SPI3_Init+0xa4>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_SPI3_Init+0xa4>)
 80009bc:	2200      	movs	r2, #0
 80009be:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <MX_SPI3_Init+0xa4>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_SPI3_Init+0xa4>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_SPI3_Init+0xa4>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <MX_SPI3_Init+0xa4>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_SPI3_Init+0xa4>)
 80009da:	2200      	movs	r2, #0
 80009dc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <MX_SPI3_Init+0xa4>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_SPI3_Init+0xa4>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_SPI3_Init+0xa4>)
 80009ec:	f006 ff5c 	bl	80078a8 <HAL_SPI_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 80009f6:	f000 ff8c 	bl	8001912 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	2000057c 	.word	0x2000057c
 8000a04:	40003c00 	.word	0x40003c00

08000a08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b09a      	sub	sp, #104	; 0x68
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a1c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
 8000a38:	615a      	str	r2, [r3, #20]
 8000a3a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	222c      	movs	r2, #44	; 0x2c
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f00a f9f6 	bl	800ae34 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a48:	4b44      	ldr	r3, [pc, #272]	; (8000b5c <MX_TIM1_Init+0x154>)
 8000a4a:	4a45      	ldr	r2, [pc, #276]	; (8000b60 <MX_TIM1_Init+0x158>)
 8000a4c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 8000a4e:	4b43      	ldr	r3, [pc, #268]	; (8000b5c <MX_TIM1_Init+0x154>)
 8000a50:	22ef      	movs	r2, #239	; 0xef
 8000a52:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a54:	4b41      	ldr	r3, [pc, #260]	; (8000b5c <MX_TIM1_Init+0x154>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 625-1;
 8000a5a:	4b40      	ldr	r3, [pc, #256]	; (8000b5c <MX_TIM1_Init+0x154>)
 8000a5c:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000a60:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a62:	4b3e      	ldr	r3, [pc, #248]	; (8000b5c <MX_TIM1_Init+0x154>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a68:	4b3c      	ldr	r3, [pc, #240]	; (8000b5c <MX_TIM1_Init+0x154>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a6e:	4b3b      	ldr	r3, [pc, #236]	; (8000b5c <MX_TIM1_Init+0x154>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a74:	4839      	ldr	r0, [pc, #228]	; (8000b5c <MX_TIM1_Init+0x154>)
 8000a76:	f007 f834 	bl	8007ae2 <HAL_TIM_Base_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000a80:	f000 ff47 	bl	8001912 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a88:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4832      	ldr	r0, [pc, #200]	; (8000b5c <MX_TIM1_Init+0x154>)
 8000a92:	f007 fb0d 	bl	80080b0 <HAL_TIM_ConfigClockSource>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a9c:	f000 ff39 	bl	8001912 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000aa0:	482e      	ldr	r0, [pc, #184]	; (8000b5c <MX_TIM1_Init+0x154>)
 8000aa2:	f007 f875 	bl	8007b90 <HAL_TIM_PWM_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000aac:	f000 ff31 	bl	8001912 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000abc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4826      	ldr	r0, [pc, #152]	; (8000b5c <MX_TIM1_Init+0x154>)
 8000ac4:	f008 f816 	bl	8008af4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000ace:	f000 ff20 	bl	8001912 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ad2:	2360      	movs	r3, #96	; 0x60
 8000ad4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8000ad6:	f240 1339 	movw	r3, #313	; 0x139
 8000ada:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000adc:	2300      	movs	r3, #0
 8000ade:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000aec:	2300      	movs	r3, #0
 8000aee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000af0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000af4:	2204      	movs	r2, #4
 8000af6:	4619      	mov	r1, r3
 8000af8:	4818      	ldr	r0, [pc, #96]	; (8000b5c <MX_TIM1_Init+0x154>)
 8000afa:	f007 f9c9 	bl	8007e90 <HAL_TIM_PWM_ConfigChannel>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000b04:	f000 ff05 	bl	8001912 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b20:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4807      	ldr	r0, [pc, #28]	; (8000b5c <MX_TIM1_Init+0x154>)
 8000b3e:	f008 f861 	bl	8008c04 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000b48:	f000 fee3 	bl	8001912 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b4c:	4803      	ldr	r0, [pc, #12]	; (8000b5c <MX_TIM1_Init+0x154>)
 8000b4e:	f001 f847 	bl	8001be0 <HAL_TIM_MspPostInit>

}
 8000b52:	bf00      	nop
 8000b54:	3768      	adds	r7, #104	; 0x68
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200006a0 	.word	0x200006a0
 8000b60:	40010000 	.word	0x40010000

08000b64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08e      	sub	sp, #56	; 0x38
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b84:	463b      	mov	r3, r7
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]
 8000b92:	615a      	str	r2, [r3, #20]
 8000b94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b96:	4b2e      	ldr	r3, [pc, #184]	; (8000c50 <MX_TIM2_Init+0xec>)
 8000b98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b9c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 8000b9e:	4b2c      	ldr	r3, [pc, #176]	; (8000c50 <MX_TIM2_Init+0xec>)
 8000ba0:	22ef      	movs	r2, #239	; 0xef
 8000ba2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba4:	4b2a      	ldr	r3, [pc, #168]	; (8000c50 <MX_TIM2_Init+0xec>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625-1;
 8000baa:	4b29      	ldr	r3, [pc, #164]	; (8000c50 <MX_TIM2_Init+0xec>)
 8000bac:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000bb0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb2:	4b27      	ldr	r3, [pc, #156]	; (8000c50 <MX_TIM2_Init+0xec>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb8:	4b25      	ldr	r3, [pc, #148]	; (8000c50 <MX_TIM2_Init+0xec>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bbe:	4824      	ldr	r0, [pc, #144]	; (8000c50 <MX_TIM2_Init+0xec>)
 8000bc0:	f006 ff8f 	bl	8007ae2 <HAL_TIM_Base_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000bca:	f000 fea2 	bl	8001912 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bd8:	4619      	mov	r1, r3
 8000bda:	481d      	ldr	r0, [pc, #116]	; (8000c50 <MX_TIM2_Init+0xec>)
 8000bdc:	f007 fa68 	bl	80080b0 <HAL_TIM_ConfigClockSource>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000be6:	f000 fe94 	bl	8001912 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bea:	4819      	ldr	r0, [pc, #100]	; (8000c50 <MX_TIM2_Init+0xec>)
 8000bec:	f006 ffd0 	bl	8007b90 <HAL_TIM_PWM_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000bf6:	f000 fe8c 	bl	8001912 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	4619      	mov	r1, r3
 8000c08:	4811      	ldr	r0, [pc, #68]	; (8000c50 <MX_TIM2_Init+0xec>)
 8000c0a:	f007 ff73 	bl	8008af4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000c14:	f000 fe7d 	bl	8001912 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c18:	2360      	movs	r3, #96	; 0x60
 8000c1a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000c1c:	f240 1339 	movw	r3, #313	; 0x139
 8000c20:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c2a:	463b      	mov	r3, r7
 8000c2c:	2208      	movs	r2, #8
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4807      	ldr	r0, [pc, #28]	; (8000c50 <MX_TIM2_Init+0xec>)
 8000c32:	f007 f92d 	bl	8007e90 <HAL_TIM_PWM_ConfigChannel>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000c3c:	f000 fe69 	bl	8001912 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c40:	4803      	ldr	r0, [pc, #12]	; (8000c50 <MX_TIM2_Init+0xec>)
 8000c42:	f000 ffcd 	bl	8001be0 <HAL_TIM_MspPostInit>

}
 8000c46:	bf00      	nop
 8000c48:	3738      	adds	r7, #56	; 0x38
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000804 	.word	0x20000804

08000c54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08e      	sub	sp, #56	; 0x38
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c68:	f107 031c 	add.w	r3, r7, #28
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c74:	463b      	mov	r3, r7
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]
 8000c80:	611a      	str	r2, [r3, #16]
 8000c82:	615a      	str	r2, [r3, #20]
 8000c84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c86:	4b2d      	ldr	r3, [pc, #180]	; (8000d3c <MX_TIM3_Init+0xe8>)
 8000c88:	4a2d      	ldr	r2, [pc, #180]	; (8000d40 <MX_TIM3_Init+0xec>)
 8000c8a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 8000c8c:	4b2b      	ldr	r3, [pc, #172]	; (8000d3c <MX_TIM3_Init+0xe8>)
 8000c8e:	22ef      	movs	r2, #239	; 0xef
 8000c90:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c92:	4b2a      	ldr	r3, [pc, #168]	; (8000d3c <MX_TIM3_Init+0xe8>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 625-1;
 8000c98:	4b28      	ldr	r3, [pc, #160]	; (8000d3c <MX_TIM3_Init+0xe8>)
 8000c9a:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000c9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca0:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <MX_TIM3_Init+0xe8>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca6:	4b25      	ldr	r3, [pc, #148]	; (8000d3c <MX_TIM3_Init+0xe8>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cac:	4823      	ldr	r0, [pc, #140]	; (8000d3c <MX_TIM3_Init+0xe8>)
 8000cae:	f006 ff18 	bl	8007ae2 <HAL_TIM_Base_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000cb8:	f000 fe2b 	bl	8001912 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	481c      	ldr	r0, [pc, #112]	; (8000d3c <MX_TIM3_Init+0xe8>)
 8000cca:	f007 f9f1 	bl	80080b0 <HAL_TIM_ConfigClockSource>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000cd4:	f000 fe1d 	bl	8001912 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cd8:	4818      	ldr	r0, [pc, #96]	; (8000d3c <MX_TIM3_Init+0xe8>)
 8000cda:	f006 ff59 	bl	8007b90 <HAL_TIM_PWM_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000ce4:	f000 fe15 	bl	8001912 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cf0:	f107 031c 	add.w	r3, r7, #28
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4811      	ldr	r0, [pc, #68]	; (8000d3c <MX_TIM3_Init+0xe8>)
 8000cf8:	f007 fefc 	bl	8008af4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000d02:	f000 fe06 	bl	8001912 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d06:	2360      	movs	r3, #96	; 0x60
 8000d08:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000d0a:	f240 1339 	movw	r3, #313	; 0x139
 8000d0e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d18:	463b      	mov	r3, r7
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4807      	ldr	r0, [pc, #28]	; (8000d3c <MX_TIM3_Init+0xe8>)
 8000d20:	f007 f8b6 	bl	8007e90 <HAL_TIM_PWM_ConfigChannel>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000d2a:	f000 fdf2 	bl	8001912 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d2e:	4803      	ldr	r0, [pc, #12]	; (8000d3c <MX_TIM3_Init+0xe8>)
 8000d30:	f000 ff56 	bl	8001be0 <HAL_TIM_MspPostInit>

}
 8000d34:	bf00      	nop
 8000d36:	3738      	adds	r7, #56	; 0x38
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000530 	.word	0x20000530
 8000d40:	40000400 	.word	0x40000400

08000d44 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08e      	sub	sp, #56	; 0x38
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d58:	f107 031c 	add.w	r3, r7, #28
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d64:	463b      	mov	r3, r7
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
 8000d70:	611a      	str	r2, [r3, #16]
 8000d72:	615a      	str	r2, [r3, #20]
 8000d74:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d76:	4b2d      	ldr	r3, [pc, #180]	; (8000e2c <MX_TIM4_Init+0xe8>)
 8000d78:	4a2d      	ldr	r2, [pc, #180]	; (8000e30 <MX_TIM4_Init+0xec>)
 8000d7a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8000d7c:	4b2b      	ldr	r3, [pc, #172]	; (8000e2c <MX_TIM4_Init+0xe8>)
 8000d7e:	22ef      	movs	r2, #239	; 0xef
 8000d80:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d82:	4b2a      	ldr	r3, [pc, #168]	; (8000e2c <MX_TIM4_Init+0xe8>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 625-1;
 8000d88:	4b28      	ldr	r3, [pc, #160]	; (8000e2c <MX_TIM4_Init+0xe8>)
 8000d8a:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000d8e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d90:	4b26      	ldr	r3, [pc, #152]	; (8000e2c <MX_TIM4_Init+0xe8>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d96:	4b25      	ldr	r3, [pc, #148]	; (8000e2c <MX_TIM4_Init+0xe8>)
 8000d98:	2280      	movs	r2, #128	; 0x80
 8000d9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d9c:	4823      	ldr	r0, [pc, #140]	; (8000e2c <MX_TIM4_Init+0xe8>)
 8000d9e:	f006 fea0 	bl	8007ae2 <HAL_TIM_Base_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000da8:	f000 fdb3 	bl	8001912 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000db2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000db6:	4619      	mov	r1, r3
 8000db8:	481c      	ldr	r0, [pc, #112]	; (8000e2c <MX_TIM4_Init+0xe8>)
 8000dba:	f007 f979 	bl	80080b0 <HAL_TIM_ConfigClockSource>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000dc4:	f000 fda5 	bl	8001912 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000dc8:	4818      	ldr	r0, [pc, #96]	; (8000e2c <MX_TIM4_Init+0xe8>)
 8000dca:	f006 fee1 	bl	8007b90 <HAL_TIM_PWM_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000dd4:	f000 fd9d 	bl	8001912 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000de0:	f107 031c 	add.w	r3, r7, #28
 8000de4:	4619      	mov	r1, r3
 8000de6:	4811      	ldr	r0, [pc, #68]	; (8000e2c <MX_TIM4_Init+0xe8>)
 8000de8:	f007 fe84 	bl	8008af4 <HAL_TIMEx_MasterConfigSynchronization>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000df2:	f000 fd8e 	bl	8001912 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000df6:	2360      	movs	r3, #96	; 0x60
 8000df8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000dfa:	f240 1339 	movw	r3, #313	; 0x139
 8000dfe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e08:	463b      	mov	r3, r7
 8000e0a:	2208      	movs	r2, #8
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4807      	ldr	r0, [pc, #28]	; (8000e2c <MX_TIM4_Init+0xe8>)
 8000e10:	f007 f83e 	bl	8007e90 <HAL_TIM_PWM_ConfigChannel>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000e1a:	f000 fd7a 	bl	8001912 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e1e:	4803      	ldr	r0, [pc, #12]	; (8000e2c <MX_TIM4_Init+0xe8>)
 8000e20:	f000 fede 	bl	8001be0 <HAL_TIM_MspPostInit>

}
 8000e24:	bf00      	nop
 8000e26:	3738      	adds	r7, #56	; 0x38
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	2000020c 	.word	0x2000020c
 8000e30:	40000800 	.word	0x40000800

08000e34 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e3a:	f107 0310 	add.w	r3, r7, #16
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e52:	4b1d      	ldr	r3, [pc, #116]	; (8000ec8 <MX_TIM5_Init+0x94>)
 8000e54:	4a1d      	ldr	r2, [pc, #116]	; (8000ecc <MX_TIM5_Init+0x98>)
 8000e56:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 240-1;
 8000e58:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <MX_TIM5_Init+0x94>)
 8000e5a:	22ef      	movs	r2, #239	; 0xef
 8000e5c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <MX_TIM5_Init+0x94>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 500-1;
 8000e64:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <MX_TIM5_Init+0x94>)
 8000e66:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000e6a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e6c:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <MX_TIM5_Init+0x94>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <MX_TIM5_Init+0x94>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000e78:	4813      	ldr	r0, [pc, #76]	; (8000ec8 <MX_TIM5_Init+0x94>)
 8000e7a:	f006 fe32 	bl	8007ae2 <HAL_TIM_Base_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000e84:	f000 fd45 	bl	8001912 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000e8e:	f107 0310 	add.w	r3, r7, #16
 8000e92:	4619      	mov	r1, r3
 8000e94:	480c      	ldr	r0, [pc, #48]	; (8000ec8 <MX_TIM5_Init+0x94>)
 8000e96:	f007 f90b 	bl	80080b0 <HAL_TIM_ConfigClockSource>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000ea0:	f000 fd37 	bl	8001912 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <MX_TIM5_Init+0x94>)
 8000eb2:	f007 fe1f 	bl	8008af4 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000ebc:	f000 fd29 	bl	8001912 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	3720      	adds	r7, #32
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	200004e4 	.word	0x200004e4
 8000ecc:	40000c00 	.word	0x40000c00

08000ed0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000ee2:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <MX_TIM12_Init+0x6c>)
 8000ee4:	4a16      	ldr	r2, [pc, #88]	; (8000f40 <MX_TIM12_Init+0x70>)
 8000ee6:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 240-1;
 8000ee8:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <MX_TIM12_Init+0x6c>)
 8000eea:	22ef      	movs	r2, #239	; 0xef
 8000eec:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eee:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <MX_TIM12_Init+0x6c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 500-1;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <MX_TIM12_Init+0x6c>)
 8000ef6:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000efa:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <MX_TIM12_Init+0x6c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <MX_TIM12_Init+0x6c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000f08:	480c      	ldr	r0, [pc, #48]	; (8000f3c <MX_TIM12_Init+0x6c>)
 8000f0a:	f006 fdea 	bl	8007ae2 <HAL_TIM_Base_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8000f14:	f000 fcfd 	bl	8001912 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f1c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8000f1e:	463b      	mov	r3, r7
 8000f20:	4619      	mov	r1, r3
 8000f22:	4806      	ldr	r0, [pc, #24]	; (8000f3c <MX_TIM12_Init+0x6c>)
 8000f24:	f007 f8c4 	bl	80080b0 <HAL_TIM_ConfigClockSource>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8000f2e:	f000 fcf0 	bl	8001912 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000858 	.word	0x20000858
 8000f40:	40001800 	.word	0x40001800

08000f44 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b09a      	sub	sp, #104	; 0x68
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
 8000f74:	615a      	str	r2, [r3, #20]
 8000f76:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	222c      	movs	r2, #44	; 0x2c
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f009 ff58 	bl	800ae34 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000f84:	4b3f      	ldr	r3, [pc, #252]	; (8001084 <MX_TIM15_Init+0x140>)
 8000f86:	4a40      	ldr	r2, [pc, #256]	; (8001088 <MX_TIM15_Init+0x144>)
 8000f88:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8000f8a:	4b3e      	ldr	r3, [pc, #248]	; (8001084 <MX_TIM15_Init+0x140>)
 8000f8c:	22ef      	movs	r2, #239	; 0xef
 8000f8e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f90:	4b3c      	ldr	r3, [pc, #240]	; (8001084 <MX_TIM15_Init+0x140>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 625-1;
 8000f96:	4b3b      	ldr	r3, [pc, #236]	; (8001084 <MX_TIM15_Init+0x140>)
 8000f98:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000f9c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f9e:	4b39      	ldr	r3, [pc, #228]	; (8001084 <MX_TIM15_Init+0x140>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000fa4:	4b37      	ldr	r3, [pc, #220]	; (8001084 <MX_TIM15_Init+0x140>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000faa:	4b36      	ldr	r3, [pc, #216]	; (8001084 <MX_TIM15_Init+0x140>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000fb0:	4834      	ldr	r0, [pc, #208]	; (8001084 <MX_TIM15_Init+0x140>)
 8000fb2:	f006 fd96 	bl	8007ae2 <HAL_TIM_Base_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8000fbc:	f000 fca9 	bl	8001912 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000fc6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fca:	4619      	mov	r1, r3
 8000fcc:	482d      	ldr	r0, [pc, #180]	; (8001084 <MX_TIM15_Init+0x140>)
 8000fce:	f007 f86f 	bl	80080b0 <HAL_TIM_ConfigClockSource>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8000fd8:	f000 fc9b 	bl	8001912 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000fdc:	4829      	ldr	r0, [pc, #164]	; (8001084 <MX_TIM15_Init+0x140>)
 8000fde:	f006 fdd7 	bl	8007b90 <HAL_TIM_PWM_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8000fe8:	f000 fc93 	bl	8001912 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fec:	2300      	movs	r3, #0
 8000fee:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000ff4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4822      	ldr	r0, [pc, #136]	; (8001084 <MX_TIM15_Init+0x140>)
 8000ffc:	f007 fd7a 	bl	8008af4 <HAL_TIMEx_MasterConfigSynchronization>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8001006:	f000 fc84 	bl	8001912 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800100a:	2360      	movs	r3, #96	; 0x60
 800100c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 800100e:	f240 1339 	movw	r3, #313	; 0x139
 8001012:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001014:	2300      	movs	r3, #0
 8001016:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001018:	2300      	movs	r3, #0
 800101a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800101c:	2300      	movs	r3, #0
 800101e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001020:	2300      	movs	r3, #0
 8001022:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001024:	2300      	movs	r3, #0
 8001026:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001028:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800102c:	2204      	movs	r2, #4
 800102e:	4619      	mov	r1, r3
 8001030:	4814      	ldr	r0, [pc, #80]	; (8001084 <MX_TIM15_Init+0x140>)
 8001032:	f006 ff2d 	bl	8007e90 <HAL_TIM_PWM_ConfigChannel>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 800103c:	f000 fc69 	bl	8001912 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001040:	2300      	movs	r3, #0
 8001042:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001044:	2300      	movs	r3, #0
 8001046:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001054:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001058:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800105e:	2300      	movs	r3, #0
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	4619      	mov	r1, r3
 8001066:	4807      	ldr	r0, [pc, #28]	; (8001084 <MX_TIM15_Init+0x140>)
 8001068:	f007 fdcc 	bl	8008c04 <HAL_TIMEx_ConfigBreakDeadTime>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8001072:	f000 fc4e 	bl	8001912 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001076:	4803      	ldr	r0, [pc, #12]	; (8001084 <MX_TIM15_Init+0x140>)
 8001078:	f000 fdb2 	bl	8001be0 <HAL_TIM_MspPostInit>

}
 800107c:	bf00      	nop
 800107e:	3768      	adds	r7, #104	; 0x68
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	200003e0 	.word	0x200003e0
 8001088:	40014000 	.word	0x40014000

0800108c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001090:	4b23      	ldr	r3, [pc, #140]	; (8001120 <MX_UART4_Init+0x94>)
 8001092:	4a24      	ldr	r2, [pc, #144]	; (8001124 <MX_UART4_Init+0x98>)
 8001094:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 8001096:	4b22      	ldr	r3, [pc, #136]	; (8001120 <MX_UART4_Init+0x94>)
 8001098:	4a23      	ldr	r2, [pc, #140]	; (8001128 <MX_UART4_Init+0x9c>)
 800109a:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800109c:	4b20      	ldr	r3, [pc, #128]	; (8001120 <MX_UART4_Init+0x94>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80010a2:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <MX_UART4_Init+0x94>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80010a8:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <MX_UART4_Init+0x94>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80010ae:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <MX_UART4_Init+0x94>)
 80010b0:	220c      	movs	r2, #12
 80010b2:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b4:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <MX_UART4_Init+0x94>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ba:	4b19      	ldr	r3, [pc, #100]	; (8001120 <MX_UART4_Init+0x94>)
 80010bc:	2200      	movs	r2, #0
 80010be:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010c0:	4b17      	ldr	r3, [pc, #92]	; (8001120 <MX_UART4_Init+0x94>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <MX_UART4_Init+0x94>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010cc:	4b14      	ldr	r3, [pc, #80]	; (8001120 <MX_UART4_Init+0x94>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart4, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80010d2:	2300      	movs	r3, #0
 80010d4:	2200      	movs	r2, #0
 80010d6:	2100      	movs	r1, #0
 80010d8:	4811      	ldr	r0, [pc, #68]	; (8001120 <MX_UART4_Init+0x94>)
 80010da:	f009 fcf5 	bl	800aac8 <HAL_RS485Ex_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_UART4_Init+0x5c>
  {
    Error_Handler();
 80010e4:	f000 fc15 	bl	8001912 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010e8:	2100      	movs	r1, #0
 80010ea:	480d      	ldr	r0, [pc, #52]	; (8001120 <MX_UART4_Init+0x94>)
 80010ec:	f009 fdad 	bl	800ac4a <HAL_UARTEx_SetTxFifoThreshold>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_UART4_Init+0x6e>
  {
    Error_Handler();
 80010f6:	f000 fc0c 	bl	8001912 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010fa:	2100      	movs	r1, #0
 80010fc:	4808      	ldr	r0, [pc, #32]	; (8001120 <MX_UART4_Init+0x94>)
 80010fe:	f009 fde2 	bl	800acc6 <HAL_UARTEx_SetRxFifoThreshold>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_UART4_Init+0x80>
  {
    Error_Handler();
 8001108:	f000 fc03 	bl	8001912 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800110c:	4804      	ldr	r0, [pc, #16]	; (8001120 <MX_UART4_Init+0x94>)
 800110e:	f009 fd63 	bl	800abd8 <HAL_UARTEx_DisableFifoMode>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_UART4_Init+0x90>
  {
    Error_Handler();
 8001118:	f000 fbfb 	bl	8001912 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200006ec 	.word	0x200006ec
 8001124:	40004c00 	.word	0x40004c00
 8001128:	001e8480 	.word	0x001e8480

0800112c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001130:	4b22      	ldr	r3, [pc, #136]	; (80011bc <MX_USART3_UART_Init+0x90>)
 8001132:	4a23      	ldr	r2, [pc, #140]	; (80011c0 <MX_USART3_UART_Init+0x94>)
 8001134:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001136:	4b21      	ldr	r3, [pc, #132]	; (80011bc <MX_USART3_UART_Init+0x90>)
 8001138:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800113c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800113e:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <MX_USART3_UART_Init+0x90>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001144:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <MX_USART3_UART_Init+0x90>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800114a:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <MX_USART3_UART_Init+0x90>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001150:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <MX_USART3_UART_Init+0x90>)
 8001152:	220c      	movs	r2, #12
 8001154:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001156:	4b19      	ldr	r3, [pc, #100]	; (80011bc <MX_USART3_UART_Init+0x90>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800115c:	4b17      	ldr	r3, [pc, #92]	; (80011bc <MX_USART3_UART_Init+0x90>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001162:	4b16      	ldr	r3, [pc, #88]	; (80011bc <MX_USART3_UART_Init+0x90>)
 8001164:	2200      	movs	r2, #0
 8001166:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001168:	4b14      	ldr	r3, [pc, #80]	; (80011bc <MX_USART3_UART_Init+0x90>)
 800116a:	2200      	movs	r2, #0
 800116c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800116e:	4b13      	ldr	r3, [pc, #76]	; (80011bc <MX_USART3_UART_Init+0x90>)
 8001170:	2200      	movs	r2, #0
 8001172:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001174:	4811      	ldr	r0, [pc, #68]	; (80011bc <MX_USART3_UART_Init+0x90>)
 8001176:	f007 fde1 	bl	8008d3c <HAL_UART_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001180:	f000 fbc7 	bl	8001912 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001184:	2100      	movs	r1, #0
 8001186:	480d      	ldr	r0, [pc, #52]	; (80011bc <MX_USART3_UART_Init+0x90>)
 8001188:	f009 fd5f 	bl	800ac4a <HAL_UARTEx_SetTxFifoThreshold>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001192:	f000 fbbe 	bl	8001912 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001196:	2100      	movs	r1, #0
 8001198:	4808      	ldr	r0, [pc, #32]	; (80011bc <MX_USART3_UART_Init+0x90>)
 800119a:	f009 fd94 	bl	800acc6 <HAL_UARTEx_SetRxFifoThreshold>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80011a4:	f000 fbb5 	bl	8001912 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80011a8:	4804      	ldr	r0, [pc, #16]	; (80011bc <MX_USART3_UART_Init+0x90>)
 80011aa:	f009 fd15 	bl	800abd8 <HAL_UARTEx_DisableFifoMode>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80011b4:	f000 fbad 	bl	8001912 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200002d0 	.word	0x200002d0
 80011c0:	40004800 	.word	0x40004800

080011c4 <MX_DMA_Init>:
  *   hdma_memtomem_dma2_stream3
  *   hdma_memtomem_dma2_stream4
  *   hdma_memtomem_dma2_stream5
  */
static void MX_DMA_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011ca:	4b9b      	ldr	r3, [pc, #620]	; (8001438 <MX_DMA_Init+0x274>)
 80011cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011d0:	4a99      	ldr	r2, [pc, #612]	; (8001438 <MX_DMA_Init+0x274>)
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011da:	4b97      	ldr	r3, [pc, #604]	; (8001438 <MX_DMA_Init+0x274>)
 80011dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011e8:	4b93      	ldr	r3, [pc, #588]	; (8001438 <MX_DMA_Init+0x274>)
 80011ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011ee:	4a92      	ldr	r2, [pc, #584]	; (8001438 <MX_DMA_Init+0x274>)
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011f8:	4b8f      	ldr	r3, [pc, #572]	; (8001438 <MX_DMA_Init+0x274>)
 80011fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_stream3 on DMA1_Stream3 */
  hdma_memtomem_dma1_stream3.Instance = DMA1_Stream3;
 8001206:	4b8d      	ldr	r3, [pc, #564]	; (800143c <MX_DMA_Init+0x278>)
 8001208:	4a8d      	ldr	r2, [pc, #564]	; (8001440 <MX_DMA_Init+0x27c>)
 800120a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_stream3.Init.Request = DMA_REQUEST_MEM2MEM;
 800120c:	4b8b      	ldr	r3, [pc, #556]	; (800143c <MX_DMA_Init+0x278>)
 800120e:	2200      	movs	r2, #0
 8001210:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_stream3.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001212:	4b8a      	ldr	r3, [pc, #552]	; (800143c <MX_DMA_Init+0x278>)
 8001214:	2280      	movs	r2, #128	; 0x80
 8001216:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_stream3.Init.PeriphInc = DMA_PINC_ENABLE;
 8001218:	4b88      	ldr	r3, [pc, #544]	; (800143c <MX_DMA_Init+0x278>)
 800121a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800121e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_stream3.Init.MemInc = DMA_MINC_ENABLE;
 8001220:	4b86      	ldr	r3, [pc, #536]	; (800143c <MX_DMA_Init+0x278>)
 8001222:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001226:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_stream3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001228:	4b84      	ldr	r3, [pc, #528]	; (800143c <MX_DMA_Init+0x278>)
 800122a:	2200      	movs	r2, #0
 800122c:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_stream3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800122e:	4b83      	ldr	r3, [pc, #524]	; (800143c <MX_DMA_Init+0x278>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_stream3.Init.Mode = DMA_NORMAL;
 8001234:	4b81      	ldr	r3, [pc, #516]	; (800143c <MX_DMA_Init+0x278>)
 8001236:	2200      	movs	r2, #0
 8001238:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_stream3.Init.Priority = DMA_PRIORITY_LOW;
 800123a:	4b80      	ldr	r3, [pc, #512]	; (800143c <MX_DMA_Init+0x278>)
 800123c:	2200      	movs	r2, #0
 800123e:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma1_stream3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001240:	4b7e      	ldr	r3, [pc, #504]	; (800143c <MX_DMA_Init+0x278>)
 8001242:	2204      	movs	r2, #4
 8001244:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma1_stream3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001246:	4b7d      	ldr	r3, [pc, #500]	; (800143c <MX_DMA_Init+0x278>)
 8001248:	2203      	movs	r2, #3
 800124a:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma1_stream3.Init.MemBurst = DMA_MBURST_SINGLE;
 800124c:	4b7b      	ldr	r3, [pc, #492]	; (800143c <MX_DMA_Init+0x278>)
 800124e:	2200      	movs	r2, #0
 8001250:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma1_stream3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001252:	4b7a      	ldr	r3, [pc, #488]	; (800143c <MX_DMA_Init+0x278>)
 8001254:	2200      	movs	r2, #0
 8001256:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma1_stream3) != HAL_OK)
 8001258:	4878      	ldr	r0, [pc, #480]	; (800143c <MX_DMA_Init+0x278>)
 800125a:	f001 fbe5 	bl	8002a28 <HAL_DMA_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_DMA_Init+0xa4>
  {
    Error_Handler( );
 8001264:	f000 fb55 	bl	8001912 <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream2 on DMA2_Stream2 */
  hdma_memtomem_dma2_stream2.Instance = DMA2_Stream2;
 8001268:	4b76      	ldr	r3, [pc, #472]	; (8001444 <MX_DMA_Init+0x280>)
 800126a:	4a77      	ldr	r2, [pc, #476]	; (8001448 <MX_DMA_Init+0x284>)
 800126c:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream2.Init.Request = DMA_REQUEST_MEM2MEM;
 800126e:	4b75      	ldr	r3, [pc, #468]	; (8001444 <MX_DMA_Init+0x280>)
 8001270:	2200      	movs	r2, #0
 8001272:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001274:	4b73      	ldr	r3, [pc, #460]	; (8001444 <MX_DMA_Init+0x280>)
 8001276:	2280      	movs	r2, #128	; 0x80
 8001278:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream2.Init.PeriphInc = DMA_PINC_ENABLE;
 800127a:	4b72      	ldr	r3, [pc, #456]	; (8001444 <MX_DMA_Init+0x280>)
 800127c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001280:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream2.Init.MemInc = DMA_MINC_ENABLE;
 8001282:	4b70      	ldr	r3, [pc, #448]	; (8001444 <MX_DMA_Init+0x280>)
 8001284:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001288:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800128a:	4b6e      	ldr	r3, [pc, #440]	; (8001444 <MX_DMA_Init+0x280>)
 800128c:	2200      	movs	r2, #0
 800128e:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001290:	4b6c      	ldr	r3, [pc, #432]	; (8001444 <MX_DMA_Init+0x280>)
 8001292:	2200      	movs	r2, #0
 8001294:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream2.Init.Mode = DMA_NORMAL;
 8001296:	4b6b      	ldr	r3, [pc, #428]	; (8001444 <MX_DMA_Init+0x280>)
 8001298:	2200      	movs	r2, #0
 800129a:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream2.Init.Priority = DMA_PRIORITY_LOW;
 800129c:	4b69      	ldr	r3, [pc, #420]	; (8001444 <MX_DMA_Init+0x280>)
 800129e:	2200      	movs	r2, #0
 80012a0:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80012a2:	4b68      	ldr	r3, [pc, #416]	; (8001444 <MX_DMA_Init+0x280>)
 80012a4:	2204      	movs	r2, #4
 80012a6:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <MX_DMA_Init+0x280>)
 80012aa:	2203      	movs	r2, #3
 80012ac:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream2.Init.MemBurst = DMA_MBURST_SINGLE;
 80012ae:	4b65      	ldr	r3, [pc, #404]	; (8001444 <MX_DMA_Init+0x280>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80012b4:	4b63      	ldr	r3, [pc, #396]	; (8001444 <MX_DMA_Init+0x280>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream2) != HAL_OK)
 80012ba:	4862      	ldr	r0, [pc, #392]	; (8001444 <MX_DMA_Init+0x280>)
 80012bc:	f001 fbb4 	bl	8002a28 <HAL_DMA_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_DMA_Init+0x106>
  {
    Error_Handler( );
 80012c6:	f000 fb24 	bl	8001912 <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream3 on DMA2_Stream3 */
  hdma_memtomem_dma2_stream3.Instance = DMA2_Stream3;
 80012ca:	4b60      	ldr	r3, [pc, #384]	; (800144c <MX_DMA_Init+0x288>)
 80012cc:	4a60      	ldr	r2, [pc, #384]	; (8001450 <MX_DMA_Init+0x28c>)
 80012ce:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream3.Init.Request = DMA_REQUEST_MEM2MEM;
 80012d0:	4b5e      	ldr	r3, [pc, #376]	; (800144c <MX_DMA_Init+0x288>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream3.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80012d6:	4b5d      	ldr	r3, [pc, #372]	; (800144c <MX_DMA_Init+0x288>)
 80012d8:	2280      	movs	r2, #128	; 0x80
 80012da:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream3.Init.PeriphInc = DMA_PINC_ENABLE;
 80012dc:	4b5b      	ldr	r3, [pc, #364]	; (800144c <MX_DMA_Init+0x288>)
 80012de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e2:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream3.Init.MemInc = DMA_MINC_ENABLE;
 80012e4:	4b59      	ldr	r3, [pc, #356]	; (800144c <MX_DMA_Init+0x288>)
 80012e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ea:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012ec:	4b57      	ldr	r3, [pc, #348]	; (800144c <MX_DMA_Init+0x288>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012f2:	4b56      	ldr	r3, [pc, #344]	; (800144c <MX_DMA_Init+0x288>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream3.Init.Mode = DMA_NORMAL;
 80012f8:	4b54      	ldr	r3, [pc, #336]	; (800144c <MX_DMA_Init+0x288>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream3.Init.Priority = DMA_PRIORITY_LOW;
 80012fe:	4b53      	ldr	r3, [pc, #332]	; (800144c <MX_DMA_Init+0x288>)
 8001300:	2200      	movs	r2, #0
 8001302:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001304:	4b51      	ldr	r3, [pc, #324]	; (800144c <MX_DMA_Init+0x288>)
 8001306:	2204      	movs	r2, #4
 8001308:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800130a:	4b50      	ldr	r3, [pc, #320]	; (800144c <MX_DMA_Init+0x288>)
 800130c:	2203      	movs	r2, #3
 800130e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream3.Init.MemBurst = DMA_MBURST_SINGLE;
 8001310:	4b4e      	ldr	r3, [pc, #312]	; (800144c <MX_DMA_Init+0x288>)
 8001312:	2200      	movs	r2, #0
 8001314:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001316:	4b4d      	ldr	r3, [pc, #308]	; (800144c <MX_DMA_Init+0x288>)
 8001318:	2200      	movs	r2, #0
 800131a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream3) != HAL_OK)
 800131c:	484b      	ldr	r0, [pc, #300]	; (800144c <MX_DMA_Init+0x288>)
 800131e:	f001 fb83 	bl	8002a28 <HAL_DMA_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_DMA_Init+0x168>
  {
    Error_Handler( );
 8001328:	f000 faf3 	bl	8001912 <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream4 on DMA2_Stream4 */
  hdma_memtomem_dma2_stream4.Instance = DMA2_Stream4;
 800132c:	4b49      	ldr	r3, [pc, #292]	; (8001454 <MX_DMA_Init+0x290>)
 800132e:	4a4a      	ldr	r2, [pc, #296]	; (8001458 <MX_DMA_Init+0x294>)
 8001330:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream4.Init.Request = DMA_REQUEST_MEM2MEM;
 8001332:	4b48      	ldr	r3, [pc, #288]	; (8001454 <MX_DMA_Init+0x290>)
 8001334:	2200      	movs	r2, #0
 8001336:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream4.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001338:	4b46      	ldr	r3, [pc, #280]	; (8001454 <MX_DMA_Init+0x290>)
 800133a:	2280      	movs	r2, #128	; 0x80
 800133c:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream4.Init.PeriphInc = DMA_PINC_ENABLE;
 800133e:	4b45      	ldr	r3, [pc, #276]	; (8001454 <MX_DMA_Init+0x290>)
 8001340:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001344:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream4.Init.MemInc = DMA_MINC_ENABLE;
 8001346:	4b43      	ldr	r3, [pc, #268]	; (8001454 <MX_DMA_Init+0x290>)
 8001348:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800134c:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream4.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800134e:	4b41      	ldr	r3, [pc, #260]	; (8001454 <MX_DMA_Init+0x290>)
 8001350:	2200      	movs	r2, #0
 8001352:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001354:	4b3f      	ldr	r3, [pc, #252]	; (8001454 <MX_DMA_Init+0x290>)
 8001356:	2200      	movs	r2, #0
 8001358:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream4.Init.Mode = DMA_NORMAL;
 800135a:	4b3e      	ldr	r3, [pc, #248]	; (8001454 <MX_DMA_Init+0x290>)
 800135c:	2200      	movs	r2, #0
 800135e:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream4.Init.Priority = DMA_PRIORITY_LOW;
 8001360:	4b3c      	ldr	r3, [pc, #240]	; (8001454 <MX_DMA_Init+0x290>)
 8001362:	2200      	movs	r2, #0
 8001364:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001366:	4b3b      	ldr	r3, [pc, #236]	; (8001454 <MX_DMA_Init+0x290>)
 8001368:	2204      	movs	r2, #4
 800136a:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800136c:	4b39      	ldr	r3, [pc, #228]	; (8001454 <MX_DMA_Init+0x290>)
 800136e:	2203      	movs	r2, #3
 8001370:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream4.Init.MemBurst = DMA_MBURST_SINGLE;
 8001372:	4b38      	ldr	r3, [pc, #224]	; (8001454 <MX_DMA_Init+0x290>)
 8001374:	2200      	movs	r2, #0
 8001376:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001378:	4b36      	ldr	r3, [pc, #216]	; (8001454 <MX_DMA_Init+0x290>)
 800137a:	2200      	movs	r2, #0
 800137c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream4) != HAL_OK)
 800137e:	4835      	ldr	r0, [pc, #212]	; (8001454 <MX_DMA_Init+0x290>)
 8001380:	f001 fb52 	bl	8002a28 <HAL_DMA_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_DMA_Init+0x1ca>
  {
    Error_Handler( );
 800138a:	f000 fac2 	bl	8001912 <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream5 on DMA2_Stream5 */
  hdma_memtomem_dma2_stream5.Instance = DMA2_Stream5;
 800138e:	4b33      	ldr	r3, [pc, #204]	; (800145c <MX_DMA_Init+0x298>)
 8001390:	4a33      	ldr	r2, [pc, #204]	; (8001460 <MX_DMA_Init+0x29c>)
 8001392:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream5.Init.Request = DMA_REQUEST_MEM2MEM;
 8001394:	4b31      	ldr	r3, [pc, #196]	; (800145c <MX_DMA_Init+0x298>)
 8001396:	2200      	movs	r2, #0
 8001398:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream5.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800139a:	4b30      	ldr	r3, [pc, #192]	; (800145c <MX_DMA_Init+0x298>)
 800139c:	2280      	movs	r2, #128	; 0x80
 800139e:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream5.Init.PeriphInc = DMA_PINC_ENABLE;
 80013a0:	4b2e      	ldr	r3, [pc, #184]	; (800145c <MX_DMA_Init+0x298>)
 80013a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013a6:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream5.Init.MemInc = DMA_MINC_ENABLE;
 80013a8:	4b2c      	ldr	r3, [pc, #176]	; (800145c <MX_DMA_Init+0x298>)
 80013aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ae:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream5.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013b0:	4b2a      	ldr	r3, [pc, #168]	; (800145c <MX_DMA_Init+0x298>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream5.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013b6:	4b29      	ldr	r3, [pc, #164]	; (800145c <MX_DMA_Init+0x298>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream5.Init.Mode = DMA_NORMAL;
 80013bc:	4b27      	ldr	r3, [pc, #156]	; (800145c <MX_DMA_Init+0x298>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream5.Init.Priority = DMA_PRIORITY_LOW;
 80013c2:	4b26      	ldr	r3, [pc, #152]	; (800145c <MX_DMA_Init+0x298>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream5.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80013c8:	4b24      	ldr	r3, [pc, #144]	; (800145c <MX_DMA_Init+0x298>)
 80013ca:	2204      	movs	r2, #4
 80013cc:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream5.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80013ce:	4b23      	ldr	r3, [pc, #140]	; (800145c <MX_DMA_Init+0x298>)
 80013d0:	2203      	movs	r2, #3
 80013d2:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream5.Init.MemBurst = DMA_MBURST_SINGLE;
 80013d4:	4b21      	ldr	r3, [pc, #132]	; (800145c <MX_DMA_Init+0x298>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream5.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80013da:	4b20      	ldr	r3, [pc, #128]	; (800145c <MX_DMA_Init+0x298>)
 80013dc:	2200      	movs	r2, #0
 80013de:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream5) != HAL_OK)
 80013e0:	481e      	ldr	r0, [pc, #120]	; (800145c <MX_DMA_Init+0x298>)
 80013e2:	f001 fb21 	bl	8002a28 <HAL_DMA_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_DMA_Init+0x22c>
  {
    Error_Handler( );
 80013ec:	f000 fa91 	bl	8001912 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2100      	movs	r1, #0
 80013f4:	200c      	movs	r0, #12
 80013f6:	f001 f9f8 	bl	80027ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80013fa:	200c      	movs	r0, #12
 80013fc:	f001 fa0f 	bl	800281e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001400:	2200      	movs	r2, #0
 8001402:	2100      	movs	r1, #0
 8001404:	200d      	movs	r0, #13
 8001406:	f001 f9f0 	bl	80027ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800140a:	200d      	movs	r0, #13
 800140c:	f001 fa07 	bl	800281e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001410:	2200      	movs	r2, #0
 8001412:	2100      	movs	r1, #0
 8001414:	2038      	movs	r0, #56	; 0x38
 8001416:	f001 f9e8 	bl	80027ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800141a:	2038      	movs	r0, #56	; 0x38
 800141c:	f001 f9ff 	bl	800281e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001420:	2200      	movs	r2, #0
 8001422:	2100      	movs	r1, #0
 8001424:	2039      	movs	r0, #57	; 0x39
 8001426:	f001 f9e0 	bl	80027ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800142a:	2039      	movs	r0, #57	; 0x39
 800142c:	f001 f9f7 	bl	800281e <HAL_NVIC_EnableIRQ>

}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	58024400 	.word	0x58024400
 800143c:	20000360 	.word	0x20000360
 8001440:	40020058 	.word	0x40020058
 8001444:	20000788 	.word	0x20000788
 8001448:	40020440 	.word	0x40020440
 800144c:	20000604 	.word	0x20000604
 8001450:	40020458 	.word	0x40020458
 8001454:	200000a4 	.word	0x200000a4
 8001458:	40020470 	.word	0x40020470
 800145c:	2000011c 	.word	0x2000011c
 8001460:	40020488 	.word	0x40020488

08001464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08c      	sub	sp, #48	; 0x30
 8001468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146a:	f107 031c 	add.w	r3, r7, #28
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800147a:	4b7b      	ldr	r3, [pc, #492]	; (8001668 <MX_GPIO_Init+0x204>)
 800147c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001480:	4a79      	ldr	r2, [pc, #484]	; (8001668 <MX_GPIO_Init+0x204>)
 8001482:	f043 0310 	orr.w	r3, r3, #16
 8001486:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800148a:	4b77      	ldr	r3, [pc, #476]	; (8001668 <MX_GPIO_Init+0x204>)
 800148c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001490:	f003 0310 	and.w	r3, r3, #16
 8001494:	61bb      	str	r3, [r7, #24]
 8001496:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001498:	4b73      	ldr	r3, [pc, #460]	; (8001668 <MX_GPIO_Init+0x204>)
 800149a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149e:	4a72      	ldr	r2, [pc, #456]	; (8001668 <MX_GPIO_Init+0x204>)
 80014a0:	f043 0304 	orr.w	r3, r3, #4
 80014a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a8:	4b6f      	ldr	r3, [pc, #444]	; (8001668 <MX_GPIO_Init+0x204>)
 80014aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ae:	f003 0304 	and.w	r3, r3, #4
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b6:	4b6c      	ldr	r3, [pc, #432]	; (8001668 <MX_GPIO_Init+0x204>)
 80014b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014bc:	4a6a      	ldr	r2, [pc, #424]	; (8001668 <MX_GPIO_Init+0x204>)
 80014be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c6:	4b68      	ldr	r3, [pc, #416]	; (8001668 <MX_GPIO_Init+0x204>)
 80014c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d4:	4b64      	ldr	r3, [pc, #400]	; (8001668 <MX_GPIO_Init+0x204>)
 80014d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014da:	4a63      	ldr	r2, [pc, #396]	; (8001668 <MX_GPIO_Init+0x204>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e4:	4b60      	ldr	r3, [pc, #384]	; (8001668 <MX_GPIO_Init+0x204>)
 80014e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f2:	4b5d      	ldr	r3, [pc, #372]	; (8001668 <MX_GPIO_Init+0x204>)
 80014f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f8:	4a5b      	ldr	r2, [pc, #364]	; (8001668 <MX_GPIO_Init+0x204>)
 80014fa:	f043 0302 	orr.w	r3, r3, #2
 80014fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001502:	4b59      	ldr	r3, [pc, #356]	; (8001668 <MX_GPIO_Init+0x204>)
 8001504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001510:	4b55      	ldr	r3, [pc, #340]	; (8001668 <MX_GPIO_Init+0x204>)
 8001512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001516:	4a54      	ldr	r2, [pc, #336]	; (8001668 <MX_GPIO_Init+0x204>)
 8001518:	f043 0308 	orr.w	r3, r3, #8
 800151c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001520:	4b51      	ldr	r3, [pc, #324]	; (8001668 <MX_GPIO_Init+0x204>)
 8001522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001526:	f003 0308 	and.w	r3, r3, #8
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800152e:	4b4e      	ldr	r3, [pc, #312]	; (8001668 <MX_GPIO_Init+0x204>)
 8001530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001534:	4a4c      	ldr	r2, [pc, #304]	; (8001668 <MX_GPIO_Init+0x204>)
 8001536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800153a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800153e:	4b4a      	ldr	r3, [pc, #296]	; (8001668 <MX_GPIO_Init+0x204>)
 8001540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001548:	603b      	str	r3, [r7, #0]
 800154a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 800154c:	2200      	movs	r2, #0
 800154e:	f644 2121 	movw	r1, #18977	; 0x4a21
 8001552:	4846      	ldr	r0, [pc, #280]	; (800166c <MX_GPIO_Init+0x208>)
 8001554:	f003 fe3c 	bl	80051d0 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001558:	2200      	movs	r2, #0
 800155a:	f24c 0102 	movw	r1, #49154	; 0xc002
 800155e:	4844      	ldr	r0, [pc, #272]	; (8001670 <MX_GPIO_Init+0x20c>)
 8001560:	f003 fe36 	bl	80051d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001564:	2200      	movs	r2, #0
 8001566:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800156a:	4842      	ldr	r0, [pc, #264]	; (8001674 <MX_GPIO_Init+0x210>)
 800156c:	f003 fe30 	bl	80051d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001570:	2200      	movs	r2, #0
 8001572:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001576:	4840      	ldr	r0, [pc, #256]	; (8001678 <MX_GPIO_Init+0x214>)
 8001578:	f003 fe2a 	bl	80051d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin DIR_2_Pin LD3_Pin DIR_3_Pin
                           DIR_4_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 800157c:	f644 2321 	movw	r3, #18977	; 0x4a21
 8001580:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001582:	2301      	movs	r3, #1
 8001584:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158a:	2300      	movs	r3, #0
 800158c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158e:	f107 031c 	add.w	r3, r7, #28
 8001592:	4619      	mov	r1, r3
 8001594:	4835      	ldr	r0, [pc, #212]	; (800166c <MX_GPIO_Init+0x208>)
 8001596:	f003 fc6b 	bl	8004e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM2_Pin LM1_Pin LM6_Pin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin|LM6_Pin;
 800159a:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 800159e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015a0:	4b36      	ldr	r3, [pc, #216]	; (800167c <MX_GPIO_Init+0x218>)
 80015a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015a8:	f107 031c 	add.w	r3, r7, #28
 80015ac:	4619      	mov	r1, r3
 80015ae:	4830      	ldr	r0, [pc, #192]	; (8001670 <MX_GPIO_Init+0x20c>)
 80015b0:	f003 fc5e 	bl	8004e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_1_Pin DIR_5_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 80015b4:	f24c 0302 	movw	r3, #49154	; 0xc002
 80015b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ba:	2301      	movs	r3, #1
 80015bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c2:	2300      	movs	r3, #0
 80015c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015c6:	f107 031c 	add.w	r3, r7, #28
 80015ca:	4619      	mov	r1, r3
 80015cc:	4828      	ldr	r0, [pc, #160]	; (8001670 <MX_GPIO_Init+0x20c>)
 80015ce:	f003 fc4f 	bl	8004e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80015d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d8:	2301      	movs	r3, #1
 80015da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80015e4:	f107 031c 	add.w	r3, r7, #28
 80015e8:	4619      	mov	r1, r3
 80015ea:	4822      	ldr	r0, [pc, #136]	; (8001674 <MX_GPIO_Init+0x210>)
 80015ec:	f003 fc40 	bl	8004e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 80015f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f6:	2301      	movs	r3, #1
 80015f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	4619      	mov	r1, r3
 8001608:	481b      	ldr	r0, [pc, #108]	; (8001678 <MX_GPIO_Init+0x214>)
 800160a:	f003 fc31 	bl	8004e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM5_Pin */
  GPIO_InitStruct.Pin = LM5_Pin;
 800160e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001614:	4b19      	ldr	r3, [pc, #100]	; (800167c <MX_GPIO_Init+0x218>)
 8001616:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 800161c:	f107 031c 	add.w	r3, r7, #28
 8001620:	4619      	mov	r1, r3
 8001622:	4817      	ldr	r0, [pc, #92]	; (8001680 <MX_GPIO_Init+0x21c>)
 8001624:	f003 fc24 	bl	8004e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM4_Pin LM3_Pin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 8001628:	23c0      	movs	r3, #192	; 0xc0
 800162a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800162c:	4b13      	ldr	r3, [pc, #76]	; (800167c <MX_GPIO_Init+0x218>)
 800162e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001634:	f107 031c 	add.w	r3, r7, #28
 8001638:	4619      	mov	r1, r3
 800163a:	480c      	ldr	r0, [pc, #48]	; (800166c <MX_GPIO_Init+0x208>)
 800163c:	f003 fc18 	bl	8004e70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8001640:	2200      	movs	r2, #0
 8001642:	2103      	movs	r1, #3
 8001644:	2017      	movs	r0, #23
 8001646:	f001 f8d0 	bl	80027ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800164a:	2017      	movs	r0, #23
 800164c:	f001 f8e7 	bl	800281e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001650:	2200      	movs	r2, #0
 8001652:	2103      	movs	r1, #3
 8001654:	2028      	movs	r0, #40	; 0x28
 8001656:	f001 f8c8 	bl	80027ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800165a:	2028      	movs	r0, #40	; 0x28
 800165c:	f001 f8df 	bl	800281e <HAL_NVIC_EnableIRQ>

}
 8001660:	bf00      	nop
 8001662:	3730      	adds	r7, #48	; 0x30
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	58024400 	.word	0x58024400
 800166c:	58020400 	.word	0x58020400
 8001670:	58021000 	.word	0x58021000
 8001674:	58020c00 	.word	0x58020c00
 8001678:	58020800 	.word	0x58020800
 800167c:	11110000 	.word	0x11110000
 8001680:	58021800 	.word	0x58021800

08001684 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART2 and Loop until the end of transmission */
 HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 800168c:	1d39      	adds	r1, r7, #4
 800168e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001692:	2201      	movs	r2, #1
 8001694:	4803      	ldr	r0, [pc, #12]	; (80016a4 <__io_putchar+0x20>)
 8001696:	f007 fba1 	bl	8008ddc <HAL_UART_Transmit>

return ch;
 800169a:	687b      	ldr	r3, [r7, #4]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	200002d0 	.word	0x200002d0

080016a8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016a8:	b590      	push	{r4, r7, lr}
 80016aa:	b087      	sub	sp, #28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	if(huart == &huart3)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a79      	ldr	r2, [pc, #484]	; (8001898 <HAL_UART_RxCpltCallback+0x1f0>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	f040 80eb 	bne.w	8001890 <HAL_UART_RxCpltCallback+0x1e8>
	{
		UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ReceivedData_Address;
 80016ba:	4b78      	ldr	r3, [pc, #480]	; (800189c <HAL_UART_RxCpltCallback+0x1f4>)
 80016bc:	22ac      	movs	r2, #172	; 0xac
 80016be:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 80016c0:	2364      	movs	r3, #100	; 0x64
 80016c2:	2201      	movs	r2, #1
 80016c4:	4975      	ldr	r1, [pc, #468]	; (800189c <HAL_UART_RxCpltCallback+0x1f4>)
 80016c6:	4874      	ldr	r0, [pc, #464]	; (8001898 <HAL_UART_RxCpltCallback+0x1f0>)
 80016c8:	f007 fb88 	bl	8008ddc <HAL_UART_Transmit>
		  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2101      	movs	r1, #1
 80016d0:	4873      	ldr	r0, [pc, #460]	; (80018a0 <HAL_UART_RxCpltCallback+0x1f8>)
 80016d2:	f003 fd7d 	bl	80051d0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80016d6:	2201      	movs	r2, #1
 80016d8:	2102      	movs	r1, #2
 80016da:	4872      	ldr	r0, [pc, #456]	; (80018a4 <HAL_UART_RxCpltCallback+0x1fc>)
 80016dc:	f003 fd78 	bl	80051d0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016e6:	486e      	ldr	r0, [pc, #440]	; (80018a0 <HAL_UART_RxCpltCallback+0x1f8>)
 80016e8:	f003 fd72 	bl	80051d0 <HAL_GPIO_WritePin>
		volatile uint8_t num_mode = UART3_RXBUFFER[0] & 0x0F;
 80016ec:	4b6e      	ldr	r3, [pc, #440]	; (80018a8 <HAL_UART_RxCpltCallback+0x200>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	f003 030f 	and.w	r3, r3, #15
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	75fb      	strb	r3, [r7, #23]
		volatile int received_checksum = UART3_RXBUFFER[3];
 80016f8:	4b6b      	ldr	r3, [pc, #428]	; (80018a8 <HAL_UART_RxCpltCallback+0x200>)
 80016fa:	78db      	ldrb	r3, [r3, #3]
 80016fc:	613b      	str	r3, [r7, #16]
		volatile int calculate_checksum = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
		for(register int i = 0; i < 3; i++)
 8001702:	2400      	movs	r4, #0
 8001704:	e006      	b.n	8001714 <HAL_UART_RxCpltCallback+0x6c>
		{
			calculate_checksum += UART3_RXBUFFER[i];
 8001706:	4b68      	ldr	r3, [pc, #416]	; (80018a8 <HAL_UART_RxCpltCallback+0x200>)
 8001708:	5d1b      	ldrb	r3, [r3, r4]
 800170a:	461a      	mov	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4413      	add	r3, r2
 8001710:	60fb      	str	r3, [r7, #12]
		for(register int i = 0; i < 3; i++)
 8001712:	3401      	adds	r4, #1
 8001714:	2c02      	cmp	r4, #2
 8001716:	ddf6      	ble.n	8001706 <HAL_UART_RxCpltCallback+0x5e>
		}
		calculate_checksum = ~calculate_checksum;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	43db      	mvns	r3, r3
 800171c:	60fb      	str	r3, [r7, #12]
		calculate_checksum = calculate_checksum & 0xFF;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	60fb      	str	r3, [r7, #12]
		if (received_checksum == calculate_checksum)
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	429a      	cmp	r2, r3
 800172a:	f040 8099 	bne.w	8001860 <HAL_UART_RxCpltCallback+0x1b8>
		{
			switch(num_mode)
 800172e:	7dfb      	ldrb	r3, [r7, #23]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	3b01      	subs	r3, #1
 8001734:	2b0e      	cmp	r3, #14
 8001736:	f200 8081 	bhi.w	800183c <HAL_UART_RxCpltCallback+0x194>
 800173a:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <HAL_UART_RxCpltCallback+0x98>)
 800173c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001740:	0800183d 	.word	0x0800183d
 8001744:	0800183d 	.word	0x0800183d
 8001748:	0800183d 	.word	0x0800183d
 800174c:	0800183d 	.word	0x0800183d
 8001750:	0800183d 	.word	0x0800183d
 8001754:	0800177d 	.word	0x0800177d
 8001758:	080017a3 	.word	0x080017a3
 800175c:	080017c9 	.word	0x080017c9
 8001760:	080017ef 	.word	0x080017ef
 8001764:	08001815 	.word	0x08001815
 8001768:	0800181d 	.word	0x0800181d
 800176c:	08001825 	.word	0x08001825
 8001770:	0800182d 	.word	0x0800182d
 8001774:	08001835 	.word	0x08001835
 8001778:	0800183d 	.word	0x0800183d
			{
				case 6:		// q1 Mode
				{
					q1 = ((UART3_RXBUFFER[1] << 8) & 0xFF00) + (UART3_RXBUFFER[2] & 0x00FF);
 800177c:	4b4a      	ldr	r3, [pc, #296]	; (80018a8 <HAL_UART_RxCpltCallback+0x200>)
 800177e:	785b      	ldrb	r3, [r3, #1]
 8001780:	021b      	lsls	r3, r3, #8
 8001782:	b29b      	uxth	r3, r3
 8001784:	4a48      	ldr	r2, [pc, #288]	; (80018a8 <HAL_UART_RxCpltCallback+0x200>)
 8001786:	7892      	ldrb	r2, [r2, #2]
 8001788:	4413      	add	r3, r2
 800178a:	4a48      	ldr	r2, [pc, #288]	; (80018ac <HAL_UART_RxCpltCallback+0x204>)
 800178c:	6013      	str	r3, [r2, #0]
					UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ProcessIsCompleted_Address;
 800178e:	4b43      	ldr	r3, [pc, #268]	; (800189c <HAL_UART_RxCpltCallback+0x1f4>)
 8001790:	22ad      	movs	r2, #173	; 0xad
 8001792:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 8001794:	2364      	movs	r3, #100	; 0x64
 8001796:	2201      	movs	r2, #1
 8001798:	4940      	ldr	r1, [pc, #256]	; (800189c <HAL_UART_RxCpltCallback+0x1f4>)
 800179a:	483f      	ldr	r0, [pc, #252]	; (8001898 <HAL_UART_RxCpltCallback+0x1f0>)
 800179c:	f007 fb1e 	bl	8008ddc <HAL_UART_Transmit>
					break;
 80017a0:	e04d      	b.n	800183e <HAL_UART_RxCpltCallback+0x196>
				}
				case 7:		// q2 Mode
				{
					q2 = ((UART3_RXBUFFER[1] << 8) & 0xFF00) + (UART3_RXBUFFER[2] & 0x00FF);
 80017a2:	4b41      	ldr	r3, [pc, #260]	; (80018a8 <HAL_UART_RxCpltCallback+0x200>)
 80017a4:	785b      	ldrb	r3, [r3, #1]
 80017a6:	021b      	lsls	r3, r3, #8
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	4a3f      	ldr	r2, [pc, #252]	; (80018a8 <HAL_UART_RxCpltCallback+0x200>)
 80017ac:	7892      	ldrb	r2, [r2, #2]
 80017ae:	4413      	add	r3, r2
 80017b0:	4a3f      	ldr	r2, [pc, #252]	; (80018b0 <HAL_UART_RxCpltCallback+0x208>)
 80017b2:	6013      	str	r3, [r2, #0]
					UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ProcessIsCompleted_Address;
 80017b4:	4b39      	ldr	r3, [pc, #228]	; (800189c <HAL_UART_RxCpltCallback+0x1f4>)
 80017b6:	22ad      	movs	r2, #173	; 0xad
 80017b8:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 80017ba:	2364      	movs	r3, #100	; 0x64
 80017bc:	2201      	movs	r2, #1
 80017be:	4937      	ldr	r1, [pc, #220]	; (800189c <HAL_UART_RxCpltCallback+0x1f4>)
 80017c0:	4835      	ldr	r0, [pc, #212]	; (8001898 <HAL_UART_RxCpltCallback+0x1f0>)
 80017c2:	f007 fb0b 	bl	8008ddc <HAL_UART_Transmit>
					break;
 80017c6:	e03a      	b.n	800183e <HAL_UART_RxCpltCallback+0x196>
				}
				case 8:		// q3 Mode
				{
					q3 = ((UART3_RXBUFFER[1] << 8) & 0xFF00) + (UART3_RXBUFFER[2] & 0x00FF);
 80017c8:	4b37      	ldr	r3, [pc, #220]	; (80018a8 <HAL_UART_RxCpltCallback+0x200>)
 80017ca:	785b      	ldrb	r3, [r3, #1]
 80017cc:	021b      	lsls	r3, r3, #8
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	4a35      	ldr	r2, [pc, #212]	; (80018a8 <HAL_UART_RxCpltCallback+0x200>)
 80017d2:	7892      	ldrb	r2, [r2, #2]
 80017d4:	4413      	add	r3, r2
 80017d6:	4a37      	ldr	r2, [pc, #220]	; (80018b4 <HAL_UART_RxCpltCallback+0x20c>)
 80017d8:	6013      	str	r3, [r2, #0]
					UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ProcessIsCompleted_Address;
 80017da:	4b30      	ldr	r3, [pc, #192]	; (800189c <HAL_UART_RxCpltCallback+0x1f4>)
 80017dc:	22ad      	movs	r2, #173	; 0xad
 80017de:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 80017e0:	2364      	movs	r3, #100	; 0x64
 80017e2:	2201      	movs	r2, #1
 80017e4:	492d      	ldr	r1, [pc, #180]	; (800189c <HAL_UART_RxCpltCallback+0x1f4>)
 80017e6:	482c      	ldr	r0, [pc, #176]	; (8001898 <HAL_UART_RxCpltCallback+0x1f0>)
 80017e8:	f007 faf8 	bl	8008ddc <HAL_UART_Transmit>
					break;
 80017ec:	e027      	b.n	800183e <HAL_UART_RxCpltCallback+0x196>
				}
				case 9:		// q4 Mode
				{
					q4 = ((UART3_RXBUFFER[1] << 8) & 0xFF00) + (UART3_RXBUFFER[2] & 0x00FF);
 80017ee:	4b2e      	ldr	r3, [pc, #184]	; (80018a8 <HAL_UART_RxCpltCallback+0x200>)
 80017f0:	785b      	ldrb	r3, [r3, #1]
 80017f2:	021b      	lsls	r3, r3, #8
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	4a2c      	ldr	r2, [pc, #176]	; (80018a8 <HAL_UART_RxCpltCallback+0x200>)
 80017f8:	7892      	ldrb	r2, [r2, #2]
 80017fa:	4413      	add	r3, r2
 80017fc:	4a2e      	ldr	r2, [pc, #184]	; (80018b8 <HAL_UART_RxCpltCallback+0x210>)
 80017fe:	6013      	str	r3, [r2, #0]
					UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ProcessIsCompleted_Address;
 8001800:	4b26      	ldr	r3, [pc, #152]	; (800189c <HAL_UART_RxCpltCallback+0x1f4>)
 8001802:	22ad      	movs	r2, #173	; 0xad
 8001804:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 8001806:	2364      	movs	r3, #100	; 0x64
 8001808:	2201      	movs	r2, #1
 800180a:	4924      	ldr	r1, [pc, #144]	; (800189c <HAL_UART_RxCpltCallback+0x1f4>)
 800180c:	4822      	ldr	r0, [pc, #136]	; (8001898 <HAL_UART_RxCpltCallback+0x1f0>)
 800180e:	f007 fae5 	bl	8008ddc <HAL_UART_Transmit>
					break;
 8001812:	e014      	b.n	800183e <HAL_UART_RxCpltCallback+0x196>
				}
				case 10:	// Set Home Mode
				{
					State_Set_Home = 1;
 8001814:	4b29      	ldr	r3, [pc, #164]	; (80018bc <HAL_UART_RxCpltCallback+0x214>)
 8001816:	2201      	movs	r2, #1
 8001818:	701a      	strb	r2, [r3, #0]
					break;
 800181a:	e010      	b.n	800183e <HAL_UART_RxCpltCallback+0x196>
				{
					break;
				}
				case 11:	// Request 4 Joint State Mode
				{
					State_Print_4_Joint_State = 1;
 800181c:	4b28      	ldr	r3, [pc, #160]	; (80018c0 <HAL_UART_RxCpltCallback+0x218>)
 800181e:	2201      	movs	r2, #1
 8001820:	701a      	strb	r2, [r3, #0]
					break;
 8001822:	e00c      	b.n	800183e <HAL_UART_RxCpltCallback+0x196>
				}
				case 12:	// Request Gripper State Mode
				{
					State_Print_Gripper_State = 1;
 8001824:	4b27      	ldr	r3, [pc, #156]	; (80018c4 <HAL_UART_RxCpltCallback+0x21c>)
 8001826:	2201      	movs	r2, #1
 8001828:	701a      	strb	r2, [r3, #0]
					break;
 800182a:	e008      	b.n	800183e <HAL_UART_RxCpltCallback+0x196>
				}
				case 13:	// Activate Gripper Mode
				{
					State_Activate_Gripper = 1;
 800182c:	4b26      	ldr	r3, [pc, #152]	; (80018c8 <HAL_UART_RxCpltCallback+0x220>)
 800182e:	2201      	movs	r2, #1
 8001830:	701a      	strb	r2, [r3, #0]
					break;
 8001832:	e004      	b.n	800183e <HAL_UART_RxCpltCallback+0x196>
				}
				case 14:	// Deactivate Gripper Mode
				{
					State_Deactivate_Gripper = 1;
 8001834:	4b25      	ldr	r3, [pc, #148]	; (80018cc <HAL_UART_RxCpltCallback+0x224>)
 8001836:	2201      	movs	r2, #1
 8001838:	701a      	strb	r2, [r3, #0]
					break;
 800183a:	e000      	b.n	800183e <HAL_UART_RxCpltCallback+0x196>
				{
					break;
				}
				default:
				{
					break;
 800183c:	bf00      	nop
				}
			}
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800183e:	2201      	movs	r2, #1
 8001840:	2101      	movs	r1, #1
 8001842:	4817      	ldr	r0, [pc, #92]	; (80018a0 <HAL_UART_RxCpltCallback+0x1f8>)
 8001844:	f003 fcc4 	bl	80051d0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001848:	2200      	movs	r2, #0
 800184a:	2102      	movs	r1, #2
 800184c:	4815      	ldr	r0, [pc, #84]	; (80018a4 <HAL_UART_RxCpltCallback+0x1fc>)
 800184e:	f003 fcbf 	bl	80051d0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001852:	2200      	movs	r2, #0
 8001854:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001858:	4811      	ldr	r0, [pc, #68]	; (80018a0 <HAL_UART_RxCpltCallback+0x1f8>)
 800185a:	f003 fcb9 	bl	80051d0 <HAL_GPIO_WritePin>
 800185e:	e012      	b.n	8001886 <HAL_UART_RxCpltCallback+0x1de>
		}
		else
		{
			  State_Checksum_Error = 1;
 8001860:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <HAL_UART_RxCpltCallback+0x228>)
 8001862:	2201      	movs	r2, #1
 8001864:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001866:	2200      	movs	r2, #0
 8001868:	2101      	movs	r1, #1
 800186a:	480d      	ldr	r0, [pc, #52]	; (80018a0 <HAL_UART_RxCpltCallback+0x1f8>)
 800186c:	f003 fcb0 	bl	80051d0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001870:	2200      	movs	r2, #0
 8001872:	2102      	movs	r1, #2
 8001874:	480b      	ldr	r0, [pc, #44]	; (80018a4 <HAL_UART_RxCpltCallback+0x1fc>)
 8001876:	f003 fcab 	bl	80051d0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800187a:	2201      	movs	r2, #1
 800187c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001880:	4807      	ldr	r0, [pc, #28]	; (80018a0 <HAL_UART_RxCpltCallback+0x1f8>)
 8001882:	f003 fca5 	bl	80051d0 <HAL_GPIO_WritePin>
		}
		HAL_UART_Receive_IT(&huart3, UART3_RXBUFFER, BUFFSIZE);
 8001886:	2204      	movs	r2, #4
 8001888:	4907      	ldr	r1, [pc, #28]	; (80018a8 <HAL_UART_RxCpltCallback+0x200>)
 800188a:	4803      	ldr	r0, [pc, #12]	; (8001898 <HAL_UART_RxCpltCallback+0x1f0>)
 800188c:	f007 fb3c 	bl	8008f08 <HAL_UART_Receive_IT>
	}
}
 8001890:	bf00      	nop
 8001892:	371c      	adds	r7, #28
 8001894:	46bd      	mov	sp, r7
 8001896:	bd90      	pop	{r4, r7, pc}
 8001898:	200002d0 	.word	0x200002d0
 800189c:	2000069c 	.word	0x2000069c
 80018a0:	58020400 	.word	0x58020400
 80018a4:	58021000 	.word	0x58021000
 80018a8:	20000928 	.word	0x20000928
 80018ac:	20000698 	.word	0x20000698
 80018b0:	20000460 	.word	0x20000460
 80018b4:	20000690 	.word	0x20000690
 80018b8:	200008a8 	.word	0x200008a8
 80018bc:	2000069d 	.word	0x2000069d
 80018c0:	2000069e 	.word	0x2000069e
 80018c4:	200000a0 	.word	0x200000a0
 80018c8:	20000924 	.word	0x20000924
 80018cc:	2000045c 	.word	0x2000045c
 80018d0:	200008a4 	.word	0x200008a4

080018d4 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	80fb      	strh	r3, [r7, #6]


}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  /* Timer12 Interrupt */
  if (htim == &htim12)
  {

  }
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001916:	b672      	cpsid	i
}
 8001918:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800191a:	e7fe      	b.n	800191a <Error_Handler+0x8>

0800191c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <HAL_MspInit+0x30>)
 8001924:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001928:	4a08      	ldr	r2, [pc, #32]	; (800194c <HAL_MspInit+0x30>)
 800192a:	f043 0302 	orr.w	r3, r3, #2
 800192e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <HAL_MspInit+0x30>)
 8001934:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	58024400 	.word	0x58024400

08001950 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a0b      	ldr	r2, [pc, #44]	; (800198c <HAL_CRC_MspInit+0x3c>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d10e      	bne.n	8001980 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001962:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <HAL_CRC_MspInit+0x40>)
 8001964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001968:	4a09      	ldr	r2, [pc, #36]	; (8001990 <HAL_CRC_MspInit+0x40>)
 800196a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800196e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001972:	4b07      	ldr	r3, [pc, #28]	; (8001990 <HAL_CRC_MspInit+0x40>)
 8001974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001978:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	58024c00 	.word	0x58024c00
 8001990:	58024400 	.word	0x58024400

08001994 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b0b8      	sub	sp, #224	; 0xe0
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019ac:	f107 0310 	add.w	r3, r7, #16
 80019b0:	22bc      	movs	r2, #188	; 0xbc
 80019b2:	2100      	movs	r1, #0
 80019b4:	4618      	mov	r0, r3
 80019b6:	f009 fa3d 	bl	800ae34 <memset>
  if(hspi->Instance==SPI3)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a25      	ldr	r2, [pc, #148]	; (8001a54 <HAL_SPI_MspInit+0xc0>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d142      	bne.n	8001a4a <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80019c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019c8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ce:	f107 0310 	add.w	r3, r7, #16
 80019d2:	4618      	mov	r0, r3
 80019d4:	f004 fc06 	bl	80061e4 <HAL_RCCEx_PeriphCLKConfig>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80019de:	f7ff ff98 	bl	8001912 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80019e2:	4b1d      	ldr	r3, [pc, #116]	; (8001a58 <HAL_SPI_MspInit+0xc4>)
 80019e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019e8:	4a1b      	ldr	r2, [pc, #108]	; (8001a58 <HAL_SPI_MspInit+0xc4>)
 80019ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019f2:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <HAL_SPI_MspInit+0xc4>)
 80019f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a00:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <HAL_SPI_MspInit+0xc4>)
 8001a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a06:	4a14      	ldr	r2, [pc, #80]	; (8001a58 <HAL_SPI_MspInit+0xc4>)
 8001a08:	f043 0304 	orr.w	r3, r3, #4
 8001a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a10:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <HAL_SPI_MspInit+0xc4>)
 8001a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a16:	f003 0304 	and.w	r3, r3, #4
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001a1e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001a22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a26:	2302      	movs	r3, #2
 8001a28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2300      	movs	r3, #0
 8001a34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a38:	2306      	movs	r3, #6
 8001a3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a3e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a42:	4619      	mov	r1, r3
 8001a44:	4805      	ldr	r0, [pc, #20]	; (8001a5c <HAL_SPI_MspInit+0xc8>)
 8001a46:	f003 fa13 	bl	8004e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001a4a:	bf00      	nop
 8001a4c:	37e0      	adds	r7, #224	; 0xe0
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40003c00 	.word	0x40003c00
 8001a58:	58024400 	.word	0x58024400
 8001a5c:	58020800 	.word	0x58020800

08001a60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	; 0x28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a55      	ldr	r2, [pc, #340]	; (8001bc4 <HAL_TIM_Base_MspInit+0x164>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d10f      	bne.n	8001a92 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a72:	4b55      	ldr	r3, [pc, #340]	; (8001bc8 <HAL_TIM_Base_MspInit+0x168>)
 8001a74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a78:	4a53      	ldr	r2, [pc, #332]	; (8001bc8 <HAL_TIM_Base_MspInit+0x168>)
 8001a7a:	f043 0301 	orr.w	r3, r3, #1
 8001a7e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a82:	4b51      	ldr	r3, [pc, #324]	; (8001bc8 <HAL_TIM_Base_MspInit+0x168>)
 8001a84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001a90:	e094      	b.n	8001bbc <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM2)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a9a:	d10f      	bne.n	8001abc <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a9c:	4b4a      	ldr	r3, [pc, #296]	; (8001bc8 <HAL_TIM_Base_MspInit+0x168>)
 8001a9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001aa2:	4a49      	ldr	r2, [pc, #292]	; (8001bc8 <HAL_TIM_Base_MspInit+0x168>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001aac:	4b46      	ldr	r3, [pc, #280]	; (8001bc8 <HAL_TIM_Base_MspInit+0x168>)
 8001aae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	623b      	str	r3, [r7, #32]
 8001ab8:	6a3b      	ldr	r3, [r7, #32]
}
 8001aba:	e07f      	b.n	8001bbc <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM3)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a42      	ldr	r2, [pc, #264]	; (8001bcc <HAL_TIM_Base_MspInit+0x16c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d10f      	bne.n	8001ae6 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ac6:	4b40      	ldr	r3, [pc, #256]	; (8001bc8 <HAL_TIM_Base_MspInit+0x168>)
 8001ac8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001acc:	4a3e      	ldr	r2, [pc, #248]	; (8001bc8 <HAL_TIM_Base_MspInit+0x168>)
 8001ace:	f043 0302 	orr.w	r3, r3, #2
 8001ad2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ad6:	4b3c      	ldr	r3, [pc, #240]	; (8001bc8 <HAL_TIM_Base_MspInit+0x168>)
 8001ad8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	61fb      	str	r3, [r7, #28]
 8001ae2:	69fb      	ldr	r3, [r7, #28]
}
 8001ae4:	e06a      	b.n	8001bbc <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM4)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a39      	ldr	r2, [pc, #228]	; (8001bd0 <HAL_TIM_Base_MspInit+0x170>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d10f      	bne.n	8001b10 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001af0:	4b35      	ldr	r3, [pc, #212]	; (8001bc8 <HAL_TIM_Base_MspInit+0x168>)
 8001af2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001af6:	4a34      	ldr	r2, [pc, #208]	; (8001bc8 <HAL_TIM_Base_MspInit+0x168>)
 8001af8:	f043 0304 	orr.w	r3, r3, #4
 8001afc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b00:	4b31      	ldr	r3, [pc, #196]	; (8001bc8 <HAL_TIM_Base_MspInit+0x168>)
 8001b02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	61bb      	str	r3, [r7, #24]
 8001b0c:	69bb      	ldr	r3, [r7, #24]
}
 8001b0e:	e055      	b.n	8001bbc <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM5)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a2f      	ldr	r2, [pc, #188]	; (8001bd4 <HAL_TIM_Base_MspInit+0x174>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d117      	bne.n	8001b4a <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b1a:	4b2b      	ldr	r3, [pc, #172]	; (8001bc8 <HAL_TIM_Base_MspInit+0x168>)
 8001b1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b20:	4a29      	ldr	r2, [pc, #164]	; (8001bc8 <HAL_TIM_Base_MspInit+0x168>)
 8001b22:	f043 0308 	orr.w	r3, r3, #8
 8001b26:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b2a:	4b27      	ldr	r3, [pc, #156]	; (8001bc8 <HAL_TIM_Base_MspInit+0x168>)
 8001b2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	2032      	movs	r0, #50	; 0x32
 8001b3e:	f000 fe54 	bl	80027ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001b42:	2032      	movs	r0, #50	; 0x32
 8001b44:	f000 fe6b 	bl	800281e <HAL_NVIC_EnableIRQ>
}
 8001b48:	e038      	b.n	8001bbc <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM12)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a22      	ldr	r2, [pc, #136]	; (8001bd8 <HAL_TIM_Base_MspInit+0x178>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d117      	bne.n	8001b84 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001b54:	4b1c      	ldr	r3, [pc, #112]	; (8001bc8 <HAL_TIM_Base_MspInit+0x168>)
 8001b56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b5a:	4a1b      	ldr	r2, [pc, #108]	; (8001bc8 <HAL_TIM_Base_MspInit+0x168>)
 8001b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b60:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b64:	4b18      	ldr	r3, [pc, #96]	; (8001bc8 <HAL_TIM_Base_MspInit+0x168>)
 8001b66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2100      	movs	r1, #0
 8001b76:	202b      	movs	r0, #43	; 0x2b
 8001b78:	f000 fe37 	bl	80027ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001b7c:	202b      	movs	r0, #43	; 0x2b
 8001b7e:	f000 fe4e 	bl	800281e <HAL_NVIC_EnableIRQ>
}
 8001b82:	e01b      	b.n	8001bbc <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM15)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a14      	ldr	r2, [pc, #80]	; (8001bdc <HAL_TIM_Base_MspInit+0x17c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d116      	bne.n	8001bbc <HAL_TIM_Base_MspInit+0x15c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <HAL_TIM_Base_MspInit+0x168>)
 8001b90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b94:	4a0c      	ldr	r2, [pc, #48]	; (8001bc8 <HAL_TIM_Base_MspInit+0x168>)
 8001b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b9a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <HAL_TIM_Base_MspInit+0x168>)
 8001ba0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001bac:	2200      	movs	r2, #0
 8001bae:	2100      	movs	r1, #0
 8001bb0:	2074      	movs	r0, #116	; 0x74
 8001bb2:	f000 fe1a 	bl	80027ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8001bb6:	2074      	movs	r0, #116	; 0x74
 8001bb8:	f000 fe31 	bl	800281e <HAL_NVIC_EnableIRQ>
}
 8001bbc:	bf00      	nop
 8001bbe:	3728      	adds	r7, #40	; 0x28
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40010000 	.word	0x40010000
 8001bc8:	58024400 	.word	0x58024400
 8001bcc:	40000400 	.word	0x40000400
 8001bd0:	40000800 	.word	0x40000800
 8001bd4:	40000c00 	.word	0x40000c00
 8001bd8:	40001800 	.word	0x40001800
 8001bdc:	40014000 	.word	0x40014000

08001be0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08c      	sub	sp, #48	; 0x30
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 031c 	add.w	r3, r7, #28
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a5e      	ldr	r2, [pc, #376]	; (8001d78 <HAL_TIM_MspPostInit+0x198>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d120      	bne.n	8001c44 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c02:	4b5e      	ldr	r3, [pc, #376]	; (8001d7c <HAL_TIM_MspPostInit+0x19c>)
 8001c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c08:	4a5c      	ldr	r2, [pc, #368]	; (8001d7c <HAL_TIM_MspPostInit+0x19c>)
 8001c0a:	f043 0310 	orr.w	r3, r3, #16
 8001c0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c12:	4b5a      	ldr	r3, [pc, #360]	; (8001d7c <HAL_TIM_MspPostInit+0x19c>)
 8001c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c18:	f003 0310 	and.w	r3, r3, #16
 8001c1c:	61bb      	str	r3, [r7, #24]
 8001c1e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8001c20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c32:	2301      	movs	r3, #1
 8001c34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8001c36:	f107 031c 	add.w	r3, r7, #28
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4850      	ldr	r0, [pc, #320]	; (8001d80 <HAL_TIM_MspPostInit+0x1a0>)
 8001c3e:	f003 f917 	bl	8004e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001c42:	e094      	b.n	8001d6e <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM2)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c4c:	d120      	bne.n	8001c90 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4e:	4b4b      	ldr	r3, [pc, #300]	; (8001d7c <HAL_TIM_MspPostInit+0x19c>)
 8001c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c54:	4a49      	ldr	r2, [pc, #292]	; (8001d7c <HAL_TIM_MspPostInit+0x19c>)
 8001c56:	f043 0302 	orr.w	r3, r3, #2
 8001c5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c5e:	4b47      	ldr	r3, [pc, #284]	; (8001d7c <HAL_TIM_MspPostInit+0x19c>)
 8001c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 8001c6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c72:	2302      	movs	r3, #2
 8001c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 8001c82:	f107 031c 	add.w	r3, r7, #28
 8001c86:	4619      	mov	r1, r3
 8001c88:	483e      	ldr	r0, [pc, #248]	; (8001d84 <HAL_TIM_MspPostInit+0x1a4>)
 8001c8a:	f003 f8f1 	bl	8004e70 <HAL_GPIO_Init>
}
 8001c8e:	e06e      	b.n	8001d6e <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM3)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a3c      	ldr	r2, [pc, #240]	; (8001d88 <HAL_TIM_MspPostInit+0x1a8>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d11f      	bne.n	8001cda <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9a:	4b38      	ldr	r3, [pc, #224]	; (8001d7c <HAL_TIM_MspPostInit+0x19c>)
 8001c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca0:	4a36      	ldr	r2, [pc, #216]	; (8001d7c <HAL_TIM_MspPostInit+0x19c>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001caa:	4b34      	ldr	r3, [pc, #208]	; (8001d7c <HAL_TIM_MspPostInit+0x19c>)
 8001cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8001cb8:	2340      	movs	r3, #64	; 0x40
 8001cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 8001ccc:	f107 031c 	add.w	r3, r7, #28
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	482e      	ldr	r0, [pc, #184]	; (8001d8c <HAL_TIM_MspPostInit+0x1ac>)
 8001cd4:	f003 f8cc 	bl	8004e70 <HAL_GPIO_Init>
}
 8001cd8:	e049      	b.n	8001d6e <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM4)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a2c      	ldr	r2, [pc, #176]	; (8001d90 <HAL_TIM_MspPostInit+0x1b0>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d120      	bne.n	8001d26 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce4:	4b25      	ldr	r3, [pc, #148]	; (8001d7c <HAL_TIM_MspPostInit+0x19c>)
 8001ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cea:	4a24      	ldr	r2, [pc, #144]	; (8001d7c <HAL_TIM_MspPostInit+0x19c>)
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cf4:	4b21      	ldr	r3, [pc, #132]	; (8001d7c <HAL_TIM_MspPostInit+0x19c>)
 8001cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 8001d02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d10:	2300      	movs	r3, #0
 8001d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d14:	2302      	movs	r3, #2
 8001d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8001d18:	f107 031c 	add.w	r3, r7, #28
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4819      	ldr	r0, [pc, #100]	; (8001d84 <HAL_TIM_MspPostInit+0x1a4>)
 8001d20:	f003 f8a6 	bl	8004e70 <HAL_GPIO_Init>
}
 8001d24:	e023      	b.n	8001d6e <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM15)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a1a      	ldr	r2, [pc, #104]	; (8001d94 <HAL_TIM_MspPostInit+0x1b4>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d11e      	bne.n	8001d6e <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d30:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_TIM_MspPostInit+0x19c>)
 8001d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d36:	4a11      	ldr	r2, [pc, #68]	; (8001d7c <HAL_TIM_MspPostInit+0x19c>)
 8001d38:	f043 0310 	orr.w	r3, r3, #16
 8001d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d40:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <HAL_TIM_MspPostInit+0x19c>)
 8001d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d46:	f003 0310 	and.w	r3, r3, #16
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 8001d4e:	2340      	movs	r3, #64	; 0x40
 8001d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d52:	2302      	movs	r3, #2
 8001d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8001d5e:	2304      	movs	r3, #4
 8001d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 8001d62:	f107 031c 	add.w	r3, r7, #28
 8001d66:	4619      	mov	r1, r3
 8001d68:	4805      	ldr	r0, [pc, #20]	; (8001d80 <HAL_TIM_MspPostInit+0x1a0>)
 8001d6a:	f003 f881 	bl	8004e70 <HAL_GPIO_Init>
}
 8001d6e:	bf00      	nop
 8001d70:	3730      	adds	r7, #48	; 0x30
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40010000 	.word	0x40010000
 8001d7c:	58024400 	.word	0x58024400
 8001d80:	58021000 	.word	0x58021000
 8001d84:	58020400 	.word	0x58020400
 8001d88:	40000400 	.word	0x40000400
 8001d8c:	58020000 	.word	0x58020000
 8001d90:	40000800 	.word	0x40000800
 8001d94:	40014000 	.word	0x40014000

08001d98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b0bc      	sub	sp, #240	; 0xf0
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001db0:	f107 0320 	add.w	r3, r7, #32
 8001db4:	22bc      	movs	r2, #188	; 0xbc
 8001db6:	2100      	movs	r1, #0
 8001db8:	4618      	mov	r0, r3
 8001dba:	f009 f83b 	bl	800ae34 <memset>
  if(huart->Instance==UART4)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a67      	ldr	r2, [pc, #412]	; (8001f60 <HAL_UART_MspInit+0x1c8>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	f040 80db 	bne.w	8001f80 <HAL_UART_MspInit+0x1e8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dd4:	f107 0320 	add.w	r3, r7, #32
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f004 fa03 	bl	80061e4 <HAL_RCCEx_PeriphCLKConfig>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001de4:	f7ff fd95 	bl	8001912 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001de8:	4b5e      	ldr	r3, [pc, #376]	; (8001f64 <HAL_UART_MspInit+0x1cc>)
 8001dea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001dee:	4a5d      	ldr	r2, [pc, #372]	; (8001f64 <HAL_UART_MspInit+0x1cc>)
 8001df0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001df4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001df8:	4b5a      	ldr	r3, [pc, #360]	; (8001f64 <HAL_UART_MspInit+0x1cc>)
 8001dfa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001dfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e02:	61fb      	str	r3, [r7, #28]
 8001e04:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e06:	4b57      	ldr	r3, [pc, #348]	; (8001f64 <HAL_UART_MspInit+0x1cc>)
 8001e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e0c:	4a55      	ldr	r2, [pc, #340]	; (8001f64 <HAL_UART_MspInit+0x1cc>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e16:	4b53      	ldr	r3, [pc, #332]	; (8001f64 <HAL_UART_MspInit+0x1cc>)
 8001e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	61bb      	str	r3, [r7, #24]
 8001e22:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e24:	4b4f      	ldr	r3, [pc, #316]	; (8001f64 <HAL_UART_MspInit+0x1cc>)
 8001e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e2a:	4a4e      	ldr	r2, [pc, #312]	; (8001f64 <HAL_UART_MspInit+0x1cc>)
 8001e2c:	f043 0308 	orr.w	r3, r3, #8
 8001e30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e34:	4b4b      	ldr	r3, [pc, #300]	; (8001f64 <HAL_UART_MspInit+0x1cc>)
 8001e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA15 (JTDI)     ------> UART4_DE
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e56:	2300      	movs	r3, #0
 8001e58:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e5c:	2308      	movs	r3, #8
 8001e5e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e62:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e66:	4619      	mov	r1, r3
 8001e68:	483f      	ldr	r0, [pc, #252]	; (8001f68 <HAL_UART_MspInit+0x1d0>)
 8001e6a:	f003 f801 	bl	8004e70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e74:	2302      	movs	r3, #2
 8001e76:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e80:	2300      	movs	r3, #0
 8001e82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e86:	2308      	movs	r3, #8
 8001e88:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e8c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e90:	4619      	mov	r1, r3
 8001e92:	4836      	ldr	r0, [pc, #216]	; (8001f6c <HAL_UART_MspInit+0x1d4>)
 8001e94:	f002 ffec 	bl	8004e70 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Stream0;
 8001e98:	4b35      	ldr	r3, [pc, #212]	; (8001f70 <HAL_UART_MspInit+0x1d8>)
 8001e9a:	4a36      	ldr	r2, [pc, #216]	; (8001f74 <HAL_UART_MspInit+0x1dc>)
 8001e9c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001e9e:	4b34      	ldr	r3, [pc, #208]	; (8001f70 <HAL_UART_MspInit+0x1d8>)
 8001ea0:	223f      	movs	r2, #63	; 0x3f
 8001ea2:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ea4:	4b32      	ldr	r3, [pc, #200]	; (8001f70 <HAL_UART_MspInit+0x1d8>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eaa:	4b31      	ldr	r3, [pc, #196]	; (8001f70 <HAL_UART_MspInit+0x1d8>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001eb0:	4b2f      	ldr	r3, [pc, #188]	; (8001f70 <HAL_UART_MspInit+0x1d8>)
 8001eb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eb6:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001eb8:	4b2d      	ldr	r3, [pc, #180]	; (8001f70 <HAL_UART_MspInit+0x1d8>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ebe:	4b2c      	ldr	r3, [pc, #176]	; (8001f70 <HAL_UART_MspInit+0x1d8>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001ec4:	4b2a      	ldr	r3, [pc, #168]	; (8001f70 <HAL_UART_MspInit+0x1d8>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001eca:	4b29      	ldr	r3, [pc, #164]	; (8001f70 <HAL_UART_MspInit+0x1d8>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ed0:	4b27      	ldr	r3, [pc, #156]	; (8001f70 <HAL_UART_MspInit+0x1d8>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001ed6:	4826      	ldr	r0, [pc, #152]	; (8001f70 <HAL_UART_MspInit+0x1d8>)
 8001ed8:	f000 fda6 	bl	8002a28 <HAL_DMA_Init>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <HAL_UART_MspInit+0x14e>
    {
      Error_Handler();
 8001ee2:	f7ff fd16 	bl	8001912 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a21      	ldr	r2, [pc, #132]	; (8001f70 <HAL_UART_MspInit+0x1d8>)
 8001eea:	67da      	str	r2, [r3, #124]	; 0x7c
 8001eec:	4a20      	ldr	r2, [pc, #128]	; (8001f70 <HAL_UART_MspInit+0x1d8>)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Stream1;
 8001ef2:	4b21      	ldr	r3, [pc, #132]	; (8001f78 <HAL_UART_MspInit+0x1e0>)
 8001ef4:	4a21      	ldr	r2, [pc, #132]	; (8001f7c <HAL_UART_MspInit+0x1e4>)
 8001ef6:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001ef8:	4b1f      	ldr	r3, [pc, #124]	; (8001f78 <HAL_UART_MspInit+0x1e0>)
 8001efa:	2240      	movs	r2, #64	; 0x40
 8001efc:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001efe:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <HAL_UART_MspInit+0x1e0>)
 8001f00:	2240      	movs	r2, #64	; 0x40
 8001f02:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f04:	4b1c      	ldr	r3, [pc, #112]	; (8001f78 <HAL_UART_MspInit+0x1e0>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f0a:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <HAL_UART_MspInit+0x1e0>)
 8001f0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f10:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f12:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <HAL_UART_MspInit+0x1e0>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f18:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <HAL_UART_MspInit+0x1e0>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001f1e:	4b16      	ldr	r3, [pc, #88]	; (8001f78 <HAL_UART_MspInit+0x1e0>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f24:	4b14      	ldr	r3, [pc, #80]	; (8001f78 <HAL_UART_MspInit+0x1e0>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f2a:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <HAL_UART_MspInit+0x1e0>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001f30:	4811      	ldr	r0, [pc, #68]	; (8001f78 <HAL_UART_MspInit+0x1e0>)
 8001f32:	f000 fd79 	bl	8002a28 <HAL_DMA_Init>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <HAL_UART_MspInit+0x1a8>
    {
      Error_Handler();
 8001f3c:	f7ff fce9 	bl	8001912 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a0d      	ldr	r2, [pc, #52]	; (8001f78 <HAL_UART_MspInit+0x1e0>)
 8001f44:	679a      	str	r2, [r3, #120]	; 0x78
 8001f46:	4a0c      	ldr	r2, [pc, #48]	; (8001f78 <HAL_UART_MspInit+0x1e0>)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2100      	movs	r1, #0
 8001f50:	2034      	movs	r0, #52	; 0x34
 8001f52:	f000 fc4a 	bl	80027ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001f56:	2034      	movs	r0, #52	; 0x34
 8001f58:	f000 fc61 	bl	800281e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f5c:	e0bd      	b.n	80020da <HAL_UART_MspInit+0x342>
 8001f5e:	bf00      	nop
 8001f60:	40004c00 	.word	0x40004c00
 8001f64:	58024400 	.word	0x58024400
 8001f68:	58020000 	.word	0x58020000
 8001f6c:	58020c00 	.word	0x58020c00
 8001f70:	20000194 	.word	0x20000194
 8001f74:	40020410 	.word	0x40020410
 8001f78:	200008ac 	.word	0x200008ac
 8001f7c:	40020428 	.word	0x40020428
  else if(huart->Instance==USART3)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a57      	ldr	r2, [pc, #348]	; (80020e4 <HAL_UART_MspInit+0x34c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	f040 80a7 	bne.w	80020da <HAL_UART_MspInit+0x342>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001f90:	2300      	movs	r3, #0
 8001f92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f96:	f107 0320 	add.w	r3, r7, #32
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f004 f922 	bl	80061e4 <HAL_RCCEx_PeriphCLKConfig>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_UART_MspInit+0x212>
      Error_Handler();
 8001fa6:	f7ff fcb4 	bl	8001912 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001faa:	4b4f      	ldr	r3, [pc, #316]	; (80020e8 <HAL_UART_MspInit+0x350>)
 8001fac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fb0:	4a4d      	ldr	r2, [pc, #308]	; (80020e8 <HAL_UART_MspInit+0x350>)
 8001fb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fb6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fba:	4b4b      	ldr	r3, [pc, #300]	; (80020e8 <HAL_UART_MspInit+0x350>)
 8001fbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fc4:	613b      	str	r3, [r7, #16]
 8001fc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fc8:	4b47      	ldr	r3, [pc, #284]	; (80020e8 <HAL_UART_MspInit+0x350>)
 8001fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fce:	4a46      	ldr	r2, [pc, #280]	; (80020e8 <HAL_UART_MspInit+0x350>)
 8001fd0:	f043 0308 	orr.w	r3, r3, #8
 8001fd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fd8:	4b43      	ldr	r3, [pc, #268]	; (80020e8 <HAL_UART_MspInit+0x350>)
 8001fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fe6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002000:	2307      	movs	r3, #7
 8002002:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002006:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800200a:	4619      	mov	r1, r3
 800200c:	4837      	ldr	r0, [pc, #220]	; (80020ec <HAL_UART_MspInit+0x354>)
 800200e:	f002 ff2f 	bl	8004e70 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002012:	4b37      	ldr	r3, [pc, #220]	; (80020f0 <HAL_UART_MspInit+0x358>)
 8002014:	4a37      	ldr	r2, [pc, #220]	; (80020f4 <HAL_UART_MspInit+0x35c>)
 8002016:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002018:	4b35      	ldr	r3, [pc, #212]	; (80020f0 <HAL_UART_MspInit+0x358>)
 800201a:	222d      	movs	r2, #45	; 0x2d
 800201c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800201e:	4b34      	ldr	r3, [pc, #208]	; (80020f0 <HAL_UART_MspInit+0x358>)
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002024:	4b32      	ldr	r3, [pc, #200]	; (80020f0 <HAL_UART_MspInit+0x358>)
 8002026:	2200      	movs	r2, #0
 8002028:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800202a:	4b31      	ldr	r3, [pc, #196]	; (80020f0 <HAL_UART_MspInit+0x358>)
 800202c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002030:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002032:	4b2f      	ldr	r3, [pc, #188]	; (80020f0 <HAL_UART_MspInit+0x358>)
 8002034:	2200      	movs	r2, #0
 8002036:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002038:	4b2d      	ldr	r3, [pc, #180]	; (80020f0 <HAL_UART_MspInit+0x358>)
 800203a:	2200      	movs	r2, #0
 800203c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800203e:	4b2c      	ldr	r3, [pc, #176]	; (80020f0 <HAL_UART_MspInit+0x358>)
 8002040:	2200      	movs	r2, #0
 8002042:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002044:	4b2a      	ldr	r3, [pc, #168]	; (80020f0 <HAL_UART_MspInit+0x358>)
 8002046:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800204a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800204c:	4b28      	ldr	r3, [pc, #160]	; (80020f0 <HAL_UART_MspInit+0x358>)
 800204e:	2200      	movs	r2, #0
 8002050:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002052:	4827      	ldr	r0, [pc, #156]	; (80020f0 <HAL_UART_MspInit+0x358>)
 8002054:	f000 fce8 	bl	8002a28 <HAL_DMA_Init>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <HAL_UART_MspInit+0x2ca>
      Error_Handler();
 800205e:	f7ff fc58 	bl	8001912 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a22      	ldr	r2, [pc, #136]	; (80020f0 <HAL_UART_MspInit+0x358>)
 8002066:	67da      	str	r2, [r3, #124]	; 0x7c
 8002068:	4a21      	ldr	r2, [pc, #132]	; (80020f0 <HAL_UART_MspInit+0x358>)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 800206e:	4b22      	ldr	r3, [pc, #136]	; (80020f8 <HAL_UART_MspInit+0x360>)
 8002070:	4a22      	ldr	r2, [pc, #136]	; (80020fc <HAL_UART_MspInit+0x364>)
 8002072:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002074:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <HAL_UART_MspInit+0x360>)
 8002076:	222e      	movs	r2, #46	; 0x2e
 8002078:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800207a:	4b1f      	ldr	r3, [pc, #124]	; (80020f8 <HAL_UART_MspInit+0x360>)
 800207c:	2240      	movs	r2, #64	; 0x40
 800207e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002080:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <HAL_UART_MspInit+0x360>)
 8002082:	2200      	movs	r2, #0
 8002084:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002086:	4b1c      	ldr	r3, [pc, #112]	; (80020f8 <HAL_UART_MspInit+0x360>)
 8002088:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800208c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800208e:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <HAL_UART_MspInit+0x360>)
 8002090:	2200      	movs	r2, #0
 8002092:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002094:	4b18      	ldr	r3, [pc, #96]	; (80020f8 <HAL_UART_MspInit+0x360>)
 8002096:	2200      	movs	r2, #0
 8002098:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800209a:	4b17      	ldr	r3, [pc, #92]	; (80020f8 <HAL_UART_MspInit+0x360>)
 800209c:	2200      	movs	r2, #0
 800209e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80020a0:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <HAL_UART_MspInit+0x360>)
 80020a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020a6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020a8:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <HAL_UART_MspInit+0x360>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80020ae:	4812      	ldr	r0, [pc, #72]	; (80020f8 <HAL_UART_MspInit+0x360>)
 80020b0:	f000 fcba 	bl	8002a28 <HAL_DMA_Init>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <HAL_UART_MspInit+0x326>
      Error_Handler();
 80020ba:	f7ff fc2a 	bl	8001912 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a0d      	ldr	r2, [pc, #52]	; (80020f8 <HAL_UART_MspInit+0x360>)
 80020c2:	679a      	str	r2, [r3, #120]	; 0x78
 80020c4:	4a0c      	ldr	r2, [pc, #48]	; (80020f8 <HAL_UART_MspInit+0x360>)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2100      	movs	r1, #0
 80020ce:	2027      	movs	r0, #39	; 0x27
 80020d0:	f000 fb8b 	bl	80027ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80020d4:	2027      	movs	r0, #39	; 0x27
 80020d6:	f000 fba2 	bl	800281e <HAL_NVIC_EnableIRQ>
}
 80020da:	bf00      	nop
 80020dc:	37f0      	adds	r7, #240	; 0xf0
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40004800 	.word	0x40004800
 80020e8:	58024400 	.word	0x58024400
 80020ec:	58020c00 	.word	0x58020c00
 80020f0:	20000258 	.word	0x20000258
 80020f4:	40020028 	.word	0x40020028
 80020f8:	2000046c 	.word	0x2000046c
 80020fc:	40020040 	.word	0x40020040

08002100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002104:	e7fe      	b.n	8002104 <NMI_Handler+0x4>

08002106 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800210a:	e7fe      	b.n	800210a <HardFault_Handler+0x4>

0800210c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002110:	e7fe      	b.n	8002110 <MemManage_Handler+0x4>

08002112 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002116:	e7fe      	b.n	8002116 <BusFault_Handler+0x4>

08002118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800211c:	e7fe      	b.n	800211c <UsageFault_Handler+0x4>

0800211e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800214c:	f000 fa46 	bl	80025dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002150:	bf00      	nop
 8002152:	bd80      	pop	{r7, pc}

08002154 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002158:	4802      	ldr	r0, [pc, #8]	; (8002164 <DMA1_Stream1_IRQHandler+0x10>)
 800215a:	f001 fd23 	bl	8003ba4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000258 	.word	0x20000258

08002168 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800216c:	4802      	ldr	r0, [pc, #8]	; (8002178 <DMA1_Stream2_IRQHandler+0x10>)
 800216e:	f001 fd19 	bl	8003ba4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	2000046c 	.word	0x2000046c

0800217c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002180:	2040      	movs	r0, #64	; 0x40
 8002182:	f003 f83e 	bl	8005202 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002186:	2080      	movs	r0, #128	; 0x80
 8002188:	f003 f83b 	bl	8005202 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}

08002190 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002194:	4802      	ldr	r0, [pc, #8]	; (80021a0 <USART3_IRQHandler+0x10>)
 8002196:	f006 fefd 	bl	8008f94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	200002d0 	.word	0x200002d0

080021a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80021a8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80021ac:	f003 f829 	bl	8005202 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80021b0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80021b4:	f003 f825 	bl	8005202 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80021b8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021bc:	f003 f821 	bl	8005202 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80021c0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021c4:	f003 f81d 	bl	8005202 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021c8:	bf00      	nop
 80021ca:	bd80      	pop	{r7, pc}

080021cc <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80021d0:	4802      	ldr	r0, [pc, #8]	; (80021dc <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80021d2:	f005 fd3e 	bl	8007c52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20000858 	.word	0x20000858

080021e0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80021e4:	4802      	ldr	r0, [pc, #8]	; (80021f0 <TIM5_IRQHandler+0x10>)
 80021e6:	f005 fd34 	bl	8007c52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	200004e4 	.word	0x200004e4

080021f4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80021f8:	4802      	ldr	r0, [pc, #8]	; (8002204 <UART4_IRQHandler+0x10>)
 80021fa:	f006 fecb 	bl	8008f94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	200006ec 	.word	0x200006ec

08002208 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800220c:	4802      	ldr	r0, [pc, #8]	; (8002218 <DMA2_Stream0_IRQHandler+0x10>)
 800220e:	f001 fcc9 	bl	8003ba4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20000194 	.word	0x20000194

0800221c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002220:	4802      	ldr	r0, [pc, #8]	; (800222c <DMA2_Stream1_IRQHandler+0x10>)
 8002222:	f001 fcbf 	bl	8003ba4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	200008ac 	.word	0x200008ac

08002230 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002234:	4802      	ldr	r0, [pc, #8]	; (8002240 <TIM15_IRQHandler+0x10>)
 8002236:	f005 fd0c 	bl	8007c52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	200003e0 	.word	0x200003e0

08002244 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	e00a      	b.n	800226c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002256:	f3af 8000 	nop.w
 800225a:	4601      	mov	r1, r0
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	60ba      	str	r2, [r7, #8]
 8002262:	b2ca      	uxtb	r2, r1
 8002264:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	3301      	adds	r3, #1
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	429a      	cmp	r2, r3
 8002272:	dbf0      	blt.n	8002256 <_read+0x12>
	}

return len;
 8002274:	687b      	ldr	r3, [r7, #4]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b086      	sub	sp, #24
 8002282:	af00      	add	r7, sp, #0
 8002284:	60f8      	str	r0, [r7, #12]
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
 800228e:	e009      	b.n	80022a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	1c5a      	adds	r2, r3, #1
 8002294:	60ba      	str	r2, [r7, #8]
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff f9f3 	bl	8001684 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	3301      	adds	r3, #1
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	dbf1      	blt.n	8002290 <_write+0x12>
	}
	return len;
 80022ac:	687b      	ldr	r3, [r7, #4]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <_close>:

int _close(int file)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
	return -1;
 80022be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022de:	605a      	str	r2, [r3, #4]
	return 0;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <_isatty>:

int _isatty(int file)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
	return 1;
 80022f6:	2301      	movs	r3, #1
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
	return 0;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
	...

08002320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002328:	4a14      	ldr	r2, [pc, #80]	; (800237c <_sbrk+0x5c>)
 800232a:	4b15      	ldr	r3, [pc, #84]	; (8002380 <_sbrk+0x60>)
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002334:	4b13      	ldr	r3, [pc, #76]	; (8002384 <_sbrk+0x64>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d102      	bne.n	8002342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800233c:	4b11      	ldr	r3, [pc, #68]	; (8002384 <_sbrk+0x64>)
 800233e:	4a12      	ldr	r2, [pc, #72]	; (8002388 <_sbrk+0x68>)
 8002340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <_sbrk+0x64>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	429a      	cmp	r2, r3
 800234e:	d207      	bcs.n	8002360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002350:	f008 fd46 	bl	800ade0 <__errno>
 8002354:	4603      	mov	r3, r0
 8002356:	220c      	movs	r2, #12
 8002358:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800235a:	f04f 33ff 	mov.w	r3, #4294967295
 800235e:	e009      	b.n	8002374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002360:	4b08      	ldr	r3, [pc, #32]	; (8002384 <_sbrk+0x64>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002366:	4b07      	ldr	r3, [pc, #28]	; (8002384 <_sbrk+0x64>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4413      	add	r3, r2
 800236e:	4a05      	ldr	r2, [pc, #20]	; (8002384 <_sbrk+0x64>)
 8002370:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002372:	68fb      	ldr	r3, [r7, #12]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20020000 	.word	0x20020000
 8002380:	00000400 	.word	0x00000400
 8002384:	20000094 	.word	0x20000094
 8002388:	20000940 	.word	0x20000940

0800238c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002390:	4b39      	ldr	r3, [pc, #228]	; (8002478 <SystemInit+0xec>)
 8002392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002396:	4a38      	ldr	r2, [pc, #224]	; (8002478 <SystemInit+0xec>)
 8002398:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800239c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80023a0:	4b36      	ldr	r3, [pc, #216]	; (800247c <SystemInit+0xf0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 030f 	and.w	r3, r3, #15
 80023a8:	2b06      	cmp	r3, #6
 80023aa:	d807      	bhi.n	80023bc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80023ac:	4b33      	ldr	r3, [pc, #204]	; (800247c <SystemInit+0xf0>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f023 030f 	bic.w	r3, r3, #15
 80023b4:	4a31      	ldr	r2, [pc, #196]	; (800247c <SystemInit+0xf0>)
 80023b6:	f043 0307 	orr.w	r3, r3, #7
 80023ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80023bc:	4b30      	ldr	r3, [pc, #192]	; (8002480 <SystemInit+0xf4>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a2f      	ldr	r2, [pc, #188]	; (8002480 <SystemInit+0xf4>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80023c8:	4b2d      	ldr	r3, [pc, #180]	; (8002480 <SystemInit+0xf4>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80023ce:	4b2c      	ldr	r3, [pc, #176]	; (8002480 <SystemInit+0xf4>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	492b      	ldr	r1, [pc, #172]	; (8002480 <SystemInit+0xf4>)
 80023d4:	4b2b      	ldr	r3, [pc, #172]	; (8002484 <SystemInit+0xf8>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80023da:	4b28      	ldr	r3, [pc, #160]	; (800247c <SystemInit+0xf0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d007      	beq.n	80023f6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80023e6:	4b25      	ldr	r3, [pc, #148]	; (800247c <SystemInit+0xf0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f023 030f 	bic.w	r3, r3, #15
 80023ee:	4a23      	ldr	r2, [pc, #140]	; (800247c <SystemInit+0xf0>)
 80023f0:	f043 0307 	orr.w	r3, r3, #7
 80023f4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80023f6:	4b22      	ldr	r3, [pc, #136]	; (8002480 <SystemInit+0xf4>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80023fc:	4b20      	ldr	r3, [pc, #128]	; (8002480 <SystemInit+0xf4>)
 80023fe:	2200      	movs	r2, #0
 8002400:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002402:	4b1f      	ldr	r3, [pc, #124]	; (8002480 <SystemInit+0xf4>)
 8002404:	2200      	movs	r2, #0
 8002406:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002408:	4b1d      	ldr	r3, [pc, #116]	; (8002480 <SystemInit+0xf4>)
 800240a:	4a1f      	ldr	r2, [pc, #124]	; (8002488 <SystemInit+0xfc>)
 800240c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800240e:	4b1c      	ldr	r3, [pc, #112]	; (8002480 <SystemInit+0xf4>)
 8002410:	4a1e      	ldr	r2, [pc, #120]	; (800248c <SystemInit+0x100>)
 8002412:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002414:	4b1a      	ldr	r3, [pc, #104]	; (8002480 <SystemInit+0xf4>)
 8002416:	4a1e      	ldr	r2, [pc, #120]	; (8002490 <SystemInit+0x104>)
 8002418:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800241a:	4b19      	ldr	r3, [pc, #100]	; (8002480 <SystemInit+0xf4>)
 800241c:	2200      	movs	r2, #0
 800241e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002420:	4b17      	ldr	r3, [pc, #92]	; (8002480 <SystemInit+0xf4>)
 8002422:	4a1b      	ldr	r2, [pc, #108]	; (8002490 <SystemInit+0x104>)
 8002424:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002426:	4b16      	ldr	r3, [pc, #88]	; (8002480 <SystemInit+0xf4>)
 8002428:	2200      	movs	r2, #0
 800242a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800242c:	4b14      	ldr	r3, [pc, #80]	; (8002480 <SystemInit+0xf4>)
 800242e:	4a18      	ldr	r2, [pc, #96]	; (8002490 <SystemInit+0x104>)
 8002430:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002432:	4b13      	ldr	r3, [pc, #76]	; (8002480 <SystemInit+0xf4>)
 8002434:	2200      	movs	r2, #0
 8002436:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002438:	4b11      	ldr	r3, [pc, #68]	; (8002480 <SystemInit+0xf4>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a10      	ldr	r2, [pc, #64]	; (8002480 <SystemInit+0xf4>)
 800243e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002442:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002444:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <SystemInit+0xf4>)
 8002446:	2200      	movs	r2, #0
 8002448:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800244a:	4b12      	ldr	r3, [pc, #72]	; (8002494 <SystemInit+0x108>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	4b12      	ldr	r3, [pc, #72]	; (8002498 <SystemInit+0x10c>)
 8002450:	4013      	ands	r3, r2
 8002452:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002456:	d202      	bcs.n	800245e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002458:	4b10      	ldr	r3, [pc, #64]	; (800249c <SystemInit+0x110>)
 800245a:	2201      	movs	r2, #1
 800245c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <SystemInit+0x114>)
 8002460:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002464:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002466:	4b04      	ldr	r3, [pc, #16]	; (8002478 <SystemInit+0xec>)
 8002468:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800246c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800246e:	bf00      	nop
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	e000ed00 	.word	0xe000ed00
 800247c:	52002000 	.word	0x52002000
 8002480:	58024400 	.word	0x58024400
 8002484:	eaf6ed7f 	.word	0xeaf6ed7f
 8002488:	02020200 	.word	0x02020200
 800248c:	01ff0000 	.word	0x01ff0000
 8002490:	01010280 	.word	0x01010280
 8002494:	5c001000 	.word	0x5c001000
 8002498:	ffff0000 	.word	0xffff0000
 800249c:	51008108 	.word	0x51008108
 80024a0:	52004000 	.word	0x52004000

080024a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80024a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80024a8:	f7ff ff70 	bl	800238c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024ac:	480c      	ldr	r0, [pc, #48]	; (80024e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024ae:	490d      	ldr	r1, [pc, #52]	; (80024e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024b0:	4a0d      	ldr	r2, [pc, #52]	; (80024e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024b4:	e002      	b.n	80024bc <LoopCopyDataInit>

080024b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ba:	3304      	adds	r3, #4

080024bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024c0:	d3f9      	bcc.n	80024b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024c2:	4a0a      	ldr	r2, [pc, #40]	; (80024ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024c4:	4c0a      	ldr	r4, [pc, #40]	; (80024f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024c8:	e001      	b.n	80024ce <LoopFillZerobss>

080024ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024cc:	3204      	adds	r2, #4

080024ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024d0:	d3fb      	bcc.n	80024ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024d2:	f008 fc8b 	bl	800adec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024d6:	f7fe f8cf 	bl	8000678 <main>
  bx  lr
 80024da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024e4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80024e8:	0800be04 	.word	0x0800be04
  ldr r2, =_sbss
 80024ec:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80024f0:	20000940 	.word	0x20000940

080024f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024f4:	e7fe      	b.n	80024f4 <ADC3_IRQHandler>
	...

080024f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024fe:	2003      	movs	r0, #3
 8002500:	f000 f968 	bl	80027d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002504:	f003 fc98 	bl	8005e38 <HAL_RCC_GetSysClockFreq>
 8002508:	4602      	mov	r2, r0
 800250a:	4b15      	ldr	r3, [pc, #84]	; (8002560 <HAL_Init+0x68>)
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	0a1b      	lsrs	r3, r3, #8
 8002510:	f003 030f 	and.w	r3, r3, #15
 8002514:	4913      	ldr	r1, [pc, #76]	; (8002564 <HAL_Init+0x6c>)
 8002516:	5ccb      	ldrb	r3, [r1, r3]
 8002518:	f003 031f 	and.w	r3, r3, #31
 800251c:	fa22 f303 	lsr.w	r3, r2, r3
 8002520:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002522:	4b0f      	ldr	r3, [pc, #60]	; (8002560 <HAL_Init+0x68>)
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	4a0e      	ldr	r2, [pc, #56]	; (8002564 <HAL_Init+0x6c>)
 800252c:	5cd3      	ldrb	r3, [r2, r3]
 800252e:	f003 031f 	and.w	r3, r3, #31
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	fa22 f303 	lsr.w	r3, r2, r3
 8002538:	4a0b      	ldr	r2, [pc, #44]	; (8002568 <HAL_Init+0x70>)
 800253a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800253c:	4a0b      	ldr	r2, [pc, #44]	; (800256c <HAL_Init+0x74>)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002542:	2000      	movs	r0, #0
 8002544:	f000 f814 	bl	8002570 <HAL_InitTick>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e002      	b.n	8002558 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002552:	f7ff f9e3 	bl	800191c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	58024400 	.word	0x58024400
 8002564:	0800bd1c 	.word	0x0800bd1c
 8002568:	20000004 	.word	0x20000004
 800256c:	20000000 	.word	0x20000000

08002570 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002578:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <HAL_InitTick+0x60>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e021      	b.n	80025c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002584:	4b13      	ldr	r3, [pc, #76]	; (80025d4 <HAL_InitTick+0x64>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <HAL_InitTick+0x60>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	4619      	mov	r1, r3
 800258e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002592:	fbb3 f3f1 	udiv	r3, r3, r1
 8002596:	fbb2 f3f3 	udiv	r3, r2, r3
 800259a:	4618      	mov	r0, r3
 800259c:	f000 f94d 	bl	800283a <HAL_SYSTICK_Config>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e00e      	b.n	80025c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b0f      	cmp	r3, #15
 80025ae:	d80a      	bhi.n	80025c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025b0:	2200      	movs	r2, #0
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	f04f 30ff 	mov.w	r0, #4294967295
 80025b8:	f000 f917 	bl	80027ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025bc:	4a06      	ldr	r2, [pc, #24]	; (80025d8 <HAL_InitTick+0x68>)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
 80025c4:	e000      	b.n	80025c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	2000000c 	.word	0x2000000c
 80025d4:	20000000 	.word	0x20000000
 80025d8:	20000008 	.word	0x20000008

080025dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025e0:	4b06      	ldr	r3, [pc, #24]	; (80025fc <HAL_IncTick+0x20>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	4b06      	ldr	r3, [pc, #24]	; (8002600 <HAL_IncTick+0x24>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4413      	add	r3, r2
 80025ec:	4a04      	ldr	r2, [pc, #16]	; (8002600 <HAL_IncTick+0x24>)
 80025ee:	6013      	str	r3, [r2, #0]
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	2000000c 	.word	0x2000000c
 8002600:	2000092c 	.word	0x2000092c

08002604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return uwTick;
 8002608:	4b03      	ldr	r3, [pc, #12]	; (8002618 <HAL_GetTick+0x14>)
 800260a:	681b      	ldr	r3, [r3, #0]
}
 800260c:	4618      	mov	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	2000092c 	.word	0x2000092c

0800261c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002620:	4b03      	ldr	r3, [pc, #12]	; (8002630 <HAL_GetREVID+0x14>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	0c1b      	lsrs	r3, r3, #16
}
 8002626:	4618      	mov	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	5c001000 	.word	0x5c001000

08002634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002644:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <__NVIC_SetPriorityGrouping+0x40>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002650:	4013      	ands	r3, r2
 8002652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <__NVIC_SetPriorityGrouping+0x44>)
 800265e:	4313      	orrs	r3, r2
 8002660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002662:	4a04      	ldr	r2, [pc, #16]	; (8002674 <__NVIC_SetPriorityGrouping+0x40>)
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	60d3      	str	r3, [r2, #12]
}
 8002668:	bf00      	nop
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	e000ed00 	.word	0xe000ed00
 8002678:	05fa0000 	.word	0x05fa0000

0800267c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002680:	4b04      	ldr	r3, [pc, #16]	; (8002694 <__NVIC_GetPriorityGrouping+0x18>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	0a1b      	lsrs	r3, r3, #8
 8002686:	f003 0307 	and.w	r3, r3, #7
}
 800268a:	4618      	mov	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	db0b      	blt.n	80026c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026aa:	88fb      	ldrh	r3, [r7, #6]
 80026ac:	f003 021f 	and.w	r2, r3, #31
 80026b0:	4907      	ldr	r1, [pc, #28]	; (80026d0 <__NVIC_EnableIRQ+0x38>)
 80026b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026b6:	095b      	lsrs	r3, r3, #5
 80026b8:	2001      	movs	r0, #1
 80026ba:	fa00 f202 	lsl.w	r2, r0, r2
 80026be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	e000e100 	.word	0xe000e100

080026d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	6039      	str	r1, [r7, #0]
 80026de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	db0a      	blt.n	80026fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	490c      	ldr	r1, [pc, #48]	; (8002720 <__NVIC_SetPriority+0x4c>)
 80026ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026f2:	0112      	lsls	r2, r2, #4
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	440b      	add	r3, r1
 80026f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026fc:	e00a      	b.n	8002714 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	b2da      	uxtb	r2, r3
 8002702:	4908      	ldr	r1, [pc, #32]	; (8002724 <__NVIC_SetPriority+0x50>)
 8002704:	88fb      	ldrh	r3, [r7, #6]
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	3b04      	subs	r3, #4
 800270c:	0112      	lsls	r2, r2, #4
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	440b      	add	r3, r1
 8002712:	761a      	strb	r2, [r3, #24]
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	e000e100 	.word	0xe000e100
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002728:	b480      	push	{r7}
 800272a:	b089      	sub	sp, #36	; 0x24
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	f1c3 0307 	rsb	r3, r3, #7
 8002742:	2b04      	cmp	r3, #4
 8002744:	bf28      	it	cs
 8002746:	2304      	movcs	r3, #4
 8002748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	3304      	adds	r3, #4
 800274e:	2b06      	cmp	r3, #6
 8002750:	d902      	bls.n	8002758 <NVIC_EncodePriority+0x30>
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	3b03      	subs	r3, #3
 8002756:	e000      	b.n	800275a <NVIC_EncodePriority+0x32>
 8002758:	2300      	movs	r3, #0
 800275a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800275c:	f04f 32ff 	mov.w	r2, #4294967295
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	43da      	mvns	r2, r3
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	401a      	ands	r2, r3
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002770:	f04f 31ff 	mov.w	r1, #4294967295
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	fa01 f303 	lsl.w	r3, r1, r3
 800277a:	43d9      	mvns	r1, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002780:	4313      	orrs	r3, r2
         );
}
 8002782:	4618      	mov	r0, r3
 8002784:	3724      	adds	r7, #36	; 0x24
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
	...

08002790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3b01      	subs	r3, #1
 800279c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027a0:	d301      	bcc.n	80027a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027a2:	2301      	movs	r3, #1
 80027a4:	e00f      	b.n	80027c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027a6:	4a0a      	ldr	r2, [pc, #40]	; (80027d0 <SysTick_Config+0x40>)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ae:	210f      	movs	r1, #15
 80027b0:	f04f 30ff 	mov.w	r0, #4294967295
 80027b4:	f7ff ff8e 	bl	80026d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027b8:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <SysTick_Config+0x40>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027be:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <SysTick_Config+0x40>)
 80027c0:	2207      	movs	r2, #7
 80027c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	e000e010 	.word	0xe000e010

080027d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7ff ff29 	bl	8002634 <__NVIC_SetPriorityGrouping>
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b086      	sub	sp, #24
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	4603      	mov	r3, r0
 80027f2:	60b9      	str	r1, [r7, #8]
 80027f4:	607a      	str	r2, [r7, #4]
 80027f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027f8:	f7ff ff40 	bl	800267c <__NVIC_GetPriorityGrouping>
 80027fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	68b9      	ldr	r1, [r7, #8]
 8002802:	6978      	ldr	r0, [r7, #20]
 8002804:	f7ff ff90 	bl	8002728 <NVIC_EncodePriority>
 8002808:	4602      	mov	r2, r0
 800280a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800280e:	4611      	mov	r1, r2
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ff5f 	bl	80026d4 <__NVIC_SetPriority>
}
 8002816:	bf00      	nop
 8002818:	3718      	adds	r7, #24
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
 8002824:	4603      	mov	r3, r0
 8002826:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002828:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff ff33 	bl	8002698 <__NVIC_EnableIRQ>
}
 8002832:	bf00      	nop
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b082      	sub	sp, #8
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff ffa4 	bl	8002790 <SysTick_Config>
 8002848:	4603      	mov	r3, r0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
	...

08002854 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e054      	b.n	8002910 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	7f5b      	ldrb	r3, [r3, #29]
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	d105      	bne.n	800287c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff f86a 	bl	8001950 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2202      	movs	r2, #2
 8002880:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	791b      	ldrb	r3, [r3, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10c      	bne.n	80028a4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a22      	ldr	r2, [pc, #136]	; (8002918 <HAL_CRC_Init+0xc4>)
 8002890:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0218 	bic.w	r2, r2, #24
 80028a0:	609a      	str	r2, [r3, #8]
 80028a2:	e00c      	b.n	80028be <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6899      	ldr	r1, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	461a      	mov	r2, r3
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f834 	bl	800291c <HAL_CRCEx_Polynomial_Set>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e028      	b.n	8002910 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	795b      	ldrb	r3, [r3, #5]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d105      	bne.n	80028d2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f04f 32ff 	mov.w	r2, #4294967295
 80028ce:	611a      	str	r2, [r3, #16]
 80028d0:	e004      	b.n	80028dc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6912      	ldr	r2, [r2, #16]
 80028da:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695a      	ldr	r2, [r3, #20]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699a      	ldr	r2, [r3, #24]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	04c11db7 	.word	0x04c11db7

0800291c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800291c:	b480      	push	{r7}
 800291e:	b087      	sub	sp, #28
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002928:	2300      	movs	r3, #0
 800292a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800292c:	231f      	movs	r3, #31
 800292e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002930:	bf00      	nop
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1e5a      	subs	r2, r3, #1
 8002936:	613a      	str	r2, [r7, #16]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d009      	beq.n	8002950 <HAL_CRCEx_Polynomial_Set+0x34>
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	f003 031f 	and.w	r3, r3, #31
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	fa22 f303 	lsr.w	r3, r2, r3
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0f0      	beq.n	8002932 <HAL_CRCEx_Polynomial_Set+0x16>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b18      	cmp	r3, #24
 8002954:	d846      	bhi.n	80029e4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002956:	a201      	add	r2, pc, #4	; (adr r2, 800295c <HAL_CRCEx_Polynomial_Set+0x40>)
 8002958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295c:	080029eb 	.word	0x080029eb
 8002960:	080029e5 	.word	0x080029e5
 8002964:	080029e5 	.word	0x080029e5
 8002968:	080029e5 	.word	0x080029e5
 800296c:	080029e5 	.word	0x080029e5
 8002970:	080029e5 	.word	0x080029e5
 8002974:	080029e5 	.word	0x080029e5
 8002978:	080029e5 	.word	0x080029e5
 800297c:	080029d9 	.word	0x080029d9
 8002980:	080029e5 	.word	0x080029e5
 8002984:	080029e5 	.word	0x080029e5
 8002988:	080029e5 	.word	0x080029e5
 800298c:	080029e5 	.word	0x080029e5
 8002990:	080029e5 	.word	0x080029e5
 8002994:	080029e5 	.word	0x080029e5
 8002998:	080029e5 	.word	0x080029e5
 800299c:	080029cd 	.word	0x080029cd
 80029a0:	080029e5 	.word	0x080029e5
 80029a4:	080029e5 	.word	0x080029e5
 80029a8:	080029e5 	.word	0x080029e5
 80029ac:	080029e5 	.word	0x080029e5
 80029b0:	080029e5 	.word	0x080029e5
 80029b4:	080029e5 	.word	0x080029e5
 80029b8:	080029e5 	.word	0x080029e5
 80029bc:	080029c1 	.word	0x080029c1
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	2b06      	cmp	r3, #6
 80029c4:	d913      	bls.n	80029ee <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80029ca:	e010      	b.n	80029ee <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	2b07      	cmp	r3, #7
 80029d0:	d90f      	bls.n	80029f2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80029d6:	e00c      	b.n	80029f2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	2b0f      	cmp	r3, #15
 80029dc:	d90b      	bls.n	80029f6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80029e2:	e008      	b.n	80029f6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	75fb      	strb	r3, [r7, #23]
      break;
 80029e8:	e006      	b.n	80029f8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80029ea:	bf00      	nop
 80029ec:	e004      	b.n	80029f8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80029ee:	bf00      	nop
 80029f0:	e002      	b.n	80029f8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80029f2:	bf00      	nop
 80029f4:	e000      	b.n	80029f8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80029f6:	bf00      	nop
  }
  if (status == HAL_OK)
 80029f8:	7dfb      	ldrb	r3, [r7, #23]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10d      	bne.n	8002a1a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f023 0118 	bic.w	r1, r3, #24
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	371c      	adds	r7, #28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002a30:	f7ff fde8 	bl	8002604 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e316      	b.n	800306e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a66      	ldr	r2, [pc, #408]	; (8002be0 <HAL_DMA_Init+0x1b8>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d04a      	beq.n	8002ae0 <HAL_DMA_Init+0xb8>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a65      	ldr	r2, [pc, #404]	; (8002be4 <HAL_DMA_Init+0x1bc>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d045      	beq.n	8002ae0 <HAL_DMA_Init+0xb8>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a63      	ldr	r2, [pc, #396]	; (8002be8 <HAL_DMA_Init+0x1c0>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d040      	beq.n	8002ae0 <HAL_DMA_Init+0xb8>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a62      	ldr	r2, [pc, #392]	; (8002bec <HAL_DMA_Init+0x1c4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d03b      	beq.n	8002ae0 <HAL_DMA_Init+0xb8>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a60      	ldr	r2, [pc, #384]	; (8002bf0 <HAL_DMA_Init+0x1c8>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d036      	beq.n	8002ae0 <HAL_DMA_Init+0xb8>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a5f      	ldr	r2, [pc, #380]	; (8002bf4 <HAL_DMA_Init+0x1cc>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d031      	beq.n	8002ae0 <HAL_DMA_Init+0xb8>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a5d      	ldr	r2, [pc, #372]	; (8002bf8 <HAL_DMA_Init+0x1d0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d02c      	beq.n	8002ae0 <HAL_DMA_Init+0xb8>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a5c      	ldr	r2, [pc, #368]	; (8002bfc <HAL_DMA_Init+0x1d4>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d027      	beq.n	8002ae0 <HAL_DMA_Init+0xb8>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a5a      	ldr	r2, [pc, #360]	; (8002c00 <HAL_DMA_Init+0x1d8>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d022      	beq.n	8002ae0 <HAL_DMA_Init+0xb8>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a59      	ldr	r2, [pc, #356]	; (8002c04 <HAL_DMA_Init+0x1dc>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d01d      	beq.n	8002ae0 <HAL_DMA_Init+0xb8>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a57      	ldr	r2, [pc, #348]	; (8002c08 <HAL_DMA_Init+0x1e0>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d018      	beq.n	8002ae0 <HAL_DMA_Init+0xb8>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a56      	ldr	r2, [pc, #344]	; (8002c0c <HAL_DMA_Init+0x1e4>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d013      	beq.n	8002ae0 <HAL_DMA_Init+0xb8>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a54      	ldr	r2, [pc, #336]	; (8002c10 <HAL_DMA_Init+0x1e8>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d00e      	beq.n	8002ae0 <HAL_DMA_Init+0xb8>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a53      	ldr	r2, [pc, #332]	; (8002c14 <HAL_DMA_Init+0x1ec>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d009      	beq.n	8002ae0 <HAL_DMA_Init+0xb8>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a51      	ldr	r2, [pc, #324]	; (8002c18 <HAL_DMA_Init+0x1f0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d004      	beq.n	8002ae0 <HAL_DMA_Init+0xb8>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a50      	ldr	r2, [pc, #320]	; (8002c1c <HAL_DMA_Init+0x1f4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d101      	bne.n	8002ae4 <HAL_DMA_Init+0xbc>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <HAL_DMA_Init+0xbe>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 813b 	beq.w	8002d62 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2202      	movs	r2, #2
 8002af8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a37      	ldr	r2, [pc, #220]	; (8002be0 <HAL_DMA_Init+0x1b8>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d04a      	beq.n	8002b9c <HAL_DMA_Init+0x174>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a36      	ldr	r2, [pc, #216]	; (8002be4 <HAL_DMA_Init+0x1bc>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d045      	beq.n	8002b9c <HAL_DMA_Init+0x174>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a34      	ldr	r2, [pc, #208]	; (8002be8 <HAL_DMA_Init+0x1c0>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d040      	beq.n	8002b9c <HAL_DMA_Init+0x174>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a33      	ldr	r2, [pc, #204]	; (8002bec <HAL_DMA_Init+0x1c4>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d03b      	beq.n	8002b9c <HAL_DMA_Init+0x174>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a31      	ldr	r2, [pc, #196]	; (8002bf0 <HAL_DMA_Init+0x1c8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d036      	beq.n	8002b9c <HAL_DMA_Init+0x174>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a30      	ldr	r2, [pc, #192]	; (8002bf4 <HAL_DMA_Init+0x1cc>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d031      	beq.n	8002b9c <HAL_DMA_Init+0x174>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a2e      	ldr	r2, [pc, #184]	; (8002bf8 <HAL_DMA_Init+0x1d0>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d02c      	beq.n	8002b9c <HAL_DMA_Init+0x174>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a2d      	ldr	r2, [pc, #180]	; (8002bfc <HAL_DMA_Init+0x1d4>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d027      	beq.n	8002b9c <HAL_DMA_Init+0x174>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a2b      	ldr	r2, [pc, #172]	; (8002c00 <HAL_DMA_Init+0x1d8>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d022      	beq.n	8002b9c <HAL_DMA_Init+0x174>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a2a      	ldr	r2, [pc, #168]	; (8002c04 <HAL_DMA_Init+0x1dc>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d01d      	beq.n	8002b9c <HAL_DMA_Init+0x174>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a28      	ldr	r2, [pc, #160]	; (8002c08 <HAL_DMA_Init+0x1e0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d018      	beq.n	8002b9c <HAL_DMA_Init+0x174>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a27      	ldr	r2, [pc, #156]	; (8002c0c <HAL_DMA_Init+0x1e4>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d013      	beq.n	8002b9c <HAL_DMA_Init+0x174>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a25      	ldr	r2, [pc, #148]	; (8002c10 <HAL_DMA_Init+0x1e8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d00e      	beq.n	8002b9c <HAL_DMA_Init+0x174>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a24      	ldr	r2, [pc, #144]	; (8002c14 <HAL_DMA_Init+0x1ec>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d009      	beq.n	8002b9c <HAL_DMA_Init+0x174>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a22      	ldr	r2, [pc, #136]	; (8002c18 <HAL_DMA_Init+0x1f0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d004      	beq.n	8002b9c <HAL_DMA_Init+0x174>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a21      	ldr	r2, [pc, #132]	; (8002c1c <HAL_DMA_Init+0x1f4>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d108      	bne.n	8002bae <HAL_DMA_Init+0x186>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0201 	bic.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	e007      	b.n	8002bbe <HAL_DMA_Init+0x196>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0201 	bic.w	r2, r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002bbe:	e02f      	b.n	8002c20 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bc0:	f7ff fd20 	bl	8002604 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b05      	cmp	r3, #5
 8002bcc:	d928      	bls.n	8002c20 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e246      	b.n	800306e <HAL_DMA_Init+0x646>
 8002be0:	40020010 	.word	0x40020010
 8002be4:	40020028 	.word	0x40020028
 8002be8:	40020040 	.word	0x40020040
 8002bec:	40020058 	.word	0x40020058
 8002bf0:	40020070 	.word	0x40020070
 8002bf4:	40020088 	.word	0x40020088
 8002bf8:	400200a0 	.word	0x400200a0
 8002bfc:	400200b8 	.word	0x400200b8
 8002c00:	40020410 	.word	0x40020410
 8002c04:	40020428 	.word	0x40020428
 8002c08:	40020440 	.word	0x40020440
 8002c0c:	40020458 	.word	0x40020458
 8002c10:	40020470 	.word	0x40020470
 8002c14:	40020488 	.word	0x40020488
 8002c18:	400204a0 	.word	0x400204a0
 8002c1c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1c8      	bne.n	8002bc0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	4b83      	ldr	r3, [pc, #524]	; (8002e48 <HAL_DMA_Init+0x420>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002c46:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c52:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c5e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d107      	bne.n	8002c84 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002c84:	4b71      	ldr	r3, [pc, #452]	; (8002e4c <HAL_DMA_Init+0x424>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4b71      	ldr	r3, [pc, #452]	; (8002e50 <HAL_DMA_Init+0x428>)
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c90:	d328      	bcc.n	8002ce4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b28      	cmp	r3, #40	; 0x28
 8002c98:	d903      	bls.n	8002ca2 <HAL_DMA_Init+0x27a>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b2e      	cmp	r3, #46	; 0x2e
 8002ca0:	d917      	bls.n	8002cd2 <HAL_DMA_Init+0x2aa>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b3e      	cmp	r3, #62	; 0x3e
 8002ca8:	d903      	bls.n	8002cb2 <HAL_DMA_Init+0x28a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b42      	cmp	r3, #66	; 0x42
 8002cb0:	d90f      	bls.n	8002cd2 <HAL_DMA_Init+0x2aa>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b46      	cmp	r3, #70	; 0x46
 8002cb8:	d903      	bls.n	8002cc2 <HAL_DMA_Init+0x29a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b48      	cmp	r3, #72	; 0x48
 8002cc0:	d907      	bls.n	8002cd2 <HAL_DMA_Init+0x2aa>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b4e      	cmp	r3, #78	; 0x4e
 8002cc8:	d905      	bls.n	8002cd6 <HAL_DMA_Init+0x2ae>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b52      	cmp	r3, #82	; 0x52
 8002cd0:	d801      	bhi.n	8002cd6 <HAL_DMA_Init+0x2ae>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <HAL_DMA_Init+0x2b0>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ce2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f023 0307 	bic.w	r3, r3, #7
 8002cfa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d117      	bne.n	8002d3e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00e      	beq.n	8002d3e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f001 ff1b 	bl	8004b5c <DMA_CheckFifoParam>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d008      	beq.n	8002d3e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2240      	movs	r2, #64	; 0x40
 8002d30:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e197      	b.n	800306e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f001 fe56 	bl	80049f8 <DMA_CalcBaseAndBitshift>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d54:	f003 031f 	and.w	r3, r3, #31
 8002d58:	223f      	movs	r2, #63	; 0x3f
 8002d5a:	409a      	lsls	r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	609a      	str	r2, [r3, #8]
 8002d60:	e0cd      	b.n	8002efe <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a3b      	ldr	r2, [pc, #236]	; (8002e54 <HAL_DMA_Init+0x42c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d022      	beq.n	8002db2 <HAL_DMA_Init+0x38a>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a39      	ldr	r2, [pc, #228]	; (8002e58 <HAL_DMA_Init+0x430>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d01d      	beq.n	8002db2 <HAL_DMA_Init+0x38a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a38      	ldr	r2, [pc, #224]	; (8002e5c <HAL_DMA_Init+0x434>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d018      	beq.n	8002db2 <HAL_DMA_Init+0x38a>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a36      	ldr	r2, [pc, #216]	; (8002e60 <HAL_DMA_Init+0x438>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d013      	beq.n	8002db2 <HAL_DMA_Init+0x38a>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a35      	ldr	r2, [pc, #212]	; (8002e64 <HAL_DMA_Init+0x43c>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d00e      	beq.n	8002db2 <HAL_DMA_Init+0x38a>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a33      	ldr	r2, [pc, #204]	; (8002e68 <HAL_DMA_Init+0x440>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d009      	beq.n	8002db2 <HAL_DMA_Init+0x38a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a32      	ldr	r2, [pc, #200]	; (8002e6c <HAL_DMA_Init+0x444>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d004      	beq.n	8002db2 <HAL_DMA_Init+0x38a>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a30      	ldr	r2, [pc, #192]	; (8002e70 <HAL_DMA_Init+0x448>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d101      	bne.n	8002db6 <HAL_DMA_Init+0x38e>
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <HAL_DMA_Init+0x390>
 8002db6:	2300      	movs	r3, #0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 8097 	beq.w	8002eec <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a24      	ldr	r2, [pc, #144]	; (8002e54 <HAL_DMA_Init+0x42c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d021      	beq.n	8002e0c <HAL_DMA_Init+0x3e4>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a22      	ldr	r2, [pc, #136]	; (8002e58 <HAL_DMA_Init+0x430>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d01c      	beq.n	8002e0c <HAL_DMA_Init+0x3e4>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a21      	ldr	r2, [pc, #132]	; (8002e5c <HAL_DMA_Init+0x434>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d017      	beq.n	8002e0c <HAL_DMA_Init+0x3e4>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a1f      	ldr	r2, [pc, #124]	; (8002e60 <HAL_DMA_Init+0x438>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d012      	beq.n	8002e0c <HAL_DMA_Init+0x3e4>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a1e      	ldr	r2, [pc, #120]	; (8002e64 <HAL_DMA_Init+0x43c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d00d      	beq.n	8002e0c <HAL_DMA_Init+0x3e4>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a1c      	ldr	r2, [pc, #112]	; (8002e68 <HAL_DMA_Init+0x440>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d008      	beq.n	8002e0c <HAL_DMA_Init+0x3e4>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a1b      	ldr	r2, [pc, #108]	; (8002e6c <HAL_DMA_Init+0x444>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d003      	beq.n	8002e0c <HAL_DMA_Init+0x3e4>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a19      	ldr	r2, [pc, #100]	; (8002e70 <HAL_DMA_Init+0x448>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2202      	movs	r2, #2
 8002e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	4b12      	ldr	r3, [pc, #72]	; (8002e74 <HAL_DMA_Init+0x44c>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2b40      	cmp	r3, #64	; 0x40
 8002e34:	d020      	beq.n	8002e78 <HAL_DMA_Init+0x450>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	2b80      	cmp	r3, #128	; 0x80
 8002e3c:	d102      	bne.n	8002e44 <HAL_DMA_Init+0x41c>
 8002e3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e42:	e01a      	b.n	8002e7a <HAL_DMA_Init+0x452>
 8002e44:	2300      	movs	r3, #0
 8002e46:	e018      	b.n	8002e7a <HAL_DMA_Init+0x452>
 8002e48:	fe10803f 	.word	0xfe10803f
 8002e4c:	5c001000 	.word	0x5c001000
 8002e50:	ffff0000 	.word	0xffff0000
 8002e54:	58025408 	.word	0x58025408
 8002e58:	5802541c 	.word	0x5802541c
 8002e5c:	58025430 	.word	0x58025430
 8002e60:	58025444 	.word	0x58025444
 8002e64:	58025458 	.word	0x58025458
 8002e68:	5802546c 	.word	0x5802546c
 8002e6c:	58025480 	.word	0x58025480
 8002e70:	58025494 	.word	0x58025494
 8002e74:	fffe000f 	.word	0xfffe000f
 8002e78:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	68d2      	ldr	r2, [r2, #12]
 8002e7e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002e88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002e90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002e98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002ea0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002ea8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	4b6e      	ldr	r3, [pc, #440]	; (8003078 <HAL_DMA_Init+0x650>)
 8002ec0:	4413      	add	r3, r2
 8002ec2:	4a6e      	ldr	r2, [pc, #440]	; (800307c <HAL_DMA_Init+0x654>)
 8002ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec8:	091b      	lsrs	r3, r3, #4
 8002eca:	009a      	lsls	r2, r3, #2
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f001 fd91 	bl	80049f8 <DMA_CalcBaseAndBitshift>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ede:	f003 031f 	and.w	r3, r3, #31
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	409a      	lsls	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	605a      	str	r2, [r3, #4]
 8002eea:	e008      	b.n	8002efe <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2240      	movs	r2, #64	; 0x40
 8002ef0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2203      	movs	r2, #3
 8002ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e0b7      	b.n	800306e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a5f      	ldr	r2, [pc, #380]	; (8003080 <HAL_DMA_Init+0x658>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d072      	beq.n	8002fee <HAL_DMA_Init+0x5c6>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a5d      	ldr	r2, [pc, #372]	; (8003084 <HAL_DMA_Init+0x65c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d06d      	beq.n	8002fee <HAL_DMA_Init+0x5c6>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a5c      	ldr	r2, [pc, #368]	; (8003088 <HAL_DMA_Init+0x660>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d068      	beq.n	8002fee <HAL_DMA_Init+0x5c6>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a5a      	ldr	r2, [pc, #360]	; (800308c <HAL_DMA_Init+0x664>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d063      	beq.n	8002fee <HAL_DMA_Init+0x5c6>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a59      	ldr	r2, [pc, #356]	; (8003090 <HAL_DMA_Init+0x668>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d05e      	beq.n	8002fee <HAL_DMA_Init+0x5c6>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a57      	ldr	r2, [pc, #348]	; (8003094 <HAL_DMA_Init+0x66c>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d059      	beq.n	8002fee <HAL_DMA_Init+0x5c6>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a56      	ldr	r2, [pc, #344]	; (8003098 <HAL_DMA_Init+0x670>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d054      	beq.n	8002fee <HAL_DMA_Init+0x5c6>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a54      	ldr	r2, [pc, #336]	; (800309c <HAL_DMA_Init+0x674>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d04f      	beq.n	8002fee <HAL_DMA_Init+0x5c6>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a53      	ldr	r2, [pc, #332]	; (80030a0 <HAL_DMA_Init+0x678>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d04a      	beq.n	8002fee <HAL_DMA_Init+0x5c6>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a51      	ldr	r2, [pc, #324]	; (80030a4 <HAL_DMA_Init+0x67c>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d045      	beq.n	8002fee <HAL_DMA_Init+0x5c6>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a50      	ldr	r2, [pc, #320]	; (80030a8 <HAL_DMA_Init+0x680>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d040      	beq.n	8002fee <HAL_DMA_Init+0x5c6>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a4e      	ldr	r2, [pc, #312]	; (80030ac <HAL_DMA_Init+0x684>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d03b      	beq.n	8002fee <HAL_DMA_Init+0x5c6>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a4d      	ldr	r2, [pc, #308]	; (80030b0 <HAL_DMA_Init+0x688>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d036      	beq.n	8002fee <HAL_DMA_Init+0x5c6>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a4b      	ldr	r2, [pc, #300]	; (80030b4 <HAL_DMA_Init+0x68c>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d031      	beq.n	8002fee <HAL_DMA_Init+0x5c6>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a4a      	ldr	r2, [pc, #296]	; (80030b8 <HAL_DMA_Init+0x690>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d02c      	beq.n	8002fee <HAL_DMA_Init+0x5c6>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a48      	ldr	r2, [pc, #288]	; (80030bc <HAL_DMA_Init+0x694>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d027      	beq.n	8002fee <HAL_DMA_Init+0x5c6>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a47      	ldr	r2, [pc, #284]	; (80030c0 <HAL_DMA_Init+0x698>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d022      	beq.n	8002fee <HAL_DMA_Init+0x5c6>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a45      	ldr	r2, [pc, #276]	; (80030c4 <HAL_DMA_Init+0x69c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d01d      	beq.n	8002fee <HAL_DMA_Init+0x5c6>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a44      	ldr	r2, [pc, #272]	; (80030c8 <HAL_DMA_Init+0x6a0>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d018      	beq.n	8002fee <HAL_DMA_Init+0x5c6>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a42      	ldr	r2, [pc, #264]	; (80030cc <HAL_DMA_Init+0x6a4>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d013      	beq.n	8002fee <HAL_DMA_Init+0x5c6>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a41      	ldr	r2, [pc, #260]	; (80030d0 <HAL_DMA_Init+0x6a8>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d00e      	beq.n	8002fee <HAL_DMA_Init+0x5c6>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a3f      	ldr	r2, [pc, #252]	; (80030d4 <HAL_DMA_Init+0x6ac>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d009      	beq.n	8002fee <HAL_DMA_Init+0x5c6>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a3e      	ldr	r2, [pc, #248]	; (80030d8 <HAL_DMA_Init+0x6b0>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d004      	beq.n	8002fee <HAL_DMA_Init+0x5c6>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a3c      	ldr	r2, [pc, #240]	; (80030dc <HAL_DMA_Init+0x6b4>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d101      	bne.n	8002ff2 <HAL_DMA_Init+0x5ca>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <HAL_DMA_Init+0x5cc>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d032      	beq.n	800305e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f001 fe2b 	bl	8004c54 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2b80      	cmp	r3, #128	; 0x80
 8003004:	d102      	bne.n	800300c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003014:	b2d2      	uxtb	r2, r2
 8003016:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003020:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d010      	beq.n	800304c <HAL_DMA_Init+0x624>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b08      	cmp	r3, #8
 8003030:	d80c      	bhi.n	800304c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f001 fea8 	bl	8004d88 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003048:	605a      	str	r2, [r3, #4]
 800304a:	e008      	b.n	800305e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	a7fdabf8 	.word	0xa7fdabf8
 800307c:	cccccccd 	.word	0xcccccccd
 8003080:	40020010 	.word	0x40020010
 8003084:	40020028 	.word	0x40020028
 8003088:	40020040 	.word	0x40020040
 800308c:	40020058 	.word	0x40020058
 8003090:	40020070 	.word	0x40020070
 8003094:	40020088 	.word	0x40020088
 8003098:	400200a0 	.word	0x400200a0
 800309c:	400200b8 	.word	0x400200b8
 80030a0:	40020410 	.word	0x40020410
 80030a4:	40020428 	.word	0x40020428
 80030a8:	40020440 	.word	0x40020440
 80030ac:	40020458 	.word	0x40020458
 80030b0:	40020470 	.word	0x40020470
 80030b4:	40020488 	.word	0x40020488
 80030b8:	400204a0 	.word	0x400204a0
 80030bc:	400204b8 	.word	0x400204b8
 80030c0:	58025408 	.word	0x58025408
 80030c4:	5802541c 	.word	0x5802541c
 80030c8:	58025430 	.word	0x58025430
 80030cc:	58025444 	.word	0x58025444
 80030d0:	58025458 	.word	0x58025458
 80030d4:	5802546c 	.word	0x5802546c
 80030d8:	58025480 	.word	0x58025480
 80030dc:	58025494 	.word	0x58025494

080030e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80030e8:	f7ff fa8c 	bl	8002604 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e2dc      	b.n	80036b2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d008      	beq.n	8003116 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2280      	movs	r2, #128	; 0x80
 8003108:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e2cd      	b.n	80036b2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a76      	ldr	r2, [pc, #472]	; (80032f4 <HAL_DMA_Abort+0x214>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d04a      	beq.n	80031b6 <HAL_DMA_Abort+0xd6>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a74      	ldr	r2, [pc, #464]	; (80032f8 <HAL_DMA_Abort+0x218>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d045      	beq.n	80031b6 <HAL_DMA_Abort+0xd6>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a73      	ldr	r2, [pc, #460]	; (80032fc <HAL_DMA_Abort+0x21c>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d040      	beq.n	80031b6 <HAL_DMA_Abort+0xd6>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a71      	ldr	r2, [pc, #452]	; (8003300 <HAL_DMA_Abort+0x220>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d03b      	beq.n	80031b6 <HAL_DMA_Abort+0xd6>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a70      	ldr	r2, [pc, #448]	; (8003304 <HAL_DMA_Abort+0x224>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d036      	beq.n	80031b6 <HAL_DMA_Abort+0xd6>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a6e      	ldr	r2, [pc, #440]	; (8003308 <HAL_DMA_Abort+0x228>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d031      	beq.n	80031b6 <HAL_DMA_Abort+0xd6>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a6d      	ldr	r2, [pc, #436]	; (800330c <HAL_DMA_Abort+0x22c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d02c      	beq.n	80031b6 <HAL_DMA_Abort+0xd6>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a6b      	ldr	r2, [pc, #428]	; (8003310 <HAL_DMA_Abort+0x230>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d027      	beq.n	80031b6 <HAL_DMA_Abort+0xd6>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a6a      	ldr	r2, [pc, #424]	; (8003314 <HAL_DMA_Abort+0x234>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d022      	beq.n	80031b6 <HAL_DMA_Abort+0xd6>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a68      	ldr	r2, [pc, #416]	; (8003318 <HAL_DMA_Abort+0x238>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d01d      	beq.n	80031b6 <HAL_DMA_Abort+0xd6>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a67      	ldr	r2, [pc, #412]	; (800331c <HAL_DMA_Abort+0x23c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d018      	beq.n	80031b6 <HAL_DMA_Abort+0xd6>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a65      	ldr	r2, [pc, #404]	; (8003320 <HAL_DMA_Abort+0x240>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d013      	beq.n	80031b6 <HAL_DMA_Abort+0xd6>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a64      	ldr	r2, [pc, #400]	; (8003324 <HAL_DMA_Abort+0x244>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d00e      	beq.n	80031b6 <HAL_DMA_Abort+0xd6>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a62      	ldr	r2, [pc, #392]	; (8003328 <HAL_DMA_Abort+0x248>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d009      	beq.n	80031b6 <HAL_DMA_Abort+0xd6>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a61      	ldr	r2, [pc, #388]	; (800332c <HAL_DMA_Abort+0x24c>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d004      	beq.n	80031b6 <HAL_DMA_Abort+0xd6>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a5f      	ldr	r2, [pc, #380]	; (8003330 <HAL_DMA_Abort+0x250>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d101      	bne.n	80031ba <HAL_DMA_Abort+0xda>
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <HAL_DMA_Abort+0xdc>
 80031ba:	2300      	movs	r3, #0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d013      	beq.n	80031e8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 021e 	bic.w	r2, r2, #30
 80031ce:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695a      	ldr	r2, [r3, #20]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031de:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	617b      	str	r3, [r7, #20]
 80031e6:	e00a      	b.n	80031fe <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 020e 	bic.w	r2, r2, #14
 80031f6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a3c      	ldr	r2, [pc, #240]	; (80032f4 <HAL_DMA_Abort+0x214>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d072      	beq.n	80032ee <HAL_DMA_Abort+0x20e>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a3a      	ldr	r2, [pc, #232]	; (80032f8 <HAL_DMA_Abort+0x218>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d06d      	beq.n	80032ee <HAL_DMA_Abort+0x20e>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a39      	ldr	r2, [pc, #228]	; (80032fc <HAL_DMA_Abort+0x21c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d068      	beq.n	80032ee <HAL_DMA_Abort+0x20e>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a37      	ldr	r2, [pc, #220]	; (8003300 <HAL_DMA_Abort+0x220>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d063      	beq.n	80032ee <HAL_DMA_Abort+0x20e>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a36      	ldr	r2, [pc, #216]	; (8003304 <HAL_DMA_Abort+0x224>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d05e      	beq.n	80032ee <HAL_DMA_Abort+0x20e>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a34      	ldr	r2, [pc, #208]	; (8003308 <HAL_DMA_Abort+0x228>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d059      	beq.n	80032ee <HAL_DMA_Abort+0x20e>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a33      	ldr	r2, [pc, #204]	; (800330c <HAL_DMA_Abort+0x22c>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d054      	beq.n	80032ee <HAL_DMA_Abort+0x20e>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a31      	ldr	r2, [pc, #196]	; (8003310 <HAL_DMA_Abort+0x230>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d04f      	beq.n	80032ee <HAL_DMA_Abort+0x20e>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a30      	ldr	r2, [pc, #192]	; (8003314 <HAL_DMA_Abort+0x234>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d04a      	beq.n	80032ee <HAL_DMA_Abort+0x20e>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a2e      	ldr	r2, [pc, #184]	; (8003318 <HAL_DMA_Abort+0x238>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d045      	beq.n	80032ee <HAL_DMA_Abort+0x20e>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a2d      	ldr	r2, [pc, #180]	; (800331c <HAL_DMA_Abort+0x23c>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d040      	beq.n	80032ee <HAL_DMA_Abort+0x20e>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a2b      	ldr	r2, [pc, #172]	; (8003320 <HAL_DMA_Abort+0x240>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d03b      	beq.n	80032ee <HAL_DMA_Abort+0x20e>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a2a      	ldr	r2, [pc, #168]	; (8003324 <HAL_DMA_Abort+0x244>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d036      	beq.n	80032ee <HAL_DMA_Abort+0x20e>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a28      	ldr	r2, [pc, #160]	; (8003328 <HAL_DMA_Abort+0x248>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d031      	beq.n	80032ee <HAL_DMA_Abort+0x20e>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a27      	ldr	r2, [pc, #156]	; (800332c <HAL_DMA_Abort+0x24c>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d02c      	beq.n	80032ee <HAL_DMA_Abort+0x20e>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a25      	ldr	r2, [pc, #148]	; (8003330 <HAL_DMA_Abort+0x250>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d027      	beq.n	80032ee <HAL_DMA_Abort+0x20e>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a24      	ldr	r2, [pc, #144]	; (8003334 <HAL_DMA_Abort+0x254>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d022      	beq.n	80032ee <HAL_DMA_Abort+0x20e>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a22      	ldr	r2, [pc, #136]	; (8003338 <HAL_DMA_Abort+0x258>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d01d      	beq.n	80032ee <HAL_DMA_Abort+0x20e>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a21      	ldr	r2, [pc, #132]	; (800333c <HAL_DMA_Abort+0x25c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d018      	beq.n	80032ee <HAL_DMA_Abort+0x20e>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a1f      	ldr	r2, [pc, #124]	; (8003340 <HAL_DMA_Abort+0x260>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d013      	beq.n	80032ee <HAL_DMA_Abort+0x20e>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a1e      	ldr	r2, [pc, #120]	; (8003344 <HAL_DMA_Abort+0x264>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d00e      	beq.n	80032ee <HAL_DMA_Abort+0x20e>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a1c      	ldr	r2, [pc, #112]	; (8003348 <HAL_DMA_Abort+0x268>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d009      	beq.n	80032ee <HAL_DMA_Abort+0x20e>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a1b      	ldr	r2, [pc, #108]	; (800334c <HAL_DMA_Abort+0x26c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d004      	beq.n	80032ee <HAL_DMA_Abort+0x20e>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a19      	ldr	r2, [pc, #100]	; (8003350 <HAL_DMA_Abort+0x270>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d132      	bne.n	8003354 <HAL_DMA_Abort+0x274>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e031      	b.n	8003356 <HAL_DMA_Abort+0x276>
 80032f2:	bf00      	nop
 80032f4:	40020010 	.word	0x40020010
 80032f8:	40020028 	.word	0x40020028
 80032fc:	40020040 	.word	0x40020040
 8003300:	40020058 	.word	0x40020058
 8003304:	40020070 	.word	0x40020070
 8003308:	40020088 	.word	0x40020088
 800330c:	400200a0 	.word	0x400200a0
 8003310:	400200b8 	.word	0x400200b8
 8003314:	40020410 	.word	0x40020410
 8003318:	40020428 	.word	0x40020428
 800331c:	40020440 	.word	0x40020440
 8003320:	40020458 	.word	0x40020458
 8003324:	40020470 	.word	0x40020470
 8003328:	40020488 	.word	0x40020488
 800332c:	400204a0 	.word	0x400204a0
 8003330:	400204b8 	.word	0x400204b8
 8003334:	58025408 	.word	0x58025408
 8003338:	5802541c 	.word	0x5802541c
 800333c:	58025430 	.word	0x58025430
 8003340:	58025444 	.word	0x58025444
 8003344:	58025458 	.word	0x58025458
 8003348:	5802546c 	.word	0x5802546c
 800334c:	58025480 	.word	0x58025480
 8003350:	58025494 	.word	0x58025494
 8003354:	2300      	movs	r3, #0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d007      	beq.n	800336a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003364:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003368:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a6d      	ldr	r2, [pc, #436]	; (8003524 <HAL_DMA_Abort+0x444>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d04a      	beq.n	800340a <HAL_DMA_Abort+0x32a>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a6b      	ldr	r2, [pc, #428]	; (8003528 <HAL_DMA_Abort+0x448>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d045      	beq.n	800340a <HAL_DMA_Abort+0x32a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a6a      	ldr	r2, [pc, #424]	; (800352c <HAL_DMA_Abort+0x44c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d040      	beq.n	800340a <HAL_DMA_Abort+0x32a>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a68      	ldr	r2, [pc, #416]	; (8003530 <HAL_DMA_Abort+0x450>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d03b      	beq.n	800340a <HAL_DMA_Abort+0x32a>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a67      	ldr	r2, [pc, #412]	; (8003534 <HAL_DMA_Abort+0x454>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d036      	beq.n	800340a <HAL_DMA_Abort+0x32a>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a65      	ldr	r2, [pc, #404]	; (8003538 <HAL_DMA_Abort+0x458>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d031      	beq.n	800340a <HAL_DMA_Abort+0x32a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a64      	ldr	r2, [pc, #400]	; (800353c <HAL_DMA_Abort+0x45c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d02c      	beq.n	800340a <HAL_DMA_Abort+0x32a>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a62      	ldr	r2, [pc, #392]	; (8003540 <HAL_DMA_Abort+0x460>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d027      	beq.n	800340a <HAL_DMA_Abort+0x32a>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a61      	ldr	r2, [pc, #388]	; (8003544 <HAL_DMA_Abort+0x464>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d022      	beq.n	800340a <HAL_DMA_Abort+0x32a>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a5f      	ldr	r2, [pc, #380]	; (8003548 <HAL_DMA_Abort+0x468>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d01d      	beq.n	800340a <HAL_DMA_Abort+0x32a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a5e      	ldr	r2, [pc, #376]	; (800354c <HAL_DMA_Abort+0x46c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d018      	beq.n	800340a <HAL_DMA_Abort+0x32a>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a5c      	ldr	r2, [pc, #368]	; (8003550 <HAL_DMA_Abort+0x470>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d013      	beq.n	800340a <HAL_DMA_Abort+0x32a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a5b      	ldr	r2, [pc, #364]	; (8003554 <HAL_DMA_Abort+0x474>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d00e      	beq.n	800340a <HAL_DMA_Abort+0x32a>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a59      	ldr	r2, [pc, #356]	; (8003558 <HAL_DMA_Abort+0x478>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d009      	beq.n	800340a <HAL_DMA_Abort+0x32a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a58      	ldr	r2, [pc, #352]	; (800355c <HAL_DMA_Abort+0x47c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d004      	beq.n	800340a <HAL_DMA_Abort+0x32a>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a56      	ldr	r2, [pc, #344]	; (8003560 <HAL_DMA_Abort+0x480>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d108      	bne.n	800341c <HAL_DMA_Abort+0x33c>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0201 	bic.w	r2, r2, #1
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	e007      	b.n	800342c <HAL_DMA_Abort+0x34c>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0201 	bic.w	r2, r2, #1
 800342a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800342c:	e013      	b.n	8003456 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800342e:	f7ff f8e9 	bl	8002604 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b05      	cmp	r3, #5
 800343a:	d90c      	bls.n	8003456 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2220      	movs	r2, #32
 8003440:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2203      	movs	r2, #3
 800344e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e12d      	b.n	80036b2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1e5      	bne.n	800342e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a2f      	ldr	r2, [pc, #188]	; (8003524 <HAL_DMA_Abort+0x444>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d04a      	beq.n	8003502 <HAL_DMA_Abort+0x422>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a2d      	ldr	r2, [pc, #180]	; (8003528 <HAL_DMA_Abort+0x448>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d045      	beq.n	8003502 <HAL_DMA_Abort+0x422>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a2c      	ldr	r2, [pc, #176]	; (800352c <HAL_DMA_Abort+0x44c>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d040      	beq.n	8003502 <HAL_DMA_Abort+0x422>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a2a      	ldr	r2, [pc, #168]	; (8003530 <HAL_DMA_Abort+0x450>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d03b      	beq.n	8003502 <HAL_DMA_Abort+0x422>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a29      	ldr	r2, [pc, #164]	; (8003534 <HAL_DMA_Abort+0x454>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d036      	beq.n	8003502 <HAL_DMA_Abort+0x422>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a27      	ldr	r2, [pc, #156]	; (8003538 <HAL_DMA_Abort+0x458>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d031      	beq.n	8003502 <HAL_DMA_Abort+0x422>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a26      	ldr	r2, [pc, #152]	; (800353c <HAL_DMA_Abort+0x45c>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d02c      	beq.n	8003502 <HAL_DMA_Abort+0x422>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a24      	ldr	r2, [pc, #144]	; (8003540 <HAL_DMA_Abort+0x460>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d027      	beq.n	8003502 <HAL_DMA_Abort+0x422>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a23      	ldr	r2, [pc, #140]	; (8003544 <HAL_DMA_Abort+0x464>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d022      	beq.n	8003502 <HAL_DMA_Abort+0x422>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a21      	ldr	r2, [pc, #132]	; (8003548 <HAL_DMA_Abort+0x468>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d01d      	beq.n	8003502 <HAL_DMA_Abort+0x422>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a20      	ldr	r2, [pc, #128]	; (800354c <HAL_DMA_Abort+0x46c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d018      	beq.n	8003502 <HAL_DMA_Abort+0x422>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a1e      	ldr	r2, [pc, #120]	; (8003550 <HAL_DMA_Abort+0x470>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d013      	beq.n	8003502 <HAL_DMA_Abort+0x422>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a1d      	ldr	r2, [pc, #116]	; (8003554 <HAL_DMA_Abort+0x474>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d00e      	beq.n	8003502 <HAL_DMA_Abort+0x422>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a1b      	ldr	r2, [pc, #108]	; (8003558 <HAL_DMA_Abort+0x478>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d009      	beq.n	8003502 <HAL_DMA_Abort+0x422>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a1a      	ldr	r2, [pc, #104]	; (800355c <HAL_DMA_Abort+0x47c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d004      	beq.n	8003502 <HAL_DMA_Abort+0x422>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a18      	ldr	r2, [pc, #96]	; (8003560 <HAL_DMA_Abort+0x480>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d101      	bne.n	8003506 <HAL_DMA_Abort+0x426>
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <HAL_DMA_Abort+0x428>
 8003506:	2300      	movs	r3, #0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d02b      	beq.n	8003564 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003510:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003516:	f003 031f 	and.w	r3, r3, #31
 800351a:	223f      	movs	r2, #63	; 0x3f
 800351c:	409a      	lsls	r2, r3
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	609a      	str	r2, [r3, #8]
 8003522:	e02a      	b.n	800357a <HAL_DMA_Abort+0x49a>
 8003524:	40020010 	.word	0x40020010
 8003528:	40020028 	.word	0x40020028
 800352c:	40020040 	.word	0x40020040
 8003530:	40020058 	.word	0x40020058
 8003534:	40020070 	.word	0x40020070
 8003538:	40020088 	.word	0x40020088
 800353c:	400200a0 	.word	0x400200a0
 8003540:	400200b8 	.word	0x400200b8
 8003544:	40020410 	.word	0x40020410
 8003548:	40020428 	.word	0x40020428
 800354c:	40020440 	.word	0x40020440
 8003550:	40020458 	.word	0x40020458
 8003554:	40020470 	.word	0x40020470
 8003558:	40020488 	.word	0x40020488
 800355c:	400204a0 	.word	0x400204a0
 8003560:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003568:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356e:	f003 031f 	and.w	r3, r3, #31
 8003572:	2201      	movs	r2, #1
 8003574:	409a      	lsls	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a4f      	ldr	r2, [pc, #316]	; (80036bc <HAL_DMA_Abort+0x5dc>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d072      	beq.n	800366a <HAL_DMA_Abort+0x58a>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a4d      	ldr	r2, [pc, #308]	; (80036c0 <HAL_DMA_Abort+0x5e0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d06d      	beq.n	800366a <HAL_DMA_Abort+0x58a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a4c      	ldr	r2, [pc, #304]	; (80036c4 <HAL_DMA_Abort+0x5e4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d068      	beq.n	800366a <HAL_DMA_Abort+0x58a>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a4a      	ldr	r2, [pc, #296]	; (80036c8 <HAL_DMA_Abort+0x5e8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d063      	beq.n	800366a <HAL_DMA_Abort+0x58a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a49      	ldr	r2, [pc, #292]	; (80036cc <HAL_DMA_Abort+0x5ec>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d05e      	beq.n	800366a <HAL_DMA_Abort+0x58a>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a47      	ldr	r2, [pc, #284]	; (80036d0 <HAL_DMA_Abort+0x5f0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d059      	beq.n	800366a <HAL_DMA_Abort+0x58a>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a46      	ldr	r2, [pc, #280]	; (80036d4 <HAL_DMA_Abort+0x5f4>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d054      	beq.n	800366a <HAL_DMA_Abort+0x58a>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a44      	ldr	r2, [pc, #272]	; (80036d8 <HAL_DMA_Abort+0x5f8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d04f      	beq.n	800366a <HAL_DMA_Abort+0x58a>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a43      	ldr	r2, [pc, #268]	; (80036dc <HAL_DMA_Abort+0x5fc>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d04a      	beq.n	800366a <HAL_DMA_Abort+0x58a>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a41      	ldr	r2, [pc, #260]	; (80036e0 <HAL_DMA_Abort+0x600>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d045      	beq.n	800366a <HAL_DMA_Abort+0x58a>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a40      	ldr	r2, [pc, #256]	; (80036e4 <HAL_DMA_Abort+0x604>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d040      	beq.n	800366a <HAL_DMA_Abort+0x58a>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a3e      	ldr	r2, [pc, #248]	; (80036e8 <HAL_DMA_Abort+0x608>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d03b      	beq.n	800366a <HAL_DMA_Abort+0x58a>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a3d      	ldr	r2, [pc, #244]	; (80036ec <HAL_DMA_Abort+0x60c>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d036      	beq.n	800366a <HAL_DMA_Abort+0x58a>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a3b      	ldr	r2, [pc, #236]	; (80036f0 <HAL_DMA_Abort+0x610>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d031      	beq.n	800366a <HAL_DMA_Abort+0x58a>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a3a      	ldr	r2, [pc, #232]	; (80036f4 <HAL_DMA_Abort+0x614>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d02c      	beq.n	800366a <HAL_DMA_Abort+0x58a>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a38      	ldr	r2, [pc, #224]	; (80036f8 <HAL_DMA_Abort+0x618>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d027      	beq.n	800366a <HAL_DMA_Abort+0x58a>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a37      	ldr	r2, [pc, #220]	; (80036fc <HAL_DMA_Abort+0x61c>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d022      	beq.n	800366a <HAL_DMA_Abort+0x58a>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a35      	ldr	r2, [pc, #212]	; (8003700 <HAL_DMA_Abort+0x620>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d01d      	beq.n	800366a <HAL_DMA_Abort+0x58a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a34      	ldr	r2, [pc, #208]	; (8003704 <HAL_DMA_Abort+0x624>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d018      	beq.n	800366a <HAL_DMA_Abort+0x58a>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a32      	ldr	r2, [pc, #200]	; (8003708 <HAL_DMA_Abort+0x628>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d013      	beq.n	800366a <HAL_DMA_Abort+0x58a>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a31      	ldr	r2, [pc, #196]	; (800370c <HAL_DMA_Abort+0x62c>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d00e      	beq.n	800366a <HAL_DMA_Abort+0x58a>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a2f      	ldr	r2, [pc, #188]	; (8003710 <HAL_DMA_Abort+0x630>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d009      	beq.n	800366a <HAL_DMA_Abort+0x58a>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a2e      	ldr	r2, [pc, #184]	; (8003714 <HAL_DMA_Abort+0x634>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d004      	beq.n	800366a <HAL_DMA_Abort+0x58a>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a2c      	ldr	r2, [pc, #176]	; (8003718 <HAL_DMA_Abort+0x638>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d101      	bne.n	800366e <HAL_DMA_Abort+0x58e>
 800366a:	2301      	movs	r3, #1
 800366c:	e000      	b.n	8003670 <HAL_DMA_Abort+0x590>
 800366e:	2300      	movs	r3, #0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d015      	beq.n	80036a0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800367c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00c      	beq.n	80036a0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003690:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003694:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800369e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	40020010 	.word	0x40020010
 80036c0:	40020028 	.word	0x40020028
 80036c4:	40020040 	.word	0x40020040
 80036c8:	40020058 	.word	0x40020058
 80036cc:	40020070 	.word	0x40020070
 80036d0:	40020088 	.word	0x40020088
 80036d4:	400200a0 	.word	0x400200a0
 80036d8:	400200b8 	.word	0x400200b8
 80036dc:	40020410 	.word	0x40020410
 80036e0:	40020428 	.word	0x40020428
 80036e4:	40020440 	.word	0x40020440
 80036e8:	40020458 	.word	0x40020458
 80036ec:	40020470 	.word	0x40020470
 80036f0:	40020488 	.word	0x40020488
 80036f4:	400204a0 	.word	0x400204a0
 80036f8:	400204b8 	.word	0x400204b8
 80036fc:	58025408 	.word	0x58025408
 8003700:	5802541c 	.word	0x5802541c
 8003704:	58025430 	.word	0x58025430
 8003708:	58025444 	.word	0x58025444
 800370c:	58025458 	.word	0x58025458
 8003710:	5802546c 	.word	0x5802546c
 8003714:	58025480 	.word	0x58025480
 8003718:	58025494 	.word	0x58025494

0800371c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e205      	b.n	8003b3a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d004      	beq.n	8003744 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2280      	movs	r2, #128	; 0x80
 800373e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e1fa      	b.n	8003b3a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a8c      	ldr	r2, [pc, #560]	; (800397c <HAL_DMA_Abort_IT+0x260>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d04a      	beq.n	80037e4 <HAL_DMA_Abort_IT+0xc8>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a8b      	ldr	r2, [pc, #556]	; (8003980 <HAL_DMA_Abort_IT+0x264>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d045      	beq.n	80037e4 <HAL_DMA_Abort_IT+0xc8>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a89      	ldr	r2, [pc, #548]	; (8003984 <HAL_DMA_Abort_IT+0x268>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d040      	beq.n	80037e4 <HAL_DMA_Abort_IT+0xc8>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a88      	ldr	r2, [pc, #544]	; (8003988 <HAL_DMA_Abort_IT+0x26c>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d03b      	beq.n	80037e4 <HAL_DMA_Abort_IT+0xc8>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a86      	ldr	r2, [pc, #536]	; (800398c <HAL_DMA_Abort_IT+0x270>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d036      	beq.n	80037e4 <HAL_DMA_Abort_IT+0xc8>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a85      	ldr	r2, [pc, #532]	; (8003990 <HAL_DMA_Abort_IT+0x274>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d031      	beq.n	80037e4 <HAL_DMA_Abort_IT+0xc8>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a83      	ldr	r2, [pc, #524]	; (8003994 <HAL_DMA_Abort_IT+0x278>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d02c      	beq.n	80037e4 <HAL_DMA_Abort_IT+0xc8>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a82      	ldr	r2, [pc, #520]	; (8003998 <HAL_DMA_Abort_IT+0x27c>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d027      	beq.n	80037e4 <HAL_DMA_Abort_IT+0xc8>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a80      	ldr	r2, [pc, #512]	; (800399c <HAL_DMA_Abort_IT+0x280>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d022      	beq.n	80037e4 <HAL_DMA_Abort_IT+0xc8>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a7f      	ldr	r2, [pc, #508]	; (80039a0 <HAL_DMA_Abort_IT+0x284>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d01d      	beq.n	80037e4 <HAL_DMA_Abort_IT+0xc8>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a7d      	ldr	r2, [pc, #500]	; (80039a4 <HAL_DMA_Abort_IT+0x288>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d018      	beq.n	80037e4 <HAL_DMA_Abort_IT+0xc8>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a7c      	ldr	r2, [pc, #496]	; (80039a8 <HAL_DMA_Abort_IT+0x28c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d013      	beq.n	80037e4 <HAL_DMA_Abort_IT+0xc8>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a7a      	ldr	r2, [pc, #488]	; (80039ac <HAL_DMA_Abort_IT+0x290>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d00e      	beq.n	80037e4 <HAL_DMA_Abort_IT+0xc8>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a79      	ldr	r2, [pc, #484]	; (80039b0 <HAL_DMA_Abort_IT+0x294>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d009      	beq.n	80037e4 <HAL_DMA_Abort_IT+0xc8>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a77      	ldr	r2, [pc, #476]	; (80039b4 <HAL_DMA_Abort_IT+0x298>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d004      	beq.n	80037e4 <HAL_DMA_Abort_IT+0xc8>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a76      	ldr	r2, [pc, #472]	; (80039b8 <HAL_DMA_Abort_IT+0x29c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d101      	bne.n	80037e8 <HAL_DMA_Abort_IT+0xcc>
 80037e4:	2301      	movs	r3, #1
 80037e6:	e000      	b.n	80037ea <HAL_DMA_Abort_IT+0xce>
 80037e8:	2300      	movs	r3, #0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d065      	beq.n	80038ba <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2204      	movs	r2, #4
 80037f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a60      	ldr	r2, [pc, #384]	; (800397c <HAL_DMA_Abort_IT+0x260>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d04a      	beq.n	8003896 <HAL_DMA_Abort_IT+0x17a>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a5e      	ldr	r2, [pc, #376]	; (8003980 <HAL_DMA_Abort_IT+0x264>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d045      	beq.n	8003896 <HAL_DMA_Abort_IT+0x17a>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a5d      	ldr	r2, [pc, #372]	; (8003984 <HAL_DMA_Abort_IT+0x268>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d040      	beq.n	8003896 <HAL_DMA_Abort_IT+0x17a>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a5b      	ldr	r2, [pc, #364]	; (8003988 <HAL_DMA_Abort_IT+0x26c>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d03b      	beq.n	8003896 <HAL_DMA_Abort_IT+0x17a>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a5a      	ldr	r2, [pc, #360]	; (800398c <HAL_DMA_Abort_IT+0x270>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d036      	beq.n	8003896 <HAL_DMA_Abort_IT+0x17a>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a58      	ldr	r2, [pc, #352]	; (8003990 <HAL_DMA_Abort_IT+0x274>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d031      	beq.n	8003896 <HAL_DMA_Abort_IT+0x17a>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a57      	ldr	r2, [pc, #348]	; (8003994 <HAL_DMA_Abort_IT+0x278>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d02c      	beq.n	8003896 <HAL_DMA_Abort_IT+0x17a>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a55      	ldr	r2, [pc, #340]	; (8003998 <HAL_DMA_Abort_IT+0x27c>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d027      	beq.n	8003896 <HAL_DMA_Abort_IT+0x17a>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a54      	ldr	r2, [pc, #336]	; (800399c <HAL_DMA_Abort_IT+0x280>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d022      	beq.n	8003896 <HAL_DMA_Abort_IT+0x17a>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a52      	ldr	r2, [pc, #328]	; (80039a0 <HAL_DMA_Abort_IT+0x284>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d01d      	beq.n	8003896 <HAL_DMA_Abort_IT+0x17a>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a51      	ldr	r2, [pc, #324]	; (80039a4 <HAL_DMA_Abort_IT+0x288>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d018      	beq.n	8003896 <HAL_DMA_Abort_IT+0x17a>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a4f      	ldr	r2, [pc, #316]	; (80039a8 <HAL_DMA_Abort_IT+0x28c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d013      	beq.n	8003896 <HAL_DMA_Abort_IT+0x17a>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a4e      	ldr	r2, [pc, #312]	; (80039ac <HAL_DMA_Abort_IT+0x290>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d00e      	beq.n	8003896 <HAL_DMA_Abort_IT+0x17a>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a4c      	ldr	r2, [pc, #304]	; (80039b0 <HAL_DMA_Abort_IT+0x294>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d009      	beq.n	8003896 <HAL_DMA_Abort_IT+0x17a>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a4b      	ldr	r2, [pc, #300]	; (80039b4 <HAL_DMA_Abort_IT+0x298>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d004      	beq.n	8003896 <HAL_DMA_Abort_IT+0x17a>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a49      	ldr	r2, [pc, #292]	; (80039b8 <HAL_DMA_Abort_IT+0x29c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d108      	bne.n	80038a8 <HAL_DMA_Abort_IT+0x18c>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0201 	bic.w	r2, r2, #1
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	e147      	b.n	8003b38 <HAL_DMA_Abort_IT+0x41c>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 0201 	bic.w	r2, r2, #1
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	e13e      	b.n	8003b38 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 020e 	bic.w	r2, r2, #14
 80038c8:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a2b      	ldr	r2, [pc, #172]	; (800397c <HAL_DMA_Abort_IT+0x260>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d04a      	beq.n	800396a <HAL_DMA_Abort_IT+0x24e>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a29      	ldr	r2, [pc, #164]	; (8003980 <HAL_DMA_Abort_IT+0x264>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d045      	beq.n	800396a <HAL_DMA_Abort_IT+0x24e>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a28      	ldr	r2, [pc, #160]	; (8003984 <HAL_DMA_Abort_IT+0x268>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d040      	beq.n	800396a <HAL_DMA_Abort_IT+0x24e>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a26      	ldr	r2, [pc, #152]	; (8003988 <HAL_DMA_Abort_IT+0x26c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d03b      	beq.n	800396a <HAL_DMA_Abort_IT+0x24e>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a25      	ldr	r2, [pc, #148]	; (800398c <HAL_DMA_Abort_IT+0x270>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d036      	beq.n	800396a <HAL_DMA_Abort_IT+0x24e>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a23      	ldr	r2, [pc, #140]	; (8003990 <HAL_DMA_Abort_IT+0x274>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d031      	beq.n	800396a <HAL_DMA_Abort_IT+0x24e>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a22      	ldr	r2, [pc, #136]	; (8003994 <HAL_DMA_Abort_IT+0x278>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d02c      	beq.n	800396a <HAL_DMA_Abort_IT+0x24e>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a20      	ldr	r2, [pc, #128]	; (8003998 <HAL_DMA_Abort_IT+0x27c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d027      	beq.n	800396a <HAL_DMA_Abort_IT+0x24e>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a1f      	ldr	r2, [pc, #124]	; (800399c <HAL_DMA_Abort_IT+0x280>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d022      	beq.n	800396a <HAL_DMA_Abort_IT+0x24e>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a1d      	ldr	r2, [pc, #116]	; (80039a0 <HAL_DMA_Abort_IT+0x284>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d01d      	beq.n	800396a <HAL_DMA_Abort_IT+0x24e>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a1c      	ldr	r2, [pc, #112]	; (80039a4 <HAL_DMA_Abort_IT+0x288>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d018      	beq.n	800396a <HAL_DMA_Abort_IT+0x24e>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a1a      	ldr	r2, [pc, #104]	; (80039a8 <HAL_DMA_Abort_IT+0x28c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d013      	beq.n	800396a <HAL_DMA_Abort_IT+0x24e>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a19      	ldr	r2, [pc, #100]	; (80039ac <HAL_DMA_Abort_IT+0x290>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d00e      	beq.n	800396a <HAL_DMA_Abort_IT+0x24e>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a17      	ldr	r2, [pc, #92]	; (80039b0 <HAL_DMA_Abort_IT+0x294>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d009      	beq.n	800396a <HAL_DMA_Abort_IT+0x24e>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a16      	ldr	r2, [pc, #88]	; (80039b4 <HAL_DMA_Abort_IT+0x298>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d004      	beq.n	800396a <HAL_DMA_Abort_IT+0x24e>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a14      	ldr	r2, [pc, #80]	; (80039b8 <HAL_DMA_Abort_IT+0x29c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d128      	bne.n	80039bc <HAL_DMA_Abort_IT+0x2a0>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0201 	bic.w	r2, r2, #1
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	e027      	b.n	80039cc <HAL_DMA_Abort_IT+0x2b0>
 800397c:	40020010 	.word	0x40020010
 8003980:	40020028 	.word	0x40020028
 8003984:	40020040 	.word	0x40020040
 8003988:	40020058 	.word	0x40020058
 800398c:	40020070 	.word	0x40020070
 8003990:	40020088 	.word	0x40020088
 8003994:	400200a0 	.word	0x400200a0
 8003998:	400200b8 	.word	0x400200b8
 800399c:	40020410 	.word	0x40020410
 80039a0:	40020428 	.word	0x40020428
 80039a4:	40020440 	.word	0x40020440
 80039a8:	40020458 	.word	0x40020458
 80039ac:	40020470 	.word	0x40020470
 80039b0:	40020488 	.word	0x40020488
 80039b4:	400204a0 	.word	0x400204a0
 80039b8:	400204b8 	.word	0x400204b8
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0201 	bic.w	r2, r2, #1
 80039ca:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a5c      	ldr	r2, [pc, #368]	; (8003b44 <HAL_DMA_Abort_IT+0x428>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d072      	beq.n	8003abc <HAL_DMA_Abort_IT+0x3a0>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a5b      	ldr	r2, [pc, #364]	; (8003b48 <HAL_DMA_Abort_IT+0x42c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d06d      	beq.n	8003abc <HAL_DMA_Abort_IT+0x3a0>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a59      	ldr	r2, [pc, #356]	; (8003b4c <HAL_DMA_Abort_IT+0x430>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d068      	beq.n	8003abc <HAL_DMA_Abort_IT+0x3a0>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a58      	ldr	r2, [pc, #352]	; (8003b50 <HAL_DMA_Abort_IT+0x434>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d063      	beq.n	8003abc <HAL_DMA_Abort_IT+0x3a0>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a56      	ldr	r2, [pc, #344]	; (8003b54 <HAL_DMA_Abort_IT+0x438>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d05e      	beq.n	8003abc <HAL_DMA_Abort_IT+0x3a0>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a55      	ldr	r2, [pc, #340]	; (8003b58 <HAL_DMA_Abort_IT+0x43c>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d059      	beq.n	8003abc <HAL_DMA_Abort_IT+0x3a0>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a53      	ldr	r2, [pc, #332]	; (8003b5c <HAL_DMA_Abort_IT+0x440>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d054      	beq.n	8003abc <HAL_DMA_Abort_IT+0x3a0>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a52      	ldr	r2, [pc, #328]	; (8003b60 <HAL_DMA_Abort_IT+0x444>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d04f      	beq.n	8003abc <HAL_DMA_Abort_IT+0x3a0>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a50      	ldr	r2, [pc, #320]	; (8003b64 <HAL_DMA_Abort_IT+0x448>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d04a      	beq.n	8003abc <HAL_DMA_Abort_IT+0x3a0>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a4f      	ldr	r2, [pc, #316]	; (8003b68 <HAL_DMA_Abort_IT+0x44c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d045      	beq.n	8003abc <HAL_DMA_Abort_IT+0x3a0>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a4d      	ldr	r2, [pc, #308]	; (8003b6c <HAL_DMA_Abort_IT+0x450>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d040      	beq.n	8003abc <HAL_DMA_Abort_IT+0x3a0>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a4c      	ldr	r2, [pc, #304]	; (8003b70 <HAL_DMA_Abort_IT+0x454>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d03b      	beq.n	8003abc <HAL_DMA_Abort_IT+0x3a0>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a4a      	ldr	r2, [pc, #296]	; (8003b74 <HAL_DMA_Abort_IT+0x458>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d036      	beq.n	8003abc <HAL_DMA_Abort_IT+0x3a0>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a49      	ldr	r2, [pc, #292]	; (8003b78 <HAL_DMA_Abort_IT+0x45c>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d031      	beq.n	8003abc <HAL_DMA_Abort_IT+0x3a0>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a47      	ldr	r2, [pc, #284]	; (8003b7c <HAL_DMA_Abort_IT+0x460>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d02c      	beq.n	8003abc <HAL_DMA_Abort_IT+0x3a0>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a46      	ldr	r2, [pc, #280]	; (8003b80 <HAL_DMA_Abort_IT+0x464>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d027      	beq.n	8003abc <HAL_DMA_Abort_IT+0x3a0>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a44      	ldr	r2, [pc, #272]	; (8003b84 <HAL_DMA_Abort_IT+0x468>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d022      	beq.n	8003abc <HAL_DMA_Abort_IT+0x3a0>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a43      	ldr	r2, [pc, #268]	; (8003b88 <HAL_DMA_Abort_IT+0x46c>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d01d      	beq.n	8003abc <HAL_DMA_Abort_IT+0x3a0>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a41      	ldr	r2, [pc, #260]	; (8003b8c <HAL_DMA_Abort_IT+0x470>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d018      	beq.n	8003abc <HAL_DMA_Abort_IT+0x3a0>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a40      	ldr	r2, [pc, #256]	; (8003b90 <HAL_DMA_Abort_IT+0x474>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d013      	beq.n	8003abc <HAL_DMA_Abort_IT+0x3a0>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a3e      	ldr	r2, [pc, #248]	; (8003b94 <HAL_DMA_Abort_IT+0x478>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d00e      	beq.n	8003abc <HAL_DMA_Abort_IT+0x3a0>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a3d      	ldr	r2, [pc, #244]	; (8003b98 <HAL_DMA_Abort_IT+0x47c>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d009      	beq.n	8003abc <HAL_DMA_Abort_IT+0x3a0>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a3b      	ldr	r2, [pc, #236]	; (8003b9c <HAL_DMA_Abort_IT+0x480>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d004      	beq.n	8003abc <HAL_DMA_Abort_IT+0x3a0>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a3a      	ldr	r2, [pc, #232]	; (8003ba0 <HAL_DMA_Abort_IT+0x484>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d101      	bne.n	8003ac0 <HAL_DMA_Abort_IT+0x3a4>
 8003abc:	2301      	movs	r3, #1
 8003abe:	e000      	b.n	8003ac2 <HAL_DMA_Abort_IT+0x3a6>
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d028      	beq.n	8003b18 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ad0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ad4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ada:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae0:	f003 031f 	and.w	r3, r3, #31
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	409a      	lsls	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003af4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00c      	beq.n	8003b18 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b0c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003b16:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40020010 	.word	0x40020010
 8003b48:	40020028 	.word	0x40020028
 8003b4c:	40020040 	.word	0x40020040
 8003b50:	40020058 	.word	0x40020058
 8003b54:	40020070 	.word	0x40020070
 8003b58:	40020088 	.word	0x40020088
 8003b5c:	400200a0 	.word	0x400200a0
 8003b60:	400200b8 	.word	0x400200b8
 8003b64:	40020410 	.word	0x40020410
 8003b68:	40020428 	.word	0x40020428
 8003b6c:	40020440 	.word	0x40020440
 8003b70:	40020458 	.word	0x40020458
 8003b74:	40020470 	.word	0x40020470
 8003b78:	40020488 	.word	0x40020488
 8003b7c:	400204a0 	.word	0x400204a0
 8003b80:	400204b8 	.word	0x400204b8
 8003b84:	58025408 	.word	0x58025408
 8003b88:	5802541c 	.word	0x5802541c
 8003b8c:	58025430 	.word	0x58025430
 8003b90:	58025444 	.word	0x58025444
 8003b94:	58025458 	.word	0x58025458
 8003b98:	5802546c 	.word	0x5802546c
 8003b9c:	58025480 	.word	0x58025480
 8003ba0:	58025494 	.word	0x58025494

08003ba4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08a      	sub	sp, #40	; 0x28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003bb0:	4b67      	ldr	r3, [pc, #412]	; (8003d50 <HAL_DMA_IRQHandler+0x1ac>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a67      	ldr	r2, [pc, #412]	; (8003d54 <HAL_DMA_IRQHandler+0x1b0>)
 8003bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bba:	0a9b      	lsrs	r3, r3, #10
 8003bbc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a5f      	ldr	r2, [pc, #380]	; (8003d58 <HAL_DMA_IRQHandler+0x1b4>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d04a      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xd2>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a5d      	ldr	r2, [pc, #372]	; (8003d5c <HAL_DMA_IRQHandler+0x1b8>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d045      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xd2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a5c      	ldr	r2, [pc, #368]	; (8003d60 <HAL_DMA_IRQHandler+0x1bc>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d040      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xd2>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a5a      	ldr	r2, [pc, #360]	; (8003d64 <HAL_DMA_IRQHandler+0x1c0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d03b      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xd2>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a59      	ldr	r2, [pc, #356]	; (8003d68 <HAL_DMA_IRQHandler+0x1c4>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d036      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xd2>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a57      	ldr	r2, [pc, #348]	; (8003d6c <HAL_DMA_IRQHandler+0x1c8>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d031      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xd2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a56      	ldr	r2, [pc, #344]	; (8003d70 <HAL_DMA_IRQHandler+0x1cc>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d02c      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xd2>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a54      	ldr	r2, [pc, #336]	; (8003d74 <HAL_DMA_IRQHandler+0x1d0>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d027      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xd2>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a53      	ldr	r2, [pc, #332]	; (8003d78 <HAL_DMA_IRQHandler+0x1d4>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d022      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xd2>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a51      	ldr	r2, [pc, #324]	; (8003d7c <HAL_DMA_IRQHandler+0x1d8>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d01d      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xd2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a50      	ldr	r2, [pc, #320]	; (8003d80 <HAL_DMA_IRQHandler+0x1dc>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d018      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xd2>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a4e      	ldr	r2, [pc, #312]	; (8003d84 <HAL_DMA_IRQHandler+0x1e0>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d013      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xd2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a4d      	ldr	r2, [pc, #308]	; (8003d88 <HAL_DMA_IRQHandler+0x1e4>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d00e      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xd2>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a4b      	ldr	r2, [pc, #300]	; (8003d8c <HAL_DMA_IRQHandler+0x1e8>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d009      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xd2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a4a      	ldr	r2, [pc, #296]	; (8003d90 <HAL_DMA_IRQHandler+0x1ec>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d004      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xd2>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a48      	ldr	r2, [pc, #288]	; (8003d94 <HAL_DMA_IRQHandler+0x1f0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d101      	bne.n	8003c7a <HAL_DMA_IRQHandler+0xd6>
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <HAL_DMA_IRQHandler+0xd8>
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 842b 	beq.w	80044d8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c86:	f003 031f 	and.w	r3, r3, #31
 8003c8a:	2208      	movs	r2, #8
 8003c8c:	409a      	lsls	r2, r3
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	4013      	ands	r3, r2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 80a2 	beq.w	8003ddc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a2e      	ldr	r2, [pc, #184]	; (8003d58 <HAL_DMA_IRQHandler+0x1b4>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d04a      	beq.n	8003d38 <HAL_DMA_IRQHandler+0x194>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a2d      	ldr	r2, [pc, #180]	; (8003d5c <HAL_DMA_IRQHandler+0x1b8>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d045      	beq.n	8003d38 <HAL_DMA_IRQHandler+0x194>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a2b      	ldr	r2, [pc, #172]	; (8003d60 <HAL_DMA_IRQHandler+0x1bc>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d040      	beq.n	8003d38 <HAL_DMA_IRQHandler+0x194>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a2a      	ldr	r2, [pc, #168]	; (8003d64 <HAL_DMA_IRQHandler+0x1c0>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d03b      	beq.n	8003d38 <HAL_DMA_IRQHandler+0x194>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a28      	ldr	r2, [pc, #160]	; (8003d68 <HAL_DMA_IRQHandler+0x1c4>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d036      	beq.n	8003d38 <HAL_DMA_IRQHandler+0x194>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a27      	ldr	r2, [pc, #156]	; (8003d6c <HAL_DMA_IRQHandler+0x1c8>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d031      	beq.n	8003d38 <HAL_DMA_IRQHandler+0x194>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a25      	ldr	r2, [pc, #148]	; (8003d70 <HAL_DMA_IRQHandler+0x1cc>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d02c      	beq.n	8003d38 <HAL_DMA_IRQHandler+0x194>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a24      	ldr	r2, [pc, #144]	; (8003d74 <HAL_DMA_IRQHandler+0x1d0>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d027      	beq.n	8003d38 <HAL_DMA_IRQHandler+0x194>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a22      	ldr	r2, [pc, #136]	; (8003d78 <HAL_DMA_IRQHandler+0x1d4>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d022      	beq.n	8003d38 <HAL_DMA_IRQHandler+0x194>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a21      	ldr	r2, [pc, #132]	; (8003d7c <HAL_DMA_IRQHandler+0x1d8>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d01d      	beq.n	8003d38 <HAL_DMA_IRQHandler+0x194>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a1f      	ldr	r2, [pc, #124]	; (8003d80 <HAL_DMA_IRQHandler+0x1dc>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d018      	beq.n	8003d38 <HAL_DMA_IRQHandler+0x194>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a1e      	ldr	r2, [pc, #120]	; (8003d84 <HAL_DMA_IRQHandler+0x1e0>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d013      	beq.n	8003d38 <HAL_DMA_IRQHandler+0x194>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a1c      	ldr	r2, [pc, #112]	; (8003d88 <HAL_DMA_IRQHandler+0x1e4>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d00e      	beq.n	8003d38 <HAL_DMA_IRQHandler+0x194>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a1b      	ldr	r2, [pc, #108]	; (8003d8c <HAL_DMA_IRQHandler+0x1e8>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d009      	beq.n	8003d38 <HAL_DMA_IRQHandler+0x194>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a19      	ldr	r2, [pc, #100]	; (8003d90 <HAL_DMA_IRQHandler+0x1ec>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d004      	beq.n	8003d38 <HAL_DMA_IRQHandler+0x194>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a18      	ldr	r2, [pc, #96]	; (8003d94 <HAL_DMA_IRQHandler+0x1f0>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d12f      	bne.n	8003d98 <HAL_DMA_IRQHandler+0x1f4>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	bf14      	ite	ne
 8003d46:	2301      	movne	r3, #1
 8003d48:	2300      	moveq	r3, #0
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	e02e      	b.n	8003dac <HAL_DMA_IRQHandler+0x208>
 8003d4e:	bf00      	nop
 8003d50:	20000000 	.word	0x20000000
 8003d54:	1b4e81b5 	.word	0x1b4e81b5
 8003d58:	40020010 	.word	0x40020010
 8003d5c:	40020028 	.word	0x40020028
 8003d60:	40020040 	.word	0x40020040
 8003d64:	40020058 	.word	0x40020058
 8003d68:	40020070 	.word	0x40020070
 8003d6c:	40020088 	.word	0x40020088
 8003d70:	400200a0 	.word	0x400200a0
 8003d74:	400200b8 	.word	0x400200b8
 8003d78:	40020410 	.word	0x40020410
 8003d7c:	40020428 	.word	0x40020428
 8003d80:	40020440 	.word	0x40020440
 8003d84:	40020458 	.word	0x40020458
 8003d88:	40020470 	.word	0x40020470
 8003d8c:	40020488 	.word	0x40020488
 8003d90:	400204a0 	.word	0x400204a0
 8003d94:	400204b8 	.word	0x400204b8
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0308 	and.w	r3, r3, #8
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	bf14      	ite	ne
 8003da6:	2301      	movne	r3, #1
 8003da8:	2300      	moveq	r3, #0
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d015      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 0204 	bic.w	r2, r2, #4
 8003dbe:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc4:	f003 031f 	and.w	r3, r3, #31
 8003dc8:	2208      	movs	r2, #8
 8003dca:	409a      	lsls	r2, r3
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd4:	f043 0201 	orr.w	r2, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de0:	f003 031f 	and.w	r3, r3, #31
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d06e      	beq.n	8003ed0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a69      	ldr	r2, [pc, #420]	; (8003f9c <HAL_DMA_IRQHandler+0x3f8>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d04a      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x2ee>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a67      	ldr	r2, [pc, #412]	; (8003fa0 <HAL_DMA_IRQHandler+0x3fc>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d045      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x2ee>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a66      	ldr	r2, [pc, #408]	; (8003fa4 <HAL_DMA_IRQHandler+0x400>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d040      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x2ee>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a64      	ldr	r2, [pc, #400]	; (8003fa8 <HAL_DMA_IRQHandler+0x404>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d03b      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x2ee>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a63      	ldr	r2, [pc, #396]	; (8003fac <HAL_DMA_IRQHandler+0x408>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d036      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x2ee>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a61      	ldr	r2, [pc, #388]	; (8003fb0 <HAL_DMA_IRQHandler+0x40c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d031      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x2ee>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a60      	ldr	r2, [pc, #384]	; (8003fb4 <HAL_DMA_IRQHandler+0x410>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d02c      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x2ee>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a5e      	ldr	r2, [pc, #376]	; (8003fb8 <HAL_DMA_IRQHandler+0x414>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d027      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x2ee>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a5d      	ldr	r2, [pc, #372]	; (8003fbc <HAL_DMA_IRQHandler+0x418>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d022      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x2ee>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a5b      	ldr	r2, [pc, #364]	; (8003fc0 <HAL_DMA_IRQHandler+0x41c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d01d      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x2ee>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a5a      	ldr	r2, [pc, #360]	; (8003fc4 <HAL_DMA_IRQHandler+0x420>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d018      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x2ee>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a58      	ldr	r2, [pc, #352]	; (8003fc8 <HAL_DMA_IRQHandler+0x424>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d013      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x2ee>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a57      	ldr	r2, [pc, #348]	; (8003fcc <HAL_DMA_IRQHandler+0x428>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d00e      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x2ee>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a55      	ldr	r2, [pc, #340]	; (8003fd0 <HAL_DMA_IRQHandler+0x42c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d009      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x2ee>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a54      	ldr	r2, [pc, #336]	; (8003fd4 <HAL_DMA_IRQHandler+0x430>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d004      	beq.n	8003e92 <HAL_DMA_IRQHandler+0x2ee>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a52      	ldr	r2, [pc, #328]	; (8003fd8 <HAL_DMA_IRQHandler+0x434>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d10a      	bne.n	8003ea8 <HAL_DMA_IRQHandler+0x304>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	bf14      	ite	ne
 8003ea0:	2301      	movne	r3, #1
 8003ea2:	2300      	moveq	r3, #0
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	e003      	b.n	8003eb0 <HAL_DMA_IRQHandler+0x30c>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00d      	beq.n	8003ed0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb8:	f003 031f 	and.w	r3, r3, #31
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	409a      	lsls	r2, r3
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec8:	f043 0202 	orr.w	r2, r3, #2
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed4:	f003 031f 	and.w	r3, r3, #31
 8003ed8:	2204      	movs	r2, #4
 8003eda:	409a      	lsls	r2, r3
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f000 808f 	beq.w	8004004 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a2c      	ldr	r2, [pc, #176]	; (8003f9c <HAL_DMA_IRQHandler+0x3f8>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d04a      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x3e2>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a2a      	ldr	r2, [pc, #168]	; (8003fa0 <HAL_DMA_IRQHandler+0x3fc>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d045      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x3e2>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a29      	ldr	r2, [pc, #164]	; (8003fa4 <HAL_DMA_IRQHandler+0x400>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d040      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x3e2>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a27      	ldr	r2, [pc, #156]	; (8003fa8 <HAL_DMA_IRQHandler+0x404>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d03b      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x3e2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a26      	ldr	r2, [pc, #152]	; (8003fac <HAL_DMA_IRQHandler+0x408>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d036      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x3e2>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a24      	ldr	r2, [pc, #144]	; (8003fb0 <HAL_DMA_IRQHandler+0x40c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d031      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x3e2>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a23      	ldr	r2, [pc, #140]	; (8003fb4 <HAL_DMA_IRQHandler+0x410>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d02c      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x3e2>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a21      	ldr	r2, [pc, #132]	; (8003fb8 <HAL_DMA_IRQHandler+0x414>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d027      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x3e2>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a20      	ldr	r2, [pc, #128]	; (8003fbc <HAL_DMA_IRQHandler+0x418>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d022      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x3e2>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a1e      	ldr	r2, [pc, #120]	; (8003fc0 <HAL_DMA_IRQHandler+0x41c>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d01d      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x3e2>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a1d      	ldr	r2, [pc, #116]	; (8003fc4 <HAL_DMA_IRQHandler+0x420>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d018      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x3e2>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a1b      	ldr	r2, [pc, #108]	; (8003fc8 <HAL_DMA_IRQHandler+0x424>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d013      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x3e2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a1a      	ldr	r2, [pc, #104]	; (8003fcc <HAL_DMA_IRQHandler+0x428>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d00e      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x3e2>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a18      	ldr	r2, [pc, #96]	; (8003fd0 <HAL_DMA_IRQHandler+0x42c>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d009      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x3e2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a17      	ldr	r2, [pc, #92]	; (8003fd4 <HAL_DMA_IRQHandler+0x430>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d004      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x3e2>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a15      	ldr	r2, [pc, #84]	; (8003fd8 <HAL_DMA_IRQHandler+0x434>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d12a      	bne.n	8003fdc <HAL_DMA_IRQHandler+0x438>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	bf14      	ite	ne
 8003f94:	2301      	movne	r3, #1
 8003f96:	2300      	moveq	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	e023      	b.n	8003fe4 <HAL_DMA_IRQHandler+0x440>
 8003f9c:	40020010 	.word	0x40020010
 8003fa0:	40020028 	.word	0x40020028
 8003fa4:	40020040 	.word	0x40020040
 8003fa8:	40020058 	.word	0x40020058
 8003fac:	40020070 	.word	0x40020070
 8003fb0:	40020088 	.word	0x40020088
 8003fb4:	400200a0 	.word	0x400200a0
 8003fb8:	400200b8 	.word	0x400200b8
 8003fbc:	40020410 	.word	0x40020410
 8003fc0:	40020428 	.word	0x40020428
 8003fc4:	40020440 	.word	0x40020440
 8003fc8:	40020458 	.word	0x40020458
 8003fcc:	40020470 	.word	0x40020470
 8003fd0:	40020488 	.word	0x40020488
 8003fd4:	400204a0 	.word	0x400204a0
 8003fd8:	400204b8 	.word	0x400204b8
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00d      	beq.n	8004004 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fec:	f003 031f 	and.w	r3, r3, #31
 8003ff0:	2204      	movs	r2, #4
 8003ff2:	409a      	lsls	r2, r3
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffc:	f043 0204 	orr.w	r2, r3, #4
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004008:	f003 031f 	and.w	r3, r3, #31
 800400c:	2210      	movs	r2, #16
 800400e:	409a      	lsls	r2, r3
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	4013      	ands	r3, r2
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 80a6 	beq.w	8004166 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a85      	ldr	r2, [pc, #532]	; (8004234 <HAL_DMA_IRQHandler+0x690>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d04a      	beq.n	80040ba <HAL_DMA_IRQHandler+0x516>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a83      	ldr	r2, [pc, #524]	; (8004238 <HAL_DMA_IRQHandler+0x694>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d045      	beq.n	80040ba <HAL_DMA_IRQHandler+0x516>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a82      	ldr	r2, [pc, #520]	; (800423c <HAL_DMA_IRQHandler+0x698>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d040      	beq.n	80040ba <HAL_DMA_IRQHandler+0x516>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a80      	ldr	r2, [pc, #512]	; (8004240 <HAL_DMA_IRQHandler+0x69c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d03b      	beq.n	80040ba <HAL_DMA_IRQHandler+0x516>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a7f      	ldr	r2, [pc, #508]	; (8004244 <HAL_DMA_IRQHandler+0x6a0>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d036      	beq.n	80040ba <HAL_DMA_IRQHandler+0x516>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a7d      	ldr	r2, [pc, #500]	; (8004248 <HAL_DMA_IRQHandler+0x6a4>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d031      	beq.n	80040ba <HAL_DMA_IRQHandler+0x516>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a7c      	ldr	r2, [pc, #496]	; (800424c <HAL_DMA_IRQHandler+0x6a8>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d02c      	beq.n	80040ba <HAL_DMA_IRQHandler+0x516>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a7a      	ldr	r2, [pc, #488]	; (8004250 <HAL_DMA_IRQHandler+0x6ac>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d027      	beq.n	80040ba <HAL_DMA_IRQHandler+0x516>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a79      	ldr	r2, [pc, #484]	; (8004254 <HAL_DMA_IRQHandler+0x6b0>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d022      	beq.n	80040ba <HAL_DMA_IRQHandler+0x516>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a77      	ldr	r2, [pc, #476]	; (8004258 <HAL_DMA_IRQHandler+0x6b4>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d01d      	beq.n	80040ba <HAL_DMA_IRQHandler+0x516>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a76      	ldr	r2, [pc, #472]	; (800425c <HAL_DMA_IRQHandler+0x6b8>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d018      	beq.n	80040ba <HAL_DMA_IRQHandler+0x516>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a74      	ldr	r2, [pc, #464]	; (8004260 <HAL_DMA_IRQHandler+0x6bc>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d013      	beq.n	80040ba <HAL_DMA_IRQHandler+0x516>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a73      	ldr	r2, [pc, #460]	; (8004264 <HAL_DMA_IRQHandler+0x6c0>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d00e      	beq.n	80040ba <HAL_DMA_IRQHandler+0x516>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a71      	ldr	r2, [pc, #452]	; (8004268 <HAL_DMA_IRQHandler+0x6c4>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d009      	beq.n	80040ba <HAL_DMA_IRQHandler+0x516>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a70      	ldr	r2, [pc, #448]	; (800426c <HAL_DMA_IRQHandler+0x6c8>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d004      	beq.n	80040ba <HAL_DMA_IRQHandler+0x516>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a6e      	ldr	r2, [pc, #440]	; (8004270 <HAL_DMA_IRQHandler+0x6cc>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d10a      	bne.n	80040d0 <HAL_DMA_IRQHandler+0x52c>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0308 	and.w	r3, r3, #8
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	bf14      	ite	ne
 80040c8:	2301      	movne	r3, #1
 80040ca:	2300      	moveq	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	e009      	b.n	80040e4 <HAL_DMA_IRQHandler+0x540>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0304 	and.w	r3, r3, #4
 80040da:	2b00      	cmp	r3, #0
 80040dc:	bf14      	ite	ne
 80040de:	2301      	movne	r3, #1
 80040e0:	2300      	moveq	r3, #0
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d03e      	beq.n	8004166 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ec:	f003 031f 	and.w	r3, r3, #31
 80040f0:	2210      	movs	r2, #16
 80040f2:	409a      	lsls	r2, r3
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d018      	beq.n	8004138 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d108      	bne.n	8004126 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004118:	2b00      	cmp	r3, #0
 800411a:	d024      	beq.n	8004166 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	4798      	blx	r3
 8004124:	e01f      	b.n	8004166 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800412a:	2b00      	cmp	r3, #0
 800412c:	d01b      	beq.n	8004166 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	4798      	blx	r3
 8004136:	e016      	b.n	8004166 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004142:	2b00      	cmp	r3, #0
 8004144:	d107      	bne.n	8004156 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 0208 	bic.w	r2, r2, #8
 8004154:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800416a:	f003 031f 	and.w	r3, r3, #31
 800416e:	2220      	movs	r2, #32
 8004170:	409a      	lsls	r2, r3
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	4013      	ands	r3, r2
 8004176:	2b00      	cmp	r3, #0
 8004178:	f000 8110 	beq.w	800439c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a2c      	ldr	r2, [pc, #176]	; (8004234 <HAL_DMA_IRQHandler+0x690>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d04a      	beq.n	800421c <HAL_DMA_IRQHandler+0x678>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a2b      	ldr	r2, [pc, #172]	; (8004238 <HAL_DMA_IRQHandler+0x694>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d045      	beq.n	800421c <HAL_DMA_IRQHandler+0x678>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a29      	ldr	r2, [pc, #164]	; (800423c <HAL_DMA_IRQHandler+0x698>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d040      	beq.n	800421c <HAL_DMA_IRQHandler+0x678>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a28      	ldr	r2, [pc, #160]	; (8004240 <HAL_DMA_IRQHandler+0x69c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d03b      	beq.n	800421c <HAL_DMA_IRQHandler+0x678>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a26      	ldr	r2, [pc, #152]	; (8004244 <HAL_DMA_IRQHandler+0x6a0>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d036      	beq.n	800421c <HAL_DMA_IRQHandler+0x678>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a25      	ldr	r2, [pc, #148]	; (8004248 <HAL_DMA_IRQHandler+0x6a4>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d031      	beq.n	800421c <HAL_DMA_IRQHandler+0x678>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a23      	ldr	r2, [pc, #140]	; (800424c <HAL_DMA_IRQHandler+0x6a8>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d02c      	beq.n	800421c <HAL_DMA_IRQHandler+0x678>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a22      	ldr	r2, [pc, #136]	; (8004250 <HAL_DMA_IRQHandler+0x6ac>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d027      	beq.n	800421c <HAL_DMA_IRQHandler+0x678>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a20      	ldr	r2, [pc, #128]	; (8004254 <HAL_DMA_IRQHandler+0x6b0>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d022      	beq.n	800421c <HAL_DMA_IRQHandler+0x678>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a1f      	ldr	r2, [pc, #124]	; (8004258 <HAL_DMA_IRQHandler+0x6b4>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d01d      	beq.n	800421c <HAL_DMA_IRQHandler+0x678>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a1d      	ldr	r2, [pc, #116]	; (800425c <HAL_DMA_IRQHandler+0x6b8>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d018      	beq.n	800421c <HAL_DMA_IRQHandler+0x678>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a1c      	ldr	r2, [pc, #112]	; (8004260 <HAL_DMA_IRQHandler+0x6bc>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d013      	beq.n	800421c <HAL_DMA_IRQHandler+0x678>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a1a      	ldr	r2, [pc, #104]	; (8004264 <HAL_DMA_IRQHandler+0x6c0>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d00e      	beq.n	800421c <HAL_DMA_IRQHandler+0x678>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a19      	ldr	r2, [pc, #100]	; (8004268 <HAL_DMA_IRQHandler+0x6c4>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d009      	beq.n	800421c <HAL_DMA_IRQHandler+0x678>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a17      	ldr	r2, [pc, #92]	; (800426c <HAL_DMA_IRQHandler+0x6c8>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d004      	beq.n	800421c <HAL_DMA_IRQHandler+0x678>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a16      	ldr	r2, [pc, #88]	; (8004270 <HAL_DMA_IRQHandler+0x6cc>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d12b      	bne.n	8004274 <HAL_DMA_IRQHandler+0x6d0>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0310 	and.w	r3, r3, #16
 8004226:	2b00      	cmp	r3, #0
 8004228:	bf14      	ite	ne
 800422a:	2301      	movne	r3, #1
 800422c:	2300      	moveq	r3, #0
 800422e:	b2db      	uxtb	r3, r3
 8004230:	e02a      	b.n	8004288 <HAL_DMA_IRQHandler+0x6e4>
 8004232:	bf00      	nop
 8004234:	40020010 	.word	0x40020010
 8004238:	40020028 	.word	0x40020028
 800423c:	40020040 	.word	0x40020040
 8004240:	40020058 	.word	0x40020058
 8004244:	40020070 	.word	0x40020070
 8004248:	40020088 	.word	0x40020088
 800424c:	400200a0 	.word	0x400200a0
 8004250:	400200b8 	.word	0x400200b8
 8004254:	40020410 	.word	0x40020410
 8004258:	40020428 	.word	0x40020428
 800425c:	40020440 	.word	0x40020440
 8004260:	40020458 	.word	0x40020458
 8004264:	40020470 	.word	0x40020470
 8004268:	40020488 	.word	0x40020488
 800426c:	400204a0 	.word	0x400204a0
 8004270:	400204b8 	.word	0x400204b8
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	bf14      	ite	ne
 8004282:	2301      	movne	r3, #1
 8004284:	2300      	moveq	r3, #0
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 8087 	beq.w	800439c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004292:	f003 031f 	and.w	r3, r3, #31
 8004296:	2220      	movs	r2, #32
 8004298:	409a      	lsls	r2, r3
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b04      	cmp	r3, #4
 80042a8:	d139      	bne.n	800431e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 0216 	bic.w	r2, r2, #22
 80042b8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	695a      	ldr	r2, [r3, #20]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042c8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d103      	bne.n	80042da <HAL_DMA_IRQHandler+0x736>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d007      	beq.n	80042ea <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0208 	bic.w	r2, r2, #8
 80042e8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ee:	f003 031f 	and.w	r3, r3, #31
 80042f2:	223f      	movs	r2, #63	; 0x3f
 80042f4:	409a      	lsls	r2, r3
 80042f6:	6a3b      	ldr	r3, [r7, #32]
 80042f8:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 834a 	beq.w	80049a8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	4798      	blx	r3
          }
          return;
 800431c:	e344      	b.n	80049a8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d018      	beq.n	800435e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d108      	bne.n	800434c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433e:	2b00      	cmp	r3, #0
 8004340:	d02c      	beq.n	800439c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	4798      	blx	r3
 800434a:	e027      	b.n	800439c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004350:	2b00      	cmp	r3, #0
 8004352:	d023      	beq.n	800439c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	4798      	blx	r3
 800435c:	e01e      	b.n	800439c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10f      	bne.n	800438c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f022 0210 	bic.w	r2, r2, #16
 800437a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 8306 	beq.w	80049b2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 8088 	beq.w	80044c4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2204      	movs	r2, #4
 80043b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a7a      	ldr	r2, [pc, #488]	; (80045ac <HAL_DMA_IRQHandler+0xa08>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d04a      	beq.n	800445c <HAL_DMA_IRQHandler+0x8b8>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a79      	ldr	r2, [pc, #484]	; (80045b0 <HAL_DMA_IRQHandler+0xa0c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d045      	beq.n	800445c <HAL_DMA_IRQHandler+0x8b8>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a77      	ldr	r2, [pc, #476]	; (80045b4 <HAL_DMA_IRQHandler+0xa10>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d040      	beq.n	800445c <HAL_DMA_IRQHandler+0x8b8>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a76      	ldr	r2, [pc, #472]	; (80045b8 <HAL_DMA_IRQHandler+0xa14>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d03b      	beq.n	800445c <HAL_DMA_IRQHandler+0x8b8>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a74      	ldr	r2, [pc, #464]	; (80045bc <HAL_DMA_IRQHandler+0xa18>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d036      	beq.n	800445c <HAL_DMA_IRQHandler+0x8b8>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a73      	ldr	r2, [pc, #460]	; (80045c0 <HAL_DMA_IRQHandler+0xa1c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d031      	beq.n	800445c <HAL_DMA_IRQHandler+0x8b8>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a71      	ldr	r2, [pc, #452]	; (80045c4 <HAL_DMA_IRQHandler+0xa20>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d02c      	beq.n	800445c <HAL_DMA_IRQHandler+0x8b8>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a70      	ldr	r2, [pc, #448]	; (80045c8 <HAL_DMA_IRQHandler+0xa24>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d027      	beq.n	800445c <HAL_DMA_IRQHandler+0x8b8>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a6e      	ldr	r2, [pc, #440]	; (80045cc <HAL_DMA_IRQHandler+0xa28>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d022      	beq.n	800445c <HAL_DMA_IRQHandler+0x8b8>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a6d      	ldr	r2, [pc, #436]	; (80045d0 <HAL_DMA_IRQHandler+0xa2c>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d01d      	beq.n	800445c <HAL_DMA_IRQHandler+0x8b8>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a6b      	ldr	r2, [pc, #428]	; (80045d4 <HAL_DMA_IRQHandler+0xa30>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d018      	beq.n	800445c <HAL_DMA_IRQHandler+0x8b8>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a6a      	ldr	r2, [pc, #424]	; (80045d8 <HAL_DMA_IRQHandler+0xa34>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d013      	beq.n	800445c <HAL_DMA_IRQHandler+0x8b8>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a68      	ldr	r2, [pc, #416]	; (80045dc <HAL_DMA_IRQHandler+0xa38>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d00e      	beq.n	800445c <HAL_DMA_IRQHandler+0x8b8>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a67      	ldr	r2, [pc, #412]	; (80045e0 <HAL_DMA_IRQHandler+0xa3c>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d009      	beq.n	800445c <HAL_DMA_IRQHandler+0x8b8>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a65      	ldr	r2, [pc, #404]	; (80045e4 <HAL_DMA_IRQHandler+0xa40>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d004      	beq.n	800445c <HAL_DMA_IRQHandler+0x8b8>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a64      	ldr	r2, [pc, #400]	; (80045e8 <HAL_DMA_IRQHandler+0xa44>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d108      	bne.n	800446e <HAL_DMA_IRQHandler+0x8ca>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 0201 	bic.w	r2, r2, #1
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	e007      	b.n	800447e <HAL_DMA_IRQHandler+0x8da>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0201 	bic.w	r2, r2, #1
 800447c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	3301      	adds	r3, #1
 8004482:	60fb      	str	r3, [r7, #12]
 8004484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004486:	429a      	cmp	r2, r3
 8004488:	d307      	bcc.n	800449a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1f2      	bne.n	800447e <HAL_DMA_IRQHandler+0x8da>
 8004498:	e000      	b.n	800449c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800449a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d004      	beq.n	80044bc <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2203      	movs	r2, #3
 80044b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80044ba:	e003      	b.n	80044c4 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 8272 	beq.w	80049b2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	4798      	blx	r3
 80044d6:	e26c      	b.n	80049b2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a43      	ldr	r2, [pc, #268]	; (80045ec <HAL_DMA_IRQHandler+0xa48>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d022      	beq.n	8004528 <HAL_DMA_IRQHandler+0x984>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a42      	ldr	r2, [pc, #264]	; (80045f0 <HAL_DMA_IRQHandler+0xa4c>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d01d      	beq.n	8004528 <HAL_DMA_IRQHandler+0x984>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a40      	ldr	r2, [pc, #256]	; (80045f4 <HAL_DMA_IRQHandler+0xa50>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d018      	beq.n	8004528 <HAL_DMA_IRQHandler+0x984>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a3f      	ldr	r2, [pc, #252]	; (80045f8 <HAL_DMA_IRQHandler+0xa54>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d013      	beq.n	8004528 <HAL_DMA_IRQHandler+0x984>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a3d      	ldr	r2, [pc, #244]	; (80045fc <HAL_DMA_IRQHandler+0xa58>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d00e      	beq.n	8004528 <HAL_DMA_IRQHandler+0x984>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a3c      	ldr	r2, [pc, #240]	; (8004600 <HAL_DMA_IRQHandler+0xa5c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d009      	beq.n	8004528 <HAL_DMA_IRQHandler+0x984>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a3a      	ldr	r2, [pc, #232]	; (8004604 <HAL_DMA_IRQHandler+0xa60>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d004      	beq.n	8004528 <HAL_DMA_IRQHandler+0x984>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a39      	ldr	r2, [pc, #228]	; (8004608 <HAL_DMA_IRQHandler+0xa64>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d101      	bne.n	800452c <HAL_DMA_IRQHandler+0x988>
 8004528:	2301      	movs	r3, #1
 800452a:	e000      	b.n	800452e <HAL_DMA_IRQHandler+0x98a>
 800452c:	2300      	movs	r3, #0
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 823f 	beq.w	80049b2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004540:	f003 031f 	and.w	r3, r3, #31
 8004544:	2204      	movs	r2, #4
 8004546:	409a      	lsls	r2, r3
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	4013      	ands	r3, r2
 800454c:	2b00      	cmp	r3, #0
 800454e:	f000 80cd 	beq.w	80046ec <HAL_DMA_IRQHandler+0xb48>
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 80c7 	beq.w	80046ec <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004562:	f003 031f 	and.w	r3, r3, #31
 8004566:	2204      	movs	r2, #4
 8004568:	409a      	lsls	r2, r3
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d049      	beq.n	800460c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d109      	bne.n	8004596 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 8210 	beq.w	80049ac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004594:	e20a      	b.n	80049ac <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 8206 	beq.w	80049ac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045a8:	e200      	b.n	80049ac <HAL_DMA_IRQHandler+0xe08>
 80045aa:	bf00      	nop
 80045ac:	40020010 	.word	0x40020010
 80045b0:	40020028 	.word	0x40020028
 80045b4:	40020040 	.word	0x40020040
 80045b8:	40020058 	.word	0x40020058
 80045bc:	40020070 	.word	0x40020070
 80045c0:	40020088 	.word	0x40020088
 80045c4:	400200a0 	.word	0x400200a0
 80045c8:	400200b8 	.word	0x400200b8
 80045cc:	40020410 	.word	0x40020410
 80045d0:	40020428 	.word	0x40020428
 80045d4:	40020440 	.word	0x40020440
 80045d8:	40020458 	.word	0x40020458
 80045dc:	40020470 	.word	0x40020470
 80045e0:	40020488 	.word	0x40020488
 80045e4:	400204a0 	.word	0x400204a0
 80045e8:	400204b8 	.word	0x400204b8
 80045ec:	58025408 	.word	0x58025408
 80045f0:	5802541c 	.word	0x5802541c
 80045f4:	58025430 	.word	0x58025430
 80045f8:	58025444 	.word	0x58025444
 80045fc:	58025458 	.word	0x58025458
 8004600:	5802546c 	.word	0x5802546c
 8004604:	58025480 	.word	0x58025480
 8004608:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f003 0320 	and.w	r3, r3, #32
 8004612:	2b00      	cmp	r3, #0
 8004614:	d160      	bne.n	80046d8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a8c      	ldr	r2, [pc, #560]	; (800484c <HAL_DMA_IRQHandler+0xca8>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d04a      	beq.n	80046b6 <HAL_DMA_IRQHandler+0xb12>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a8a      	ldr	r2, [pc, #552]	; (8004850 <HAL_DMA_IRQHandler+0xcac>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d045      	beq.n	80046b6 <HAL_DMA_IRQHandler+0xb12>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a89      	ldr	r2, [pc, #548]	; (8004854 <HAL_DMA_IRQHandler+0xcb0>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d040      	beq.n	80046b6 <HAL_DMA_IRQHandler+0xb12>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a87      	ldr	r2, [pc, #540]	; (8004858 <HAL_DMA_IRQHandler+0xcb4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d03b      	beq.n	80046b6 <HAL_DMA_IRQHandler+0xb12>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a86      	ldr	r2, [pc, #536]	; (800485c <HAL_DMA_IRQHandler+0xcb8>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d036      	beq.n	80046b6 <HAL_DMA_IRQHandler+0xb12>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a84      	ldr	r2, [pc, #528]	; (8004860 <HAL_DMA_IRQHandler+0xcbc>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d031      	beq.n	80046b6 <HAL_DMA_IRQHandler+0xb12>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a83      	ldr	r2, [pc, #524]	; (8004864 <HAL_DMA_IRQHandler+0xcc0>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d02c      	beq.n	80046b6 <HAL_DMA_IRQHandler+0xb12>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a81      	ldr	r2, [pc, #516]	; (8004868 <HAL_DMA_IRQHandler+0xcc4>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d027      	beq.n	80046b6 <HAL_DMA_IRQHandler+0xb12>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a80      	ldr	r2, [pc, #512]	; (800486c <HAL_DMA_IRQHandler+0xcc8>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d022      	beq.n	80046b6 <HAL_DMA_IRQHandler+0xb12>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a7e      	ldr	r2, [pc, #504]	; (8004870 <HAL_DMA_IRQHandler+0xccc>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d01d      	beq.n	80046b6 <HAL_DMA_IRQHandler+0xb12>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a7d      	ldr	r2, [pc, #500]	; (8004874 <HAL_DMA_IRQHandler+0xcd0>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d018      	beq.n	80046b6 <HAL_DMA_IRQHandler+0xb12>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a7b      	ldr	r2, [pc, #492]	; (8004878 <HAL_DMA_IRQHandler+0xcd4>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d013      	beq.n	80046b6 <HAL_DMA_IRQHandler+0xb12>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a7a      	ldr	r2, [pc, #488]	; (800487c <HAL_DMA_IRQHandler+0xcd8>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d00e      	beq.n	80046b6 <HAL_DMA_IRQHandler+0xb12>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a78      	ldr	r2, [pc, #480]	; (8004880 <HAL_DMA_IRQHandler+0xcdc>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d009      	beq.n	80046b6 <HAL_DMA_IRQHandler+0xb12>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a77      	ldr	r2, [pc, #476]	; (8004884 <HAL_DMA_IRQHandler+0xce0>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d004      	beq.n	80046b6 <HAL_DMA_IRQHandler+0xb12>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a75      	ldr	r2, [pc, #468]	; (8004888 <HAL_DMA_IRQHandler+0xce4>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d108      	bne.n	80046c8 <HAL_DMA_IRQHandler+0xb24>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0208 	bic.w	r2, r2, #8
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	e007      	b.n	80046d8 <HAL_DMA_IRQHandler+0xb34>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0204 	bic.w	r2, r2, #4
 80046d6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 8165 	beq.w	80049ac <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046ea:	e15f      	b.n	80049ac <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f0:	f003 031f 	and.w	r3, r3, #31
 80046f4:	2202      	movs	r2, #2
 80046f6:	409a      	lsls	r2, r3
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	4013      	ands	r3, r2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 80c5 	beq.w	800488c <HAL_DMA_IRQHandler+0xce8>
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 80bf 	beq.w	800488c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004712:	f003 031f 	and.w	r3, r3, #31
 8004716:	2202      	movs	r2, #2
 8004718:	409a      	lsls	r2, r3
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d018      	beq.n	800475a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d109      	bne.n	8004746 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 813a 	beq.w	80049b0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004744:	e134      	b.n	80049b0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474a:	2b00      	cmp	r3, #0
 800474c:	f000 8130 	beq.w	80049b0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004758:	e12a      	b.n	80049b0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f003 0320 	and.w	r3, r3, #32
 8004760:	2b00      	cmp	r3, #0
 8004762:	d168      	bne.n	8004836 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a38      	ldr	r2, [pc, #224]	; (800484c <HAL_DMA_IRQHandler+0xca8>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d04a      	beq.n	8004804 <HAL_DMA_IRQHandler+0xc60>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a37      	ldr	r2, [pc, #220]	; (8004850 <HAL_DMA_IRQHandler+0xcac>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d045      	beq.n	8004804 <HAL_DMA_IRQHandler+0xc60>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a35      	ldr	r2, [pc, #212]	; (8004854 <HAL_DMA_IRQHandler+0xcb0>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d040      	beq.n	8004804 <HAL_DMA_IRQHandler+0xc60>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a34      	ldr	r2, [pc, #208]	; (8004858 <HAL_DMA_IRQHandler+0xcb4>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d03b      	beq.n	8004804 <HAL_DMA_IRQHandler+0xc60>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a32      	ldr	r2, [pc, #200]	; (800485c <HAL_DMA_IRQHandler+0xcb8>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d036      	beq.n	8004804 <HAL_DMA_IRQHandler+0xc60>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a31      	ldr	r2, [pc, #196]	; (8004860 <HAL_DMA_IRQHandler+0xcbc>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d031      	beq.n	8004804 <HAL_DMA_IRQHandler+0xc60>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a2f      	ldr	r2, [pc, #188]	; (8004864 <HAL_DMA_IRQHandler+0xcc0>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d02c      	beq.n	8004804 <HAL_DMA_IRQHandler+0xc60>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a2e      	ldr	r2, [pc, #184]	; (8004868 <HAL_DMA_IRQHandler+0xcc4>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d027      	beq.n	8004804 <HAL_DMA_IRQHandler+0xc60>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a2c      	ldr	r2, [pc, #176]	; (800486c <HAL_DMA_IRQHandler+0xcc8>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d022      	beq.n	8004804 <HAL_DMA_IRQHandler+0xc60>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a2b      	ldr	r2, [pc, #172]	; (8004870 <HAL_DMA_IRQHandler+0xccc>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d01d      	beq.n	8004804 <HAL_DMA_IRQHandler+0xc60>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a29      	ldr	r2, [pc, #164]	; (8004874 <HAL_DMA_IRQHandler+0xcd0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d018      	beq.n	8004804 <HAL_DMA_IRQHandler+0xc60>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a28      	ldr	r2, [pc, #160]	; (8004878 <HAL_DMA_IRQHandler+0xcd4>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d013      	beq.n	8004804 <HAL_DMA_IRQHandler+0xc60>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a26      	ldr	r2, [pc, #152]	; (800487c <HAL_DMA_IRQHandler+0xcd8>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d00e      	beq.n	8004804 <HAL_DMA_IRQHandler+0xc60>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a25      	ldr	r2, [pc, #148]	; (8004880 <HAL_DMA_IRQHandler+0xcdc>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d009      	beq.n	8004804 <HAL_DMA_IRQHandler+0xc60>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a23      	ldr	r2, [pc, #140]	; (8004884 <HAL_DMA_IRQHandler+0xce0>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d004      	beq.n	8004804 <HAL_DMA_IRQHandler+0xc60>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a22      	ldr	r2, [pc, #136]	; (8004888 <HAL_DMA_IRQHandler+0xce4>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d108      	bne.n	8004816 <HAL_DMA_IRQHandler+0xc72>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 0214 	bic.w	r2, r2, #20
 8004812:	601a      	str	r2, [r3, #0]
 8004814:	e007      	b.n	8004826 <HAL_DMA_IRQHandler+0xc82>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 020a 	bic.w	r2, r2, #10
 8004824:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 80b8 	beq.w	80049b0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004848:	e0b2      	b.n	80049b0 <HAL_DMA_IRQHandler+0xe0c>
 800484a:	bf00      	nop
 800484c:	40020010 	.word	0x40020010
 8004850:	40020028 	.word	0x40020028
 8004854:	40020040 	.word	0x40020040
 8004858:	40020058 	.word	0x40020058
 800485c:	40020070 	.word	0x40020070
 8004860:	40020088 	.word	0x40020088
 8004864:	400200a0 	.word	0x400200a0
 8004868:	400200b8 	.word	0x400200b8
 800486c:	40020410 	.word	0x40020410
 8004870:	40020428 	.word	0x40020428
 8004874:	40020440 	.word	0x40020440
 8004878:	40020458 	.word	0x40020458
 800487c:	40020470 	.word	0x40020470
 8004880:	40020488 	.word	0x40020488
 8004884:	400204a0 	.word	0x400204a0
 8004888:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004890:	f003 031f 	and.w	r3, r3, #31
 8004894:	2208      	movs	r2, #8
 8004896:	409a      	lsls	r2, r3
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	4013      	ands	r3, r2
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 8088 	beq.w	80049b2 <HAL_DMA_IRQHandler+0xe0e>
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	f003 0308 	and.w	r3, r3, #8
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f000 8082 	beq.w	80049b2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a41      	ldr	r2, [pc, #260]	; (80049b8 <HAL_DMA_IRQHandler+0xe14>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d04a      	beq.n	800494e <HAL_DMA_IRQHandler+0xdaa>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a3f      	ldr	r2, [pc, #252]	; (80049bc <HAL_DMA_IRQHandler+0xe18>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d045      	beq.n	800494e <HAL_DMA_IRQHandler+0xdaa>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a3e      	ldr	r2, [pc, #248]	; (80049c0 <HAL_DMA_IRQHandler+0xe1c>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d040      	beq.n	800494e <HAL_DMA_IRQHandler+0xdaa>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a3c      	ldr	r2, [pc, #240]	; (80049c4 <HAL_DMA_IRQHandler+0xe20>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d03b      	beq.n	800494e <HAL_DMA_IRQHandler+0xdaa>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a3b      	ldr	r2, [pc, #236]	; (80049c8 <HAL_DMA_IRQHandler+0xe24>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d036      	beq.n	800494e <HAL_DMA_IRQHandler+0xdaa>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a39      	ldr	r2, [pc, #228]	; (80049cc <HAL_DMA_IRQHandler+0xe28>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d031      	beq.n	800494e <HAL_DMA_IRQHandler+0xdaa>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a38      	ldr	r2, [pc, #224]	; (80049d0 <HAL_DMA_IRQHandler+0xe2c>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d02c      	beq.n	800494e <HAL_DMA_IRQHandler+0xdaa>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a36      	ldr	r2, [pc, #216]	; (80049d4 <HAL_DMA_IRQHandler+0xe30>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d027      	beq.n	800494e <HAL_DMA_IRQHandler+0xdaa>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a35      	ldr	r2, [pc, #212]	; (80049d8 <HAL_DMA_IRQHandler+0xe34>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d022      	beq.n	800494e <HAL_DMA_IRQHandler+0xdaa>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a33      	ldr	r2, [pc, #204]	; (80049dc <HAL_DMA_IRQHandler+0xe38>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d01d      	beq.n	800494e <HAL_DMA_IRQHandler+0xdaa>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a32      	ldr	r2, [pc, #200]	; (80049e0 <HAL_DMA_IRQHandler+0xe3c>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d018      	beq.n	800494e <HAL_DMA_IRQHandler+0xdaa>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a30      	ldr	r2, [pc, #192]	; (80049e4 <HAL_DMA_IRQHandler+0xe40>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d013      	beq.n	800494e <HAL_DMA_IRQHandler+0xdaa>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a2f      	ldr	r2, [pc, #188]	; (80049e8 <HAL_DMA_IRQHandler+0xe44>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d00e      	beq.n	800494e <HAL_DMA_IRQHandler+0xdaa>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a2d      	ldr	r2, [pc, #180]	; (80049ec <HAL_DMA_IRQHandler+0xe48>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d009      	beq.n	800494e <HAL_DMA_IRQHandler+0xdaa>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a2c      	ldr	r2, [pc, #176]	; (80049f0 <HAL_DMA_IRQHandler+0xe4c>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d004      	beq.n	800494e <HAL_DMA_IRQHandler+0xdaa>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a2a      	ldr	r2, [pc, #168]	; (80049f4 <HAL_DMA_IRQHandler+0xe50>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d108      	bne.n	8004960 <HAL_DMA_IRQHandler+0xdbc>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 021c 	bic.w	r2, r2, #28
 800495c:	601a      	str	r2, [r3, #0]
 800495e:	e007      	b.n	8004970 <HAL_DMA_IRQHandler+0xdcc>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 020e 	bic.w	r2, r2, #14
 800496e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004974:	f003 031f 	and.w	r3, r3, #31
 8004978:	2201      	movs	r2, #1
 800497a:	409a      	lsls	r2, r3
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499a:	2b00      	cmp	r3, #0
 800499c:	d009      	beq.n	80049b2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	4798      	blx	r3
 80049a6:	e004      	b.n	80049b2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80049a8:	bf00      	nop
 80049aa:	e002      	b.n	80049b2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049ac:	bf00      	nop
 80049ae:	e000      	b.n	80049b2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049b0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80049b2:	3728      	adds	r7, #40	; 0x28
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	40020010 	.word	0x40020010
 80049bc:	40020028 	.word	0x40020028
 80049c0:	40020040 	.word	0x40020040
 80049c4:	40020058 	.word	0x40020058
 80049c8:	40020070 	.word	0x40020070
 80049cc:	40020088 	.word	0x40020088
 80049d0:	400200a0 	.word	0x400200a0
 80049d4:	400200b8 	.word	0x400200b8
 80049d8:	40020410 	.word	0x40020410
 80049dc:	40020428 	.word	0x40020428
 80049e0:	40020440 	.word	0x40020440
 80049e4:	40020458 	.word	0x40020458
 80049e8:	40020470 	.word	0x40020470
 80049ec:	40020488 	.word	0x40020488
 80049f0:	400204a0 	.word	0x400204a0
 80049f4:	400204b8 	.word	0x400204b8

080049f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a42      	ldr	r2, [pc, #264]	; (8004b10 <DMA_CalcBaseAndBitshift+0x118>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d04a      	beq.n	8004aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a41      	ldr	r2, [pc, #260]	; (8004b14 <DMA_CalcBaseAndBitshift+0x11c>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d045      	beq.n	8004aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a3f      	ldr	r2, [pc, #252]	; (8004b18 <DMA_CalcBaseAndBitshift+0x120>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d040      	beq.n	8004aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a3e      	ldr	r2, [pc, #248]	; (8004b1c <DMA_CalcBaseAndBitshift+0x124>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d03b      	beq.n	8004aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a3c      	ldr	r2, [pc, #240]	; (8004b20 <DMA_CalcBaseAndBitshift+0x128>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d036      	beq.n	8004aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a3b      	ldr	r2, [pc, #236]	; (8004b24 <DMA_CalcBaseAndBitshift+0x12c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d031      	beq.n	8004aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a39      	ldr	r2, [pc, #228]	; (8004b28 <DMA_CalcBaseAndBitshift+0x130>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d02c      	beq.n	8004aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a38      	ldr	r2, [pc, #224]	; (8004b2c <DMA_CalcBaseAndBitshift+0x134>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d027      	beq.n	8004aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a36      	ldr	r2, [pc, #216]	; (8004b30 <DMA_CalcBaseAndBitshift+0x138>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d022      	beq.n	8004aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a35      	ldr	r2, [pc, #212]	; (8004b34 <DMA_CalcBaseAndBitshift+0x13c>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d01d      	beq.n	8004aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a33      	ldr	r2, [pc, #204]	; (8004b38 <DMA_CalcBaseAndBitshift+0x140>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d018      	beq.n	8004aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a32      	ldr	r2, [pc, #200]	; (8004b3c <DMA_CalcBaseAndBitshift+0x144>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d013      	beq.n	8004aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a30      	ldr	r2, [pc, #192]	; (8004b40 <DMA_CalcBaseAndBitshift+0x148>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d00e      	beq.n	8004aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a2f      	ldr	r2, [pc, #188]	; (8004b44 <DMA_CalcBaseAndBitshift+0x14c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d009      	beq.n	8004aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a2d      	ldr	r2, [pc, #180]	; (8004b48 <DMA_CalcBaseAndBitshift+0x150>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d004      	beq.n	8004aa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a2c      	ldr	r2, [pc, #176]	; (8004b4c <DMA_CalcBaseAndBitshift+0x154>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d101      	bne.n	8004aa4 <DMA_CalcBaseAndBitshift+0xac>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e000      	b.n	8004aa6 <DMA_CalcBaseAndBitshift+0xae>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d024      	beq.n	8004af4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	3b10      	subs	r3, #16
 8004ab2:	4a27      	ldr	r2, [pc, #156]	; (8004b50 <DMA_CalcBaseAndBitshift+0x158>)
 8004ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab8:	091b      	lsrs	r3, r3, #4
 8004aba:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f003 0307 	and.w	r3, r3, #7
 8004ac2:	4a24      	ldr	r2, [pc, #144]	; (8004b54 <DMA_CalcBaseAndBitshift+0x15c>)
 8004ac4:	5cd3      	ldrb	r3, [r2, r3]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2b03      	cmp	r3, #3
 8004ad0:	d908      	bls.n	8004ae4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	4b1f      	ldr	r3, [pc, #124]	; (8004b58 <DMA_CalcBaseAndBitshift+0x160>)
 8004ada:	4013      	ands	r3, r2
 8004adc:	1d1a      	adds	r2, r3, #4
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	659a      	str	r2, [r3, #88]	; 0x58
 8004ae2:	e00d      	b.n	8004b00 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	461a      	mov	r2, r3
 8004aea:	4b1b      	ldr	r3, [pc, #108]	; (8004b58 <DMA_CalcBaseAndBitshift+0x160>)
 8004aec:	4013      	ands	r3, r2
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6593      	str	r3, [r2, #88]	; 0x58
 8004af2:	e005      	b.n	8004b00 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	40020010 	.word	0x40020010
 8004b14:	40020028 	.word	0x40020028
 8004b18:	40020040 	.word	0x40020040
 8004b1c:	40020058 	.word	0x40020058
 8004b20:	40020070 	.word	0x40020070
 8004b24:	40020088 	.word	0x40020088
 8004b28:	400200a0 	.word	0x400200a0
 8004b2c:	400200b8 	.word	0x400200b8
 8004b30:	40020410 	.word	0x40020410
 8004b34:	40020428 	.word	0x40020428
 8004b38:	40020440 	.word	0x40020440
 8004b3c:	40020458 	.word	0x40020458
 8004b40:	40020470 	.word	0x40020470
 8004b44:	40020488 	.word	0x40020488
 8004b48:	400204a0 	.word	0x400204a0
 8004b4c:	400204b8 	.word	0x400204b8
 8004b50:	aaaaaaab 	.word	0xaaaaaaab
 8004b54:	0800bd2c 	.word	0x0800bd2c
 8004b58:	fffffc00 	.word	0xfffffc00

08004b5c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b64:	2300      	movs	r3, #0
 8004b66:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d120      	bne.n	8004bb2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b74:	2b03      	cmp	r3, #3
 8004b76:	d858      	bhi.n	8004c2a <DMA_CheckFifoParam+0xce>
 8004b78:	a201      	add	r2, pc, #4	; (adr r2, 8004b80 <DMA_CheckFifoParam+0x24>)
 8004b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7e:	bf00      	nop
 8004b80:	08004b91 	.word	0x08004b91
 8004b84:	08004ba3 	.word	0x08004ba3
 8004b88:	08004b91 	.word	0x08004b91
 8004b8c:	08004c2b 	.word	0x08004c2b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d048      	beq.n	8004c2e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ba0:	e045      	b.n	8004c2e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004baa:	d142      	bne.n	8004c32 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004bb0:	e03f      	b.n	8004c32 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bba:	d123      	bne.n	8004c04 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc0:	2b03      	cmp	r3, #3
 8004bc2:	d838      	bhi.n	8004c36 <DMA_CheckFifoParam+0xda>
 8004bc4:	a201      	add	r2, pc, #4	; (adr r2, 8004bcc <DMA_CheckFifoParam+0x70>)
 8004bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bca:	bf00      	nop
 8004bcc:	08004bdd 	.word	0x08004bdd
 8004bd0:	08004be3 	.word	0x08004be3
 8004bd4:	08004bdd 	.word	0x08004bdd
 8004bd8:	08004bf5 	.word	0x08004bf5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	73fb      	strb	r3, [r7, #15]
        break;
 8004be0:	e030      	b.n	8004c44 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d025      	beq.n	8004c3a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004bf2:	e022      	b.n	8004c3a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bfc:	d11f      	bne.n	8004c3e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004c02:	e01c      	b.n	8004c3e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d902      	bls.n	8004c12 <DMA_CheckFifoParam+0xb6>
 8004c0c:	2b03      	cmp	r3, #3
 8004c0e:	d003      	beq.n	8004c18 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004c10:	e018      	b.n	8004c44 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	73fb      	strb	r3, [r7, #15]
        break;
 8004c16:	e015      	b.n	8004c44 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00e      	beq.n	8004c42 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	73fb      	strb	r3, [r7, #15]
    break;
 8004c28:	e00b      	b.n	8004c42 <DMA_CheckFifoParam+0xe6>
        break;
 8004c2a:	bf00      	nop
 8004c2c:	e00a      	b.n	8004c44 <DMA_CheckFifoParam+0xe8>
        break;
 8004c2e:	bf00      	nop
 8004c30:	e008      	b.n	8004c44 <DMA_CheckFifoParam+0xe8>
        break;
 8004c32:	bf00      	nop
 8004c34:	e006      	b.n	8004c44 <DMA_CheckFifoParam+0xe8>
        break;
 8004c36:	bf00      	nop
 8004c38:	e004      	b.n	8004c44 <DMA_CheckFifoParam+0xe8>
        break;
 8004c3a:	bf00      	nop
 8004c3c:	e002      	b.n	8004c44 <DMA_CheckFifoParam+0xe8>
        break;
 8004c3e:	bf00      	nop
 8004c40:	e000      	b.n	8004c44 <DMA_CheckFifoParam+0xe8>
    break;
 8004c42:	bf00      	nop
    }
  }

  return status;
 8004c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop

08004c54 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a38      	ldr	r2, [pc, #224]	; (8004d48 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d022      	beq.n	8004cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a36      	ldr	r2, [pc, #216]	; (8004d4c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d01d      	beq.n	8004cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a35      	ldr	r2, [pc, #212]	; (8004d50 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d018      	beq.n	8004cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a33      	ldr	r2, [pc, #204]	; (8004d54 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d013      	beq.n	8004cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a32      	ldr	r2, [pc, #200]	; (8004d58 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d00e      	beq.n	8004cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a30      	ldr	r2, [pc, #192]	; (8004d5c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d009      	beq.n	8004cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a2f      	ldr	r2, [pc, #188]	; (8004d60 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d004      	beq.n	8004cb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a2d      	ldr	r2, [pc, #180]	; (8004d64 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d101      	bne.n	8004cb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e000      	b.n	8004cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d01a      	beq.n	8004cf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	3b08      	subs	r3, #8
 8004cc4:	4a28      	ldr	r2, [pc, #160]	; (8004d68 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cca:	091b      	lsrs	r3, r3, #4
 8004ccc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	4b26      	ldr	r3, [pc, #152]	; (8004d6c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004cd2:	4413      	add	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a24      	ldr	r2, [pc, #144]	; (8004d70 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004ce0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f003 031f 	and.w	r3, r3, #31
 8004ce8:	2201      	movs	r2, #1
 8004cea:	409a      	lsls	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004cf0:	e024      	b.n	8004d3c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	3b10      	subs	r3, #16
 8004cfa:	4a1e      	ldr	r2, [pc, #120]	; (8004d74 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004d00:	091b      	lsrs	r3, r3, #4
 8004d02:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	4a1c      	ldr	r2, [pc, #112]	; (8004d78 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d806      	bhi.n	8004d1a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	4a1b      	ldr	r2, [pc, #108]	; (8004d7c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d902      	bls.n	8004d1a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	3308      	adds	r3, #8
 8004d18:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	4b18      	ldr	r3, [pc, #96]	; (8004d80 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004d1e:	4413      	add	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	461a      	mov	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a16      	ldr	r2, [pc, #88]	; (8004d84 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004d2c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f003 031f 	and.w	r3, r3, #31
 8004d34:	2201      	movs	r2, #1
 8004d36:	409a      	lsls	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004d3c:	bf00      	nop
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	58025408 	.word	0x58025408
 8004d4c:	5802541c 	.word	0x5802541c
 8004d50:	58025430 	.word	0x58025430
 8004d54:	58025444 	.word	0x58025444
 8004d58:	58025458 	.word	0x58025458
 8004d5c:	5802546c 	.word	0x5802546c
 8004d60:	58025480 	.word	0x58025480
 8004d64:	58025494 	.word	0x58025494
 8004d68:	cccccccd 	.word	0xcccccccd
 8004d6c:	16009600 	.word	0x16009600
 8004d70:	58025880 	.word	0x58025880
 8004d74:	aaaaaaab 	.word	0xaaaaaaab
 8004d78:	400204b8 	.word	0x400204b8
 8004d7c:	4002040f 	.word	0x4002040f
 8004d80:	10008200 	.word	0x10008200
 8004d84:	40020880 	.word	0x40020880

08004d88 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d04a      	beq.n	8004e34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2b08      	cmp	r3, #8
 8004da2:	d847      	bhi.n	8004e34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a25      	ldr	r2, [pc, #148]	; (8004e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d022      	beq.n	8004df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a24      	ldr	r2, [pc, #144]	; (8004e44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d01d      	beq.n	8004df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a22      	ldr	r2, [pc, #136]	; (8004e48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d018      	beq.n	8004df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a21      	ldr	r2, [pc, #132]	; (8004e4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d013      	beq.n	8004df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a1f      	ldr	r2, [pc, #124]	; (8004e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d00e      	beq.n	8004df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a1e      	ldr	r2, [pc, #120]	; (8004e54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d009      	beq.n	8004df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a1c      	ldr	r2, [pc, #112]	; (8004e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d004      	beq.n	8004df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a1b      	ldr	r2, [pc, #108]	; (8004e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d101      	bne.n	8004df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004df4:	2301      	movs	r3, #1
 8004df6:	e000      	b.n	8004dfa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00a      	beq.n	8004e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	4b17      	ldr	r3, [pc, #92]	; (8004e60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004e02:	4413      	add	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	461a      	mov	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a15      	ldr	r2, [pc, #84]	; (8004e64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004e10:	671a      	str	r2, [r3, #112]	; 0x70
 8004e12:	e009      	b.n	8004e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	4b14      	ldr	r3, [pc, #80]	; (8004e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004e18:	4413      	add	r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a11      	ldr	r2, [pc, #68]	; (8004e6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004e26:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	409a      	lsls	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004e34:	bf00      	nop
 8004e36:	3714      	adds	r7, #20
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	58025408 	.word	0x58025408
 8004e44:	5802541c 	.word	0x5802541c
 8004e48:	58025430 	.word	0x58025430
 8004e4c:	58025444 	.word	0x58025444
 8004e50:	58025458 	.word	0x58025458
 8004e54:	5802546c 	.word	0x5802546c
 8004e58:	58025480 	.word	0x58025480
 8004e5c:	58025494 	.word	0x58025494
 8004e60:	1600963f 	.word	0x1600963f
 8004e64:	58025940 	.word	0x58025940
 8004e68:	1000823f 	.word	0x1000823f
 8004e6c:	40020940 	.word	0x40020940

08004e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b089      	sub	sp, #36	; 0x24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004e7e:	4b89      	ldr	r3, [pc, #548]	; (80050a4 <HAL_GPIO_Init+0x234>)
 8004e80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e82:	e194      	b.n	80051ae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	2101      	movs	r1, #1
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e90:	4013      	ands	r3, r2
 8004e92:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f000 8186 	beq.w	80051a8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d00b      	beq.n	8004ebc <HAL_GPIO_Init+0x4c>
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d007      	beq.n	8004ebc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004eb0:	2b11      	cmp	r3, #17
 8004eb2:	d003      	beq.n	8004ebc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	2b12      	cmp	r3, #18
 8004eba:	d130      	bne.n	8004f1e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	2203      	movs	r2, #3
 8004ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ecc:	43db      	mvns	r3, r3
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	68da      	ldr	r2, [r3, #12]
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8004efa:	43db      	mvns	r3, r3
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	4013      	ands	r3, r2
 8004f00:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	091b      	lsrs	r3, r3, #4
 8004f08:	f003 0201 	and.w	r2, r3, #1
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	69ba      	ldr	r2, [r7, #24]
 8004f1c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	005b      	lsls	r3, r3, #1
 8004f28:	2203      	movs	r2, #3
 8004f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2e:	43db      	mvns	r3, r3
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	4013      	ands	r3, r2
 8004f34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	689a      	ldr	r2, [r3, #8]
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	005b      	lsls	r3, r3, #1
 8004f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d003      	beq.n	8004f5e <HAL_GPIO_Init+0xee>
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2b12      	cmp	r3, #18
 8004f5c:	d123      	bne.n	8004fa6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	08da      	lsrs	r2, r3, #3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	3208      	adds	r2, #8
 8004f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	f003 0307 	and.w	r3, r3, #7
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	220f      	movs	r2, #15
 8004f76:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7a:	43db      	mvns	r3, r3
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	691a      	ldr	r2, [r3, #16]
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	08da      	lsrs	r2, r3, #3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	3208      	adds	r2, #8
 8004fa0:	69b9      	ldr	r1, [r7, #24]
 8004fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	2203      	movs	r2, #3
 8004fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb6:	43db      	mvns	r3, r3
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f003 0203 	and.w	r2, r3, #3
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	fa02 f303 	lsl.w	r3, r2, r3
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f000 80e0 	beq.w	80051a8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fe8:	4b2f      	ldr	r3, [pc, #188]	; (80050a8 <HAL_GPIO_Init+0x238>)
 8004fea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004fee:	4a2e      	ldr	r2, [pc, #184]	; (80050a8 <HAL_GPIO_Init+0x238>)
 8004ff0:	f043 0302 	orr.w	r3, r3, #2
 8004ff4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004ff8:	4b2b      	ldr	r3, [pc, #172]	; (80050a8 <HAL_GPIO_Init+0x238>)
 8004ffa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005006:	4a29      	ldr	r2, [pc, #164]	; (80050ac <HAL_GPIO_Init+0x23c>)
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	089b      	lsrs	r3, r3, #2
 800500c:	3302      	adds	r3, #2
 800500e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	f003 0303 	and.w	r3, r3, #3
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	220f      	movs	r2, #15
 800501e:	fa02 f303 	lsl.w	r3, r2, r3
 8005022:	43db      	mvns	r3, r3
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	4013      	ands	r3, r2
 8005028:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a20      	ldr	r2, [pc, #128]	; (80050b0 <HAL_GPIO_Init+0x240>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d052      	beq.n	80050d8 <HAL_GPIO_Init+0x268>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a1f      	ldr	r2, [pc, #124]	; (80050b4 <HAL_GPIO_Init+0x244>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d031      	beq.n	800509e <HAL_GPIO_Init+0x22e>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a1e      	ldr	r2, [pc, #120]	; (80050b8 <HAL_GPIO_Init+0x248>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d02b      	beq.n	800509a <HAL_GPIO_Init+0x22a>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a1d      	ldr	r2, [pc, #116]	; (80050bc <HAL_GPIO_Init+0x24c>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d025      	beq.n	8005096 <HAL_GPIO_Init+0x226>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a1c      	ldr	r2, [pc, #112]	; (80050c0 <HAL_GPIO_Init+0x250>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d01f      	beq.n	8005092 <HAL_GPIO_Init+0x222>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a1b      	ldr	r2, [pc, #108]	; (80050c4 <HAL_GPIO_Init+0x254>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d019      	beq.n	800508e <HAL_GPIO_Init+0x21e>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a1a      	ldr	r2, [pc, #104]	; (80050c8 <HAL_GPIO_Init+0x258>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d013      	beq.n	800508a <HAL_GPIO_Init+0x21a>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a19      	ldr	r2, [pc, #100]	; (80050cc <HAL_GPIO_Init+0x25c>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d00d      	beq.n	8005086 <HAL_GPIO_Init+0x216>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a18      	ldr	r2, [pc, #96]	; (80050d0 <HAL_GPIO_Init+0x260>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d007      	beq.n	8005082 <HAL_GPIO_Init+0x212>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a17      	ldr	r2, [pc, #92]	; (80050d4 <HAL_GPIO_Init+0x264>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d101      	bne.n	800507e <HAL_GPIO_Init+0x20e>
 800507a:	2309      	movs	r3, #9
 800507c:	e02d      	b.n	80050da <HAL_GPIO_Init+0x26a>
 800507e:	230a      	movs	r3, #10
 8005080:	e02b      	b.n	80050da <HAL_GPIO_Init+0x26a>
 8005082:	2308      	movs	r3, #8
 8005084:	e029      	b.n	80050da <HAL_GPIO_Init+0x26a>
 8005086:	2307      	movs	r3, #7
 8005088:	e027      	b.n	80050da <HAL_GPIO_Init+0x26a>
 800508a:	2306      	movs	r3, #6
 800508c:	e025      	b.n	80050da <HAL_GPIO_Init+0x26a>
 800508e:	2305      	movs	r3, #5
 8005090:	e023      	b.n	80050da <HAL_GPIO_Init+0x26a>
 8005092:	2304      	movs	r3, #4
 8005094:	e021      	b.n	80050da <HAL_GPIO_Init+0x26a>
 8005096:	2303      	movs	r3, #3
 8005098:	e01f      	b.n	80050da <HAL_GPIO_Init+0x26a>
 800509a:	2302      	movs	r3, #2
 800509c:	e01d      	b.n	80050da <HAL_GPIO_Init+0x26a>
 800509e:	2301      	movs	r3, #1
 80050a0:	e01b      	b.n	80050da <HAL_GPIO_Init+0x26a>
 80050a2:	bf00      	nop
 80050a4:	58000080 	.word	0x58000080
 80050a8:	58024400 	.word	0x58024400
 80050ac:	58000400 	.word	0x58000400
 80050b0:	58020000 	.word	0x58020000
 80050b4:	58020400 	.word	0x58020400
 80050b8:	58020800 	.word	0x58020800
 80050bc:	58020c00 	.word	0x58020c00
 80050c0:	58021000 	.word	0x58021000
 80050c4:	58021400 	.word	0x58021400
 80050c8:	58021800 	.word	0x58021800
 80050cc:	58021c00 	.word	0x58021c00
 80050d0:	58022000 	.word	0x58022000
 80050d4:	58022400 	.word	0x58022400
 80050d8:	2300      	movs	r3, #0
 80050da:	69fa      	ldr	r2, [r7, #28]
 80050dc:	f002 0203 	and.w	r2, r2, #3
 80050e0:	0092      	lsls	r2, r2, #2
 80050e2:	4093      	lsls	r3, r2
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050ea:	4938      	ldr	r1, [pc, #224]	; (80051cc <HAL_GPIO_Init+0x35c>)
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	089b      	lsrs	r3, r3, #2
 80050f0:	3302      	adds	r3, #2
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	43db      	mvns	r3, r3
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	4013      	ands	r3, r2
 8005106:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d003      	beq.n	800511c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	4313      	orrs	r3, r2
 800511a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	69ba      	ldr	r2, [r7, #24]
 8005120:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	43db      	mvns	r3, r3
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	4013      	ands	r3, r2
 8005130:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	4313      	orrs	r3, r2
 8005144:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800514c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	43db      	mvns	r3, r3
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	4013      	ands	r3, r2
 800515c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d003      	beq.n	8005172 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	4313      	orrs	r3, r2
 8005170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005172:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800517a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	43db      	mvns	r3, r3
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	4013      	ands	r3, r2
 800518a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d003      	beq.n	80051a0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	4313      	orrs	r3, r2
 800519e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80051a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	3301      	adds	r3, #1
 80051ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	fa22 f303 	lsr.w	r3, r2, r3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f47f ae63 	bne.w	8004e84 <HAL_GPIO_Init+0x14>
  }
}
 80051be:	bf00      	nop
 80051c0:	bf00      	nop
 80051c2:	3724      	adds	r7, #36	; 0x24
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr
 80051cc:	58000400 	.word	0x58000400

080051d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	460b      	mov	r3, r1
 80051da:	807b      	strh	r3, [r7, #2]
 80051dc:	4613      	mov	r3, r2
 80051de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051e0:	787b      	ldrb	r3, [r7, #1]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d003      	beq.n	80051ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051e6:	887a      	ldrh	r2, [r7, #2]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80051ec:	e003      	b.n	80051f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80051ee:	887b      	ldrh	r3, [r7, #2]
 80051f0:	041a      	lsls	r2, r3, #16
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	619a      	str	r2, [r3, #24]
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b082      	sub	sp, #8
 8005206:	af00      	add	r7, sp, #0
 8005208:	4603      	mov	r3, r0
 800520a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800520c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005210:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005214:	88fb      	ldrh	r3, [r7, #6]
 8005216:	4013      	ands	r3, r2
 8005218:	2b00      	cmp	r3, #0
 800521a:	d008      	beq.n	800522e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800521c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005220:	88fb      	ldrh	r3, [r7, #6]
 8005222:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005226:	88fb      	ldrh	r3, [r7, #6]
 8005228:	4618      	mov	r0, r3
 800522a:	f7fc fb5d 	bl	80018e8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800522e:	bf00      	nop
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
	...

08005238 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005240:	4b19      	ldr	r3, [pc, #100]	; (80052a8 <HAL_PWREx_ConfigSupply+0x70>)
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f003 0304 	and.w	r3, r3, #4
 8005248:	2b04      	cmp	r3, #4
 800524a:	d00a      	beq.n	8005262 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800524c:	4b16      	ldr	r3, [pc, #88]	; (80052a8 <HAL_PWREx_ConfigSupply+0x70>)
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	429a      	cmp	r2, r3
 8005258:	d001      	beq.n	800525e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e01f      	b.n	800529e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800525e:	2300      	movs	r3, #0
 8005260:	e01d      	b.n	800529e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005262:	4b11      	ldr	r3, [pc, #68]	; (80052a8 <HAL_PWREx_ConfigSupply+0x70>)
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	f023 0207 	bic.w	r2, r3, #7
 800526a:	490f      	ldr	r1, [pc, #60]	; (80052a8 <HAL_PWREx_ConfigSupply+0x70>)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4313      	orrs	r3, r2
 8005270:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005272:	f7fd f9c7 	bl	8002604 <HAL_GetTick>
 8005276:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005278:	e009      	b.n	800528e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800527a:	f7fd f9c3 	bl	8002604 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005288:	d901      	bls.n	800528e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e007      	b.n	800529e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800528e:	4b06      	ldr	r3, [pc, #24]	; (80052a8 <HAL_PWREx_ConfigSupply+0x70>)
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005296:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800529a:	d1ee      	bne.n	800527a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	58024800 	.word	0x58024800

080052ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b08c      	sub	sp, #48	; 0x30
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e3ff      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	f000 8087 	beq.w	80053da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052cc:	4b99      	ldr	r3, [pc, #612]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052d6:	4b97      	ldr	r3, [pc, #604]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80052d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052da:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80052dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052de:	2b10      	cmp	r3, #16
 80052e0:	d007      	beq.n	80052f2 <HAL_RCC_OscConfig+0x46>
 80052e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e4:	2b18      	cmp	r3, #24
 80052e6:	d110      	bne.n	800530a <HAL_RCC_OscConfig+0x5e>
 80052e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ea:	f003 0303 	and.w	r3, r3, #3
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d10b      	bne.n	800530a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052f2:	4b90      	ldr	r3, [pc, #576]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d06c      	beq.n	80053d8 <HAL_RCC_OscConfig+0x12c>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d168      	bne.n	80053d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e3d9      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005312:	d106      	bne.n	8005322 <HAL_RCC_OscConfig+0x76>
 8005314:	4b87      	ldr	r3, [pc, #540]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a86      	ldr	r2, [pc, #536]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 800531a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800531e:	6013      	str	r3, [r2, #0]
 8005320:	e02e      	b.n	8005380 <HAL_RCC_OscConfig+0xd4>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10c      	bne.n	8005344 <HAL_RCC_OscConfig+0x98>
 800532a:	4b82      	ldr	r3, [pc, #520]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a81      	ldr	r2, [pc, #516]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005334:	6013      	str	r3, [r2, #0]
 8005336:	4b7f      	ldr	r3, [pc, #508]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a7e      	ldr	r2, [pc, #504]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 800533c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005340:	6013      	str	r3, [r2, #0]
 8005342:	e01d      	b.n	8005380 <HAL_RCC_OscConfig+0xd4>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800534c:	d10c      	bne.n	8005368 <HAL_RCC_OscConfig+0xbc>
 800534e:	4b79      	ldr	r3, [pc, #484]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a78      	ldr	r2, [pc, #480]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005358:	6013      	str	r3, [r2, #0]
 800535a:	4b76      	ldr	r3, [pc, #472]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a75      	ldr	r2, [pc, #468]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005364:	6013      	str	r3, [r2, #0]
 8005366:	e00b      	b.n	8005380 <HAL_RCC_OscConfig+0xd4>
 8005368:	4b72      	ldr	r3, [pc, #456]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a71      	ldr	r2, [pc, #452]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 800536e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005372:	6013      	str	r3, [r2, #0]
 8005374:	4b6f      	ldr	r3, [pc, #444]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a6e      	ldr	r2, [pc, #440]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 800537a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800537e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d013      	beq.n	80053b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005388:	f7fd f93c 	bl	8002604 <HAL_GetTick>
 800538c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800538e:	e008      	b.n	80053a2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005390:	f7fd f938 	bl	8002604 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b64      	cmp	r3, #100	; 0x64
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e38d      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053a2:	4b64      	ldr	r3, [pc, #400]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d0f0      	beq.n	8005390 <HAL_RCC_OscConfig+0xe4>
 80053ae:	e014      	b.n	80053da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b0:	f7fd f928 	bl	8002604 <HAL_GetTick>
 80053b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053b6:	e008      	b.n	80053ca <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053b8:	f7fd f924 	bl	8002604 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2b64      	cmp	r3, #100	; 0x64
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e379      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80053ca:	4b5a      	ldr	r3, [pc, #360]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1f0      	bne.n	80053b8 <HAL_RCC_OscConfig+0x10c>
 80053d6:	e000      	b.n	80053da <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f000 80ae 	beq.w	8005544 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053e8:	4b52      	ldr	r3, [pc, #328]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053f2:	4b50      	ldr	r3, [pc, #320]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80053f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80053f8:	6a3b      	ldr	r3, [r7, #32]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d007      	beq.n	800540e <HAL_RCC_OscConfig+0x162>
 80053fe:	6a3b      	ldr	r3, [r7, #32]
 8005400:	2b18      	cmp	r3, #24
 8005402:	d13a      	bne.n	800547a <HAL_RCC_OscConfig+0x1ce>
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	f003 0303 	and.w	r3, r3, #3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d135      	bne.n	800547a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800540e:	4b49      	ldr	r3, [pc, #292]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0304 	and.w	r3, r3, #4
 8005416:	2b00      	cmp	r3, #0
 8005418:	d005      	beq.n	8005426 <HAL_RCC_OscConfig+0x17a>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e34b      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005426:	f7fd f8f9 	bl	800261c <HAL_GetREVID>
 800542a:	4603      	mov	r3, r0
 800542c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005430:	4293      	cmp	r3, r2
 8005432:	d817      	bhi.n	8005464 <HAL_RCC_OscConfig+0x1b8>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	2b40      	cmp	r3, #64	; 0x40
 800543a:	d108      	bne.n	800544e <HAL_RCC_OscConfig+0x1a2>
 800543c:	4b3d      	ldr	r3, [pc, #244]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005444:	4a3b      	ldr	r2, [pc, #236]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005446:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800544a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800544c:	e07a      	b.n	8005544 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800544e:	4b39      	ldr	r3, [pc, #228]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	031b      	lsls	r3, r3, #12
 800545c:	4935      	ldr	r1, [pc, #212]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 800545e:	4313      	orrs	r3, r2
 8005460:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005462:	e06f      	b.n	8005544 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005464:	4b33      	ldr	r3, [pc, #204]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	061b      	lsls	r3, r3, #24
 8005472:	4930      	ldr	r1, [pc, #192]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005474:	4313      	orrs	r3, r2
 8005476:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005478:	e064      	b.n	8005544 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d045      	beq.n	800550e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005482:	4b2c      	ldr	r3, [pc, #176]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f023 0219 	bic.w	r2, r3, #25
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	4929      	ldr	r1, [pc, #164]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005490:	4313      	orrs	r3, r2
 8005492:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005494:	f7fd f8b6 	bl	8002604 <HAL_GetTick>
 8005498:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800549a:	e008      	b.n	80054ae <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800549c:	f7fd f8b2 	bl	8002604 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e307      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054ae:	4b21      	ldr	r3, [pc, #132]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0304 	and.w	r3, r3, #4
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0f0      	beq.n	800549c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ba:	f7fd f8af 	bl	800261c <HAL_GetREVID>
 80054be:	4603      	mov	r3, r0
 80054c0:	f241 0203 	movw	r2, #4099	; 0x1003
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d817      	bhi.n	80054f8 <HAL_RCC_OscConfig+0x24c>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	2b40      	cmp	r3, #64	; 0x40
 80054ce:	d108      	bne.n	80054e2 <HAL_RCC_OscConfig+0x236>
 80054d0:	4b18      	ldr	r3, [pc, #96]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80054d8:	4a16      	ldr	r2, [pc, #88]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80054da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054de:	6053      	str	r3, [r2, #4]
 80054e0:	e030      	b.n	8005544 <HAL_RCC_OscConfig+0x298>
 80054e2:	4b14      	ldr	r3, [pc, #80]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	031b      	lsls	r3, r3, #12
 80054f0:	4910      	ldr	r1, [pc, #64]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	604b      	str	r3, [r1, #4]
 80054f6:	e025      	b.n	8005544 <HAL_RCC_OscConfig+0x298>
 80054f8:	4b0e      	ldr	r3, [pc, #56]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	061b      	lsls	r3, r3, #24
 8005506:	490b      	ldr	r1, [pc, #44]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005508:	4313      	orrs	r3, r2
 800550a:	604b      	str	r3, [r1, #4]
 800550c:	e01a      	b.n	8005544 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800550e:	4b09      	ldr	r3, [pc, #36]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a08      	ldr	r2, [pc, #32]	; (8005534 <HAL_RCC_OscConfig+0x288>)
 8005514:	f023 0301 	bic.w	r3, r3, #1
 8005518:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800551a:	f7fd f873 	bl	8002604 <HAL_GetTick>
 800551e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005520:	e00a      	b.n	8005538 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005522:	f7fd f86f 	bl	8002604 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	2b02      	cmp	r3, #2
 800552e:	d903      	bls.n	8005538 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e2c4      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
 8005534:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005538:	4ba4      	ldr	r3, [pc, #656]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0304 	and.w	r3, r3, #4
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1ee      	bne.n	8005522 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0310 	and.w	r3, r3, #16
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 80a9 	beq.w	80056a4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005552:	4b9e      	ldr	r3, [pc, #632]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800555a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800555c:	4b9b      	ldr	r3, [pc, #620]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 800555e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005560:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	2b08      	cmp	r3, #8
 8005566:	d007      	beq.n	8005578 <HAL_RCC_OscConfig+0x2cc>
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	2b18      	cmp	r3, #24
 800556c:	d13a      	bne.n	80055e4 <HAL_RCC_OscConfig+0x338>
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f003 0303 	and.w	r3, r3, #3
 8005574:	2b01      	cmp	r3, #1
 8005576:	d135      	bne.n	80055e4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005578:	4b94      	ldr	r3, [pc, #592]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005580:	2b00      	cmp	r3, #0
 8005582:	d005      	beq.n	8005590 <HAL_RCC_OscConfig+0x2e4>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	69db      	ldr	r3, [r3, #28]
 8005588:	2b80      	cmp	r3, #128	; 0x80
 800558a:	d001      	beq.n	8005590 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e296      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005590:	f7fd f844 	bl	800261c <HAL_GetREVID>
 8005594:	4603      	mov	r3, r0
 8005596:	f241 0203 	movw	r2, #4099	; 0x1003
 800559a:	4293      	cmp	r3, r2
 800559c:	d817      	bhi.n	80055ce <HAL_RCC_OscConfig+0x322>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	2b20      	cmp	r3, #32
 80055a4:	d108      	bne.n	80055b8 <HAL_RCC_OscConfig+0x30c>
 80055a6:	4b89      	ldr	r3, [pc, #548]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80055ae:	4a87      	ldr	r2, [pc, #540]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 80055b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055b4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055b6:	e075      	b.n	80056a4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055b8:	4b84      	ldr	r3, [pc, #528]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a1b      	ldr	r3, [r3, #32]
 80055c4:	069b      	lsls	r3, r3, #26
 80055c6:	4981      	ldr	r1, [pc, #516]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055cc:	e06a      	b.n	80056a4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055ce:	4b7f      	ldr	r3, [pc, #508]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	061b      	lsls	r3, r3, #24
 80055dc:	497b      	ldr	r1, [pc, #492]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055e2:	e05f      	b.n	80056a4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	69db      	ldr	r3, [r3, #28]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d042      	beq.n	8005672 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80055ec:	4b77      	ldr	r3, [pc, #476]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a76      	ldr	r2, [pc, #472]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 80055f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f8:	f7fd f804 	bl	8002604 <HAL_GetTick>
 80055fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055fe:	e008      	b.n	8005612 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005600:	f7fd f800 	bl	8002604 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b02      	cmp	r3, #2
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e255      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005612:	4b6e      	ldr	r3, [pc, #440]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0f0      	beq.n	8005600 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800561e:	f7fc fffd 	bl	800261c <HAL_GetREVID>
 8005622:	4603      	mov	r3, r0
 8005624:	f241 0203 	movw	r2, #4099	; 0x1003
 8005628:	4293      	cmp	r3, r2
 800562a:	d817      	bhi.n	800565c <HAL_RCC_OscConfig+0x3b0>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a1b      	ldr	r3, [r3, #32]
 8005630:	2b20      	cmp	r3, #32
 8005632:	d108      	bne.n	8005646 <HAL_RCC_OscConfig+0x39a>
 8005634:	4b65      	ldr	r3, [pc, #404]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800563c:	4a63      	ldr	r2, [pc, #396]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 800563e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005642:	6053      	str	r3, [r2, #4]
 8005644:	e02e      	b.n	80056a4 <HAL_RCC_OscConfig+0x3f8>
 8005646:	4b61      	ldr	r3, [pc, #388]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	069b      	lsls	r3, r3, #26
 8005654:	495d      	ldr	r1, [pc, #372]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 8005656:	4313      	orrs	r3, r2
 8005658:	604b      	str	r3, [r1, #4]
 800565a:	e023      	b.n	80056a4 <HAL_RCC_OscConfig+0x3f8>
 800565c:	4b5b      	ldr	r3, [pc, #364]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	061b      	lsls	r3, r3, #24
 800566a:	4958      	ldr	r1, [pc, #352]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 800566c:	4313      	orrs	r3, r2
 800566e:	60cb      	str	r3, [r1, #12]
 8005670:	e018      	b.n	80056a4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005672:	4b56      	ldr	r3, [pc, #344]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a55      	ldr	r2, [pc, #340]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 8005678:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800567c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567e:	f7fc ffc1 	bl	8002604 <HAL_GetTick>
 8005682:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005684:	e008      	b.n	8005698 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005686:	f7fc ffbd 	bl	8002604 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d901      	bls.n	8005698 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e212      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005698:	4b4c      	ldr	r3, [pc, #304]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1f0      	bne.n	8005686 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0308 	and.w	r3, r3, #8
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d036      	beq.n	800571e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d019      	beq.n	80056ec <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056b8:	4b44      	ldr	r3, [pc, #272]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 80056ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056bc:	4a43      	ldr	r2, [pc, #268]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 80056be:	f043 0301 	orr.w	r3, r3, #1
 80056c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c4:	f7fc ff9e 	bl	8002604 <HAL_GetTick>
 80056c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80056ca:	e008      	b.n	80056de <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056cc:	f7fc ff9a 	bl	8002604 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e1ef      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80056de:	4b3b      	ldr	r3, [pc, #236]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 80056e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d0f0      	beq.n	80056cc <HAL_RCC_OscConfig+0x420>
 80056ea:	e018      	b.n	800571e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056ec:	4b37      	ldr	r3, [pc, #220]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 80056ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056f0:	4a36      	ldr	r2, [pc, #216]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 80056f2:	f023 0301 	bic.w	r3, r3, #1
 80056f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056f8:	f7fc ff84 	bl	8002604 <HAL_GetTick>
 80056fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056fe:	e008      	b.n	8005712 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005700:	f7fc ff80 	bl	8002604 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e1d5      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005712:	4b2e      	ldr	r3, [pc, #184]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 8005714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1f0      	bne.n	8005700 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0320 	and.w	r3, r3, #32
 8005726:	2b00      	cmp	r3, #0
 8005728:	d036      	beq.n	8005798 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d019      	beq.n	8005766 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005732:	4b26      	ldr	r3, [pc, #152]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a25      	ldr	r2, [pc, #148]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 8005738:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800573c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800573e:	f7fc ff61 	bl	8002604 <HAL_GetTick>
 8005742:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005744:	e008      	b.n	8005758 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005746:	f7fc ff5d 	bl	8002604 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d901      	bls.n	8005758 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e1b2      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005758:	4b1c      	ldr	r3, [pc, #112]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d0f0      	beq.n	8005746 <HAL_RCC_OscConfig+0x49a>
 8005764:	e018      	b.n	8005798 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005766:	4b19      	ldr	r3, [pc, #100]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a18      	ldr	r2, [pc, #96]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 800576c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005770:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005772:	f7fc ff47 	bl	8002604 <HAL_GetTick>
 8005776:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005778:	e008      	b.n	800578c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800577a:	f7fc ff43 	bl	8002604 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d901      	bls.n	800578c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e198      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800578c:	4b0f      	ldr	r3, [pc, #60]	; (80057cc <HAL_RCC_OscConfig+0x520>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1f0      	bne.n	800577a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0304 	and.w	r3, r3, #4
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 8085 	beq.w	80058b0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80057a6:	4b0a      	ldr	r3, [pc, #40]	; (80057d0 <HAL_RCC_OscConfig+0x524>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a09      	ldr	r2, [pc, #36]	; (80057d0 <HAL_RCC_OscConfig+0x524>)
 80057ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057b2:	f7fc ff27 	bl	8002604 <HAL_GetTick>
 80057b6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057b8:	e00c      	b.n	80057d4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80057ba:	f7fc ff23 	bl	8002604 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b64      	cmp	r3, #100	; 0x64
 80057c6:	d905      	bls.n	80057d4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e178      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
 80057cc:	58024400 	.word	0x58024400
 80057d0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057d4:	4b96      	ldr	r3, [pc, #600]	; (8005a30 <HAL_RCC_OscConfig+0x784>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d0ec      	beq.n	80057ba <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d106      	bne.n	80057f6 <HAL_RCC_OscConfig+0x54a>
 80057e8:	4b92      	ldr	r3, [pc, #584]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 80057ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ec:	4a91      	ldr	r2, [pc, #580]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 80057ee:	f043 0301 	orr.w	r3, r3, #1
 80057f2:	6713      	str	r3, [r2, #112]	; 0x70
 80057f4:	e02d      	b.n	8005852 <HAL_RCC_OscConfig+0x5a6>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10c      	bne.n	8005818 <HAL_RCC_OscConfig+0x56c>
 80057fe:	4b8d      	ldr	r3, [pc, #564]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005802:	4a8c      	ldr	r2, [pc, #560]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005804:	f023 0301 	bic.w	r3, r3, #1
 8005808:	6713      	str	r3, [r2, #112]	; 0x70
 800580a:	4b8a      	ldr	r3, [pc, #552]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 800580c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580e:	4a89      	ldr	r2, [pc, #548]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005810:	f023 0304 	bic.w	r3, r3, #4
 8005814:	6713      	str	r3, [r2, #112]	; 0x70
 8005816:	e01c      	b.n	8005852 <HAL_RCC_OscConfig+0x5a6>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	2b05      	cmp	r3, #5
 800581e:	d10c      	bne.n	800583a <HAL_RCC_OscConfig+0x58e>
 8005820:	4b84      	ldr	r3, [pc, #528]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005824:	4a83      	ldr	r2, [pc, #524]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005826:	f043 0304 	orr.w	r3, r3, #4
 800582a:	6713      	str	r3, [r2, #112]	; 0x70
 800582c:	4b81      	ldr	r3, [pc, #516]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 800582e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005830:	4a80      	ldr	r2, [pc, #512]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005832:	f043 0301 	orr.w	r3, r3, #1
 8005836:	6713      	str	r3, [r2, #112]	; 0x70
 8005838:	e00b      	b.n	8005852 <HAL_RCC_OscConfig+0x5a6>
 800583a:	4b7e      	ldr	r3, [pc, #504]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 800583c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800583e:	4a7d      	ldr	r2, [pc, #500]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005840:	f023 0301 	bic.w	r3, r3, #1
 8005844:	6713      	str	r3, [r2, #112]	; 0x70
 8005846:	4b7b      	ldr	r3, [pc, #492]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800584a:	4a7a      	ldr	r2, [pc, #488]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 800584c:	f023 0304 	bic.w	r3, r3, #4
 8005850:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d015      	beq.n	8005886 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800585a:	f7fc fed3 	bl	8002604 <HAL_GetTick>
 800585e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005860:	e00a      	b.n	8005878 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005862:	f7fc fecf 	bl	8002604 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005870:	4293      	cmp	r3, r2
 8005872:	d901      	bls.n	8005878 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e122      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005878:	4b6e      	ldr	r3, [pc, #440]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 800587a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0ee      	beq.n	8005862 <HAL_RCC_OscConfig+0x5b6>
 8005884:	e014      	b.n	80058b0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005886:	f7fc febd 	bl	8002604 <HAL_GetTick>
 800588a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800588c:	e00a      	b.n	80058a4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800588e:	f7fc feb9 	bl	8002604 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	f241 3288 	movw	r2, #5000	; 0x1388
 800589c:	4293      	cmp	r3, r2
 800589e:	d901      	bls.n	80058a4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e10c      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80058a4:	4b63      	ldr	r3, [pc, #396]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 80058a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a8:	f003 0302 	and.w	r3, r3, #2
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1ee      	bne.n	800588e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 8101 	beq.w	8005abc <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80058ba:	4b5e      	ldr	r3, [pc, #376]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058c2:	2b18      	cmp	r3, #24
 80058c4:	f000 80bc 	beq.w	8005a40 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	f040 8095 	bne.w	80059fc <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058d2:	4b58      	ldr	r3, [pc, #352]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a57      	ldr	r2, [pc, #348]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 80058d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058de:	f7fc fe91 	bl	8002604 <HAL_GetTick>
 80058e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058e4:	e008      	b.n	80058f8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058e6:	f7fc fe8d 	bl	8002604 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d901      	bls.n	80058f8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e0e2      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058f8:	4b4e      	ldr	r3, [pc, #312]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1f0      	bne.n	80058e6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005904:	4b4b      	ldr	r3, [pc, #300]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005906:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005908:	4b4b      	ldr	r3, [pc, #300]	; (8005a38 <HAL_RCC_OscConfig+0x78c>)
 800590a:	4013      	ands	r3, r2
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005914:	0112      	lsls	r2, r2, #4
 8005916:	430a      	orrs	r2, r1
 8005918:	4946      	ldr	r1, [pc, #280]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 800591a:	4313      	orrs	r3, r2
 800591c:	628b      	str	r3, [r1, #40]	; 0x28
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005922:	3b01      	subs	r3, #1
 8005924:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800592c:	3b01      	subs	r3, #1
 800592e:	025b      	lsls	r3, r3, #9
 8005930:	b29b      	uxth	r3, r3
 8005932:	431a      	orrs	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005938:	3b01      	subs	r3, #1
 800593a:	041b      	lsls	r3, r3, #16
 800593c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005940:	431a      	orrs	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005946:	3b01      	subs	r3, #1
 8005948:	061b      	lsls	r3, r3, #24
 800594a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800594e:	4939      	ldr	r1, [pc, #228]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005950:	4313      	orrs	r3, r2
 8005952:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005954:	4b37      	ldr	r3, [pc, #220]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005958:	4a36      	ldr	r2, [pc, #216]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 800595a:	f023 0301 	bic.w	r3, r3, #1
 800595e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005960:	4b34      	ldr	r3, [pc, #208]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005964:	4b35      	ldr	r3, [pc, #212]	; (8005a3c <HAL_RCC_OscConfig+0x790>)
 8005966:	4013      	ands	r3, r2
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800596c:	00d2      	lsls	r2, r2, #3
 800596e:	4931      	ldr	r1, [pc, #196]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005970:	4313      	orrs	r3, r2
 8005972:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005974:	4b2f      	ldr	r3, [pc, #188]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005978:	f023 020c 	bic.w	r2, r3, #12
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005980:	492c      	ldr	r1, [pc, #176]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005982:	4313      	orrs	r3, r2
 8005984:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005986:	4b2b      	ldr	r3, [pc, #172]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598a:	f023 0202 	bic.w	r2, r3, #2
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005992:	4928      	ldr	r1, [pc, #160]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005994:	4313      	orrs	r3, r2
 8005996:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005998:	4b26      	ldr	r3, [pc, #152]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 800599a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599c:	4a25      	ldr	r2, [pc, #148]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 800599e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059a4:	4b23      	ldr	r3, [pc, #140]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 80059a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a8:	4a22      	ldr	r2, [pc, #136]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 80059aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80059b0:	4b20      	ldr	r3, [pc, #128]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 80059b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b4:	4a1f      	ldr	r2, [pc, #124]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 80059b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80059bc:	4b1d      	ldr	r3, [pc, #116]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 80059be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c0:	4a1c      	ldr	r2, [pc, #112]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 80059c2:	f043 0301 	orr.w	r3, r3, #1
 80059c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059c8:	4b1a      	ldr	r3, [pc, #104]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a19      	ldr	r2, [pc, #100]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 80059ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d4:	f7fc fe16 	bl	8002604 <HAL_GetTick>
 80059d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059da:	e008      	b.n	80059ee <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059dc:	f7fc fe12 	bl	8002604 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e067      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059ee:	4b11      	ldr	r3, [pc, #68]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d0f0      	beq.n	80059dc <HAL_RCC_OscConfig+0x730>
 80059fa:	e05f      	b.n	8005abc <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059fc:	4b0d      	ldr	r3, [pc, #52]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a0c      	ldr	r2, [pc, #48]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005a02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a08:	f7fc fdfc 	bl	8002604 <HAL_GetTick>
 8005a0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a0e:	e008      	b.n	8005a22 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a10:	f7fc fdf8 	bl	8002604 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e04d      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a22:	4b04      	ldr	r3, [pc, #16]	; (8005a34 <HAL_RCC_OscConfig+0x788>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1f0      	bne.n	8005a10 <HAL_RCC_OscConfig+0x764>
 8005a2e:	e045      	b.n	8005abc <HAL_RCC_OscConfig+0x810>
 8005a30:	58024800 	.word	0x58024800
 8005a34:	58024400 	.word	0x58024400
 8005a38:	fffffc0c 	.word	0xfffffc0c
 8005a3c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005a40:	4b21      	ldr	r3, [pc, #132]	; (8005ac8 <HAL_RCC_OscConfig+0x81c>)
 8005a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a44:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005a46:	4b20      	ldr	r3, [pc, #128]	; (8005ac8 <HAL_RCC_OscConfig+0x81c>)
 8005a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d031      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	f003 0203 	and.w	r2, r3, #3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d12a      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	091b      	lsrs	r3, r3, #4
 8005a66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d122      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d11a      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	0a5b      	lsrs	r3, r3, #9
 8005a86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a8e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d111      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	0c1b      	lsrs	r3, r3, #16
 8005a98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d108      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	0e1b      	lsrs	r3, r3, #24
 8005aaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d001      	beq.n	8005abc <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e000      	b.n	8005abe <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3730      	adds	r7, #48	; 0x30
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	58024400 	.word	0x58024400

08005acc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d101      	bne.n	8005ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e19c      	b.n	8005e1a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ae0:	4b8a      	ldr	r3, [pc, #552]	; (8005d0c <HAL_RCC_ClockConfig+0x240>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 030f 	and.w	r3, r3, #15
 8005ae8:	683a      	ldr	r2, [r7, #0]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d910      	bls.n	8005b10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aee:	4b87      	ldr	r3, [pc, #540]	; (8005d0c <HAL_RCC_ClockConfig+0x240>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f023 020f 	bic.w	r2, r3, #15
 8005af6:	4985      	ldr	r1, [pc, #532]	; (8005d0c <HAL_RCC_ClockConfig+0x240>)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005afe:	4b83      	ldr	r3, [pc, #524]	; (8005d0c <HAL_RCC_ClockConfig+0x240>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 030f 	and.w	r3, r3, #15
 8005b06:	683a      	ldr	r2, [r7, #0]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d001      	beq.n	8005b10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e184      	b.n	8005e1a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 0304 	and.w	r3, r3, #4
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d010      	beq.n	8005b3e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	691a      	ldr	r2, [r3, #16]
 8005b20:	4b7b      	ldr	r3, [pc, #492]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d908      	bls.n	8005b3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b2c:	4b78      	ldr	r3, [pc, #480]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	4975      	ldr	r1, [pc, #468]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0308 	and.w	r3, r3, #8
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d010      	beq.n	8005b6c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	695a      	ldr	r2, [r3, #20]
 8005b4e:	4b70      	ldr	r3, [pc, #448]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d908      	bls.n	8005b6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b5a:	4b6d      	ldr	r3, [pc, #436]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	496a      	ldr	r1, [pc, #424]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0310 	and.w	r3, r3, #16
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d010      	beq.n	8005b9a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	699a      	ldr	r2, [r3, #24]
 8005b7c:	4b64      	ldr	r3, [pc, #400]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005b7e:	69db      	ldr	r3, [r3, #28]
 8005b80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d908      	bls.n	8005b9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b88:	4b61      	ldr	r3, [pc, #388]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005b8a:	69db      	ldr	r3, [r3, #28]
 8005b8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	495e      	ldr	r1, [pc, #376]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0320 	and.w	r3, r3, #32
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d010      	beq.n	8005bc8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	69da      	ldr	r2, [r3, #28]
 8005baa:	4b59      	ldr	r3, [pc, #356]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d908      	bls.n	8005bc8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005bb6:	4b56      	ldr	r3, [pc, #344]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	4953      	ldr	r1, [pc, #332]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d010      	beq.n	8005bf6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	68da      	ldr	r2, [r3, #12]
 8005bd8:	4b4d      	ldr	r3, [pc, #308]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	f003 030f 	and.w	r3, r3, #15
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d908      	bls.n	8005bf6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005be4:	4b4a      	ldr	r3, [pc, #296]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	f023 020f 	bic.w	r2, r3, #15
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	4947      	ldr	r1, [pc, #284]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d055      	beq.n	8005cae <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005c02:	4b43      	ldr	r3, [pc, #268]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	4940      	ldr	r1, [pc, #256]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d107      	bne.n	8005c2c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c1c:	4b3c      	ldr	r3, [pc, #240]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d121      	bne.n	8005c6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e0f6      	b.n	8005e1a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	2b03      	cmp	r3, #3
 8005c32:	d107      	bne.n	8005c44 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c34:	4b36      	ldr	r3, [pc, #216]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d115      	bne.n	8005c6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e0ea      	b.n	8005e1a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d107      	bne.n	8005c5c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c4c:	4b30      	ldr	r3, [pc, #192]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d109      	bne.n	8005c6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e0de      	b.n	8005e1a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c5c:	4b2c      	ldr	r3, [pc, #176]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d101      	bne.n	8005c6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e0d6      	b.n	8005e1a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c6c:	4b28      	ldr	r3, [pc, #160]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	f023 0207 	bic.w	r2, r3, #7
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	4925      	ldr	r1, [pc, #148]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c7e:	f7fc fcc1 	bl	8002604 <HAL_GetTick>
 8005c82:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c84:	e00a      	b.n	8005c9c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c86:	f7fc fcbd 	bl	8002604 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d901      	bls.n	8005c9c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e0be      	b.n	8005e1a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c9c:	4b1c      	ldr	r3, [pc, #112]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	00db      	lsls	r3, r3, #3
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d1eb      	bne.n	8005c86 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d010      	beq.n	8005cdc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68da      	ldr	r2, [r3, #12]
 8005cbe:	4b14      	ldr	r3, [pc, #80]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	f003 030f 	and.w	r3, r3, #15
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d208      	bcs.n	8005cdc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cca:	4b11      	ldr	r3, [pc, #68]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	f023 020f 	bic.w	r2, r3, #15
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	490e      	ldr	r1, [pc, #56]	; (8005d10 <HAL_RCC_ClockConfig+0x244>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cdc:	4b0b      	ldr	r3, [pc, #44]	; (8005d0c <HAL_RCC_ClockConfig+0x240>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 030f 	and.w	r3, r3, #15
 8005ce4:	683a      	ldr	r2, [r7, #0]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d214      	bcs.n	8005d14 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cea:	4b08      	ldr	r3, [pc, #32]	; (8005d0c <HAL_RCC_ClockConfig+0x240>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f023 020f 	bic.w	r2, r3, #15
 8005cf2:	4906      	ldr	r1, [pc, #24]	; (8005d0c <HAL_RCC_ClockConfig+0x240>)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cfa:	4b04      	ldr	r3, [pc, #16]	; (8005d0c <HAL_RCC_ClockConfig+0x240>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 030f 	and.w	r3, r3, #15
 8005d02:	683a      	ldr	r2, [r7, #0]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d005      	beq.n	8005d14 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e086      	b.n	8005e1a <HAL_RCC_ClockConfig+0x34e>
 8005d0c:	52002000 	.word	0x52002000
 8005d10:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0304 	and.w	r3, r3, #4
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d010      	beq.n	8005d42 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	691a      	ldr	r2, [r3, #16]
 8005d24:	4b3f      	ldr	r3, [pc, #252]	; (8005e24 <HAL_RCC_ClockConfig+0x358>)
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d208      	bcs.n	8005d42 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d30:	4b3c      	ldr	r3, [pc, #240]	; (8005e24 <HAL_RCC_ClockConfig+0x358>)
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	4939      	ldr	r1, [pc, #228]	; (8005e24 <HAL_RCC_ClockConfig+0x358>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0308 	and.w	r3, r3, #8
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d010      	beq.n	8005d70 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	695a      	ldr	r2, [r3, #20]
 8005d52:	4b34      	ldr	r3, [pc, #208]	; (8005e24 <HAL_RCC_ClockConfig+0x358>)
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d208      	bcs.n	8005d70 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d5e:	4b31      	ldr	r3, [pc, #196]	; (8005e24 <HAL_RCC_ClockConfig+0x358>)
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	492e      	ldr	r1, [pc, #184]	; (8005e24 <HAL_RCC_ClockConfig+0x358>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0310 	and.w	r3, r3, #16
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d010      	beq.n	8005d9e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	699a      	ldr	r2, [r3, #24]
 8005d80:	4b28      	ldr	r3, [pc, #160]	; (8005e24 <HAL_RCC_ClockConfig+0x358>)
 8005d82:	69db      	ldr	r3, [r3, #28]
 8005d84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d208      	bcs.n	8005d9e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d8c:	4b25      	ldr	r3, [pc, #148]	; (8005e24 <HAL_RCC_ClockConfig+0x358>)
 8005d8e:	69db      	ldr	r3, [r3, #28]
 8005d90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	4922      	ldr	r1, [pc, #136]	; (8005e24 <HAL_RCC_ClockConfig+0x358>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0320 	and.w	r3, r3, #32
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d010      	beq.n	8005dcc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	69da      	ldr	r2, [r3, #28]
 8005dae:	4b1d      	ldr	r3, [pc, #116]	; (8005e24 <HAL_RCC_ClockConfig+0x358>)
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d208      	bcs.n	8005dcc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005dba:	4b1a      	ldr	r3, [pc, #104]	; (8005e24 <HAL_RCC_ClockConfig+0x358>)
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	4917      	ldr	r1, [pc, #92]	; (8005e24 <HAL_RCC_ClockConfig+0x358>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005dcc:	f000 f834 	bl	8005e38 <HAL_RCC_GetSysClockFreq>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	4b14      	ldr	r3, [pc, #80]	; (8005e24 <HAL_RCC_ClockConfig+0x358>)
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	0a1b      	lsrs	r3, r3, #8
 8005dd8:	f003 030f 	and.w	r3, r3, #15
 8005ddc:	4912      	ldr	r1, [pc, #72]	; (8005e28 <HAL_RCC_ClockConfig+0x35c>)
 8005dde:	5ccb      	ldrb	r3, [r1, r3]
 8005de0:	f003 031f 	and.w	r3, r3, #31
 8005de4:	fa22 f303 	lsr.w	r3, r2, r3
 8005de8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005dea:	4b0e      	ldr	r3, [pc, #56]	; (8005e24 <HAL_RCC_ClockConfig+0x358>)
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	f003 030f 	and.w	r3, r3, #15
 8005df2:	4a0d      	ldr	r2, [pc, #52]	; (8005e28 <HAL_RCC_ClockConfig+0x35c>)
 8005df4:	5cd3      	ldrb	r3, [r2, r3]
 8005df6:	f003 031f 	and.w	r3, r3, #31
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8005e00:	4a0a      	ldr	r2, [pc, #40]	; (8005e2c <HAL_RCC_ClockConfig+0x360>)
 8005e02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e04:	4a0a      	ldr	r2, [pc, #40]	; (8005e30 <HAL_RCC_ClockConfig+0x364>)
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005e0a:	4b0a      	ldr	r3, [pc, #40]	; (8005e34 <HAL_RCC_ClockConfig+0x368>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7fc fbae 	bl	8002570 <HAL_InitTick>
 8005e14:	4603      	mov	r3, r0
 8005e16:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3718      	adds	r7, #24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	58024400 	.word	0x58024400
 8005e28:	0800bd1c 	.word	0x0800bd1c
 8005e2c:	20000004 	.word	0x20000004
 8005e30:	20000000 	.word	0x20000000
 8005e34:	20000008 	.word	0x20000008

08005e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b089      	sub	sp, #36	; 0x24
 8005e3c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e3e:	4bb3      	ldr	r3, [pc, #716]	; (800610c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e46:	2b18      	cmp	r3, #24
 8005e48:	f200 8155 	bhi.w	80060f6 <HAL_RCC_GetSysClockFreq+0x2be>
 8005e4c:	a201      	add	r2, pc, #4	; (adr r2, 8005e54 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e52:	bf00      	nop
 8005e54:	08005eb9 	.word	0x08005eb9
 8005e58:	080060f7 	.word	0x080060f7
 8005e5c:	080060f7 	.word	0x080060f7
 8005e60:	080060f7 	.word	0x080060f7
 8005e64:	080060f7 	.word	0x080060f7
 8005e68:	080060f7 	.word	0x080060f7
 8005e6c:	080060f7 	.word	0x080060f7
 8005e70:	080060f7 	.word	0x080060f7
 8005e74:	08005edf 	.word	0x08005edf
 8005e78:	080060f7 	.word	0x080060f7
 8005e7c:	080060f7 	.word	0x080060f7
 8005e80:	080060f7 	.word	0x080060f7
 8005e84:	080060f7 	.word	0x080060f7
 8005e88:	080060f7 	.word	0x080060f7
 8005e8c:	080060f7 	.word	0x080060f7
 8005e90:	080060f7 	.word	0x080060f7
 8005e94:	08005ee5 	.word	0x08005ee5
 8005e98:	080060f7 	.word	0x080060f7
 8005e9c:	080060f7 	.word	0x080060f7
 8005ea0:	080060f7 	.word	0x080060f7
 8005ea4:	080060f7 	.word	0x080060f7
 8005ea8:	080060f7 	.word	0x080060f7
 8005eac:	080060f7 	.word	0x080060f7
 8005eb0:	080060f7 	.word	0x080060f7
 8005eb4:	08005eeb 	.word	0x08005eeb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005eb8:	4b94      	ldr	r3, [pc, #592]	; (800610c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0320 	and.w	r3, r3, #32
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d009      	beq.n	8005ed8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ec4:	4b91      	ldr	r3, [pc, #580]	; (800610c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	08db      	lsrs	r3, r3, #3
 8005eca:	f003 0303 	and.w	r3, r3, #3
 8005ece:	4a90      	ldr	r2, [pc, #576]	; (8006110 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005ed6:	e111      	b.n	80060fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005ed8:	4b8d      	ldr	r3, [pc, #564]	; (8006110 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005eda:	61bb      	str	r3, [r7, #24]
    break;
 8005edc:	e10e      	b.n	80060fc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005ede:	4b8d      	ldr	r3, [pc, #564]	; (8006114 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005ee0:	61bb      	str	r3, [r7, #24]
    break;
 8005ee2:	e10b      	b.n	80060fc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005ee4:	4b8c      	ldr	r3, [pc, #560]	; (8006118 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005ee6:	61bb      	str	r3, [r7, #24]
    break;
 8005ee8:	e108      	b.n	80060fc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005eea:	4b88      	ldr	r3, [pc, #544]	; (800610c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eee:	f003 0303 	and.w	r3, r3, #3
 8005ef2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005ef4:	4b85      	ldr	r3, [pc, #532]	; (800610c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef8:	091b      	lsrs	r3, r3, #4
 8005efa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005efe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005f00:	4b82      	ldr	r3, [pc, #520]	; (800610c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005f0a:	4b80      	ldr	r3, [pc, #512]	; (800610c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f0e:	08db      	lsrs	r3, r3, #3
 8005f10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	fb02 f303 	mul.w	r3, r2, r3
 8005f1a:	ee07 3a90 	vmov	s15, r3
 8005f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f22:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f000 80e1 	beq.w	80060f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	f000 8083 	beq.w	800603c <HAL_RCC_GetSysClockFreq+0x204>
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	f200 80a1 	bhi.w	8006080 <HAL_RCC_GetSysClockFreq+0x248>
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d003      	beq.n	8005f4c <HAL_RCC_GetSysClockFreq+0x114>
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d056      	beq.n	8005ff8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005f4a:	e099      	b.n	8006080 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f4c:	4b6f      	ldr	r3, [pc, #444]	; (800610c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0320 	and.w	r3, r3, #32
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d02d      	beq.n	8005fb4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f58:	4b6c      	ldr	r3, [pc, #432]	; (800610c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	08db      	lsrs	r3, r3, #3
 8005f5e:	f003 0303 	and.w	r3, r3, #3
 8005f62:	4a6b      	ldr	r2, [pc, #428]	; (8006110 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f64:	fa22 f303 	lsr.w	r3, r2, r3
 8005f68:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	ee07 3a90 	vmov	s15, r3
 8005f70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	ee07 3a90 	vmov	s15, r3
 8005f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f82:	4b62      	ldr	r3, [pc, #392]	; (800610c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f8a:	ee07 3a90 	vmov	s15, r3
 8005f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f92:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f96:	eddf 5a61 	vldr	s11, [pc, #388]	; 800611c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005fb2:	e087      	b.n	80060c4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	ee07 3a90 	vmov	s15, r3
 8005fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fbe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006120 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fc6:	4b51      	ldr	r3, [pc, #324]	; (800610c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fce:	ee07 3a90 	vmov	s15, r3
 8005fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fda:	eddf 5a50 	vldr	s11, [pc, #320]	; 800611c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ff2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ff6:	e065      	b.n	80060c4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	ee07 3a90 	vmov	s15, r3
 8005ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006002:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006124 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800600a:	4b40      	ldr	r3, [pc, #256]	; (800610c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800600c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006012:	ee07 3a90 	vmov	s15, r3
 8006016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800601a:	ed97 6a02 	vldr	s12, [r7, #8]
 800601e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800611c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800602a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800602e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006036:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800603a:	e043      	b.n	80060c4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	ee07 3a90 	vmov	s15, r3
 8006042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006046:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006128 <HAL_RCC_GetSysClockFreq+0x2f0>
 800604a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800604e:	4b2f      	ldr	r3, [pc, #188]	; (800610c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006056:	ee07 3a90 	vmov	s15, r3
 800605a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800605e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006062:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800611c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800606a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800606e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800607a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800607e:	e021      	b.n	80060c4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	ee07 3a90 	vmov	s15, r3
 8006086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800608a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006124 <HAL_RCC_GetSysClockFreq+0x2ec>
 800608e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006092:	4b1e      	ldr	r3, [pc, #120]	; (800610c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800609a:	ee07 3a90 	vmov	s15, r3
 800609e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80060a6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800611c <HAL_RCC_GetSysClockFreq+0x2e4>
 80060aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060c2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80060c4:	4b11      	ldr	r3, [pc, #68]	; (800610c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c8:	0a5b      	lsrs	r3, r3, #9
 80060ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ce:	3301      	adds	r3, #1
 80060d0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	ee07 3a90 	vmov	s15, r3
 80060d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80060e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060e8:	ee17 3a90 	vmov	r3, s15
 80060ec:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80060ee:	e005      	b.n	80060fc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80060f0:	2300      	movs	r3, #0
 80060f2:	61bb      	str	r3, [r7, #24]
    break;
 80060f4:	e002      	b.n	80060fc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80060f6:	4b07      	ldr	r3, [pc, #28]	; (8006114 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80060f8:	61bb      	str	r3, [r7, #24]
    break;
 80060fa:	bf00      	nop
  }

  return sysclockfreq;
 80060fc:	69bb      	ldr	r3, [r7, #24]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3724      	adds	r7, #36	; 0x24
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	58024400 	.word	0x58024400
 8006110:	03d09000 	.word	0x03d09000
 8006114:	003d0900 	.word	0x003d0900
 8006118:	02dc6c00 	.word	0x02dc6c00
 800611c:	46000000 	.word	0x46000000
 8006120:	4c742400 	.word	0x4c742400
 8006124:	4a742400 	.word	0x4a742400
 8006128:	4c371b00 	.word	0x4c371b00

0800612c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006132:	f7ff fe81 	bl	8005e38 <HAL_RCC_GetSysClockFreq>
 8006136:	4602      	mov	r2, r0
 8006138:	4b10      	ldr	r3, [pc, #64]	; (800617c <HAL_RCC_GetHCLKFreq+0x50>)
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	0a1b      	lsrs	r3, r3, #8
 800613e:	f003 030f 	and.w	r3, r3, #15
 8006142:	490f      	ldr	r1, [pc, #60]	; (8006180 <HAL_RCC_GetHCLKFreq+0x54>)
 8006144:	5ccb      	ldrb	r3, [r1, r3]
 8006146:	f003 031f 	and.w	r3, r3, #31
 800614a:	fa22 f303 	lsr.w	r3, r2, r3
 800614e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006150:	4b0a      	ldr	r3, [pc, #40]	; (800617c <HAL_RCC_GetHCLKFreq+0x50>)
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	f003 030f 	and.w	r3, r3, #15
 8006158:	4a09      	ldr	r2, [pc, #36]	; (8006180 <HAL_RCC_GetHCLKFreq+0x54>)
 800615a:	5cd3      	ldrb	r3, [r2, r3]
 800615c:	f003 031f 	and.w	r3, r3, #31
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	fa22 f303 	lsr.w	r3, r2, r3
 8006166:	4a07      	ldr	r2, [pc, #28]	; (8006184 <HAL_RCC_GetHCLKFreq+0x58>)
 8006168:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800616a:	4a07      	ldr	r2, [pc, #28]	; (8006188 <HAL_RCC_GetHCLKFreq+0x5c>)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006170:	4b04      	ldr	r3, [pc, #16]	; (8006184 <HAL_RCC_GetHCLKFreq+0x58>)
 8006172:	681b      	ldr	r3, [r3, #0]
}
 8006174:	4618      	mov	r0, r3
 8006176:	3708      	adds	r7, #8
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	58024400 	.word	0x58024400
 8006180:	0800bd1c 	.word	0x0800bd1c
 8006184:	20000004 	.word	0x20000004
 8006188:	20000000 	.word	0x20000000

0800618c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006190:	f7ff ffcc 	bl	800612c <HAL_RCC_GetHCLKFreq>
 8006194:	4602      	mov	r2, r0
 8006196:	4b06      	ldr	r3, [pc, #24]	; (80061b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	091b      	lsrs	r3, r3, #4
 800619c:	f003 0307 	and.w	r3, r3, #7
 80061a0:	4904      	ldr	r1, [pc, #16]	; (80061b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80061a2:	5ccb      	ldrb	r3, [r1, r3]
 80061a4:	f003 031f 	and.w	r3, r3, #31
 80061a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	58024400 	.word	0x58024400
 80061b4:	0800bd1c 	.word	0x0800bd1c

080061b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80061bc:	f7ff ffb6 	bl	800612c <HAL_RCC_GetHCLKFreq>
 80061c0:	4602      	mov	r2, r0
 80061c2:	4b06      	ldr	r3, [pc, #24]	; (80061dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	0a1b      	lsrs	r3, r3, #8
 80061c8:	f003 0307 	and.w	r3, r3, #7
 80061cc:	4904      	ldr	r1, [pc, #16]	; (80061e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80061ce:	5ccb      	ldrb	r3, [r1, r3]
 80061d0:	f003 031f 	and.w	r3, r3, #31
 80061d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80061d8:	4618      	mov	r0, r3
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	58024400 	.word	0x58024400
 80061e0:	0800bd1c 	.word	0x0800bd1c

080061e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061ec:	2300      	movs	r3, #0
 80061ee:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061f0:	2300      	movs	r3, #0
 80061f2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d03f      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006204:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006208:	d02a      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800620a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800620e:	d824      	bhi.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006210:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006214:	d018      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006216:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800621a:	d81e      	bhi.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006220:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006224:	d007      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006226:	e018      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006228:	4bab      	ldr	r3, [pc, #684]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800622a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622c:	4aaa      	ldr	r2, [pc, #680]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800622e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006232:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006234:	e015      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	3304      	adds	r3, #4
 800623a:	2102      	movs	r1, #2
 800623c:	4618      	mov	r0, r3
 800623e:	f001 f9cf 	bl	80075e0 <RCCEx_PLL2_Config>
 8006242:	4603      	mov	r3, r0
 8006244:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006246:	e00c      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	3324      	adds	r3, #36	; 0x24
 800624c:	2102      	movs	r1, #2
 800624e:	4618      	mov	r0, r3
 8006250:	f001 fa78 	bl	8007744 <RCCEx_PLL3_Config>
 8006254:	4603      	mov	r3, r0
 8006256:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006258:	e003      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	75fb      	strb	r3, [r7, #23]
      break;
 800625e:	e000      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006260:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006262:	7dfb      	ldrb	r3, [r7, #23]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d109      	bne.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006268:	4b9b      	ldr	r3, [pc, #620]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800626a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800626c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006274:	4998      	ldr	r1, [pc, #608]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006276:	4313      	orrs	r3, r2
 8006278:	650b      	str	r3, [r1, #80]	; 0x50
 800627a:	e001      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800627c:	7dfb      	ldrb	r3, [r7, #23]
 800627e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006288:	2b00      	cmp	r3, #0
 800628a:	d03d      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006290:	2b04      	cmp	r3, #4
 8006292:	d826      	bhi.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006294:	a201      	add	r2, pc, #4	; (adr r2, 800629c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800629a:	bf00      	nop
 800629c:	080062b1 	.word	0x080062b1
 80062a0:	080062bf 	.word	0x080062bf
 80062a4:	080062d1 	.word	0x080062d1
 80062a8:	080062e9 	.word	0x080062e9
 80062ac:	080062e9 	.word	0x080062e9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062b0:	4b89      	ldr	r3, [pc, #548]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b4:	4a88      	ldr	r2, [pc, #544]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062bc:	e015      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	3304      	adds	r3, #4
 80062c2:	2100      	movs	r1, #0
 80062c4:	4618      	mov	r0, r3
 80062c6:	f001 f98b 	bl	80075e0 <RCCEx_PLL2_Config>
 80062ca:	4603      	mov	r3, r0
 80062cc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062ce:	e00c      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	3324      	adds	r3, #36	; 0x24
 80062d4:	2100      	movs	r1, #0
 80062d6:	4618      	mov	r0, r3
 80062d8:	f001 fa34 	bl	8007744 <RCCEx_PLL3_Config>
 80062dc:	4603      	mov	r3, r0
 80062de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062e0:	e003      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	75fb      	strb	r3, [r7, #23]
      break;
 80062e6:	e000      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80062e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062ea:	7dfb      	ldrb	r3, [r7, #23]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d109      	bne.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062f0:	4b79      	ldr	r3, [pc, #484]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062f4:	f023 0207 	bic.w	r2, r3, #7
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062fc:	4976      	ldr	r1, [pc, #472]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	650b      	str	r3, [r1, #80]	; 0x50
 8006302:	e001      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006304:	7dfb      	ldrb	r3, [r7, #23]
 8006306:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006310:	2b00      	cmp	r3, #0
 8006312:	d042      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800631c:	d02b      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800631e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006322:	d825      	bhi.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006324:	2bc0      	cmp	r3, #192	; 0xc0
 8006326:	d028      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006328:	2bc0      	cmp	r3, #192	; 0xc0
 800632a:	d821      	bhi.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800632c:	2b80      	cmp	r3, #128	; 0x80
 800632e:	d016      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006330:	2b80      	cmp	r3, #128	; 0x80
 8006332:	d81d      	bhi.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006334:	2b00      	cmp	r3, #0
 8006336:	d002      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006338:	2b40      	cmp	r3, #64	; 0x40
 800633a:	d007      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800633c:	e018      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800633e:	4b66      	ldr	r3, [pc, #408]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006342:	4a65      	ldr	r2, [pc, #404]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006348:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800634a:	e017      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	3304      	adds	r3, #4
 8006350:	2100      	movs	r1, #0
 8006352:	4618      	mov	r0, r3
 8006354:	f001 f944 	bl	80075e0 <RCCEx_PLL2_Config>
 8006358:	4603      	mov	r3, r0
 800635a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800635c:	e00e      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	3324      	adds	r3, #36	; 0x24
 8006362:	2100      	movs	r1, #0
 8006364:	4618      	mov	r0, r3
 8006366:	f001 f9ed 	bl	8007744 <RCCEx_PLL3_Config>
 800636a:	4603      	mov	r3, r0
 800636c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800636e:	e005      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	75fb      	strb	r3, [r7, #23]
      break;
 8006374:	e002      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006376:	bf00      	nop
 8006378:	e000      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800637a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800637c:	7dfb      	ldrb	r3, [r7, #23]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d109      	bne.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006382:	4b55      	ldr	r3, [pc, #340]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006386:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800638e:	4952      	ldr	r1, [pc, #328]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006390:	4313      	orrs	r3, r2
 8006392:	650b      	str	r3, [r1, #80]	; 0x50
 8006394:	e001      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006396:	7dfb      	ldrb	r3, [r7, #23]
 8006398:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d049      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80063ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063b0:	d030      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80063b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063b6:	d82a      	bhi.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80063b8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80063bc:	d02c      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80063be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80063c2:	d824      	bhi.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80063c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063c8:	d018      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x218>
 80063ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063ce:	d81e      	bhi.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d003      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80063d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063d8:	d007      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x206>
 80063da:	e018      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063dc:	4b3e      	ldr	r3, [pc, #248]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e0:	4a3d      	ldr	r2, [pc, #244]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063e8:	e017      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	3304      	adds	r3, #4
 80063ee:	2100      	movs	r1, #0
 80063f0:	4618      	mov	r0, r3
 80063f2:	f001 f8f5 	bl	80075e0 <RCCEx_PLL2_Config>
 80063f6:	4603      	mov	r3, r0
 80063f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80063fa:	e00e      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	3324      	adds	r3, #36	; 0x24
 8006400:	2100      	movs	r1, #0
 8006402:	4618      	mov	r0, r3
 8006404:	f001 f99e 	bl	8007744 <RCCEx_PLL3_Config>
 8006408:	4603      	mov	r3, r0
 800640a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800640c:	e005      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	75fb      	strb	r3, [r7, #23]
      break;
 8006412:	e002      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006414:	bf00      	nop
 8006416:	e000      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006418:	bf00      	nop
    }

    if(ret == HAL_OK)
 800641a:	7dfb      	ldrb	r3, [r7, #23]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10a      	bne.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006420:	4b2d      	ldr	r3, [pc, #180]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006424:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800642e:	492a      	ldr	r1, [pc, #168]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006430:	4313      	orrs	r3, r2
 8006432:	658b      	str	r3, [r1, #88]	; 0x58
 8006434:	e001      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006436:	7dfb      	ldrb	r3, [r7, #23]
 8006438:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006442:	2b00      	cmp	r3, #0
 8006444:	d04c      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800644c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006450:	d030      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006452:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006456:	d82a      	bhi.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006458:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800645c:	d02c      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800645e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006462:	d824      	bhi.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006464:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006468:	d018      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800646a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800646e:	d81e      	bhi.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006470:	2b00      	cmp	r3, #0
 8006472:	d003      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006474:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006478:	d007      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800647a:	e018      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800647c:	4b16      	ldr	r3, [pc, #88]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800647e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006480:	4a15      	ldr	r2, [pc, #84]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006486:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006488:	e017      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	3304      	adds	r3, #4
 800648e:	2100      	movs	r1, #0
 8006490:	4618      	mov	r0, r3
 8006492:	f001 f8a5 	bl	80075e0 <RCCEx_PLL2_Config>
 8006496:	4603      	mov	r3, r0
 8006498:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800649a:	e00e      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	3324      	adds	r3, #36	; 0x24
 80064a0:	2100      	movs	r1, #0
 80064a2:	4618      	mov	r0, r3
 80064a4:	f001 f94e 	bl	8007744 <RCCEx_PLL3_Config>
 80064a8:	4603      	mov	r3, r0
 80064aa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064ac:	e005      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	75fb      	strb	r3, [r7, #23]
      break;
 80064b2:	e002      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80064b4:	bf00      	nop
 80064b6:	e000      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80064b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064ba:	7dfb      	ldrb	r3, [r7, #23]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10d      	bne.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80064c0:	4b05      	ldr	r3, [pc, #20]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064c4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80064ce:	4902      	ldr	r1, [pc, #8]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	658b      	str	r3, [r1, #88]	; 0x58
 80064d4:	e004      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80064d6:	bf00      	nop
 80064d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064dc:	7dfb      	ldrb	r3, [r7, #23]
 80064de:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d032      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064f0:	2b30      	cmp	r3, #48	; 0x30
 80064f2:	d01c      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80064f4:	2b30      	cmp	r3, #48	; 0x30
 80064f6:	d817      	bhi.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80064f8:	2b20      	cmp	r3, #32
 80064fa:	d00c      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80064fc:	2b20      	cmp	r3, #32
 80064fe:	d813      	bhi.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006500:	2b00      	cmp	r3, #0
 8006502:	d016      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006504:	2b10      	cmp	r3, #16
 8006506:	d10f      	bne.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006508:	4baf      	ldr	r3, [pc, #700]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800650a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650c:	4aae      	ldr	r2, [pc, #696]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800650e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006512:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006514:	e00e      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	3304      	adds	r3, #4
 800651a:	2102      	movs	r1, #2
 800651c:	4618      	mov	r0, r3
 800651e:	f001 f85f 	bl	80075e0 <RCCEx_PLL2_Config>
 8006522:	4603      	mov	r3, r0
 8006524:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006526:	e005      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	75fb      	strb	r3, [r7, #23]
      break;
 800652c:	e002      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800652e:	bf00      	nop
 8006530:	e000      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006532:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006534:	7dfb      	ldrb	r3, [r7, #23]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d109      	bne.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800653a:	4ba3      	ldr	r3, [pc, #652]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800653c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800653e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006546:	49a0      	ldr	r1, [pc, #640]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006548:	4313      	orrs	r3, r2
 800654a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800654c:	e001      	b.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800654e:	7dfb      	ldrb	r3, [r7, #23]
 8006550:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d047      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006562:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006566:	d030      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006568:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800656c:	d82a      	bhi.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800656e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006572:	d02c      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006574:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006578:	d824      	bhi.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800657a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800657e:	d018      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8006580:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006584:	d81e      	bhi.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800658a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800658e:	d007      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006590:	e018      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006592:	4b8d      	ldr	r3, [pc, #564]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006596:	4a8c      	ldr	r2, [pc, #560]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800659c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800659e:	e017      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	3304      	adds	r3, #4
 80065a4:	2100      	movs	r1, #0
 80065a6:	4618      	mov	r0, r3
 80065a8:	f001 f81a 	bl	80075e0 <RCCEx_PLL2_Config>
 80065ac:	4603      	mov	r3, r0
 80065ae:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80065b0:	e00e      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	3324      	adds	r3, #36	; 0x24
 80065b6:	2100      	movs	r1, #0
 80065b8:	4618      	mov	r0, r3
 80065ba:	f001 f8c3 	bl	8007744 <RCCEx_PLL3_Config>
 80065be:	4603      	mov	r3, r0
 80065c0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80065c2:	e005      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	75fb      	strb	r3, [r7, #23]
      break;
 80065c8:	e002      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80065ca:	bf00      	nop
 80065cc:	e000      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80065ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065d0:	7dfb      	ldrb	r3, [r7, #23]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d109      	bne.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80065d6:	4b7c      	ldr	r3, [pc, #496]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065da:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065e2:	4979      	ldr	r1, [pc, #484]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065e4:	4313      	orrs	r3, r2
 80065e6:	650b      	str	r3, [r1, #80]	; 0x50
 80065e8:	e001      	b.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ea:	7dfb      	ldrb	r3, [r7, #23]
 80065ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d049      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006602:	d02e      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8006604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006608:	d828      	bhi.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800660a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800660e:	d02a      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8006610:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006614:	d822      	bhi.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006616:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800661a:	d026      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800661c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006620:	d81c      	bhi.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006622:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006626:	d010      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8006628:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800662c:	d816      	bhi.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800662e:	2b00      	cmp	r3, #0
 8006630:	d01d      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8006632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006636:	d111      	bne.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	3304      	adds	r3, #4
 800663c:	2101      	movs	r1, #1
 800663e:	4618      	mov	r0, r3
 8006640:	f000 ffce 	bl	80075e0 <RCCEx_PLL2_Config>
 8006644:	4603      	mov	r3, r0
 8006646:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006648:	e012      	b.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	3324      	adds	r3, #36	; 0x24
 800664e:	2101      	movs	r1, #1
 8006650:	4618      	mov	r0, r3
 8006652:	f001 f877 	bl	8007744 <RCCEx_PLL3_Config>
 8006656:	4603      	mov	r3, r0
 8006658:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800665a:	e009      	b.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	75fb      	strb	r3, [r7, #23]
      break;
 8006660:	e006      	b.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006662:	bf00      	nop
 8006664:	e004      	b.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006666:	bf00      	nop
 8006668:	e002      	b.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800666a:	bf00      	nop
 800666c:	e000      	b.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800666e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006670:	7dfb      	ldrb	r3, [r7, #23]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d109      	bne.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006676:	4b54      	ldr	r3, [pc, #336]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800667a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006682:	4951      	ldr	r1, [pc, #324]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006684:	4313      	orrs	r3, r2
 8006686:	650b      	str	r3, [r1, #80]	; 0x50
 8006688:	e001      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800668a:	7dfb      	ldrb	r3, [r7, #23]
 800668c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d04b      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80066a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066a4:	d02e      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80066a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066aa:	d828      	bhi.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80066ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066b0:	d02a      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80066b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066b6:	d822      	bhi.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80066b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066bc:	d026      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x528>
 80066be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066c2:	d81c      	bhi.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80066c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066c8:	d010      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x508>
 80066ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066ce:	d816      	bhi.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d01d      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80066d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066d8:	d111      	bne.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	3304      	adds	r3, #4
 80066de:	2101      	movs	r1, #1
 80066e0:	4618      	mov	r0, r3
 80066e2:	f000 ff7d 	bl	80075e0 <RCCEx_PLL2_Config>
 80066e6:	4603      	mov	r3, r0
 80066e8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80066ea:	e012      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	3324      	adds	r3, #36	; 0x24
 80066f0:	2101      	movs	r1, #1
 80066f2:	4618      	mov	r0, r3
 80066f4:	f001 f826 	bl	8007744 <RCCEx_PLL3_Config>
 80066f8:	4603      	mov	r3, r0
 80066fa:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80066fc:	e009      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	75fb      	strb	r3, [r7, #23]
      break;
 8006702:	e006      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006704:	bf00      	nop
 8006706:	e004      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006708:	bf00      	nop
 800670a:	e002      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800670c:	bf00      	nop
 800670e:	e000      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006710:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006712:	7dfb      	ldrb	r3, [r7, #23]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10a      	bne.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006718:	4b2b      	ldr	r3, [pc, #172]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800671a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800671c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006726:	4928      	ldr	r1, [pc, #160]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006728:	4313      	orrs	r3, r2
 800672a:	658b      	str	r3, [r1, #88]	; 0x58
 800672c:	e001      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800672e:	7dfb      	ldrb	r3, [r7, #23]
 8006730:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d02f      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006742:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006746:	d00e      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8006748:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800674c:	d814      	bhi.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800674e:	2b00      	cmp	r3, #0
 8006750:	d015      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006752:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006756:	d10f      	bne.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006758:	4b1b      	ldr	r3, [pc, #108]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800675a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675c:	4a1a      	ldr	r2, [pc, #104]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800675e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006762:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006764:	e00c      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	3304      	adds	r3, #4
 800676a:	2101      	movs	r1, #1
 800676c:	4618      	mov	r0, r3
 800676e:	f000 ff37 	bl	80075e0 <RCCEx_PLL2_Config>
 8006772:	4603      	mov	r3, r0
 8006774:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006776:	e003      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	75fb      	strb	r3, [r7, #23]
      break;
 800677c:	e000      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800677e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006780:	7dfb      	ldrb	r3, [r7, #23]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d109      	bne.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006786:	4b10      	ldr	r3, [pc, #64]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800678a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006792:	490d      	ldr	r1, [pc, #52]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006794:	4313      	orrs	r3, r2
 8006796:	650b      	str	r3, [r1, #80]	; 0x50
 8006798:	e001      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800679a:	7dfb      	ldrb	r3, [r7, #23]
 800679c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d033      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ae:	2b03      	cmp	r3, #3
 80067b0:	d81c      	bhi.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x608>
 80067b2:	a201      	add	r2, pc, #4	; (adr r2, 80067b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80067b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b8:	080067f3 	.word	0x080067f3
 80067bc:	080067cd 	.word	0x080067cd
 80067c0:	080067db 	.word	0x080067db
 80067c4:	080067f3 	.word	0x080067f3
 80067c8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067cc:	4bb8      	ldr	r3, [pc, #736]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d0:	4ab7      	ldr	r2, [pc, #732]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80067d8:	e00c      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	3304      	adds	r3, #4
 80067de:	2102      	movs	r1, #2
 80067e0:	4618      	mov	r0, r3
 80067e2:	f000 fefd 	bl	80075e0 <RCCEx_PLL2_Config>
 80067e6:	4603      	mov	r3, r0
 80067e8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80067ea:	e003      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	75fb      	strb	r3, [r7, #23]
      break;
 80067f0:	e000      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80067f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067f4:	7dfb      	ldrb	r3, [r7, #23]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d109      	bne.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80067fa:	4bad      	ldr	r3, [pc, #692]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067fe:	f023 0203 	bic.w	r2, r3, #3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006806:	49aa      	ldr	r1, [pc, #680]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006808:	4313      	orrs	r3, r2
 800680a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800680c:	e001      	b.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800680e:	7dfb      	ldrb	r3, [r7, #23]
 8006810:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 8086 	beq.w	800692c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006820:	4ba4      	ldr	r3, [pc, #656]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4aa3      	ldr	r2, [pc, #652]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800682a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800682c:	f7fb feea 	bl	8002604 <HAL_GetTick>
 8006830:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006832:	e009      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006834:	f7fb fee6 	bl	8002604 <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	2b64      	cmp	r3, #100	; 0x64
 8006840:	d902      	bls.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	75fb      	strb	r3, [r7, #23]
        break;
 8006846:	e005      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006848:	4b9a      	ldr	r3, [pc, #616]	; (8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006850:	2b00      	cmp	r3, #0
 8006852:	d0ef      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006854:	7dfb      	ldrb	r3, [r7, #23]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d166      	bne.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800685a:	4b95      	ldr	r3, [pc, #596]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800685c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006864:	4053      	eors	r3, r2
 8006866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800686a:	2b00      	cmp	r3, #0
 800686c:	d013      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800686e:	4b90      	ldr	r3, [pc, #576]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006876:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006878:	4b8d      	ldr	r3, [pc, #564]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800687a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800687c:	4a8c      	ldr	r2, [pc, #560]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800687e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006882:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006884:	4b8a      	ldr	r3, [pc, #552]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006888:	4a89      	ldr	r2, [pc, #548]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800688a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800688e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006890:	4a87      	ldr	r2, [pc, #540]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800689c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068a0:	d115      	bne.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068a2:	f7fb feaf 	bl	8002604 <HAL_GetTick>
 80068a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068a8:	e00b      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068aa:	f7fb feab 	bl	8002604 <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d902      	bls.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	75fb      	strb	r3, [r7, #23]
            break;
 80068c0:	e005      	b.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068c2:	4b7b      	ldr	r3, [pc, #492]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c6:	f003 0302 	and.w	r3, r3, #2
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d0ed      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80068ce:	7dfb      	ldrb	r3, [r7, #23]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d126      	bne.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068e2:	d10d      	bne.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80068e4:	4b72      	ldr	r3, [pc, #456]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068f2:	0919      	lsrs	r1, r3, #4
 80068f4:	4b70      	ldr	r3, [pc, #448]	; (8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80068f6:	400b      	ands	r3, r1
 80068f8:	496d      	ldr	r1, [pc, #436]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	610b      	str	r3, [r1, #16]
 80068fe:	e005      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006900:	4b6b      	ldr	r3, [pc, #428]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	4a6a      	ldr	r2, [pc, #424]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006906:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800690a:	6113      	str	r3, [r2, #16]
 800690c:	4b68      	ldr	r3, [pc, #416]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800690e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006916:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800691a:	4965      	ldr	r1, [pc, #404]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800691c:	4313      	orrs	r3, r2
 800691e:	670b      	str	r3, [r1, #112]	; 0x70
 8006920:	e004      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006922:	7dfb      	ldrb	r3, [r7, #23]
 8006924:	75bb      	strb	r3, [r7, #22]
 8006926:	e001      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006928:	7dfb      	ldrb	r3, [r7, #23]
 800692a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	2b00      	cmp	r3, #0
 8006936:	d07e      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800693c:	2b28      	cmp	r3, #40	; 0x28
 800693e:	d867      	bhi.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006940:	a201      	add	r2, pc, #4	; (adr r2, 8006948 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006946:	bf00      	nop
 8006948:	08006a17 	.word	0x08006a17
 800694c:	08006a11 	.word	0x08006a11
 8006950:	08006a11 	.word	0x08006a11
 8006954:	08006a11 	.word	0x08006a11
 8006958:	08006a11 	.word	0x08006a11
 800695c:	08006a11 	.word	0x08006a11
 8006960:	08006a11 	.word	0x08006a11
 8006964:	08006a11 	.word	0x08006a11
 8006968:	080069ed 	.word	0x080069ed
 800696c:	08006a11 	.word	0x08006a11
 8006970:	08006a11 	.word	0x08006a11
 8006974:	08006a11 	.word	0x08006a11
 8006978:	08006a11 	.word	0x08006a11
 800697c:	08006a11 	.word	0x08006a11
 8006980:	08006a11 	.word	0x08006a11
 8006984:	08006a11 	.word	0x08006a11
 8006988:	080069ff 	.word	0x080069ff
 800698c:	08006a11 	.word	0x08006a11
 8006990:	08006a11 	.word	0x08006a11
 8006994:	08006a11 	.word	0x08006a11
 8006998:	08006a11 	.word	0x08006a11
 800699c:	08006a11 	.word	0x08006a11
 80069a0:	08006a11 	.word	0x08006a11
 80069a4:	08006a11 	.word	0x08006a11
 80069a8:	08006a17 	.word	0x08006a17
 80069ac:	08006a11 	.word	0x08006a11
 80069b0:	08006a11 	.word	0x08006a11
 80069b4:	08006a11 	.word	0x08006a11
 80069b8:	08006a11 	.word	0x08006a11
 80069bc:	08006a11 	.word	0x08006a11
 80069c0:	08006a11 	.word	0x08006a11
 80069c4:	08006a11 	.word	0x08006a11
 80069c8:	08006a17 	.word	0x08006a17
 80069cc:	08006a11 	.word	0x08006a11
 80069d0:	08006a11 	.word	0x08006a11
 80069d4:	08006a11 	.word	0x08006a11
 80069d8:	08006a11 	.word	0x08006a11
 80069dc:	08006a11 	.word	0x08006a11
 80069e0:	08006a11 	.word	0x08006a11
 80069e4:	08006a11 	.word	0x08006a11
 80069e8:	08006a17 	.word	0x08006a17
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	3304      	adds	r3, #4
 80069f0:	2101      	movs	r1, #1
 80069f2:	4618      	mov	r0, r3
 80069f4:	f000 fdf4 	bl	80075e0 <RCCEx_PLL2_Config>
 80069f8:	4603      	mov	r3, r0
 80069fa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80069fc:	e00c      	b.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	3324      	adds	r3, #36	; 0x24
 8006a02:	2101      	movs	r1, #1
 8006a04:	4618      	mov	r0, r3
 8006a06:	f000 fe9d 	bl	8007744 <RCCEx_PLL3_Config>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006a0e:	e003      	b.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	75fb      	strb	r3, [r7, #23]
      break;
 8006a14:	e000      	b.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8006a16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a18:	7dfb      	ldrb	r3, [r7, #23]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d109      	bne.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006a1e:	4b24      	ldr	r3, [pc, #144]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a22:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a2a:	4921      	ldr	r1, [pc, #132]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	654b      	str	r3, [r1, #84]	; 0x54
 8006a30:	e001      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a32:	7dfb      	ldrb	r3, [r7, #23]
 8006a34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0302 	and.w	r3, r3, #2
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d03e      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a46:	2b05      	cmp	r3, #5
 8006a48:	d820      	bhi.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8006a4a:	a201      	add	r2, pc, #4	; (adr r2, 8006a50 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8006a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a50:	08006a93 	.word	0x08006a93
 8006a54:	08006a69 	.word	0x08006a69
 8006a58:	08006a7b 	.word	0x08006a7b
 8006a5c:	08006a93 	.word	0x08006a93
 8006a60:	08006a93 	.word	0x08006a93
 8006a64:	08006a93 	.word	0x08006a93
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	2101      	movs	r1, #1
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 fdb6 	bl	80075e0 <RCCEx_PLL2_Config>
 8006a74:	4603      	mov	r3, r0
 8006a76:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006a78:	e00c      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	3324      	adds	r3, #36	; 0x24
 8006a7e:	2101      	movs	r1, #1
 8006a80:	4618      	mov	r0, r3
 8006a82:	f000 fe5f 	bl	8007744 <RCCEx_PLL3_Config>
 8006a86:	4603      	mov	r3, r0
 8006a88:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006a8a:	e003      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a90:	e000      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006a92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a94:	7dfb      	ldrb	r3, [r7, #23]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d110      	bne.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006a9a:	4b05      	ldr	r3, [pc, #20]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a9e:	f023 0207 	bic.w	r2, r3, #7
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aa6:	4902      	ldr	r1, [pc, #8]	; (8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	654b      	str	r3, [r1, #84]	; 0x54
 8006aac:	e008      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006aae:	bf00      	nop
 8006ab0:	58024400 	.word	0x58024400
 8006ab4:	58024800 	.word	0x58024800
 8006ab8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006abc:	7dfb      	ldrb	r3, [r7, #23]
 8006abe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0304 	and.w	r3, r3, #4
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d039      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ad2:	2b05      	cmp	r3, #5
 8006ad4:	d820      	bhi.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006ad6:	a201      	add	r2, pc, #4	; (adr r2, 8006adc <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006adc:	08006b1f 	.word	0x08006b1f
 8006ae0:	08006af5 	.word	0x08006af5
 8006ae4:	08006b07 	.word	0x08006b07
 8006ae8:	08006b1f 	.word	0x08006b1f
 8006aec:	08006b1f 	.word	0x08006b1f
 8006af0:	08006b1f 	.word	0x08006b1f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	3304      	adds	r3, #4
 8006af8:	2101      	movs	r1, #1
 8006afa:	4618      	mov	r0, r3
 8006afc:	f000 fd70 	bl	80075e0 <RCCEx_PLL2_Config>
 8006b00:	4603      	mov	r3, r0
 8006b02:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006b04:	e00c      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	3324      	adds	r3, #36	; 0x24
 8006b0a:	2101      	movs	r1, #1
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f000 fe19 	bl	8007744 <RCCEx_PLL3_Config>
 8006b12:	4603      	mov	r3, r0
 8006b14:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006b16:	e003      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b1c:	e000      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006b1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b20:	7dfb      	ldrb	r3, [r7, #23]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d10a      	bne.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b26:	4bb7      	ldr	r3, [pc, #732]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b2a:	f023 0207 	bic.w	r2, r3, #7
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b34:	49b3      	ldr	r1, [pc, #716]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b36:	4313      	orrs	r3, r2
 8006b38:	658b      	str	r3, [r1, #88]	; 0x58
 8006b3a:	e001      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b3c:	7dfb      	ldrb	r3, [r7, #23]
 8006b3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0320 	and.w	r3, r3, #32
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d04b      	beq.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b56:	d02e      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006b58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b5c:	d828      	bhi.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b62:	d02a      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b68:	d822      	bhi.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006b6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b6e:	d026      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006b70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b74:	d81c      	bhi.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006b76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b7a:	d010      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006b7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b80:	d816      	bhi.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d01d      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006b86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b8a:	d111      	bne.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	3304      	adds	r3, #4
 8006b90:	2100      	movs	r1, #0
 8006b92:	4618      	mov	r0, r3
 8006b94:	f000 fd24 	bl	80075e0 <RCCEx_PLL2_Config>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006b9c:	e012      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	3324      	adds	r3, #36	; 0x24
 8006ba2:	2102      	movs	r1, #2
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f000 fdcd 	bl	8007744 <RCCEx_PLL3_Config>
 8006baa:	4603      	mov	r3, r0
 8006bac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006bae:	e009      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8006bb4:	e006      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006bb6:	bf00      	nop
 8006bb8:	e004      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006bba:	bf00      	nop
 8006bbc:	e002      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006bbe:	bf00      	nop
 8006bc0:	e000      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006bc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bc4:	7dfb      	ldrb	r3, [r7, #23]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10a      	bne.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006bca:	4b8e      	ldr	r3, [pc, #568]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bce:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bd8:	498a      	ldr	r1, [pc, #552]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	654b      	str	r3, [r1, #84]	; 0x54
 8006bde:	e001      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be0:	7dfb      	ldrb	r3, [r7, #23]
 8006be2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d04b      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bf6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006bfa:	d02e      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006bfc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006c00:	d828      	bhi.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c06:	d02a      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c0c:	d822      	bhi.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006c0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c12:	d026      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006c14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c18:	d81c      	bhi.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006c1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c1e:	d010      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006c20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c24:	d816      	bhi.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d01d      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c2e:	d111      	bne.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	3304      	adds	r3, #4
 8006c34:	2100      	movs	r1, #0
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 fcd2 	bl	80075e0 <RCCEx_PLL2_Config>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006c40:	e012      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	3324      	adds	r3, #36	; 0x24
 8006c46:	2102      	movs	r1, #2
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f000 fd7b 	bl	8007744 <RCCEx_PLL3_Config>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006c52:	e009      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	75fb      	strb	r3, [r7, #23]
      break;
 8006c58:	e006      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006c5a:	bf00      	nop
 8006c5c:	e004      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006c5e:	bf00      	nop
 8006c60:	e002      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006c62:	bf00      	nop
 8006c64:	e000      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006c66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c68:	7dfb      	ldrb	r3, [r7, #23]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d10a      	bne.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006c6e:	4b65      	ldr	r3, [pc, #404]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c72:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c7c:	4961      	ldr	r1, [pc, #388]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	658b      	str	r3, [r1, #88]	; 0x58
 8006c82:	e001      	b.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c84:	7dfb      	ldrb	r3, [r7, #23]
 8006c86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d04b      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c9a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006c9e:	d02e      	beq.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006ca0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006ca4:	d828      	bhi.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006ca6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006caa:	d02a      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006cac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cb0:	d822      	bhi.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006cb2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006cb6:	d026      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006cb8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006cbc:	d81c      	bhi.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006cbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cc2:	d010      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006cc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cc8:	d816      	bhi.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d01d      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cd2:	d111      	bne.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	3304      	adds	r3, #4
 8006cd8:	2100      	movs	r1, #0
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f000 fc80 	bl	80075e0 <RCCEx_PLL2_Config>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006ce4:	e012      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	3324      	adds	r3, #36	; 0x24
 8006cea:	2102      	movs	r1, #2
 8006cec:	4618      	mov	r0, r3
 8006cee:	f000 fd29 	bl	8007744 <RCCEx_PLL3_Config>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006cf6:	e009      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8006cfc:	e006      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006cfe:	bf00      	nop
 8006d00:	e004      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006d02:	bf00      	nop
 8006d04:	e002      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006d06:	bf00      	nop
 8006d08:	e000      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006d0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d0c:	7dfb      	ldrb	r3, [r7, #23]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10a      	bne.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006d12:	4b3c      	ldr	r3, [pc, #240]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d20:	4938      	ldr	r1, [pc, #224]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d22:	4313      	orrs	r3, r2
 8006d24:	658b      	str	r3, [r1, #88]	; 0x58
 8006d26:	e001      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d28:	7dfb      	ldrb	r3, [r7, #23]
 8006d2a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0308 	and.w	r3, r3, #8
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d01a      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d42:	d10a      	bne.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	3324      	adds	r3, #36	; 0x24
 8006d48:	2102      	movs	r1, #2
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 fcfa 	bl	8007744 <RCCEx_PLL3_Config>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d001      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006d5a:	4b2a      	ldr	r3, [pc, #168]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d68:	4926      	ldr	r1, [pc, #152]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0310 	and.w	r3, r3, #16
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d01a      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d84:	d10a      	bne.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	3324      	adds	r3, #36	; 0x24
 8006d8a:	2102      	movs	r1, #2
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f000 fcd9 	bl	8007744 <RCCEx_PLL3_Config>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d001      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d9c:	4b19      	ldr	r3, [pc, #100]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006da0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006daa:	4916      	ldr	r1, [pc, #88]	; (8006e04 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006dac:	4313      	orrs	r3, r2
 8006dae:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d036      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006dc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dc6:	d01f      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006dc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dcc:	d817      	bhi.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d003      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dd6:	d009      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006dd8:	e011      	b.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	3304      	adds	r3, #4
 8006dde:	2100      	movs	r1, #0
 8006de0:	4618      	mov	r0, r3
 8006de2:	f000 fbfd 	bl	80075e0 <RCCEx_PLL2_Config>
 8006de6:	4603      	mov	r3, r0
 8006de8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006dea:	e00e      	b.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	3324      	adds	r3, #36	; 0x24
 8006df0:	2102      	movs	r1, #2
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 fca6 	bl	8007744 <RCCEx_PLL3_Config>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006dfc:	e005      	b.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	75fb      	strb	r3, [r7, #23]
      break;
 8006e02:	e002      	b.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006e04:	58024400 	.word	0x58024400
      break;
 8006e08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e0a:	7dfb      	ldrb	r3, [r7, #23]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10a      	bne.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e10:	4b93      	ldr	r3, [pc, #588]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e1e:	4990      	ldr	r1, [pc, #576]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	658b      	str	r3, [r1, #88]	; 0x58
 8006e24:	e001      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e26:	7dfb      	ldrb	r3, [r7, #23]
 8006e28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d033      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e3c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e40:	d01c      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006e42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e46:	d816      	bhi.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006e48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e4c:	d003      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8006e4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e52:	d007      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006e54:	e00f      	b.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e56:	4b82      	ldr	r3, [pc, #520]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5a:	4a81      	ldr	r2, [pc, #516]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006e62:	e00c      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	3324      	adds	r3, #36	; 0x24
 8006e68:	2101      	movs	r1, #1
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f000 fc6a 	bl	8007744 <RCCEx_PLL3_Config>
 8006e70:	4603      	mov	r3, r0
 8006e72:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006e74:	e003      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	75fb      	strb	r3, [r7, #23]
      break;
 8006e7a:	e000      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006e7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e7e:	7dfb      	ldrb	r3, [r7, #23]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d10a      	bne.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e84:	4b76      	ldr	r3, [pc, #472]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e92:	4973      	ldr	r1, [pc, #460]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e94:	4313      	orrs	r3, r2
 8006e96:	654b      	str	r3, [r1, #84]	; 0x54
 8006e98:	e001      	b.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e9a:	7dfb      	ldrb	r3, [r7, #23]
 8006e9c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d029      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eb6:	d007      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006eb8:	e00f      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eba:	4b69      	ldr	r3, [pc, #420]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ebe:	4a68      	ldr	r2, [pc, #416]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ec4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006ec6:	e00b      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	3304      	adds	r3, #4
 8006ecc:	2102      	movs	r1, #2
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f000 fb86 	bl	80075e0 <RCCEx_PLL2_Config>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006ed8:	e002      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	75fb      	strb	r3, [r7, #23]
      break;
 8006ede:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ee0:	7dfb      	ldrb	r3, [r7, #23]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d109      	bne.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006ee6:	4b5e      	ldr	r3, [pc, #376]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ef2:	495b      	ldr	r1, [pc, #364]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006ef8:	e001      	b.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006efa:	7dfb      	ldrb	r3, [r7, #23]
 8006efc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00a      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	3324      	adds	r3, #36	; 0x24
 8006f0e:	2102      	movs	r1, #2
 8006f10:	4618      	mov	r0, r3
 8006f12:	f000 fc17 	bl	8007744 <RCCEx_PLL3_Config>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d001      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d030      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f34:	d017      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8006f36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f3a:	d811      	bhi.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f40:	d013      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006f42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f46:	d80b      	bhi.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d010      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006f4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f50:	d106      	bne.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f52:	4b43      	ldr	r3, [pc, #268]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f56:	4a42      	ldr	r2, [pc, #264]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006f5e:	e007      	b.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	75fb      	strb	r3, [r7, #23]
      break;
 8006f64:	e004      	b.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006f66:	bf00      	nop
 8006f68:	e002      	b.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006f6a:	bf00      	nop
 8006f6c:	e000      	b.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006f6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f70:	7dfb      	ldrb	r3, [r7, #23]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d109      	bne.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f76:	4b3a      	ldr	r3, [pc, #232]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f82:	4937      	ldr	r1, [pc, #220]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f84:	4313      	orrs	r3, r2
 8006f86:	654b      	str	r3, [r1, #84]	; 0x54
 8006f88:	e001      	b.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f8a:	7dfb      	ldrb	r3, [r7, #23]
 8006f8c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d008      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006f9a:	4b31      	ldr	r3, [pc, #196]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fa6:	492e      	ldr	r1, [pc, #184]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d009      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006fb8:	4b29      	ldr	r3, [pc, #164]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006fc6:	4926      	ldr	r1, [pc, #152]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d008      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006fd8:	4b21      	ldr	r3, [pc, #132]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fdc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fe4:	491e      	ldr	r1, [pc, #120]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00d      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ff6:	4b1a      	ldr	r3, [pc, #104]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	4a19      	ldr	r2, [pc, #100]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ffc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007000:	6113      	str	r3, [r2, #16]
 8007002:	4b17      	ldr	r3, [pc, #92]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007004:	691a      	ldr	r2, [r3, #16]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800700c:	4914      	ldr	r1, [pc, #80]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800700e:	4313      	orrs	r3, r2
 8007010:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	da08      	bge.n	800702c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800701a:	4b11      	ldr	r3, [pc, #68]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800701c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800701e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007026:	490e      	ldr	r1, [pc, #56]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007028:	4313      	orrs	r3, r2
 800702a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d009      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007038:	4b09      	ldr	r3, [pc, #36]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800703a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800703c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007046:	4906      	ldr	r1, [pc, #24]	; (8007060 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007048:	4313      	orrs	r3, r2
 800704a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800704c:	7dbb      	ldrb	r3, [r7, #22]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d101      	bne.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007052:	2300      	movs	r3, #0
 8007054:	e000      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
}
 8007058:	4618      	mov	r0, r3
 800705a:	3718      	adds	r7, #24
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}
 8007060:	58024400 	.word	0x58024400

08007064 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007068:	f7ff f860 	bl	800612c <HAL_RCC_GetHCLKFreq>
 800706c:	4602      	mov	r2, r0
 800706e:	4b06      	ldr	r3, [pc, #24]	; (8007088 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	091b      	lsrs	r3, r3, #4
 8007074:	f003 0307 	and.w	r3, r3, #7
 8007078:	4904      	ldr	r1, [pc, #16]	; (800708c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800707a:	5ccb      	ldrb	r3, [r1, r3]
 800707c:	f003 031f 	and.w	r3, r3, #31
 8007080:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007084:	4618      	mov	r0, r3
 8007086:	bd80      	pop	{r7, pc}
 8007088:	58024400 	.word	0x58024400
 800708c:	0800bd1c 	.word	0x0800bd1c

08007090 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007090:	b480      	push	{r7}
 8007092:	b089      	sub	sp, #36	; 0x24
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007098:	4ba1      	ldr	r3, [pc, #644]	; (8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800709a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709c:	f003 0303 	and.w	r3, r3, #3
 80070a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80070a2:	4b9f      	ldr	r3, [pc, #636]	; (8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a6:	0b1b      	lsrs	r3, r3, #12
 80070a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80070ae:	4b9c      	ldr	r3, [pc, #624]	; (8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b2:	091b      	lsrs	r3, r3, #4
 80070b4:	f003 0301 	and.w	r3, r3, #1
 80070b8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80070ba:	4b99      	ldr	r3, [pc, #612]	; (8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070be:	08db      	lsrs	r3, r3, #3
 80070c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	fb02 f303 	mul.w	r3, r2, r3
 80070ca:	ee07 3a90 	vmov	s15, r3
 80070ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f000 8111 	beq.w	8007300 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	f000 8083 	beq.w	80071ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	f200 80a1 	bhi.w	8007230 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d003      	beq.n	80070fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d056      	beq.n	80071a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80070fa:	e099      	b.n	8007230 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070fc:	4b88      	ldr	r3, [pc, #544]	; (8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0320 	and.w	r3, r3, #32
 8007104:	2b00      	cmp	r3, #0
 8007106:	d02d      	beq.n	8007164 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007108:	4b85      	ldr	r3, [pc, #532]	; (8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	08db      	lsrs	r3, r3, #3
 800710e:	f003 0303 	and.w	r3, r3, #3
 8007112:	4a84      	ldr	r2, [pc, #528]	; (8007324 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007114:	fa22 f303 	lsr.w	r3, r2, r3
 8007118:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	ee07 3a90 	vmov	s15, r3
 8007120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	ee07 3a90 	vmov	s15, r3
 800712a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800712e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007132:	4b7b      	ldr	r3, [pc, #492]	; (8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800713a:	ee07 3a90 	vmov	s15, r3
 800713e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007142:	ed97 6a03 	vldr	s12, [r7, #12]
 8007146:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800714a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800714e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800715a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800715e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007162:	e087      	b.n	8007274 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	ee07 3a90 	vmov	s15, r3
 800716a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800716e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800732c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007176:	4b6a      	ldr	r3, [pc, #424]	; (8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800717e:	ee07 3a90 	vmov	s15, r3
 8007182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007186:	ed97 6a03 	vldr	s12, [r7, #12]
 800718a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800718e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800719a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800719e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071a6:	e065      	b.n	8007274 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	ee07 3a90 	vmov	s15, r3
 80071ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007330 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80071b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ba:	4b59      	ldr	r3, [pc, #356]	; (8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071c2:	ee07 3a90 	vmov	s15, r3
 80071c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071ea:	e043      	b.n	8007274 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	ee07 3a90 	vmov	s15, r3
 80071f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80071fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071fe:	4b48      	ldr	r3, [pc, #288]	; (8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007206:	ee07 3a90 	vmov	s15, r3
 800720a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800720e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007212:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800721a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800721e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800722a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800722e:	e021      	b.n	8007274 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	ee07 3a90 	vmov	s15, r3
 8007236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007330 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800723e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007242:	4b37      	ldr	r3, [pc, #220]	; (8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800724a:	ee07 3a90 	vmov	s15, r3
 800724e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007252:	ed97 6a03 	vldr	s12, [r7, #12]
 8007256:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800725a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800725e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800726a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800726e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007272:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007274:	4b2a      	ldr	r3, [pc, #168]	; (8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007278:	0a5b      	lsrs	r3, r3, #9
 800727a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800727e:	ee07 3a90 	vmov	s15, r3
 8007282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007286:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800728a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800728e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007292:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007296:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800729a:	ee17 2a90 	vmov	r2, s15
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80072a2:	4b1f      	ldr	r3, [pc, #124]	; (8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a6:	0c1b      	lsrs	r3, r3, #16
 80072a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072ac:	ee07 3a90 	vmov	s15, r3
 80072b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80072c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072c8:	ee17 2a90 	vmov	r2, s15
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80072d0:	4b13      	ldr	r3, [pc, #76]	; (8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d4:	0e1b      	lsrs	r3, r3, #24
 80072d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072da:	ee07 3a90 	vmov	s15, r3
 80072de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80072ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072f6:	ee17 2a90 	vmov	r2, s15
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80072fe:	e008      	b.n	8007312 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	609a      	str	r2, [r3, #8]
}
 8007312:	bf00      	nop
 8007314:	3724      	adds	r7, #36	; 0x24
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	58024400 	.word	0x58024400
 8007324:	03d09000 	.word	0x03d09000
 8007328:	46000000 	.word	0x46000000
 800732c:	4c742400 	.word	0x4c742400
 8007330:	4a742400 	.word	0x4a742400
 8007334:	4c371b00 	.word	0x4c371b00

08007338 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007338:	b480      	push	{r7}
 800733a:	b089      	sub	sp, #36	; 0x24
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007340:	4ba1      	ldr	r3, [pc, #644]	; (80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007344:	f003 0303 	and.w	r3, r3, #3
 8007348:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800734a:	4b9f      	ldr	r3, [pc, #636]	; (80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800734c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800734e:	0d1b      	lsrs	r3, r3, #20
 8007350:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007354:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007356:	4b9c      	ldr	r3, [pc, #624]	; (80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735a:	0a1b      	lsrs	r3, r3, #8
 800735c:	f003 0301 	and.w	r3, r3, #1
 8007360:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007362:	4b99      	ldr	r3, [pc, #612]	; (80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007366:	08db      	lsrs	r3, r3, #3
 8007368:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	fb02 f303 	mul.w	r3, r2, r3
 8007372:	ee07 3a90 	vmov	s15, r3
 8007376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800737a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 8111 	beq.w	80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	2b02      	cmp	r3, #2
 800738a:	f000 8083 	beq.w	8007494 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	2b02      	cmp	r3, #2
 8007392:	f200 80a1 	bhi.w	80074d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d003      	beq.n	80073a4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d056      	beq.n	8007450 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80073a2:	e099      	b.n	80074d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073a4:	4b88      	ldr	r3, [pc, #544]	; (80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0320 	and.w	r3, r3, #32
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d02d      	beq.n	800740c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073b0:	4b85      	ldr	r3, [pc, #532]	; (80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	08db      	lsrs	r3, r3, #3
 80073b6:	f003 0303 	and.w	r3, r3, #3
 80073ba:	4a84      	ldr	r2, [pc, #528]	; (80075cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80073bc:	fa22 f303 	lsr.w	r3, r2, r3
 80073c0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	ee07 3a90 	vmov	s15, r3
 80073c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	ee07 3a90 	vmov	s15, r3
 80073d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073da:	4b7b      	ldr	r3, [pc, #492]	; (80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073e2:	ee07 3a90 	vmov	s15, r3
 80073e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80073ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007406:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800740a:	e087      	b.n	800751c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	ee07 3a90 	vmov	s15, r3
 8007412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007416:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80075d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800741a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800741e:	4b6a      	ldr	r3, [pc, #424]	; (80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007426:	ee07 3a90 	vmov	s15, r3
 800742a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800742e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007432:	eddf 5a67 	vldr	s11, [pc, #412]	; 80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800743a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800743e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800744a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800744e:	e065      	b.n	800751c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	ee07 3a90 	vmov	s15, r3
 8007456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800745a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80075d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800745e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007462:	4b59      	ldr	r3, [pc, #356]	; (80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800746a:	ee07 3a90 	vmov	s15, r3
 800746e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007472:	ed97 6a03 	vldr	s12, [r7, #12]
 8007476:	eddf 5a56 	vldr	s11, [pc, #344]	; 80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800747a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800747e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007482:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800748a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800748e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007492:	e043      	b.n	800751c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	ee07 3a90 	vmov	s15, r3
 800749a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800749e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80075dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80074a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074a6:	4b48      	ldr	r3, [pc, #288]	; (80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074ae:	ee07 3a90 	vmov	s15, r3
 80074b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074d6:	e021      	b.n	800751c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	ee07 3a90 	vmov	s15, r3
 80074de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80075d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80074e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ea:	4b37      	ldr	r3, [pc, #220]	; (80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074f2:	ee07 3a90 	vmov	s15, r3
 80074f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80074fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800750a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800750e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007516:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800751a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800751c:	4b2a      	ldr	r3, [pc, #168]	; (80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800751e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007520:	0a5b      	lsrs	r3, r3, #9
 8007522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007526:	ee07 3a90 	vmov	s15, r3
 800752a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800752e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007532:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007536:	edd7 6a07 	vldr	s13, [r7, #28]
 800753a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800753e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007542:	ee17 2a90 	vmov	r2, s15
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800754a:	4b1f      	ldr	r3, [pc, #124]	; (80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800754c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754e:	0c1b      	lsrs	r3, r3, #16
 8007550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007554:	ee07 3a90 	vmov	s15, r3
 8007558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800755c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007560:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007564:	edd7 6a07 	vldr	s13, [r7, #28]
 8007568:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800756c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007570:	ee17 2a90 	vmov	r2, s15
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007578:	4b13      	ldr	r3, [pc, #76]	; (80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800757a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757c:	0e1b      	lsrs	r3, r3, #24
 800757e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007582:	ee07 3a90 	vmov	s15, r3
 8007586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800758a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800758e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007592:	edd7 6a07 	vldr	s13, [r7, #28]
 8007596:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800759a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800759e:	ee17 2a90 	vmov	r2, s15
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80075a6:	e008      	b.n	80075ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	609a      	str	r2, [r3, #8]
}
 80075ba:	bf00      	nop
 80075bc:	3724      	adds	r7, #36	; 0x24
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	58024400 	.word	0x58024400
 80075cc:	03d09000 	.word	0x03d09000
 80075d0:	46000000 	.word	0x46000000
 80075d4:	4c742400 	.word	0x4c742400
 80075d8:	4a742400 	.word	0x4a742400
 80075dc:	4c371b00 	.word	0x4c371b00

080075e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075ea:	2300      	movs	r3, #0
 80075ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80075ee:	4b53      	ldr	r3, [pc, #332]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 80075f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f2:	f003 0303 	and.w	r3, r3, #3
 80075f6:	2b03      	cmp	r3, #3
 80075f8:	d101      	bne.n	80075fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e099      	b.n	8007732 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80075fe:	4b4f      	ldr	r3, [pc, #316]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a4e      	ldr	r2, [pc, #312]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 8007604:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007608:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800760a:	f7fa fffb 	bl	8002604 <HAL_GetTick>
 800760e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007610:	e008      	b.n	8007624 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007612:	f7fa fff7 	bl	8002604 <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	2b02      	cmp	r3, #2
 800761e:	d901      	bls.n	8007624 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e086      	b.n	8007732 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007624:	4b45      	ldr	r3, [pc, #276]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1f0      	bne.n	8007612 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007630:	4b42      	ldr	r3, [pc, #264]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 8007632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007634:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	031b      	lsls	r3, r3, #12
 800763e:	493f      	ldr	r1, [pc, #252]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 8007640:	4313      	orrs	r3, r2
 8007642:	628b      	str	r3, [r1, #40]	; 0x28
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	3b01      	subs	r3, #1
 800764a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	3b01      	subs	r3, #1
 8007654:	025b      	lsls	r3, r3, #9
 8007656:	b29b      	uxth	r3, r3
 8007658:	431a      	orrs	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	3b01      	subs	r3, #1
 8007660:	041b      	lsls	r3, r3, #16
 8007662:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007666:	431a      	orrs	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	3b01      	subs	r3, #1
 800766e:	061b      	lsls	r3, r3, #24
 8007670:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007674:	4931      	ldr	r1, [pc, #196]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 8007676:	4313      	orrs	r3, r2
 8007678:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800767a:	4b30      	ldr	r3, [pc, #192]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 800767c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	695b      	ldr	r3, [r3, #20]
 8007686:	492d      	ldr	r1, [pc, #180]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 8007688:	4313      	orrs	r3, r2
 800768a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800768c:	4b2b      	ldr	r3, [pc, #172]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 800768e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007690:	f023 0220 	bic.w	r2, r3, #32
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	699b      	ldr	r3, [r3, #24]
 8007698:	4928      	ldr	r1, [pc, #160]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 800769a:	4313      	orrs	r3, r2
 800769c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800769e:	4b27      	ldr	r3, [pc, #156]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 80076a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a2:	4a26      	ldr	r2, [pc, #152]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 80076a4:	f023 0310 	bic.w	r3, r3, #16
 80076a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80076aa:	4b24      	ldr	r3, [pc, #144]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 80076ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076ae:	4b24      	ldr	r3, [pc, #144]	; (8007740 <RCCEx_PLL2_Config+0x160>)
 80076b0:	4013      	ands	r3, r2
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	69d2      	ldr	r2, [r2, #28]
 80076b6:	00d2      	lsls	r2, r2, #3
 80076b8:	4920      	ldr	r1, [pc, #128]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 80076ba:	4313      	orrs	r3, r2
 80076bc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80076be:	4b1f      	ldr	r3, [pc, #124]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 80076c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c2:	4a1e      	ldr	r2, [pc, #120]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 80076c4:	f043 0310 	orr.w	r3, r3, #16
 80076c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d106      	bne.n	80076de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80076d0:	4b1a      	ldr	r3, [pc, #104]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 80076d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d4:	4a19      	ldr	r2, [pc, #100]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 80076d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076dc:	e00f      	b.n	80076fe <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d106      	bne.n	80076f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80076e4:	4b15      	ldr	r3, [pc, #84]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 80076e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e8:	4a14      	ldr	r2, [pc, #80]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 80076ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076f0:	e005      	b.n	80076fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80076f2:	4b12      	ldr	r3, [pc, #72]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 80076f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f6:	4a11      	ldr	r2, [pc, #68]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 80076f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80076fe:	4b0f      	ldr	r3, [pc, #60]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a0e      	ldr	r2, [pc, #56]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 8007704:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007708:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800770a:	f7fa ff7b 	bl	8002604 <HAL_GetTick>
 800770e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007710:	e008      	b.n	8007724 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007712:	f7fa ff77 	bl	8002604 <HAL_GetTick>
 8007716:	4602      	mov	r2, r0
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	1ad3      	subs	r3, r2, r3
 800771c:	2b02      	cmp	r3, #2
 800771e:	d901      	bls.n	8007724 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007720:	2303      	movs	r3, #3
 8007722:	e006      	b.n	8007732 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007724:	4b05      	ldr	r3, [pc, #20]	; (800773c <RCCEx_PLL2_Config+0x15c>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800772c:	2b00      	cmp	r3, #0
 800772e:	d0f0      	beq.n	8007712 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007730:	7bfb      	ldrb	r3, [r7, #15]
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	58024400 	.word	0x58024400
 8007740:	ffff0007 	.word	0xffff0007

08007744 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800774e:	2300      	movs	r3, #0
 8007750:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007752:	4b53      	ldr	r3, [pc, #332]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 8007754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007756:	f003 0303 	and.w	r3, r3, #3
 800775a:	2b03      	cmp	r3, #3
 800775c:	d101      	bne.n	8007762 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e099      	b.n	8007896 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007762:	4b4f      	ldr	r3, [pc, #316]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a4e      	ldr	r2, [pc, #312]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 8007768:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800776c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800776e:	f7fa ff49 	bl	8002604 <HAL_GetTick>
 8007772:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007774:	e008      	b.n	8007788 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007776:	f7fa ff45 	bl	8002604 <HAL_GetTick>
 800777a:	4602      	mov	r2, r0
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	1ad3      	subs	r3, r2, r3
 8007780:	2b02      	cmp	r3, #2
 8007782:	d901      	bls.n	8007788 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007784:	2303      	movs	r3, #3
 8007786:	e086      	b.n	8007896 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007788:	4b45      	ldr	r3, [pc, #276]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1f0      	bne.n	8007776 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007794:	4b42      	ldr	r3, [pc, #264]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 8007796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007798:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	051b      	lsls	r3, r3, #20
 80077a2:	493f      	ldr	r1, [pc, #252]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 80077a4:	4313      	orrs	r3, r2
 80077a6:	628b      	str	r3, [r1, #40]	; 0x28
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	3b01      	subs	r3, #1
 80077ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	3b01      	subs	r3, #1
 80077b8:	025b      	lsls	r3, r3, #9
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	431a      	orrs	r2, r3
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	3b01      	subs	r3, #1
 80077c4:	041b      	lsls	r3, r3, #16
 80077c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80077ca:	431a      	orrs	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	3b01      	subs	r3, #1
 80077d2:	061b      	lsls	r3, r3, #24
 80077d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80077d8:	4931      	ldr	r1, [pc, #196]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 80077da:	4313      	orrs	r3, r2
 80077dc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80077de:	4b30      	ldr	r3, [pc, #192]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 80077e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	695b      	ldr	r3, [r3, #20]
 80077ea:	492d      	ldr	r1, [pc, #180]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 80077ec:	4313      	orrs	r3, r2
 80077ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80077f0:	4b2b      	ldr	r3, [pc, #172]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 80077f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	4928      	ldr	r1, [pc, #160]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 80077fe:	4313      	orrs	r3, r2
 8007800:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007802:	4b27      	ldr	r3, [pc, #156]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 8007804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007806:	4a26      	ldr	r2, [pc, #152]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 8007808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800780c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800780e:	4b24      	ldr	r3, [pc, #144]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 8007810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007812:	4b24      	ldr	r3, [pc, #144]	; (80078a4 <RCCEx_PLL3_Config+0x160>)
 8007814:	4013      	ands	r3, r2
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	69d2      	ldr	r2, [r2, #28]
 800781a:	00d2      	lsls	r2, r2, #3
 800781c:	4920      	ldr	r1, [pc, #128]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 800781e:	4313      	orrs	r3, r2
 8007820:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007822:	4b1f      	ldr	r3, [pc, #124]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 8007824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007826:	4a1e      	ldr	r2, [pc, #120]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 8007828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800782c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d106      	bne.n	8007842 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007834:	4b1a      	ldr	r3, [pc, #104]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 8007836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007838:	4a19      	ldr	r2, [pc, #100]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 800783a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800783e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007840:	e00f      	b.n	8007862 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	2b01      	cmp	r3, #1
 8007846:	d106      	bne.n	8007856 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007848:	4b15      	ldr	r3, [pc, #84]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 800784a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800784c:	4a14      	ldr	r2, [pc, #80]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 800784e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007852:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007854:	e005      	b.n	8007862 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007856:	4b12      	ldr	r3, [pc, #72]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 8007858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785a:	4a11      	ldr	r2, [pc, #68]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 800785c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007860:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007862:	4b0f      	ldr	r3, [pc, #60]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a0e      	ldr	r2, [pc, #56]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 8007868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800786c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800786e:	f7fa fec9 	bl	8002604 <HAL_GetTick>
 8007872:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007874:	e008      	b.n	8007888 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007876:	f7fa fec5 	bl	8002604 <HAL_GetTick>
 800787a:	4602      	mov	r2, r0
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	2b02      	cmp	r3, #2
 8007882:	d901      	bls.n	8007888 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007884:	2303      	movs	r3, #3
 8007886:	e006      	b.n	8007896 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007888:	4b05      	ldr	r3, [pc, #20]	; (80078a0 <RCCEx_PLL3_Config+0x15c>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d0f0      	beq.n	8007876 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007894:	7bfb      	ldrb	r3, [r7, #15]
}
 8007896:	4618      	mov	r0, r3
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	58024400 	.word	0x58024400
 80078a4:	ffff0007 	.word	0xffff0007

080078a8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 80078b0:	2300      	movs	r3, #0
 80078b2:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d101      	bne.n	80078be <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e0eb      	b.n	8007a96 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a75      	ldr	r2, [pc, #468]	; (8007aa0 <HAL_SPI_Init+0x1f8>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d00f      	beq.n	80078ee <HAL_SPI_Init+0x46>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a74      	ldr	r2, [pc, #464]	; (8007aa4 <HAL_SPI_Init+0x1fc>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d00a      	beq.n	80078ee <HAL_SPI_Init+0x46>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a72      	ldr	r2, [pc, #456]	; (8007aa8 <HAL_SPI_Init+0x200>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d005      	beq.n	80078ee <HAL_SPI_Init+0x46>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	2b0f      	cmp	r3, #15
 80078e8:	d901      	bls.n	80078ee <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	e0d3      	b.n	8007a96 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 f8dc 	bl	8007aac <SPI_GetPacketSize>
 80078f4:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a69      	ldr	r2, [pc, #420]	; (8007aa0 <HAL_SPI_Init+0x1f8>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d00c      	beq.n	800791a <HAL_SPI_Init+0x72>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a67      	ldr	r2, [pc, #412]	; (8007aa4 <HAL_SPI_Init+0x1fc>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d007      	beq.n	800791a <HAL_SPI_Init+0x72>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a66      	ldr	r2, [pc, #408]	; (8007aa8 <HAL_SPI_Init+0x200>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d002      	beq.n	800791a <HAL_SPI_Init+0x72>
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	2b08      	cmp	r3, #8
 8007918:	d811      	bhi.n	800793e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800791e:	4a60      	ldr	r2, [pc, #384]	; (8007aa0 <HAL_SPI_Init+0x1f8>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d009      	beq.n	8007938 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a5e      	ldr	r2, [pc, #376]	; (8007aa4 <HAL_SPI_Init+0x1fc>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d004      	beq.n	8007938 <HAL_SPI_Init+0x90>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a5d      	ldr	r2, [pc, #372]	; (8007aa8 <HAL_SPI_Init+0x200>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d104      	bne.n	8007942 <HAL_SPI_Init+0x9a>
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	2b10      	cmp	r3, #16
 800793c:	d901      	bls.n	8007942 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e0a9      	b.n	8007a96 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b00      	cmp	r3, #0
 800794c:	d106      	bne.n	800795c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f7fa f81c 	bl	8001994 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2202      	movs	r2, #2
 8007960:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f022 0201 	bic.w	r2, r2, #1
 8007972:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	699b      	ldr	r3, [r3, #24]
 8007978:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800797c:	d119      	bne.n	80079b2 <HAL_SPI_Init+0x10a>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007986:	d103      	bne.n	8007990 <HAL_SPI_Init+0xe8>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800798c:	2b00      	cmp	r3, #0
 800798e:	d008      	beq.n	80079a2 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007994:	2b00      	cmp	r3, #0
 8007996:	d10c      	bne.n	80079b2 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800799c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079a0:	d107      	bne.n	80079b2 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80079b0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	69da      	ldr	r2, [r3, #28]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ba:	431a      	orrs	r2, r3
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	431a      	orrs	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079c4:	ea42 0103 	orr.w	r1, r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	68da      	ldr	r2, [r3, #12]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	430a      	orrs	r2, r1
 80079d2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079dc:	431a      	orrs	r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e2:	431a      	orrs	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	699b      	ldr	r3, [r3, #24]
 80079e8:	431a      	orrs	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	431a      	orrs	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	695b      	ldr	r3, [r3, #20]
 80079f4:	431a      	orrs	r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a1b      	ldr	r3, [r3, #32]
 80079fa:	431a      	orrs	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	431a      	orrs	r2, r3
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a06:	431a      	orrs	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	431a      	orrs	r2, r3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a12:	ea42 0103 	orr.w	r1, r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	430a      	orrs	r2, r1
 8007a20:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d113      	bne.n	8007a52 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a3c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a50:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f022 0201 	bic.w	r2, r2, #1
 8007a60:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00a      	beq.n	8007a84 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	430a      	orrs	r2, r1
 8007a82:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	40013000 	.word	0x40013000
 8007aa4:	40003800 	.word	0x40003800
 8007aa8:	40003c00 	.word	0x40003c00

08007aac <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ab8:	095b      	lsrs	r3, r3, #5
 8007aba:	3301      	adds	r3, #1
 8007abc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	3307      	adds	r3, #7
 8007aca:	08db      	lsrs	r3, r3, #3
 8007acc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	fb02 f303 	mul.w	r3, r2, r3
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3714      	adds	r7, #20
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr

08007ae2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b082      	sub	sp, #8
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d101      	bne.n	8007af4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	e049      	b.n	8007b88 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d106      	bne.n	8007b0e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f7f9 ffa9 	bl	8001a60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2202      	movs	r2, #2
 8007b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	4619      	mov	r1, r3
 8007b20:	4610      	mov	r0, r2
 8007b22:	f000 fbe1 	bl	80082e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2201      	movs	r2, #1
 8007b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2201      	movs	r2, #1
 8007b62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2201      	movs	r2, #1
 8007b72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3708      	adds	r7, #8
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d101      	bne.n	8007ba2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e049      	b.n	8007c36 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d106      	bne.n	8007bbc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f841 	bl	8007c3e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2202      	movs	r2, #2
 8007bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	3304      	adds	r3, #4
 8007bcc:	4619      	mov	r1, r3
 8007bce:	4610      	mov	r0, r2
 8007bd0:	f000 fb8a 	bl	80082e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007c3e:	b480      	push	{r7}
 8007c40:	b083      	sub	sp, #12
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007c46:	bf00      	nop
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr

08007c52 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b082      	sub	sp, #8
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	f003 0302 	and.w	r3, r3, #2
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d122      	bne.n	8007cae <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	f003 0302 	and.w	r3, r3, #2
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d11b      	bne.n	8007cae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f06f 0202 	mvn.w	r2, #2
 8007c7e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	699b      	ldr	r3, [r3, #24]
 8007c8c:	f003 0303 	and.w	r3, r3, #3
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d003      	beq.n	8007c9c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 fb09 	bl	80082ac <HAL_TIM_IC_CaptureCallback>
 8007c9a:	e005      	b.n	8007ca8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 fafb 	bl	8008298 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 fb0c 	bl	80082c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	f003 0304 	and.w	r3, r3, #4
 8007cb8:	2b04      	cmp	r3, #4
 8007cba:	d122      	bne.n	8007d02 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	f003 0304 	and.w	r3, r3, #4
 8007cc6:	2b04      	cmp	r3, #4
 8007cc8:	d11b      	bne.n	8007d02 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f06f 0204 	mvn.w	r2, #4
 8007cd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2202      	movs	r2, #2
 8007cd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d003      	beq.n	8007cf0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 fadf 	bl	80082ac <HAL_TIM_IC_CaptureCallback>
 8007cee:	e005      	b.n	8007cfc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 fad1 	bl	8008298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fae2 	bl	80082c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	f003 0308 	and.w	r3, r3, #8
 8007d0c:	2b08      	cmp	r3, #8
 8007d0e:	d122      	bne.n	8007d56 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	f003 0308 	and.w	r3, r3, #8
 8007d1a:	2b08      	cmp	r3, #8
 8007d1c:	d11b      	bne.n	8007d56 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f06f 0208 	mvn.w	r2, #8
 8007d26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2204      	movs	r2, #4
 8007d2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	69db      	ldr	r3, [r3, #28]
 8007d34:	f003 0303 	and.w	r3, r3, #3
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d003      	beq.n	8007d44 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 fab5 	bl	80082ac <HAL_TIM_IC_CaptureCallback>
 8007d42:	e005      	b.n	8007d50 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 faa7 	bl	8008298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 fab8 	bl	80082c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	f003 0310 	and.w	r3, r3, #16
 8007d60:	2b10      	cmp	r3, #16
 8007d62:	d122      	bne.n	8007daa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	f003 0310 	and.w	r3, r3, #16
 8007d6e:	2b10      	cmp	r3, #16
 8007d70:	d11b      	bne.n	8007daa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f06f 0210 	mvn.w	r2, #16
 8007d7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2208      	movs	r2, #8
 8007d80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	69db      	ldr	r3, [r3, #28]
 8007d88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d003      	beq.n	8007d98 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 fa8b 	bl	80082ac <HAL_TIM_IC_CaptureCallback>
 8007d96:	e005      	b.n	8007da4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 fa7d 	bl	8008298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fa8e 	bl	80082c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	691b      	ldr	r3, [r3, #16]
 8007db0:	f003 0301 	and.w	r3, r3, #1
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d10e      	bne.n	8007dd6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d107      	bne.n	8007dd6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f06f 0201 	mvn.w	r2, #1
 8007dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7f9 fd94 	bl	80018fe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007de0:	2b80      	cmp	r3, #128	; 0x80
 8007de2:	d10e      	bne.n	8007e02 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dee:	2b80      	cmp	r3, #128	; 0x80
 8007df0:	d107      	bne.n	8007e02 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 ff89 	bl	8008d14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e10:	d10e      	bne.n	8007e30 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e1c:	2b80      	cmp	r3, #128	; 0x80
 8007e1e:	d107      	bne.n	8007e30 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 ff7c 	bl	8008d28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e3a:	2b40      	cmp	r3, #64	; 0x40
 8007e3c:	d10e      	bne.n	8007e5c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e48:	2b40      	cmp	r3, #64	; 0x40
 8007e4a:	d107      	bne.n	8007e5c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fa3c 	bl	80082d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	f003 0320 	and.w	r3, r3, #32
 8007e66:	2b20      	cmp	r3, #32
 8007e68:	d10e      	bne.n	8007e88 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	f003 0320 	and.w	r3, r3, #32
 8007e74:	2b20      	cmp	r3, #32
 8007e76:	d107      	bne.n	8007e88 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f06f 0220 	mvn.w	r2, #32
 8007e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 ff3c 	bl	8008d00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e88:	bf00      	nop
 8007e8a:	3708      	adds	r7, #8
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d101      	bne.n	8007eaa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007ea6:	2302      	movs	r3, #2
 8007ea8:	e0fd      	b.n	80080a6 <HAL_TIM_PWM_ConfigChannel+0x216>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2201      	movs	r2, #1
 8007eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2b14      	cmp	r3, #20
 8007eb6:	f200 80f0 	bhi.w	800809a <HAL_TIM_PWM_ConfigChannel+0x20a>
 8007eba:	a201      	add	r2, pc, #4	; (adr r2, 8007ec0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec0:	08007f15 	.word	0x08007f15
 8007ec4:	0800809b 	.word	0x0800809b
 8007ec8:	0800809b 	.word	0x0800809b
 8007ecc:	0800809b 	.word	0x0800809b
 8007ed0:	08007f55 	.word	0x08007f55
 8007ed4:	0800809b 	.word	0x0800809b
 8007ed8:	0800809b 	.word	0x0800809b
 8007edc:	0800809b 	.word	0x0800809b
 8007ee0:	08007f97 	.word	0x08007f97
 8007ee4:	0800809b 	.word	0x0800809b
 8007ee8:	0800809b 	.word	0x0800809b
 8007eec:	0800809b 	.word	0x0800809b
 8007ef0:	08007fd7 	.word	0x08007fd7
 8007ef4:	0800809b 	.word	0x0800809b
 8007ef8:	0800809b 	.word	0x0800809b
 8007efc:	0800809b 	.word	0x0800809b
 8007f00:	08008019 	.word	0x08008019
 8007f04:	0800809b 	.word	0x0800809b
 8007f08:	0800809b 	.word	0x0800809b
 8007f0c:	0800809b 	.word	0x0800809b
 8007f10:	08008059 	.word	0x08008059
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68b9      	ldr	r1, [r7, #8]
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f000 fa7e 	bl	800841c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	699a      	ldr	r2, [r3, #24]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f042 0208 	orr.w	r2, r2, #8
 8007f2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	699a      	ldr	r2, [r3, #24]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f022 0204 	bic.w	r2, r2, #4
 8007f3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	6999      	ldr	r1, [r3, #24]
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	691a      	ldr	r2, [r3, #16]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	430a      	orrs	r2, r1
 8007f50:	619a      	str	r2, [r3, #24]
      break;
 8007f52:	e0a3      	b.n	800809c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68b9      	ldr	r1, [r7, #8]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f000 faee 	bl	800853c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	699a      	ldr	r2, [r3, #24]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	699a      	ldr	r2, [r3, #24]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	6999      	ldr	r1, [r3, #24]
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	021a      	lsls	r2, r3, #8
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	430a      	orrs	r2, r1
 8007f92:	619a      	str	r2, [r3, #24]
      break;
 8007f94:	e082      	b.n	800809c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	68b9      	ldr	r1, [r7, #8]
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f000 fb57 	bl	8008650 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	69da      	ldr	r2, [r3, #28]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f042 0208 	orr.w	r2, r2, #8
 8007fb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	69da      	ldr	r2, [r3, #28]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f022 0204 	bic.w	r2, r2, #4
 8007fc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	69d9      	ldr	r1, [r3, #28]
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	691a      	ldr	r2, [r3, #16]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	430a      	orrs	r2, r1
 8007fd2:	61da      	str	r2, [r3, #28]
      break;
 8007fd4:	e062      	b.n	800809c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68b9      	ldr	r1, [r7, #8]
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f000 fbbd 	bl	800875c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	69da      	ldr	r2, [r3, #28]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ff0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	69da      	ldr	r2, [r3, #28]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008000:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	69d9      	ldr	r1, [r3, #28]
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	021a      	lsls	r2, r3, #8
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	430a      	orrs	r2, r1
 8008014:	61da      	str	r2, [r3, #28]
      break;
 8008016:	e041      	b.n	800809c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	68b9      	ldr	r1, [r7, #8]
 800801e:	4618      	mov	r0, r3
 8008020:	f000 fc04 	bl	800882c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f042 0208 	orr.w	r2, r2, #8
 8008032:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f022 0204 	bic.w	r2, r2, #4
 8008042:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	691a      	ldr	r2, [r3, #16]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	430a      	orrs	r2, r1
 8008054:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008056:	e021      	b.n	800809c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	68b9      	ldr	r1, [r7, #8]
 800805e:	4618      	mov	r0, r3
 8008060:	f000 fc46 	bl	80088f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008072:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008082:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	021a      	lsls	r2, r3, #8
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	430a      	orrs	r2, r1
 8008096:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008098:	e000      	b.n	800809c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800809a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2200      	movs	r2, #0
 80080a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop

080080b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d101      	bne.n	80080c8 <HAL_TIM_ConfigClockSource+0x18>
 80080c4:	2302      	movs	r3, #2
 80080c6:	e0db      	b.n	8008280 <HAL_TIM_ConfigClockSource+0x1d0>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2202      	movs	r2, #2
 80080d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	4b69      	ldr	r3, [pc, #420]	; (8008288 <HAL_TIM_ConfigClockSource+0x1d8>)
 80080e4:	4013      	ands	r3, r2
 80080e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a63      	ldr	r2, [pc, #396]	; (800828c <HAL_TIM_ConfigClockSource+0x1dc>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	f000 80a9 	beq.w	8008256 <HAL_TIM_ConfigClockSource+0x1a6>
 8008104:	4a61      	ldr	r2, [pc, #388]	; (800828c <HAL_TIM_ConfigClockSource+0x1dc>)
 8008106:	4293      	cmp	r3, r2
 8008108:	f200 80ae 	bhi.w	8008268 <HAL_TIM_ConfigClockSource+0x1b8>
 800810c:	4a60      	ldr	r2, [pc, #384]	; (8008290 <HAL_TIM_ConfigClockSource+0x1e0>)
 800810e:	4293      	cmp	r3, r2
 8008110:	f000 80a1 	beq.w	8008256 <HAL_TIM_ConfigClockSource+0x1a6>
 8008114:	4a5e      	ldr	r2, [pc, #376]	; (8008290 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008116:	4293      	cmp	r3, r2
 8008118:	f200 80a6 	bhi.w	8008268 <HAL_TIM_ConfigClockSource+0x1b8>
 800811c:	4a5d      	ldr	r2, [pc, #372]	; (8008294 <HAL_TIM_ConfigClockSource+0x1e4>)
 800811e:	4293      	cmp	r3, r2
 8008120:	f000 8099 	beq.w	8008256 <HAL_TIM_ConfigClockSource+0x1a6>
 8008124:	4a5b      	ldr	r2, [pc, #364]	; (8008294 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008126:	4293      	cmp	r3, r2
 8008128:	f200 809e 	bhi.w	8008268 <HAL_TIM_ConfigClockSource+0x1b8>
 800812c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008130:	f000 8091 	beq.w	8008256 <HAL_TIM_ConfigClockSource+0x1a6>
 8008134:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008138:	f200 8096 	bhi.w	8008268 <HAL_TIM_ConfigClockSource+0x1b8>
 800813c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008140:	f000 8089 	beq.w	8008256 <HAL_TIM_ConfigClockSource+0x1a6>
 8008144:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008148:	f200 808e 	bhi.w	8008268 <HAL_TIM_ConfigClockSource+0x1b8>
 800814c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008150:	d03e      	beq.n	80081d0 <HAL_TIM_ConfigClockSource+0x120>
 8008152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008156:	f200 8087 	bhi.w	8008268 <HAL_TIM_ConfigClockSource+0x1b8>
 800815a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800815e:	f000 8085 	beq.w	800826c <HAL_TIM_ConfigClockSource+0x1bc>
 8008162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008166:	d87f      	bhi.n	8008268 <HAL_TIM_ConfigClockSource+0x1b8>
 8008168:	2b70      	cmp	r3, #112	; 0x70
 800816a:	d01a      	beq.n	80081a2 <HAL_TIM_ConfigClockSource+0xf2>
 800816c:	2b70      	cmp	r3, #112	; 0x70
 800816e:	d87b      	bhi.n	8008268 <HAL_TIM_ConfigClockSource+0x1b8>
 8008170:	2b60      	cmp	r3, #96	; 0x60
 8008172:	d050      	beq.n	8008216 <HAL_TIM_ConfigClockSource+0x166>
 8008174:	2b60      	cmp	r3, #96	; 0x60
 8008176:	d877      	bhi.n	8008268 <HAL_TIM_ConfigClockSource+0x1b8>
 8008178:	2b50      	cmp	r3, #80	; 0x50
 800817a:	d03c      	beq.n	80081f6 <HAL_TIM_ConfigClockSource+0x146>
 800817c:	2b50      	cmp	r3, #80	; 0x50
 800817e:	d873      	bhi.n	8008268 <HAL_TIM_ConfigClockSource+0x1b8>
 8008180:	2b40      	cmp	r3, #64	; 0x40
 8008182:	d058      	beq.n	8008236 <HAL_TIM_ConfigClockSource+0x186>
 8008184:	2b40      	cmp	r3, #64	; 0x40
 8008186:	d86f      	bhi.n	8008268 <HAL_TIM_ConfigClockSource+0x1b8>
 8008188:	2b30      	cmp	r3, #48	; 0x30
 800818a:	d064      	beq.n	8008256 <HAL_TIM_ConfigClockSource+0x1a6>
 800818c:	2b30      	cmp	r3, #48	; 0x30
 800818e:	d86b      	bhi.n	8008268 <HAL_TIM_ConfigClockSource+0x1b8>
 8008190:	2b20      	cmp	r3, #32
 8008192:	d060      	beq.n	8008256 <HAL_TIM_ConfigClockSource+0x1a6>
 8008194:	2b20      	cmp	r3, #32
 8008196:	d867      	bhi.n	8008268 <HAL_TIM_ConfigClockSource+0x1b8>
 8008198:	2b00      	cmp	r3, #0
 800819a:	d05c      	beq.n	8008256 <HAL_TIM_ConfigClockSource+0x1a6>
 800819c:	2b10      	cmp	r3, #16
 800819e:	d05a      	beq.n	8008256 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80081a0:	e062      	b.n	8008268 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6818      	ldr	r0, [r3, #0]
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	6899      	ldr	r1, [r3, #8]
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	685a      	ldr	r2, [r3, #4]
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	f000 fc7f 	bl	8008ab4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80081c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	609a      	str	r2, [r3, #8]
      break;
 80081ce:	e04e      	b.n	800826e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6818      	ldr	r0, [r3, #0]
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	6899      	ldr	r1, [r3, #8]
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	685a      	ldr	r2, [r3, #4]
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	f000 fc68 	bl	8008ab4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	689a      	ldr	r2, [r3, #8]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80081f2:	609a      	str	r2, [r3, #8]
      break;
 80081f4:	e03b      	b.n	800826e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6818      	ldr	r0, [r3, #0]
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	6859      	ldr	r1, [r3, #4]
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	461a      	mov	r2, r3
 8008204:	f000 fbd8 	bl	80089b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2150      	movs	r1, #80	; 0x50
 800820e:	4618      	mov	r0, r3
 8008210:	f000 fc32 	bl	8008a78 <TIM_ITRx_SetConfig>
      break;
 8008214:	e02b      	b.n	800826e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6818      	ldr	r0, [r3, #0]
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	6859      	ldr	r1, [r3, #4]
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	461a      	mov	r2, r3
 8008224:	f000 fbf7 	bl	8008a16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2160      	movs	r1, #96	; 0x60
 800822e:	4618      	mov	r0, r3
 8008230:	f000 fc22 	bl	8008a78 <TIM_ITRx_SetConfig>
      break;
 8008234:	e01b      	b.n	800826e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6818      	ldr	r0, [r3, #0]
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	6859      	ldr	r1, [r3, #4]
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	461a      	mov	r2, r3
 8008244:	f000 fbb8 	bl	80089b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2140      	movs	r1, #64	; 0x40
 800824e:	4618      	mov	r0, r3
 8008250:	f000 fc12 	bl	8008a78 <TIM_ITRx_SetConfig>
      break;
 8008254:	e00b      	b.n	800826e <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4619      	mov	r1, r3
 8008260:	4610      	mov	r0, r2
 8008262:	f000 fc09 	bl	8008a78 <TIM_ITRx_SetConfig>
        break;
 8008266:	e002      	b.n	800826e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8008268:	bf00      	nop
 800826a:	e000      	b.n	800826e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800826c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	ffceff88 	.word	0xffceff88
 800828c:	00100040 	.word	0x00100040
 8008290:	00100030 	.word	0x00100030
 8008294:	00100020 	.word	0x00100020

08008298 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80082a0:	bf00      	nop
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80082b4:	bf00      	nop
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082c8:	bf00      	nop
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80082dc:	bf00      	nop
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a40      	ldr	r2, [pc, #256]	; (80083fc <TIM_Base_SetConfig+0x114>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d013      	beq.n	8008328 <TIM_Base_SetConfig+0x40>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008306:	d00f      	beq.n	8008328 <TIM_Base_SetConfig+0x40>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a3d      	ldr	r2, [pc, #244]	; (8008400 <TIM_Base_SetConfig+0x118>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d00b      	beq.n	8008328 <TIM_Base_SetConfig+0x40>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4a3c      	ldr	r2, [pc, #240]	; (8008404 <TIM_Base_SetConfig+0x11c>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d007      	beq.n	8008328 <TIM_Base_SetConfig+0x40>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	4a3b      	ldr	r2, [pc, #236]	; (8008408 <TIM_Base_SetConfig+0x120>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d003      	beq.n	8008328 <TIM_Base_SetConfig+0x40>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	4a3a      	ldr	r2, [pc, #232]	; (800840c <TIM_Base_SetConfig+0x124>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d108      	bne.n	800833a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800832e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	4313      	orrs	r3, r2
 8008338:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a2f      	ldr	r2, [pc, #188]	; (80083fc <TIM_Base_SetConfig+0x114>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d01f      	beq.n	8008382 <TIM_Base_SetConfig+0x9a>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008348:	d01b      	beq.n	8008382 <TIM_Base_SetConfig+0x9a>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a2c      	ldr	r2, [pc, #176]	; (8008400 <TIM_Base_SetConfig+0x118>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d017      	beq.n	8008382 <TIM_Base_SetConfig+0x9a>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a2b      	ldr	r2, [pc, #172]	; (8008404 <TIM_Base_SetConfig+0x11c>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d013      	beq.n	8008382 <TIM_Base_SetConfig+0x9a>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a2a      	ldr	r2, [pc, #168]	; (8008408 <TIM_Base_SetConfig+0x120>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d00f      	beq.n	8008382 <TIM_Base_SetConfig+0x9a>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4a29      	ldr	r2, [pc, #164]	; (800840c <TIM_Base_SetConfig+0x124>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d00b      	beq.n	8008382 <TIM_Base_SetConfig+0x9a>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4a28      	ldr	r2, [pc, #160]	; (8008410 <TIM_Base_SetConfig+0x128>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d007      	beq.n	8008382 <TIM_Base_SetConfig+0x9a>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4a27      	ldr	r2, [pc, #156]	; (8008414 <TIM_Base_SetConfig+0x12c>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d003      	beq.n	8008382 <TIM_Base_SetConfig+0x9a>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4a26      	ldr	r2, [pc, #152]	; (8008418 <TIM_Base_SetConfig+0x130>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d108      	bne.n	8008394 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008388:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	68fa      	ldr	r2, [r7, #12]
 8008390:	4313      	orrs	r3, r2
 8008392:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	695b      	ldr	r3, [r3, #20]
 800839e:	4313      	orrs	r3, r2
 80083a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	68fa      	ldr	r2, [r7, #12]
 80083a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	689a      	ldr	r2, [r3, #8]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a10      	ldr	r2, [pc, #64]	; (80083fc <TIM_Base_SetConfig+0x114>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d00f      	beq.n	80083e0 <TIM_Base_SetConfig+0xf8>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a12      	ldr	r2, [pc, #72]	; (800840c <TIM_Base_SetConfig+0x124>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d00b      	beq.n	80083e0 <TIM_Base_SetConfig+0xf8>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a11      	ldr	r2, [pc, #68]	; (8008410 <TIM_Base_SetConfig+0x128>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d007      	beq.n	80083e0 <TIM_Base_SetConfig+0xf8>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a10      	ldr	r2, [pc, #64]	; (8008414 <TIM_Base_SetConfig+0x12c>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d003      	beq.n	80083e0 <TIM_Base_SetConfig+0xf8>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a0f      	ldr	r2, [pc, #60]	; (8008418 <TIM_Base_SetConfig+0x130>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d103      	bne.n	80083e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	691a      	ldr	r2, [r3, #16]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	615a      	str	r2, [r3, #20]
}
 80083ee:	bf00      	nop
 80083f0:	3714      	adds	r7, #20
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	40010000 	.word	0x40010000
 8008400:	40000400 	.word	0x40000400
 8008404:	40000800 	.word	0x40000800
 8008408:	40000c00 	.word	0x40000c00
 800840c:	40010400 	.word	0x40010400
 8008410:	40014000 	.word	0x40014000
 8008414:	40014400 	.word	0x40014400
 8008418:	40014800 	.word	0x40014800

0800841c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800841c:	b480      	push	{r7}
 800841e:	b087      	sub	sp, #28
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a1b      	ldr	r3, [r3, #32]
 800842a:	f023 0201 	bic.w	r2, r3, #1
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	4b37      	ldr	r3, [pc, #220]	; (8008524 <TIM_OC1_SetConfig+0x108>)
 8008448:	4013      	ands	r3, r2
 800844a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f023 0303 	bic.w	r3, r3, #3
 8008452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	4313      	orrs	r3, r2
 800845c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	f023 0302 	bic.w	r3, r3, #2
 8008464:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	697a      	ldr	r2, [r7, #20]
 800846c:	4313      	orrs	r3, r2
 800846e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a2d      	ldr	r2, [pc, #180]	; (8008528 <TIM_OC1_SetConfig+0x10c>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d00f      	beq.n	8008498 <TIM_OC1_SetConfig+0x7c>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a2c      	ldr	r2, [pc, #176]	; (800852c <TIM_OC1_SetConfig+0x110>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d00b      	beq.n	8008498 <TIM_OC1_SetConfig+0x7c>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a2b      	ldr	r2, [pc, #172]	; (8008530 <TIM_OC1_SetConfig+0x114>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d007      	beq.n	8008498 <TIM_OC1_SetConfig+0x7c>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a2a      	ldr	r2, [pc, #168]	; (8008534 <TIM_OC1_SetConfig+0x118>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d003      	beq.n	8008498 <TIM_OC1_SetConfig+0x7c>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a29      	ldr	r2, [pc, #164]	; (8008538 <TIM_OC1_SetConfig+0x11c>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d10c      	bne.n	80084b2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	f023 0308 	bic.w	r3, r3, #8
 800849e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	697a      	ldr	r2, [r7, #20]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	f023 0304 	bic.w	r3, r3, #4
 80084b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4a1c      	ldr	r2, [pc, #112]	; (8008528 <TIM_OC1_SetConfig+0x10c>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d00f      	beq.n	80084da <TIM_OC1_SetConfig+0xbe>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a1b      	ldr	r2, [pc, #108]	; (800852c <TIM_OC1_SetConfig+0x110>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d00b      	beq.n	80084da <TIM_OC1_SetConfig+0xbe>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a1a      	ldr	r2, [pc, #104]	; (8008530 <TIM_OC1_SetConfig+0x114>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d007      	beq.n	80084da <TIM_OC1_SetConfig+0xbe>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4a19      	ldr	r2, [pc, #100]	; (8008534 <TIM_OC1_SetConfig+0x118>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d003      	beq.n	80084da <TIM_OC1_SetConfig+0xbe>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a18      	ldr	r2, [pc, #96]	; (8008538 <TIM_OC1_SetConfig+0x11c>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d111      	bne.n	80084fe <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80084e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	695b      	ldr	r3, [r3, #20]
 80084ee:	693a      	ldr	r2, [r7, #16]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	699b      	ldr	r3, [r3, #24]
 80084f8:	693a      	ldr	r2, [r7, #16]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	693a      	ldr	r2, [r7, #16]
 8008502:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	685a      	ldr	r2, [r3, #4]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	697a      	ldr	r2, [r7, #20]
 8008516:	621a      	str	r2, [r3, #32]
}
 8008518:	bf00      	nop
 800851a:	371c      	adds	r7, #28
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr
 8008524:	fffeff8f 	.word	0xfffeff8f
 8008528:	40010000 	.word	0x40010000
 800852c:	40010400 	.word	0x40010400
 8008530:	40014000 	.word	0x40014000
 8008534:	40014400 	.word	0x40014400
 8008538:	40014800 	.word	0x40014800

0800853c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800853c:	b480      	push	{r7}
 800853e:	b087      	sub	sp, #28
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a1b      	ldr	r3, [r3, #32]
 800854a:	f023 0210 	bic.w	r2, r3, #16
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a1b      	ldr	r3, [r3, #32]
 8008556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	699b      	ldr	r3, [r3, #24]
 8008562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	4b34      	ldr	r3, [pc, #208]	; (8008638 <TIM_OC2_SetConfig+0xfc>)
 8008568:	4013      	ands	r3, r2
 800856a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	021b      	lsls	r3, r3, #8
 800857a:	68fa      	ldr	r2, [r7, #12]
 800857c:	4313      	orrs	r3, r2
 800857e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	f023 0320 	bic.w	r3, r3, #32
 8008586:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	011b      	lsls	r3, r3, #4
 800858e:	697a      	ldr	r2, [r7, #20]
 8008590:	4313      	orrs	r3, r2
 8008592:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4a29      	ldr	r2, [pc, #164]	; (800863c <TIM_OC2_SetConfig+0x100>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d003      	beq.n	80085a4 <TIM_OC2_SetConfig+0x68>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4a28      	ldr	r2, [pc, #160]	; (8008640 <TIM_OC2_SetConfig+0x104>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d10d      	bne.n	80085c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	011b      	lsls	r3, r3, #4
 80085b2:	697a      	ldr	r2, [r7, #20]
 80085b4:	4313      	orrs	r3, r2
 80085b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4a1e      	ldr	r2, [pc, #120]	; (800863c <TIM_OC2_SetConfig+0x100>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d00f      	beq.n	80085e8 <TIM_OC2_SetConfig+0xac>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a1d      	ldr	r2, [pc, #116]	; (8008640 <TIM_OC2_SetConfig+0x104>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d00b      	beq.n	80085e8 <TIM_OC2_SetConfig+0xac>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4a1c      	ldr	r2, [pc, #112]	; (8008644 <TIM_OC2_SetConfig+0x108>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d007      	beq.n	80085e8 <TIM_OC2_SetConfig+0xac>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a1b      	ldr	r2, [pc, #108]	; (8008648 <TIM_OC2_SetConfig+0x10c>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d003      	beq.n	80085e8 <TIM_OC2_SetConfig+0xac>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a1a      	ldr	r2, [pc, #104]	; (800864c <TIM_OC2_SetConfig+0x110>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d113      	bne.n	8008610 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80085ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80085f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	695b      	ldr	r3, [r3, #20]
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	693a      	ldr	r2, [r7, #16]
 8008600:	4313      	orrs	r3, r2
 8008602:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	699b      	ldr	r3, [r3, #24]
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	693a      	ldr	r2, [r7, #16]
 800860c:	4313      	orrs	r3, r2
 800860e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	693a      	ldr	r2, [r7, #16]
 8008614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	685a      	ldr	r2, [r3, #4]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	697a      	ldr	r2, [r7, #20]
 8008628:	621a      	str	r2, [r3, #32]
}
 800862a:	bf00      	nop
 800862c:	371c      	adds	r7, #28
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	feff8fff 	.word	0xfeff8fff
 800863c:	40010000 	.word	0x40010000
 8008640:	40010400 	.word	0x40010400
 8008644:	40014000 	.word	0x40014000
 8008648:	40014400 	.word	0x40014400
 800864c:	40014800 	.word	0x40014800

08008650 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008650:	b480      	push	{r7}
 8008652:	b087      	sub	sp, #28
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a1b      	ldr	r3, [r3, #32]
 800865e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a1b      	ldr	r3, [r3, #32]
 800866a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	69db      	ldr	r3, [r3, #28]
 8008676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800867e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f023 0303 	bic.w	r3, r3, #3
 8008686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	4313      	orrs	r3, r2
 8008690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008698:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	021b      	lsls	r3, r3, #8
 80086a0:	697a      	ldr	r2, [r7, #20]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4a27      	ldr	r2, [pc, #156]	; (8008748 <TIM_OC3_SetConfig+0xf8>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d003      	beq.n	80086b6 <TIM_OC3_SetConfig+0x66>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4a26      	ldr	r2, [pc, #152]	; (800874c <TIM_OC3_SetConfig+0xfc>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d10d      	bne.n	80086d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	021b      	lsls	r3, r3, #8
 80086c4:	697a      	ldr	r2, [r7, #20]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4a1c      	ldr	r2, [pc, #112]	; (8008748 <TIM_OC3_SetConfig+0xf8>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d00f      	beq.n	80086fa <TIM_OC3_SetConfig+0xaa>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a1b      	ldr	r2, [pc, #108]	; (800874c <TIM_OC3_SetConfig+0xfc>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d00b      	beq.n	80086fa <TIM_OC3_SetConfig+0xaa>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a1a      	ldr	r2, [pc, #104]	; (8008750 <TIM_OC3_SetConfig+0x100>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d007      	beq.n	80086fa <TIM_OC3_SetConfig+0xaa>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4a19      	ldr	r2, [pc, #100]	; (8008754 <TIM_OC3_SetConfig+0x104>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d003      	beq.n	80086fa <TIM_OC3_SetConfig+0xaa>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a18      	ldr	r2, [pc, #96]	; (8008758 <TIM_OC3_SetConfig+0x108>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d113      	bne.n	8008722 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008700:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008708:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	695b      	ldr	r3, [r3, #20]
 800870e:	011b      	lsls	r3, r3, #4
 8008710:	693a      	ldr	r2, [r7, #16]
 8008712:	4313      	orrs	r3, r2
 8008714:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	699b      	ldr	r3, [r3, #24]
 800871a:	011b      	lsls	r3, r3, #4
 800871c:	693a      	ldr	r2, [r7, #16]
 800871e:	4313      	orrs	r3, r2
 8008720:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	693a      	ldr	r2, [r7, #16]
 8008726:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	685a      	ldr	r2, [r3, #4]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	697a      	ldr	r2, [r7, #20]
 800873a:	621a      	str	r2, [r3, #32]
}
 800873c:	bf00      	nop
 800873e:	371c      	adds	r7, #28
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr
 8008748:	40010000 	.word	0x40010000
 800874c:	40010400 	.word	0x40010400
 8008750:	40014000 	.word	0x40014000
 8008754:	40014400 	.word	0x40014400
 8008758:	40014800 	.word	0x40014800

0800875c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800875c:	b480      	push	{r7}
 800875e:	b087      	sub	sp, #28
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a1b      	ldr	r3, [r3, #32]
 800876a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6a1b      	ldr	r3, [r3, #32]
 8008776:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	69db      	ldr	r3, [r3, #28]
 8008782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800878a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008792:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	021b      	lsls	r3, r3, #8
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	4313      	orrs	r3, r2
 800879e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	031b      	lsls	r3, r3, #12
 80087ae:	693a      	ldr	r2, [r7, #16]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a18      	ldr	r2, [pc, #96]	; (8008818 <TIM_OC4_SetConfig+0xbc>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d00f      	beq.n	80087dc <TIM_OC4_SetConfig+0x80>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a17      	ldr	r2, [pc, #92]	; (800881c <TIM_OC4_SetConfig+0xc0>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d00b      	beq.n	80087dc <TIM_OC4_SetConfig+0x80>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4a16      	ldr	r2, [pc, #88]	; (8008820 <TIM_OC4_SetConfig+0xc4>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d007      	beq.n	80087dc <TIM_OC4_SetConfig+0x80>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	4a15      	ldr	r2, [pc, #84]	; (8008824 <TIM_OC4_SetConfig+0xc8>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d003      	beq.n	80087dc <TIM_OC4_SetConfig+0x80>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	4a14      	ldr	r2, [pc, #80]	; (8008828 <TIM_OC4_SetConfig+0xcc>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d109      	bne.n	80087f0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	695b      	ldr	r3, [r3, #20]
 80087e8:	019b      	lsls	r3, r3, #6
 80087ea:	697a      	ldr	r2, [r7, #20]
 80087ec:	4313      	orrs	r3, r2
 80087ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	697a      	ldr	r2, [r7, #20]
 80087f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	68fa      	ldr	r2, [r7, #12]
 80087fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	685a      	ldr	r2, [r3, #4]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	693a      	ldr	r2, [r7, #16]
 8008808:	621a      	str	r2, [r3, #32]
}
 800880a:	bf00      	nop
 800880c:	371c      	adds	r7, #28
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	40010000 	.word	0x40010000
 800881c:	40010400 	.word	0x40010400
 8008820:	40014000 	.word	0x40014000
 8008824:	40014400 	.word	0x40014400
 8008828:	40014800 	.word	0x40014800

0800882c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800882c:	b480      	push	{r7}
 800882e:	b087      	sub	sp, #28
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6a1b      	ldr	r3, [r3, #32]
 800883a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a1b      	ldr	r3, [r3, #32]
 8008846:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800885a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	4313      	orrs	r3, r2
 8008864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800886c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	041b      	lsls	r3, r3, #16
 8008874:	693a      	ldr	r2, [r7, #16]
 8008876:	4313      	orrs	r3, r2
 8008878:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a17      	ldr	r2, [pc, #92]	; (80088dc <TIM_OC5_SetConfig+0xb0>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d00f      	beq.n	80088a2 <TIM_OC5_SetConfig+0x76>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a16      	ldr	r2, [pc, #88]	; (80088e0 <TIM_OC5_SetConfig+0xb4>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d00b      	beq.n	80088a2 <TIM_OC5_SetConfig+0x76>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a15      	ldr	r2, [pc, #84]	; (80088e4 <TIM_OC5_SetConfig+0xb8>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d007      	beq.n	80088a2 <TIM_OC5_SetConfig+0x76>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a14      	ldr	r2, [pc, #80]	; (80088e8 <TIM_OC5_SetConfig+0xbc>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d003      	beq.n	80088a2 <TIM_OC5_SetConfig+0x76>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a13      	ldr	r2, [pc, #76]	; (80088ec <TIM_OC5_SetConfig+0xc0>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d109      	bne.n	80088b6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	695b      	ldr	r3, [r3, #20]
 80088ae:	021b      	lsls	r3, r3, #8
 80088b0:	697a      	ldr	r2, [r7, #20]
 80088b2:	4313      	orrs	r3, r2
 80088b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	697a      	ldr	r2, [r7, #20]
 80088ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	68fa      	ldr	r2, [r7, #12]
 80088c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	685a      	ldr	r2, [r3, #4]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	693a      	ldr	r2, [r7, #16]
 80088ce:	621a      	str	r2, [r3, #32]
}
 80088d0:	bf00      	nop
 80088d2:	371c      	adds	r7, #28
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr
 80088dc:	40010000 	.word	0x40010000
 80088e0:	40010400 	.word	0x40010400
 80088e4:	40014000 	.word	0x40014000
 80088e8:	40014400 	.word	0x40014400
 80088ec:	40014800 	.word	0x40014800

080088f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b087      	sub	sp, #28
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a1b      	ldr	r3, [r3, #32]
 80088fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a1b      	ldr	r3, [r3, #32]
 800890a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800891e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	021b      	lsls	r3, r3, #8
 8008926:	68fa      	ldr	r2, [r7, #12]
 8008928:	4313      	orrs	r3, r2
 800892a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008932:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	051b      	lsls	r3, r3, #20
 800893a:	693a      	ldr	r2, [r7, #16]
 800893c:	4313      	orrs	r3, r2
 800893e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a18      	ldr	r2, [pc, #96]	; (80089a4 <TIM_OC6_SetConfig+0xb4>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d00f      	beq.n	8008968 <TIM_OC6_SetConfig+0x78>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a17      	ldr	r2, [pc, #92]	; (80089a8 <TIM_OC6_SetConfig+0xb8>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d00b      	beq.n	8008968 <TIM_OC6_SetConfig+0x78>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a16      	ldr	r2, [pc, #88]	; (80089ac <TIM_OC6_SetConfig+0xbc>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d007      	beq.n	8008968 <TIM_OC6_SetConfig+0x78>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a15      	ldr	r2, [pc, #84]	; (80089b0 <TIM_OC6_SetConfig+0xc0>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d003      	beq.n	8008968 <TIM_OC6_SetConfig+0x78>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a14      	ldr	r2, [pc, #80]	; (80089b4 <TIM_OC6_SetConfig+0xc4>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d109      	bne.n	800897c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800896e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	695b      	ldr	r3, [r3, #20]
 8008974:	029b      	lsls	r3, r3, #10
 8008976:	697a      	ldr	r2, [r7, #20]
 8008978:	4313      	orrs	r3, r2
 800897a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	697a      	ldr	r2, [r7, #20]
 8008980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	68fa      	ldr	r2, [r7, #12]
 8008986:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	685a      	ldr	r2, [r3, #4]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	693a      	ldr	r2, [r7, #16]
 8008994:	621a      	str	r2, [r3, #32]
}
 8008996:	bf00      	nop
 8008998:	371c      	adds	r7, #28
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	40010000 	.word	0x40010000
 80089a8:	40010400 	.word	0x40010400
 80089ac:	40014000 	.word	0x40014000
 80089b0:	40014400 	.word	0x40014400
 80089b4:	40014800 	.word	0x40014800

080089b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b087      	sub	sp, #28
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6a1b      	ldr	r3, [r3, #32]
 80089c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	6a1b      	ldr	r3, [r3, #32]
 80089ce:	f023 0201 	bic.w	r2, r3, #1
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	699b      	ldr	r3, [r3, #24]
 80089da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80089e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	011b      	lsls	r3, r3, #4
 80089e8:	693a      	ldr	r2, [r7, #16]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	f023 030a 	bic.w	r3, r3, #10
 80089f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80089f6:	697a      	ldr	r2, [r7, #20]
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	693a      	ldr	r2, [r7, #16]
 8008a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	697a      	ldr	r2, [r7, #20]
 8008a08:	621a      	str	r2, [r3, #32]
}
 8008a0a:	bf00      	nop
 8008a0c:	371c      	adds	r7, #28
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr

08008a16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a16:	b480      	push	{r7}
 8008a18:	b087      	sub	sp, #28
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	60f8      	str	r0, [r7, #12]
 8008a1e:	60b9      	str	r1, [r7, #8]
 8008a20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	6a1b      	ldr	r3, [r3, #32]
 8008a26:	f023 0210 	bic.w	r2, r3, #16
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	699b      	ldr	r3, [r3, #24]
 8008a32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6a1b      	ldr	r3, [r3, #32]
 8008a38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	031b      	lsls	r3, r3, #12
 8008a46:	697a      	ldr	r2, [r7, #20]
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008a52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	011b      	lsls	r3, r3, #4
 8008a58:	693a      	ldr	r2, [r7, #16]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	697a      	ldr	r2, [r7, #20]
 8008a62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	693a      	ldr	r2, [r7, #16]
 8008a68:	621a      	str	r2, [r3, #32]
}
 8008a6a:	bf00      	nop
 8008a6c:	371c      	adds	r7, #28
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr
	...

08008a78 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	4b09      	ldr	r3, [pc, #36]	; (8008ab0 <TIM_ITRx_SetConfig+0x38>)
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a90:	683a      	ldr	r2, [r7, #0]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	4313      	orrs	r3, r2
 8008a96:	f043 0307 	orr.w	r3, r3, #7
 8008a9a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	609a      	str	r2, [r3, #8]
}
 8008aa2:	bf00      	nop
 8008aa4:	3714      	adds	r7, #20
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	ffcfff8f 	.word	0xffcfff8f

08008ab4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b087      	sub	sp, #28
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	607a      	str	r2, [r7, #4]
 8008ac0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ace:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	021a      	lsls	r2, r3, #8
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	431a      	orrs	r2, r3
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	4313      	orrs	r3, r2
 8008adc:	697a      	ldr	r2, [r7, #20]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	697a      	ldr	r2, [r7, #20]
 8008ae6:	609a      	str	r2, [r3, #8]
}
 8008ae8:	bf00      	nop
 8008aea:	371c      	adds	r7, #28
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d101      	bne.n	8008b0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b08:	2302      	movs	r3, #2
 8008b0a:	e068      	b.n	8008bde <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2202      	movs	r2, #2
 8008b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a2e      	ldr	r2, [pc, #184]	; (8008bec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d004      	beq.n	8008b40 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a2d      	ldr	r2, [pc, #180]	; (8008bf0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d108      	bne.n	8008b52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008b46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	68fa      	ldr	r2, [r7, #12]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	4313      	orrs	r3, r2
 8008b62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a1e      	ldr	r2, [pc, #120]	; (8008bec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d01d      	beq.n	8008bb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b7e:	d018      	beq.n	8008bb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a1b      	ldr	r2, [pc, #108]	; (8008bf4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d013      	beq.n	8008bb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a1a      	ldr	r2, [pc, #104]	; (8008bf8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d00e      	beq.n	8008bb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a18      	ldr	r2, [pc, #96]	; (8008bfc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d009      	beq.n	8008bb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a13      	ldr	r2, [pc, #76]	; (8008bf0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d004      	beq.n	8008bb2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a14      	ldr	r2, [pc, #80]	; (8008c00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d10c      	bne.n	8008bcc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	68ba      	ldr	r2, [r7, #8]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	68ba      	ldr	r2, [r7, #8]
 8008bca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3714      	adds	r7, #20
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	40010000 	.word	0x40010000
 8008bf0:	40010400 	.word	0x40010400
 8008bf4:	40000400 	.word	0x40000400
 8008bf8:	40000800 	.word	0x40000800
 8008bfc:	40000c00 	.word	0x40000c00
 8008c00:	40001800 	.word	0x40001800

08008c04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b085      	sub	sp, #20
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d101      	bne.n	8008c20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008c1c:	2302      	movs	r3, #2
 8008c1e:	e065      	b.n	8008cec <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	68db      	ldr	r3, [r3, #12]
 8008c32:	4313      	orrs	r3, r2
 8008c34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	4313      	orrs	r3, r2
 8008c42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	695b      	ldr	r3, [r3, #20]
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c86:	4313      	orrs	r3, r2
 8008c88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	699b      	ldr	r3, [r3, #24]
 8008c94:	041b      	lsls	r3, r3, #16
 8008c96:	4313      	orrs	r3, r2
 8008c98:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a16      	ldr	r2, [pc, #88]	; (8008cf8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d004      	beq.n	8008cae <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a14      	ldr	r2, [pc, #80]	; (8008cfc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d115      	bne.n	8008cda <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb8:	051b      	lsls	r3, r3, #20
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	69db      	ldr	r3, [r3, #28]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	6a1b      	ldr	r3, [r3, #32]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	68fa      	ldr	r2, [r7, #12]
 8008ce0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3714      	adds	r7, #20
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr
 8008cf8:	40010000 	.word	0x40010000
 8008cfc:	40010400 	.word	0x40010400

08008d00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d08:	bf00      	nop
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d1c:	bf00      	nop
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008d30:	bf00      	nop
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d101      	bne.n	8008d4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e042      	b.n	8008dd4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d106      	bne.n	8008d66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f7f9 f819 	bl	8001d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2224      	movs	r2, #36	; 0x24
 8008d6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f022 0201 	bic.w	r2, r2, #1
 8008d7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 fbd8 	bl	8009534 <UART_SetConfig>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d101      	bne.n	8008d8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e022      	b.n	8008dd4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d002      	beq.n	8008d9c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f001 f92c 	bl	8009ff4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	685a      	ldr	r2, [r3, #4]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008daa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	689a      	ldr	r2, [r3, #8]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008dba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f042 0201 	orr.w	r2, r2, #1
 8008dca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f001 f9b3 	bl	800a138 <UART_CheckIdleState>
 8008dd2:	4603      	mov	r3, r0
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3708      	adds	r7, #8
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b08a      	sub	sp, #40	; 0x28
 8008de0:	af02      	add	r7, sp, #8
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	60b9      	str	r1, [r7, #8]
 8008de6:	603b      	str	r3, [r7, #0]
 8008de8:	4613      	mov	r3, r2
 8008dea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008df2:	2b20      	cmp	r3, #32
 8008df4:	f040 8083 	bne.w	8008efe <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d002      	beq.n	8008e04 <HAL_UART_Transmit+0x28>
 8008dfe:	88fb      	ldrh	r3, [r7, #6]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d101      	bne.n	8008e08 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008e04:	2301      	movs	r3, #1
 8008e06:	e07b      	b.n	8008f00 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d101      	bne.n	8008e16 <HAL_UART_Transmit+0x3a>
 8008e12:	2302      	movs	r3, #2
 8008e14:	e074      	b.n	8008f00 <HAL_UART_Transmit+0x124>
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2200      	movs	r2, #0
 8008e22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2221      	movs	r2, #33	; 0x21
 8008e2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e2e:	f7f9 fbe9 	bl	8002604 <HAL_GetTick>
 8008e32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	88fa      	ldrh	r2, [r7, #6]
 8008e38:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	88fa      	ldrh	r2, [r7, #6]
 8008e40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e4c:	d108      	bne.n	8008e60 <HAL_UART_Transmit+0x84>
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	691b      	ldr	r3, [r3, #16]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d104      	bne.n	8008e60 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008e56:	2300      	movs	r3, #0
 8008e58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	61bb      	str	r3, [r7, #24]
 8008e5e:	e003      	b.n	8008e68 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e64:	2300      	movs	r3, #0
 8008e66:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008e70:	e02c      	b.n	8008ecc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	9300      	str	r3, [sp, #0]
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	2180      	movs	r1, #128	; 0x80
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f001 f9a6 	bl	800a1ce <UART_WaitOnFlagUntilTimeout>
 8008e82:	4603      	mov	r3, r0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d001      	beq.n	8008e8c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	e039      	b.n	8008f00 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d10b      	bne.n	8008eaa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	881b      	ldrh	r3, [r3, #0]
 8008e96:	461a      	mov	r2, r3
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ea0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	3302      	adds	r3, #2
 8008ea6:	61bb      	str	r3, [r7, #24]
 8008ea8:	e007      	b.n	8008eba <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	781a      	ldrb	r2, [r3, #0]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	3b01      	subs	r3, #1
 8008ec4:	b29a      	uxth	r2, r3
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1cc      	bne.n	8008e72 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	9300      	str	r3, [sp, #0]
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	2140      	movs	r1, #64	; 0x40
 8008ee2:	68f8      	ldr	r0, [r7, #12]
 8008ee4:	f001 f973 	bl	800a1ce <UART_WaitOnFlagUntilTimeout>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d001      	beq.n	8008ef2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008eee:	2303      	movs	r3, #3
 8008ef0:	e006      	b.n	8008f00 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2220      	movs	r2, #32
 8008ef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008efa:	2300      	movs	r3, #0
 8008efc:	e000      	b.n	8008f00 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008efe:	2302      	movs	r3, #2
  }
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3720      	adds	r7, #32
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	4613      	mov	r3, r2
 8008f14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f1c:	2b20      	cmp	r3, #32
 8008f1e:	d131      	bne.n	8008f84 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d002      	beq.n	8008f2c <HAL_UART_Receive_IT+0x24>
 8008f26:	88fb      	ldrh	r3, [r7, #6]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d101      	bne.n	8008f30 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e02a      	b.n	8008f86 <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d101      	bne.n	8008f3e <HAL_UART_Receive_IT+0x36>
 8008f3a:	2302      	movs	r3, #2
 8008f3c:	e023      	b.n	8008f86 <HAL_UART_Receive_IT+0x7e>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2201      	movs	r2, #1
 8008f42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a0f      	ldr	r2, [pc, #60]	; (8008f90 <HAL_UART_Receive_IT+0x88>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d00e      	beq.n	8008f74 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d007      	beq.n	8008f74 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008f72:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008f74:	88fb      	ldrh	r3, [r7, #6]
 8008f76:	461a      	mov	r2, r3
 8008f78:	68b9      	ldr	r1, [r7, #8]
 8008f7a:	68f8      	ldr	r0, [r7, #12]
 8008f7c:	f001 f9a8 	bl	800a2d0 <UART_Start_Receive_IT>
 8008f80:	4603      	mov	r3, r0
 8008f82:	e000      	b.n	8008f86 <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008f84:	2302      	movs	r3, #2
  }
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3710      	adds	r7, #16
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	58000c00 	.word	0x58000c00

08008f94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b088      	sub	sp, #32
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	69db      	ldr	r3, [r3, #28]
 8008fa2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008fb4:	69fa      	ldr	r2, [r7, #28]
 8008fb6:	f640 030f 	movw	r3, #2063	; 0x80f
 8008fba:	4013      	ands	r3, r2
 8008fbc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d118      	bne.n	8008ff6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008fc4:	69fb      	ldr	r3, [r7, #28]
 8008fc6:	f003 0320 	and.w	r3, r3, #32
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d013      	beq.n	8008ff6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	f003 0320 	and.w	r3, r3, #32
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d104      	bne.n	8008fe2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d009      	beq.n	8008ff6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	f000 8282 	beq.w	80094f0 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	4798      	blx	r3
      }
      return;
 8008ff4:	e27c      	b.n	80094f0 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	f000 80ef 	beq.w	80091dc <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008ffe:	697a      	ldr	r2, [r7, #20]
 8009000:	4b73      	ldr	r3, [pc, #460]	; (80091d0 <HAL_UART_IRQHandler+0x23c>)
 8009002:	4013      	ands	r3, r2
 8009004:	2b00      	cmp	r3, #0
 8009006:	d105      	bne.n	8009014 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009008:	69ba      	ldr	r2, [r7, #24]
 800900a:	4b72      	ldr	r3, [pc, #456]	; (80091d4 <HAL_UART_IRQHandler+0x240>)
 800900c:	4013      	ands	r3, r2
 800900e:	2b00      	cmp	r3, #0
 8009010:	f000 80e4 	beq.w	80091dc <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009014:	69fb      	ldr	r3, [r7, #28]
 8009016:	f003 0301 	and.w	r3, r3, #1
 800901a:	2b00      	cmp	r3, #0
 800901c:	d010      	beq.n	8009040 <HAL_UART_IRQHandler+0xac>
 800901e:	69bb      	ldr	r3, [r7, #24]
 8009020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00b      	beq.n	8009040 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2201      	movs	r2, #1
 800902e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009036:	f043 0201 	orr.w	r2, r3, #1
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009040:	69fb      	ldr	r3, [r7, #28]
 8009042:	f003 0302 	and.w	r3, r3, #2
 8009046:	2b00      	cmp	r3, #0
 8009048:	d010      	beq.n	800906c <HAL_UART_IRQHandler+0xd8>
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	f003 0301 	and.w	r3, r3, #1
 8009050:	2b00      	cmp	r3, #0
 8009052:	d00b      	beq.n	800906c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2202      	movs	r2, #2
 800905a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009062:	f043 0204 	orr.w	r2, r3, #4
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	f003 0304 	and.w	r3, r3, #4
 8009072:	2b00      	cmp	r3, #0
 8009074:	d010      	beq.n	8009098 <HAL_UART_IRQHandler+0x104>
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	f003 0301 	and.w	r3, r3, #1
 800907c:	2b00      	cmp	r3, #0
 800907e:	d00b      	beq.n	8009098 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	2204      	movs	r2, #4
 8009086:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800908e:	f043 0202 	orr.w	r2, r3, #2
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	f003 0308 	and.w	r3, r3, #8
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d015      	beq.n	80090ce <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	f003 0320 	and.w	r3, r3, #32
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d104      	bne.n	80090b6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80090ac:	697a      	ldr	r2, [r7, #20]
 80090ae:	4b48      	ldr	r3, [pc, #288]	; (80091d0 <HAL_UART_IRQHandler+0x23c>)
 80090b0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d00b      	beq.n	80090ce <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2208      	movs	r2, #8
 80090bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090c4:	f043 0208 	orr.w	r2, r3, #8
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80090ce:	69fb      	ldr	r3, [r7, #28]
 80090d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d011      	beq.n	80090fc <HAL_UART_IRQHandler+0x168>
 80090d8:	69bb      	ldr	r3, [r7, #24]
 80090da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d00c      	beq.n	80090fc <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090f2:	f043 0220 	orr.w	r2, r3, #32
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009102:	2b00      	cmp	r3, #0
 8009104:	f000 81f6 	beq.w	80094f4 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	f003 0320 	and.w	r3, r3, #32
 800910e:	2b00      	cmp	r3, #0
 8009110:	d011      	beq.n	8009136 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009112:	69bb      	ldr	r3, [r7, #24]
 8009114:	f003 0320 	and.w	r3, r3, #32
 8009118:	2b00      	cmp	r3, #0
 800911a:	d104      	bne.n	8009126 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009122:	2b00      	cmp	r3, #0
 8009124:	d007      	beq.n	8009136 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800912a:	2b00      	cmp	r3, #0
 800912c:	d003      	beq.n	8009136 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800913c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009148:	2b40      	cmp	r3, #64	; 0x40
 800914a:	d004      	beq.n	8009156 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009152:	2b00      	cmp	r3, #0
 8009154:	d031      	beq.n	80091ba <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f001 f978 	bl	800a44c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009166:	2b40      	cmp	r3, #64	; 0x40
 8009168:	d123      	bne.n	80091b2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	689a      	ldr	r2, [r3, #8]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009178:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800917e:	2b00      	cmp	r3, #0
 8009180:	d013      	beq.n	80091aa <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009186:	4a14      	ldr	r2, [pc, #80]	; (80091d8 <HAL_UART_IRQHandler+0x244>)
 8009188:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800918e:	4618      	mov	r0, r3
 8009190:	f7fa fac4 	bl	800371c <HAL_DMA_Abort_IT>
 8009194:	4603      	mov	r3, r0
 8009196:	2b00      	cmp	r3, #0
 8009198:	d017      	beq.n	80091ca <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800919e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80091a4:	4610      	mov	r0, r2
 80091a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091a8:	e00f      	b.n	80091ca <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 f9ac 	bl	8009508 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091b0:	e00b      	b.n	80091ca <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 f9a8 	bl	8009508 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091b8:	e007      	b.n	80091ca <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 f9a4 	bl	8009508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80091c8:	e194      	b.n	80094f4 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091ca:	bf00      	nop
    return;
 80091cc:	e192      	b.n	80094f4 <HAL_UART_IRQHandler+0x560>
 80091ce:	bf00      	nop
 80091d0:	10000001 	.word	0x10000001
 80091d4:	04000120 	.word	0x04000120
 80091d8:	0800a4b1 	.word	0x0800a4b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	f040 810f 	bne.w	8009404 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80091e6:	69fb      	ldr	r3, [r7, #28]
 80091e8:	f003 0310 	and.w	r3, r3, #16
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	f000 8109 	beq.w	8009404 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80091f2:	69bb      	ldr	r3, [r7, #24]
 80091f4:	f003 0310 	and.w	r3, r3, #16
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	f000 8103 	beq.w	8009404 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2210      	movs	r2, #16
 8009204:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009210:	2b40      	cmp	r3, #64	; 0x40
 8009212:	f040 80bb 	bne.w	800938c <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a96      	ldr	r2, [pc, #600]	; (8009478 <HAL_UART_IRQHandler+0x4e4>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d059      	beq.n	80092d6 <HAL_UART_IRQHandler+0x342>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a94      	ldr	r2, [pc, #592]	; (800947c <HAL_UART_IRQHandler+0x4e8>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d053      	beq.n	80092d6 <HAL_UART_IRQHandler+0x342>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a92      	ldr	r2, [pc, #584]	; (8009480 <HAL_UART_IRQHandler+0x4ec>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d04d      	beq.n	80092d6 <HAL_UART_IRQHandler+0x342>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a90      	ldr	r2, [pc, #576]	; (8009484 <HAL_UART_IRQHandler+0x4f0>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d047      	beq.n	80092d6 <HAL_UART_IRQHandler+0x342>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a8e      	ldr	r2, [pc, #568]	; (8009488 <HAL_UART_IRQHandler+0x4f4>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d041      	beq.n	80092d6 <HAL_UART_IRQHandler+0x342>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a8c      	ldr	r2, [pc, #560]	; (800948c <HAL_UART_IRQHandler+0x4f8>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d03b      	beq.n	80092d6 <HAL_UART_IRQHandler+0x342>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a8a      	ldr	r2, [pc, #552]	; (8009490 <HAL_UART_IRQHandler+0x4fc>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d035      	beq.n	80092d6 <HAL_UART_IRQHandler+0x342>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a88      	ldr	r2, [pc, #544]	; (8009494 <HAL_UART_IRQHandler+0x500>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d02f      	beq.n	80092d6 <HAL_UART_IRQHandler+0x342>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a86      	ldr	r2, [pc, #536]	; (8009498 <HAL_UART_IRQHandler+0x504>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d029      	beq.n	80092d6 <HAL_UART_IRQHandler+0x342>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a84      	ldr	r2, [pc, #528]	; (800949c <HAL_UART_IRQHandler+0x508>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d023      	beq.n	80092d6 <HAL_UART_IRQHandler+0x342>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a82      	ldr	r2, [pc, #520]	; (80094a0 <HAL_UART_IRQHandler+0x50c>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d01d      	beq.n	80092d6 <HAL_UART_IRQHandler+0x342>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a80      	ldr	r2, [pc, #512]	; (80094a4 <HAL_UART_IRQHandler+0x510>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d017      	beq.n	80092d6 <HAL_UART_IRQHandler+0x342>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a7e      	ldr	r2, [pc, #504]	; (80094a8 <HAL_UART_IRQHandler+0x514>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d011      	beq.n	80092d6 <HAL_UART_IRQHandler+0x342>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a7c      	ldr	r2, [pc, #496]	; (80094ac <HAL_UART_IRQHandler+0x518>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d00b      	beq.n	80092d6 <HAL_UART_IRQHandler+0x342>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a7a      	ldr	r2, [pc, #488]	; (80094b0 <HAL_UART_IRQHandler+0x51c>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d005      	beq.n	80092d6 <HAL_UART_IRQHandler+0x342>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a78      	ldr	r2, [pc, #480]	; (80094b4 <HAL_UART_IRQHandler+0x520>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d105      	bne.n	80092e2 <HAL_UART_IRQHandler+0x34e>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	b29b      	uxth	r3, r3
 80092e0:	e004      	b.n	80092ec <HAL_UART_IRQHandler+0x358>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80092ee:	893b      	ldrh	r3, [r7, #8]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	f000 8101 	beq.w	80094f8 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80092fc:	893a      	ldrh	r2, [r7, #8]
 80092fe:	429a      	cmp	r2, r3
 8009300:	f080 80fa 	bcs.w	80094f8 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	893a      	ldrh	r2, [r7, #8]
 8009308:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009310:	69db      	ldr	r3, [r3, #28]
 8009312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009316:	d02b      	beq.n	8009370 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009326:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	689a      	ldr	r2, [r3, #8]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f022 0201 	bic.w	r2, r2, #1
 8009336:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	689a      	ldr	r2, [r3, #8]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009346:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2220      	movs	r2, #32
 800934c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f022 0210 	bic.w	r2, r2, #16
 8009364:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800936a:	4618      	mov	r0, r3
 800936c:	f7f9 feb8 	bl	80030e0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800937c:	b29b      	uxth	r3, r3
 800937e:	1ad3      	subs	r3, r2, r3
 8009380:	b29b      	uxth	r3, r3
 8009382:	4619      	mov	r1, r3
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 f8c9 	bl	800951c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800938a:	e0b5      	b.n	80094f8 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009398:	b29b      	uxth	r3, r3
 800939a:	1ad3      	subs	r3, r2, r3
 800939c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	f000 80a8 	beq.w	80094fc <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 80093ac:	897b      	ldrh	r3, [r7, #10]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	f000 80a4 	beq.w	80094fc <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80093c2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	6899      	ldr	r1, [r3, #8]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681a      	ldr	r2, [r3, #0]
 80093ce:	4b3a      	ldr	r3, [pc, #232]	; (80094b8 <HAL_UART_IRQHandler+0x524>)
 80093d0:	400b      	ands	r3, r1
 80093d2:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2220      	movs	r2, #32
 80093d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f022 0210 	bic.w	r2, r2, #16
 80093f6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80093f8:	897b      	ldrh	r3, [r7, #10]
 80093fa:	4619      	mov	r1, r3
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 f88d 	bl	800951c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009402:	e07b      	b.n	80094fc <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009404:	69fb      	ldr	r3, [r7, #28]
 8009406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00d      	beq.n	800942a <HAL_UART_IRQHandler+0x496>
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009414:	2b00      	cmp	r3, #0
 8009416:	d008      	beq.n	800942a <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009420:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f001 fbba 	bl	800ab9c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009428:	e06b      	b.n	8009502 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009430:	2b00      	cmp	r3, #0
 8009432:	d012      	beq.n	800945a <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800943a:	2b00      	cmp	r3, #0
 800943c:	d104      	bne.n	8009448 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009444:	2b00      	cmp	r3, #0
 8009446:	d008      	beq.n	800945a <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800944c:	2b00      	cmp	r3, #0
 800944e:	d057      	beq.n	8009500 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	4798      	blx	r3
    }
    return;
 8009458:	e052      	b.n	8009500 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800945a:	69fb      	ldr	r3, [r7, #28]
 800945c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009460:	2b00      	cmp	r3, #0
 8009462:	d02b      	beq.n	80094bc <HAL_UART_IRQHandler+0x528>
 8009464:	69bb      	ldr	r3, [r7, #24]
 8009466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800946a:	2b00      	cmp	r3, #0
 800946c:	d026      	beq.n	80094bc <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f001 f834 	bl	800a4dc <UART_EndTransmit_IT>
    return;
 8009474:	e045      	b.n	8009502 <HAL_UART_IRQHandler+0x56e>
 8009476:	bf00      	nop
 8009478:	40020010 	.word	0x40020010
 800947c:	40020028 	.word	0x40020028
 8009480:	40020040 	.word	0x40020040
 8009484:	40020058 	.word	0x40020058
 8009488:	40020070 	.word	0x40020070
 800948c:	40020088 	.word	0x40020088
 8009490:	400200a0 	.word	0x400200a0
 8009494:	400200b8 	.word	0x400200b8
 8009498:	40020410 	.word	0x40020410
 800949c:	40020428 	.word	0x40020428
 80094a0:	40020440 	.word	0x40020440
 80094a4:	40020458 	.word	0x40020458
 80094a8:	40020470 	.word	0x40020470
 80094ac:	40020488 	.word	0x40020488
 80094b0:	400204a0 	.word	0x400204a0
 80094b4:	400204b8 	.word	0x400204b8
 80094b8:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d008      	beq.n	80094d8 <HAL_UART_IRQHandler+0x544>
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d003      	beq.n	80094d8 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f001 fb77 	bl	800abc4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80094d6:	e014      	b.n	8009502 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80094d8:	69fb      	ldr	r3, [r7, #28]
 80094da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d00f      	beq.n	8009502 <HAL_UART_IRQHandler+0x56e>
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	da0c      	bge.n	8009502 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f001 fb61 	bl	800abb0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80094ee:	e008      	b.n	8009502 <HAL_UART_IRQHandler+0x56e>
      return;
 80094f0:	bf00      	nop
 80094f2:	e006      	b.n	8009502 <HAL_UART_IRQHandler+0x56e>
    return;
 80094f4:	bf00      	nop
 80094f6:	e004      	b.n	8009502 <HAL_UART_IRQHandler+0x56e>
      return;
 80094f8:	bf00      	nop
 80094fa:	e002      	b.n	8009502 <HAL_UART_IRQHandler+0x56e>
      return;
 80094fc:	bf00      	nop
 80094fe:	e000      	b.n	8009502 <HAL_UART_IRQHandler+0x56e>
    return;
 8009500:	bf00      	nop
  }
}
 8009502:	3720      	adds	r7, #32
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}

08009508 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	460b      	mov	r3, r1
 8009526:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009528:	bf00      	nop
 800952a:	370c      	adds	r7, #12
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009534:	b5b0      	push	{r4, r5, r7, lr}
 8009536:	b08e      	sub	sp, #56	; 0x38
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800953c:	2300      	movs	r3, #0
 800953e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	689a      	ldr	r2, [r3, #8]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	431a      	orrs	r2, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	695b      	ldr	r3, [r3, #20]
 8009550:	431a      	orrs	r2, r3
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	69db      	ldr	r3, [r3, #28]
 8009556:	4313      	orrs	r3, r2
 8009558:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	4bbf      	ldr	r3, [pc, #764]	; (8009860 <UART_SetConfig+0x32c>)
 8009562:	4013      	ands	r3, r2
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	6812      	ldr	r2, [r2, #0]
 8009568:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800956a:	430b      	orrs	r3, r1
 800956c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	68da      	ldr	r2, [r3, #12]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	430a      	orrs	r2, r1
 8009582:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	699b      	ldr	r3, [r3, #24]
 8009588:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4ab5      	ldr	r2, [pc, #724]	; (8009864 <UART_SetConfig+0x330>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d004      	beq.n	800959e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6a1b      	ldr	r3, [r3, #32]
 8009598:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800959a:	4313      	orrs	r3, r2
 800959c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	689a      	ldr	r2, [r3, #8]
 80095a4:	4bb0      	ldr	r3, [pc, #704]	; (8009868 <UART_SetConfig+0x334>)
 80095a6:	4013      	ands	r3, r2
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	6812      	ldr	r2, [r2, #0]
 80095ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80095ae:	430b      	orrs	r3, r1
 80095b0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b8:	f023 010f 	bic.w	r1, r3, #15
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	430a      	orrs	r2, r1
 80095c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4aa7      	ldr	r2, [pc, #668]	; (800986c <UART_SetConfig+0x338>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d176      	bne.n	80096c0 <UART_SetConfig+0x18c>
 80095d2:	4ba7      	ldr	r3, [pc, #668]	; (8009870 <UART_SetConfig+0x33c>)
 80095d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80095da:	2b28      	cmp	r3, #40	; 0x28
 80095dc:	d86c      	bhi.n	80096b8 <UART_SetConfig+0x184>
 80095de:	a201      	add	r2, pc, #4	; (adr r2, 80095e4 <UART_SetConfig+0xb0>)
 80095e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e4:	08009689 	.word	0x08009689
 80095e8:	080096b9 	.word	0x080096b9
 80095ec:	080096b9 	.word	0x080096b9
 80095f0:	080096b9 	.word	0x080096b9
 80095f4:	080096b9 	.word	0x080096b9
 80095f8:	080096b9 	.word	0x080096b9
 80095fc:	080096b9 	.word	0x080096b9
 8009600:	080096b9 	.word	0x080096b9
 8009604:	08009691 	.word	0x08009691
 8009608:	080096b9 	.word	0x080096b9
 800960c:	080096b9 	.word	0x080096b9
 8009610:	080096b9 	.word	0x080096b9
 8009614:	080096b9 	.word	0x080096b9
 8009618:	080096b9 	.word	0x080096b9
 800961c:	080096b9 	.word	0x080096b9
 8009620:	080096b9 	.word	0x080096b9
 8009624:	08009699 	.word	0x08009699
 8009628:	080096b9 	.word	0x080096b9
 800962c:	080096b9 	.word	0x080096b9
 8009630:	080096b9 	.word	0x080096b9
 8009634:	080096b9 	.word	0x080096b9
 8009638:	080096b9 	.word	0x080096b9
 800963c:	080096b9 	.word	0x080096b9
 8009640:	080096b9 	.word	0x080096b9
 8009644:	080096a1 	.word	0x080096a1
 8009648:	080096b9 	.word	0x080096b9
 800964c:	080096b9 	.word	0x080096b9
 8009650:	080096b9 	.word	0x080096b9
 8009654:	080096b9 	.word	0x080096b9
 8009658:	080096b9 	.word	0x080096b9
 800965c:	080096b9 	.word	0x080096b9
 8009660:	080096b9 	.word	0x080096b9
 8009664:	080096a9 	.word	0x080096a9
 8009668:	080096b9 	.word	0x080096b9
 800966c:	080096b9 	.word	0x080096b9
 8009670:	080096b9 	.word	0x080096b9
 8009674:	080096b9 	.word	0x080096b9
 8009678:	080096b9 	.word	0x080096b9
 800967c:	080096b9 	.word	0x080096b9
 8009680:	080096b9 	.word	0x080096b9
 8009684:	080096b1 	.word	0x080096b1
 8009688:	2301      	movs	r3, #1
 800968a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800968e:	e222      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 8009690:	2304      	movs	r3, #4
 8009692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009696:	e21e      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 8009698:	2308      	movs	r3, #8
 800969a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800969e:	e21a      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 80096a0:	2310      	movs	r3, #16
 80096a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096a6:	e216      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 80096a8:	2320      	movs	r3, #32
 80096aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ae:	e212      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 80096b0:	2340      	movs	r3, #64	; 0x40
 80096b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096b6:	e20e      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 80096b8:	2380      	movs	r3, #128	; 0x80
 80096ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096be:	e20a      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a6b      	ldr	r2, [pc, #428]	; (8009874 <UART_SetConfig+0x340>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d130      	bne.n	800972c <UART_SetConfig+0x1f8>
 80096ca:	4b69      	ldr	r3, [pc, #420]	; (8009870 <UART_SetConfig+0x33c>)
 80096cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096ce:	f003 0307 	and.w	r3, r3, #7
 80096d2:	2b05      	cmp	r3, #5
 80096d4:	d826      	bhi.n	8009724 <UART_SetConfig+0x1f0>
 80096d6:	a201      	add	r2, pc, #4	; (adr r2, 80096dc <UART_SetConfig+0x1a8>)
 80096d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096dc:	080096f5 	.word	0x080096f5
 80096e0:	080096fd 	.word	0x080096fd
 80096e4:	08009705 	.word	0x08009705
 80096e8:	0800970d 	.word	0x0800970d
 80096ec:	08009715 	.word	0x08009715
 80096f0:	0800971d 	.word	0x0800971d
 80096f4:	2300      	movs	r3, #0
 80096f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096fa:	e1ec      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 80096fc:	2304      	movs	r3, #4
 80096fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009702:	e1e8      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 8009704:	2308      	movs	r3, #8
 8009706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800970a:	e1e4      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 800970c:	2310      	movs	r3, #16
 800970e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009712:	e1e0      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 8009714:	2320      	movs	r3, #32
 8009716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800971a:	e1dc      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 800971c:	2340      	movs	r3, #64	; 0x40
 800971e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009722:	e1d8      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 8009724:	2380      	movs	r3, #128	; 0x80
 8009726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800972a:	e1d4      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a51      	ldr	r2, [pc, #324]	; (8009878 <UART_SetConfig+0x344>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d130      	bne.n	8009798 <UART_SetConfig+0x264>
 8009736:	4b4e      	ldr	r3, [pc, #312]	; (8009870 <UART_SetConfig+0x33c>)
 8009738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800973a:	f003 0307 	and.w	r3, r3, #7
 800973e:	2b05      	cmp	r3, #5
 8009740:	d826      	bhi.n	8009790 <UART_SetConfig+0x25c>
 8009742:	a201      	add	r2, pc, #4	; (adr r2, 8009748 <UART_SetConfig+0x214>)
 8009744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009748:	08009761 	.word	0x08009761
 800974c:	08009769 	.word	0x08009769
 8009750:	08009771 	.word	0x08009771
 8009754:	08009779 	.word	0x08009779
 8009758:	08009781 	.word	0x08009781
 800975c:	08009789 	.word	0x08009789
 8009760:	2300      	movs	r3, #0
 8009762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009766:	e1b6      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 8009768:	2304      	movs	r3, #4
 800976a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800976e:	e1b2      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 8009770:	2308      	movs	r3, #8
 8009772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009776:	e1ae      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 8009778:	2310      	movs	r3, #16
 800977a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800977e:	e1aa      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 8009780:	2320      	movs	r3, #32
 8009782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009786:	e1a6      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 8009788:	2340      	movs	r3, #64	; 0x40
 800978a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800978e:	e1a2      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 8009790:	2380      	movs	r3, #128	; 0x80
 8009792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009796:	e19e      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a37      	ldr	r2, [pc, #220]	; (800987c <UART_SetConfig+0x348>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d130      	bne.n	8009804 <UART_SetConfig+0x2d0>
 80097a2:	4b33      	ldr	r3, [pc, #204]	; (8009870 <UART_SetConfig+0x33c>)
 80097a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097a6:	f003 0307 	and.w	r3, r3, #7
 80097aa:	2b05      	cmp	r3, #5
 80097ac:	d826      	bhi.n	80097fc <UART_SetConfig+0x2c8>
 80097ae:	a201      	add	r2, pc, #4	; (adr r2, 80097b4 <UART_SetConfig+0x280>)
 80097b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b4:	080097cd 	.word	0x080097cd
 80097b8:	080097d5 	.word	0x080097d5
 80097bc:	080097dd 	.word	0x080097dd
 80097c0:	080097e5 	.word	0x080097e5
 80097c4:	080097ed 	.word	0x080097ed
 80097c8:	080097f5 	.word	0x080097f5
 80097cc:	2300      	movs	r3, #0
 80097ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097d2:	e180      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 80097d4:	2304      	movs	r3, #4
 80097d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097da:	e17c      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 80097dc:	2308      	movs	r3, #8
 80097de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097e2:	e178      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 80097e4:	2310      	movs	r3, #16
 80097e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097ea:	e174      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 80097ec:	2320      	movs	r3, #32
 80097ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097f2:	e170      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 80097f4:	2340      	movs	r3, #64	; 0x40
 80097f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097fa:	e16c      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 80097fc:	2380      	movs	r3, #128	; 0x80
 80097fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009802:	e168      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a1d      	ldr	r2, [pc, #116]	; (8009880 <UART_SetConfig+0x34c>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d142      	bne.n	8009894 <UART_SetConfig+0x360>
 800980e:	4b18      	ldr	r3, [pc, #96]	; (8009870 <UART_SetConfig+0x33c>)
 8009810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009812:	f003 0307 	and.w	r3, r3, #7
 8009816:	2b05      	cmp	r3, #5
 8009818:	d838      	bhi.n	800988c <UART_SetConfig+0x358>
 800981a:	a201      	add	r2, pc, #4	; (adr r2, 8009820 <UART_SetConfig+0x2ec>)
 800981c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009820:	08009839 	.word	0x08009839
 8009824:	08009841 	.word	0x08009841
 8009828:	08009849 	.word	0x08009849
 800982c:	08009851 	.word	0x08009851
 8009830:	08009859 	.word	0x08009859
 8009834:	08009885 	.word	0x08009885
 8009838:	2300      	movs	r3, #0
 800983a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800983e:	e14a      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 8009840:	2304      	movs	r3, #4
 8009842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009846:	e146      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 8009848:	2308      	movs	r3, #8
 800984a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800984e:	e142      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 8009850:	2310      	movs	r3, #16
 8009852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009856:	e13e      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 8009858:	2320      	movs	r3, #32
 800985a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800985e:	e13a      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 8009860:	cfff69f3 	.word	0xcfff69f3
 8009864:	58000c00 	.word	0x58000c00
 8009868:	11fff4ff 	.word	0x11fff4ff
 800986c:	40011000 	.word	0x40011000
 8009870:	58024400 	.word	0x58024400
 8009874:	40004400 	.word	0x40004400
 8009878:	40004800 	.word	0x40004800
 800987c:	40004c00 	.word	0x40004c00
 8009880:	40005000 	.word	0x40005000
 8009884:	2340      	movs	r3, #64	; 0x40
 8009886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800988a:	e124      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 800988c:	2380      	movs	r3, #128	; 0x80
 800988e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009892:	e120      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4acc      	ldr	r2, [pc, #816]	; (8009bcc <UART_SetConfig+0x698>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d176      	bne.n	800998c <UART_SetConfig+0x458>
 800989e:	4bcc      	ldr	r3, [pc, #816]	; (8009bd0 <UART_SetConfig+0x69c>)
 80098a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098a6:	2b28      	cmp	r3, #40	; 0x28
 80098a8:	d86c      	bhi.n	8009984 <UART_SetConfig+0x450>
 80098aa:	a201      	add	r2, pc, #4	; (adr r2, 80098b0 <UART_SetConfig+0x37c>)
 80098ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b0:	08009955 	.word	0x08009955
 80098b4:	08009985 	.word	0x08009985
 80098b8:	08009985 	.word	0x08009985
 80098bc:	08009985 	.word	0x08009985
 80098c0:	08009985 	.word	0x08009985
 80098c4:	08009985 	.word	0x08009985
 80098c8:	08009985 	.word	0x08009985
 80098cc:	08009985 	.word	0x08009985
 80098d0:	0800995d 	.word	0x0800995d
 80098d4:	08009985 	.word	0x08009985
 80098d8:	08009985 	.word	0x08009985
 80098dc:	08009985 	.word	0x08009985
 80098e0:	08009985 	.word	0x08009985
 80098e4:	08009985 	.word	0x08009985
 80098e8:	08009985 	.word	0x08009985
 80098ec:	08009985 	.word	0x08009985
 80098f0:	08009965 	.word	0x08009965
 80098f4:	08009985 	.word	0x08009985
 80098f8:	08009985 	.word	0x08009985
 80098fc:	08009985 	.word	0x08009985
 8009900:	08009985 	.word	0x08009985
 8009904:	08009985 	.word	0x08009985
 8009908:	08009985 	.word	0x08009985
 800990c:	08009985 	.word	0x08009985
 8009910:	0800996d 	.word	0x0800996d
 8009914:	08009985 	.word	0x08009985
 8009918:	08009985 	.word	0x08009985
 800991c:	08009985 	.word	0x08009985
 8009920:	08009985 	.word	0x08009985
 8009924:	08009985 	.word	0x08009985
 8009928:	08009985 	.word	0x08009985
 800992c:	08009985 	.word	0x08009985
 8009930:	08009975 	.word	0x08009975
 8009934:	08009985 	.word	0x08009985
 8009938:	08009985 	.word	0x08009985
 800993c:	08009985 	.word	0x08009985
 8009940:	08009985 	.word	0x08009985
 8009944:	08009985 	.word	0x08009985
 8009948:	08009985 	.word	0x08009985
 800994c:	08009985 	.word	0x08009985
 8009950:	0800997d 	.word	0x0800997d
 8009954:	2301      	movs	r3, #1
 8009956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800995a:	e0bc      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 800995c:	2304      	movs	r3, #4
 800995e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009962:	e0b8      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 8009964:	2308      	movs	r3, #8
 8009966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800996a:	e0b4      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 800996c:	2310      	movs	r3, #16
 800996e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009972:	e0b0      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 8009974:	2320      	movs	r3, #32
 8009976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800997a:	e0ac      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 800997c:	2340      	movs	r3, #64	; 0x40
 800997e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009982:	e0a8      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 8009984:	2380      	movs	r3, #128	; 0x80
 8009986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800998a:	e0a4      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a90      	ldr	r2, [pc, #576]	; (8009bd4 <UART_SetConfig+0x6a0>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d130      	bne.n	80099f8 <UART_SetConfig+0x4c4>
 8009996:	4b8e      	ldr	r3, [pc, #568]	; (8009bd0 <UART_SetConfig+0x69c>)
 8009998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800999a:	f003 0307 	and.w	r3, r3, #7
 800999e:	2b05      	cmp	r3, #5
 80099a0:	d826      	bhi.n	80099f0 <UART_SetConfig+0x4bc>
 80099a2:	a201      	add	r2, pc, #4	; (adr r2, 80099a8 <UART_SetConfig+0x474>)
 80099a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a8:	080099c1 	.word	0x080099c1
 80099ac:	080099c9 	.word	0x080099c9
 80099b0:	080099d1 	.word	0x080099d1
 80099b4:	080099d9 	.word	0x080099d9
 80099b8:	080099e1 	.word	0x080099e1
 80099bc:	080099e9 	.word	0x080099e9
 80099c0:	2300      	movs	r3, #0
 80099c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099c6:	e086      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 80099c8:	2304      	movs	r3, #4
 80099ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ce:	e082      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 80099d0:	2308      	movs	r3, #8
 80099d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099d6:	e07e      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 80099d8:	2310      	movs	r3, #16
 80099da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099de:	e07a      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 80099e0:	2320      	movs	r3, #32
 80099e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099e6:	e076      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 80099e8:	2340      	movs	r3, #64	; 0x40
 80099ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ee:	e072      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 80099f0:	2380      	movs	r3, #128	; 0x80
 80099f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099f6:	e06e      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a76      	ldr	r2, [pc, #472]	; (8009bd8 <UART_SetConfig+0x6a4>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d130      	bne.n	8009a64 <UART_SetConfig+0x530>
 8009a02:	4b73      	ldr	r3, [pc, #460]	; (8009bd0 <UART_SetConfig+0x69c>)
 8009a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a06:	f003 0307 	and.w	r3, r3, #7
 8009a0a:	2b05      	cmp	r3, #5
 8009a0c:	d826      	bhi.n	8009a5c <UART_SetConfig+0x528>
 8009a0e:	a201      	add	r2, pc, #4	; (adr r2, 8009a14 <UART_SetConfig+0x4e0>)
 8009a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a14:	08009a2d 	.word	0x08009a2d
 8009a18:	08009a35 	.word	0x08009a35
 8009a1c:	08009a3d 	.word	0x08009a3d
 8009a20:	08009a45 	.word	0x08009a45
 8009a24:	08009a4d 	.word	0x08009a4d
 8009a28:	08009a55 	.word	0x08009a55
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a32:	e050      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 8009a34:	2304      	movs	r3, #4
 8009a36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a3a:	e04c      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 8009a3c:	2308      	movs	r3, #8
 8009a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a42:	e048      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 8009a44:	2310      	movs	r3, #16
 8009a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a4a:	e044      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 8009a4c:	2320      	movs	r3, #32
 8009a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a52:	e040      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 8009a54:	2340      	movs	r3, #64	; 0x40
 8009a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a5a:	e03c      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 8009a5c:	2380      	movs	r3, #128	; 0x80
 8009a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a62:	e038      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a5c      	ldr	r2, [pc, #368]	; (8009bdc <UART_SetConfig+0x6a8>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d130      	bne.n	8009ad0 <UART_SetConfig+0x59c>
 8009a6e:	4b58      	ldr	r3, [pc, #352]	; (8009bd0 <UART_SetConfig+0x69c>)
 8009a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a72:	f003 0307 	and.w	r3, r3, #7
 8009a76:	2b05      	cmp	r3, #5
 8009a78:	d826      	bhi.n	8009ac8 <UART_SetConfig+0x594>
 8009a7a:	a201      	add	r2, pc, #4	; (adr r2, 8009a80 <UART_SetConfig+0x54c>)
 8009a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a80:	08009a99 	.word	0x08009a99
 8009a84:	08009aa1 	.word	0x08009aa1
 8009a88:	08009aa9 	.word	0x08009aa9
 8009a8c:	08009ab1 	.word	0x08009ab1
 8009a90:	08009ab9 	.word	0x08009ab9
 8009a94:	08009ac1 	.word	0x08009ac1
 8009a98:	2302      	movs	r3, #2
 8009a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a9e:	e01a      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 8009aa0:	2304      	movs	r3, #4
 8009aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aa6:	e016      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 8009aa8:	2308      	movs	r3, #8
 8009aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aae:	e012      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 8009ab0:	2310      	movs	r3, #16
 8009ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ab6:	e00e      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 8009ab8:	2320      	movs	r3, #32
 8009aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009abe:	e00a      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 8009ac0:	2340      	movs	r3, #64	; 0x40
 8009ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ac6:	e006      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 8009ac8:	2380      	movs	r3, #128	; 0x80
 8009aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ace:	e002      	b.n	8009ad6 <UART_SetConfig+0x5a2>
 8009ad0:	2380      	movs	r3, #128	; 0x80
 8009ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a40      	ldr	r2, [pc, #256]	; (8009bdc <UART_SetConfig+0x6a8>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	f040 80ef 	bne.w	8009cc0 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009ae2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009ae6:	2b20      	cmp	r3, #32
 8009ae8:	dc46      	bgt.n	8009b78 <UART_SetConfig+0x644>
 8009aea:	2b02      	cmp	r3, #2
 8009aec:	f2c0 8081 	blt.w	8009bf2 <UART_SetConfig+0x6be>
 8009af0:	3b02      	subs	r3, #2
 8009af2:	2b1e      	cmp	r3, #30
 8009af4:	d87d      	bhi.n	8009bf2 <UART_SetConfig+0x6be>
 8009af6:	a201      	add	r2, pc, #4	; (adr r2, 8009afc <UART_SetConfig+0x5c8>)
 8009af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009afc:	08009b7f 	.word	0x08009b7f
 8009b00:	08009bf3 	.word	0x08009bf3
 8009b04:	08009b87 	.word	0x08009b87
 8009b08:	08009bf3 	.word	0x08009bf3
 8009b0c:	08009bf3 	.word	0x08009bf3
 8009b10:	08009bf3 	.word	0x08009bf3
 8009b14:	08009b97 	.word	0x08009b97
 8009b18:	08009bf3 	.word	0x08009bf3
 8009b1c:	08009bf3 	.word	0x08009bf3
 8009b20:	08009bf3 	.word	0x08009bf3
 8009b24:	08009bf3 	.word	0x08009bf3
 8009b28:	08009bf3 	.word	0x08009bf3
 8009b2c:	08009bf3 	.word	0x08009bf3
 8009b30:	08009bf3 	.word	0x08009bf3
 8009b34:	08009ba7 	.word	0x08009ba7
 8009b38:	08009bf3 	.word	0x08009bf3
 8009b3c:	08009bf3 	.word	0x08009bf3
 8009b40:	08009bf3 	.word	0x08009bf3
 8009b44:	08009bf3 	.word	0x08009bf3
 8009b48:	08009bf3 	.word	0x08009bf3
 8009b4c:	08009bf3 	.word	0x08009bf3
 8009b50:	08009bf3 	.word	0x08009bf3
 8009b54:	08009bf3 	.word	0x08009bf3
 8009b58:	08009bf3 	.word	0x08009bf3
 8009b5c:	08009bf3 	.word	0x08009bf3
 8009b60:	08009bf3 	.word	0x08009bf3
 8009b64:	08009bf3 	.word	0x08009bf3
 8009b68:	08009bf3 	.word	0x08009bf3
 8009b6c:	08009bf3 	.word	0x08009bf3
 8009b70:	08009bf3 	.word	0x08009bf3
 8009b74:	08009be5 	.word	0x08009be5
 8009b78:	2b40      	cmp	r3, #64	; 0x40
 8009b7a:	d036      	beq.n	8009bea <UART_SetConfig+0x6b6>
 8009b7c:	e039      	b.n	8009bf2 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009b7e:	f7fd fa71 	bl	8007064 <HAL_RCCEx_GetD3PCLK1Freq>
 8009b82:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009b84:	e03b      	b.n	8009bfe <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b86:	f107 0314 	add.w	r3, r7, #20
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7fd fa80 	bl	8007090 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b94:	e033      	b.n	8009bfe <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b96:	f107 0308 	add.w	r3, r7, #8
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7fd fbcc 	bl	8007338 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ba4:	e02b      	b.n	8009bfe <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ba6:	4b0a      	ldr	r3, [pc, #40]	; (8009bd0 <UART_SetConfig+0x69c>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f003 0320 	and.w	r3, r3, #32
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d009      	beq.n	8009bc6 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009bb2:	4b07      	ldr	r3, [pc, #28]	; (8009bd0 <UART_SetConfig+0x69c>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	08db      	lsrs	r3, r3, #3
 8009bb8:	f003 0303 	and.w	r3, r3, #3
 8009bbc:	4a08      	ldr	r2, [pc, #32]	; (8009be0 <UART_SetConfig+0x6ac>)
 8009bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8009bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009bc4:	e01b      	b.n	8009bfe <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8009bc6:	4b06      	ldr	r3, [pc, #24]	; (8009be0 <UART_SetConfig+0x6ac>)
 8009bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009bca:	e018      	b.n	8009bfe <UART_SetConfig+0x6ca>
 8009bcc:	40011400 	.word	0x40011400
 8009bd0:	58024400 	.word	0x58024400
 8009bd4:	40007800 	.word	0x40007800
 8009bd8:	40007c00 	.word	0x40007c00
 8009bdc:	58000c00 	.word	0x58000c00
 8009be0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009be4:	4bc4      	ldr	r3, [pc, #784]	; (8009ef8 <UART_SetConfig+0x9c4>)
 8009be6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009be8:	e009      	b.n	8009bfe <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009bf0:	e005      	b.n	8009bfe <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009bfc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	f000 81da 	beq.w	8009fba <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c0a:	4abc      	ldr	r2, [pc, #752]	; (8009efc <UART_SetConfig+0x9c8>)
 8009c0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c10:	461a      	mov	r2, r3
 8009c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c14:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c18:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	685a      	ldr	r2, [r3, #4]
 8009c1e:	4613      	mov	r3, r2
 8009c20:	005b      	lsls	r3, r3, #1
 8009c22:	4413      	add	r3, r2
 8009c24:	6a3a      	ldr	r2, [r7, #32]
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d305      	bcc.n	8009c36 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c30:	6a3a      	ldr	r2, [r7, #32]
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d903      	bls.n	8009c3e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8009c36:	2301      	movs	r3, #1
 8009c38:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009c3c:	e1bd      	b.n	8009fba <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c40:	4618      	mov	r0, r3
 8009c42:	f04f 0100 	mov.w	r1, #0
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c4a:	4aac      	ldr	r2, [pc, #688]	; (8009efc <UART_SetConfig+0x9c8>)
 8009c4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c50:	b29a      	uxth	r2, r3
 8009c52:	f04f 0300 	mov.w	r3, #0
 8009c56:	f7f6 fb93 	bl	8000380 <__aeabi_uldivmod>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	4610      	mov	r0, r2
 8009c60:	4619      	mov	r1, r3
 8009c62:	f04f 0200 	mov.w	r2, #0
 8009c66:	f04f 0300 	mov.w	r3, #0
 8009c6a:	020b      	lsls	r3, r1, #8
 8009c6c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009c70:	0202      	lsls	r2, r0, #8
 8009c72:	6879      	ldr	r1, [r7, #4]
 8009c74:	6849      	ldr	r1, [r1, #4]
 8009c76:	0849      	lsrs	r1, r1, #1
 8009c78:	4608      	mov	r0, r1
 8009c7a:	f04f 0100 	mov.w	r1, #0
 8009c7e:	1814      	adds	r4, r2, r0
 8009c80:	eb43 0501 	adc.w	r5, r3, r1
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	461a      	mov	r2, r3
 8009c8a:	f04f 0300 	mov.w	r3, #0
 8009c8e:	4620      	mov	r0, r4
 8009c90:	4629      	mov	r1, r5
 8009c92:	f7f6 fb75 	bl	8000380 <__aeabi_uldivmod>
 8009c96:	4602      	mov	r2, r0
 8009c98:	460b      	mov	r3, r1
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ca4:	d308      	bcc.n	8009cb8 <UART_SetConfig+0x784>
 8009ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009cac:	d204      	bcs.n	8009cb8 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cb4:	60da      	str	r2, [r3, #12]
 8009cb6:	e180      	b.n	8009fba <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009cbe:	e17c      	b.n	8009fba <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	69db      	ldr	r3, [r3, #28]
 8009cc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cc8:	f040 80bf 	bne.w	8009e4a <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8009ccc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009cd0:	2b20      	cmp	r3, #32
 8009cd2:	dc49      	bgt.n	8009d68 <UART_SetConfig+0x834>
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	db7c      	blt.n	8009dd2 <UART_SetConfig+0x89e>
 8009cd8:	2b20      	cmp	r3, #32
 8009cda:	d87a      	bhi.n	8009dd2 <UART_SetConfig+0x89e>
 8009cdc:	a201      	add	r2, pc, #4	; (adr r2, 8009ce4 <UART_SetConfig+0x7b0>)
 8009cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce2:	bf00      	nop
 8009ce4:	08009d6f 	.word	0x08009d6f
 8009ce8:	08009d77 	.word	0x08009d77
 8009cec:	08009dd3 	.word	0x08009dd3
 8009cf0:	08009dd3 	.word	0x08009dd3
 8009cf4:	08009d7f 	.word	0x08009d7f
 8009cf8:	08009dd3 	.word	0x08009dd3
 8009cfc:	08009dd3 	.word	0x08009dd3
 8009d00:	08009dd3 	.word	0x08009dd3
 8009d04:	08009d8f 	.word	0x08009d8f
 8009d08:	08009dd3 	.word	0x08009dd3
 8009d0c:	08009dd3 	.word	0x08009dd3
 8009d10:	08009dd3 	.word	0x08009dd3
 8009d14:	08009dd3 	.word	0x08009dd3
 8009d18:	08009dd3 	.word	0x08009dd3
 8009d1c:	08009dd3 	.word	0x08009dd3
 8009d20:	08009dd3 	.word	0x08009dd3
 8009d24:	08009d9f 	.word	0x08009d9f
 8009d28:	08009dd3 	.word	0x08009dd3
 8009d2c:	08009dd3 	.word	0x08009dd3
 8009d30:	08009dd3 	.word	0x08009dd3
 8009d34:	08009dd3 	.word	0x08009dd3
 8009d38:	08009dd3 	.word	0x08009dd3
 8009d3c:	08009dd3 	.word	0x08009dd3
 8009d40:	08009dd3 	.word	0x08009dd3
 8009d44:	08009dd3 	.word	0x08009dd3
 8009d48:	08009dd3 	.word	0x08009dd3
 8009d4c:	08009dd3 	.word	0x08009dd3
 8009d50:	08009dd3 	.word	0x08009dd3
 8009d54:	08009dd3 	.word	0x08009dd3
 8009d58:	08009dd3 	.word	0x08009dd3
 8009d5c:	08009dd3 	.word	0x08009dd3
 8009d60:	08009dd3 	.word	0x08009dd3
 8009d64:	08009dc5 	.word	0x08009dc5
 8009d68:	2b40      	cmp	r3, #64	; 0x40
 8009d6a:	d02e      	beq.n	8009dca <UART_SetConfig+0x896>
 8009d6c:	e031      	b.n	8009dd2 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d6e:	f7fc fa0d 	bl	800618c <HAL_RCC_GetPCLK1Freq>
 8009d72:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009d74:	e033      	b.n	8009dde <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d76:	f7fc fa1f 	bl	80061b8 <HAL_RCC_GetPCLK2Freq>
 8009d7a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009d7c:	e02f      	b.n	8009dde <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d7e:	f107 0314 	add.w	r3, r7, #20
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7fd f984 	bl	8007090 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d8c:	e027      	b.n	8009dde <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d8e:	f107 0308 	add.w	r3, r7, #8
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7fd fad0 	bl	8007338 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d9c:	e01f      	b.n	8009dde <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d9e:	4b58      	ldr	r3, [pc, #352]	; (8009f00 <UART_SetConfig+0x9cc>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f003 0320 	and.w	r3, r3, #32
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d009      	beq.n	8009dbe <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009daa:	4b55      	ldr	r3, [pc, #340]	; (8009f00 <UART_SetConfig+0x9cc>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	08db      	lsrs	r3, r3, #3
 8009db0:	f003 0303 	and.w	r3, r3, #3
 8009db4:	4a53      	ldr	r2, [pc, #332]	; (8009f04 <UART_SetConfig+0x9d0>)
 8009db6:	fa22 f303 	lsr.w	r3, r2, r3
 8009dba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009dbc:	e00f      	b.n	8009dde <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8009dbe:	4b51      	ldr	r3, [pc, #324]	; (8009f04 <UART_SetConfig+0x9d0>)
 8009dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009dc2:	e00c      	b.n	8009dde <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009dc4:	4b4c      	ldr	r3, [pc, #304]	; (8009ef8 <UART_SetConfig+0x9c4>)
 8009dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009dc8:	e009      	b.n	8009dde <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009dd0:	e005      	b.n	8009dde <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009ddc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	f000 80ea 	beq.w	8009fba <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dea:	4a44      	ldr	r2, [pc, #272]	; (8009efc <UART_SetConfig+0x9c8>)
 8009dec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009df0:	461a      	mov	r2, r3
 8009df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009df8:	005a      	lsls	r2, r3, #1
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	085b      	lsrs	r3, r3, #1
 8009e00:	441a      	add	r2, r3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e10:	2b0f      	cmp	r3, #15
 8009e12:	d916      	bls.n	8009e42 <UART_SetConfig+0x90e>
 8009e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e1a:	d212      	bcs.n	8009e42 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	f023 030f 	bic.w	r3, r3, #15
 8009e24:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e28:	085b      	lsrs	r3, r3, #1
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	f003 0307 	and.w	r3, r3, #7
 8009e30:	b29a      	uxth	r2, r3
 8009e32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009e34:	4313      	orrs	r3, r2
 8009e36:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009e3e:	60da      	str	r2, [r3, #12]
 8009e40:	e0bb      	b.n	8009fba <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009e42:	2301      	movs	r3, #1
 8009e44:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009e48:	e0b7      	b.n	8009fba <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009e4e:	2b20      	cmp	r3, #32
 8009e50:	dc4a      	bgt.n	8009ee8 <UART_SetConfig+0x9b4>
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	f2c0 8086 	blt.w	8009f64 <UART_SetConfig+0xa30>
 8009e58:	2b20      	cmp	r3, #32
 8009e5a:	f200 8083 	bhi.w	8009f64 <UART_SetConfig+0xa30>
 8009e5e:	a201      	add	r2, pc, #4	; (adr r2, 8009e64 <UART_SetConfig+0x930>)
 8009e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e64:	08009eef 	.word	0x08009eef
 8009e68:	08009f09 	.word	0x08009f09
 8009e6c:	08009f65 	.word	0x08009f65
 8009e70:	08009f65 	.word	0x08009f65
 8009e74:	08009f11 	.word	0x08009f11
 8009e78:	08009f65 	.word	0x08009f65
 8009e7c:	08009f65 	.word	0x08009f65
 8009e80:	08009f65 	.word	0x08009f65
 8009e84:	08009f21 	.word	0x08009f21
 8009e88:	08009f65 	.word	0x08009f65
 8009e8c:	08009f65 	.word	0x08009f65
 8009e90:	08009f65 	.word	0x08009f65
 8009e94:	08009f65 	.word	0x08009f65
 8009e98:	08009f65 	.word	0x08009f65
 8009e9c:	08009f65 	.word	0x08009f65
 8009ea0:	08009f65 	.word	0x08009f65
 8009ea4:	08009f31 	.word	0x08009f31
 8009ea8:	08009f65 	.word	0x08009f65
 8009eac:	08009f65 	.word	0x08009f65
 8009eb0:	08009f65 	.word	0x08009f65
 8009eb4:	08009f65 	.word	0x08009f65
 8009eb8:	08009f65 	.word	0x08009f65
 8009ebc:	08009f65 	.word	0x08009f65
 8009ec0:	08009f65 	.word	0x08009f65
 8009ec4:	08009f65 	.word	0x08009f65
 8009ec8:	08009f65 	.word	0x08009f65
 8009ecc:	08009f65 	.word	0x08009f65
 8009ed0:	08009f65 	.word	0x08009f65
 8009ed4:	08009f65 	.word	0x08009f65
 8009ed8:	08009f65 	.word	0x08009f65
 8009edc:	08009f65 	.word	0x08009f65
 8009ee0:	08009f65 	.word	0x08009f65
 8009ee4:	08009f57 	.word	0x08009f57
 8009ee8:	2b40      	cmp	r3, #64	; 0x40
 8009eea:	d037      	beq.n	8009f5c <UART_SetConfig+0xa28>
 8009eec:	e03a      	b.n	8009f64 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009eee:	f7fc f94d 	bl	800618c <HAL_RCC_GetPCLK1Freq>
 8009ef2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009ef4:	e03c      	b.n	8009f70 <UART_SetConfig+0xa3c>
 8009ef6:	bf00      	nop
 8009ef8:	003d0900 	.word	0x003d0900
 8009efc:	0800bd34 	.word	0x0800bd34
 8009f00:	58024400 	.word	0x58024400
 8009f04:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f08:	f7fc f956 	bl	80061b8 <HAL_RCC_GetPCLK2Freq>
 8009f0c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009f0e:	e02f      	b.n	8009f70 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f10:	f107 0314 	add.w	r3, r7, #20
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7fd f8bb 	bl	8007090 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f1a:	69bb      	ldr	r3, [r7, #24]
 8009f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f1e:	e027      	b.n	8009f70 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f20:	f107 0308 	add.w	r3, r7, #8
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7fd fa07 	bl	8007338 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f2e:	e01f      	b.n	8009f70 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f30:	4b2c      	ldr	r3, [pc, #176]	; (8009fe4 <UART_SetConfig+0xab0>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f003 0320 	and.w	r3, r3, #32
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d009      	beq.n	8009f50 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f3c:	4b29      	ldr	r3, [pc, #164]	; (8009fe4 <UART_SetConfig+0xab0>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	08db      	lsrs	r3, r3, #3
 8009f42:	f003 0303 	and.w	r3, r3, #3
 8009f46:	4a28      	ldr	r2, [pc, #160]	; (8009fe8 <UART_SetConfig+0xab4>)
 8009f48:	fa22 f303 	lsr.w	r3, r2, r3
 8009f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f4e:	e00f      	b.n	8009f70 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8009f50:	4b25      	ldr	r3, [pc, #148]	; (8009fe8 <UART_SetConfig+0xab4>)
 8009f52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f54:	e00c      	b.n	8009f70 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f56:	4b25      	ldr	r3, [pc, #148]	; (8009fec <UART_SetConfig+0xab8>)
 8009f58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f5a:	e009      	b.n	8009f70 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f62:	e005      	b.n	8009f70 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8009f64:	2300      	movs	r3, #0
 8009f66:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009f6e:	bf00      	nop
    }

    if (pclk != 0U)
 8009f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d021      	beq.n	8009fba <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f7a:	4a1d      	ldr	r2, [pc, #116]	; (8009ff0 <UART_SetConfig+0xabc>)
 8009f7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f80:	461a      	mov	r2, r3
 8009f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f84:	fbb3 f2f2 	udiv	r2, r3, r2
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	085b      	lsrs	r3, r3, #1
 8009f8e:	441a      	add	r2, r3
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9e:	2b0f      	cmp	r3, #15
 8009fa0:	d908      	bls.n	8009fb4 <UART_SetConfig+0xa80>
 8009fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fa8:	d204      	bcs.n	8009fb4 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fb0:	60da      	str	r2, [r3, #12]
 8009fb2:	e002      	b.n	8009fba <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009fd6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3738      	adds	r7, #56	; 0x38
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bdb0      	pop	{r4, r5, r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	58024400 	.word	0x58024400
 8009fe8:	03d09000 	.word	0x03d09000
 8009fec:	003d0900 	.word	0x003d0900
 8009ff0:	0800bd34 	.word	0x0800bd34

08009ff4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b083      	sub	sp, #12
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a000:	f003 0301 	and.w	r3, r3, #1
 800a004:	2b00      	cmp	r3, #0
 800a006:	d00a      	beq.n	800a01e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	430a      	orrs	r2, r1
 800a01c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a022:	f003 0302 	and.w	r3, r3, #2
 800a026:	2b00      	cmp	r3, #0
 800a028:	d00a      	beq.n	800a040 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	430a      	orrs	r2, r1
 800a03e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a044:	f003 0304 	and.w	r3, r3, #4
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00a      	beq.n	800a062 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	430a      	orrs	r2, r1
 800a060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a066:	f003 0308 	and.w	r3, r3, #8
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00a      	beq.n	800a084 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	430a      	orrs	r2, r1
 800a082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a088:	f003 0310 	and.w	r3, r3, #16
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d00a      	beq.n	800a0a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	430a      	orrs	r2, r1
 800a0a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0aa:	f003 0320 	and.w	r3, r3, #32
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d00a      	beq.n	800a0c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	430a      	orrs	r2, r1
 800a0c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d01a      	beq.n	800a10a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	430a      	orrs	r2, r1
 800a0e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0f2:	d10a      	bne.n	800a10a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	430a      	orrs	r2, r1
 800a108:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a10e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a112:	2b00      	cmp	r3, #0
 800a114:	d00a      	beq.n	800a12c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	430a      	orrs	r2, r1
 800a12a:	605a      	str	r2, [r3, #4]
  }
}
 800a12c:	bf00      	nop
 800a12e:	370c      	adds	r7, #12
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr

0800a138 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b086      	sub	sp, #24
 800a13c:	af02      	add	r7, sp, #8
 800a13e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2200      	movs	r2, #0
 800a144:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a148:	f7f8 fa5c 	bl	8002604 <HAL_GetTick>
 800a14c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f003 0308 	and.w	r3, r3, #8
 800a158:	2b08      	cmp	r3, #8
 800a15a:	d10e      	bne.n	800a17a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a15c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a160:	9300      	str	r3, [sp, #0]
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2200      	movs	r2, #0
 800a166:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 f82f 	bl	800a1ce <UART_WaitOnFlagUntilTimeout>
 800a170:	4603      	mov	r3, r0
 800a172:	2b00      	cmp	r3, #0
 800a174:	d001      	beq.n	800a17a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a176:	2303      	movs	r3, #3
 800a178:	e025      	b.n	800a1c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f003 0304 	and.w	r3, r3, #4
 800a184:	2b04      	cmp	r3, #4
 800a186:	d10e      	bne.n	800a1a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a188:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a18c:	9300      	str	r3, [sp, #0]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2200      	movs	r2, #0
 800a192:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 f819 	bl	800a1ce <UART_WaitOnFlagUntilTimeout>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d001      	beq.n	800a1a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1a2:	2303      	movs	r3, #3
 800a1a4:	e00f      	b.n	800a1c6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2220      	movs	r2, #32
 800a1aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2220      	movs	r2, #32
 800a1b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a1c4:	2300      	movs	r3, #0
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3710      	adds	r7, #16
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}

0800a1ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a1ce:	b580      	push	{r7, lr}
 800a1d0:	b084      	sub	sp, #16
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	60f8      	str	r0, [r7, #12]
 800a1d6:	60b9      	str	r1, [r7, #8]
 800a1d8:	603b      	str	r3, [r7, #0]
 800a1da:	4613      	mov	r3, r2
 800a1dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1de:	e062      	b.n	800a2a6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1e0:	69bb      	ldr	r3, [r7, #24]
 800a1e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1e6:	d05e      	beq.n	800a2a6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1e8:	f7f8 fa0c 	bl	8002604 <HAL_GetTick>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	1ad3      	subs	r3, r2, r3
 800a1f2:	69ba      	ldr	r2, [r7, #24]
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d302      	bcc.n	800a1fe <UART_WaitOnFlagUntilTimeout+0x30>
 800a1f8:	69bb      	ldr	r3, [r7, #24]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d11d      	bne.n	800a23a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a20c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	689a      	ldr	r2, [r3, #8]
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f022 0201 	bic.w	r2, r2, #1
 800a21c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2220      	movs	r2, #32
 800a222:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2220      	movs	r2, #32
 800a22a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2200      	movs	r2, #0
 800a232:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a236:	2303      	movs	r3, #3
 800a238:	e045      	b.n	800a2c6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f003 0304 	and.w	r3, r3, #4
 800a244:	2b00      	cmp	r3, #0
 800a246:	d02e      	beq.n	800a2a6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	69db      	ldr	r3, [r3, #28]
 800a24e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a252:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a256:	d126      	bne.n	800a2a6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a260:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a270:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	689a      	ldr	r2, [r3, #8]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f022 0201 	bic.w	r2, r2, #1
 800a280:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2220      	movs	r2, #32
 800a286:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2220      	movs	r2, #32
 800a28e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2220      	movs	r2, #32
 800a296:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2200      	movs	r2, #0
 800a29e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a2a2:	2303      	movs	r3, #3
 800a2a4:	e00f      	b.n	800a2c6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	69da      	ldr	r2, [r3, #28]
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	4013      	ands	r3, r2
 800a2b0:	68ba      	ldr	r2, [r7, #8]
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	bf0c      	ite	eq
 800a2b6:	2301      	moveq	r3, #1
 800a2b8:	2300      	movne	r3, #0
 800a2ba:	b2db      	uxtb	r3, r3
 800a2bc:	461a      	mov	r2, r3
 800a2be:	79fb      	ldrb	r3, [r7, #7]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d08d      	beq.n	800a1e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a2c4:	2300      	movs	r3, #0
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3710      	adds	r7, #16
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
	...

0800a2d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b085      	sub	sp, #20
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	60f8      	str	r0, [r7, #12]
 800a2d8:	60b9      	str	r1, [r7, #8]
 800a2da:	4613      	mov	r3, r2
 800a2dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	68ba      	ldr	r2, [r7, #8]
 800a2e2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	88fa      	ldrh	r2, [r7, #6]
 800a2e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	88fa      	ldrh	r2, [r7, #6]
 800a2f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	689b      	ldr	r3, [r3, #8]
 800a2fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a302:	d10e      	bne.n	800a322 <UART_Start_Receive_IT+0x52>
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	691b      	ldr	r3, [r3, #16]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d105      	bne.n	800a318 <UART_Start_Receive_IT+0x48>
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a312:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a316:	e02d      	b.n	800a374 <UART_Start_Receive_IT+0xa4>
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	22ff      	movs	r2, #255	; 0xff
 800a31c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a320:	e028      	b.n	800a374 <UART_Start_Receive_IT+0xa4>
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d10d      	bne.n	800a346 <UART_Start_Receive_IT+0x76>
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	691b      	ldr	r3, [r3, #16]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d104      	bne.n	800a33c <UART_Start_Receive_IT+0x6c>
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	22ff      	movs	r2, #255	; 0xff
 800a336:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a33a:	e01b      	b.n	800a374 <UART_Start_Receive_IT+0xa4>
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	227f      	movs	r2, #127	; 0x7f
 800a340:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a344:	e016      	b.n	800a374 <UART_Start_Receive_IT+0xa4>
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a34e:	d10d      	bne.n	800a36c <UART_Start_Receive_IT+0x9c>
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	691b      	ldr	r3, [r3, #16]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d104      	bne.n	800a362 <UART_Start_Receive_IT+0x92>
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	227f      	movs	r2, #127	; 0x7f
 800a35c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a360:	e008      	b.n	800a374 <UART_Start_Receive_IT+0xa4>
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	223f      	movs	r2, #63	; 0x3f
 800a366:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a36a:	e003      	b.n	800a374 <UART_Start_Receive_IT+0xa4>
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2200      	movs	r2, #0
 800a370:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2200      	movs	r2, #0
 800a378:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2222      	movs	r2, #34	; 0x22
 800a380:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	689a      	ldr	r2, [r3, #8]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f042 0201 	orr.w	r2, r2, #1
 800a392:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a398:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a39c:	d12a      	bne.n	800a3f4 <UART_Start_Receive_IT+0x124>
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a3a4:	88fa      	ldrh	r2, [r7, #6]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d324      	bcc.n	800a3f4 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	689b      	ldr	r3, [r3, #8]
 800a3ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3b2:	d107      	bne.n	800a3c4 <UART_Start_Receive_IT+0xf4>
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	691b      	ldr	r3, [r3, #16]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d103      	bne.n	800a3c4 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	4a1f      	ldr	r2, [pc, #124]	; (800a43c <UART_Start_Receive_IT+0x16c>)
 800a3c0:	671a      	str	r2, [r3, #112]	; 0x70
 800a3c2:	e002      	b.n	800a3ca <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	4a1e      	ldr	r2, [pc, #120]	; (800a440 <UART_Start_Receive_IT+0x170>)
 800a3c8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	681a      	ldr	r2, [r3, #0]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a3e0:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	689a      	ldr	r2, [r3, #8]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a3f0:	609a      	str	r2, [r3, #8]
 800a3f2:	e01b      	b.n	800a42c <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	689b      	ldr	r3, [r3, #8]
 800a3f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3fc:	d107      	bne.n	800a40e <UART_Start_Receive_IT+0x13e>
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	691b      	ldr	r3, [r3, #16]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d103      	bne.n	800a40e <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	4a0e      	ldr	r2, [pc, #56]	; (800a444 <UART_Start_Receive_IT+0x174>)
 800a40a:	671a      	str	r2, [r3, #112]	; 0x70
 800a40c:	e002      	b.n	800a414 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	4a0d      	ldr	r2, [pc, #52]	; (800a448 <UART_Start_Receive_IT+0x178>)
 800a412:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2200      	movs	r2, #0
 800a418:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800a42a:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800a42c:	2300      	movs	r3, #0
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3714      	adds	r7, #20
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop
 800a43c:	0800a8c5 	.word	0x0800a8c5
 800a440:	0800a6c1 	.word	0x0800a6c1
 800a444:	0800a5e9 	.word	0x0800a5e9
 800a448:	0800a511 	.word	0x0800a511

0800a44c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	681a      	ldr	r2, [r3, #0]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a462:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	6899      	ldr	r1, [r3, #8]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	4b0f      	ldr	r3, [pc, #60]	; (800a4ac <UART_EndRxTransfer+0x60>)
 800a470:	400b      	ands	r3, r1
 800a472:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d107      	bne.n	800a48c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f022 0210 	bic.w	r2, r2, #16
 800a48a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2220      	movs	r2, #32
 800a490:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2200      	movs	r2, #0
 800a498:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2200      	movs	r2, #0
 800a49e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a4a0:	bf00      	nop
 800a4a2:	370c      	adds	r7, #12
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr
 800a4ac:	effffffe 	.word	0xeffffffe

0800a4b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b084      	sub	sp, #16
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4ce:	68f8      	ldr	r0, [r7, #12]
 800a4d0:	f7ff f81a 	bl	8009508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4d4:	bf00      	nop
 800a4d6:	3710      	adds	r7, #16
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4f2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2220      	movs	r2, #32
 800a4f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2200      	movs	r2, #0
 800a500:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f7f7 f9e6 	bl	80018d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a508:	bf00      	nop
 800a50a:	3708      	adds	r7, #8
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a51e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a526:	2b22      	cmp	r3, #34	; 0x22
 800a528:	d152      	bne.n	800a5d0 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a530:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a532:	89bb      	ldrh	r3, [r7, #12]
 800a534:	b2d9      	uxtb	r1, r3
 800a536:	89fb      	ldrh	r3, [r7, #14]
 800a538:	b2da      	uxtb	r2, r3
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a53e:	400a      	ands	r2, r1
 800a540:	b2d2      	uxtb	r2, r2
 800a542:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a548:	1c5a      	adds	r2, r3, #1
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a554:	b29b      	uxth	r3, r3
 800a556:	3b01      	subs	r3, #1
 800a558:	b29a      	uxth	r2, r3
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a566:	b29b      	uxth	r3, r3
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d139      	bne.n	800a5e0 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a57a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	689a      	ldr	r2, [r3, #8]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f022 0201 	bic.w	r2, r2, #1
 800a58a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2220      	movs	r2, #32
 800a590:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2200      	movs	r2, #0
 800a598:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d10f      	bne.n	800a5c2 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f022 0210 	bic.w	r2, r2, #16
 800a5b0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f7fe ffae 	bl	800951c <HAL_UARTEx_RxEventCallback>
 800a5c0:	e002      	b.n	800a5c8 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f7f7 f870 	bl	80016a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a5ce:	e007      	b.n	800a5e0 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	699a      	ldr	r2, [r3, #24]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f042 0208 	orr.w	r2, r2, #8
 800a5de:	619a      	str	r2, [r3, #24]
}
 800a5e0:	bf00      	nop
 800a5e2:	3710      	adds	r7, #16
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a5f6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5fe:	2b22      	cmp	r3, #34	; 0x22
 800a600:	d152      	bne.n	800a6a8 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a608:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a60e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800a610:	89ba      	ldrh	r2, [r7, #12]
 800a612:	89fb      	ldrh	r3, [r7, #14]
 800a614:	4013      	ands	r3, r2
 800a616:	b29a      	uxth	r2, r3
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a620:	1c9a      	adds	r2, r3, #2
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	3b01      	subs	r3, #1
 800a630:	b29a      	uxth	r2, r3
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a63e:	b29b      	uxth	r3, r3
 800a640:	2b00      	cmp	r3, #0
 800a642:	d139      	bne.n	800a6b8 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a652:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	689a      	ldr	r2, [r3, #8]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f022 0201 	bic.w	r2, r2, #1
 800a662:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2220      	movs	r2, #32
 800a668:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a676:	2b01      	cmp	r3, #1
 800a678:	d10f      	bne.n	800a69a <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f022 0210 	bic.w	r2, r2, #16
 800a688:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a690:	4619      	mov	r1, r3
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f7fe ff42 	bl	800951c <HAL_UARTEx_RxEventCallback>
 800a698:	e002      	b.n	800a6a0 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f7f7 f804 	bl	80016a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a6a6:	e007      	b.n	800a6b8 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	699a      	ldr	r2, [r3, #24]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f042 0208 	orr.w	r2, r2, #8
 800a6b6:	619a      	str	r2, [r3, #24]
}
 800a6b8:	bf00      	nop
 800a6ba:	3710      	adds	r7, #16
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b088      	sub	sp, #32
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a6ce:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	69db      	ldr	r3, [r3, #28]
 800a6d6:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	689b      	ldr	r3, [r3, #8]
 800a6e6:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6ee:	2b22      	cmp	r3, #34	; 0x22
 800a6f0:	f040 80d8 	bne.w	800a8a4 <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a6fa:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a6fc:	e0a8      	b.n	800a850 <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a704:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a706:	89bb      	ldrh	r3, [r7, #12]
 800a708:	b2d9      	uxtb	r1, r3
 800a70a:	8b7b      	ldrh	r3, [r7, #26]
 800a70c:	b2da      	uxtb	r2, r3
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a712:	400a      	ands	r2, r1
 800a714:	b2d2      	uxtb	r2, r2
 800a716:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a71c:	1c5a      	adds	r2, r3, #1
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a728:	b29b      	uxth	r3, r3
 800a72a:	3b01      	subs	r3, #1
 800a72c:	b29a      	uxth	r2, r3
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	69db      	ldr	r3, [r3, #28]
 800a73a:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	f003 0307 	and.w	r3, r3, #7
 800a742:	2b00      	cmp	r3, #0
 800a744:	d04d      	beq.n	800a7e2 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a746:	69fb      	ldr	r3, [r7, #28]
 800a748:	f003 0301 	and.w	r3, r3, #1
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d010      	beq.n	800a772 <UART_RxISR_8BIT_FIFOEN+0xb2>
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a756:	2b00      	cmp	r3, #0
 800a758:	d00b      	beq.n	800a772 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	2201      	movs	r2, #1
 800a760:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a768:	f043 0201 	orr.w	r2, r3, #1
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a772:	69fb      	ldr	r3, [r7, #28]
 800a774:	f003 0302 	and.w	r3, r3, #2
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d010      	beq.n	800a79e <UART_RxISR_8BIT_FIFOEN+0xde>
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	f003 0301 	and.w	r3, r3, #1
 800a782:	2b00      	cmp	r3, #0
 800a784:	d00b      	beq.n	800a79e <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	2202      	movs	r2, #2
 800a78c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a794:	f043 0204 	orr.w	r2, r3, #4
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a79e:	69fb      	ldr	r3, [r7, #28]
 800a7a0:	f003 0304 	and.w	r3, r3, #4
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d010      	beq.n	800a7ca <UART_RxISR_8BIT_FIFOEN+0x10a>
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	f003 0301 	and.w	r3, r3, #1
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d00b      	beq.n	800a7ca <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	2204      	movs	r2, #4
 800a7b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7c0:	f043 0202 	orr.w	r2, r3, #2
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d006      	beq.n	800a7e2 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f7fe fe97 	bl	8009508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a7e8:	b29b      	uxth	r3, r3
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d130      	bne.n	800a850 <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a7fc:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	6899      	ldr	r1, [r3, #8]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	4b2c      	ldr	r3, [pc, #176]	; (800a8bc <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 800a80a:	400b      	ands	r3, r1
 800a80c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2220      	movs	r2, #32
 800a812:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2200      	movs	r2, #0
 800a81a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a820:	2b01      	cmp	r3, #1
 800a822:	d10f      	bne.n	800a844 <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f022 0210 	bic.w	r2, r2, #16
 800a832:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a83a:	4619      	mov	r1, r3
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f7fe fe6d 	bl	800951c <HAL_UARTEx_RxEventCallback>
 800a842:	e002      	b.n	800a84a <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f7f6 ff2f 	bl	80016a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a850:	89fb      	ldrh	r3, [r7, #14]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d005      	beq.n	800a862 <UART_RxISR_8BIT_FIFOEN+0x1a2>
 800a856:	69fb      	ldr	r3, [r7, #28]
 800a858:	f003 0320 	and.w	r3, r3, #32
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	f47f af4e 	bne.w	800a6fe <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a868:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a86a:	897b      	ldrh	r3, [r7, #10]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d021      	beq.n	800a8b4 <UART_RxISR_8BIT_FIFOEN+0x1f4>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a876:	897a      	ldrh	r2, [r7, #10]
 800a878:	429a      	cmp	r2, r3
 800a87a:	d21b      	bcs.n	800a8b4 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	689a      	ldr	r2, [r3, #8]
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a88a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	4a0c      	ldr	r2, [pc, #48]	; (800a8c0 <UART_RxISR_8BIT_FIFOEN+0x200>)
 800a890:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f042 0220 	orr.w	r2, r2, #32
 800a8a0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a8a2:	e007      	b.n	800a8b4 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	699a      	ldr	r2, [r3, #24]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f042 0208 	orr.w	r2, r2, #8
 800a8b2:	619a      	str	r2, [r3, #24]
}
 800a8b4:	bf00      	nop
 800a8b6:	3720      	adds	r7, #32
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	effffffe 	.word	0xeffffffe
 800a8c0:	0800a511 	.word	0x0800a511

0800a8c4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b08a      	sub	sp, #40	; 0x28
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a8d2:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	69db      	ldr	r3, [r3, #28]
 800a8da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	689b      	ldr	r3, [r3, #8]
 800a8ea:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8f2:	2b22      	cmp	r3, #34	; 0x22
 800a8f4:	f040 80d8 	bne.w	800aaa8 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a8fe:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a900:	e0a8      	b.n	800aa54 <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a908:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a90e:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800a910:	8aba      	ldrh	r2, [r7, #20]
 800a912:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a914:	4013      	ands	r3, r2
 800a916:	b29a      	uxth	r2, r3
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a920:	1c9a      	adds	r2, r3, #2
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a92c:	b29b      	uxth	r3, r3
 800a92e:	3b01      	subs	r3, #1
 800a930:	b29a      	uxth	r2, r3
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	69db      	ldr	r3, [r3, #28]
 800a93e:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a942:	f003 0307 	and.w	r3, r3, #7
 800a946:	2b00      	cmp	r3, #0
 800a948:	d04d      	beq.n	800a9e6 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94c:	f003 0301 	and.w	r3, r3, #1
 800a950:	2b00      	cmp	r3, #0
 800a952:	d010      	beq.n	800a976 <UART_RxISR_16BIT_FIFOEN+0xb2>
 800a954:	69fb      	ldr	r3, [r7, #28]
 800a956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d00b      	beq.n	800a976 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	2201      	movs	r2, #1
 800a964:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a96c:	f043 0201 	orr.w	r2, r3, #1
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a978:	f003 0302 	and.w	r3, r3, #2
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d010      	beq.n	800a9a2 <UART_RxISR_16BIT_FIFOEN+0xde>
 800a980:	69bb      	ldr	r3, [r7, #24]
 800a982:	f003 0301 	and.w	r3, r3, #1
 800a986:	2b00      	cmp	r3, #0
 800a988:	d00b      	beq.n	800a9a2 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	2202      	movs	r2, #2
 800a990:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a998:	f043 0204 	orr.w	r2, r3, #4
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a4:	f003 0304 	and.w	r3, r3, #4
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d010      	beq.n	800a9ce <UART_RxISR_16BIT_FIFOEN+0x10a>
 800a9ac:	69bb      	ldr	r3, [r7, #24]
 800a9ae:	f003 0301 	and.w	r3, r3, #1
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d00b      	beq.n	800a9ce <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2204      	movs	r2, #4
 800a9bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9c4:	f043 0202 	orr.w	r2, r3, #2
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d006      	beq.n	800a9e6 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f7fe fd95 	bl	8009508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d130      	bne.n	800aa54 <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	681a      	ldr	r2, [r3, #0]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aa00:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	6899      	ldr	r1, [r3, #8]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681a      	ldr	r2, [r3, #0]
 800aa0c:	4b2c      	ldr	r3, [pc, #176]	; (800aac0 <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 800aa0e:	400b      	ands	r3, r1
 800aa10:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2220      	movs	r2, #32
 800aa16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	d10f      	bne.n	800aa48 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f022 0210 	bic.w	r2, r2, #16
 800aa36:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aa3e:	4619      	mov	r1, r3
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f7fe fd6b 	bl	800951c <HAL_UARTEx_RxEventCallback>
 800aa46:	e002      	b.n	800aa4e <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f7f6 fe2d 	bl	80016a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2200      	movs	r2, #0
 800aa52:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aa54:	8afb      	ldrh	r3, [r7, #22]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d005      	beq.n	800aa66 <UART_RxISR_16BIT_FIFOEN+0x1a2>
 800aa5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5c:	f003 0320 	and.w	r3, r3, #32
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	f47f af4e 	bne.w	800a902 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aa6c:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800aa6e:	89fb      	ldrh	r3, [r7, #14]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d021      	beq.n	800aab8 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800aa7a:	89fa      	ldrh	r2, [r7, #14]
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d21b      	bcs.n	800aab8 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	689a      	ldr	r2, [r3, #8]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800aa8e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	4a0c      	ldr	r2, [pc, #48]	; (800aac4 <UART_RxISR_16BIT_FIFOEN+0x200>)
 800aa94:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	681a      	ldr	r2, [r3, #0]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f042 0220 	orr.w	r2, r2, #32
 800aaa4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aaa6:	e007      	b.n	800aab8 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	699a      	ldr	r2, [r3, #24]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f042 0208 	orr.w	r2, r2, #8
 800aab6:	619a      	str	r2, [r3, #24]
}
 800aab8:	bf00      	nop
 800aaba:	3728      	adds	r7, #40	; 0x28
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	effffffe 	.word	0xeffffffe
 800aac4:	0800a5e9 	.word	0x0800a5e9

0800aac8 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b086      	sub	sp, #24
 800aacc:	af00      	add	r7, sp, #0
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	607a      	str	r2, [r7, #4]
 800aad4:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d101      	bne.n	800aae0 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800aadc:	2301      	movs	r3, #1
 800aade:	e056      	b.n	800ab8e <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d106      	bne.n	800aaf8 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2200      	movs	r2, #0
 800aaee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800aaf2:	68f8      	ldr	r0, [r7, #12]
 800aaf4:	f7f7 f950 	bl	8001d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2224      	movs	r2, #36	; 0x24
 800aafc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	681a      	ldr	r2, [r3, #0]
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f022 0201 	bic.w	r2, r2, #1
 800ab0e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab10:	68f8      	ldr	r0, [r7, #12]
 800ab12:	f7fe fd0f 	bl	8009534 <UART_SetConfig>
 800ab16:	4603      	mov	r3, r0
 800ab18:	2b01      	cmp	r3, #1
 800ab1a:	d101      	bne.n	800ab20 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	e036      	b.n	800ab8e <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d002      	beq.n	800ab2e <HAL_RS485Ex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800ab28:	68f8      	ldr	r0, [r7, #12]
 800ab2a:	f7ff fa63 	bl	8009ff4 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	689a      	ldr	r2, [r3, #8]
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ab3c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	689b      	ldr	r3, [r3, #8]
 800ab44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	68ba      	ldr	r2, [r7, #8]
 800ab4e:	430a      	orrs	r2, r1
 800ab50:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	055b      	lsls	r3, r3, #21
 800ab56:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	041b      	lsls	r3, r3, #16
 800ab5c:	697a      	ldr	r2, [r7, #20]
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	681a      	ldr	r2, [r3, #0]
 800ab68:	4b0b      	ldr	r3, [pc, #44]	; (800ab98 <HAL_RS485Ex_Init+0xd0>)
 800ab6a:	4013      	ands	r3, r2
 800ab6c:	68fa      	ldr	r2, [r7, #12]
 800ab6e:	6812      	ldr	r2, [r2, #0]
 800ab70:	6979      	ldr	r1, [r7, #20]
 800ab72:	430b      	orrs	r3, r1
 800ab74:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	681a      	ldr	r2, [r3, #0]
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f042 0201 	orr.w	r2, r2, #1
 800ab84:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ab86:	68f8      	ldr	r0, [r7, #12]
 800ab88:	f7ff fad6 	bl	800a138 <UART_CheckIdleState>
 800ab8c:	4603      	mov	r3, r0
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3718      	adds	r7, #24
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop
 800ab98:	fc00ffff 	.word	0xfc00ffff

0800ab9c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aba4:	bf00      	nop
 800aba6:	370c      	adds	r7, #12
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr

0800abb0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b083      	sub	sp, #12
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800abb8:	bf00      	nop
 800abba:	370c      	adds	r7, #12
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr

0800abc4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b083      	sub	sp, #12
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800abcc:	bf00      	nop
 800abce:	370c      	adds	r7, #12
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr

0800abd8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800abd8:	b480      	push	{r7}
 800abda:	b085      	sub	sp, #20
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800abe6:	2b01      	cmp	r3, #1
 800abe8:	d101      	bne.n	800abee <HAL_UARTEx_DisableFifoMode+0x16>
 800abea:	2302      	movs	r3, #2
 800abec:	e027      	b.n	800ac3e <HAL_UARTEx_DisableFifoMode+0x66>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2201      	movs	r2, #1
 800abf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2224      	movs	r2, #36	; 0x24
 800abfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	681a      	ldr	r2, [r3, #0]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f022 0201 	bic.w	r2, r2, #1
 800ac14:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ac1c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2200      	movs	r2, #0
 800ac22:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	68fa      	ldr	r2, [r7, #12]
 800ac2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2220      	movs	r2, #32
 800ac30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2200      	movs	r2, #0
 800ac38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ac3c:	2300      	movs	r3, #0
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3714      	adds	r7, #20
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr

0800ac4a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b084      	sub	sp, #16
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
 800ac52:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ac5a:	2b01      	cmp	r3, #1
 800ac5c:	d101      	bne.n	800ac62 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ac5e:	2302      	movs	r3, #2
 800ac60:	e02d      	b.n	800acbe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2201      	movs	r2, #1
 800ac66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2224      	movs	r2, #36	; 0x24
 800ac6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f022 0201 	bic.w	r2, r2, #1
 800ac88:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	689b      	ldr	r3, [r3, #8]
 800ac90:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	683a      	ldr	r2, [r7, #0]
 800ac9a:	430a      	orrs	r2, r1
 800ac9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 f850 	bl	800ad44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	68fa      	ldr	r2, [r7, #12]
 800acaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2220      	movs	r2, #32
 800acb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800acbc:	2300      	movs	r3, #0
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3710      	adds	r7, #16
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}

0800acc6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b084      	sub	sp, #16
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
 800acce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800acd6:	2b01      	cmp	r3, #1
 800acd8:	d101      	bne.n	800acde <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800acda:	2302      	movs	r3, #2
 800acdc:	e02d      	b.n	800ad3a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2201      	movs	r2, #1
 800ace2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2224      	movs	r2, #36	; 0x24
 800acea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	681a      	ldr	r2, [r3, #0]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f022 0201 	bic.w	r2, r2, #1
 800ad04:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	689b      	ldr	r3, [r3, #8]
 800ad0c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	683a      	ldr	r2, [r7, #0]
 800ad16:	430a      	orrs	r2, r1
 800ad18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f000 f812 	bl	800ad44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	68fa      	ldr	r2, [r7, #12]
 800ad26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2220      	movs	r2, #32
 800ad2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2200      	movs	r2, #0
 800ad34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ad38:	2300      	movs	r3, #0
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3710      	adds	r7, #16
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
	...

0800ad44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b085      	sub	sp, #20
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d108      	bne.n	800ad66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2201      	movs	r2, #1
 800ad58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2201      	movs	r2, #1
 800ad60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ad64:	e031      	b.n	800adca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ad66:	2310      	movs	r3, #16
 800ad68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ad6a:	2310      	movs	r3, #16
 800ad6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	689b      	ldr	r3, [r3, #8]
 800ad74:	0e5b      	lsrs	r3, r3, #25
 800ad76:	b2db      	uxtb	r3, r3
 800ad78:	f003 0307 	and.w	r3, r3, #7
 800ad7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	689b      	ldr	r3, [r3, #8]
 800ad84:	0f5b      	lsrs	r3, r3, #29
 800ad86:	b2db      	uxtb	r3, r3
 800ad88:	f003 0307 	and.w	r3, r3, #7
 800ad8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ad8e:	7bbb      	ldrb	r3, [r7, #14]
 800ad90:	7b3a      	ldrb	r2, [r7, #12]
 800ad92:	4911      	ldr	r1, [pc, #68]	; (800add8 <UARTEx_SetNbDataToProcess+0x94>)
 800ad94:	5c8a      	ldrb	r2, [r1, r2]
 800ad96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ad9a:	7b3a      	ldrb	r2, [r7, #12]
 800ad9c:	490f      	ldr	r1, [pc, #60]	; (800addc <UARTEx_SetNbDataToProcess+0x98>)
 800ad9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ada0:	fb93 f3f2 	sdiv	r3, r3, r2
 800ada4:	b29a      	uxth	r2, r3
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800adac:	7bfb      	ldrb	r3, [r7, #15]
 800adae:	7b7a      	ldrb	r2, [r7, #13]
 800adb0:	4909      	ldr	r1, [pc, #36]	; (800add8 <UARTEx_SetNbDataToProcess+0x94>)
 800adb2:	5c8a      	ldrb	r2, [r1, r2]
 800adb4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800adb8:	7b7a      	ldrb	r2, [r7, #13]
 800adba:	4908      	ldr	r1, [pc, #32]	; (800addc <UARTEx_SetNbDataToProcess+0x98>)
 800adbc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800adbe:	fb93 f3f2 	sdiv	r3, r3, r2
 800adc2:	b29a      	uxth	r2, r3
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800adca:	bf00      	nop
 800adcc:	3714      	adds	r7, #20
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr
 800add6:	bf00      	nop
 800add8:	0800bd4c 	.word	0x0800bd4c
 800addc:	0800bd54 	.word	0x0800bd54

0800ade0 <__errno>:
 800ade0:	4b01      	ldr	r3, [pc, #4]	; (800ade8 <__errno+0x8>)
 800ade2:	6818      	ldr	r0, [r3, #0]
 800ade4:	4770      	bx	lr
 800ade6:	bf00      	nop
 800ade8:	20000010 	.word	0x20000010

0800adec <__libc_init_array>:
 800adec:	b570      	push	{r4, r5, r6, lr}
 800adee:	4d0d      	ldr	r5, [pc, #52]	; (800ae24 <__libc_init_array+0x38>)
 800adf0:	4c0d      	ldr	r4, [pc, #52]	; (800ae28 <__libc_init_array+0x3c>)
 800adf2:	1b64      	subs	r4, r4, r5
 800adf4:	10a4      	asrs	r4, r4, #2
 800adf6:	2600      	movs	r6, #0
 800adf8:	42a6      	cmp	r6, r4
 800adfa:	d109      	bne.n	800ae10 <__libc_init_array+0x24>
 800adfc:	4d0b      	ldr	r5, [pc, #44]	; (800ae2c <__libc_init_array+0x40>)
 800adfe:	4c0c      	ldr	r4, [pc, #48]	; (800ae30 <__libc_init_array+0x44>)
 800ae00:	f000 ff76 	bl	800bcf0 <_init>
 800ae04:	1b64      	subs	r4, r4, r5
 800ae06:	10a4      	asrs	r4, r4, #2
 800ae08:	2600      	movs	r6, #0
 800ae0a:	42a6      	cmp	r6, r4
 800ae0c:	d105      	bne.n	800ae1a <__libc_init_array+0x2e>
 800ae0e:	bd70      	pop	{r4, r5, r6, pc}
 800ae10:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae14:	4798      	blx	r3
 800ae16:	3601      	adds	r6, #1
 800ae18:	e7ee      	b.n	800adf8 <__libc_init_array+0xc>
 800ae1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae1e:	4798      	blx	r3
 800ae20:	3601      	adds	r6, #1
 800ae22:	e7f2      	b.n	800ae0a <__libc_init_array+0x1e>
 800ae24:	0800bdfc 	.word	0x0800bdfc
 800ae28:	0800bdfc 	.word	0x0800bdfc
 800ae2c:	0800bdfc 	.word	0x0800bdfc
 800ae30:	0800be00 	.word	0x0800be00

0800ae34 <memset>:
 800ae34:	4402      	add	r2, r0
 800ae36:	4603      	mov	r3, r0
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d100      	bne.n	800ae3e <memset+0xa>
 800ae3c:	4770      	bx	lr
 800ae3e:	f803 1b01 	strb.w	r1, [r3], #1
 800ae42:	e7f9      	b.n	800ae38 <memset+0x4>

0800ae44 <iprintf>:
 800ae44:	b40f      	push	{r0, r1, r2, r3}
 800ae46:	4b0a      	ldr	r3, [pc, #40]	; (800ae70 <iprintf+0x2c>)
 800ae48:	b513      	push	{r0, r1, r4, lr}
 800ae4a:	681c      	ldr	r4, [r3, #0]
 800ae4c:	b124      	cbz	r4, 800ae58 <iprintf+0x14>
 800ae4e:	69a3      	ldr	r3, [r4, #24]
 800ae50:	b913      	cbnz	r3, 800ae58 <iprintf+0x14>
 800ae52:	4620      	mov	r0, r4
 800ae54:	f000 f866 	bl	800af24 <__sinit>
 800ae58:	ab05      	add	r3, sp, #20
 800ae5a:	9a04      	ldr	r2, [sp, #16]
 800ae5c:	68a1      	ldr	r1, [r4, #8]
 800ae5e:	9301      	str	r3, [sp, #4]
 800ae60:	4620      	mov	r0, r4
 800ae62:	f000 f983 	bl	800b16c <_vfiprintf_r>
 800ae66:	b002      	add	sp, #8
 800ae68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae6c:	b004      	add	sp, #16
 800ae6e:	4770      	bx	lr
 800ae70:	20000010 	.word	0x20000010

0800ae74 <std>:
 800ae74:	2300      	movs	r3, #0
 800ae76:	b510      	push	{r4, lr}
 800ae78:	4604      	mov	r4, r0
 800ae7a:	e9c0 3300 	strd	r3, r3, [r0]
 800ae7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae82:	6083      	str	r3, [r0, #8]
 800ae84:	8181      	strh	r1, [r0, #12]
 800ae86:	6643      	str	r3, [r0, #100]	; 0x64
 800ae88:	81c2      	strh	r2, [r0, #14]
 800ae8a:	6183      	str	r3, [r0, #24]
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	2208      	movs	r2, #8
 800ae90:	305c      	adds	r0, #92	; 0x5c
 800ae92:	f7ff ffcf 	bl	800ae34 <memset>
 800ae96:	4b05      	ldr	r3, [pc, #20]	; (800aeac <std+0x38>)
 800ae98:	6263      	str	r3, [r4, #36]	; 0x24
 800ae9a:	4b05      	ldr	r3, [pc, #20]	; (800aeb0 <std+0x3c>)
 800ae9c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae9e:	4b05      	ldr	r3, [pc, #20]	; (800aeb4 <std+0x40>)
 800aea0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aea2:	4b05      	ldr	r3, [pc, #20]	; (800aeb8 <std+0x44>)
 800aea4:	6224      	str	r4, [r4, #32]
 800aea6:	6323      	str	r3, [r4, #48]	; 0x30
 800aea8:	bd10      	pop	{r4, pc}
 800aeaa:	bf00      	nop
 800aeac:	0800b715 	.word	0x0800b715
 800aeb0:	0800b737 	.word	0x0800b737
 800aeb4:	0800b76f 	.word	0x0800b76f
 800aeb8:	0800b793 	.word	0x0800b793

0800aebc <_cleanup_r>:
 800aebc:	4901      	ldr	r1, [pc, #4]	; (800aec4 <_cleanup_r+0x8>)
 800aebe:	f000 b8af 	b.w	800b020 <_fwalk_reent>
 800aec2:	bf00      	nop
 800aec4:	0800ba6d 	.word	0x0800ba6d

0800aec8 <__sfmoreglue>:
 800aec8:	b570      	push	{r4, r5, r6, lr}
 800aeca:	1e4a      	subs	r2, r1, #1
 800aecc:	2568      	movs	r5, #104	; 0x68
 800aece:	4355      	muls	r5, r2
 800aed0:	460e      	mov	r6, r1
 800aed2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aed6:	f000 f8c5 	bl	800b064 <_malloc_r>
 800aeda:	4604      	mov	r4, r0
 800aedc:	b140      	cbz	r0, 800aef0 <__sfmoreglue+0x28>
 800aede:	2100      	movs	r1, #0
 800aee0:	e9c0 1600 	strd	r1, r6, [r0]
 800aee4:	300c      	adds	r0, #12
 800aee6:	60a0      	str	r0, [r4, #8]
 800aee8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aeec:	f7ff ffa2 	bl	800ae34 <memset>
 800aef0:	4620      	mov	r0, r4
 800aef2:	bd70      	pop	{r4, r5, r6, pc}

0800aef4 <__sfp_lock_acquire>:
 800aef4:	4801      	ldr	r0, [pc, #4]	; (800aefc <__sfp_lock_acquire+0x8>)
 800aef6:	f000 b8b3 	b.w	800b060 <__retarget_lock_acquire_recursive>
 800aefa:	bf00      	nop
 800aefc:	20000938 	.word	0x20000938

0800af00 <__sfp_lock_release>:
 800af00:	4801      	ldr	r0, [pc, #4]	; (800af08 <__sfp_lock_release+0x8>)
 800af02:	f000 b8ae 	b.w	800b062 <__retarget_lock_release_recursive>
 800af06:	bf00      	nop
 800af08:	20000938 	.word	0x20000938

0800af0c <__sinit_lock_acquire>:
 800af0c:	4801      	ldr	r0, [pc, #4]	; (800af14 <__sinit_lock_acquire+0x8>)
 800af0e:	f000 b8a7 	b.w	800b060 <__retarget_lock_acquire_recursive>
 800af12:	bf00      	nop
 800af14:	20000933 	.word	0x20000933

0800af18 <__sinit_lock_release>:
 800af18:	4801      	ldr	r0, [pc, #4]	; (800af20 <__sinit_lock_release+0x8>)
 800af1a:	f000 b8a2 	b.w	800b062 <__retarget_lock_release_recursive>
 800af1e:	bf00      	nop
 800af20:	20000933 	.word	0x20000933

0800af24 <__sinit>:
 800af24:	b510      	push	{r4, lr}
 800af26:	4604      	mov	r4, r0
 800af28:	f7ff fff0 	bl	800af0c <__sinit_lock_acquire>
 800af2c:	69a3      	ldr	r3, [r4, #24]
 800af2e:	b11b      	cbz	r3, 800af38 <__sinit+0x14>
 800af30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af34:	f7ff bff0 	b.w	800af18 <__sinit_lock_release>
 800af38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800af3c:	6523      	str	r3, [r4, #80]	; 0x50
 800af3e:	4b13      	ldr	r3, [pc, #76]	; (800af8c <__sinit+0x68>)
 800af40:	4a13      	ldr	r2, [pc, #76]	; (800af90 <__sinit+0x6c>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	62a2      	str	r2, [r4, #40]	; 0x28
 800af46:	42a3      	cmp	r3, r4
 800af48:	bf04      	itt	eq
 800af4a:	2301      	moveq	r3, #1
 800af4c:	61a3      	streq	r3, [r4, #24]
 800af4e:	4620      	mov	r0, r4
 800af50:	f000 f820 	bl	800af94 <__sfp>
 800af54:	6060      	str	r0, [r4, #4]
 800af56:	4620      	mov	r0, r4
 800af58:	f000 f81c 	bl	800af94 <__sfp>
 800af5c:	60a0      	str	r0, [r4, #8]
 800af5e:	4620      	mov	r0, r4
 800af60:	f000 f818 	bl	800af94 <__sfp>
 800af64:	2200      	movs	r2, #0
 800af66:	60e0      	str	r0, [r4, #12]
 800af68:	2104      	movs	r1, #4
 800af6a:	6860      	ldr	r0, [r4, #4]
 800af6c:	f7ff ff82 	bl	800ae74 <std>
 800af70:	68a0      	ldr	r0, [r4, #8]
 800af72:	2201      	movs	r2, #1
 800af74:	2109      	movs	r1, #9
 800af76:	f7ff ff7d 	bl	800ae74 <std>
 800af7a:	68e0      	ldr	r0, [r4, #12]
 800af7c:	2202      	movs	r2, #2
 800af7e:	2112      	movs	r1, #18
 800af80:	f7ff ff78 	bl	800ae74 <std>
 800af84:	2301      	movs	r3, #1
 800af86:	61a3      	str	r3, [r4, #24]
 800af88:	e7d2      	b.n	800af30 <__sinit+0xc>
 800af8a:	bf00      	nop
 800af8c:	0800bd5c 	.word	0x0800bd5c
 800af90:	0800aebd 	.word	0x0800aebd

0800af94 <__sfp>:
 800af94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af96:	4607      	mov	r7, r0
 800af98:	f7ff ffac 	bl	800aef4 <__sfp_lock_acquire>
 800af9c:	4b1e      	ldr	r3, [pc, #120]	; (800b018 <__sfp+0x84>)
 800af9e:	681e      	ldr	r6, [r3, #0]
 800afa0:	69b3      	ldr	r3, [r6, #24]
 800afa2:	b913      	cbnz	r3, 800afaa <__sfp+0x16>
 800afa4:	4630      	mov	r0, r6
 800afa6:	f7ff ffbd 	bl	800af24 <__sinit>
 800afaa:	3648      	adds	r6, #72	; 0x48
 800afac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800afb0:	3b01      	subs	r3, #1
 800afb2:	d503      	bpl.n	800afbc <__sfp+0x28>
 800afb4:	6833      	ldr	r3, [r6, #0]
 800afb6:	b30b      	cbz	r3, 800affc <__sfp+0x68>
 800afb8:	6836      	ldr	r6, [r6, #0]
 800afba:	e7f7      	b.n	800afac <__sfp+0x18>
 800afbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800afc0:	b9d5      	cbnz	r5, 800aff8 <__sfp+0x64>
 800afc2:	4b16      	ldr	r3, [pc, #88]	; (800b01c <__sfp+0x88>)
 800afc4:	60e3      	str	r3, [r4, #12]
 800afc6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800afca:	6665      	str	r5, [r4, #100]	; 0x64
 800afcc:	f000 f847 	bl	800b05e <__retarget_lock_init_recursive>
 800afd0:	f7ff ff96 	bl	800af00 <__sfp_lock_release>
 800afd4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800afd8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800afdc:	6025      	str	r5, [r4, #0]
 800afde:	61a5      	str	r5, [r4, #24]
 800afe0:	2208      	movs	r2, #8
 800afe2:	4629      	mov	r1, r5
 800afe4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800afe8:	f7ff ff24 	bl	800ae34 <memset>
 800afec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aff0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aff4:	4620      	mov	r0, r4
 800aff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aff8:	3468      	adds	r4, #104	; 0x68
 800affa:	e7d9      	b.n	800afb0 <__sfp+0x1c>
 800affc:	2104      	movs	r1, #4
 800affe:	4638      	mov	r0, r7
 800b000:	f7ff ff62 	bl	800aec8 <__sfmoreglue>
 800b004:	4604      	mov	r4, r0
 800b006:	6030      	str	r0, [r6, #0]
 800b008:	2800      	cmp	r0, #0
 800b00a:	d1d5      	bne.n	800afb8 <__sfp+0x24>
 800b00c:	f7ff ff78 	bl	800af00 <__sfp_lock_release>
 800b010:	230c      	movs	r3, #12
 800b012:	603b      	str	r3, [r7, #0]
 800b014:	e7ee      	b.n	800aff4 <__sfp+0x60>
 800b016:	bf00      	nop
 800b018:	0800bd5c 	.word	0x0800bd5c
 800b01c:	ffff0001 	.word	0xffff0001

0800b020 <_fwalk_reent>:
 800b020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b024:	4606      	mov	r6, r0
 800b026:	4688      	mov	r8, r1
 800b028:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b02c:	2700      	movs	r7, #0
 800b02e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b032:	f1b9 0901 	subs.w	r9, r9, #1
 800b036:	d505      	bpl.n	800b044 <_fwalk_reent+0x24>
 800b038:	6824      	ldr	r4, [r4, #0]
 800b03a:	2c00      	cmp	r4, #0
 800b03c:	d1f7      	bne.n	800b02e <_fwalk_reent+0xe>
 800b03e:	4638      	mov	r0, r7
 800b040:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b044:	89ab      	ldrh	r3, [r5, #12]
 800b046:	2b01      	cmp	r3, #1
 800b048:	d907      	bls.n	800b05a <_fwalk_reent+0x3a>
 800b04a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b04e:	3301      	adds	r3, #1
 800b050:	d003      	beq.n	800b05a <_fwalk_reent+0x3a>
 800b052:	4629      	mov	r1, r5
 800b054:	4630      	mov	r0, r6
 800b056:	47c0      	blx	r8
 800b058:	4307      	orrs	r7, r0
 800b05a:	3568      	adds	r5, #104	; 0x68
 800b05c:	e7e9      	b.n	800b032 <_fwalk_reent+0x12>

0800b05e <__retarget_lock_init_recursive>:
 800b05e:	4770      	bx	lr

0800b060 <__retarget_lock_acquire_recursive>:
 800b060:	4770      	bx	lr

0800b062 <__retarget_lock_release_recursive>:
 800b062:	4770      	bx	lr

0800b064 <_malloc_r>:
 800b064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b066:	1ccd      	adds	r5, r1, #3
 800b068:	f025 0503 	bic.w	r5, r5, #3
 800b06c:	3508      	adds	r5, #8
 800b06e:	2d0c      	cmp	r5, #12
 800b070:	bf38      	it	cc
 800b072:	250c      	movcc	r5, #12
 800b074:	2d00      	cmp	r5, #0
 800b076:	4606      	mov	r6, r0
 800b078:	db01      	blt.n	800b07e <_malloc_r+0x1a>
 800b07a:	42a9      	cmp	r1, r5
 800b07c:	d903      	bls.n	800b086 <_malloc_r+0x22>
 800b07e:	230c      	movs	r3, #12
 800b080:	6033      	str	r3, [r6, #0]
 800b082:	2000      	movs	r0, #0
 800b084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b086:	f000 fda3 	bl	800bbd0 <__malloc_lock>
 800b08a:	4921      	ldr	r1, [pc, #132]	; (800b110 <_malloc_r+0xac>)
 800b08c:	680a      	ldr	r2, [r1, #0]
 800b08e:	4614      	mov	r4, r2
 800b090:	b99c      	cbnz	r4, 800b0ba <_malloc_r+0x56>
 800b092:	4f20      	ldr	r7, [pc, #128]	; (800b114 <_malloc_r+0xb0>)
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	b923      	cbnz	r3, 800b0a2 <_malloc_r+0x3e>
 800b098:	4621      	mov	r1, r4
 800b09a:	4630      	mov	r0, r6
 800b09c:	f000 fb2a 	bl	800b6f4 <_sbrk_r>
 800b0a0:	6038      	str	r0, [r7, #0]
 800b0a2:	4629      	mov	r1, r5
 800b0a4:	4630      	mov	r0, r6
 800b0a6:	f000 fb25 	bl	800b6f4 <_sbrk_r>
 800b0aa:	1c43      	adds	r3, r0, #1
 800b0ac:	d123      	bne.n	800b0f6 <_malloc_r+0x92>
 800b0ae:	230c      	movs	r3, #12
 800b0b0:	6033      	str	r3, [r6, #0]
 800b0b2:	4630      	mov	r0, r6
 800b0b4:	f000 fd92 	bl	800bbdc <__malloc_unlock>
 800b0b8:	e7e3      	b.n	800b082 <_malloc_r+0x1e>
 800b0ba:	6823      	ldr	r3, [r4, #0]
 800b0bc:	1b5b      	subs	r3, r3, r5
 800b0be:	d417      	bmi.n	800b0f0 <_malloc_r+0x8c>
 800b0c0:	2b0b      	cmp	r3, #11
 800b0c2:	d903      	bls.n	800b0cc <_malloc_r+0x68>
 800b0c4:	6023      	str	r3, [r4, #0]
 800b0c6:	441c      	add	r4, r3
 800b0c8:	6025      	str	r5, [r4, #0]
 800b0ca:	e004      	b.n	800b0d6 <_malloc_r+0x72>
 800b0cc:	6863      	ldr	r3, [r4, #4]
 800b0ce:	42a2      	cmp	r2, r4
 800b0d0:	bf0c      	ite	eq
 800b0d2:	600b      	streq	r3, [r1, #0]
 800b0d4:	6053      	strne	r3, [r2, #4]
 800b0d6:	4630      	mov	r0, r6
 800b0d8:	f000 fd80 	bl	800bbdc <__malloc_unlock>
 800b0dc:	f104 000b 	add.w	r0, r4, #11
 800b0e0:	1d23      	adds	r3, r4, #4
 800b0e2:	f020 0007 	bic.w	r0, r0, #7
 800b0e6:	1ac2      	subs	r2, r0, r3
 800b0e8:	d0cc      	beq.n	800b084 <_malloc_r+0x20>
 800b0ea:	1a1b      	subs	r3, r3, r0
 800b0ec:	50a3      	str	r3, [r4, r2]
 800b0ee:	e7c9      	b.n	800b084 <_malloc_r+0x20>
 800b0f0:	4622      	mov	r2, r4
 800b0f2:	6864      	ldr	r4, [r4, #4]
 800b0f4:	e7cc      	b.n	800b090 <_malloc_r+0x2c>
 800b0f6:	1cc4      	adds	r4, r0, #3
 800b0f8:	f024 0403 	bic.w	r4, r4, #3
 800b0fc:	42a0      	cmp	r0, r4
 800b0fe:	d0e3      	beq.n	800b0c8 <_malloc_r+0x64>
 800b100:	1a21      	subs	r1, r4, r0
 800b102:	4630      	mov	r0, r6
 800b104:	f000 faf6 	bl	800b6f4 <_sbrk_r>
 800b108:	3001      	adds	r0, #1
 800b10a:	d1dd      	bne.n	800b0c8 <_malloc_r+0x64>
 800b10c:	e7cf      	b.n	800b0ae <_malloc_r+0x4a>
 800b10e:	bf00      	nop
 800b110:	20000098 	.word	0x20000098
 800b114:	2000009c 	.word	0x2000009c

0800b118 <__sfputc_r>:
 800b118:	6893      	ldr	r3, [r2, #8]
 800b11a:	3b01      	subs	r3, #1
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	b410      	push	{r4}
 800b120:	6093      	str	r3, [r2, #8]
 800b122:	da08      	bge.n	800b136 <__sfputc_r+0x1e>
 800b124:	6994      	ldr	r4, [r2, #24]
 800b126:	42a3      	cmp	r3, r4
 800b128:	db01      	blt.n	800b12e <__sfputc_r+0x16>
 800b12a:	290a      	cmp	r1, #10
 800b12c:	d103      	bne.n	800b136 <__sfputc_r+0x1e>
 800b12e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b132:	f000 bb33 	b.w	800b79c <__swbuf_r>
 800b136:	6813      	ldr	r3, [r2, #0]
 800b138:	1c58      	adds	r0, r3, #1
 800b13a:	6010      	str	r0, [r2, #0]
 800b13c:	7019      	strb	r1, [r3, #0]
 800b13e:	4608      	mov	r0, r1
 800b140:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b144:	4770      	bx	lr

0800b146 <__sfputs_r>:
 800b146:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b148:	4606      	mov	r6, r0
 800b14a:	460f      	mov	r7, r1
 800b14c:	4614      	mov	r4, r2
 800b14e:	18d5      	adds	r5, r2, r3
 800b150:	42ac      	cmp	r4, r5
 800b152:	d101      	bne.n	800b158 <__sfputs_r+0x12>
 800b154:	2000      	movs	r0, #0
 800b156:	e007      	b.n	800b168 <__sfputs_r+0x22>
 800b158:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b15c:	463a      	mov	r2, r7
 800b15e:	4630      	mov	r0, r6
 800b160:	f7ff ffda 	bl	800b118 <__sfputc_r>
 800b164:	1c43      	adds	r3, r0, #1
 800b166:	d1f3      	bne.n	800b150 <__sfputs_r+0xa>
 800b168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b16c <_vfiprintf_r>:
 800b16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b170:	460d      	mov	r5, r1
 800b172:	b09d      	sub	sp, #116	; 0x74
 800b174:	4614      	mov	r4, r2
 800b176:	4698      	mov	r8, r3
 800b178:	4606      	mov	r6, r0
 800b17a:	b118      	cbz	r0, 800b184 <_vfiprintf_r+0x18>
 800b17c:	6983      	ldr	r3, [r0, #24]
 800b17e:	b90b      	cbnz	r3, 800b184 <_vfiprintf_r+0x18>
 800b180:	f7ff fed0 	bl	800af24 <__sinit>
 800b184:	4b89      	ldr	r3, [pc, #548]	; (800b3ac <_vfiprintf_r+0x240>)
 800b186:	429d      	cmp	r5, r3
 800b188:	d11b      	bne.n	800b1c2 <_vfiprintf_r+0x56>
 800b18a:	6875      	ldr	r5, [r6, #4]
 800b18c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b18e:	07d9      	lsls	r1, r3, #31
 800b190:	d405      	bmi.n	800b19e <_vfiprintf_r+0x32>
 800b192:	89ab      	ldrh	r3, [r5, #12]
 800b194:	059a      	lsls	r2, r3, #22
 800b196:	d402      	bmi.n	800b19e <_vfiprintf_r+0x32>
 800b198:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b19a:	f7ff ff61 	bl	800b060 <__retarget_lock_acquire_recursive>
 800b19e:	89ab      	ldrh	r3, [r5, #12]
 800b1a0:	071b      	lsls	r3, r3, #28
 800b1a2:	d501      	bpl.n	800b1a8 <_vfiprintf_r+0x3c>
 800b1a4:	692b      	ldr	r3, [r5, #16]
 800b1a6:	b9eb      	cbnz	r3, 800b1e4 <_vfiprintf_r+0x78>
 800b1a8:	4629      	mov	r1, r5
 800b1aa:	4630      	mov	r0, r6
 800b1ac:	f000 fb5a 	bl	800b864 <__swsetup_r>
 800b1b0:	b1c0      	cbz	r0, 800b1e4 <_vfiprintf_r+0x78>
 800b1b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1b4:	07dc      	lsls	r4, r3, #31
 800b1b6:	d50e      	bpl.n	800b1d6 <_vfiprintf_r+0x6a>
 800b1b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1bc:	b01d      	add	sp, #116	; 0x74
 800b1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1c2:	4b7b      	ldr	r3, [pc, #492]	; (800b3b0 <_vfiprintf_r+0x244>)
 800b1c4:	429d      	cmp	r5, r3
 800b1c6:	d101      	bne.n	800b1cc <_vfiprintf_r+0x60>
 800b1c8:	68b5      	ldr	r5, [r6, #8]
 800b1ca:	e7df      	b.n	800b18c <_vfiprintf_r+0x20>
 800b1cc:	4b79      	ldr	r3, [pc, #484]	; (800b3b4 <_vfiprintf_r+0x248>)
 800b1ce:	429d      	cmp	r5, r3
 800b1d0:	bf08      	it	eq
 800b1d2:	68f5      	ldreq	r5, [r6, #12]
 800b1d4:	e7da      	b.n	800b18c <_vfiprintf_r+0x20>
 800b1d6:	89ab      	ldrh	r3, [r5, #12]
 800b1d8:	0598      	lsls	r0, r3, #22
 800b1da:	d4ed      	bmi.n	800b1b8 <_vfiprintf_r+0x4c>
 800b1dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1de:	f7ff ff40 	bl	800b062 <__retarget_lock_release_recursive>
 800b1e2:	e7e9      	b.n	800b1b8 <_vfiprintf_r+0x4c>
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	9309      	str	r3, [sp, #36]	; 0x24
 800b1e8:	2320      	movs	r3, #32
 800b1ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1f2:	2330      	movs	r3, #48	; 0x30
 800b1f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b3b8 <_vfiprintf_r+0x24c>
 800b1f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1fc:	f04f 0901 	mov.w	r9, #1
 800b200:	4623      	mov	r3, r4
 800b202:	469a      	mov	sl, r3
 800b204:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b208:	b10a      	cbz	r2, 800b20e <_vfiprintf_r+0xa2>
 800b20a:	2a25      	cmp	r2, #37	; 0x25
 800b20c:	d1f9      	bne.n	800b202 <_vfiprintf_r+0x96>
 800b20e:	ebba 0b04 	subs.w	fp, sl, r4
 800b212:	d00b      	beq.n	800b22c <_vfiprintf_r+0xc0>
 800b214:	465b      	mov	r3, fp
 800b216:	4622      	mov	r2, r4
 800b218:	4629      	mov	r1, r5
 800b21a:	4630      	mov	r0, r6
 800b21c:	f7ff ff93 	bl	800b146 <__sfputs_r>
 800b220:	3001      	adds	r0, #1
 800b222:	f000 80aa 	beq.w	800b37a <_vfiprintf_r+0x20e>
 800b226:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b228:	445a      	add	r2, fp
 800b22a:	9209      	str	r2, [sp, #36]	; 0x24
 800b22c:	f89a 3000 	ldrb.w	r3, [sl]
 800b230:	2b00      	cmp	r3, #0
 800b232:	f000 80a2 	beq.w	800b37a <_vfiprintf_r+0x20e>
 800b236:	2300      	movs	r3, #0
 800b238:	f04f 32ff 	mov.w	r2, #4294967295
 800b23c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b240:	f10a 0a01 	add.w	sl, sl, #1
 800b244:	9304      	str	r3, [sp, #16]
 800b246:	9307      	str	r3, [sp, #28]
 800b248:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b24c:	931a      	str	r3, [sp, #104]	; 0x68
 800b24e:	4654      	mov	r4, sl
 800b250:	2205      	movs	r2, #5
 800b252:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b256:	4858      	ldr	r0, [pc, #352]	; (800b3b8 <_vfiprintf_r+0x24c>)
 800b258:	f7f5 f842 	bl	80002e0 <memchr>
 800b25c:	9a04      	ldr	r2, [sp, #16]
 800b25e:	b9d8      	cbnz	r0, 800b298 <_vfiprintf_r+0x12c>
 800b260:	06d1      	lsls	r1, r2, #27
 800b262:	bf44      	itt	mi
 800b264:	2320      	movmi	r3, #32
 800b266:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b26a:	0713      	lsls	r3, r2, #28
 800b26c:	bf44      	itt	mi
 800b26e:	232b      	movmi	r3, #43	; 0x2b
 800b270:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b274:	f89a 3000 	ldrb.w	r3, [sl]
 800b278:	2b2a      	cmp	r3, #42	; 0x2a
 800b27a:	d015      	beq.n	800b2a8 <_vfiprintf_r+0x13c>
 800b27c:	9a07      	ldr	r2, [sp, #28]
 800b27e:	4654      	mov	r4, sl
 800b280:	2000      	movs	r0, #0
 800b282:	f04f 0c0a 	mov.w	ip, #10
 800b286:	4621      	mov	r1, r4
 800b288:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b28c:	3b30      	subs	r3, #48	; 0x30
 800b28e:	2b09      	cmp	r3, #9
 800b290:	d94e      	bls.n	800b330 <_vfiprintf_r+0x1c4>
 800b292:	b1b0      	cbz	r0, 800b2c2 <_vfiprintf_r+0x156>
 800b294:	9207      	str	r2, [sp, #28]
 800b296:	e014      	b.n	800b2c2 <_vfiprintf_r+0x156>
 800b298:	eba0 0308 	sub.w	r3, r0, r8
 800b29c:	fa09 f303 	lsl.w	r3, r9, r3
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	9304      	str	r3, [sp, #16]
 800b2a4:	46a2      	mov	sl, r4
 800b2a6:	e7d2      	b.n	800b24e <_vfiprintf_r+0xe2>
 800b2a8:	9b03      	ldr	r3, [sp, #12]
 800b2aa:	1d19      	adds	r1, r3, #4
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	9103      	str	r1, [sp, #12]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	bfbb      	ittet	lt
 800b2b4:	425b      	neglt	r3, r3
 800b2b6:	f042 0202 	orrlt.w	r2, r2, #2
 800b2ba:	9307      	strge	r3, [sp, #28]
 800b2bc:	9307      	strlt	r3, [sp, #28]
 800b2be:	bfb8      	it	lt
 800b2c0:	9204      	strlt	r2, [sp, #16]
 800b2c2:	7823      	ldrb	r3, [r4, #0]
 800b2c4:	2b2e      	cmp	r3, #46	; 0x2e
 800b2c6:	d10c      	bne.n	800b2e2 <_vfiprintf_r+0x176>
 800b2c8:	7863      	ldrb	r3, [r4, #1]
 800b2ca:	2b2a      	cmp	r3, #42	; 0x2a
 800b2cc:	d135      	bne.n	800b33a <_vfiprintf_r+0x1ce>
 800b2ce:	9b03      	ldr	r3, [sp, #12]
 800b2d0:	1d1a      	adds	r2, r3, #4
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	9203      	str	r2, [sp, #12]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	bfb8      	it	lt
 800b2da:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2de:	3402      	adds	r4, #2
 800b2e0:	9305      	str	r3, [sp, #20]
 800b2e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b3c8 <_vfiprintf_r+0x25c>
 800b2e6:	7821      	ldrb	r1, [r4, #0]
 800b2e8:	2203      	movs	r2, #3
 800b2ea:	4650      	mov	r0, sl
 800b2ec:	f7f4 fff8 	bl	80002e0 <memchr>
 800b2f0:	b140      	cbz	r0, 800b304 <_vfiprintf_r+0x198>
 800b2f2:	2340      	movs	r3, #64	; 0x40
 800b2f4:	eba0 000a 	sub.w	r0, r0, sl
 800b2f8:	fa03 f000 	lsl.w	r0, r3, r0
 800b2fc:	9b04      	ldr	r3, [sp, #16]
 800b2fe:	4303      	orrs	r3, r0
 800b300:	3401      	adds	r4, #1
 800b302:	9304      	str	r3, [sp, #16]
 800b304:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b308:	482c      	ldr	r0, [pc, #176]	; (800b3bc <_vfiprintf_r+0x250>)
 800b30a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b30e:	2206      	movs	r2, #6
 800b310:	f7f4 ffe6 	bl	80002e0 <memchr>
 800b314:	2800      	cmp	r0, #0
 800b316:	d03f      	beq.n	800b398 <_vfiprintf_r+0x22c>
 800b318:	4b29      	ldr	r3, [pc, #164]	; (800b3c0 <_vfiprintf_r+0x254>)
 800b31a:	bb1b      	cbnz	r3, 800b364 <_vfiprintf_r+0x1f8>
 800b31c:	9b03      	ldr	r3, [sp, #12]
 800b31e:	3307      	adds	r3, #7
 800b320:	f023 0307 	bic.w	r3, r3, #7
 800b324:	3308      	adds	r3, #8
 800b326:	9303      	str	r3, [sp, #12]
 800b328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b32a:	443b      	add	r3, r7
 800b32c:	9309      	str	r3, [sp, #36]	; 0x24
 800b32e:	e767      	b.n	800b200 <_vfiprintf_r+0x94>
 800b330:	fb0c 3202 	mla	r2, ip, r2, r3
 800b334:	460c      	mov	r4, r1
 800b336:	2001      	movs	r0, #1
 800b338:	e7a5      	b.n	800b286 <_vfiprintf_r+0x11a>
 800b33a:	2300      	movs	r3, #0
 800b33c:	3401      	adds	r4, #1
 800b33e:	9305      	str	r3, [sp, #20]
 800b340:	4619      	mov	r1, r3
 800b342:	f04f 0c0a 	mov.w	ip, #10
 800b346:	4620      	mov	r0, r4
 800b348:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b34c:	3a30      	subs	r2, #48	; 0x30
 800b34e:	2a09      	cmp	r2, #9
 800b350:	d903      	bls.n	800b35a <_vfiprintf_r+0x1ee>
 800b352:	2b00      	cmp	r3, #0
 800b354:	d0c5      	beq.n	800b2e2 <_vfiprintf_r+0x176>
 800b356:	9105      	str	r1, [sp, #20]
 800b358:	e7c3      	b.n	800b2e2 <_vfiprintf_r+0x176>
 800b35a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b35e:	4604      	mov	r4, r0
 800b360:	2301      	movs	r3, #1
 800b362:	e7f0      	b.n	800b346 <_vfiprintf_r+0x1da>
 800b364:	ab03      	add	r3, sp, #12
 800b366:	9300      	str	r3, [sp, #0]
 800b368:	462a      	mov	r2, r5
 800b36a:	4b16      	ldr	r3, [pc, #88]	; (800b3c4 <_vfiprintf_r+0x258>)
 800b36c:	a904      	add	r1, sp, #16
 800b36e:	4630      	mov	r0, r6
 800b370:	f3af 8000 	nop.w
 800b374:	4607      	mov	r7, r0
 800b376:	1c78      	adds	r0, r7, #1
 800b378:	d1d6      	bne.n	800b328 <_vfiprintf_r+0x1bc>
 800b37a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b37c:	07d9      	lsls	r1, r3, #31
 800b37e:	d405      	bmi.n	800b38c <_vfiprintf_r+0x220>
 800b380:	89ab      	ldrh	r3, [r5, #12]
 800b382:	059a      	lsls	r2, r3, #22
 800b384:	d402      	bmi.n	800b38c <_vfiprintf_r+0x220>
 800b386:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b388:	f7ff fe6b 	bl	800b062 <__retarget_lock_release_recursive>
 800b38c:	89ab      	ldrh	r3, [r5, #12]
 800b38e:	065b      	lsls	r3, r3, #25
 800b390:	f53f af12 	bmi.w	800b1b8 <_vfiprintf_r+0x4c>
 800b394:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b396:	e711      	b.n	800b1bc <_vfiprintf_r+0x50>
 800b398:	ab03      	add	r3, sp, #12
 800b39a:	9300      	str	r3, [sp, #0]
 800b39c:	462a      	mov	r2, r5
 800b39e:	4b09      	ldr	r3, [pc, #36]	; (800b3c4 <_vfiprintf_r+0x258>)
 800b3a0:	a904      	add	r1, sp, #16
 800b3a2:	4630      	mov	r0, r6
 800b3a4:	f000 f880 	bl	800b4a8 <_printf_i>
 800b3a8:	e7e4      	b.n	800b374 <_vfiprintf_r+0x208>
 800b3aa:	bf00      	nop
 800b3ac:	0800bd80 	.word	0x0800bd80
 800b3b0:	0800bda0 	.word	0x0800bda0
 800b3b4:	0800bd60 	.word	0x0800bd60
 800b3b8:	0800bdc0 	.word	0x0800bdc0
 800b3bc:	0800bdca 	.word	0x0800bdca
 800b3c0:	00000000 	.word	0x00000000
 800b3c4:	0800b147 	.word	0x0800b147
 800b3c8:	0800bdc6 	.word	0x0800bdc6

0800b3cc <_printf_common>:
 800b3cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3d0:	4616      	mov	r6, r2
 800b3d2:	4699      	mov	r9, r3
 800b3d4:	688a      	ldr	r2, [r1, #8]
 800b3d6:	690b      	ldr	r3, [r1, #16]
 800b3d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	bfb8      	it	lt
 800b3e0:	4613      	movlt	r3, r2
 800b3e2:	6033      	str	r3, [r6, #0]
 800b3e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b3e8:	4607      	mov	r7, r0
 800b3ea:	460c      	mov	r4, r1
 800b3ec:	b10a      	cbz	r2, 800b3f2 <_printf_common+0x26>
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	6033      	str	r3, [r6, #0]
 800b3f2:	6823      	ldr	r3, [r4, #0]
 800b3f4:	0699      	lsls	r1, r3, #26
 800b3f6:	bf42      	ittt	mi
 800b3f8:	6833      	ldrmi	r3, [r6, #0]
 800b3fa:	3302      	addmi	r3, #2
 800b3fc:	6033      	strmi	r3, [r6, #0]
 800b3fe:	6825      	ldr	r5, [r4, #0]
 800b400:	f015 0506 	ands.w	r5, r5, #6
 800b404:	d106      	bne.n	800b414 <_printf_common+0x48>
 800b406:	f104 0a19 	add.w	sl, r4, #25
 800b40a:	68e3      	ldr	r3, [r4, #12]
 800b40c:	6832      	ldr	r2, [r6, #0]
 800b40e:	1a9b      	subs	r3, r3, r2
 800b410:	42ab      	cmp	r3, r5
 800b412:	dc26      	bgt.n	800b462 <_printf_common+0x96>
 800b414:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b418:	1e13      	subs	r3, r2, #0
 800b41a:	6822      	ldr	r2, [r4, #0]
 800b41c:	bf18      	it	ne
 800b41e:	2301      	movne	r3, #1
 800b420:	0692      	lsls	r2, r2, #26
 800b422:	d42b      	bmi.n	800b47c <_printf_common+0xb0>
 800b424:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b428:	4649      	mov	r1, r9
 800b42a:	4638      	mov	r0, r7
 800b42c:	47c0      	blx	r8
 800b42e:	3001      	adds	r0, #1
 800b430:	d01e      	beq.n	800b470 <_printf_common+0xa4>
 800b432:	6823      	ldr	r3, [r4, #0]
 800b434:	68e5      	ldr	r5, [r4, #12]
 800b436:	6832      	ldr	r2, [r6, #0]
 800b438:	f003 0306 	and.w	r3, r3, #6
 800b43c:	2b04      	cmp	r3, #4
 800b43e:	bf08      	it	eq
 800b440:	1aad      	subeq	r5, r5, r2
 800b442:	68a3      	ldr	r3, [r4, #8]
 800b444:	6922      	ldr	r2, [r4, #16]
 800b446:	bf0c      	ite	eq
 800b448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b44c:	2500      	movne	r5, #0
 800b44e:	4293      	cmp	r3, r2
 800b450:	bfc4      	itt	gt
 800b452:	1a9b      	subgt	r3, r3, r2
 800b454:	18ed      	addgt	r5, r5, r3
 800b456:	2600      	movs	r6, #0
 800b458:	341a      	adds	r4, #26
 800b45a:	42b5      	cmp	r5, r6
 800b45c:	d11a      	bne.n	800b494 <_printf_common+0xc8>
 800b45e:	2000      	movs	r0, #0
 800b460:	e008      	b.n	800b474 <_printf_common+0xa8>
 800b462:	2301      	movs	r3, #1
 800b464:	4652      	mov	r2, sl
 800b466:	4649      	mov	r1, r9
 800b468:	4638      	mov	r0, r7
 800b46a:	47c0      	blx	r8
 800b46c:	3001      	adds	r0, #1
 800b46e:	d103      	bne.n	800b478 <_printf_common+0xac>
 800b470:	f04f 30ff 	mov.w	r0, #4294967295
 800b474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b478:	3501      	adds	r5, #1
 800b47a:	e7c6      	b.n	800b40a <_printf_common+0x3e>
 800b47c:	18e1      	adds	r1, r4, r3
 800b47e:	1c5a      	adds	r2, r3, #1
 800b480:	2030      	movs	r0, #48	; 0x30
 800b482:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b486:	4422      	add	r2, r4
 800b488:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b48c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b490:	3302      	adds	r3, #2
 800b492:	e7c7      	b.n	800b424 <_printf_common+0x58>
 800b494:	2301      	movs	r3, #1
 800b496:	4622      	mov	r2, r4
 800b498:	4649      	mov	r1, r9
 800b49a:	4638      	mov	r0, r7
 800b49c:	47c0      	blx	r8
 800b49e:	3001      	adds	r0, #1
 800b4a0:	d0e6      	beq.n	800b470 <_printf_common+0xa4>
 800b4a2:	3601      	adds	r6, #1
 800b4a4:	e7d9      	b.n	800b45a <_printf_common+0x8e>
	...

0800b4a8 <_printf_i>:
 800b4a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4ac:	460c      	mov	r4, r1
 800b4ae:	4691      	mov	r9, r2
 800b4b0:	7e27      	ldrb	r7, [r4, #24]
 800b4b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b4b4:	2f78      	cmp	r7, #120	; 0x78
 800b4b6:	4680      	mov	r8, r0
 800b4b8:	469a      	mov	sl, r3
 800b4ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4be:	d807      	bhi.n	800b4d0 <_printf_i+0x28>
 800b4c0:	2f62      	cmp	r7, #98	; 0x62
 800b4c2:	d80a      	bhi.n	800b4da <_printf_i+0x32>
 800b4c4:	2f00      	cmp	r7, #0
 800b4c6:	f000 80d8 	beq.w	800b67a <_printf_i+0x1d2>
 800b4ca:	2f58      	cmp	r7, #88	; 0x58
 800b4cc:	f000 80a3 	beq.w	800b616 <_printf_i+0x16e>
 800b4d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b4d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b4d8:	e03a      	b.n	800b550 <_printf_i+0xa8>
 800b4da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b4de:	2b15      	cmp	r3, #21
 800b4e0:	d8f6      	bhi.n	800b4d0 <_printf_i+0x28>
 800b4e2:	a001      	add	r0, pc, #4	; (adr r0, 800b4e8 <_printf_i+0x40>)
 800b4e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b4e8:	0800b541 	.word	0x0800b541
 800b4ec:	0800b555 	.word	0x0800b555
 800b4f0:	0800b4d1 	.word	0x0800b4d1
 800b4f4:	0800b4d1 	.word	0x0800b4d1
 800b4f8:	0800b4d1 	.word	0x0800b4d1
 800b4fc:	0800b4d1 	.word	0x0800b4d1
 800b500:	0800b555 	.word	0x0800b555
 800b504:	0800b4d1 	.word	0x0800b4d1
 800b508:	0800b4d1 	.word	0x0800b4d1
 800b50c:	0800b4d1 	.word	0x0800b4d1
 800b510:	0800b4d1 	.word	0x0800b4d1
 800b514:	0800b661 	.word	0x0800b661
 800b518:	0800b585 	.word	0x0800b585
 800b51c:	0800b643 	.word	0x0800b643
 800b520:	0800b4d1 	.word	0x0800b4d1
 800b524:	0800b4d1 	.word	0x0800b4d1
 800b528:	0800b683 	.word	0x0800b683
 800b52c:	0800b4d1 	.word	0x0800b4d1
 800b530:	0800b585 	.word	0x0800b585
 800b534:	0800b4d1 	.word	0x0800b4d1
 800b538:	0800b4d1 	.word	0x0800b4d1
 800b53c:	0800b64b 	.word	0x0800b64b
 800b540:	680b      	ldr	r3, [r1, #0]
 800b542:	1d1a      	adds	r2, r3, #4
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	600a      	str	r2, [r1, #0]
 800b548:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b54c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b550:	2301      	movs	r3, #1
 800b552:	e0a3      	b.n	800b69c <_printf_i+0x1f4>
 800b554:	6825      	ldr	r5, [r4, #0]
 800b556:	6808      	ldr	r0, [r1, #0]
 800b558:	062e      	lsls	r6, r5, #24
 800b55a:	f100 0304 	add.w	r3, r0, #4
 800b55e:	d50a      	bpl.n	800b576 <_printf_i+0xce>
 800b560:	6805      	ldr	r5, [r0, #0]
 800b562:	600b      	str	r3, [r1, #0]
 800b564:	2d00      	cmp	r5, #0
 800b566:	da03      	bge.n	800b570 <_printf_i+0xc8>
 800b568:	232d      	movs	r3, #45	; 0x2d
 800b56a:	426d      	negs	r5, r5
 800b56c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b570:	485e      	ldr	r0, [pc, #376]	; (800b6ec <_printf_i+0x244>)
 800b572:	230a      	movs	r3, #10
 800b574:	e019      	b.n	800b5aa <_printf_i+0x102>
 800b576:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b57a:	6805      	ldr	r5, [r0, #0]
 800b57c:	600b      	str	r3, [r1, #0]
 800b57e:	bf18      	it	ne
 800b580:	b22d      	sxthne	r5, r5
 800b582:	e7ef      	b.n	800b564 <_printf_i+0xbc>
 800b584:	680b      	ldr	r3, [r1, #0]
 800b586:	6825      	ldr	r5, [r4, #0]
 800b588:	1d18      	adds	r0, r3, #4
 800b58a:	6008      	str	r0, [r1, #0]
 800b58c:	0628      	lsls	r0, r5, #24
 800b58e:	d501      	bpl.n	800b594 <_printf_i+0xec>
 800b590:	681d      	ldr	r5, [r3, #0]
 800b592:	e002      	b.n	800b59a <_printf_i+0xf2>
 800b594:	0669      	lsls	r1, r5, #25
 800b596:	d5fb      	bpl.n	800b590 <_printf_i+0xe8>
 800b598:	881d      	ldrh	r5, [r3, #0]
 800b59a:	4854      	ldr	r0, [pc, #336]	; (800b6ec <_printf_i+0x244>)
 800b59c:	2f6f      	cmp	r7, #111	; 0x6f
 800b59e:	bf0c      	ite	eq
 800b5a0:	2308      	moveq	r3, #8
 800b5a2:	230a      	movne	r3, #10
 800b5a4:	2100      	movs	r1, #0
 800b5a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b5aa:	6866      	ldr	r6, [r4, #4]
 800b5ac:	60a6      	str	r6, [r4, #8]
 800b5ae:	2e00      	cmp	r6, #0
 800b5b0:	bfa2      	ittt	ge
 800b5b2:	6821      	ldrge	r1, [r4, #0]
 800b5b4:	f021 0104 	bicge.w	r1, r1, #4
 800b5b8:	6021      	strge	r1, [r4, #0]
 800b5ba:	b90d      	cbnz	r5, 800b5c0 <_printf_i+0x118>
 800b5bc:	2e00      	cmp	r6, #0
 800b5be:	d04d      	beq.n	800b65c <_printf_i+0x1b4>
 800b5c0:	4616      	mov	r6, r2
 800b5c2:	fbb5 f1f3 	udiv	r1, r5, r3
 800b5c6:	fb03 5711 	mls	r7, r3, r1, r5
 800b5ca:	5dc7      	ldrb	r7, [r0, r7]
 800b5cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b5d0:	462f      	mov	r7, r5
 800b5d2:	42bb      	cmp	r3, r7
 800b5d4:	460d      	mov	r5, r1
 800b5d6:	d9f4      	bls.n	800b5c2 <_printf_i+0x11a>
 800b5d8:	2b08      	cmp	r3, #8
 800b5da:	d10b      	bne.n	800b5f4 <_printf_i+0x14c>
 800b5dc:	6823      	ldr	r3, [r4, #0]
 800b5de:	07df      	lsls	r7, r3, #31
 800b5e0:	d508      	bpl.n	800b5f4 <_printf_i+0x14c>
 800b5e2:	6923      	ldr	r3, [r4, #16]
 800b5e4:	6861      	ldr	r1, [r4, #4]
 800b5e6:	4299      	cmp	r1, r3
 800b5e8:	bfde      	ittt	le
 800b5ea:	2330      	movle	r3, #48	; 0x30
 800b5ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b5f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b5f4:	1b92      	subs	r2, r2, r6
 800b5f6:	6122      	str	r2, [r4, #16]
 800b5f8:	f8cd a000 	str.w	sl, [sp]
 800b5fc:	464b      	mov	r3, r9
 800b5fe:	aa03      	add	r2, sp, #12
 800b600:	4621      	mov	r1, r4
 800b602:	4640      	mov	r0, r8
 800b604:	f7ff fee2 	bl	800b3cc <_printf_common>
 800b608:	3001      	adds	r0, #1
 800b60a:	d14c      	bne.n	800b6a6 <_printf_i+0x1fe>
 800b60c:	f04f 30ff 	mov.w	r0, #4294967295
 800b610:	b004      	add	sp, #16
 800b612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b616:	4835      	ldr	r0, [pc, #212]	; (800b6ec <_printf_i+0x244>)
 800b618:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b61c:	6823      	ldr	r3, [r4, #0]
 800b61e:	680e      	ldr	r6, [r1, #0]
 800b620:	061f      	lsls	r7, r3, #24
 800b622:	f856 5b04 	ldr.w	r5, [r6], #4
 800b626:	600e      	str	r6, [r1, #0]
 800b628:	d514      	bpl.n	800b654 <_printf_i+0x1ac>
 800b62a:	07d9      	lsls	r1, r3, #31
 800b62c:	bf44      	itt	mi
 800b62e:	f043 0320 	orrmi.w	r3, r3, #32
 800b632:	6023      	strmi	r3, [r4, #0]
 800b634:	b91d      	cbnz	r5, 800b63e <_printf_i+0x196>
 800b636:	6823      	ldr	r3, [r4, #0]
 800b638:	f023 0320 	bic.w	r3, r3, #32
 800b63c:	6023      	str	r3, [r4, #0]
 800b63e:	2310      	movs	r3, #16
 800b640:	e7b0      	b.n	800b5a4 <_printf_i+0xfc>
 800b642:	6823      	ldr	r3, [r4, #0]
 800b644:	f043 0320 	orr.w	r3, r3, #32
 800b648:	6023      	str	r3, [r4, #0]
 800b64a:	2378      	movs	r3, #120	; 0x78
 800b64c:	4828      	ldr	r0, [pc, #160]	; (800b6f0 <_printf_i+0x248>)
 800b64e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b652:	e7e3      	b.n	800b61c <_printf_i+0x174>
 800b654:	065e      	lsls	r6, r3, #25
 800b656:	bf48      	it	mi
 800b658:	b2ad      	uxthmi	r5, r5
 800b65a:	e7e6      	b.n	800b62a <_printf_i+0x182>
 800b65c:	4616      	mov	r6, r2
 800b65e:	e7bb      	b.n	800b5d8 <_printf_i+0x130>
 800b660:	680b      	ldr	r3, [r1, #0]
 800b662:	6826      	ldr	r6, [r4, #0]
 800b664:	6960      	ldr	r0, [r4, #20]
 800b666:	1d1d      	adds	r5, r3, #4
 800b668:	600d      	str	r5, [r1, #0]
 800b66a:	0635      	lsls	r5, r6, #24
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	d501      	bpl.n	800b674 <_printf_i+0x1cc>
 800b670:	6018      	str	r0, [r3, #0]
 800b672:	e002      	b.n	800b67a <_printf_i+0x1d2>
 800b674:	0671      	lsls	r1, r6, #25
 800b676:	d5fb      	bpl.n	800b670 <_printf_i+0x1c8>
 800b678:	8018      	strh	r0, [r3, #0]
 800b67a:	2300      	movs	r3, #0
 800b67c:	6123      	str	r3, [r4, #16]
 800b67e:	4616      	mov	r6, r2
 800b680:	e7ba      	b.n	800b5f8 <_printf_i+0x150>
 800b682:	680b      	ldr	r3, [r1, #0]
 800b684:	1d1a      	adds	r2, r3, #4
 800b686:	600a      	str	r2, [r1, #0]
 800b688:	681e      	ldr	r6, [r3, #0]
 800b68a:	6862      	ldr	r2, [r4, #4]
 800b68c:	2100      	movs	r1, #0
 800b68e:	4630      	mov	r0, r6
 800b690:	f7f4 fe26 	bl	80002e0 <memchr>
 800b694:	b108      	cbz	r0, 800b69a <_printf_i+0x1f2>
 800b696:	1b80      	subs	r0, r0, r6
 800b698:	6060      	str	r0, [r4, #4]
 800b69a:	6863      	ldr	r3, [r4, #4]
 800b69c:	6123      	str	r3, [r4, #16]
 800b69e:	2300      	movs	r3, #0
 800b6a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6a4:	e7a8      	b.n	800b5f8 <_printf_i+0x150>
 800b6a6:	6923      	ldr	r3, [r4, #16]
 800b6a8:	4632      	mov	r2, r6
 800b6aa:	4649      	mov	r1, r9
 800b6ac:	4640      	mov	r0, r8
 800b6ae:	47d0      	blx	sl
 800b6b0:	3001      	adds	r0, #1
 800b6b2:	d0ab      	beq.n	800b60c <_printf_i+0x164>
 800b6b4:	6823      	ldr	r3, [r4, #0]
 800b6b6:	079b      	lsls	r3, r3, #30
 800b6b8:	d413      	bmi.n	800b6e2 <_printf_i+0x23a>
 800b6ba:	68e0      	ldr	r0, [r4, #12]
 800b6bc:	9b03      	ldr	r3, [sp, #12]
 800b6be:	4298      	cmp	r0, r3
 800b6c0:	bfb8      	it	lt
 800b6c2:	4618      	movlt	r0, r3
 800b6c4:	e7a4      	b.n	800b610 <_printf_i+0x168>
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	4632      	mov	r2, r6
 800b6ca:	4649      	mov	r1, r9
 800b6cc:	4640      	mov	r0, r8
 800b6ce:	47d0      	blx	sl
 800b6d0:	3001      	adds	r0, #1
 800b6d2:	d09b      	beq.n	800b60c <_printf_i+0x164>
 800b6d4:	3501      	adds	r5, #1
 800b6d6:	68e3      	ldr	r3, [r4, #12]
 800b6d8:	9903      	ldr	r1, [sp, #12]
 800b6da:	1a5b      	subs	r3, r3, r1
 800b6dc:	42ab      	cmp	r3, r5
 800b6de:	dcf2      	bgt.n	800b6c6 <_printf_i+0x21e>
 800b6e0:	e7eb      	b.n	800b6ba <_printf_i+0x212>
 800b6e2:	2500      	movs	r5, #0
 800b6e4:	f104 0619 	add.w	r6, r4, #25
 800b6e8:	e7f5      	b.n	800b6d6 <_printf_i+0x22e>
 800b6ea:	bf00      	nop
 800b6ec:	0800bdd1 	.word	0x0800bdd1
 800b6f0:	0800bde2 	.word	0x0800bde2

0800b6f4 <_sbrk_r>:
 800b6f4:	b538      	push	{r3, r4, r5, lr}
 800b6f6:	4d06      	ldr	r5, [pc, #24]	; (800b710 <_sbrk_r+0x1c>)
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	4604      	mov	r4, r0
 800b6fc:	4608      	mov	r0, r1
 800b6fe:	602b      	str	r3, [r5, #0]
 800b700:	f7f6 fe0e 	bl	8002320 <_sbrk>
 800b704:	1c43      	adds	r3, r0, #1
 800b706:	d102      	bne.n	800b70e <_sbrk_r+0x1a>
 800b708:	682b      	ldr	r3, [r5, #0]
 800b70a:	b103      	cbz	r3, 800b70e <_sbrk_r+0x1a>
 800b70c:	6023      	str	r3, [r4, #0]
 800b70e:	bd38      	pop	{r3, r4, r5, pc}
 800b710:	2000093c 	.word	0x2000093c

0800b714 <__sread>:
 800b714:	b510      	push	{r4, lr}
 800b716:	460c      	mov	r4, r1
 800b718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b71c:	f000 fab4 	bl	800bc88 <_read_r>
 800b720:	2800      	cmp	r0, #0
 800b722:	bfab      	itete	ge
 800b724:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b726:	89a3      	ldrhlt	r3, [r4, #12]
 800b728:	181b      	addge	r3, r3, r0
 800b72a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b72e:	bfac      	ite	ge
 800b730:	6563      	strge	r3, [r4, #84]	; 0x54
 800b732:	81a3      	strhlt	r3, [r4, #12]
 800b734:	bd10      	pop	{r4, pc}

0800b736 <__swrite>:
 800b736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b73a:	461f      	mov	r7, r3
 800b73c:	898b      	ldrh	r3, [r1, #12]
 800b73e:	05db      	lsls	r3, r3, #23
 800b740:	4605      	mov	r5, r0
 800b742:	460c      	mov	r4, r1
 800b744:	4616      	mov	r6, r2
 800b746:	d505      	bpl.n	800b754 <__swrite+0x1e>
 800b748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b74c:	2302      	movs	r3, #2
 800b74e:	2200      	movs	r2, #0
 800b750:	f000 f9c8 	bl	800bae4 <_lseek_r>
 800b754:	89a3      	ldrh	r3, [r4, #12]
 800b756:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b75a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b75e:	81a3      	strh	r3, [r4, #12]
 800b760:	4632      	mov	r2, r6
 800b762:	463b      	mov	r3, r7
 800b764:	4628      	mov	r0, r5
 800b766:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b76a:	f000 b869 	b.w	800b840 <_write_r>

0800b76e <__sseek>:
 800b76e:	b510      	push	{r4, lr}
 800b770:	460c      	mov	r4, r1
 800b772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b776:	f000 f9b5 	bl	800bae4 <_lseek_r>
 800b77a:	1c43      	adds	r3, r0, #1
 800b77c:	89a3      	ldrh	r3, [r4, #12]
 800b77e:	bf15      	itete	ne
 800b780:	6560      	strne	r0, [r4, #84]	; 0x54
 800b782:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b786:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b78a:	81a3      	strheq	r3, [r4, #12]
 800b78c:	bf18      	it	ne
 800b78e:	81a3      	strhne	r3, [r4, #12]
 800b790:	bd10      	pop	{r4, pc}

0800b792 <__sclose>:
 800b792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b796:	f000 b8d3 	b.w	800b940 <_close_r>
	...

0800b79c <__swbuf_r>:
 800b79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b79e:	460e      	mov	r6, r1
 800b7a0:	4614      	mov	r4, r2
 800b7a2:	4605      	mov	r5, r0
 800b7a4:	b118      	cbz	r0, 800b7ae <__swbuf_r+0x12>
 800b7a6:	6983      	ldr	r3, [r0, #24]
 800b7a8:	b90b      	cbnz	r3, 800b7ae <__swbuf_r+0x12>
 800b7aa:	f7ff fbbb 	bl	800af24 <__sinit>
 800b7ae:	4b21      	ldr	r3, [pc, #132]	; (800b834 <__swbuf_r+0x98>)
 800b7b0:	429c      	cmp	r4, r3
 800b7b2:	d12b      	bne.n	800b80c <__swbuf_r+0x70>
 800b7b4:	686c      	ldr	r4, [r5, #4]
 800b7b6:	69a3      	ldr	r3, [r4, #24]
 800b7b8:	60a3      	str	r3, [r4, #8]
 800b7ba:	89a3      	ldrh	r3, [r4, #12]
 800b7bc:	071a      	lsls	r2, r3, #28
 800b7be:	d52f      	bpl.n	800b820 <__swbuf_r+0x84>
 800b7c0:	6923      	ldr	r3, [r4, #16]
 800b7c2:	b36b      	cbz	r3, 800b820 <__swbuf_r+0x84>
 800b7c4:	6923      	ldr	r3, [r4, #16]
 800b7c6:	6820      	ldr	r0, [r4, #0]
 800b7c8:	1ac0      	subs	r0, r0, r3
 800b7ca:	6963      	ldr	r3, [r4, #20]
 800b7cc:	b2f6      	uxtb	r6, r6
 800b7ce:	4283      	cmp	r3, r0
 800b7d0:	4637      	mov	r7, r6
 800b7d2:	dc04      	bgt.n	800b7de <__swbuf_r+0x42>
 800b7d4:	4621      	mov	r1, r4
 800b7d6:	4628      	mov	r0, r5
 800b7d8:	f000 f948 	bl	800ba6c <_fflush_r>
 800b7dc:	bb30      	cbnz	r0, 800b82c <__swbuf_r+0x90>
 800b7de:	68a3      	ldr	r3, [r4, #8]
 800b7e0:	3b01      	subs	r3, #1
 800b7e2:	60a3      	str	r3, [r4, #8]
 800b7e4:	6823      	ldr	r3, [r4, #0]
 800b7e6:	1c5a      	adds	r2, r3, #1
 800b7e8:	6022      	str	r2, [r4, #0]
 800b7ea:	701e      	strb	r6, [r3, #0]
 800b7ec:	6963      	ldr	r3, [r4, #20]
 800b7ee:	3001      	adds	r0, #1
 800b7f0:	4283      	cmp	r3, r0
 800b7f2:	d004      	beq.n	800b7fe <__swbuf_r+0x62>
 800b7f4:	89a3      	ldrh	r3, [r4, #12]
 800b7f6:	07db      	lsls	r3, r3, #31
 800b7f8:	d506      	bpl.n	800b808 <__swbuf_r+0x6c>
 800b7fa:	2e0a      	cmp	r6, #10
 800b7fc:	d104      	bne.n	800b808 <__swbuf_r+0x6c>
 800b7fe:	4621      	mov	r1, r4
 800b800:	4628      	mov	r0, r5
 800b802:	f000 f933 	bl	800ba6c <_fflush_r>
 800b806:	b988      	cbnz	r0, 800b82c <__swbuf_r+0x90>
 800b808:	4638      	mov	r0, r7
 800b80a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b80c:	4b0a      	ldr	r3, [pc, #40]	; (800b838 <__swbuf_r+0x9c>)
 800b80e:	429c      	cmp	r4, r3
 800b810:	d101      	bne.n	800b816 <__swbuf_r+0x7a>
 800b812:	68ac      	ldr	r4, [r5, #8]
 800b814:	e7cf      	b.n	800b7b6 <__swbuf_r+0x1a>
 800b816:	4b09      	ldr	r3, [pc, #36]	; (800b83c <__swbuf_r+0xa0>)
 800b818:	429c      	cmp	r4, r3
 800b81a:	bf08      	it	eq
 800b81c:	68ec      	ldreq	r4, [r5, #12]
 800b81e:	e7ca      	b.n	800b7b6 <__swbuf_r+0x1a>
 800b820:	4621      	mov	r1, r4
 800b822:	4628      	mov	r0, r5
 800b824:	f000 f81e 	bl	800b864 <__swsetup_r>
 800b828:	2800      	cmp	r0, #0
 800b82a:	d0cb      	beq.n	800b7c4 <__swbuf_r+0x28>
 800b82c:	f04f 37ff 	mov.w	r7, #4294967295
 800b830:	e7ea      	b.n	800b808 <__swbuf_r+0x6c>
 800b832:	bf00      	nop
 800b834:	0800bd80 	.word	0x0800bd80
 800b838:	0800bda0 	.word	0x0800bda0
 800b83c:	0800bd60 	.word	0x0800bd60

0800b840 <_write_r>:
 800b840:	b538      	push	{r3, r4, r5, lr}
 800b842:	4d07      	ldr	r5, [pc, #28]	; (800b860 <_write_r+0x20>)
 800b844:	4604      	mov	r4, r0
 800b846:	4608      	mov	r0, r1
 800b848:	4611      	mov	r1, r2
 800b84a:	2200      	movs	r2, #0
 800b84c:	602a      	str	r2, [r5, #0]
 800b84e:	461a      	mov	r2, r3
 800b850:	f7f6 fd15 	bl	800227e <_write>
 800b854:	1c43      	adds	r3, r0, #1
 800b856:	d102      	bne.n	800b85e <_write_r+0x1e>
 800b858:	682b      	ldr	r3, [r5, #0]
 800b85a:	b103      	cbz	r3, 800b85e <_write_r+0x1e>
 800b85c:	6023      	str	r3, [r4, #0]
 800b85e:	bd38      	pop	{r3, r4, r5, pc}
 800b860:	2000093c 	.word	0x2000093c

0800b864 <__swsetup_r>:
 800b864:	4b32      	ldr	r3, [pc, #200]	; (800b930 <__swsetup_r+0xcc>)
 800b866:	b570      	push	{r4, r5, r6, lr}
 800b868:	681d      	ldr	r5, [r3, #0]
 800b86a:	4606      	mov	r6, r0
 800b86c:	460c      	mov	r4, r1
 800b86e:	b125      	cbz	r5, 800b87a <__swsetup_r+0x16>
 800b870:	69ab      	ldr	r3, [r5, #24]
 800b872:	b913      	cbnz	r3, 800b87a <__swsetup_r+0x16>
 800b874:	4628      	mov	r0, r5
 800b876:	f7ff fb55 	bl	800af24 <__sinit>
 800b87a:	4b2e      	ldr	r3, [pc, #184]	; (800b934 <__swsetup_r+0xd0>)
 800b87c:	429c      	cmp	r4, r3
 800b87e:	d10f      	bne.n	800b8a0 <__swsetup_r+0x3c>
 800b880:	686c      	ldr	r4, [r5, #4]
 800b882:	89a3      	ldrh	r3, [r4, #12]
 800b884:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b888:	0719      	lsls	r1, r3, #28
 800b88a:	d42c      	bmi.n	800b8e6 <__swsetup_r+0x82>
 800b88c:	06dd      	lsls	r5, r3, #27
 800b88e:	d411      	bmi.n	800b8b4 <__swsetup_r+0x50>
 800b890:	2309      	movs	r3, #9
 800b892:	6033      	str	r3, [r6, #0]
 800b894:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b898:	81a3      	strh	r3, [r4, #12]
 800b89a:	f04f 30ff 	mov.w	r0, #4294967295
 800b89e:	e03e      	b.n	800b91e <__swsetup_r+0xba>
 800b8a0:	4b25      	ldr	r3, [pc, #148]	; (800b938 <__swsetup_r+0xd4>)
 800b8a2:	429c      	cmp	r4, r3
 800b8a4:	d101      	bne.n	800b8aa <__swsetup_r+0x46>
 800b8a6:	68ac      	ldr	r4, [r5, #8]
 800b8a8:	e7eb      	b.n	800b882 <__swsetup_r+0x1e>
 800b8aa:	4b24      	ldr	r3, [pc, #144]	; (800b93c <__swsetup_r+0xd8>)
 800b8ac:	429c      	cmp	r4, r3
 800b8ae:	bf08      	it	eq
 800b8b0:	68ec      	ldreq	r4, [r5, #12]
 800b8b2:	e7e6      	b.n	800b882 <__swsetup_r+0x1e>
 800b8b4:	0758      	lsls	r0, r3, #29
 800b8b6:	d512      	bpl.n	800b8de <__swsetup_r+0x7a>
 800b8b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8ba:	b141      	cbz	r1, 800b8ce <__swsetup_r+0x6a>
 800b8bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8c0:	4299      	cmp	r1, r3
 800b8c2:	d002      	beq.n	800b8ca <__swsetup_r+0x66>
 800b8c4:	4630      	mov	r0, r6
 800b8c6:	f000 f98f 	bl	800bbe8 <_free_r>
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	6363      	str	r3, [r4, #52]	; 0x34
 800b8ce:	89a3      	ldrh	r3, [r4, #12]
 800b8d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b8d4:	81a3      	strh	r3, [r4, #12]
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	6063      	str	r3, [r4, #4]
 800b8da:	6923      	ldr	r3, [r4, #16]
 800b8dc:	6023      	str	r3, [r4, #0]
 800b8de:	89a3      	ldrh	r3, [r4, #12]
 800b8e0:	f043 0308 	orr.w	r3, r3, #8
 800b8e4:	81a3      	strh	r3, [r4, #12]
 800b8e6:	6923      	ldr	r3, [r4, #16]
 800b8e8:	b94b      	cbnz	r3, 800b8fe <__swsetup_r+0x9a>
 800b8ea:	89a3      	ldrh	r3, [r4, #12]
 800b8ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b8f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8f4:	d003      	beq.n	800b8fe <__swsetup_r+0x9a>
 800b8f6:	4621      	mov	r1, r4
 800b8f8:	4630      	mov	r0, r6
 800b8fa:	f000 f929 	bl	800bb50 <__smakebuf_r>
 800b8fe:	89a0      	ldrh	r0, [r4, #12]
 800b900:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b904:	f010 0301 	ands.w	r3, r0, #1
 800b908:	d00a      	beq.n	800b920 <__swsetup_r+0xbc>
 800b90a:	2300      	movs	r3, #0
 800b90c:	60a3      	str	r3, [r4, #8]
 800b90e:	6963      	ldr	r3, [r4, #20]
 800b910:	425b      	negs	r3, r3
 800b912:	61a3      	str	r3, [r4, #24]
 800b914:	6923      	ldr	r3, [r4, #16]
 800b916:	b943      	cbnz	r3, 800b92a <__swsetup_r+0xc6>
 800b918:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b91c:	d1ba      	bne.n	800b894 <__swsetup_r+0x30>
 800b91e:	bd70      	pop	{r4, r5, r6, pc}
 800b920:	0781      	lsls	r1, r0, #30
 800b922:	bf58      	it	pl
 800b924:	6963      	ldrpl	r3, [r4, #20]
 800b926:	60a3      	str	r3, [r4, #8]
 800b928:	e7f4      	b.n	800b914 <__swsetup_r+0xb0>
 800b92a:	2000      	movs	r0, #0
 800b92c:	e7f7      	b.n	800b91e <__swsetup_r+0xba>
 800b92e:	bf00      	nop
 800b930:	20000010 	.word	0x20000010
 800b934:	0800bd80 	.word	0x0800bd80
 800b938:	0800bda0 	.word	0x0800bda0
 800b93c:	0800bd60 	.word	0x0800bd60

0800b940 <_close_r>:
 800b940:	b538      	push	{r3, r4, r5, lr}
 800b942:	4d06      	ldr	r5, [pc, #24]	; (800b95c <_close_r+0x1c>)
 800b944:	2300      	movs	r3, #0
 800b946:	4604      	mov	r4, r0
 800b948:	4608      	mov	r0, r1
 800b94a:	602b      	str	r3, [r5, #0]
 800b94c:	f7f6 fcb3 	bl	80022b6 <_close>
 800b950:	1c43      	adds	r3, r0, #1
 800b952:	d102      	bne.n	800b95a <_close_r+0x1a>
 800b954:	682b      	ldr	r3, [r5, #0]
 800b956:	b103      	cbz	r3, 800b95a <_close_r+0x1a>
 800b958:	6023      	str	r3, [r4, #0]
 800b95a:	bd38      	pop	{r3, r4, r5, pc}
 800b95c:	2000093c 	.word	0x2000093c

0800b960 <__sflush_r>:
 800b960:	898a      	ldrh	r2, [r1, #12]
 800b962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b966:	4605      	mov	r5, r0
 800b968:	0710      	lsls	r0, r2, #28
 800b96a:	460c      	mov	r4, r1
 800b96c:	d458      	bmi.n	800ba20 <__sflush_r+0xc0>
 800b96e:	684b      	ldr	r3, [r1, #4]
 800b970:	2b00      	cmp	r3, #0
 800b972:	dc05      	bgt.n	800b980 <__sflush_r+0x20>
 800b974:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b976:	2b00      	cmp	r3, #0
 800b978:	dc02      	bgt.n	800b980 <__sflush_r+0x20>
 800b97a:	2000      	movs	r0, #0
 800b97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b980:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b982:	2e00      	cmp	r6, #0
 800b984:	d0f9      	beq.n	800b97a <__sflush_r+0x1a>
 800b986:	2300      	movs	r3, #0
 800b988:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b98c:	682f      	ldr	r7, [r5, #0]
 800b98e:	602b      	str	r3, [r5, #0]
 800b990:	d032      	beq.n	800b9f8 <__sflush_r+0x98>
 800b992:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b994:	89a3      	ldrh	r3, [r4, #12]
 800b996:	075a      	lsls	r2, r3, #29
 800b998:	d505      	bpl.n	800b9a6 <__sflush_r+0x46>
 800b99a:	6863      	ldr	r3, [r4, #4]
 800b99c:	1ac0      	subs	r0, r0, r3
 800b99e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b9a0:	b10b      	cbz	r3, 800b9a6 <__sflush_r+0x46>
 800b9a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b9a4:	1ac0      	subs	r0, r0, r3
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	4602      	mov	r2, r0
 800b9aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b9ac:	6a21      	ldr	r1, [r4, #32]
 800b9ae:	4628      	mov	r0, r5
 800b9b0:	47b0      	blx	r6
 800b9b2:	1c43      	adds	r3, r0, #1
 800b9b4:	89a3      	ldrh	r3, [r4, #12]
 800b9b6:	d106      	bne.n	800b9c6 <__sflush_r+0x66>
 800b9b8:	6829      	ldr	r1, [r5, #0]
 800b9ba:	291d      	cmp	r1, #29
 800b9bc:	d82c      	bhi.n	800ba18 <__sflush_r+0xb8>
 800b9be:	4a2a      	ldr	r2, [pc, #168]	; (800ba68 <__sflush_r+0x108>)
 800b9c0:	40ca      	lsrs	r2, r1
 800b9c2:	07d6      	lsls	r6, r2, #31
 800b9c4:	d528      	bpl.n	800ba18 <__sflush_r+0xb8>
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	6062      	str	r2, [r4, #4]
 800b9ca:	04d9      	lsls	r1, r3, #19
 800b9cc:	6922      	ldr	r2, [r4, #16]
 800b9ce:	6022      	str	r2, [r4, #0]
 800b9d0:	d504      	bpl.n	800b9dc <__sflush_r+0x7c>
 800b9d2:	1c42      	adds	r2, r0, #1
 800b9d4:	d101      	bne.n	800b9da <__sflush_r+0x7a>
 800b9d6:	682b      	ldr	r3, [r5, #0]
 800b9d8:	b903      	cbnz	r3, 800b9dc <__sflush_r+0x7c>
 800b9da:	6560      	str	r0, [r4, #84]	; 0x54
 800b9dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9de:	602f      	str	r7, [r5, #0]
 800b9e0:	2900      	cmp	r1, #0
 800b9e2:	d0ca      	beq.n	800b97a <__sflush_r+0x1a>
 800b9e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9e8:	4299      	cmp	r1, r3
 800b9ea:	d002      	beq.n	800b9f2 <__sflush_r+0x92>
 800b9ec:	4628      	mov	r0, r5
 800b9ee:	f000 f8fb 	bl	800bbe8 <_free_r>
 800b9f2:	2000      	movs	r0, #0
 800b9f4:	6360      	str	r0, [r4, #52]	; 0x34
 800b9f6:	e7c1      	b.n	800b97c <__sflush_r+0x1c>
 800b9f8:	6a21      	ldr	r1, [r4, #32]
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	4628      	mov	r0, r5
 800b9fe:	47b0      	blx	r6
 800ba00:	1c41      	adds	r1, r0, #1
 800ba02:	d1c7      	bne.n	800b994 <__sflush_r+0x34>
 800ba04:	682b      	ldr	r3, [r5, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d0c4      	beq.n	800b994 <__sflush_r+0x34>
 800ba0a:	2b1d      	cmp	r3, #29
 800ba0c:	d001      	beq.n	800ba12 <__sflush_r+0xb2>
 800ba0e:	2b16      	cmp	r3, #22
 800ba10:	d101      	bne.n	800ba16 <__sflush_r+0xb6>
 800ba12:	602f      	str	r7, [r5, #0]
 800ba14:	e7b1      	b.n	800b97a <__sflush_r+0x1a>
 800ba16:	89a3      	ldrh	r3, [r4, #12]
 800ba18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba1c:	81a3      	strh	r3, [r4, #12]
 800ba1e:	e7ad      	b.n	800b97c <__sflush_r+0x1c>
 800ba20:	690f      	ldr	r7, [r1, #16]
 800ba22:	2f00      	cmp	r7, #0
 800ba24:	d0a9      	beq.n	800b97a <__sflush_r+0x1a>
 800ba26:	0793      	lsls	r3, r2, #30
 800ba28:	680e      	ldr	r6, [r1, #0]
 800ba2a:	bf08      	it	eq
 800ba2c:	694b      	ldreq	r3, [r1, #20]
 800ba2e:	600f      	str	r7, [r1, #0]
 800ba30:	bf18      	it	ne
 800ba32:	2300      	movne	r3, #0
 800ba34:	eba6 0807 	sub.w	r8, r6, r7
 800ba38:	608b      	str	r3, [r1, #8]
 800ba3a:	f1b8 0f00 	cmp.w	r8, #0
 800ba3e:	dd9c      	ble.n	800b97a <__sflush_r+0x1a>
 800ba40:	6a21      	ldr	r1, [r4, #32]
 800ba42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ba44:	4643      	mov	r3, r8
 800ba46:	463a      	mov	r2, r7
 800ba48:	4628      	mov	r0, r5
 800ba4a:	47b0      	blx	r6
 800ba4c:	2800      	cmp	r0, #0
 800ba4e:	dc06      	bgt.n	800ba5e <__sflush_r+0xfe>
 800ba50:	89a3      	ldrh	r3, [r4, #12]
 800ba52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba56:	81a3      	strh	r3, [r4, #12]
 800ba58:	f04f 30ff 	mov.w	r0, #4294967295
 800ba5c:	e78e      	b.n	800b97c <__sflush_r+0x1c>
 800ba5e:	4407      	add	r7, r0
 800ba60:	eba8 0800 	sub.w	r8, r8, r0
 800ba64:	e7e9      	b.n	800ba3a <__sflush_r+0xda>
 800ba66:	bf00      	nop
 800ba68:	20400001 	.word	0x20400001

0800ba6c <_fflush_r>:
 800ba6c:	b538      	push	{r3, r4, r5, lr}
 800ba6e:	690b      	ldr	r3, [r1, #16]
 800ba70:	4605      	mov	r5, r0
 800ba72:	460c      	mov	r4, r1
 800ba74:	b913      	cbnz	r3, 800ba7c <_fflush_r+0x10>
 800ba76:	2500      	movs	r5, #0
 800ba78:	4628      	mov	r0, r5
 800ba7a:	bd38      	pop	{r3, r4, r5, pc}
 800ba7c:	b118      	cbz	r0, 800ba86 <_fflush_r+0x1a>
 800ba7e:	6983      	ldr	r3, [r0, #24]
 800ba80:	b90b      	cbnz	r3, 800ba86 <_fflush_r+0x1a>
 800ba82:	f7ff fa4f 	bl	800af24 <__sinit>
 800ba86:	4b14      	ldr	r3, [pc, #80]	; (800bad8 <_fflush_r+0x6c>)
 800ba88:	429c      	cmp	r4, r3
 800ba8a:	d11b      	bne.n	800bac4 <_fflush_r+0x58>
 800ba8c:	686c      	ldr	r4, [r5, #4]
 800ba8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d0ef      	beq.n	800ba76 <_fflush_r+0xa>
 800ba96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ba98:	07d0      	lsls	r0, r2, #31
 800ba9a:	d404      	bmi.n	800baa6 <_fflush_r+0x3a>
 800ba9c:	0599      	lsls	r1, r3, #22
 800ba9e:	d402      	bmi.n	800baa6 <_fflush_r+0x3a>
 800baa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800baa2:	f7ff fadd 	bl	800b060 <__retarget_lock_acquire_recursive>
 800baa6:	4628      	mov	r0, r5
 800baa8:	4621      	mov	r1, r4
 800baaa:	f7ff ff59 	bl	800b960 <__sflush_r>
 800baae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bab0:	07da      	lsls	r2, r3, #31
 800bab2:	4605      	mov	r5, r0
 800bab4:	d4e0      	bmi.n	800ba78 <_fflush_r+0xc>
 800bab6:	89a3      	ldrh	r3, [r4, #12]
 800bab8:	059b      	lsls	r3, r3, #22
 800baba:	d4dd      	bmi.n	800ba78 <_fflush_r+0xc>
 800babc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800babe:	f7ff fad0 	bl	800b062 <__retarget_lock_release_recursive>
 800bac2:	e7d9      	b.n	800ba78 <_fflush_r+0xc>
 800bac4:	4b05      	ldr	r3, [pc, #20]	; (800badc <_fflush_r+0x70>)
 800bac6:	429c      	cmp	r4, r3
 800bac8:	d101      	bne.n	800bace <_fflush_r+0x62>
 800baca:	68ac      	ldr	r4, [r5, #8]
 800bacc:	e7df      	b.n	800ba8e <_fflush_r+0x22>
 800bace:	4b04      	ldr	r3, [pc, #16]	; (800bae0 <_fflush_r+0x74>)
 800bad0:	429c      	cmp	r4, r3
 800bad2:	bf08      	it	eq
 800bad4:	68ec      	ldreq	r4, [r5, #12]
 800bad6:	e7da      	b.n	800ba8e <_fflush_r+0x22>
 800bad8:	0800bd80 	.word	0x0800bd80
 800badc:	0800bda0 	.word	0x0800bda0
 800bae0:	0800bd60 	.word	0x0800bd60

0800bae4 <_lseek_r>:
 800bae4:	b538      	push	{r3, r4, r5, lr}
 800bae6:	4d07      	ldr	r5, [pc, #28]	; (800bb04 <_lseek_r+0x20>)
 800bae8:	4604      	mov	r4, r0
 800baea:	4608      	mov	r0, r1
 800baec:	4611      	mov	r1, r2
 800baee:	2200      	movs	r2, #0
 800baf0:	602a      	str	r2, [r5, #0]
 800baf2:	461a      	mov	r2, r3
 800baf4:	f7f6 fc06 	bl	8002304 <_lseek>
 800baf8:	1c43      	adds	r3, r0, #1
 800bafa:	d102      	bne.n	800bb02 <_lseek_r+0x1e>
 800bafc:	682b      	ldr	r3, [r5, #0]
 800bafe:	b103      	cbz	r3, 800bb02 <_lseek_r+0x1e>
 800bb00:	6023      	str	r3, [r4, #0]
 800bb02:	bd38      	pop	{r3, r4, r5, pc}
 800bb04:	2000093c 	.word	0x2000093c

0800bb08 <__swhatbuf_r>:
 800bb08:	b570      	push	{r4, r5, r6, lr}
 800bb0a:	460e      	mov	r6, r1
 800bb0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb10:	2900      	cmp	r1, #0
 800bb12:	b096      	sub	sp, #88	; 0x58
 800bb14:	4614      	mov	r4, r2
 800bb16:	461d      	mov	r5, r3
 800bb18:	da07      	bge.n	800bb2a <__swhatbuf_r+0x22>
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	602b      	str	r3, [r5, #0]
 800bb1e:	89b3      	ldrh	r3, [r6, #12]
 800bb20:	061a      	lsls	r2, r3, #24
 800bb22:	d410      	bmi.n	800bb46 <__swhatbuf_r+0x3e>
 800bb24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb28:	e00e      	b.n	800bb48 <__swhatbuf_r+0x40>
 800bb2a:	466a      	mov	r2, sp
 800bb2c:	f000 f8be 	bl	800bcac <_fstat_r>
 800bb30:	2800      	cmp	r0, #0
 800bb32:	dbf2      	blt.n	800bb1a <__swhatbuf_r+0x12>
 800bb34:	9a01      	ldr	r2, [sp, #4]
 800bb36:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bb3a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bb3e:	425a      	negs	r2, r3
 800bb40:	415a      	adcs	r2, r3
 800bb42:	602a      	str	r2, [r5, #0]
 800bb44:	e7ee      	b.n	800bb24 <__swhatbuf_r+0x1c>
 800bb46:	2340      	movs	r3, #64	; 0x40
 800bb48:	2000      	movs	r0, #0
 800bb4a:	6023      	str	r3, [r4, #0]
 800bb4c:	b016      	add	sp, #88	; 0x58
 800bb4e:	bd70      	pop	{r4, r5, r6, pc}

0800bb50 <__smakebuf_r>:
 800bb50:	898b      	ldrh	r3, [r1, #12]
 800bb52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb54:	079d      	lsls	r5, r3, #30
 800bb56:	4606      	mov	r6, r0
 800bb58:	460c      	mov	r4, r1
 800bb5a:	d507      	bpl.n	800bb6c <__smakebuf_r+0x1c>
 800bb5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb60:	6023      	str	r3, [r4, #0]
 800bb62:	6123      	str	r3, [r4, #16]
 800bb64:	2301      	movs	r3, #1
 800bb66:	6163      	str	r3, [r4, #20]
 800bb68:	b002      	add	sp, #8
 800bb6a:	bd70      	pop	{r4, r5, r6, pc}
 800bb6c:	ab01      	add	r3, sp, #4
 800bb6e:	466a      	mov	r2, sp
 800bb70:	f7ff ffca 	bl	800bb08 <__swhatbuf_r>
 800bb74:	9900      	ldr	r1, [sp, #0]
 800bb76:	4605      	mov	r5, r0
 800bb78:	4630      	mov	r0, r6
 800bb7a:	f7ff fa73 	bl	800b064 <_malloc_r>
 800bb7e:	b948      	cbnz	r0, 800bb94 <__smakebuf_r+0x44>
 800bb80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb84:	059a      	lsls	r2, r3, #22
 800bb86:	d4ef      	bmi.n	800bb68 <__smakebuf_r+0x18>
 800bb88:	f023 0303 	bic.w	r3, r3, #3
 800bb8c:	f043 0302 	orr.w	r3, r3, #2
 800bb90:	81a3      	strh	r3, [r4, #12]
 800bb92:	e7e3      	b.n	800bb5c <__smakebuf_r+0xc>
 800bb94:	4b0d      	ldr	r3, [pc, #52]	; (800bbcc <__smakebuf_r+0x7c>)
 800bb96:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb98:	89a3      	ldrh	r3, [r4, #12]
 800bb9a:	6020      	str	r0, [r4, #0]
 800bb9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bba0:	81a3      	strh	r3, [r4, #12]
 800bba2:	9b00      	ldr	r3, [sp, #0]
 800bba4:	6163      	str	r3, [r4, #20]
 800bba6:	9b01      	ldr	r3, [sp, #4]
 800bba8:	6120      	str	r0, [r4, #16]
 800bbaa:	b15b      	cbz	r3, 800bbc4 <__smakebuf_r+0x74>
 800bbac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbb0:	4630      	mov	r0, r6
 800bbb2:	f000 f88d 	bl	800bcd0 <_isatty_r>
 800bbb6:	b128      	cbz	r0, 800bbc4 <__smakebuf_r+0x74>
 800bbb8:	89a3      	ldrh	r3, [r4, #12]
 800bbba:	f023 0303 	bic.w	r3, r3, #3
 800bbbe:	f043 0301 	orr.w	r3, r3, #1
 800bbc2:	81a3      	strh	r3, [r4, #12]
 800bbc4:	89a0      	ldrh	r0, [r4, #12]
 800bbc6:	4305      	orrs	r5, r0
 800bbc8:	81a5      	strh	r5, [r4, #12]
 800bbca:	e7cd      	b.n	800bb68 <__smakebuf_r+0x18>
 800bbcc:	0800aebd 	.word	0x0800aebd

0800bbd0 <__malloc_lock>:
 800bbd0:	4801      	ldr	r0, [pc, #4]	; (800bbd8 <__malloc_lock+0x8>)
 800bbd2:	f7ff ba45 	b.w	800b060 <__retarget_lock_acquire_recursive>
 800bbd6:	bf00      	nop
 800bbd8:	20000934 	.word	0x20000934

0800bbdc <__malloc_unlock>:
 800bbdc:	4801      	ldr	r0, [pc, #4]	; (800bbe4 <__malloc_unlock+0x8>)
 800bbde:	f7ff ba40 	b.w	800b062 <__retarget_lock_release_recursive>
 800bbe2:	bf00      	nop
 800bbe4:	20000934 	.word	0x20000934

0800bbe8 <_free_r>:
 800bbe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbea:	2900      	cmp	r1, #0
 800bbec:	d048      	beq.n	800bc80 <_free_r+0x98>
 800bbee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbf2:	9001      	str	r0, [sp, #4]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	f1a1 0404 	sub.w	r4, r1, #4
 800bbfa:	bfb8      	it	lt
 800bbfc:	18e4      	addlt	r4, r4, r3
 800bbfe:	f7ff ffe7 	bl	800bbd0 <__malloc_lock>
 800bc02:	4a20      	ldr	r2, [pc, #128]	; (800bc84 <_free_r+0x9c>)
 800bc04:	9801      	ldr	r0, [sp, #4]
 800bc06:	6813      	ldr	r3, [r2, #0]
 800bc08:	4615      	mov	r5, r2
 800bc0a:	b933      	cbnz	r3, 800bc1a <_free_r+0x32>
 800bc0c:	6063      	str	r3, [r4, #4]
 800bc0e:	6014      	str	r4, [r2, #0]
 800bc10:	b003      	add	sp, #12
 800bc12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc16:	f7ff bfe1 	b.w	800bbdc <__malloc_unlock>
 800bc1a:	42a3      	cmp	r3, r4
 800bc1c:	d90b      	bls.n	800bc36 <_free_r+0x4e>
 800bc1e:	6821      	ldr	r1, [r4, #0]
 800bc20:	1862      	adds	r2, r4, r1
 800bc22:	4293      	cmp	r3, r2
 800bc24:	bf04      	itt	eq
 800bc26:	681a      	ldreq	r2, [r3, #0]
 800bc28:	685b      	ldreq	r3, [r3, #4]
 800bc2a:	6063      	str	r3, [r4, #4]
 800bc2c:	bf04      	itt	eq
 800bc2e:	1852      	addeq	r2, r2, r1
 800bc30:	6022      	streq	r2, [r4, #0]
 800bc32:	602c      	str	r4, [r5, #0]
 800bc34:	e7ec      	b.n	800bc10 <_free_r+0x28>
 800bc36:	461a      	mov	r2, r3
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	b10b      	cbz	r3, 800bc40 <_free_r+0x58>
 800bc3c:	42a3      	cmp	r3, r4
 800bc3e:	d9fa      	bls.n	800bc36 <_free_r+0x4e>
 800bc40:	6811      	ldr	r1, [r2, #0]
 800bc42:	1855      	adds	r5, r2, r1
 800bc44:	42a5      	cmp	r5, r4
 800bc46:	d10b      	bne.n	800bc60 <_free_r+0x78>
 800bc48:	6824      	ldr	r4, [r4, #0]
 800bc4a:	4421      	add	r1, r4
 800bc4c:	1854      	adds	r4, r2, r1
 800bc4e:	42a3      	cmp	r3, r4
 800bc50:	6011      	str	r1, [r2, #0]
 800bc52:	d1dd      	bne.n	800bc10 <_free_r+0x28>
 800bc54:	681c      	ldr	r4, [r3, #0]
 800bc56:	685b      	ldr	r3, [r3, #4]
 800bc58:	6053      	str	r3, [r2, #4]
 800bc5a:	4421      	add	r1, r4
 800bc5c:	6011      	str	r1, [r2, #0]
 800bc5e:	e7d7      	b.n	800bc10 <_free_r+0x28>
 800bc60:	d902      	bls.n	800bc68 <_free_r+0x80>
 800bc62:	230c      	movs	r3, #12
 800bc64:	6003      	str	r3, [r0, #0]
 800bc66:	e7d3      	b.n	800bc10 <_free_r+0x28>
 800bc68:	6825      	ldr	r5, [r4, #0]
 800bc6a:	1961      	adds	r1, r4, r5
 800bc6c:	428b      	cmp	r3, r1
 800bc6e:	bf04      	itt	eq
 800bc70:	6819      	ldreq	r1, [r3, #0]
 800bc72:	685b      	ldreq	r3, [r3, #4]
 800bc74:	6063      	str	r3, [r4, #4]
 800bc76:	bf04      	itt	eq
 800bc78:	1949      	addeq	r1, r1, r5
 800bc7a:	6021      	streq	r1, [r4, #0]
 800bc7c:	6054      	str	r4, [r2, #4]
 800bc7e:	e7c7      	b.n	800bc10 <_free_r+0x28>
 800bc80:	b003      	add	sp, #12
 800bc82:	bd30      	pop	{r4, r5, pc}
 800bc84:	20000098 	.word	0x20000098

0800bc88 <_read_r>:
 800bc88:	b538      	push	{r3, r4, r5, lr}
 800bc8a:	4d07      	ldr	r5, [pc, #28]	; (800bca8 <_read_r+0x20>)
 800bc8c:	4604      	mov	r4, r0
 800bc8e:	4608      	mov	r0, r1
 800bc90:	4611      	mov	r1, r2
 800bc92:	2200      	movs	r2, #0
 800bc94:	602a      	str	r2, [r5, #0]
 800bc96:	461a      	mov	r2, r3
 800bc98:	f7f6 fad4 	bl	8002244 <_read>
 800bc9c:	1c43      	adds	r3, r0, #1
 800bc9e:	d102      	bne.n	800bca6 <_read_r+0x1e>
 800bca0:	682b      	ldr	r3, [r5, #0]
 800bca2:	b103      	cbz	r3, 800bca6 <_read_r+0x1e>
 800bca4:	6023      	str	r3, [r4, #0]
 800bca6:	bd38      	pop	{r3, r4, r5, pc}
 800bca8:	2000093c 	.word	0x2000093c

0800bcac <_fstat_r>:
 800bcac:	b538      	push	{r3, r4, r5, lr}
 800bcae:	4d07      	ldr	r5, [pc, #28]	; (800bccc <_fstat_r+0x20>)
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	4604      	mov	r4, r0
 800bcb4:	4608      	mov	r0, r1
 800bcb6:	4611      	mov	r1, r2
 800bcb8:	602b      	str	r3, [r5, #0]
 800bcba:	f7f6 fb08 	bl	80022ce <_fstat>
 800bcbe:	1c43      	adds	r3, r0, #1
 800bcc0:	d102      	bne.n	800bcc8 <_fstat_r+0x1c>
 800bcc2:	682b      	ldr	r3, [r5, #0]
 800bcc4:	b103      	cbz	r3, 800bcc8 <_fstat_r+0x1c>
 800bcc6:	6023      	str	r3, [r4, #0]
 800bcc8:	bd38      	pop	{r3, r4, r5, pc}
 800bcca:	bf00      	nop
 800bccc:	2000093c 	.word	0x2000093c

0800bcd0 <_isatty_r>:
 800bcd0:	b538      	push	{r3, r4, r5, lr}
 800bcd2:	4d06      	ldr	r5, [pc, #24]	; (800bcec <_isatty_r+0x1c>)
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	4604      	mov	r4, r0
 800bcd8:	4608      	mov	r0, r1
 800bcda:	602b      	str	r3, [r5, #0]
 800bcdc:	f7f6 fb07 	bl	80022ee <_isatty>
 800bce0:	1c43      	adds	r3, r0, #1
 800bce2:	d102      	bne.n	800bcea <_isatty_r+0x1a>
 800bce4:	682b      	ldr	r3, [r5, #0]
 800bce6:	b103      	cbz	r3, 800bcea <_isatty_r+0x1a>
 800bce8:	6023      	str	r3, [r4, #0]
 800bcea:	bd38      	pop	{r3, r4, r5, pc}
 800bcec:	2000093c 	.word	0x2000093c

0800bcf0 <_init>:
 800bcf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcf2:	bf00      	nop
 800bcf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcf6:	bc08      	pop	{r3}
 800bcf8:	469e      	mov	lr, r3
 800bcfa:	4770      	bx	lr

0800bcfc <_fini>:
 800bcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcfe:	bf00      	nop
 800bd00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd02:	bc08      	pop	{r3}
 800bd04:	469e      	mov	lr, r3
 800bd06:	4770      	bx	lr
