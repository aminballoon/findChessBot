
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ce4  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009f7c  08009f7c  00019f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009fbc  08009fbc  00019fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009fc4  08009fc4  00019fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009fc8  08009fc8  00019fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08009fcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000580  20000010  08009fdc  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000590  08009fdc  00020590  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001fadc  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002f8e  00000000  00000000  0003fb1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001288  00000000  00000000  00042aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000011b0  00000000  00000000  00043d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000035f7  00000000  00000000  00044ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000171a5  00000000  00000000  000484d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00165480  00000000  00000000  0005f67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001c4afc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004f8c  00000000  00000000  001c4b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009f64 	.word	0x08009f64

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	08009f64 	.word	0x08009f64

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <StepDriveRad>:
//void send_package(uint8_t *data) {
//	HAL_UART_Transmit_IT(&huart3, *data, 1);
//}

void StepDriveRad(char _ch, double _ang_v)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	ed87 0b00 	vstr	d0, [r7]
 80005dc:	73fb      	strb	r3, [r7, #15]
	switch(_ch)
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	3b01      	subs	r3, #1
 80005e2:	2b04      	cmp	r3, #4
 80005e4:	f200 81d4 	bhi.w	8000990 <StepDriveRad+0x3c0>
 80005e8:	a201      	add	r2, pc, #4	; (adr r2, 80005f0 <StepDriveRad+0x20>)
 80005ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ee:	bf00      	nop
 80005f0:	08000605 	.word	0x08000605
 80005f4:	080006b3 	.word	0x080006b3
 80005f8:	0800076b 	.word	0x0800076b
 80005fc:	08000815 	.word	0x08000815
 8000600:	080008c3 	.word	0x080008c3
	{
		case STEPJ1:
		{
			/* Direction of Joint1's Stepper Motor */
			if(_ang_v < 0)
 8000604:	ed97 7b00 	vldr	d7, [r7]
 8000608:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800060c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000610:	d506      	bpl.n	8000620 <StepDriveRad+0x50>
			{
				HAL_GPIO_WritePin(DIR_1_GPIO_Port, DIR_1_Pin, GPIO_PIN_SET);
 8000612:	2201      	movs	r2, #1
 8000614:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000618:	48bb      	ldr	r0, [pc, #748]	; (8000908 <StepDriveRad+0x338>)
 800061a:	f004 fa9f 	bl	8004b5c <HAL_GPIO_WritePin>
 800061e:	e005      	b.n	800062c <StepDriveRad+0x5c>
			}
			else
			{
				HAL_GPIO_WritePin(DIR_1_GPIO_Port, DIR_1_Pin, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000626:	48b8      	ldr	r0, [pc, #736]	; (8000908 <StepDriveRad+0x338>)
 8000628:	f004 fa98 	bl	8004b5c <HAL_GPIO_WritePin>
			}
			/* Angular Velocity of Joint1's Stepper Motor */
			if(_ang_v == 0) // To avoid TIM1->ARR is undefined value.
 800062c:	ed97 7b00 	vldr	d7, [r7]
 8000630:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000638:	d103      	bne.n	8000642 <StepDriveRad+0x72>
			{
				TIM1->CCR2 = 0;
 800063a:	4bb4      	ldr	r3, [pc, #720]	; (800090c <StepDriveRad+0x33c>)
 800063c:	2200      	movs	r2, #0
 800063e:	639a      	str	r2, [r3, #56]	; 0x38
 8000640:	e037      	b.n	80006b2 <StepDriveRad+0xe2>
			}
			else
			{
				TIM1->ARR = round((6.283*_FCY)/(1600*((TIM1->PSC)+1)*abs(_ang_v))) - 1;
 8000642:	4bb2      	ldr	r3, [pc, #712]	; (800090c <StepDriveRad+0x33c>)
 8000644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000646:	3301      	adds	r3, #1
 8000648:	ed97 7b00 	vldr	d7, [r7]
 800064c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000650:	ee17 2a90 	vmov	r2, s15
 8000654:	2a00      	cmp	r2, #0
 8000656:	bfb8      	it	lt
 8000658:	4252      	neglt	r2, r2
 800065a:	fb02 f303 	mul.w	r3, r2, r3
 800065e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000662:	fb02 f303 	mul.w	r3, r2, r3
 8000666:	ee07 3a90 	vmov	s15, r3
 800066a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800066e:	ed9f 5ba4 	vldr	d5, [pc, #656]	; 8000900 <StepDriveRad+0x330>
 8000672:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000676:	eeb0 0b46 	vmov.f64	d0, d6
 800067a:	f009 fc01 	bl	8009e80 <round>
 800067e:	eeb0 7b40 	vmov.f64	d7, d0
 8000682:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000686:	ee37 7b46 	vsub.f64	d7, d7, d6
 800068a:	4ba0      	ldr	r3, [pc, #640]	; (800090c <StepDriveRad+0x33c>)
 800068c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000690:	ee17 2a90 	vmov	r2, s15
 8000694:	62da      	str	r2, [r3, #44]	; 0x2c
				TIM1->CCR2 = round(((TIM1->ARR)+1)/2);
 8000696:	4b9d      	ldr	r3, [pc, #628]	; (800090c <StepDriveRad+0x33c>)
 8000698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800069a:	3301      	adds	r3, #1
 800069c:	085b      	lsrs	r3, r3, #1
 800069e:	ee07 3a90 	vmov	s15, r3
 80006a2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80006a6:	4b99      	ldr	r3, [pc, #612]	; (800090c <StepDriveRad+0x33c>)
 80006a8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006ac:	ee17 2a90 	vmov	r2, s15
 80006b0:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
		case STEPJ2:
		{
			/* Direction of Joint2's Stepper Motor */
			if(_ang_v < 0)
 80006b2:	ed97 7b00 	vldr	d7, [r7]
 80006b6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006be:	d506      	bpl.n	80006ce <StepDriveRad+0xfe>
			{
				HAL_GPIO_WritePin(DIR_2_GPIO_Port, DIR_2_Pin, GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c6:	4892      	ldr	r0, [pc, #584]	; (8000910 <StepDriveRad+0x340>)
 80006c8:	f004 fa48 	bl	8004b5c <HAL_GPIO_WritePin>
 80006cc:	e005      	b.n	80006da <StepDriveRad+0x10a>
			}
			else
			{
				HAL_GPIO_WritePin(DIR_2_GPIO_Port, DIR_2_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d4:	488e      	ldr	r0, [pc, #568]	; (8000910 <StepDriveRad+0x340>)
 80006d6:	f004 fa41 	bl	8004b5c <HAL_GPIO_WritePin>
			}
			/* Angular Velocity of Joint2's Stepper Motor */
			if(_ang_v == 0) // To avoid TIM2->ARR is undefined value.
 80006da:	ed97 7b00 	vldr	d7, [r7]
 80006de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80006e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006e6:	d104      	bne.n	80006f2 <StepDriveRad+0x122>
			{
				TIM2->CCR3 = 0;
 80006e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006ec:	2200      	movs	r2, #0
 80006ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80006f0:	e03b      	b.n	800076a <StepDriveRad+0x19a>
			}
			else
			{
				TIM2->ARR = round((6.283*_FCY)/(1600*((TIM2->PSC)+1)*abs(_ang_v))) - 1;
 80006f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006f8:	3301      	adds	r3, #1
 80006fa:	ed97 7b00 	vldr	d7, [r7]
 80006fe:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000702:	ee17 2a90 	vmov	r2, s15
 8000706:	2a00      	cmp	r2, #0
 8000708:	bfb8      	it	lt
 800070a:	4252      	neglt	r2, r2
 800070c:	fb02 f303 	mul.w	r3, r2, r3
 8000710:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000714:	fb02 f303 	mul.w	r3, r2, r3
 8000718:	ee07 3a90 	vmov	s15, r3
 800071c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000720:	ed9f 5b77 	vldr	d5, [pc, #476]	; 8000900 <StepDriveRad+0x330>
 8000724:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000728:	eeb0 0b46 	vmov.f64	d0, d6
 800072c:	f009 fba8 	bl	8009e80 <round>
 8000730:	eeb0 7b40 	vmov.f64	d7, d0
 8000734:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000738:	ee37 7b46 	vsub.f64	d7, d7, d6
 800073c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000740:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000744:	ee17 2a90 	vmov	r2, s15
 8000748:	62da      	str	r2, [r3, #44]	; 0x2c
				TIM2->CCR3 = round(((TIM2->ARR)+1)/2);
 800074a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800074e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000750:	3301      	adds	r3, #1
 8000752:	085b      	lsrs	r3, r3, #1
 8000754:	ee07 3a90 	vmov	s15, r3
 8000758:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800075c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000760:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000764:	ee17 2a90 	vmov	r2, s15
 8000768:	63da      	str	r2, [r3, #60]	; 0x3c
			}
		}
		case STEPJ3:
		{
			/* Direction of Joint3's Stepper Motor */
			if(_ang_v < 0)
 800076a:	ed97 7b00 	vldr	d7, [r7]
 800076e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000776:	d505      	bpl.n	8000784 <StepDriveRad+0x1b4>
			{
				HAL_GPIO_WritePin(DIR_3_GPIO_Port, DIR_3_Pin, GPIO_PIN_SET);
 8000778:	2201      	movs	r2, #1
 800077a:	2120      	movs	r1, #32
 800077c:	4864      	ldr	r0, [pc, #400]	; (8000910 <StepDriveRad+0x340>)
 800077e:	f004 f9ed 	bl	8004b5c <HAL_GPIO_WritePin>
 8000782:	e004      	b.n	800078e <StepDriveRad+0x1be>
			}
			else
			{
				HAL_GPIO_WritePin(DIR_3_GPIO_Port, DIR_3_Pin, GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	2120      	movs	r1, #32
 8000788:	4861      	ldr	r0, [pc, #388]	; (8000910 <StepDriveRad+0x340>)
 800078a:	f004 f9e7 	bl	8004b5c <HAL_GPIO_WritePin>
			}
			/* Angular Velocity of Joint3's Stepper Motor */
			if(_ang_v == 0) // To avoid TIM3->ARR is undefined value.
 800078e:	ed97 7b00 	vldr	d7, [r7]
 8000792:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d103      	bne.n	80007a4 <StepDriveRad+0x1d4>
			{
				TIM3->CCR1 = 0;
 800079c:	4b5d      	ldr	r3, [pc, #372]	; (8000914 <StepDriveRad+0x344>)
 800079e:	2200      	movs	r2, #0
 80007a0:	635a      	str	r2, [r3, #52]	; 0x34
 80007a2:	e037      	b.n	8000814 <StepDriveRad+0x244>
			}
			else
			{
				TIM3->ARR = round((6.283*_FCY)/(1600*((TIM3->PSC)+1)*abs(_ang_v))) - 1;
 80007a4:	4b5b      	ldr	r3, [pc, #364]	; (8000914 <StepDriveRad+0x344>)
 80007a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007a8:	3301      	adds	r3, #1
 80007aa:	ed97 7b00 	vldr	d7, [r7]
 80007ae:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80007b2:	ee17 2a90 	vmov	r2, s15
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	bfb8      	it	lt
 80007ba:	4252      	neglt	r2, r2
 80007bc:	fb02 f303 	mul.w	r3, r2, r3
 80007c0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80007c4:	fb02 f303 	mul.w	r3, r2, r3
 80007c8:	ee07 3a90 	vmov	s15, r3
 80007cc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80007d0:	ed9f 5b4b 	vldr	d5, [pc, #300]	; 8000900 <StepDriveRad+0x330>
 80007d4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80007d8:	eeb0 0b46 	vmov.f64	d0, d6
 80007dc:	f009 fb50 	bl	8009e80 <round>
 80007e0:	eeb0 7b40 	vmov.f64	d7, d0
 80007e4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80007e8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80007ec:	4b49      	ldr	r3, [pc, #292]	; (8000914 <StepDriveRad+0x344>)
 80007ee:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007f2:	ee17 2a90 	vmov	r2, s15
 80007f6:	62da      	str	r2, [r3, #44]	; 0x2c
				TIM3->CCR1 = round(((TIM3->ARR)+1)/2);
 80007f8:	4b46      	ldr	r3, [pc, #280]	; (8000914 <StepDriveRad+0x344>)
 80007fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007fc:	3301      	adds	r3, #1
 80007fe:	085b      	lsrs	r3, r3, #1
 8000800:	ee07 3a90 	vmov	s15, r3
 8000804:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000808:	4b42      	ldr	r3, [pc, #264]	; (8000914 <StepDriveRad+0x344>)
 800080a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800080e:	ee17 2a90 	vmov	r2, s15
 8000812:	635a      	str	r2, [r3, #52]	; 0x34
			}
		}
		case STEPJ4:
		{
			/* Direction of Joint4's Stepper Motor */
			if(_ang_v < 0)
 8000814:	ed97 7b00 	vldr	d7, [r7]
 8000818:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800081c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000820:	d506      	bpl.n	8000830 <StepDriveRad+0x260>
			{
				HAL_GPIO_WritePin(DIR_4_GPIO_Port, DIR_4_Pin, GPIO_PIN_SET);
 8000822:	2201      	movs	r2, #1
 8000824:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000828:	4839      	ldr	r0, [pc, #228]	; (8000910 <StepDriveRad+0x340>)
 800082a:	f004 f997 	bl	8004b5c <HAL_GPIO_WritePin>
 800082e:	e005      	b.n	800083c <StepDriveRad+0x26c>
			}
			else
			{
				HAL_GPIO_WritePin(DIR_4_GPIO_Port, DIR_4_Pin, GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000836:	4836      	ldr	r0, [pc, #216]	; (8000910 <StepDriveRad+0x340>)
 8000838:	f004 f990 	bl	8004b5c <HAL_GPIO_WritePin>
			}
			/* Angular Velocity of Joint4's Stepper Motor */
			if(_ang_v == 0) // To avoid TIM4->ARR is undefined value.
 800083c:	ed97 7b00 	vldr	d7, [r7]
 8000840:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000848:	d103      	bne.n	8000852 <StepDriveRad+0x282>
			{
				TIM4->CCR3 = 0;
 800084a:	4b33      	ldr	r3, [pc, #204]	; (8000918 <StepDriveRad+0x348>)
 800084c:	2200      	movs	r2, #0
 800084e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000850:	e037      	b.n	80008c2 <StepDriveRad+0x2f2>
			}
			else
			{
				TIM4->ARR = round((6.283*_FCY)/(1600*((TIM4->PSC)+1)*abs(_ang_v))) - 1;
 8000852:	4b31      	ldr	r3, [pc, #196]	; (8000918 <StepDriveRad+0x348>)
 8000854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000856:	3301      	adds	r3, #1
 8000858:	ed97 7b00 	vldr	d7, [r7]
 800085c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000860:	ee17 2a90 	vmov	r2, s15
 8000864:	2a00      	cmp	r2, #0
 8000866:	bfb8      	it	lt
 8000868:	4252      	neglt	r2, r2
 800086a:	fb02 f303 	mul.w	r3, r2, r3
 800086e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000872:	fb02 f303 	mul.w	r3, r2, r3
 8000876:	ee07 3a90 	vmov	s15, r3
 800087a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800087e:	ed9f 5b20 	vldr	d5, [pc, #128]	; 8000900 <StepDriveRad+0x330>
 8000882:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000886:	eeb0 0b46 	vmov.f64	d0, d6
 800088a:	f009 faf9 	bl	8009e80 <round>
 800088e:	eeb0 7b40 	vmov.f64	d7, d0
 8000892:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000896:	ee37 7b46 	vsub.f64	d7, d7, d6
 800089a:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <StepDriveRad+0x348>)
 800089c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80008a0:	ee17 2a90 	vmov	r2, s15
 80008a4:	62da      	str	r2, [r3, #44]	; 0x2c
				TIM4->CCR3 = round(((TIM4->ARR)+1)/2);
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <StepDriveRad+0x348>)
 80008a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008aa:	3301      	adds	r3, #1
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ee07 3a90 	vmov	s15, r3
 80008b2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80008b6:	4b18      	ldr	r3, [pc, #96]	; (8000918 <StepDriveRad+0x348>)
 80008b8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80008bc:	ee17 2a90 	vmov	r2, s15
 80008c0:	63da      	str	r2, [r3, #60]	; 0x3c
			}
		}
		case STEPGripper:
		{
			/* Direction of Gripper's Stepper Motor */
			if(_ang_v < 0)
 80008c2:	ed97 7b00 	vldr	d7, [r7]
 80008c6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80008ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ce:	d506      	bpl.n	80008de <StepDriveRad+0x30e>
			{
				HAL_GPIO_WritePin(DIR_5_GPIO_Port, DIR_5_Pin, GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008d6:	480c      	ldr	r0, [pc, #48]	; (8000908 <StepDriveRad+0x338>)
 80008d8:	f004 f940 	bl	8004b5c <HAL_GPIO_WritePin>
 80008dc:	e005      	b.n	80008ea <StepDriveRad+0x31a>
			}
			else
			{
				HAL_GPIO_WritePin(DIR_5_GPIO_Port, DIR_5_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008e4:	4808      	ldr	r0, [pc, #32]	; (8000908 <StepDriveRad+0x338>)
 80008e6:	f004 f939 	bl	8004b5c <HAL_GPIO_WritePin>
			}
			/* Angular Velocity of Gripper's Stepper Motor */
			if(_ang_v == 0) // To avoid TIM2->ARR is undefined value.
 80008ea:	ed97 7b00 	vldr	d7, [r7]
 80008ee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80008f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008f6:	d113      	bne.n	8000920 <StepDriveRad+0x350>
			{
				TIM15->CCR2 = 0;
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <StepDriveRad+0x34c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	639a      	str	r2, [r3, #56]	; 0x38
 80008fe:	e047      	b.n	8000990 <StepDriveRad+0x3c0>
 8000900:	20000000 	.word	0x20000000
 8000904:	41d67842 	.word	0x41d67842
 8000908:	58021000 	.word	0x58021000
 800090c:	40010000 	.word	0x40010000
 8000910:	58020400 	.word	0x58020400
 8000914:	40000400 	.word	0x40000400
 8000918:	40000800 	.word	0x40000800
 800091c:	40014000 	.word	0x40014000
			}
			else
			{
				TIM15->ARR = round((6.283*_FCY)/(1600*((TIM15->PSC)+1)*abs(_ang_v))) - 1;
 8000920:	4b27      	ldr	r3, [pc, #156]	; (80009c0 <StepDriveRad+0x3f0>)
 8000922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000924:	3301      	adds	r3, #1
 8000926:	ed97 7b00 	vldr	d7, [r7]
 800092a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800092e:	ee17 2a90 	vmov	r2, s15
 8000932:	2a00      	cmp	r2, #0
 8000934:	bfb8      	it	lt
 8000936:	4252      	neglt	r2, r2
 8000938:	fb02 f303 	mul.w	r3, r2, r3
 800093c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000940:	fb02 f303 	mul.w	r3, r2, r3
 8000944:	ee07 3a90 	vmov	s15, r3
 8000948:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800094c:	ed9f 5b1a 	vldr	d5, [pc, #104]	; 80009b8 <StepDriveRad+0x3e8>
 8000950:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000954:	eeb0 0b46 	vmov.f64	d0, d6
 8000958:	f009 fa92 	bl	8009e80 <round>
 800095c:	eeb0 7b40 	vmov.f64	d7, d0
 8000960:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000964:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000968:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <StepDriveRad+0x3f0>)
 800096a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800096e:	ee17 2a90 	vmov	r2, s15
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
				TIM15->CCR2 = round(((TIM15->ARR)+1)/2);
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <StepDriveRad+0x3f0>)
 8000976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000978:	3301      	adds	r3, #1
 800097a:	085b      	lsrs	r3, r3, #1
 800097c:	ee07 3a90 	vmov	s15, r3
 8000980:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <StepDriveRad+0x3f0>)
 8000986:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800098a:	ee17 2a90 	vmov	r2, s15
 800098e:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
		default:
		{
			TIM1->CCR2 = 0;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <StepDriveRad+0x3f4>)
 8000992:	2200      	movs	r2, #0
 8000994:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR3 = 0;
 8000996:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800099a:	2200      	movs	r2, #0
 800099c:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM3->CCR1 = 0;
 800099e:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <StepDriveRad+0x3f8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	635a      	str	r2, [r3, #52]	; 0x34
			TIM4->CCR3 = 0;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <StepDriveRad+0x3fc>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM15->CCR2 = 0;
 80009aa:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <StepDriveRad+0x3f0>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}

}
 80009b0:	bf00      	nop
 80009b2:	3710      	adds	r7, #16
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000000 	.word	0x20000000
 80009bc:	41d67842 	.word	0x41d67842
 80009c0:	40014000 	.word	0x40014000
 80009c4:	40010000 	.word	0x40010000
 80009c8:	40000400 	.word	0x40000400
 80009cc:	40000800 	.word	0x40000800

080009d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d4:	f001 fb1c 	bl	8002010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d8:	f000 f852 	bl	8000a80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  SysTick->LOAD = 480000 - 1;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009dc:	f000 fd0e 	bl	80013fc <MX_GPIO_Init>
  MX_DMA_Init();
 80009e0:	f000 fcc4 	bl	800136c <MX_DMA_Init>
  MX_USART3_UART_Init();
 80009e4:	f000 fc76 	bl	80012d4 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80009e8:	f000 f9ca 	bl	8000d80 <MX_TIM2_Init>
  MX_UART4_Init();
 80009ec:	f000 fc22 	bl	8001234 <MX_UART4_Init>
  MX_TIM4_Init();
 80009f0:	f000 fab6 	bl	8000f60 <MX_TIM4_Init>
  MX_SPI3_Init();
 80009f4:	f000 f8c0 	bl	8000b78 <MX_SPI3_Init>
  MX_TIM1_Init();
 80009f8:	f000 f914 	bl	8000c24 <MX_TIM1_Init>
  MX_TIM3_Init();
 80009fc:	f000 fa38 	bl	8000e70 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000a00:	f000 fb26 	bl	8001050 <MX_TIM5_Init>
  MX_TIM15_Init();
 8000a04:	f000 fb72 	bl	80010ec <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start_IT(&htim2);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	481a      	ldr	r0, [pc, #104]	; (8000a78 <main+0xa8>)
 8000a0e:	f004 f8a5 	bl	8004b5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000a12:	2201      	movs	r2, #1
 8000a14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a18:	4817      	ldr	r0, [pc, #92]	; (8000a78 <main+0xa8>)
 8000a1a:	f004 f89f 	bl	8004b5c <HAL_GPIO_WritePin>
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8000a1e:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <main+0xac>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <main+0xac>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f042 0220 	orr.w	r2, r2, #32
 8000a2c:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_TC);
 8000a2e:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <main+0xac>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <main+0xac>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a3c:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  StepDriveRad(1, 6.23);
 8000a3e:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8000a68 <main+0x98>
 8000a42:	2001      	movs	r0, #1
 8000a44:	f7ff fdc4 	bl	80005d0 <StepDriveRad>
	  HAL_Delay(2000);
 8000a48:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a4c:	f001 fb72 	bl	8002134 <HAL_Delay>
	  StepDriveRad(1, -6.23);
 8000a50:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8000a70 <main+0xa0>
 8000a54:	2001      	movs	r0, #1
 8000a56:	f7ff fdbb 	bl	80005d0 <StepDriveRad>
	  HAL_Delay(2000);
 8000a5a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a5e:	f001 fb69 	bl	8002134 <HAL_Delay>
	  StepDriveRad(1, 6.23);
 8000a62:	e7ec      	b.n	8000a3e <main+0x6e>
 8000a64:	f3af 8000 	nop.w
 8000a68:	1eb851ec 	.word	0x1eb851ec
 8000a6c:	4018eb85 	.word	0x4018eb85
 8000a70:	1eb851ec 	.word	0x1eb851ec
 8000a74:	c018eb85 	.word	0xc018eb85
 8000a78:	58020400 	.word	0x58020400
 8000a7c:	20000168 	.word	0x20000168

08000a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b09c      	sub	sp, #112	; 0x70
 8000a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8a:	224c      	movs	r2, #76	; 0x4c
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f009 fa60 	bl	8009f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2220      	movs	r2, #32
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f009 fa5a 	bl	8009f54 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000aa0:	2002      	movs	r0, #2
 8000aa2:	f004 f88f 	bl	8004bc4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	603b      	str	r3, [r7, #0]
 8000aaa:	4b31      	ldr	r3, [pc, #196]	; (8000b70 <SystemClock_Config+0xf0>)
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	4a30      	ldr	r2, [pc, #192]	; (8000b70 <SystemClock_Config+0xf0>)
 8000ab0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ab4:	6193      	str	r3, [r2, #24]
 8000ab6:	4b2e      	ldr	r3, [pc, #184]	; (8000b70 <SystemClock_Config+0xf0>)
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	4b2c      	ldr	r3, [pc, #176]	; (8000b74 <SystemClock_Config+0xf4>)
 8000ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac4:	4a2b      	ldr	r2, [pc, #172]	; (8000b74 <SystemClock_Config+0xf4>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000acc:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <SystemClock_Config+0xf4>)
 8000ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ad0:	f003 0301 	and.w	r3, r3, #1
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ad8:	bf00      	nop
 8000ada:	4b25      	ldr	r3, [pc, #148]	; (8000b70 <SystemClock_Config+0xf0>)
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ae2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ae6:	d1f8      	bne.n	8000ada <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000aec:	2301      	movs	r3, #1
 8000aee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af0:	2340      	movs	r3, #64	; 0x40
 8000af2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af4:	2302      	movs	r3, #2
 8000af6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000af8:	2300      	movs	r3, #0
 8000afa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000afc:	2304      	movs	r3, #4
 8000afe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000b00:	233c      	movs	r3, #60	; 0x3c
 8000b02:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b04:	2302      	movs	r3, #2
 8000b06:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000b08:	2306      	movs	r3, #6
 8000b0a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b10:	230c      	movs	r3, #12
 8000b12:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b20:	4618      	mov	r0, r3
 8000b22:	f004 f889 	bl	8004c38 <HAL_RCC_OscConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000b2c:	f000 fd7f 	bl	800162e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b30:	233f      	movs	r3, #63	; 0x3f
 8000b32:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b34:	2303      	movs	r3, #3
 8000b36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b3c:	2308      	movs	r3, #8
 8000b3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b40:	2340      	movs	r3, #64	; 0x40
 8000b42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b44:	2340      	movs	r3, #64	; 0x40
 8000b46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b4c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b4e:	2340      	movs	r3, #64	; 0x40
 8000b50:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2104      	movs	r1, #4
 8000b56:	4618      	mov	r0, r3
 8000b58:	f004 fc7e 	bl	8005458 <HAL_RCC_ClockConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000b62:	f000 fd64 	bl	800162e <Error_Handler>
  }
}
 8000b66:	bf00      	nop
 8000b68:	3770      	adds	r7, #112	; 0x70
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	58024800 	.word	0x58024800
 8000b74:	58000400 	.word	0x58000400

08000b78 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000b7c:	4b27      	ldr	r3, [pc, #156]	; (8000c1c <MX_SPI3_Init+0xa4>)
 8000b7e:	4a28      	ldr	r2, [pc, #160]	; (8000c20 <MX_SPI3_Init+0xa8>)
 8000b80:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b82:	4b26      	ldr	r3, [pc, #152]	; (8000c1c <MX_SPI3_Init+0xa4>)
 8000b84:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b88:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b8a:	4b24      	ldr	r3, [pc, #144]	; (8000c1c <MX_SPI3_Init+0xa4>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b90:	4b22      	ldr	r3, [pc, #136]	; (8000c1c <MX_SPI3_Init+0xa4>)
 8000b92:	2203      	movs	r2, #3
 8000b94:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b96:	4b21      	ldr	r3, [pc, #132]	; (8000c1c <MX_SPI3_Init+0xa4>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b9c:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <MX_SPI3_Init+0xa4>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ba2:	4b1e      	ldr	r3, [pc, #120]	; (8000c1c <MX_SPI3_Init+0xa4>)
 8000ba4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000ba8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000baa:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <MX_SPI3_Init+0xa4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <MX_SPI3_Init+0xa4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bb6:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <MX_SPI3_Init+0xa4>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bbc:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <MX_SPI3_Init+0xa4>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000bc2:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <MX_SPI3_Init+0xa4>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bc8:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <MX_SPI3_Init+0xa4>)
 8000bca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bce:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <MX_SPI3_Init+0xa4>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <MX_SPI3_Init+0xa4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <MX_SPI3_Init+0xa4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <MX_SPI3_Init+0xa4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <MX_SPI3_Init+0xa4>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000bee:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <MX_SPI3_Init+0xa4>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000bf4:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <MX_SPI3_Init+0xa4>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000bfa:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <MX_SPI3_Init+0xa4>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <MX_SPI3_Init+0xa4>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c06:	4805      	ldr	r0, [pc, #20]	; (8000c1c <MX_SPI3_Init+0xa4>)
 8000c08:	f006 fb14 	bl	8007234 <HAL_SPI_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8000c12:	f000 fd0c 	bl	800162e <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000360 	.word	0x20000360
 8000c20:	40003c00 	.word	0x40003c00

08000c24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b09a      	sub	sp, #104	; 0x68
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c2a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c38:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
 8000c54:	615a      	str	r2, [r3, #20]
 8000c56:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	222c      	movs	r2, #44	; 0x2c
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f009 f978 	bl	8009f54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c64:	4b44      	ldr	r3, [pc, #272]	; (8000d78 <MX_TIM1_Init+0x154>)
 8000c66:	4a45      	ldr	r2, [pc, #276]	; (8000d7c <MX_TIM1_Init+0x158>)
 8000c68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 8000c6a:	4b43      	ldr	r3, [pc, #268]	; (8000d78 <MX_TIM1_Init+0x154>)
 8000c6c:	22ef      	movs	r2, #239	; 0xef
 8000c6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c70:	4b41      	ldr	r3, [pc, #260]	; (8000d78 <MX_TIM1_Init+0x154>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 625-1;
 8000c76:	4b40      	ldr	r3, [pc, #256]	; (8000d78 <MX_TIM1_Init+0x154>)
 8000c78:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000c7c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7e:	4b3e      	ldr	r3, [pc, #248]	; (8000d78 <MX_TIM1_Init+0x154>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c84:	4b3c      	ldr	r3, [pc, #240]	; (8000d78 <MX_TIM1_Init+0x154>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8a:	4b3b      	ldr	r3, [pc, #236]	; (8000d78 <MX_TIM1_Init+0x154>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c90:	4839      	ldr	r0, [pc, #228]	; (8000d78 <MX_TIM1_Init+0x154>)
 8000c92:	f006 fbec 	bl	800746e <HAL_TIM_Base_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000c9c:	f000 fcc7 	bl	800162e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ca6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000caa:	4619      	mov	r1, r3
 8000cac:	4832      	ldr	r0, [pc, #200]	; (8000d78 <MX_TIM1_Init+0x154>)
 8000cae:	f006 fec5 	bl	8007a3c <HAL_TIM_ConfigClockSource>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000cb8:	f000 fcb9 	bl	800162e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cbc:	482e      	ldr	r0, [pc, #184]	; (8000d78 <MX_TIM1_Init+0x154>)
 8000cbe:	f006 fc2d 	bl	800751c <HAL_TIM_PWM_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000cc8:	f000 fcb1 	bl	800162e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cd8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4826      	ldr	r0, [pc, #152]	; (8000d78 <MX_TIM1_Init+0x154>)
 8000ce0:	f007 fbce 	bl	8008480 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000cea:	f000 fca0 	bl	800162e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cee:	2360      	movs	r3, #96	; 0x60
 8000cf0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8000cf2:	f240 1339 	movw	r3, #313	; 0x139
 8000cf6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d04:	2300      	movs	r3, #0
 8000d06:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d10:	2204      	movs	r2, #4
 8000d12:	4619      	mov	r1, r3
 8000d14:	4818      	ldr	r0, [pc, #96]	; (8000d78 <MX_TIM1_Init+0x154>)
 8000d16:	f006 fd81 	bl	800781c <HAL_TIM_PWM_ConfigChannel>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000d20:	f000 fc85 	bl	800162e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d3c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	4619      	mov	r1, r3
 8000d58:	4807      	ldr	r0, [pc, #28]	; (8000d78 <MX_TIM1_Init+0x154>)
 8000d5a:	f007 fc19 	bl	8008590 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000d64:	f000 fc63 	bl	800162e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d68:	4803      	ldr	r0, [pc, #12]	; (8000d78 <MX_TIM1_Init+0x154>)
 8000d6a:	f000 fd7f 	bl	800186c <HAL_TIM_MspPostInit>

}
 8000d6e:	bf00      	nop
 8000d70:	3768      	adds	r7, #104	; 0x68
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	200003ec 	.word	0x200003ec
 8000d7c:	40010000 	.word	0x40010000

08000d80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08e      	sub	sp, #56	; 0x38
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d94:	f107 031c 	add.w	r3, r7, #28
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da0:	463b      	mov	r3, r7
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
 8000dac:	611a      	str	r2, [r3, #16]
 8000dae:	615a      	str	r2, [r3, #20]
 8000db0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000db2:	4b2e      	ldr	r3, [pc, #184]	; (8000e6c <MX_TIM2_Init+0xec>)
 8000db4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000db8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 8000dba:	4b2c      	ldr	r3, [pc, #176]	; (8000e6c <MX_TIM2_Init+0xec>)
 8000dbc:	22ef      	movs	r2, #239	; 0xef
 8000dbe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc0:	4b2a      	ldr	r3, [pc, #168]	; (8000e6c <MX_TIM2_Init+0xec>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625-1;
 8000dc6:	4b29      	ldr	r3, [pc, #164]	; (8000e6c <MX_TIM2_Init+0xec>)
 8000dc8:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000dcc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dce:	4b27      	ldr	r3, [pc, #156]	; (8000e6c <MX_TIM2_Init+0xec>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd4:	4b25      	ldr	r3, [pc, #148]	; (8000e6c <MX_TIM2_Init+0xec>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dda:	4824      	ldr	r0, [pc, #144]	; (8000e6c <MX_TIM2_Init+0xec>)
 8000ddc:	f006 fb47 	bl	800746e <HAL_TIM_Base_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000de6:	f000 fc22 	bl	800162e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000df0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df4:	4619      	mov	r1, r3
 8000df6:	481d      	ldr	r0, [pc, #116]	; (8000e6c <MX_TIM2_Init+0xec>)
 8000df8:	f006 fe20 	bl	8007a3c <HAL_TIM_ConfigClockSource>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000e02:	f000 fc14 	bl	800162e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e06:	4819      	ldr	r0, [pc, #100]	; (8000e6c <MX_TIM2_Init+0xec>)
 8000e08:	f006 fb88 	bl	800751c <HAL_TIM_PWM_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000e12:	f000 fc0c 	bl	800162e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e1e:	f107 031c 	add.w	r3, r7, #28
 8000e22:	4619      	mov	r1, r3
 8000e24:	4811      	ldr	r0, [pc, #68]	; (8000e6c <MX_TIM2_Init+0xec>)
 8000e26:	f007 fb2b 	bl	8008480 <HAL_TIMEx_MasterConfigSynchronization>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000e30:	f000 fbfd 	bl	800162e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e34:	2360      	movs	r3, #96	; 0x60
 8000e36:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000e38:	f240 1339 	movw	r3, #313	; 0x139
 8000e3c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e46:	463b      	mov	r3, r7
 8000e48:	2208      	movs	r2, #8
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4807      	ldr	r0, [pc, #28]	; (8000e6c <MX_TIM2_Init+0xec>)
 8000e4e:	f006 fce5 	bl	800781c <HAL_TIM_PWM_ConfigChannel>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000e58:	f000 fbe9 	bl	800162e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e5c:	4803      	ldr	r0, [pc, #12]	; (8000e6c <MX_TIM2_Init+0xec>)
 8000e5e:	f000 fd05 	bl	800186c <HAL_TIM_MspPostInit>

}
 8000e62:	bf00      	nop
 8000e64:	3738      	adds	r7, #56	; 0x38
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	200004c8 	.word	0x200004c8

08000e70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08e      	sub	sp, #56	; 0x38
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e90:	463b      	mov	r3, r7
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	611a      	str	r2, [r3, #16]
 8000e9e:	615a      	str	r2, [r3, #20]
 8000ea0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ea2:	4b2d      	ldr	r3, [pc, #180]	; (8000f58 <MX_TIM3_Init+0xe8>)
 8000ea4:	4a2d      	ldr	r2, [pc, #180]	; (8000f5c <MX_TIM3_Init+0xec>)
 8000ea6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 8000ea8:	4b2b      	ldr	r3, [pc, #172]	; (8000f58 <MX_TIM3_Init+0xe8>)
 8000eaa:	22ef      	movs	r2, #239	; 0xef
 8000eac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eae:	4b2a      	ldr	r3, [pc, #168]	; (8000f58 <MX_TIM3_Init+0xe8>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 625-1;
 8000eb4:	4b28      	ldr	r3, [pc, #160]	; (8000f58 <MX_TIM3_Init+0xe8>)
 8000eb6:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000eba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ebc:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <MX_TIM3_Init+0xe8>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec2:	4b25      	ldr	r3, [pc, #148]	; (8000f58 <MX_TIM3_Init+0xe8>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ec8:	4823      	ldr	r0, [pc, #140]	; (8000f58 <MX_TIM3_Init+0xe8>)
 8000eca:	f006 fad0 	bl	800746e <HAL_TIM_Base_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000ed4:	f000 fbab 	bl	800162e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ede:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	481c      	ldr	r0, [pc, #112]	; (8000f58 <MX_TIM3_Init+0xe8>)
 8000ee6:	f006 fda9 	bl	8007a3c <HAL_TIM_ConfigClockSource>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000ef0:	f000 fb9d 	bl	800162e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ef4:	4818      	ldr	r0, [pc, #96]	; (8000f58 <MX_TIM3_Init+0xe8>)
 8000ef6:	f006 fb11 	bl	800751c <HAL_TIM_PWM_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000f00:	f000 fb95 	bl	800162e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	4619      	mov	r1, r3
 8000f12:	4811      	ldr	r0, [pc, #68]	; (8000f58 <MX_TIM3_Init+0xe8>)
 8000f14:	f007 fab4 	bl	8008480 <HAL_TIMEx_MasterConfigSynchronization>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000f1e:	f000 fb86 	bl	800162e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f22:	2360      	movs	r3, #96	; 0x60
 8000f24:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000f26:	f240 1339 	movw	r3, #313	; 0x139
 8000f2a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f34:	463b      	mov	r3, r7
 8000f36:	2200      	movs	r2, #0
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4807      	ldr	r0, [pc, #28]	; (8000f58 <MX_TIM3_Init+0xe8>)
 8000f3c:	f006 fc6e 	bl	800781c <HAL_TIM_PWM_ConfigChannel>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000f46:	f000 fb72 	bl	800162e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f4a:	4803      	ldr	r0, [pc, #12]	; (8000f58 <MX_TIM3_Init+0xe8>)
 8000f4c:	f000 fc8e 	bl	800186c <HAL_TIM_MspPostInit>

}
 8000f50:	bf00      	nop
 8000f52:	3738      	adds	r7, #56	; 0x38
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000314 	.word	0x20000314
 8000f5c:	40000400 	.word	0x40000400

08000f60 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08e      	sub	sp, #56	; 0x38
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f80:	463b      	mov	r3, r7
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	611a      	str	r2, [r3, #16]
 8000f8e:	615a      	str	r2, [r3, #20]
 8000f90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f92:	4b2d      	ldr	r3, [pc, #180]	; (8001048 <MX_TIM4_Init+0xe8>)
 8000f94:	4a2d      	ldr	r2, [pc, #180]	; (800104c <MX_TIM4_Init+0xec>)
 8000f96:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8000f98:	4b2b      	ldr	r3, [pc, #172]	; (8001048 <MX_TIM4_Init+0xe8>)
 8000f9a:	22ef      	movs	r2, #239	; 0xef
 8000f9c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9e:	4b2a      	ldr	r3, [pc, #168]	; (8001048 <MX_TIM4_Init+0xe8>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 625-1;
 8000fa4:	4b28      	ldr	r3, [pc, #160]	; (8001048 <MX_TIM4_Init+0xe8>)
 8000fa6:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000faa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fac:	4b26      	ldr	r3, [pc, #152]	; (8001048 <MX_TIM4_Init+0xe8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fb2:	4b25      	ldr	r3, [pc, #148]	; (8001048 <MX_TIM4_Init+0xe8>)
 8000fb4:	2280      	movs	r2, #128	; 0x80
 8000fb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000fb8:	4823      	ldr	r0, [pc, #140]	; (8001048 <MX_TIM4_Init+0xe8>)
 8000fba:	f006 fa58 	bl	800746e <HAL_TIM_Base_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000fc4:	f000 fb33 	bl	800162e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000fce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	481c      	ldr	r0, [pc, #112]	; (8001048 <MX_TIM4_Init+0xe8>)
 8000fd6:	f006 fd31 	bl	8007a3c <HAL_TIM_ConfigClockSource>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000fe0:	f000 fb25 	bl	800162e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000fe4:	4818      	ldr	r0, [pc, #96]	; (8001048 <MX_TIM4_Init+0xe8>)
 8000fe6:	f006 fa99 	bl	800751c <HAL_TIM_PWM_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000ff0:	f000 fb1d 	bl	800162e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	4619      	mov	r1, r3
 8001002:	4811      	ldr	r0, [pc, #68]	; (8001048 <MX_TIM4_Init+0xe8>)
 8001004:	f007 fa3c 	bl	8008480 <HAL_TIMEx_MasterConfigSynchronization>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800100e:	f000 fb0e 	bl	800162e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001012:	2360      	movs	r3, #96	; 0x60
 8001014:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8001016:	f240 1339 	movw	r3, #313	; 0x139
 800101a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800101c:	2300      	movs	r3, #0
 800101e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001020:	2300      	movs	r3, #0
 8001022:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001024:	463b      	mov	r3, r7
 8001026:	2208      	movs	r2, #8
 8001028:	4619      	mov	r1, r3
 800102a:	4807      	ldr	r0, [pc, #28]	; (8001048 <MX_TIM4_Init+0xe8>)
 800102c:	f006 fbf6 	bl	800781c <HAL_TIM_PWM_ConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8001036:	f000 fafa 	bl	800162e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800103a:	4803      	ldr	r0, [pc, #12]	; (8001048 <MX_TIM4_Init+0xe8>)
 800103c:	f000 fc16 	bl	800186c <HAL_TIM_MspPostInit>

}
 8001040:	bf00      	nop
 8001042:	3738      	adds	r7, #56	; 0x38
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200000a4 	.word	0x200000a4
 800104c:	40000800 	.word	0x40000800

08001050 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001056:	f107 0310 	add.w	r3, r7, #16
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800106e:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <MX_TIM5_Init+0x94>)
 8001070:	4a1d      	ldr	r2, [pc, #116]	; (80010e8 <MX_TIM5_Init+0x98>)
 8001072:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 240-1;
 8001074:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <MX_TIM5_Init+0x94>)
 8001076:	22ef      	movs	r2, #239	; 0xef
 8001078:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107a:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <MX_TIM5_Init+0x94>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8001080:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <MX_TIM5_Init+0x94>)
 8001082:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001086:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001088:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <MX_TIM5_Init+0x94>)
 800108a:	2200      	movs	r2, #0
 800108c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108e:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <MX_TIM5_Init+0x94>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001094:	4813      	ldr	r0, [pc, #76]	; (80010e4 <MX_TIM5_Init+0x94>)
 8001096:	f006 f9ea 	bl	800746e <HAL_TIM_Base_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80010a0:	f000 fac5 	bl	800162e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80010aa:	f107 0310 	add.w	r3, r7, #16
 80010ae:	4619      	mov	r1, r3
 80010b0:	480c      	ldr	r0, [pc, #48]	; (80010e4 <MX_TIM5_Init+0x94>)
 80010b2:	f006 fcc3 	bl	8007a3c <HAL_TIM_ConfigClockSource>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80010bc:	f000 fab7 	bl	800162e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c0:	2300      	movs	r3, #0
 80010c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	4619      	mov	r1, r3
 80010cc:	4805      	ldr	r0, [pc, #20]	; (80010e4 <MX_TIM5_Init+0x94>)
 80010ce:	f007 f9d7 	bl	8008480 <HAL_TIMEx_MasterConfigSynchronization>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80010d8:	f000 faa9 	bl	800162e <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	3720      	adds	r7, #32
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	200002c8 	.word	0x200002c8
 80010e8:	40000c00 	.word	0x40000c00

080010ec <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b09a      	sub	sp, #104	; 0x68
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001100:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800110c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
 800111c:	615a      	str	r2, [r3, #20]
 800111e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	222c      	movs	r2, #44	; 0x2c
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f008 ff14 	bl	8009f54 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800112c:	4b3f      	ldr	r3, [pc, #252]	; (800122c <MX_TIM15_Init+0x140>)
 800112e:	4a40      	ldr	r2, [pc, #256]	; (8001230 <MX_TIM15_Init+0x144>)
 8001130:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8001132:	4b3e      	ldr	r3, [pc, #248]	; (800122c <MX_TIM15_Init+0x140>)
 8001134:	22ef      	movs	r2, #239	; 0xef
 8001136:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001138:	4b3c      	ldr	r3, [pc, #240]	; (800122c <MX_TIM15_Init+0x140>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 625-1;
 800113e:	4b3b      	ldr	r3, [pc, #236]	; (800122c <MX_TIM15_Init+0x140>)
 8001140:	f44f 721c 	mov.w	r2, #624	; 0x270
 8001144:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001146:	4b39      	ldr	r3, [pc, #228]	; (800122c <MX_TIM15_Init+0x140>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800114c:	4b37      	ldr	r3, [pc, #220]	; (800122c <MX_TIM15_Init+0x140>)
 800114e:	2200      	movs	r2, #0
 8001150:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001152:	4b36      	ldr	r3, [pc, #216]	; (800122c <MX_TIM15_Init+0x140>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001158:	4834      	ldr	r0, [pc, #208]	; (800122c <MX_TIM15_Init+0x140>)
 800115a:	f006 f988 	bl	800746e <HAL_TIM_Base_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001164:	f000 fa63 	bl	800162e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800116c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800116e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001172:	4619      	mov	r1, r3
 8001174:	482d      	ldr	r0, [pc, #180]	; (800122c <MX_TIM15_Init+0x140>)
 8001176:	f006 fc61 	bl	8007a3c <HAL_TIM_ConfigClockSource>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8001180:	f000 fa55 	bl	800162e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001184:	4829      	ldr	r0, [pc, #164]	; (800122c <MX_TIM15_Init+0x140>)
 8001186:	f006 f9c9 	bl	800751c <HAL_TIM_PWM_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8001190:	f000 fa4d 	bl	800162e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001194:	2300      	movs	r3, #0
 8001196:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001198:	2300      	movs	r3, #0
 800119a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800119c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011a0:	4619      	mov	r1, r3
 80011a2:	4822      	ldr	r0, [pc, #136]	; (800122c <MX_TIM15_Init+0x140>)
 80011a4:	f007 f96c 	bl	8008480 <HAL_TIMEx_MasterConfigSynchronization>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 80011ae:	f000 fa3e 	bl	800162e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011b2:	2360      	movs	r3, #96	; 0x60
 80011b4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 80011b6:	f240 1339 	movw	r3, #313	; 0x139
 80011ba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011bc:	2300      	movs	r3, #0
 80011be:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011c0:	2300      	movs	r3, #0
 80011c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011c8:	2300      	movs	r3, #0
 80011ca:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011cc:	2300      	movs	r3, #0
 80011ce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011d4:	2204      	movs	r2, #4
 80011d6:	4619      	mov	r1, r3
 80011d8:	4814      	ldr	r0, [pc, #80]	; (800122c <MX_TIM15_Init+0x140>)
 80011da:	f006 fb1f 	bl	800781c <HAL_TIM_PWM_ConfigChannel>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 80011e4:	f000 fa23 	bl	800162e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001200:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001206:	2300      	movs	r3, #0
 8001208:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	4619      	mov	r1, r3
 800120e:	4807      	ldr	r0, [pc, #28]	; (800122c <MX_TIM15_Init+0x140>)
 8001210:	f007 f9be 	bl	8008590 <HAL_TIMEx_ConfigBreakDeadTime>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 800121a:	f000 fa08 	bl	800162e <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800121e:	4803      	ldr	r0, [pc, #12]	; (800122c <MX_TIM15_Init+0x140>)
 8001220:	f000 fb24 	bl	800186c <HAL_TIM_MspPostInit>

}
 8001224:	bf00      	nop
 8001226:	3768      	adds	r7, #104	; 0x68
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200001f8 	.word	0x200001f8
 8001230:	40014000 	.word	0x40014000

08001234 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001238:	4b24      	ldr	r3, [pc, #144]	; (80012cc <MX_UART4_Init+0x98>)
 800123a:	4a25      	ldr	r2, [pc, #148]	; (80012d0 <MX_UART4_Init+0x9c>)
 800123c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800123e:	4b23      	ldr	r3, [pc, #140]	; (80012cc <MX_UART4_Init+0x98>)
 8001240:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001244:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001246:	4b21      	ldr	r3, [pc, #132]	; (80012cc <MX_UART4_Init+0x98>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800124c:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <MX_UART4_Init+0x98>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001252:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <MX_UART4_Init+0x98>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001258:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <MX_UART4_Init+0x98>)
 800125a:	220c      	movs	r2, #12
 800125c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125e:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <MX_UART4_Init+0x98>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001264:	4b19      	ldr	r3, [pc, #100]	; (80012cc <MX_UART4_Init+0x98>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800126a:	4b18      	ldr	r3, [pc, #96]	; (80012cc <MX_UART4_Init+0x98>)
 800126c:	2200      	movs	r2, #0
 800126e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001270:	4b16      	ldr	r3, [pc, #88]	; (80012cc <MX_UART4_Init+0x98>)
 8001272:	2200      	movs	r2, #0
 8001274:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <MX_UART4_Init+0x98>)
 8001278:	2200      	movs	r2, #0
 800127a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart4, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800127c:	2300      	movs	r3, #0
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	4812      	ldr	r0, [pc, #72]	; (80012cc <MX_UART4_Init+0x98>)
 8001284:	f008 fc70 	bl	8009b68 <HAL_RS485Ex_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 800128e:	f000 f9ce 	bl	800162e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001292:	2100      	movs	r1, #0
 8001294:	480d      	ldr	r0, [pc, #52]	; (80012cc <MX_UART4_Init+0x98>)
 8001296:	f008 fd28 	bl	8009cea <HAL_UARTEx_SetTxFifoThreshold>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_UART4_Init+0x70>
  {
    Error_Handler();
 80012a0:	f000 f9c5 	bl	800162e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012a4:	2100      	movs	r1, #0
 80012a6:	4809      	ldr	r0, [pc, #36]	; (80012cc <MX_UART4_Init+0x98>)
 80012a8:	f008 fd5d 	bl	8009d66 <HAL_UARTEx_SetRxFifoThreshold>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_UART4_Init+0x82>
  {
    Error_Handler();
 80012b2:	f000 f9bc 	bl	800162e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_UART4_Init+0x98>)
 80012b8:	f008 fcde 	bl	8009c78 <HAL_UARTEx_DisableFifoMode>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_UART4_Init+0x92>
  {
    Error_Handler();
 80012c2:	f000 f9b4 	bl	800162e <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000438 	.word	0x20000438
 80012d0:	40004c00 	.word	0x40004c00

080012d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012d8:	4b22      	ldr	r3, [pc, #136]	; (8001364 <MX_USART3_UART_Init+0x90>)
 80012da:	4a23      	ldr	r2, [pc, #140]	; (8001368 <MX_USART3_UART_Init+0x94>)
 80012dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012de:	4b21      	ldr	r3, [pc, #132]	; (8001364 <MX_USART3_UART_Init+0x90>)
 80012e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012e6:	4b1f      	ldr	r3, [pc, #124]	; (8001364 <MX_USART3_UART_Init+0x90>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012ec:	4b1d      	ldr	r3, [pc, #116]	; (8001364 <MX_USART3_UART_Init+0x90>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012f2:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <MX_USART3_UART_Init+0x90>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012f8:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <MX_USART3_UART_Init+0x90>)
 80012fa:	220c      	movs	r2, #12
 80012fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fe:	4b19      	ldr	r3, [pc, #100]	; (8001364 <MX_USART3_UART_Init+0x90>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001304:	4b17      	ldr	r3, [pc, #92]	; (8001364 <MX_USART3_UART_Init+0x90>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800130a:	4b16      	ldr	r3, [pc, #88]	; (8001364 <MX_USART3_UART_Init+0x90>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001310:	4b14      	ldr	r3, [pc, #80]	; (8001364 <MX_USART3_UART_Init+0x90>)
 8001312:	2200      	movs	r2, #0
 8001314:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001316:	4b13      	ldr	r3, [pc, #76]	; (8001364 <MX_USART3_UART_Init+0x90>)
 8001318:	2200      	movs	r2, #0
 800131a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800131c:	4811      	ldr	r0, [pc, #68]	; (8001364 <MX_USART3_UART_Init+0x90>)
 800131e:	f007 f9d3 	bl	80086c8 <HAL_UART_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001328:	f000 f981 	bl	800162e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800132c:	2100      	movs	r1, #0
 800132e:	480d      	ldr	r0, [pc, #52]	; (8001364 <MX_USART3_UART_Init+0x90>)
 8001330:	f008 fcdb 	bl	8009cea <HAL_UARTEx_SetTxFifoThreshold>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800133a:	f000 f978 	bl	800162e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800133e:	2100      	movs	r1, #0
 8001340:	4808      	ldr	r0, [pc, #32]	; (8001364 <MX_USART3_UART_Init+0x90>)
 8001342:	f008 fd10 	bl	8009d66 <HAL_UARTEx_SetRxFifoThreshold>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800134c:	f000 f96f 	bl	800162e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001350:	4804      	ldr	r0, [pc, #16]	; (8001364 <MX_USART3_UART_Init+0x90>)
 8001352:	f008 fc91 	bl	8009c78 <HAL_UARTEx_DisableFifoMode>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800135c:	f000 f967 	bl	800162e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000168 	.word	0x20000168
 8001368:	40004800 	.word	0x40004800

0800136c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001372:	4b21      	ldr	r3, [pc, #132]	; (80013f8 <MX_DMA_Init+0x8c>)
 8001374:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001378:	4a1f      	ldr	r2, [pc, #124]	; (80013f8 <MX_DMA_Init+0x8c>)
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001382:	4b1d      	ldr	r3, [pc, #116]	; (80013f8 <MX_DMA_Init+0x8c>)
 8001384:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001390:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <MX_DMA_Init+0x8c>)
 8001392:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001396:	4a18      	ldr	r2, [pc, #96]	; (80013f8 <MX_DMA_Init+0x8c>)
 8001398:	f043 0302 	orr.w	r3, r3, #2
 800139c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013a0:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <MX_DMA_Init+0x8c>)
 80013a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	200b      	movs	r0, #11
 80013b4:	f000 ffc9 	bl	800234a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80013b8:	200b      	movs	r0, #11
 80013ba:	f000 ffe0 	bl	800237e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	2100      	movs	r1, #0
 80013c2:	200c      	movs	r0, #12
 80013c4:	f000 ffc1 	bl	800234a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80013c8:	200c      	movs	r0, #12
 80013ca:	f000 ffd8 	bl	800237e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	2038      	movs	r0, #56	; 0x38
 80013d4:	f000 ffb9 	bl	800234a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013d8:	2038      	movs	r0, #56	; 0x38
 80013da:	f000 ffd0 	bl	800237e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	2039      	movs	r0, #57	; 0x39
 80013e4:	f000 ffb1 	bl	800234a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80013e8:	2039      	movs	r0, #57	; 0x39
 80013ea:	f000 ffc8 	bl	800237e <HAL_NVIC_EnableIRQ>

}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	58024400 	.word	0x58024400

080013fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08c      	sub	sp, #48	; 0x30
 8001400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001402:	f107 031c 	add.w	r3, r7, #28
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001412:	4b71      	ldr	r3, [pc, #452]	; (80015d8 <MX_GPIO_Init+0x1dc>)
 8001414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001418:	4a6f      	ldr	r2, [pc, #444]	; (80015d8 <MX_GPIO_Init+0x1dc>)
 800141a:	f043 0310 	orr.w	r3, r3, #16
 800141e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001422:	4b6d      	ldr	r3, [pc, #436]	; (80015d8 <MX_GPIO_Init+0x1dc>)
 8001424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001428:	f003 0310 	and.w	r3, r3, #16
 800142c:	61bb      	str	r3, [r7, #24]
 800142e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001430:	4b69      	ldr	r3, [pc, #420]	; (80015d8 <MX_GPIO_Init+0x1dc>)
 8001432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001436:	4a68      	ldr	r2, [pc, #416]	; (80015d8 <MX_GPIO_Init+0x1dc>)
 8001438:	f043 0304 	orr.w	r3, r3, #4
 800143c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001440:	4b65      	ldr	r3, [pc, #404]	; (80015d8 <MX_GPIO_Init+0x1dc>)
 8001442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001446:	f003 0304 	and.w	r3, r3, #4
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800144e:	4b62      	ldr	r3, [pc, #392]	; (80015d8 <MX_GPIO_Init+0x1dc>)
 8001450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001454:	4a60      	ldr	r2, [pc, #384]	; (80015d8 <MX_GPIO_Init+0x1dc>)
 8001456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800145a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800145e:	4b5e      	ldr	r3, [pc, #376]	; (80015d8 <MX_GPIO_Init+0x1dc>)
 8001460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146c:	4b5a      	ldr	r3, [pc, #360]	; (80015d8 <MX_GPIO_Init+0x1dc>)
 800146e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001472:	4a59      	ldr	r2, [pc, #356]	; (80015d8 <MX_GPIO_Init+0x1dc>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800147c:	4b56      	ldr	r3, [pc, #344]	; (80015d8 <MX_GPIO_Init+0x1dc>)
 800147e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	4b53      	ldr	r3, [pc, #332]	; (80015d8 <MX_GPIO_Init+0x1dc>)
 800148c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001490:	4a51      	ldr	r2, [pc, #324]	; (80015d8 <MX_GPIO_Init+0x1dc>)
 8001492:	f043 0302 	orr.w	r3, r3, #2
 8001496:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800149a:	4b4f      	ldr	r3, [pc, #316]	; (80015d8 <MX_GPIO_Init+0x1dc>)
 800149c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014a8:	4b4b      	ldr	r3, [pc, #300]	; (80015d8 <MX_GPIO_Init+0x1dc>)
 80014aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ae:	4a4a      	ldr	r2, [pc, #296]	; (80015d8 <MX_GPIO_Init+0x1dc>)
 80014b0:	f043 0308 	orr.w	r3, r3, #8
 80014b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014b8:	4b47      	ldr	r3, [pc, #284]	; (80015d8 <MX_GPIO_Init+0x1dc>)
 80014ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014c6:	4b44      	ldr	r3, [pc, #272]	; (80015d8 <MX_GPIO_Init+0x1dc>)
 80014c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014cc:	4a42      	ldr	r2, [pc, #264]	; (80015d8 <MX_GPIO_Init+0x1dc>)
 80014ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014d6:	4b40      	ldr	r3, [pc, #256]	; (80015d8 <MX_GPIO_Init+0x1dc>)
 80014d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014e0:	603b      	str	r3, [r7, #0]
 80014e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80014e4:	2200      	movs	r2, #0
 80014e6:	f644 2121 	movw	r1, #18977	; 0x4a21
 80014ea:	483c      	ldr	r0, [pc, #240]	; (80015dc <MX_GPIO_Init+0x1e0>)
 80014ec:	f003 fb36 	bl	8004b5c <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 80014f0:	2200      	movs	r2, #0
 80014f2:	f24c 0102 	movw	r1, #49154	; 0xc002
 80014f6:	483a      	ldr	r0, [pc, #232]	; (80015e0 <MX_GPIO_Init+0x1e4>)
 80014f8:	f003 fb30 	bl	8004b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80014fc:	2200      	movs	r2, #0
 80014fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001502:	4838      	ldr	r0, [pc, #224]	; (80015e4 <MX_GPIO_Init+0x1e8>)
 8001504:	f003 fb2a 	bl	8004b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin DIR_2_Pin LD3_Pin DIR_3_Pin
                           DIR_4_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8001508:	f644 2321 	movw	r3, #18977	; 0x4a21
 800150c:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150e:	2301      	movs	r3, #1
 8001510:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151a:	f107 031c 	add.w	r3, r7, #28
 800151e:	4619      	mov	r1, r3
 8001520:	482e      	ldr	r0, [pc, #184]	; (80015dc <MX_GPIO_Init+0x1e0>)
 8001522:	f003 f96b 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LM2_Pin LM1_Pin LM6_Pin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin|LM6_Pin;
 8001526:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 800152a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800152c:	4b2e      	ldr	r3, [pc, #184]	; (80015e8 <MX_GPIO_Init+0x1ec>)
 800152e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001534:	f107 031c 	add.w	r3, r7, #28
 8001538:	4619      	mov	r1, r3
 800153a:	4829      	ldr	r0, [pc, #164]	; (80015e0 <MX_GPIO_Init+0x1e4>)
 800153c:	f003 f95e 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_1_Pin DIR_5_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 8001540:	f24c 0302 	movw	r3, #49154	; 0xc002
 8001544:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001546:	2301      	movs	r3, #1
 8001548:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	2300      	movs	r3, #0
 8001550:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001552:	f107 031c 	add.w	r3, r7, #28
 8001556:	4619      	mov	r1, r3
 8001558:	4821      	ldr	r0, [pc, #132]	; (80015e0 <MX_GPIO_Init+0x1e4>)
 800155a:	f003 f94f 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800155e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001562:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001564:	2301      	movs	r3, #1
 8001566:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001570:	f107 031c 	add.w	r3, r7, #28
 8001574:	4619      	mov	r1, r3
 8001576:	481b      	ldr	r0, [pc, #108]	; (80015e4 <MX_GPIO_Init+0x1e8>)
 8001578:	f003 f940 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LM5_Pin */
  GPIO_InitStruct.Pin = LM5_Pin;
 800157c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001580:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001582:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <MX_GPIO_Init+0x1ec>)
 8001584:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 031c 	add.w	r3, r7, #28
 800158e:	4619      	mov	r1, r3
 8001590:	4816      	ldr	r0, [pc, #88]	; (80015ec <MX_GPIO_Init+0x1f0>)
 8001592:	f003 f933 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LM4_Pin LM3_Pin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 8001596:	23c0      	movs	r3, #192	; 0xc0
 8001598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800159a:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <MX_GPIO_Init+0x1ec>)
 800159c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a2:	f107 031c 	add.w	r3, r7, #28
 80015a6:	4619      	mov	r1, r3
 80015a8:	480c      	ldr	r0, [pc, #48]	; (80015dc <MX_GPIO_Init+0x1e0>)
 80015aa:	f003 f927 	bl	80047fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2103      	movs	r1, #3
 80015b2:	2017      	movs	r0, #23
 80015b4:	f000 fec9 	bl	800234a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015b8:	2017      	movs	r0, #23
 80015ba:	f000 fee0 	bl	800237e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	2103      	movs	r1, #3
 80015c2:	2028      	movs	r0, #40	; 0x28
 80015c4:	f000 fec1 	bl	800234a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015c8:	2028      	movs	r0, #40	; 0x28
 80015ca:	f000 fed8 	bl	800237e <HAL_NVIC_EnableIRQ>

}
 80015ce:	bf00      	nop
 80015d0:	3730      	adds	r7, #48	; 0x30
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	58024400 	.word	0x58024400
 80015dc:	58020400 	.word	0x58020400
 80015e0:	58021000 	.word	0x58021000
 80015e4:	58020c00 	.word	0x58020c00
 80015e8:	11110000 	.word	0x11110000
 80015ec:	58021800 	.word	0x58021800

080015f0 <HAL_UART_TxCpltCallback>:
//		uartbuff = package_uart(data);
		HAL_UART_Transmit_IT(&huart3, UART3_rxBuffer, 4);
	}
}
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]

}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	80fb      	strh	r3, [r7, #6]


}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  if (htim == &htim5)
  {

  }
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001632:	b672      	cpsid	i
}
 8001634:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001636:	e7fe      	b.n	8001636 <Error_Handler+0x8>

08001638 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <HAL_MspInit+0x30>)
 8001640:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001644:	4a08      	ldr	r2, [pc, #32]	; (8001668 <HAL_MspInit+0x30>)
 8001646:	f043 0302 	orr.w	r3, r3, #2
 800164a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_MspInit+0x30>)
 8001650:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	58024400 	.word	0x58024400

0800166c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b0b8      	sub	sp, #224	; 0xe0
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001684:	f107 0310 	add.w	r3, r7, #16
 8001688:	22bc      	movs	r2, #188	; 0xbc
 800168a:	2100      	movs	r1, #0
 800168c:	4618      	mov	r0, r3
 800168e:	f008 fc61 	bl	8009f54 <memset>
  if(hspi->Instance==SPI3)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a25      	ldr	r2, [pc, #148]	; (800172c <HAL_SPI_MspInit+0xc0>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d142      	bne.n	8001722 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 800169c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016a6:	f107 0310 	add.w	r3, r7, #16
 80016aa:	4618      	mov	r0, r3
 80016ac:	f004 fa60 	bl	8005b70 <HAL_RCCEx_PeriphCLKConfig>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80016b6:	f7ff ffba 	bl	800162e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016ba:	4b1d      	ldr	r3, [pc, #116]	; (8001730 <HAL_SPI_MspInit+0xc4>)
 80016bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016c0:	4a1b      	ldr	r2, [pc, #108]	; (8001730 <HAL_SPI_MspInit+0xc4>)
 80016c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016ca:	4b19      	ldr	r3, [pc, #100]	; (8001730 <HAL_SPI_MspInit+0xc4>)
 80016cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d8:	4b15      	ldr	r3, [pc, #84]	; (8001730 <HAL_SPI_MspInit+0xc4>)
 80016da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016de:	4a14      	ldr	r2, [pc, #80]	; (8001730 <HAL_SPI_MspInit+0xc4>)
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <HAL_SPI_MspInit+0xc4>)
 80016ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ee:	f003 0304 	and.w	r3, r3, #4
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80016f6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80016fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	2302      	movs	r3, #2
 8001700:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170a:	2300      	movs	r3, #0
 800170c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001710:	2306      	movs	r3, #6
 8001712:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001716:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800171a:	4619      	mov	r1, r3
 800171c:	4805      	ldr	r0, [pc, #20]	; (8001734 <HAL_SPI_MspInit+0xc8>)
 800171e:	f003 f86d 	bl	80047fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001722:	bf00      	nop
 8001724:	37e0      	adds	r7, #224	; 0xe0
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40003c00 	.word	0x40003c00
 8001730:	58024400 	.word	0x58024400
 8001734:	58020800 	.word	0x58020800

08001738 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a43      	ldr	r2, [pc, #268]	; (8001854 <HAL_TIM_Base_MspInit+0x11c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d10f      	bne.n	800176a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800174a:	4b43      	ldr	r3, [pc, #268]	; (8001858 <HAL_TIM_Base_MspInit+0x120>)
 800174c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001750:	4a41      	ldr	r2, [pc, #260]	; (8001858 <HAL_TIM_Base_MspInit+0x120>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800175a:	4b3f      	ldr	r3, [pc, #252]	; (8001858 <HAL_TIM_Base_MspInit+0x120>)
 800175c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	61fb      	str	r3, [r7, #28]
 8001766:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001768:	e06f      	b.n	800184a <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM2)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001772:	d10f      	bne.n	8001794 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001774:	4b38      	ldr	r3, [pc, #224]	; (8001858 <HAL_TIM_Base_MspInit+0x120>)
 8001776:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800177a:	4a37      	ldr	r2, [pc, #220]	; (8001858 <HAL_TIM_Base_MspInit+0x120>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001784:	4b34      	ldr	r3, [pc, #208]	; (8001858 <HAL_TIM_Base_MspInit+0x120>)
 8001786:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	61bb      	str	r3, [r7, #24]
 8001790:	69bb      	ldr	r3, [r7, #24]
}
 8001792:	e05a      	b.n	800184a <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM3)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a30      	ldr	r2, [pc, #192]	; (800185c <HAL_TIM_Base_MspInit+0x124>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d10f      	bne.n	80017be <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800179e:	4b2e      	ldr	r3, [pc, #184]	; (8001858 <HAL_TIM_Base_MspInit+0x120>)
 80017a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017a4:	4a2c      	ldr	r2, [pc, #176]	; (8001858 <HAL_TIM_Base_MspInit+0x120>)
 80017a6:	f043 0302 	orr.w	r3, r3, #2
 80017aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017ae:	4b2a      	ldr	r3, [pc, #168]	; (8001858 <HAL_TIM_Base_MspInit+0x120>)
 80017b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	697b      	ldr	r3, [r7, #20]
}
 80017bc:	e045      	b.n	800184a <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM4)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a27      	ldr	r2, [pc, #156]	; (8001860 <HAL_TIM_Base_MspInit+0x128>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d10f      	bne.n	80017e8 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017c8:	4b23      	ldr	r3, [pc, #140]	; (8001858 <HAL_TIM_Base_MspInit+0x120>)
 80017ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017ce:	4a22      	ldr	r2, [pc, #136]	; (8001858 <HAL_TIM_Base_MspInit+0x120>)
 80017d0:	f043 0304 	orr.w	r3, r3, #4
 80017d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017d8:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <HAL_TIM_Base_MspInit+0x120>)
 80017da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]
}
 80017e6:	e030      	b.n	800184a <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM5)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a1d      	ldr	r2, [pc, #116]	; (8001864 <HAL_TIM_Base_MspInit+0x12c>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d117      	bne.n	8001822 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80017f2:	4b19      	ldr	r3, [pc, #100]	; (8001858 <HAL_TIM_Base_MspInit+0x120>)
 80017f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017f8:	4a17      	ldr	r2, [pc, #92]	; (8001858 <HAL_TIM_Base_MspInit+0x120>)
 80017fa:	f043 0308 	orr.w	r3, r3, #8
 80017fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <HAL_TIM_Base_MspInit+0x120>)
 8001804:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001808:	f003 0308 	and.w	r3, r3, #8
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001810:	2200      	movs	r2, #0
 8001812:	2100      	movs	r1, #0
 8001814:	2032      	movs	r0, #50	; 0x32
 8001816:	f000 fd98 	bl	800234a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800181a:	2032      	movs	r0, #50	; 0x32
 800181c:	f000 fdaf 	bl	800237e <HAL_NVIC_EnableIRQ>
}
 8001820:	e013      	b.n	800184a <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM15)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a10      	ldr	r2, [pc, #64]	; (8001868 <HAL_TIM_Base_MspInit+0x130>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d10e      	bne.n	800184a <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800182c:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <HAL_TIM_Base_MspInit+0x120>)
 800182e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001832:	4a09      	ldr	r2, [pc, #36]	; (8001858 <HAL_TIM_Base_MspInit+0x120>)
 8001834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001838:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_TIM_Base_MspInit+0x120>)
 800183e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
}
 800184a:	bf00      	nop
 800184c:	3720      	adds	r7, #32
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40010000 	.word	0x40010000
 8001858:	58024400 	.word	0x58024400
 800185c:	40000400 	.word	0x40000400
 8001860:	40000800 	.word	0x40000800
 8001864:	40000c00 	.word	0x40000c00
 8001868:	40014000 	.word	0x40014000

0800186c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08c      	sub	sp, #48	; 0x30
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	f107 031c 	add.w	r3, r7, #28
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a5e      	ldr	r2, [pc, #376]	; (8001a04 <HAL_TIM_MspPostInit+0x198>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d120      	bne.n	80018d0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800188e:	4b5e      	ldr	r3, [pc, #376]	; (8001a08 <HAL_TIM_MspPostInit+0x19c>)
 8001890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001894:	4a5c      	ldr	r2, [pc, #368]	; (8001a08 <HAL_TIM_MspPostInit+0x19c>)
 8001896:	f043 0310 	orr.w	r3, r3, #16
 800189a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800189e:	4b5a      	ldr	r3, [pc, #360]	; (8001a08 <HAL_TIM_MspPostInit+0x19c>)
 80018a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a4:	f003 0310 	and.w	r3, r3, #16
 80018a8:	61bb      	str	r3, [r7, #24]
 80018aa:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 80018ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b2:	2302      	movs	r3, #2
 80018b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ba:	2300      	movs	r3, #0
 80018bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018be:	2301      	movs	r3, #1
 80018c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 80018c2:	f107 031c 	add.w	r3, r7, #28
 80018c6:	4619      	mov	r1, r3
 80018c8:	4850      	ldr	r0, [pc, #320]	; (8001a0c <HAL_TIM_MspPostInit+0x1a0>)
 80018ca:	f002 ff97 	bl	80047fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80018ce:	e094      	b.n	80019fa <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM2)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018d8:	d120      	bne.n	800191c <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018da:	4b4b      	ldr	r3, [pc, #300]	; (8001a08 <HAL_TIM_MspPostInit+0x19c>)
 80018dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e0:	4a49      	ldr	r2, [pc, #292]	; (8001a08 <HAL_TIM_MspPostInit+0x19c>)
 80018e2:	f043 0302 	orr.w	r3, r3, #2
 80018e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018ea:	4b47      	ldr	r3, [pc, #284]	; (8001a08 <HAL_TIM_MspPostInit+0x19c>)
 80018ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 80018f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fe:	2302      	movs	r3, #2
 8001900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800190a:	2301      	movs	r3, #1
 800190c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 800190e:	f107 031c 	add.w	r3, r7, #28
 8001912:	4619      	mov	r1, r3
 8001914:	483e      	ldr	r0, [pc, #248]	; (8001a10 <HAL_TIM_MspPostInit+0x1a4>)
 8001916:	f002 ff71 	bl	80047fc <HAL_GPIO_Init>
}
 800191a:	e06e      	b.n	80019fa <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM3)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a3c      	ldr	r2, [pc, #240]	; (8001a14 <HAL_TIM_MspPostInit+0x1a8>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d11f      	bne.n	8001966 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001926:	4b38      	ldr	r3, [pc, #224]	; (8001a08 <HAL_TIM_MspPostInit+0x19c>)
 8001928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800192c:	4a36      	ldr	r2, [pc, #216]	; (8001a08 <HAL_TIM_MspPostInit+0x19c>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001936:	4b34      	ldr	r3, [pc, #208]	; (8001a08 <HAL_TIM_MspPostInit+0x19c>)
 8001938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8001944:	2340      	movs	r3, #64	; 0x40
 8001946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001948:	2302      	movs	r3, #2
 800194a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001950:	2300      	movs	r3, #0
 8001952:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001954:	2302      	movs	r3, #2
 8001956:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 8001958:	f107 031c 	add.w	r3, r7, #28
 800195c:	4619      	mov	r1, r3
 800195e:	482e      	ldr	r0, [pc, #184]	; (8001a18 <HAL_TIM_MspPostInit+0x1ac>)
 8001960:	f002 ff4c 	bl	80047fc <HAL_GPIO_Init>
}
 8001964:	e049      	b.n	80019fa <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM4)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a2c      	ldr	r2, [pc, #176]	; (8001a1c <HAL_TIM_MspPostInit+0x1b0>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d120      	bne.n	80019b2 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001970:	4b25      	ldr	r3, [pc, #148]	; (8001a08 <HAL_TIM_MspPostInit+0x19c>)
 8001972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001976:	4a24      	ldr	r2, [pc, #144]	; (8001a08 <HAL_TIM_MspPostInit+0x19c>)
 8001978:	f043 0302 	orr.w	r3, r3, #2
 800197c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001980:	4b21      	ldr	r3, [pc, #132]	; (8001a08 <HAL_TIM_MspPostInit+0x19c>)
 8001982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 800198e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001994:	2302      	movs	r3, #2
 8001996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199c:	2300      	movs	r3, #0
 800199e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80019a0:	2302      	movs	r3, #2
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 80019a4:	f107 031c 	add.w	r3, r7, #28
 80019a8:	4619      	mov	r1, r3
 80019aa:	4819      	ldr	r0, [pc, #100]	; (8001a10 <HAL_TIM_MspPostInit+0x1a4>)
 80019ac:	f002 ff26 	bl	80047fc <HAL_GPIO_Init>
}
 80019b0:	e023      	b.n	80019fa <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM15)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a1a      	ldr	r2, [pc, #104]	; (8001a20 <HAL_TIM_MspPostInit+0x1b4>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d11e      	bne.n	80019fa <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019bc:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_TIM_MspPostInit+0x19c>)
 80019be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c2:	4a11      	ldr	r2, [pc, #68]	; (8001a08 <HAL_TIM_MspPostInit+0x19c>)
 80019c4:	f043 0310 	orr.w	r3, r3, #16
 80019c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019cc:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <HAL_TIM_MspPostInit+0x19c>)
 80019ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d2:	f003 0310 	and.w	r3, r3, #16
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 80019da:	2340      	movs	r3, #64	; 0x40
 80019dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e6:	2300      	movs	r3, #0
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80019ea:	2304      	movs	r3, #4
 80019ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 80019ee:	f107 031c 	add.w	r3, r7, #28
 80019f2:	4619      	mov	r1, r3
 80019f4:	4805      	ldr	r0, [pc, #20]	; (8001a0c <HAL_TIM_MspPostInit+0x1a0>)
 80019f6:	f002 ff01 	bl	80047fc <HAL_GPIO_Init>
}
 80019fa:	bf00      	nop
 80019fc:	3730      	adds	r7, #48	; 0x30
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40010000 	.word	0x40010000
 8001a08:	58024400 	.word	0x58024400
 8001a0c:	58021000 	.word	0x58021000
 8001a10:	58020400 	.word	0x58020400
 8001a14:	40000400 	.word	0x40000400
 8001a18:	58020000 	.word	0x58020000
 8001a1c:	40000800 	.word	0x40000800
 8001a20:	40014000 	.word	0x40014000

08001a24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b0bc      	sub	sp, #240	; 0xf0
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a3c:	f107 0320 	add.w	r3, r7, #32
 8001a40:	22bc      	movs	r2, #188	; 0xbc
 8001a42:	2100      	movs	r1, #0
 8001a44:	4618      	mov	r0, r3
 8001a46:	f008 fa85 	bl	8009f54 <memset>
  if(huart->Instance==UART4)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a67      	ldr	r2, [pc, #412]	; (8001bec <HAL_UART_MspInit+0x1c8>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	f040 80db 	bne.w	8001c0c <HAL_UART_MspInit+0x1e8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001a56:	2302      	movs	r3, #2
 8001a58:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a60:	f107 0320 	add.w	r3, r7, #32
 8001a64:	4618      	mov	r0, r3
 8001a66:	f004 f883 	bl	8005b70 <HAL_RCCEx_PeriphCLKConfig>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001a70:	f7ff fddd 	bl	800162e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a74:	4b5e      	ldr	r3, [pc, #376]	; (8001bf0 <HAL_UART_MspInit+0x1cc>)
 8001a76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a7a:	4a5d      	ldr	r2, [pc, #372]	; (8001bf0 <HAL_UART_MspInit+0x1cc>)
 8001a7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a80:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a84:	4b5a      	ldr	r3, [pc, #360]	; (8001bf0 <HAL_UART_MspInit+0x1cc>)
 8001a86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a8e:	61fb      	str	r3, [r7, #28]
 8001a90:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a92:	4b57      	ldr	r3, [pc, #348]	; (8001bf0 <HAL_UART_MspInit+0x1cc>)
 8001a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a98:	4a55      	ldr	r2, [pc, #340]	; (8001bf0 <HAL_UART_MspInit+0x1cc>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aa2:	4b53      	ldr	r3, [pc, #332]	; (8001bf0 <HAL_UART_MspInit+0x1cc>)
 8001aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	61bb      	str	r3, [r7, #24]
 8001aae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ab0:	4b4f      	ldr	r3, [pc, #316]	; (8001bf0 <HAL_UART_MspInit+0x1cc>)
 8001ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab6:	4a4e      	ldr	r2, [pc, #312]	; (8001bf0 <HAL_UART_MspInit+0x1cc>)
 8001ab8:	f043 0308 	orr.w	r3, r3, #8
 8001abc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ac0:	4b4b      	ldr	r3, [pc, #300]	; (8001bf0 <HAL_UART_MspInit+0x1cc>)
 8001ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA15 (JTDI)     ------> UART4_DE
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ad2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ae8:	2308      	movs	r3, #8
 8001aea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aee:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001af2:	4619      	mov	r1, r3
 8001af4:	483f      	ldr	r0, [pc, #252]	; (8001bf4 <HAL_UART_MspInit+0x1d0>)
 8001af6:	f002 fe81 	bl	80047fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001afa:	2303      	movs	r3, #3
 8001afc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001b12:	2308      	movs	r3, #8
 8001b14:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b18:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4836      	ldr	r0, [pc, #216]	; (8001bf8 <HAL_UART_MspInit+0x1d4>)
 8001b20:	f002 fe6c 	bl	80047fc <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Stream0;
 8001b24:	4b35      	ldr	r3, [pc, #212]	; (8001bfc <HAL_UART_MspInit+0x1d8>)
 8001b26:	4a36      	ldr	r2, [pc, #216]	; (8001c00 <HAL_UART_MspInit+0x1dc>)
 8001b28:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001b2a:	4b34      	ldr	r3, [pc, #208]	; (8001bfc <HAL_UART_MspInit+0x1d8>)
 8001b2c:	223f      	movs	r2, #63	; 0x3f
 8001b2e:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b30:	4b32      	ldr	r3, [pc, #200]	; (8001bfc <HAL_UART_MspInit+0x1d8>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b36:	4b31      	ldr	r3, [pc, #196]	; (8001bfc <HAL_UART_MspInit+0x1d8>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b3c:	4b2f      	ldr	r3, [pc, #188]	; (8001bfc <HAL_UART_MspInit+0x1d8>)
 8001b3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b42:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b44:	4b2d      	ldr	r3, [pc, #180]	; (8001bfc <HAL_UART_MspInit+0x1d8>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b4a:	4b2c      	ldr	r3, [pc, #176]	; (8001bfc <HAL_UART_MspInit+0x1d8>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001b50:	4b2a      	ldr	r3, [pc, #168]	; (8001bfc <HAL_UART_MspInit+0x1d8>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b56:	4b29      	ldr	r3, [pc, #164]	; (8001bfc <HAL_UART_MspInit+0x1d8>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b5c:	4b27      	ldr	r3, [pc, #156]	; (8001bfc <HAL_UART_MspInit+0x1d8>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001b62:	4826      	ldr	r0, [pc, #152]	; (8001bfc <HAL_UART_MspInit+0x1d8>)
 8001b64:	f000 fc26 	bl	80023b4 <HAL_DMA_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_UART_MspInit+0x14e>
    {
      Error_Handler();
 8001b6e:	f7ff fd5e 	bl	800162e <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a21      	ldr	r2, [pc, #132]	; (8001bfc <HAL_UART_MspInit+0x1d8>)
 8001b76:	67da      	str	r2, [r3, #124]	; 0x7c
 8001b78:	4a20      	ldr	r2, [pc, #128]	; (8001bfc <HAL_UART_MspInit+0x1d8>)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Stream1;
 8001b7e:	4b21      	ldr	r3, [pc, #132]	; (8001c04 <HAL_UART_MspInit+0x1e0>)
 8001b80:	4a21      	ldr	r2, [pc, #132]	; (8001c08 <HAL_UART_MspInit+0x1e4>)
 8001b82:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001b84:	4b1f      	ldr	r3, [pc, #124]	; (8001c04 <HAL_UART_MspInit+0x1e0>)
 8001b86:	2240      	movs	r2, #64	; 0x40
 8001b88:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b8a:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <HAL_UART_MspInit+0x1e0>)
 8001b8c:	2240      	movs	r2, #64	; 0x40
 8001b8e:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b90:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <HAL_UART_MspInit+0x1e0>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b96:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <HAL_UART_MspInit+0x1e0>)
 8001b98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b9c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b9e:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <HAL_UART_MspInit+0x1e0>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ba4:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <HAL_UART_MspInit+0x1e0>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001baa:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <HAL_UART_MspInit+0x1e0>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bb0:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <HAL_UART_MspInit+0x1e0>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bb6:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <HAL_UART_MspInit+0x1e0>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001bbc:	4811      	ldr	r0, [pc, #68]	; (8001c04 <HAL_UART_MspInit+0x1e0>)
 8001bbe:	f000 fbf9 	bl	80023b4 <HAL_DMA_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <HAL_UART_MspInit+0x1a8>
    {
      Error_Handler();
 8001bc8:	f7ff fd31 	bl	800162e <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a0d      	ldr	r2, [pc, #52]	; (8001c04 <HAL_UART_MspInit+0x1e0>)
 8001bd0:	679a      	str	r2, [r3, #120]	; 0x78
 8001bd2:	4a0c      	ldr	r2, [pc, #48]	; (8001c04 <HAL_UART_MspInit+0x1e0>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2100      	movs	r1, #0
 8001bdc:	2034      	movs	r0, #52	; 0x34
 8001bde:	f000 fbb4 	bl	800234a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001be2:	2034      	movs	r0, #52	; 0x34
 8001be4:	f000 fbcb 	bl	800237e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001be8:	e0bb      	b.n	8001d62 <HAL_UART_MspInit+0x33e>
 8001bea:	bf00      	nop
 8001bec:	40004c00 	.word	0x40004c00
 8001bf0:	58024400 	.word	0x58024400
 8001bf4:	58020000 	.word	0x58020000
 8001bf8:	58020c00 	.word	0x58020c00
 8001bfc:	2000002c 	.word	0x2000002c
 8001c00:	40020410 	.word	0x40020410
 8001c04:	20000514 	.word	0x20000514
 8001c08:	40020428 	.word	0x40020428
  else if(huart->Instance==USART3)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a56      	ldr	r2, [pc, #344]	; (8001d6c <HAL_UART_MspInit+0x348>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	f040 80a5 	bne.w	8001d62 <HAL_UART_MspInit+0x33e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c22:	f107 0320 	add.w	r3, r7, #32
 8001c26:	4618      	mov	r0, r3
 8001c28:	f003 ffa2 	bl	8005b70 <HAL_RCCEx_PeriphCLKConfig>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_UART_MspInit+0x212>
      Error_Handler();
 8001c32:	f7ff fcfc 	bl	800162e <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c36:	4b4e      	ldr	r3, [pc, #312]	; (8001d70 <HAL_UART_MspInit+0x34c>)
 8001c38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c3c:	4a4c      	ldr	r2, [pc, #304]	; (8001d70 <HAL_UART_MspInit+0x34c>)
 8001c3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c42:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c46:	4b4a      	ldr	r3, [pc, #296]	; (8001d70 <HAL_UART_MspInit+0x34c>)
 8001c48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c54:	4b46      	ldr	r3, [pc, #280]	; (8001d70 <HAL_UART_MspInit+0x34c>)
 8001c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c5a:	4a45      	ldr	r2, [pc, #276]	; (8001d70 <HAL_UART_MspInit+0x34c>)
 8001c5c:	f043 0308 	orr.w	r3, r3, #8
 8001c60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c64:	4b42      	ldr	r3, [pc, #264]	; (8001d70 <HAL_UART_MspInit+0x34c>)
 8001c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c86:	2300      	movs	r3, #0
 8001c88:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c8c:	2307      	movs	r3, #7
 8001c8e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c92:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c96:	4619      	mov	r1, r3
 8001c98:	4836      	ldr	r0, [pc, #216]	; (8001d74 <HAL_UART_MspInit+0x350>)
 8001c9a:	f002 fdaf 	bl	80047fc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001c9e:	4b36      	ldr	r3, [pc, #216]	; (8001d78 <HAL_UART_MspInit+0x354>)
 8001ca0:	4a36      	ldr	r2, [pc, #216]	; (8001d7c <HAL_UART_MspInit+0x358>)
 8001ca2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001ca4:	4b34      	ldr	r3, [pc, #208]	; (8001d78 <HAL_UART_MspInit+0x354>)
 8001ca6:	222d      	movs	r2, #45	; 0x2d
 8001ca8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001caa:	4b33      	ldr	r3, [pc, #204]	; (8001d78 <HAL_UART_MspInit+0x354>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cb0:	4b31      	ldr	r3, [pc, #196]	; (8001d78 <HAL_UART_MspInit+0x354>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cb6:	4b30      	ldr	r3, [pc, #192]	; (8001d78 <HAL_UART_MspInit+0x354>)
 8001cb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cbc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cbe:	4b2e      	ldr	r3, [pc, #184]	; (8001d78 <HAL_UART_MspInit+0x354>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cc4:	4b2c      	ldr	r3, [pc, #176]	; (8001d78 <HAL_UART_MspInit+0x354>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001cca:	4b2b      	ldr	r3, [pc, #172]	; (8001d78 <HAL_UART_MspInit+0x354>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cd0:	4b29      	ldr	r3, [pc, #164]	; (8001d78 <HAL_UART_MspInit+0x354>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cd6:	4b28      	ldr	r3, [pc, #160]	; (8001d78 <HAL_UART_MspInit+0x354>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001cdc:	4826      	ldr	r0, [pc, #152]	; (8001d78 <HAL_UART_MspInit+0x354>)
 8001cde:	f000 fb69 	bl	80023b4 <HAL_DMA_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <HAL_UART_MspInit+0x2c8>
      Error_Handler();
 8001ce8:	f7ff fca1 	bl	800162e <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a22      	ldr	r2, [pc, #136]	; (8001d78 <HAL_UART_MspInit+0x354>)
 8001cf0:	67da      	str	r2, [r3, #124]	; 0x7c
 8001cf2:	4a21      	ldr	r2, [pc, #132]	; (8001d78 <HAL_UART_MspInit+0x354>)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8001cf8:	4b21      	ldr	r3, [pc, #132]	; (8001d80 <HAL_UART_MspInit+0x35c>)
 8001cfa:	4a22      	ldr	r2, [pc, #136]	; (8001d84 <HAL_UART_MspInit+0x360>)
 8001cfc:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001cfe:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <HAL_UART_MspInit+0x35c>)
 8001d00:	222e      	movs	r2, #46	; 0x2e
 8001d02:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d04:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <HAL_UART_MspInit+0x35c>)
 8001d06:	2240      	movs	r2, #64	; 0x40
 8001d08:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d0a:	4b1d      	ldr	r3, [pc, #116]	; (8001d80 <HAL_UART_MspInit+0x35c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d10:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <HAL_UART_MspInit+0x35c>)
 8001d12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d16:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d18:	4b19      	ldr	r3, [pc, #100]	; (8001d80 <HAL_UART_MspInit+0x35c>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d1e:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <HAL_UART_MspInit+0x35c>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001d24:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <HAL_UART_MspInit+0x35c>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <HAL_UART_MspInit+0x35c>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d30:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <HAL_UART_MspInit+0x35c>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001d36:	4812      	ldr	r0, [pc, #72]	; (8001d80 <HAL_UART_MspInit+0x35c>)
 8001d38:	f000 fb3c 	bl	80023b4 <HAL_DMA_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <HAL_UART_MspInit+0x322>
      Error_Handler();
 8001d42:	f7ff fc74 	bl	800162e <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a0d      	ldr	r2, [pc, #52]	; (8001d80 <HAL_UART_MspInit+0x35c>)
 8001d4a:	679a      	str	r2, [r3, #120]	; 0x78
 8001d4c:	4a0c      	ldr	r2, [pc, #48]	; (8001d80 <HAL_UART_MspInit+0x35c>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2100      	movs	r1, #0
 8001d56:	2027      	movs	r0, #39	; 0x27
 8001d58:	f000 faf7 	bl	800234a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d5c:	2027      	movs	r0, #39	; 0x27
 8001d5e:	f000 fb0e 	bl	800237e <HAL_NVIC_EnableIRQ>
}
 8001d62:	bf00      	nop
 8001d64:	37f0      	adds	r7, #240	; 0xf0
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40004800 	.word	0x40004800
 8001d70:	58024400 	.word	0x58024400
 8001d74:	58020c00 	.word	0x58020c00
 8001d78:	200000f0 	.word	0x200000f0
 8001d7c:	40020010 	.word	0x40020010
 8001d80:	20000250 	.word	0x20000250
 8001d84:	40020028 	.word	0x40020028

08001d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <NMI_Handler+0x4>

08001d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d92:	e7fe      	b.n	8001d92 <HardFault_Handler+0x4>

08001d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d98:	e7fe      	b.n	8001d98 <MemManage_Handler+0x4>

08001d9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d9e:	e7fe      	b.n	8001d9e <BusFault_Handler+0x4>

08001da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001da4:	e7fe      	b.n	8001da4 <UsageFault_Handler+0x4>

08001da6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dd4:	f000 f98e 	bl	80020f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dd8:	bf00      	nop
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001de0:	4802      	ldr	r0, [pc, #8]	; (8001dec <DMA1_Stream0_IRQHandler+0x10>)
 8001de2:	f001 fba5 	bl	8003530 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	200000f0 	.word	0x200000f0

08001df0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001df4:	4802      	ldr	r0, [pc, #8]	; (8001e00 <DMA1_Stream1_IRQHandler+0x10>)
 8001df6:	f001 fb9b 	bl	8003530 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000250 	.word	0x20000250

08001e04 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001e08:	2040      	movs	r0, #64	; 0x40
 8001e0a:	f002 fec0 	bl	8004b8e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001e0e:	2080      	movs	r0, #128	; 0x80
 8001e10:	f002 febd 	bl	8004b8e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e1c:	4802      	ldr	r0, [pc, #8]	; (8001e28 <USART3_IRQHandler+0x10>)
 8001e1e:	f006 fca3 	bl	8008768 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000168 	.word	0x20000168

08001e2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001e30:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001e34:	f002 feab 	bl	8004b8e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001e38:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001e3c:	f002 fea7 	bl	8004b8e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001e40:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e44:	f002 fea3 	bl	8004b8e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001e48:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001e4c:	f002 fe9f 	bl	8004b8e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001e58:	4802      	ldr	r0, [pc, #8]	; (8001e64 <TIM5_IRQHandler+0x10>)
 8001e5a:	f005 fbc0 	bl	80075de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	200002c8 	.word	0x200002c8

08001e68 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001e6c:	4802      	ldr	r0, [pc, #8]	; (8001e78 <UART4_IRQHandler+0x10>)
 8001e6e:	f006 fc7b 	bl	8008768 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000438 	.word	0x20000438

08001e7c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001e80:	4802      	ldr	r0, [pc, #8]	; (8001e8c <DMA2_Stream0_IRQHandler+0x10>)
 8001e82:	f001 fb55 	bl	8003530 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	2000002c 	.word	0x2000002c

08001e90 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001e94:	4802      	ldr	r0, [pc, #8]	; (8001ea0 <DMA2_Stream1_IRQHandler+0x10>)
 8001e96:	f001 fb4b 	bl	8003530 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000514 	.word	0x20000514

08001ea4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ea8:	4b39      	ldr	r3, [pc, #228]	; (8001f90 <SystemInit+0xec>)
 8001eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eae:	4a38      	ldr	r2, [pc, #224]	; (8001f90 <SystemInit+0xec>)
 8001eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001eb8:	4b36      	ldr	r3, [pc, #216]	; (8001f94 <SystemInit+0xf0>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	2b06      	cmp	r3, #6
 8001ec2:	d807      	bhi.n	8001ed4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ec4:	4b33      	ldr	r3, [pc, #204]	; (8001f94 <SystemInit+0xf0>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f023 030f 	bic.w	r3, r3, #15
 8001ecc:	4a31      	ldr	r2, [pc, #196]	; (8001f94 <SystemInit+0xf0>)
 8001ece:	f043 0307 	orr.w	r3, r3, #7
 8001ed2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001ed4:	4b30      	ldr	r3, [pc, #192]	; (8001f98 <SystemInit+0xf4>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a2f      	ldr	r2, [pc, #188]	; (8001f98 <SystemInit+0xf4>)
 8001eda:	f043 0301 	orr.w	r3, r3, #1
 8001ede:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ee0:	4b2d      	ldr	r3, [pc, #180]	; (8001f98 <SystemInit+0xf4>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001ee6:	4b2c      	ldr	r3, [pc, #176]	; (8001f98 <SystemInit+0xf4>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	492b      	ldr	r1, [pc, #172]	; (8001f98 <SystemInit+0xf4>)
 8001eec:	4b2b      	ldr	r3, [pc, #172]	; (8001f9c <SystemInit+0xf8>)
 8001eee:	4013      	ands	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ef2:	4b28      	ldr	r3, [pc, #160]	; (8001f94 <SystemInit+0xf0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0308 	and.w	r3, r3, #8
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d007      	beq.n	8001f0e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001efe:	4b25      	ldr	r3, [pc, #148]	; (8001f94 <SystemInit+0xf0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 030f 	bic.w	r3, r3, #15
 8001f06:	4a23      	ldr	r2, [pc, #140]	; (8001f94 <SystemInit+0xf0>)
 8001f08:	f043 0307 	orr.w	r3, r3, #7
 8001f0c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001f0e:	4b22      	ldr	r3, [pc, #136]	; (8001f98 <SystemInit+0xf4>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001f14:	4b20      	ldr	r3, [pc, #128]	; (8001f98 <SystemInit+0xf4>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001f1a:	4b1f      	ldr	r3, [pc, #124]	; (8001f98 <SystemInit+0xf4>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001f20:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <SystemInit+0xf4>)
 8001f22:	4a1f      	ldr	r2, [pc, #124]	; (8001fa0 <SystemInit+0xfc>)
 8001f24:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001f26:	4b1c      	ldr	r3, [pc, #112]	; (8001f98 <SystemInit+0xf4>)
 8001f28:	4a1e      	ldr	r2, [pc, #120]	; (8001fa4 <SystemInit+0x100>)
 8001f2a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001f2c:	4b1a      	ldr	r3, [pc, #104]	; (8001f98 <SystemInit+0xf4>)
 8001f2e:	4a1e      	ldr	r2, [pc, #120]	; (8001fa8 <SystemInit+0x104>)
 8001f30:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001f32:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <SystemInit+0xf4>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001f38:	4b17      	ldr	r3, [pc, #92]	; (8001f98 <SystemInit+0xf4>)
 8001f3a:	4a1b      	ldr	r2, [pc, #108]	; (8001fa8 <SystemInit+0x104>)
 8001f3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001f3e:	4b16      	ldr	r3, [pc, #88]	; (8001f98 <SystemInit+0xf4>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001f44:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <SystemInit+0xf4>)
 8001f46:	4a18      	ldr	r2, [pc, #96]	; (8001fa8 <SystemInit+0x104>)
 8001f48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001f4a:	4b13      	ldr	r3, [pc, #76]	; (8001f98 <SystemInit+0xf4>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f50:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <SystemInit+0xf4>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a10      	ldr	r2, [pc, #64]	; (8001f98 <SystemInit+0xf4>)
 8001f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f5a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f5c:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <SystemInit+0xf4>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001f62:	4b12      	ldr	r3, [pc, #72]	; (8001fac <SystemInit+0x108>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <SystemInit+0x10c>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f6e:	d202      	bcs.n	8001f76 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001f70:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <SystemInit+0x110>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001f76:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <SystemInit+0x114>)
 8001f78:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001f7c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f7e:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <SystemInit+0xec>)
 8001f80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f84:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001f86:	bf00      	nop
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	e000ed00 	.word	0xe000ed00
 8001f94:	52002000 	.word	0x52002000
 8001f98:	58024400 	.word	0x58024400
 8001f9c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001fa0:	02020200 	.word	0x02020200
 8001fa4:	01ff0000 	.word	0x01ff0000
 8001fa8:	01010280 	.word	0x01010280
 8001fac:	5c001000 	.word	0x5c001000
 8001fb0:	ffff0000 	.word	0xffff0000
 8001fb4:	51008108 	.word	0x51008108
 8001fb8:	52004000 	.word	0x52004000

08001fbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001fbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ff4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fc0:	f7ff ff70 	bl	8001ea4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fc4:	480c      	ldr	r0, [pc, #48]	; (8001ff8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fc6:	490d      	ldr	r1, [pc, #52]	; (8001ffc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fc8:	4a0d      	ldr	r2, [pc, #52]	; (8002000 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fcc:	e002      	b.n	8001fd4 <LoopCopyDataInit>

08001fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fd2:	3304      	adds	r3, #4

08001fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fd8:	d3f9      	bcc.n	8001fce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fda:	4a0a      	ldr	r2, [pc, #40]	; (8002004 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fdc:	4c0a      	ldr	r4, [pc, #40]	; (8002008 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fe0:	e001      	b.n	8001fe6 <LoopFillZerobss>

08001fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fe4:	3204      	adds	r2, #4

08001fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fe8:	d3fb      	bcc.n	8001fe2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fea:	f007 ff8f 	bl	8009f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fee:	f7fe fcef 	bl	80009d0 <main>
  bx  lr
 8001ff2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ff4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ffc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002000:	08009fcc 	.word	0x08009fcc
  ldr r2, =_sbss
 8002004:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002008:	20000590 	.word	0x20000590

0800200c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800200c:	e7fe      	b.n	800200c <ADC3_IRQHandler>
	...

08002010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002016:	2003      	movs	r0, #3
 8002018:	f000 f98c 	bl	8002334 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800201c:	f003 fbd2 	bl	80057c4 <HAL_RCC_GetSysClockFreq>
 8002020:	4602      	mov	r2, r0
 8002022:	4b15      	ldr	r3, [pc, #84]	; (8002078 <HAL_Init+0x68>)
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	0a1b      	lsrs	r3, r3, #8
 8002028:	f003 030f 	and.w	r3, r3, #15
 800202c:	4913      	ldr	r1, [pc, #76]	; (800207c <HAL_Init+0x6c>)
 800202e:	5ccb      	ldrb	r3, [r1, r3]
 8002030:	f003 031f 	and.w	r3, r3, #31
 8002034:	fa22 f303 	lsr.w	r3, r2, r3
 8002038:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800203a:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <HAL_Init+0x68>)
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	4a0e      	ldr	r2, [pc, #56]	; (800207c <HAL_Init+0x6c>)
 8002044:	5cd3      	ldrb	r3, [r2, r3]
 8002046:	f003 031f 	and.w	r3, r3, #31
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	fa22 f303 	lsr.w	r3, r2, r3
 8002050:	4a0b      	ldr	r2, [pc, #44]	; (8002080 <HAL_Init+0x70>)
 8002052:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002054:	4a0b      	ldr	r2, [pc, #44]	; (8002084 <HAL_Init+0x74>)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800205a:	2000      	movs	r0, #0
 800205c:	f000 f814 	bl	8002088 <HAL_InitTick>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e002      	b.n	8002070 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800206a:	f7ff fae5 	bl	8001638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	58024400 	.word	0x58024400
 800207c:	08009f7c 	.word	0x08009f7c
 8002080:	20000004 	.word	0x20000004
 8002084:	20000000 	.word	0x20000000

08002088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002090:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <HAL_InitTick+0x60>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e021      	b.n	80020e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800209c:	4b13      	ldr	r3, [pc, #76]	; (80020ec <HAL_InitTick+0x64>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <HAL_InitTick+0x60>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	4619      	mov	r1, r3
 80020a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 f971 	bl	800239a <HAL_SYSTICK_Config>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e00e      	b.n	80020e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b0f      	cmp	r3, #15
 80020c6:	d80a      	bhi.n	80020de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020c8:	2200      	movs	r2, #0
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	f04f 30ff 	mov.w	r0, #4294967295
 80020d0:	f000 f93b 	bl	800234a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020d4:	4a06      	ldr	r2, [pc, #24]	; (80020f0 <HAL_InitTick+0x68>)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	e000      	b.n	80020e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	2000000c 	.word	0x2000000c
 80020ec:	20000000 	.word	0x20000000
 80020f0:	20000008 	.word	0x20000008

080020f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020f8:	4b06      	ldr	r3, [pc, #24]	; (8002114 <HAL_IncTick+0x20>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	461a      	mov	r2, r3
 80020fe:	4b06      	ldr	r3, [pc, #24]	; (8002118 <HAL_IncTick+0x24>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4413      	add	r3, r2
 8002104:	4a04      	ldr	r2, [pc, #16]	; (8002118 <HAL_IncTick+0x24>)
 8002106:	6013      	str	r3, [r2, #0]
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	2000000c 	.word	0x2000000c
 8002118:	2000058c 	.word	0x2000058c

0800211c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return uwTick;
 8002120:	4b03      	ldr	r3, [pc, #12]	; (8002130 <HAL_GetTick+0x14>)
 8002122:	681b      	ldr	r3, [r3, #0]
}
 8002124:	4618      	mov	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	2000058c 	.word	0x2000058c

08002134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800213c:	f7ff ffee 	bl	800211c <HAL_GetTick>
 8002140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800214c:	d005      	beq.n	800215a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800214e:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <HAL_Delay+0x44>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	461a      	mov	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4413      	add	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800215a:	bf00      	nop
 800215c:	f7ff ffde 	bl	800211c <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	429a      	cmp	r2, r3
 800216a:	d8f7      	bhi.n	800215c <HAL_Delay+0x28>
  {
  }
}
 800216c:	bf00      	nop
 800216e:	bf00      	nop
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	2000000c 	.word	0x2000000c

0800217c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002180:	4b03      	ldr	r3, [pc, #12]	; (8002190 <HAL_GetREVID+0x14>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	0c1b      	lsrs	r3, r3, #16
}
 8002186:	4618      	mov	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	5c001000 	.word	0x5c001000

08002194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021a4:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <__NVIC_SetPriorityGrouping+0x40>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021b0:	4013      	ands	r3, r2
 80021b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021bc:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <__NVIC_SetPriorityGrouping+0x44>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021c2:	4a04      	ldr	r2, [pc, #16]	; (80021d4 <__NVIC_SetPriorityGrouping+0x40>)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	60d3      	str	r3, [r2, #12]
}
 80021c8:	bf00      	nop
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	e000ed00 	.word	0xe000ed00
 80021d8:	05fa0000 	.word	0x05fa0000

080021dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021e0:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <__NVIC_GetPriorityGrouping+0x18>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	0a1b      	lsrs	r3, r3, #8
 80021e6:	f003 0307 	and.w	r3, r3, #7
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002202:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002206:	2b00      	cmp	r3, #0
 8002208:	db0b      	blt.n	8002222 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800220a:	88fb      	ldrh	r3, [r7, #6]
 800220c:	f003 021f 	and.w	r2, r3, #31
 8002210:	4907      	ldr	r1, [pc, #28]	; (8002230 <__NVIC_EnableIRQ+0x38>)
 8002212:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002216:	095b      	lsrs	r3, r3, #5
 8002218:	2001      	movs	r0, #1
 800221a:	fa00 f202 	lsl.w	r2, r0, r2
 800221e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	e000e100 	.word	0xe000e100

08002234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	6039      	str	r1, [r7, #0]
 800223e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002240:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002244:	2b00      	cmp	r3, #0
 8002246:	db0a      	blt.n	800225e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	b2da      	uxtb	r2, r3
 800224c:	490c      	ldr	r1, [pc, #48]	; (8002280 <__NVIC_SetPriority+0x4c>)
 800224e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002252:	0112      	lsls	r2, r2, #4
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	440b      	add	r3, r1
 8002258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800225c:	e00a      	b.n	8002274 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	b2da      	uxtb	r2, r3
 8002262:	4908      	ldr	r1, [pc, #32]	; (8002284 <__NVIC_SetPriority+0x50>)
 8002264:	88fb      	ldrh	r3, [r7, #6]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	3b04      	subs	r3, #4
 800226c:	0112      	lsls	r2, r2, #4
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	440b      	add	r3, r1
 8002272:	761a      	strb	r2, [r3, #24]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000e100 	.word	0xe000e100
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002288:	b480      	push	{r7}
 800228a:	b089      	sub	sp, #36	; 0x24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f1c3 0307 	rsb	r3, r3, #7
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	bf28      	it	cs
 80022a6:	2304      	movcs	r3, #4
 80022a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	3304      	adds	r3, #4
 80022ae:	2b06      	cmp	r3, #6
 80022b0:	d902      	bls.n	80022b8 <NVIC_EncodePriority+0x30>
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3b03      	subs	r3, #3
 80022b6:	e000      	b.n	80022ba <NVIC_EncodePriority+0x32>
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022bc:	f04f 32ff 	mov.w	r2, #4294967295
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43da      	mvns	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	401a      	ands	r2, r3
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022d0:	f04f 31ff 	mov.w	r1, #4294967295
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	fa01 f303 	lsl.w	r3, r1, r3
 80022da:	43d9      	mvns	r1, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e0:	4313      	orrs	r3, r2
         );
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3724      	adds	r7, #36	; 0x24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
	...

080022f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002300:	d301      	bcc.n	8002306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002302:	2301      	movs	r3, #1
 8002304:	e00f      	b.n	8002326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002306:	4a0a      	ldr	r2, [pc, #40]	; (8002330 <SysTick_Config+0x40>)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3b01      	subs	r3, #1
 800230c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800230e:	210f      	movs	r1, #15
 8002310:	f04f 30ff 	mov.w	r0, #4294967295
 8002314:	f7ff ff8e 	bl	8002234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <SysTick_Config+0x40>)
 800231a:	2200      	movs	r2, #0
 800231c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800231e:	4b04      	ldr	r3, [pc, #16]	; (8002330 <SysTick_Config+0x40>)
 8002320:	2207      	movs	r2, #7
 8002322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	e000e010 	.word	0xe000e010

08002334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff ff29 	bl	8002194 <__NVIC_SetPriorityGrouping>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b086      	sub	sp, #24
 800234e:	af00      	add	r7, sp, #0
 8002350:	4603      	mov	r3, r0
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002358:	f7ff ff40 	bl	80021dc <__NVIC_GetPriorityGrouping>
 800235c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68b9      	ldr	r1, [r7, #8]
 8002362:	6978      	ldr	r0, [r7, #20]
 8002364:	f7ff ff90 	bl	8002288 <NVIC_EncodePriority>
 8002368:	4602      	mov	r2, r0
 800236a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800236e:	4611      	mov	r1, r2
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff ff5f 	bl	8002234 <__NVIC_SetPriority>
}
 8002376:	bf00      	nop
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b082      	sub	sp, #8
 8002382:	af00      	add	r7, sp, #0
 8002384:	4603      	mov	r3, r0
 8002386:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002388:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff ff33 	bl	80021f8 <__NVIC_EnableIRQ>
}
 8002392:	bf00      	nop
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7ff ffa4 	bl	80022f0 <SysTick_Config>
 80023a8:	4603      	mov	r3, r0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80023bc:	f7ff feae 	bl	800211c <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e316      	b.n	80029fa <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a66      	ldr	r2, [pc, #408]	; (800256c <HAL_DMA_Init+0x1b8>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d04a      	beq.n	800246c <HAL_DMA_Init+0xb8>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a65      	ldr	r2, [pc, #404]	; (8002570 <HAL_DMA_Init+0x1bc>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d045      	beq.n	800246c <HAL_DMA_Init+0xb8>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a63      	ldr	r2, [pc, #396]	; (8002574 <HAL_DMA_Init+0x1c0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d040      	beq.n	800246c <HAL_DMA_Init+0xb8>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a62      	ldr	r2, [pc, #392]	; (8002578 <HAL_DMA_Init+0x1c4>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d03b      	beq.n	800246c <HAL_DMA_Init+0xb8>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a60      	ldr	r2, [pc, #384]	; (800257c <HAL_DMA_Init+0x1c8>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d036      	beq.n	800246c <HAL_DMA_Init+0xb8>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a5f      	ldr	r2, [pc, #380]	; (8002580 <HAL_DMA_Init+0x1cc>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d031      	beq.n	800246c <HAL_DMA_Init+0xb8>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a5d      	ldr	r2, [pc, #372]	; (8002584 <HAL_DMA_Init+0x1d0>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d02c      	beq.n	800246c <HAL_DMA_Init+0xb8>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a5c      	ldr	r2, [pc, #368]	; (8002588 <HAL_DMA_Init+0x1d4>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d027      	beq.n	800246c <HAL_DMA_Init+0xb8>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a5a      	ldr	r2, [pc, #360]	; (800258c <HAL_DMA_Init+0x1d8>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d022      	beq.n	800246c <HAL_DMA_Init+0xb8>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a59      	ldr	r2, [pc, #356]	; (8002590 <HAL_DMA_Init+0x1dc>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d01d      	beq.n	800246c <HAL_DMA_Init+0xb8>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a57      	ldr	r2, [pc, #348]	; (8002594 <HAL_DMA_Init+0x1e0>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d018      	beq.n	800246c <HAL_DMA_Init+0xb8>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a56      	ldr	r2, [pc, #344]	; (8002598 <HAL_DMA_Init+0x1e4>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d013      	beq.n	800246c <HAL_DMA_Init+0xb8>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a54      	ldr	r2, [pc, #336]	; (800259c <HAL_DMA_Init+0x1e8>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d00e      	beq.n	800246c <HAL_DMA_Init+0xb8>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a53      	ldr	r2, [pc, #332]	; (80025a0 <HAL_DMA_Init+0x1ec>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d009      	beq.n	800246c <HAL_DMA_Init+0xb8>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a51      	ldr	r2, [pc, #324]	; (80025a4 <HAL_DMA_Init+0x1f0>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d004      	beq.n	800246c <HAL_DMA_Init+0xb8>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a50      	ldr	r2, [pc, #320]	; (80025a8 <HAL_DMA_Init+0x1f4>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d101      	bne.n	8002470 <HAL_DMA_Init+0xbc>
 800246c:	2301      	movs	r3, #1
 800246e:	e000      	b.n	8002472 <HAL_DMA_Init+0xbe>
 8002470:	2300      	movs	r3, #0
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 813b 	beq.w	80026ee <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2202      	movs	r2, #2
 8002484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a37      	ldr	r2, [pc, #220]	; (800256c <HAL_DMA_Init+0x1b8>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d04a      	beq.n	8002528 <HAL_DMA_Init+0x174>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a36      	ldr	r2, [pc, #216]	; (8002570 <HAL_DMA_Init+0x1bc>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d045      	beq.n	8002528 <HAL_DMA_Init+0x174>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a34      	ldr	r2, [pc, #208]	; (8002574 <HAL_DMA_Init+0x1c0>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d040      	beq.n	8002528 <HAL_DMA_Init+0x174>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a33      	ldr	r2, [pc, #204]	; (8002578 <HAL_DMA_Init+0x1c4>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d03b      	beq.n	8002528 <HAL_DMA_Init+0x174>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a31      	ldr	r2, [pc, #196]	; (800257c <HAL_DMA_Init+0x1c8>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d036      	beq.n	8002528 <HAL_DMA_Init+0x174>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a30      	ldr	r2, [pc, #192]	; (8002580 <HAL_DMA_Init+0x1cc>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d031      	beq.n	8002528 <HAL_DMA_Init+0x174>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a2e      	ldr	r2, [pc, #184]	; (8002584 <HAL_DMA_Init+0x1d0>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d02c      	beq.n	8002528 <HAL_DMA_Init+0x174>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a2d      	ldr	r2, [pc, #180]	; (8002588 <HAL_DMA_Init+0x1d4>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d027      	beq.n	8002528 <HAL_DMA_Init+0x174>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a2b      	ldr	r2, [pc, #172]	; (800258c <HAL_DMA_Init+0x1d8>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d022      	beq.n	8002528 <HAL_DMA_Init+0x174>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a2a      	ldr	r2, [pc, #168]	; (8002590 <HAL_DMA_Init+0x1dc>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d01d      	beq.n	8002528 <HAL_DMA_Init+0x174>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a28      	ldr	r2, [pc, #160]	; (8002594 <HAL_DMA_Init+0x1e0>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d018      	beq.n	8002528 <HAL_DMA_Init+0x174>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a27      	ldr	r2, [pc, #156]	; (8002598 <HAL_DMA_Init+0x1e4>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d013      	beq.n	8002528 <HAL_DMA_Init+0x174>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a25      	ldr	r2, [pc, #148]	; (800259c <HAL_DMA_Init+0x1e8>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d00e      	beq.n	8002528 <HAL_DMA_Init+0x174>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a24      	ldr	r2, [pc, #144]	; (80025a0 <HAL_DMA_Init+0x1ec>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d009      	beq.n	8002528 <HAL_DMA_Init+0x174>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a22      	ldr	r2, [pc, #136]	; (80025a4 <HAL_DMA_Init+0x1f0>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d004      	beq.n	8002528 <HAL_DMA_Init+0x174>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a21      	ldr	r2, [pc, #132]	; (80025a8 <HAL_DMA_Init+0x1f4>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d108      	bne.n	800253a <HAL_DMA_Init+0x186>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 0201 	bic.w	r2, r2, #1
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	e007      	b.n	800254a <HAL_DMA_Init+0x196>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0201 	bic.w	r2, r2, #1
 8002548:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800254a:	e02f      	b.n	80025ac <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800254c:	f7ff fde6 	bl	800211c <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b05      	cmp	r3, #5
 8002558:	d928      	bls.n	80025ac <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2220      	movs	r2, #32
 800255e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2203      	movs	r2, #3
 8002564:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e246      	b.n	80029fa <HAL_DMA_Init+0x646>
 800256c:	40020010 	.word	0x40020010
 8002570:	40020028 	.word	0x40020028
 8002574:	40020040 	.word	0x40020040
 8002578:	40020058 	.word	0x40020058
 800257c:	40020070 	.word	0x40020070
 8002580:	40020088 	.word	0x40020088
 8002584:	400200a0 	.word	0x400200a0
 8002588:	400200b8 	.word	0x400200b8
 800258c:	40020410 	.word	0x40020410
 8002590:	40020428 	.word	0x40020428
 8002594:	40020440 	.word	0x40020440
 8002598:	40020458 	.word	0x40020458
 800259c:	40020470 	.word	0x40020470
 80025a0:	40020488 	.word	0x40020488
 80025a4:	400204a0 	.word	0x400204a0
 80025a8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1c8      	bne.n	800254c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	4b83      	ldr	r3, [pc, #524]	; (80027d4 <HAL_DMA_Init+0x420>)
 80025c6:	4013      	ands	r3, r2
 80025c8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80025d2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025de:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ea:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d107      	bne.n	8002610 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002608:	4313      	orrs	r3, r2
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	4313      	orrs	r3, r2
 800260e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002610:	4b71      	ldr	r3, [pc, #452]	; (80027d8 <HAL_DMA_Init+0x424>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	4b71      	ldr	r3, [pc, #452]	; (80027dc <HAL_DMA_Init+0x428>)
 8002616:	4013      	ands	r3, r2
 8002618:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800261c:	d328      	bcc.n	8002670 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b28      	cmp	r3, #40	; 0x28
 8002624:	d903      	bls.n	800262e <HAL_DMA_Init+0x27a>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b2e      	cmp	r3, #46	; 0x2e
 800262c:	d917      	bls.n	800265e <HAL_DMA_Init+0x2aa>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b3e      	cmp	r3, #62	; 0x3e
 8002634:	d903      	bls.n	800263e <HAL_DMA_Init+0x28a>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b42      	cmp	r3, #66	; 0x42
 800263c:	d90f      	bls.n	800265e <HAL_DMA_Init+0x2aa>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b46      	cmp	r3, #70	; 0x46
 8002644:	d903      	bls.n	800264e <HAL_DMA_Init+0x29a>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b48      	cmp	r3, #72	; 0x48
 800264c:	d907      	bls.n	800265e <HAL_DMA_Init+0x2aa>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b4e      	cmp	r3, #78	; 0x4e
 8002654:	d905      	bls.n	8002662 <HAL_DMA_Init+0x2ae>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b52      	cmp	r3, #82	; 0x52
 800265c:	d801      	bhi.n	8002662 <HAL_DMA_Init+0x2ae>
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <HAL_DMA_Init+0x2b0>
 8002662:	2300      	movs	r3, #0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800266e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f023 0307 	bic.w	r3, r3, #7
 8002686:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	4313      	orrs	r3, r2
 8002690:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	2b04      	cmp	r3, #4
 8002698:	d117      	bne.n	80026ca <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00e      	beq.n	80026ca <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f001 ff1b 	bl	80044e8 <DMA_CheckFifoParam>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2240      	movs	r2, #64	; 0x40
 80026bc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e197      	b.n	80029fa <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f001 fe56 	bl	8004384 <DMA_CalcBaseAndBitshift>
 80026d8:	4603      	mov	r3, r0
 80026da:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e0:	f003 031f 	and.w	r3, r3, #31
 80026e4:	223f      	movs	r2, #63	; 0x3f
 80026e6:	409a      	lsls	r2, r3
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	e0cd      	b.n	800288a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a3b      	ldr	r2, [pc, #236]	; (80027e0 <HAL_DMA_Init+0x42c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d022      	beq.n	800273e <HAL_DMA_Init+0x38a>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a39      	ldr	r2, [pc, #228]	; (80027e4 <HAL_DMA_Init+0x430>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d01d      	beq.n	800273e <HAL_DMA_Init+0x38a>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a38      	ldr	r2, [pc, #224]	; (80027e8 <HAL_DMA_Init+0x434>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d018      	beq.n	800273e <HAL_DMA_Init+0x38a>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a36      	ldr	r2, [pc, #216]	; (80027ec <HAL_DMA_Init+0x438>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d013      	beq.n	800273e <HAL_DMA_Init+0x38a>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a35      	ldr	r2, [pc, #212]	; (80027f0 <HAL_DMA_Init+0x43c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d00e      	beq.n	800273e <HAL_DMA_Init+0x38a>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a33      	ldr	r2, [pc, #204]	; (80027f4 <HAL_DMA_Init+0x440>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d009      	beq.n	800273e <HAL_DMA_Init+0x38a>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a32      	ldr	r2, [pc, #200]	; (80027f8 <HAL_DMA_Init+0x444>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d004      	beq.n	800273e <HAL_DMA_Init+0x38a>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a30      	ldr	r2, [pc, #192]	; (80027fc <HAL_DMA_Init+0x448>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d101      	bne.n	8002742 <HAL_DMA_Init+0x38e>
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <HAL_DMA_Init+0x390>
 8002742:	2300      	movs	r3, #0
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 8097 	beq.w	8002878 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a24      	ldr	r2, [pc, #144]	; (80027e0 <HAL_DMA_Init+0x42c>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d021      	beq.n	8002798 <HAL_DMA_Init+0x3e4>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a22      	ldr	r2, [pc, #136]	; (80027e4 <HAL_DMA_Init+0x430>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d01c      	beq.n	8002798 <HAL_DMA_Init+0x3e4>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a21      	ldr	r2, [pc, #132]	; (80027e8 <HAL_DMA_Init+0x434>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d017      	beq.n	8002798 <HAL_DMA_Init+0x3e4>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a1f      	ldr	r2, [pc, #124]	; (80027ec <HAL_DMA_Init+0x438>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d012      	beq.n	8002798 <HAL_DMA_Init+0x3e4>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a1e      	ldr	r2, [pc, #120]	; (80027f0 <HAL_DMA_Init+0x43c>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d00d      	beq.n	8002798 <HAL_DMA_Init+0x3e4>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a1c      	ldr	r2, [pc, #112]	; (80027f4 <HAL_DMA_Init+0x440>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d008      	beq.n	8002798 <HAL_DMA_Init+0x3e4>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a1b      	ldr	r2, [pc, #108]	; (80027f8 <HAL_DMA_Init+0x444>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d003      	beq.n	8002798 <HAL_DMA_Init+0x3e4>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a19      	ldr	r2, [pc, #100]	; (80027fc <HAL_DMA_Init+0x448>)
 8002796:	4293      	cmp	r3, r2
 8002798:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2202      	movs	r2, #2
 80027a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	4b12      	ldr	r3, [pc, #72]	; (8002800 <HAL_DMA_Init+0x44c>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	2b40      	cmp	r3, #64	; 0x40
 80027c0:	d020      	beq.n	8002804 <HAL_DMA_Init+0x450>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b80      	cmp	r3, #128	; 0x80
 80027c8:	d102      	bne.n	80027d0 <HAL_DMA_Init+0x41c>
 80027ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027ce:	e01a      	b.n	8002806 <HAL_DMA_Init+0x452>
 80027d0:	2300      	movs	r3, #0
 80027d2:	e018      	b.n	8002806 <HAL_DMA_Init+0x452>
 80027d4:	fe10803f 	.word	0xfe10803f
 80027d8:	5c001000 	.word	0x5c001000
 80027dc:	ffff0000 	.word	0xffff0000
 80027e0:	58025408 	.word	0x58025408
 80027e4:	5802541c 	.word	0x5802541c
 80027e8:	58025430 	.word	0x58025430
 80027ec:	58025444 	.word	0x58025444
 80027f0:	58025458 	.word	0x58025458
 80027f4:	5802546c 	.word	0x5802546c
 80027f8:	58025480 	.word	0x58025480
 80027fc:	58025494 	.word	0x58025494
 8002800:	fffe000f 	.word	0xfffe000f
 8002804:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	68d2      	ldr	r2, [r2, #12]
 800280a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800280c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002814:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800281c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002824:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800282c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002834:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	4313      	orrs	r3, r2
 800283a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	461a      	mov	r2, r3
 800284a:	4b6e      	ldr	r3, [pc, #440]	; (8002a04 <HAL_DMA_Init+0x650>)
 800284c:	4413      	add	r3, r2
 800284e:	4a6e      	ldr	r2, [pc, #440]	; (8002a08 <HAL_DMA_Init+0x654>)
 8002850:	fba2 2303 	umull	r2, r3, r2, r3
 8002854:	091b      	lsrs	r3, r3, #4
 8002856:	009a      	lsls	r2, r3, #2
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f001 fd91 	bl	8004384 <DMA_CalcBaseAndBitshift>
 8002862:	4603      	mov	r3, r0
 8002864:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286a:	f003 031f 	and.w	r3, r3, #31
 800286e:	2201      	movs	r2, #1
 8002870:	409a      	lsls	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	e008      	b.n	800288a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2240      	movs	r2, #64	; 0x40
 800287c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2203      	movs	r2, #3
 8002882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e0b7      	b.n	80029fa <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a5f      	ldr	r2, [pc, #380]	; (8002a0c <HAL_DMA_Init+0x658>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d072      	beq.n	800297a <HAL_DMA_Init+0x5c6>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a5d      	ldr	r2, [pc, #372]	; (8002a10 <HAL_DMA_Init+0x65c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d06d      	beq.n	800297a <HAL_DMA_Init+0x5c6>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a5c      	ldr	r2, [pc, #368]	; (8002a14 <HAL_DMA_Init+0x660>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d068      	beq.n	800297a <HAL_DMA_Init+0x5c6>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a5a      	ldr	r2, [pc, #360]	; (8002a18 <HAL_DMA_Init+0x664>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d063      	beq.n	800297a <HAL_DMA_Init+0x5c6>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a59      	ldr	r2, [pc, #356]	; (8002a1c <HAL_DMA_Init+0x668>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d05e      	beq.n	800297a <HAL_DMA_Init+0x5c6>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a57      	ldr	r2, [pc, #348]	; (8002a20 <HAL_DMA_Init+0x66c>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d059      	beq.n	800297a <HAL_DMA_Init+0x5c6>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a56      	ldr	r2, [pc, #344]	; (8002a24 <HAL_DMA_Init+0x670>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d054      	beq.n	800297a <HAL_DMA_Init+0x5c6>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a54      	ldr	r2, [pc, #336]	; (8002a28 <HAL_DMA_Init+0x674>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d04f      	beq.n	800297a <HAL_DMA_Init+0x5c6>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a53      	ldr	r2, [pc, #332]	; (8002a2c <HAL_DMA_Init+0x678>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d04a      	beq.n	800297a <HAL_DMA_Init+0x5c6>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a51      	ldr	r2, [pc, #324]	; (8002a30 <HAL_DMA_Init+0x67c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d045      	beq.n	800297a <HAL_DMA_Init+0x5c6>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a50      	ldr	r2, [pc, #320]	; (8002a34 <HAL_DMA_Init+0x680>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d040      	beq.n	800297a <HAL_DMA_Init+0x5c6>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a4e      	ldr	r2, [pc, #312]	; (8002a38 <HAL_DMA_Init+0x684>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d03b      	beq.n	800297a <HAL_DMA_Init+0x5c6>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a4d      	ldr	r2, [pc, #308]	; (8002a3c <HAL_DMA_Init+0x688>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d036      	beq.n	800297a <HAL_DMA_Init+0x5c6>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a4b      	ldr	r2, [pc, #300]	; (8002a40 <HAL_DMA_Init+0x68c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d031      	beq.n	800297a <HAL_DMA_Init+0x5c6>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a4a      	ldr	r2, [pc, #296]	; (8002a44 <HAL_DMA_Init+0x690>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d02c      	beq.n	800297a <HAL_DMA_Init+0x5c6>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a48      	ldr	r2, [pc, #288]	; (8002a48 <HAL_DMA_Init+0x694>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d027      	beq.n	800297a <HAL_DMA_Init+0x5c6>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a47      	ldr	r2, [pc, #284]	; (8002a4c <HAL_DMA_Init+0x698>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d022      	beq.n	800297a <HAL_DMA_Init+0x5c6>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a45      	ldr	r2, [pc, #276]	; (8002a50 <HAL_DMA_Init+0x69c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d01d      	beq.n	800297a <HAL_DMA_Init+0x5c6>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a44      	ldr	r2, [pc, #272]	; (8002a54 <HAL_DMA_Init+0x6a0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d018      	beq.n	800297a <HAL_DMA_Init+0x5c6>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a42      	ldr	r2, [pc, #264]	; (8002a58 <HAL_DMA_Init+0x6a4>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d013      	beq.n	800297a <HAL_DMA_Init+0x5c6>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a41      	ldr	r2, [pc, #260]	; (8002a5c <HAL_DMA_Init+0x6a8>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d00e      	beq.n	800297a <HAL_DMA_Init+0x5c6>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a3f      	ldr	r2, [pc, #252]	; (8002a60 <HAL_DMA_Init+0x6ac>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d009      	beq.n	800297a <HAL_DMA_Init+0x5c6>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a3e      	ldr	r2, [pc, #248]	; (8002a64 <HAL_DMA_Init+0x6b0>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d004      	beq.n	800297a <HAL_DMA_Init+0x5c6>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a3c      	ldr	r2, [pc, #240]	; (8002a68 <HAL_DMA_Init+0x6b4>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d101      	bne.n	800297e <HAL_DMA_Init+0x5ca>
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <HAL_DMA_Init+0x5cc>
 800297e:	2300      	movs	r3, #0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d032      	beq.n	80029ea <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f001 fe2b 	bl	80045e0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b80      	cmp	r3, #128	; 0x80
 8002990:	d102      	bne.n	8002998 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80029ac:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d010      	beq.n	80029d8 <HAL_DMA_Init+0x624>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b08      	cmp	r3, #8
 80029bc:	d80c      	bhi.n	80029d8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f001 fea8 	bl	8004714 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	e008      	b.n	80029ea <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	a7fdabf8 	.word	0xa7fdabf8
 8002a08:	cccccccd 	.word	0xcccccccd
 8002a0c:	40020010 	.word	0x40020010
 8002a10:	40020028 	.word	0x40020028
 8002a14:	40020040 	.word	0x40020040
 8002a18:	40020058 	.word	0x40020058
 8002a1c:	40020070 	.word	0x40020070
 8002a20:	40020088 	.word	0x40020088
 8002a24:	400200a0 	.word	0x400200a0
 8002a28:	400200b8 	.word	0x400200b8
 8002a2c:	40020410 	.word	0x40020410
 8002a30:	40020428 	.word	0x40020428
 8002a34:	40020440 	.word	0x40020440
 8002a38:	40020458 	.word	0x40020458
 8002a3c:	40020470 	.word	0x40020470
 8002a40:	40020488 	.word	0x40020488
 8002a44:	400204a0 	.word	0x400204a0
 8002a48:	400204b8 	.word	0x400204b8
 8002a4c:	58025408 	.word	0x58025408
 8002a50:	5802541c 	.word	0x5802541c
 8002a54:	58025430 	.word	0x58025430
 8002a58:	58025444 	.word	0x58025444
 8002a5c:	58025458 	.word	0x58025458
 8002a60:	5802546c 	.word	0x5802546c
 8002a64:	58025480 	.word	0x58025480
 8002a68:	58025494 	.word	0x58025494

08002a6c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002a74:	f7ff fb52 	bl	800211c <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e2dc      	b.n	800303e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d008      	beq.n	8002aa2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2280      	movs	r2, #128	; 0x80
 8002a94:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e2cd      	b.n	800303e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a76      	ldr	r2, [pc, #472]	; (8002c80 <HAL_DMA_Abort+0x214>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d04a      	beq.n	8002b42 <HAL_DMA_Abort+0xd6>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a74      	ldr	r2, [pc, #464]	; (8002c84 <HAL_DMA_Abort+0x218>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d045      	beq.n	8002b42 <HAL_DMA_Abort+0xd6>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a73      	ldr	r2, [pc, #460]	; (8002c88 <HAL_DMA_Abort+0x21c>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d040      	beq.n	8002b42 <HAL_DMA_Abort+0xd6>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a71      	ldr	r2, [pc, #452]	; (8002c8c <HAL_DMA_Abort+0x220>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d03b      	beq.n	8002b42 <HAL_DMA_Abort+0xd6>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a70      	ldr	r2, [pc, #448]	; (8002c90 <HAL_DMA_Abort+0x224>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d036      	beq.n	8002b42 <HAL_DMA_Abort+0xd6>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a6e      	ldr	r2, [pc, #440]	; (8002c94 <HAL_DMA_Abort+0x228>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d031      	beq.n	8002b42 <HAL_DMA_Abort+0xd6>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a6d      	ldr	r2, [pc, #436]	; (8002c98 <HAL_DMA_Abort+0x22c>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d02c      	beq.n	8002b42 <HAL_DMA_Abort+0xd6>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a6b      	ldr	r2, [pc, #428]	; (8002c9c <HAL_DMA_Abort+0x230>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d027      	beq.n	8002b42 <HAL_DMA_Abort+0xd6>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a6a      	ldr	r2, [pc, #424]	; (8002ca0 <HAL_DMA_Abort+0x234>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d022      	beq.n	8002b42 <HAL_DMA_Abort+0xd6>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a68      	ldr	r2, [pc, #416]	; (8002ca4 <HAL_DMA_Abort+0x238>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d01d      	beq.n	8002b42 <HAL_DMA_Abort+0xd6>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a67      	ldr	r2, [pc, #412]	; (8002ca8 <HAL_DMA_Abort+0x23c>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d018      	beq.n	8002b42 <HAL_DMA_Abort+0xd6>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a65      	ldr	r2, [pc, #404]	; (8002cac <HAL_DMA_Abort+0x240>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d013      	beq.n	8002b42 <HAL_DMA_Abort+0xd6>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a64      	ldr	r2, [pc, #400]	; (8002cb0 <HAL_DMA_Abort+0x244>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d00e      	beq.n	8002b42 <HAL_DMA_Abort+0xd6>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a62      	ldr	r2, [pc, #392]	; (8002cb4 <HAL_DMA_Abort+0x248>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d009      	beq.n	8002b42 <HAL_DMA_Abort+0xd6>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a61      	ldr	r2, [pc, #388]	; (8002cb8 <HAL_DMA_Abort+0x24c>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d004      	beq.n	8002b42 <HAL_DMA_Abort+0xd6>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a5f      	ldr	r2, [pc, #380]	; (8002cbc <HAL_DMA_Abort+0x250>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d101      	bne.n	8002b46 <HAL_DMA_Abort+0xda>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <HAL_DMA_Abort+0xdc>
 8002b46:	2300      	movs	r3, #0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d013      	beq.n	8002b74 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 021e 	bic.w	r2, r2, #30
 8002b5a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695a      	ldr	r2, [r3, #20]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b6a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	617b      	str	r3, [r7, #20]
 8002b72:	e00a      	b.n	8002b8a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 020e 	bic.w	r2, r2, #14
 8002b82:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a3c      	ldr	r2, [pc, #240]	; (8002c80 <HAL_DMA_Abort+0x214>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d072      	beq.n	8002c7a <HAL_DMA_Abort+0x20e>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a3a      	ldr	r2, [pc, #232]	; (8002c84 <HAL_DMA_Abort+0x218>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d06d      	beq.n	8002c7a <HAL_DMA_Abort+0x20e>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a39      	ldr	r2, [pc, #228]	; (8002c88 <HAL_DMA_Abort+0x21c>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d068      	beq.n	8002c7a <HAL_DMA_Abort+0x20e>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a37      	ldr	r2, [pc, #220]	; (8002c8c <HAL_DMA_Abort+0x220>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d063      	beq.n	8002c7a <HAL_DMA_Abort+0x20e>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a36      	ldr	r2, [pc, #216]	; (8002c90 <HAL_DMA_Abort+0x224>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d05e      	beq.n	8002c7a <HAL_DMA_Abort+0x20e>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a34      	ldr	r2, [pc, #208]	; (8002c94 <HAL_DMA_Abort+0x228>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d059      	beq.n	8002c7a <HAL_DMA_Abort+0x20e>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a33      	ldr	r2, [pc, #204]	; (8002c98 <HAL_DMA_Abort+0x22c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d054      	beq.n	8002c7a <HAL_DMA_Abort+0x20e>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a31      	ldr	r2, [pc, #196]	; (8002c9c <HAL_DMA_Abort+0x230>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d04f      	beq.n	8002c7a <HAL_DMA_Abort+0x20e>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a30      	ldr	r2, [pc, #192]	; (8002ca0 <HAL_DMA_Abort+0x234>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d04a      	beq.n	8002c7a <HAL_DMA_Abort+0x20e>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a2e      	ldr	r2, [pc, #184]	; (8002ca4 <HAL_DMA_Abort+0x238>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d045      	beq.n	8002c7a <HAL_DMA_Abort+0x20e>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a2d      	ldr	r2, [pc, #180]	; (8002ca8 <HAL_DMA_Abort+0x23c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d040      	beq.n	8002c7a <HAL_DMA_Abort+0x20e>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a2b      	ldr	r2, [pc, #172]	; (8002cac <HAL_DMA_Abort+0x240>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d03b      	beq.n	8002c7a <HAL_DMA_Abort+0x20e>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a2a      	ldr	r2, [pc, #168]	; (8002cb0 <HAL_DMA_Abort+0x244>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d036      	beq.n	8002c7a <HAL_DMA_Abort+0x20e>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a28      	ldr	r2, [pc, #160]	; (8002cb4 <HAL_DMA_Abort+0x248>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d031      	beq.n	8002c7a <HAL_DMA_Abort+0x20e>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a27      	ldr	r2, [pc, #156]	; (8002cb8 <HAL_DMA_Abort+0x24c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d02c      	beq.n	8002c7a <HAL_DMA_Abort+0x20e>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a25      	ldr	r2, [pc, #148]	; (8002cbc <HAL_DMA_Abort+0x250>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d027      	beq.n	8002c7a <HAL_DMA_Abort+0x20e>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a24      	ldr	r2, [pc, #144]	; (8002cc0 <HAL_DMA_Abort+0x254>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d022      	beq.n	8002c7a <HAL_DMA_Abort+0x20e>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a22      	ldr	r2, [pc, #136]	; (8002cc4 <HAL_DMA_Abort+0x258>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d01d      	beq.n	8002c7a <HAL_DMA_Abort+0x20e>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a21      	ldr	r2, [pc, #132]	; (8002cc8 <HAL_DMA_Abort+0x25c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d018      	beq.n	8002c7a <HAL_DMA_Abort+0x20e>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a1f      	ldr	r2, [pc, #124]	; (8002ccc <HAL_DMA_Abort+0x260>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d013      	beq.n	8002c7a <HAL_DMA_Abort+0x20e>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a1e      	ldr	r2, [pc, #120]	; (8002cd0 <HAL_DMA_Abort+0x264>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d00e      	beq.n	8002c7a <HAL_DMA_Abort+0x20e>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a1c      	ldr	r2, [pc, #112]	; (8002cd4 <HAL_DMA_Abort+0x268>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d009      	beq.n	8002c7a <HAL_DMA_Abort+0x20e>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a1b      	ldr	r2, [pc, #108]	; (8002cd8 <HAL_DMA_Abort+0x26c>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d004      	beq.n	8002c7a <HAL_DMA_Abort+0x20e>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a19      	ldr	r2, [pc, #100]	; (8002cdc <HAL_DMA_Abort+0x270>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d132      	bne.n	8002ce0 <HAL_DMA_Abort+0x274>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e031      	b.n	8002ce2 <HAL_DMA_Abort+0x276>
 8002c7e:	bf00      	nop
 8002c80:	40020010 	.word	0x40020010
 8002c84:	40020028 	.word	0x40020028
 8002c88:	40020040 	.word	0x40020040
 8002c8c:	40020058 	.word	0x40020058
 8002c90:	40020070 	.word	0x40020070
 8002c94:	40020088 	.word	0x40020088
 8002c98:	400200a0 	.word	0x400200a0
 8002c9c:	400200b8 	.word	0x400200b8
 8002ca0:	40020410 	.word	0x40020410
 8002ca4:	40020428 	.word	0x40020428
 8002ca8:	40020440 	.word	0x40020440
 8002cac:	40020458 	.word	0x40020458
 8002cb0:	40020470 	.word	0x40020470
 8002cb4:	40020488 	.word	0x40020488
 8002cb8:	400204a0 	.word	0x400204a0
 8002cbc:	400204b8 	.word	0x400204b8
 8002cc0:	58025408 	.word	0x58025408
 8002cc4:	5802541c 	.word	0x5802541c
 8002cc8:	58025430 	.word	0x58025430
 8002ccc:	58025444 	.word	0x58025444
 8002cd0:	58025458 	.word	0x58025458
 8002cd4:	5802546c 	.word	0x5802546c
 8002cd8:	58025480 	.word	0x58025480
 8002cdc:	58025494 	.word	0x58025494
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d007      	beq.n	8002cf6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cf4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a6d      	ldr	r2, [pc, #436]	; (8002eb0 <HAL_DMA_Abort+0x444>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d04a      	beq.n	8002d96 <HAL_DMA_Abort+0x32a>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a6b      	ldr	r2, [pc, #428]	; (8002eb4 <HAL_DMA_Abort+0x448>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d045      	beq.n	8002d96 <HAL_DMA_Abort+0x32a>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a6a      	ldr	r2, [pc, #424]	; (8002eb8 <HAL_DMA_Abort+0x44c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d040      	beq.n	8002d96 <HAL_DMA_Abort+0x32a>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a68      	ldr	r2, [pc, #416]	; (8002ebc <HAL_DMA_Abort+0x450>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d03b      	beq.n	8002d96 <HAL_DMA_Abort+0x32a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a67      	ldr	r2, [pc, #412]	; (8002ec0 <HAL_DMA_Abort+0x454>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d036      	beq.n	8002d96 <HAL_DMA_Abort+0x32a>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a65      	ldr	r2, [pc, #404]	; (8002ec4 <HAL_DMA_Abort+0x458>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d031      	beq.n	8002d96 <HAL_DMA_Abort+0x32a>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a64      	ldr	r2, [pc, #400]	; (8002ec8 <HAL_DMA_Abort+0x45c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d02c      	beq.n	8002d96 <HAL_DMA_Abort+0x32a>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a62      	ldr	r2, [pc, #392]	; (8002ecc <HAL_DMA_Abort+0x460>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d027      	beq.n	8002d96 <HAL_DMA_Abort+0x32a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a61      	ldr	r2, [pc, #388]	; (8002ed0 <HAL_DMA_Abort+0x464>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d022      	beq.n	8002d96 <HAL_DMA_Abort+0x32a>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a5f      	ldr	r2, [pc, #380]	; (8002ed4 <HAL_DMA_Abort+0x468>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d01d      	beq.n	8002d96 <HAL_DMA_Abort+0x32a>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a5e      	ldr	r2, [pc, #376]	; (8002ed8 <HAL_DMA_Abort+0x46c>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d018      	beq.n	8002d96 <HAL_DMA_Abort+0x32a>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a5c      	ldr	r2, [pc, #368]	; (8002edc <HAL_DMA_Abort+0x470>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d013      	beq.n	8002d96 <HAL_DMA_Abort+0x32a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a5b      	ldr	r2, [pc, #364]	; (8002ee0 <HAL_DMA_Abort+0x474>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d00e      	beq.n	8002d96 <HAL_DMA_Abort+0x32a>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a59      	ldr	r2, [pc, #356]	; (8002ee4 <HAL_DMA_Abort+0x478>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d009      	beq.n	8002d96 <HAL_DMA_Abort+0x32a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a58      	ldr	r2, [pc, #352]	; (8002ee8 <HAL_DMA_Abort+0x47c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d004      	beq.n	8002d96 <HAL_DMA_Abort+0x32a>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a56      	ldr	r2, [pc, #344]	; (8002eec <HAL_DMA_Abort+0x480>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d108      	bne.n	8002da8 <HAL_DMA_Abort+0x33c>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 0201 	bic.w	r2, r2, #1
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	e007      	b.n	8002db8 <HAL_DMA_Abort+0x34c>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0201 	bic.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002db8:	e013      	b.n	8002de2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dba:	f7ff f9af 	bl	800211c <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b05      	cmp	r3, #5
 8002dc6:	d90c      	bls.n	8002de2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2203      	movs	r2, #3
 8002dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e12d      	b.n	800303e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1e5      	bne.n	8002dba <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a2f      	ldr	r2, [pc, #188]	; (8002eb0 <HAL_DMA_Abort+0x444>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d04a      	beq.n	8002e8e <HAL_DMA_Abort+0x422>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a2d      	ldr	r2, [pc, #180]	; (8002eb4 <HAL_DMA_Abort+0x448>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d045      	beq.n	8002e8e <HAL_DMA_Abort+0x422>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a2c      	ldr	r2, [pc, #176]	; (8002eb8 <HAL_DMA_Abort+0x44c>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d040      	beq.n	8002e8e <HAL_DMA_Abort+0x422>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a2a      	ldr	r2, [pc, #168]	; (8002ebc <HAL_DMA_Abort+0x450>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d03b      	beq.n	8002e8e <HAL_DMA_Abort+0x422>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a29      	ldr	r2, [pc, #164]	; (8002ec0 <HAL_DMA_Abort+0x454>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d036      	beq.n	8002e8e <HAL_DMA_Abort+0x422>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a27      	ldr	r2, [pc, #156]	; (8002ec4 <HAL_DMA_Abort+0x458>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d031      	beq.n	8002e8e <HAL_DMA_Abort+0x422>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a26      	ldr	r2, [pc, #152]	; (8002ec8 <HAL_DMA_Abort+0x45c>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d02c      	beq.n	8002e8e <HAL_DMA_Abort+0x422>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a24      	ldr	r2, [pc, #144]	; (8002ecc <HAL_DMA_Abort+0x460>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d027      	beq.n	8002e8e <HAL_DMA_Abort+0x422>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a23      	ldr	r2, [pc, #140]	; (8002ed0 <HAL_DMA_Abort+0x464>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d022      	beq.n	8002e8e <HAL_DMA_Abort+0x422>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a21      	ldr	r2, [pc, #132]	; (8002ed4 <HAL_DMA_Abort+0x468>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d01d      	beq.n	8002e8e <HAL_DMA_Abort+0x422>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a20      	ldr	r2, [pc, #128]	; (8002ed8 <HAL_DMA_Abort+0x46c>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d018      	beq.n	8002e8e <HAL_DMA_Abort+0x422>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a1e      	ldr	r2, [pc, #120]	; (8002edc <HAL_DMA_Abort+0x470>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d013      	beq.n	8002e8e <HAL_DMA_Abort+0x422>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a1d      	ldr	r2, [pc, #116]	; (8002ee0 <HAL_DMA_Abort+0x474>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d00e      	beq.n	8002e8e <HAL_DMA_Abort+0x422>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a1b      	ldr	r2, [pc, #108]	; (8002ee4 <HAL_DMA_Abort+0x478>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d009      	beq.n	8002e8e <HAL_DMA_Abort+0x422>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a1a      	ldr	r2, [pc, #104]	; (8002ee8 <HAL_DMA_Abort+0x47c>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d004      	beq.n	8002e8e <HAL_DMA_Abort+0x422>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a18      	ldr	r2, [pc, #96]	; (8002eec <HAL_DMA_Abort+0x480>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d101      	bne.n	8002e92 <HAL_DMA_Abort+0x426>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e000      	b.n	8002e94 <HAL_DMA_Abort+0x428>
 8002e92:	2300      	movs	r3, #0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d02b      	beq.n	8002ef0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea2:	f003 031f 	and.w	r3, r3, #31
 8002ea6:	223f      	movs	r2, #63	; 0x3f
 8002ea8:	409a      	lsls	r2, r3
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	609a      	str	r2, [r3, #8]
 8002eae:	e02a      	b.n	8002f06 <HAL_DMA_Abort+0x49a>
 8002eb0:	40020010 	.word	0x40020010
 8002eb4:	40020028 	.word	0x40020028
 8002eb8:	40020040 	.word	0x40020040
 8002ebc:	40020058 	.word	0x40020058
 8002ec0:	40020070 	.word	0x40020070
 8002ec4:	40020088 	.word	0x40020088
 8002ec8:	400200a0 	.word	0x400200a0
 8002ecc:	400200b8 	.word	0x400200b8
 8002ed0:	40020410 	.word	0x40020410
 8002ed4:	40020428 	.word	0x40020428
 8002ed8:	40020440 	.word	0x40020440
 8002edc:	40020458 	.word	0x40020458
 8002ee0:	40020470 	.word	0x40020470
 8002ee4:	40020488 	.word	0x40020488
 8002ee8:	400204a0 	.word	0x400204a0
 8002eec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efa:	f003 031f 	and.w	r3, r3, #31
 8002efe:	2201      	movs	r2, #1
 8002f00:	409a      	lsls	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a4f      	ldr	r2, [pc, #316]	; (8003048 <HAL_DMA_Abort+0x5dc>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d072      	beq.n	8002ff6 <HAL_DMA_Abort+0x58a>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a4d      	ldr	r2, [pc, #308]	; (800304c <HAL_DMA_Abort+0x5e0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d06d      	beq.n	8002ff6 <HAL_DMA_Abort+0x58a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a4c      	ldr	r2, [pc, #304]	; (8003050 <HAL_DMA_Abort+0x5e4>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d068      	beq.n	8002ff6 <HAL_DMA_Abort+0x58a>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a4a      	ldr	r2, [pc, #296]	; (8003054 <HAL_DMA_Abort+0x5e8>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d063      	beq.n	8002ff6 <HAL_DMA_Abort+0x58a>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a49      	ldr	r2, [pc, #292]	; (8003058 <HAL_DMA_Abort+0x5ec>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d05e      	beq.n	8002ff6 <HAL_DMA_Abort+0x58a>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a47      	ldr	r2, [pc, #284]	; (800305c <HAL_DMA_Abort+0x5f0>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d059      	beq.n	8002ff6 <HAL_DMA_Abort+0x58a>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a46      	ldr	r2, [pc, #280]	; (8003060 <HAL_DMA_Abort+0x5f4>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d054      	beq.n	8002ff6 <HAL_DMA_Abort+0x58a>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a44      	ldr	r2, [pc, #272]	; (8003064 <HAL_DMA_Abort+0x5f8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d04f      	beq.n	8002ff6 <HAL_DMA_Abort+0x58a>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a43      	ldr	r2, [pc, #268]	; (8003068 <HAL_DMA_Abort+0x5fc>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d04a      	beq.n	8002ff6 <HAL_DMA_Abort+0x58a>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a41      	ldr	r2, [pc, #260]	; (800306c <HAL_DMA_Abort+0x600>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d045      	beq.n	8002ff6 <HAL_DMA_Abort+0x58a>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a40      	ldr	r2, [pc, #256]	; (8003070 <HAL_DMA_Abort+0x604>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d040      	beq.n	8002ff6 <HAL_DMA_Abort+0x58a>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a3e      	ldr	r2, [pc, #248]	; (8003074 <HAL_DMA_Abort+0x608>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d03b      	beq.n	8002ff6 <HAL_DMA_Abort+0x58a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a3d      	ldr	r2, [pc, #244]	; (8003078 <HAL_DMA_Abort+0x60c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d036      	beq.n	8002ff6 <HAL_DMA_Abort+0x58a>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a3b      	ldr	r2, [pc, #236]	; (800307c <HAL_DMA_Abort+0x610>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d031      	beq.n	8002ff6 <HAL_DMA_Abort+0x58a>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a3a      	ldr	r2, [pc, #232]	; (8003080 <HAL_DMA_Abort+0x614>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d02c      	beq.n	8002ff6 <HAL_DMA_Abort+0x58a>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a38      	ldr	r2, [pc, #224]	; (8003084 <HAL_DMA_Abort+0x618>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d027      	beq.n	8002ff6 <HAL_DMA_Abort+0x58a>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a37      	ldr	r2, [pc, #220]	; (8003088 <HAL_DMA_Abort+0x61c>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d022      	beq.n	8002ff6 <HAL_DMA_Abort+0x58a>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a35      	ldr	r2, [pc, #212]	; (800308c <HAL_DMA_Abort+0x620>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d01d      	beq.n	8002ff6 <HAL_DMA_Abort+0x58a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a34      	ldr	r2, [pc, #208]	; (8003090 <HAL_DMA_Abort+0x624>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d018      	beq.n	8002ff6 <HAL_DMA_Abort+0x58a>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a32      	ldr	r2, [pc, #200]	; (8003094 <HAL_DMA_Abort+0x628>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d013      	beq.n	8002ff6 <HAL_DMA_Abort+0x58a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a31      	ldr	r2, [pc, #196]	; (8003098 <HAL_DMA_Abort+0x62c>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d00e      	beq.n	8002ff6 <HAL_DMA_Abort+0x58a>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a2f      	ldr	r2, [pc, #188]	; (800309c <HAL_DMA_Abort+0x630>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d009      	beq.n	8002ff6 <HAL_DMA_Abort+0x58a>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a2e      	ldr	r2, [pc, #184]	; (80030a0 <HAL_DMA_Abort+0x634>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d004      	beq.n	8002ff6 <HAL_DMA_Abort+0x58a>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a2c      	ldr	r2, [pc, #176]	; (80030a4 <HAL_DMA_Abort+0x638>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d101      	bne.n	8002ffa <HAL_DMA_Abort+0x58e>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <HAL_DMA_Abort+0x590>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d015      	beq.n	800302c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003008:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00c      	beq.n	800302c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800301c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003020:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800302a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40020010 	.word	0x40020010
 800304c:	40020028 	.word	0x40020028
 8003050:	40020040 	.word	0x40020040
 8003054:	40020058 	.word	0x40020058
 8003058:	40020070 	.word	0x40020070
 800305c:	40020088 	.word	0x40020088
 8003060:	400200a0 	.word	0x400200a0
 8003064:	400200b8 	.word	0x400200b8
 8003068:	40020410 	.word	0x40020410
 800306c:	40020428 	.word	0x40020428
 8003070:	40020440 	.word	0x40020440
 8003074:	40020458 	.word	0x40020458
 8003078:	40020470 	.word	0x40020470
 800307c:	40020488 	.word	0x40020488
 8003080:	400204a0 	.word	0x400204a0
 8003084:	400204b8 	.word	0x400204b8
 8003088:	58025408 	.word	0x58025408
 800308c:	5802541c 	.word	0x5802541c
 8003090:	58025430 	.word	0x58025430
 8003094:	58025444 	.word	0x58025444
 8003098:	58025458 	.word	0x58025458
 800309c:	5802546c 	.word	0x5802546c
 80030a0:	58025480 	.word	0x58025480
 80030a4:	58025494 	.word	0x58025494

080030a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e205      	b.n	80034c6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d004      	beq.n	80030d0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2280      	movs	r2, #128	; 0x80
 80030ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e1fa      	b.n	80034c6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a8c      	ldr	r2, [pc, #560]	; (8003308 <HAL_DMA_Abort_IT+0x260>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d04a      	beq.n	8003170 <HAL_DMA_Abort_IT+0xc8>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a8b      	ldr	r2, [pc, #556]	; (800330c <HAL_DMA_Abort_IT+0x264>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d045      	beq.n	8003170 <HAL_DMA_Abort_IT+0xc8>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a89      	ldr	r2, [pc, #548]	; (8003310 <HAL_DMA_Abort_IT+0x268>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d040      	beq.n	8003170 <HAL_DMA_Abort_IT+0xc8>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a88      	ldr	r2, [pc, #544]	; (8003314 <HAL_DMA_Abort_IT+0x26c>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d03b      	beq.n	8003170 <HAL_DMA_Abort_IT+0xc8>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a86      	ldr	r2, [pc, #536]	; (8003318 <HAL_DMA_Abort_IT+0x270>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d036      	beq.n	8003170 <HAL_DMA_Abort_IT+0xc8>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a85      	ldr	r2, [pc, #532]	; (800331c <HAL_DMA_Abort_IT+0x274>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d031      	beq.n	8003170 <HAL_DMA_Abort_IT+0xc8>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a83      	ldr	r2, [pc, #524]	; (8003320 <HAL_DMA_Abort_IT+0x278>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d02c      	beq.n	8003170 <HAL_DMA_Abort_IT+0xc8>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a82      	ldr	r2, [pc, #520]	; (8003324 <HAL_DMA_Abort_IT+0x27c>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d027      	beq.n	8003170 <HAL_DMA_Abort_IT+0xc8>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a80      	ldr	r2, [pc, #512]	; (8003328 <HAL_DMA_Abort_IT+0x280>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d022      	beq.n	8003170 <HAL_DMA_Abort_IT+0xc8>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a7f      	ldr	r2, [pc, #508]	; (800332c <HAL_DMA_Abort_IT+0x284>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d01d      	beq.n	8003170 <HAL_DMA_Abort_IT+0xc8>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a7d      	ldr	r2, [pc, #500]	; (8003330 <HAL_DMA_Abort_IT+0x288>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d018      	beq.n	8003170 <HAL_DMA_Abort_IT+0xc8>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a7c      	ldr	r2, [pc, #496]	; (8003334 <HAL_DMA_Abort_IT+0x28c>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d013      	beq.n	8003170 <HAL_DMA_Abort_IT+0xc8>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a7a      	ldr	r2, [pc, #488]	; (8003338 <HAL_DMA_Abort_IT+0x290>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d00e      	beq.n	8003170 <HAL_DMA_Abort_IT+0xc8>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a79      	ldr	r2, [pc, #484]	; (800333c <HAL_DMA_Abort_IT+0x294>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d009      	beq.n	8003170 <HAL_DMA_Abort_IT+0xc8>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a77      	ldr	r2, [pc, #476]	; (8003340 <HAL_DMA_Abort_IT+0x298>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d004      	beq.n	8003170 <HAL_DMA_Abort_IT+0xc8>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a76      	ldr	r2, [pc, #472]	; (8003344 <HAL_DMA_Abort_IT+0x29c>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d101      	bne.n	8003174 <HAL_DMA_Abort_IT+0xcc>
 8003170:	2301      	movs	r3, #1
 8003172:	e000      	b.n	8003176 <HAL_DMA_Abort_IT+0xce>
 8003174:	2300      	movs	r3, #0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d065      	beq.n	8003246 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2204      	movs	r2, #4
 800317e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a60      	ldr	r2, [pc, #384]	; (8003308 <HAL_DMA_Abort_IT+0x260>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d04a      	beq.n	8003222 <HAL_DMA_Abort_IT+0x17a>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a5e      	ldr	r2, [pc, #376]	; (800330c <HAL_DMA_Abort_IT+0x264>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d045      	beq.n	8003222 <HAL_DMA_Abort_IT+0x17a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a5d      	ldr	r2, [pc, #372]	; (8003310 <HAL_DMA_Abort_IT+0x268>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d040      	beq.n	8003222 <HAL_DMA_Abort_IT+0x17a>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a5b      	ldr	r2, [pc, #364]	; (8003314 <HAL_DMA_Abort_IT+0x26c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d03b      	beq.n	8003222 <HAL_DMA_Abort_IT+0x17a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a5a      	ldr	r2, [pc, #360]	; (8003318 <HAL_DMA_Abort_IT+0x270>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d036      	beq.n	8003222 <HAL_DMA_Abort_IT+0x17a>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a58      	ldr	r2, [pc, #352]	; (800331c <HAL_DMA_Abort_IT+0x274>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d031      	beq.n	8003222 <HAL_DMA_Abort_IT+0x17a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a57      	ldr	r2, [pc, #348]	; (8003320 <HAL_DMA_Abort_IT+0x278>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d02c      	beq.n	8003222 <HAL_DMA_Abort_IT+0x17a>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a55      	ldr	r2, [pc, #340]	; (8003324 <HAL_DMA_Abort_IT+0x27c>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d027      	beq.n	8003222 <HAL_DMA_Abort_IT+0x17a>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a54      	ldr	r2, [pc, #336]	; (8003328 <HAL_DMA_Abort_IT+0x280>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d022      	beq.n	8003222 <HAL_DMA_Abort_IT+0x17a>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a52      	ldr	r2, [pc, #328]	; (800332c <HAL_DMA_Abort_IT+0x284>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d01d      	beq.n	8003222 <HAL_DMA_Abort_IT+0x17a>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a51      	ldr	r2, [pc, #324]	; (8003330 <HAL_DMA_Abort_IT+0x288>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d018      	beq.n	8003222 <HAL_DMA_Abort_IT+0x17a>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a4f      	ldr	r2, [pc, #316]	; (8003334 <HAL_DMA_Abort_IT+0x28c>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d013      	beq.n	8003222 <HAL_DMA_Abort_IT+0x17a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a4e      	ldr	r2, [pc, #312]	; (8003338 <HAL_DMA_Abort_IT+0x290>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d00e      	beq.n	8003222 <HAL_DMA_Abort_IT+0x17a>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a4c      	ldr	r2, [pc, #304]	; (800333c <HAL_DMA_Abort_IT+0x294>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d009      	beq.n	8003222 <HAL_DMA_Abort_IT+0x17a>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a4b      	ldr	r2, [pc, #300]	; (8003340 <HAL_DMA_Abort_IT+0x298>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d004      	beq.n	8003222 <HAL_DMA_Abort_IT+0x17a>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a49      	ldr	r2, [pc, #292]	; (8003344 <HAL_DMA_Abort_IT+0x29c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d108      	bne.n	8003234 <HAL_DMA_Abort_IT+0x18c>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0201 	bic.w	r2, r2, #1
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	e147      	b.n	80034c4 <HAL_DMA_Abort_IT+0x41c>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0201 	bic.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	e13e      	b.n	80034c4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 020e 	bic.w	r2, r2, #14
 8003254:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a2b      	ldr	r2, [pc, #172]	; (8003308 <HAL_DMA_Abort_IT+0x260>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d04a      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x24e>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a29      	ldr	r2, [pc, #164]	; (800330c <HAL_DMA_Abort_IT+0x264>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d045      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x24e>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a28      	ldr	r2, [pc, #160]	; (8003310 <HAL_DMA_Abort_IT+0x268>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d040      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x24e>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a26      	ldr	r2, [pc, #152]	; (8003314 <HAL_DMA_Abort_IT+0x26c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d03b      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x24e>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a25      	ldr	r2, [pc, #148]	; (8003318 <HAL_DMA_Abort_IT+0x270>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d036      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x24e>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a23      	ldr	r2, [pc, #140]	; (800331c <HAL_DMA_Abort_IT+0x274>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d031      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x24e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a22      	ldr	r2, [pc, #136]	; (8003320 <HAL_DMA_Abort_IT+0x278>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d02c      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x24e>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a20      	ldr	r2, [pc, #128]	; (8003324 <HAL_DMA_Abort_IT+0x27c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d027      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x24e>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a1f      	ldr	r2, [pc, #124]	; (8003328 <HAL_DMA_Abort_IT+0x280>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d022      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x24e>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a1d      	ldr	r2, [pc, #116]	; (800332c <HAL_DMA_Abort_IT+0x284>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d01d      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x24e>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a1c      	ldr	r2, [pc, #112]	; (8003330 <HAL_DMA_Abort_IT+0x288>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d018      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x24e>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a1a      	ldr	r2, [pc, #104]	; (8003334 <HAL_DMA_Abort_IT+0x28c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d013      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x24e>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a19      	ldr	r2, [pc, #100]	; (8003338 <HAL_DMA_Abort_IT+0x290>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d00e      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x24e>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a17      	ldr	r2, [pc, #92]	; (800333c <HAL_DMA_Abort_IT+0x294>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d009      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x24e>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a16      	ldr	r2, [pc, #88]	; (8003340 <HAL_DMA_Abort_IT+0x298>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d004      	beq.n	80032f6 <HAL_DMA_Abort_IT+0x24e>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a14      	ldr	r2, [pc, #80]	; (8003344 <HAL_DMA_Abort_IT+0x29c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d128      	bne.n	8003348 <HAL_DMA_Abort_IT+0x2a0>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0201 	bic.w	r2, r2, #1
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	e027      	b.n	8003358 <HAL_DMA_Abort_IT+0x2b0>
 8003308:	40020010 	.word	0x40020010
 800330c:	40020028 	.word	0x40020028
 8003310:	40020040 	.word	0x40020040
 8003314:	40020058 	.word	0x40020058
 8003318:	40020070 	.word	0x40020070
 800331c:	40020088 	.word	0x40020088
 8003320:	400200a0 	.word	0x400200a0
 8003324:	400200b8 	.word	0x400200b8
 8003328:	40020410 	.word	0x40020410
 800332c:	40020428 	.word	0x40020428
 8003330:	40020440 	.word	0x40020440
 8003334:	40020458 	.word	0x40020458
 8003338:	40020470 	.word	0x40020470
 800333c:	40020488 	.word	0x40020488
 8003340:	400204a0 	.word	0x400204a0
 8003344:	400204b8 	.word	0x400204b8
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0201 	bic.w	r2, r2, #1
 8003356:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a5c      	ldr	r2, [pc, #368]	; (80034d0 <HAL_DMA_Abort_IT+0x428>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d072      	beq.n	8003448 <HAL_DMA_Abort_IT+0x3a0>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a5b      	ldr	r2, [pc, #364]	; (80034d4 <HAL_DMA_Abort_IT+0x42c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d06d      	beq.n	8003448 <HAL_DMA_Abort_IT+0x3a0>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a59      	ldr	r2, [pc, #356]	; (80034d8 <HAL_DMA_Abort_IT+0x430>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d068      	beq.n	8003448 <HAL_DMA_Abort_IT+0x3a0>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a58      	ldr	r2, [pc, #352]	; (80034dc <HAL_DMA_Abort_IT+0x434>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d063      	beq.n	8003448 <HAL_DMA_Abort_IT+0x3a0>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a56      	ldr	r2, [pc, #344]	; (80034e0 <HAL_DMA_Abort_IT+0x438>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d05e      	beq.n	8003448 <HAL_DMA_Abort_IT+0x3a0>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a55      	ldr	r2, [pc, #340]	; (80034e4 <HAL_DMA_Abort_IT+0x43c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d059      	beq.n	8003448 <HAL_DMA_Abort_IT+0x3a0>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a53      	ldr	r2, [pc, #332]	; (80034e8 <HAL_DMA_Abort_IT+0x440>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d054      	beq.n	8003448 <HAL_DMA_Abort_IT+0x3a0>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a52      	ldr	r2, [pc, #328]	; (80034ec <HAL_DMA_Abort_IT+0x444>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d04f      	beq.n	8003448 <HAL_DMA_Abort_IT+0x3a0>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a50      	ldr	r2, [pc, #320]	; (80034f0 <HAL_DMA_Abort_IT+0x448>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d04a      	beq.n	8003448 <HAL_DMA_Abort_IT+0x3a0>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a4f      	ldr	r2, [pc, #316]	; (80034f4 <HAL_DMA_Abort_IT+0x44c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d045      	beq.n	8003448 <HAL_DMA_Abort_IT+0x3a0>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a4d      	ldr	r2, [pc, #308]	; (80034f8 <HAL_DMA_Abort_IT+0x450>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d040      	beq.n	8003448 <HAL_DMA_Abort_IT+0x3a0>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a4c      	ldr	r2, [pc, #304]	; (80034fc <HAL_DMA_Abort_IT+0x454>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d03b      	beq.n	8003448 <HAL_DMA_Abort_IT+0x3a0>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a4a      	ldr	r2, [pc, #296]	; (8003500 <HAL_DMA_Abort_IT+0x458>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d036      	beq.n	8003448 <HAL_DMA_Abort_IT+0x3a0>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a49      	ldr	r2, [pc, #292]	; (8003504 <HAL_DMA_Abort_IT+0x45c>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d031      	beq.n	8003448 <HAL_DMA_Abort_IT+0x3a0>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a47      	ldr	r2, [pc, #284]	; (8003508 <HAL_DMA_Abort_IT+0x460>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d02c      	beq.n	8003448 <HAL_DMA_Abort_IT+0x3a0>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a46      	ldr	r2, [pc, #280]	; (800350c <HAL_DMA_Abort_IT+0x464>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d027      	beq.n	8003448 <HAL_DMA_Abort_IT+0x3a0>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a44      	ldr	r2, [pc, #272]	; (8003510 <HAL_DMA_Abort_IT+0x468>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d022      	beq.n	8003448 <HAL_DMA_Abort_IT+0x3a0>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a43      	ldr	r2, [pc, #268]	; (8003514 <HAL_DMA_Abort_IT+0x46c>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d01d      	beq.n	8003448 <HAL_DMA_Abort_IT+0x3a0>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a41      	ldr	r2, [pc, #260]	; (8003518 <HAL_DMA_Abort_IT+0x470>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d018      	beq.n	8003448 <HAL_DMA_Abort_IT+0x3a0>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a40      	ldr	r2, [pc, #256]	; (800351c <HAL_DMA_Abort_IT+0x474>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d013      	beq.n	8003448 <HAL_DMA_Abort_IT+0x3a0>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a3e      	ldr	r2, [pc, #248]	; (8003520 <HAL_DMA_Abort_IT+0x478>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d00e      	beq.n	8003448 <HAL_DMA_Abort_IT+0x3a0>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a3d      	ldr	r2, [pc, #244]	; (8003524 <HAL_DMA_Abort_IT+0x47c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d009      	beq.n	8003448 <HAL_DMA_Abort_IT+0x3a0>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a3b      	ldr	r2, [pc, #236]	; (8003528 <HAL_DMA_Abort_IT+0x480>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d004      	beq.n	8003448 <HAL_DMA_Abort_IT+0x3a0>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a3a      	ldr	r2, [pc, #232]	; (800352c <HAL_DMA_Abort_IT+0x484>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d101      	bne.n	800344c <HAL_DMA_Abort_IT+0x3a4>
 8003448:	2301      	movs	r3, #1
 800344a:	e000      	b.n	800344e <HAL_DMA_Abort_IT+0x3a6>
 800344c:	2300      	movs	r3, #0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d028      	beq.n	80034a4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800345c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003460:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003466:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346c:	f003 031f 	and.w	r3, r3, #31
 8003470:	2201      	movs	r2, #1
 8003472:	409a      	lsls	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003480:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00c      	beq.n	80034a4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003494:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003498:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80034a2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40020010 	.word	0x40020010
 80034d4:	40020028 	.word	0x40020028
 80034d8:	40020040 	.word	0x40020040
 80034dc:	40020058 	.word	0x40020058
 80034e0:	40020070 	.word	0x40020070
 80034e4:	40020088 	.word	0x40020088
 80034e8:	400200a0 	.word	0x400200a0
 80034ec:	400200b8 	.word	0x400200b8
 80034f0:	40020410 	.word	0x40020410
 80034f4:	40020428 	.word	0x40020428
 80034f8:	40020440 	.word	0x40020440
 80034fc:	40020458 	.word	0x40020458
 8003500:	40020470 	.word	0x40020470
 8003504:	40020488 	.word	0x40020488
 8003508:	400204a0 	.word	0x400204a0
 800350c:	400204b8 	.word	0x400204b8
 8003510:	58025408 	.word	0x58025408
 8003514:	5802541c 	.word	0x5802541c
 8003518:	58025430 	.word	0x58025430
 800351c:	58025444 	.word	0x58025444
 8003520:	58025458 	.word	0x58025458
 8003524:	5802546c 	.word	0x5802546c
 8003528:	58025480 	.word	0x58025480
 800352c:	58025494 	.word	0x58025494

08003530 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b08a      	sub	sp, #40	; 0x28
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800353c:	4b67      	ldr	r3, [pc, #412]	; (80036dc <HAL_DMA_IRQHandler+0x1ac>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a67      	ldr	r2, [pc, #412]	; (80036e0 <HAL_DMA_IRQHandler+0x1b0>)
 8003542:	fba2 2303 	umull	r2, r3, r2, r3
 8003546:	0a9b      	lsrs	r3, r3, #10
 8003548:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800354e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003554:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a5f      	ldr	r2, [pc, #380]	; (80036e4 <HAL_DMA_IRQHandler+0x1b4>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d04a      	beq.n	8003602 <HAL_DMA_IRQHandler+0xd2>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a5d      	ldr	r2, [pc, #372]	; (80036e8 <HAL_DMA_IRQHandler+0x1b8>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d045      	beq.n	8003602 <HAL_DMA_IRQHandler+0xd2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a5c      	ldr	r2, [pc, #368]	; (80036ec <HAL_DMA_IRQHandler+0x1bc>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d040      	beq.n	8003602 <HAL_DMA_IRQHandler+0xd2>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a5a      	ldr	r2, [pc, #360]	; (80036f0 <HAL_DMA_IRQHandler+0x1c0>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d03b      	beq.n	8003602 <HAL_DMA_IRQHandler+0xd2>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a59      	ldr	r2, [pc, #356]	; (80036f4 <HAL_DMA_IRQHandler+0x1c4>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d036      	beq.n	8003602 <HAL_DMA_IRQHandler+0xd2>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a57      	ldr	r2, [pc, #348]	; (80036f8 <HAL_DMA_IRQHandler+0x1c8>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d031      	beq.n	8003602 <HAL_DMA_IRQHandler+0xd2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a56      	ldr	r2, [pc, #344]	; (80036fc <HAL_DMA_IRQHandler+0x1cc>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d02c      	beq.n	8003602 <HAL_DMA_IRQHandler+0xd2>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a54      	ldr	r2, [pc, #336]	; (8003700 <HAL_DMA_IRQHandler+0x1d0>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d027      	beq.n	8003602 <HAL_DMA_IRQHandler+0xd2>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a53      	ldr	r2, [pc, #332]	; (8003704 <HAL_DMA_IRQHandler+0x1d4>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d022      	beq.n	8003602 <HAL_DMA_IRQHandler+0xd2>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a51      	ldr	r2, [pc, #324]	; (8003708 <HAL_DMA_IRQHandler+0x1d8>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d01d      	beq.n	8003602 <HAL_DMA_IRQHandler+0xd2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a50      	ldr	r2, [pc, #320]	; (800370c <HAL_DMA_IRQHandler+0x1dc>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d018      	beq.n	8003602 <HAL_DMA_IRQHandler+0xd2>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a4e      	ldr	r2, [pc, #312]	; (8003710 <HAL_DMA_IRQHandler+0x1e0>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d013      	beq.n	8003602 <HAL_DMA_IRQHandler+0xd2>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a4d      	ldr	r2, [pc, #308]	; (8003714 <HAL_DMA_IRQHandler+0x1e4>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d00e      	beq.n	8003602 <HAL_DMA_IRQHandler+0xd2>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a4b      	ldr	r2, [pc, #300]	; (8003718 <HAL_DMA_IRQHandler+0x1e8>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d009      	beq.n	8003602 <HAL_DMA_IRQHandler+0xd2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a4a      	ldr	r2, [pc, #296]	; (800371c <HAL_DMA_IRQHandler+0x1ec>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d004      	beq.n	8003602 <HAL_DMA_IRQHandler+0xd2>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a48      	ldr	r2, [pc, #288]	; (8003720 <HAL_DMA_IRQHandler+0x1f0>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d101      	bne.n	8003606 <HAL_DMA_IRQHandler+0xd6>
 8003602:	2301      	movs	r3, #1
 8003604:	e000      	b.n	8003608 <HAL_DMA_IRQHandler+0xd8>
 8003606:	2300      	movs	r3, #0
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 842b 	beq.w	8003e64 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003612:	f003 031f 	and.w	r3, r3, #31
 8003616:	2208      	movs	r2, #8
 8003618:	409a      	lsls	r2, r3
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	4013      	ands	r3, r2
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 80a2 	beq.w	8003768 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a2e      	ldr	r2, [pc, #184]	; (80036e4 <HAL_DMA_IRQHandler+0x1b4>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d04a      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x194>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a2d      	ldr	r2, [pc, #180]	; (80036e8 <HAL_DMA_IRQHandler+0x1b8>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d045      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x194>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a2b      	ldr	r2, [pc, #172]	; (80036ec <HAL_DMA_IRQHandler+0x1bc>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d040      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x194>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a2a      	ldr	r2, [pc, #168]	; (80036f0 <HAL_DMA_IRQHandler+0x1c0>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d03b      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x194>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a28      	ldr	r2, [pc, #160]	; (80036f4 <HAL_DMA_IRQHandler+0x1c4>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d036      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x194>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a27      	ldr	r2, [pc, #156]	; (80036f8 <HAL_DMA_IRQHandler+0x1c8>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d031      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x194>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a25      	ldr	r2, [pc, #148]	; (80036fc <HAL_DMA_IRQHandler+0x1cc>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d02c      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x194>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a24      	ldr	r2, [pc, #144]	; (8003700 <HAL_DMA_IRQHandler+0x1d0>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d027      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x194>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a22      	ldr	r2, [pc, #136]	; (8003704 <HAL_DMA_IRQHandler+0x1d4>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d022      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x194>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a21      	ldr	r2, [pc, #132]	; (8003708 <HAL_DMA_IRQHandler+0x1d8>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d01d      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x194>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a1f      	ldr	r2, [pc, #124]	; (800370c <HAL_DMA_IRQHandler+0x1dc>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d018      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x194>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a1e      	ldr	r2, [pc, #120]	; (8003710 <HAL_DMA_IRQHandler+0x1e0>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d013      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x194>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a1c      	ldr	r2, [pc, #112]	; (8003714 <HAL_DMA_IRQHandler+0x1e4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d00e      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x194>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a1b      	ldr	r2, [pc, #108]	; (8003718 <HAL_DMA_IRQHandler+0x1e8>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d009      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x194>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a19      	ldr	r2, [pc, #100]	; (800371c <HAL_DMA_IRQHandler+0x1ec>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d004      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x194>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a18      	ldr	r2, [pc, #96]	; (8003720 <HAL_DMA_IRQHandler+0x1f0>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d12f      	bne.n	8003724 <HAL_DMA_IRQHandler+0x1f4>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0304 	and.w	r3, r3, #4
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	bf14      	ite	ne
 80036d2:	2301      	movne	r3, #1
 80036d4:	2300      	moveq	r3, #0
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	e02e      	b.n	8003738 <HAL_DMA_IRQHandler+0x208>
 80036da:	bf00      	nop
 80036dc:	20000000 	.word	0x20000000
 80036e0:	1b4e81b5 	.word	0x1b4e81b5
 80036e4:	40020010 	.word	0x40020010
 80036e8:	40020028 	.word	0x40020028
 80036ec:	40020040 	.word	0x40020040
 80036f0:	40020058 	.word	0x40020058
 80036f4:	40020070 	.word	0x40020070
 80036f8:	40020088 	.word	0x40020088
 80036fc:	400200a0 	.word	0x400200a0
 8003700:	400200b8 	.word	0x400200b8
 8003704:	40020410 	.word	0x40020410
 8003708:	40020428 	.word	0x40020428
 800370c:	40020440 	.word	0x40020440
 8003710:	40020458 	.word	0x40020458
 8003714:	40020470 	.word	0x40020470
 8003718:	40020488 	.word	0x40020488
 800371c:	400204a0 	.word	0x400204a0
 8003720:	400204b8 	.word	0x400204b8
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	2b00      	cmp	r3, #0
 8003730:	bf14      	ite	ne
 8003732:	2301      	movne	r3, #1
 8003734:	2300      	moveq	r3, #0
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d015      	beq.n	8003768 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0204 	bic.w	r2, r2, #4
 800374a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003750:	f003 031f 	and.w	r3, r3, #31
 8003754:	2208      	movs	r2, #8
 8003756:	409a      	lsls	r2, r3
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003760:	f043 0201 	orr.w	r2, r3, #1
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376c:	f003 031f 	and.w	r3, r3, #31
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	fa22 f303 	lsr.w	r3, r2, r3
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d06e      	beq.n	800385c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a69      	ldr	r2, [pc, #420]	; (8003928 <HAL_DMA_IRQHandler+0x3f8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d04a      	beq.n	800381e <HAL_DMA_IRQHandler+0x2ee>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a67      	ldr	r2, [pc, #412]	; (800392c <HAL_DMA_IRQHandler+0x3fc>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d045      	beq.n	800381e <HAL_DMA_IRQHandler+0x2ee>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a66      	ldr	r2, [pc, #408]	; (8003930 <HAL_DMA_IRQHandler+0x400>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d040      	beq.n	800381e <HAL_DMA_IRQHandler+0x2ee>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a64      	ldr	r2, [pc, #400]	; (8003934 <HAL_DMA_IRQHandler+0x404>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d03b      	beq.n	800381e <HAL_DMA_IRQHandler+0x2ee>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a63      	ldr	r2, [pc, #396]	; (8003938 <HAL_DMA_IRQHandler+0x408>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d036      	beq.n	800381e <HAL_DMA_IRQHandler+0x2ee>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a61      	ldr	r2, [pc, #388]	; (800393c <HAL_DMA_IRQHandler+0x40c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d031      	beq.n	800381e <HAL_DMA_IRQHandler+0x2ee>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a60      	ldr	r2, [pc, #384]	; (8003940 <HAL_DMA_IRQHandler+0x410>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d02c      	beq.n	800381e <HAL_DMA_IRQHandler+0x2ee>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a5e      	ldr	r2, [pc, #376]	; (8003944 <HAL_DMA_IRQHandler+0x414>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d027      	beq.n	800381e <HAL_DMA_IRQHandler+0x2ee>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a5d      	ldr	r2, [pc, #372]	; (8003948 <HAL_DMA_IRQHandler+0x418>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d022      	beq.n	800381e <HAL_DMA_IRQHandler+0x2ee>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a5b      	ldr	r2, [pc, #364]	; (800394c <HAL_DMA_IRQHandler+0x41c>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d01d      	beq.n	800381e <HAL_DMA_IRQHandler+0x2ee>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a5a      	ldr	r2, [pc, #360]	; (8003950 <HAL_DMA_IRQHandler+0x420>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d018      	beq.n	800381e <HAL_DMA_IRQHandler+0x2ee>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a58      	ldr	r2, [pc, #352]	; (8003954 <HAL_DMA_IRQHandler+0x424>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d013      	beq.n	800381e <HAL_DMA_IRQHandler+0x2ee>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a57      	ldr	r2, [pc, #348]	; (8003958 <HAL_DMA_IRQHandler+0x428>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d00e      	beq.n	800381e <HAL_DMA_IRQHandler+0x2ee>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a55      	ldr	r2, [pc, #340]	; (800395c <HAL_DMA_IRQHandler+0x42c>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d009      	beq.n	800381e <HAL_DMA_IRQHandler+0x2ee>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a54      	ldr	r2, [pc, #336]	; (8003960 <HAL_DMA_IRQHandler+0x430>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d004      	beq.n	800381e <HAL_DMA_IRQHandler+0x2ee>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a52      	ldr	r2, [pc, #328]	; (8003964 <HAL_DMA_IRQHandler+0x434>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d10a      	bne.n	8003834 <HAL_DMA_IRQHandler+0x304>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003828:	2b00      	cmp	r3, #0
 800382a:	bf14      	ite	ne
 800382c:	2301      	movne	r3, #1
 800382e:	2300      	moveq	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	e003      	b.n	800383c <HAL_DMA_IRQHandler+0x30c>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2300      	movs	r3, #0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00d      	beq.n	800385c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003844:	f003 031f 	and.w	r3, r3, #31
 8003848:	2201      	movs	r2, #1
 800384a:	409a      	lsls	r2, r3
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003854:	f043 0202 	orr.w	r2, r3, #2
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003860:	f003 031f 	and.w	r3, r3, #31
 8003864:	2204      	movs	r2, #4
 8003866:	409a      	lsls	r2, r3
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	4013      	ands	r3, r2
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 808f 	beq.w	8003990 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a2c      	ldr	r2, [pc, #176]	; (8003928 <HAL_DMA_IRQHandler+0x3f8>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d04a      	beq.n	8003912 <HAL_DMA_IRQHandler+0x3e2>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a2a      	ldr	r2, [pc, #168]	; (800392c <HAL_DMA_IRQHandler+0x3fc>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d045      	beq.n	8003912 <HAL_DMA_IRQHandler+0x3e2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a29      	ldr	r2, [pc, #164]	; (8003930 <HAL_DMA_IRQHandler+0x400>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d040      	beq.n	8003912 <HAL_DMA_IRQHandler+0x3e2>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a27      	ldr	r2, [pc, #156]	; (8003934 <HAL_DMA_IRQHandler+0x404>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d03b      	beq.n	8003912 <HAL_DMA_IRQHandler+0x3e2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a26      	ldr	r2, [pc, #152]	; (8003938 <HAL_DMA_IRQHandler+0x408>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d036      	beq.n	8003912 <HAL_DMA_IRQHandler+0x3e2>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a24      	ldr	r2, [pc, #144]	; (800393c <HAL_DMA_IRQHandler+0x40c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d031      	beq.n	8003912 <HAL_DMA_IRQHandler+0x3e2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a23      	ldr	r2, [pc, #140]	; (8003940 <HAL_DMA_IRQHandler+0x410>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d02c      	beq.n	8003912 <HAL_DMA_IRQHandler+0x3e2>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a21      	ldr	r2, [pc, #132]	; (8003944 <HAL_DMA_IRQHandler+0x414>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d027      	beq.n	8003912 <HAL_DMA_IRQHandler+0x3e2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a20      	ldr	r2, [pc, #128]	; (8003948 <HAL_DMA_IRQHandler+0x418>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d022      	beq.n	8003912 <HAL_DMA_IRQHandler+0x3e2>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a1e      	ldr	r2, [pc, #120]	; (800394c <HAL_DMA_IRQHandler+0x41c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d01d      	beq.n	8003912 <HAL_DMA_IRQHandler+0x3e2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a1d      	ldr	r2, [pc, #116]	; (8003950 <HAL_DMA_IRQHandler+0x420>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d018      	beq.n	8003912 <HAL_DMA_IRQHandler+0x3e2>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a1b      	ldr	r2, [pc, #108]	; (8003954 <HAL_DMA_IRQHandler+0x424>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d013      	beq.n	8003912 <HAL_DMA_IRQHandler+0x3e2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a1a      	ldr	r2, [pc, #104]	; (8003958 <HAL_DMA_IRQHandler+0x428>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d00e      	beq.n	8003912 <HAL_DMA_IRQHandler+0x3e2>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a18      	ldr	r2, [pc, #96]	; (800395c <HAL_DMA_IRQHandler+0x42c>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d009      	beq.n	8003912 <HAL_DMA_IRQHandler+0x3e2>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a17      	ldr	r2, [pc, #92]	; (8003960 <HAL_DMA_IRQHandler+0x430>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d004      	beq.n	8003912 <HAL_DMA_IRQHandler+0x3e2>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a15      	ldr	r2, [pc, #84]	; (8003964 <HAL_DMA_IRQHandler+0x434>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d12a      	bne.n	8003968 <HAL_DMA_IRQHandler+0x438>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	bf14      	ite	ne
 8003920:	2301      	movne	r3, #1
 8003922:	2300      	moveq	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	e023      	b.n	8003970 <HAL_DMA_IRQHandler+0x440>
 8003928:	40020010 	.word	0x40020010
 800392c:	40020028 	.word	0x40020028
 8003930:	40020040 	.word	0x40020040
 8003934:	40020058 	.word	0x40020058
 8003938:	40020070 	.word	0x40020070
 800393c:	40020088 	.word	0x40020088
 8003940:	400200a0 	.word	0x400200a0
 8003944:	400200b8 	.word	0x400200b8
 8003948:	40020410 	.word	0x40020410
 800394c:	40020428 	.word	0x40020428
 8003950:	40020440 	.word	0x40020440
 8003954:	40020458 	.word	0x40020458
 8003958:	40020470 	.word	0x40020470
 800395c:	40020488 	.word	0x40020488
 8003960:	400204a0 	.word	0x400204a0
 8003964:	400204b8 	.word	0x400204b8
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2300      	movs	r3, #0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00d      	beq.n	8003990 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003978:	f003 031f 	and.w	r3, r3, #31
 800397c:	2204      	movs	r2, #4
 800397e:	409a      	lsls	r2, r3
 8003980:	6a3b      	ldr	r3, [r7, #32]
 8003982:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003988:	f043 0204 	orr.w	r2, r3, #4
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003994:	f003 031f 	and.w	r3, r3, #31
 8003998:	2210      	movs	r2, #16
 800399a:	409a      	lsls	r2, r3
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	4013      	ands	r3, r2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 80a6 	beq.w	8003af2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a85      	ldr	r2, [pc, #532]	; (8003bc0 <HAL_DMA_IRQHandler+0x690>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d04a      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x516>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a83      	ldr	r2, [pc, #524]	; (8003bc4 <HAL_DMA_IRQHandler+0x694>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d045      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x516>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a82      	ldr	r2, [pc, #520]	; (8003bc8 <HAL_DMA_IRQHandler+0x698>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d040      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x516>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a80      	ldr	r2, [pc, #512]	; (8003bcc <HAL_DMA_IRQHandler+0x69c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d03b      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x516>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a7f      	ldr	r2, [pc, #508]	; (8003bd0 <HAL_DMA_IRQHandler+0x6a0>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d036      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x516>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a7d      	ldr	r2, [pc, #500]	; (8003bd4 <HAL_DMA_IRQHandler+0x6a4>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d031      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x516>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a7c      	ldr	r2, [pc, #496]	; (8003bd8 <HAL_DMA_IRQHandler+0x6a8>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d02c      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x516>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a7a      	ldr	r2, [pc, #488]	; (8003bdc <HAL_DMA_IRQHandler+0x6ac>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d027      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x516>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a79      	ldr	r2, [pc, #484]	; (8003be0 <HAL_DMA_IRQHandler+0x6b0>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d022      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x516>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a77      	ldr	r2, [pc, #476]	; (8003be4 <HAL_DMA_IRQHandler+0x6b4>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d01d      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x516>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a76      	ldr	r2, [pc, #472]	; (8003be8 <HAL_DMA_IRQHandler+0x6b8>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d018      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x516>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a74      	ldr	r2, [pc, #464]	; (8003bec <HAL_DMA_IRQHandler+0x6bc>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d013      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x516>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a73      	ldr	r2, [pc, #460]	; (8003bf0 <HAL_DMA_IRQHandler+0x6c0>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d00e      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x516>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a71      	ldr	r2, [pc, #452]	; (8003bf4 <HAL_DMA_IRQHandler+0x6c4>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d009      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x516>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a70      	ldr	r2, [pc, #448]	; (8003bf8 <HAL_DMA_IRQHandler+0x6c8>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d004      	beq.n	8003a46 <HAL_DMA_IRQHandler+0x516>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a6e      	ldr	r2, [pc, #440]	; (8003bfc <HAL_DMA_IRQHandler+0x6cc>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d10a      	bne.n	8003a5c <HAL_DMA_IRQHandler+0x52c>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0308 	and.w	r3, r3, #8
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	bf14      	ite	ne
 8003a54:	2301      	movne	r3, #1
 8003a56:	2300      	moveq	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	e009      	b.n	8003a70 <HAL_DMA_IRQHandler+0x540>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	bf14      	ite	ne
 8003a6a:	2301      	movne	r3, #1
 8003a6c:	2300      	moveq	r3, #0
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d03e      	beq.n	8003af2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a78:	f003 031f 	and.w	r3, r3, #31
 8003a7c:	2210      	movs	r2, #16
 8003a7e:	409a      	lsls	r2, r3
 8003a80:	6a3b      	ldr	r3, [r7, #32]
 8003a82:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d018      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d108      	bne.n	8003ab2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d024      	beq.n	8003af2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	4798      	blx	r3
 8003ab0:	e01f      	b.n	8003af2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d01b      	beq.n	8003af2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	4798      	blx	r3
 8003ac2:	e016      	b.n	8003af2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d107      	bne.n	8003ae2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0208 	bic.w	r2, r2, #8
 8003ae0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af6:	f003 031f 	and.w	r3, r3, #31
 8003afa:	2220      	movs	r2, #32
 8003afc:	409a      	lsls	r2, r3
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	4013      	ands	r3, r2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f000 8110 	beq.w	8003d28 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a2c      	ldr	r2, [pc, #176]	; (8003bc0 <HAL_DMA_IRQHandler+0x690>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d04a      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x678>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a2b      	ldr	r2, [pc, #172]	; (8003bc4 <HAL_DMA_IRQHandler+0x694>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d045      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x678>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a29      	ldr	r2, [pc, #164]	; (8003bc8 <HAL_DMA_IRQHandler+0x698>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d040      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x678>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a28      	ldr	r2, [pc, #160]	; (8003bcc <HAL_DMA_IRQHandler+0x69c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d03b      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x678>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a26      	ldr	r2, [pc, #152]	; (8003bd0 <HAL_DMA_IRQHandler+0x6a0>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d036      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x678>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a25      	ldr	r2, [pc, #148]	; (8003bd4 <HAL_DMA_IRQHandler+0x6a4>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d031      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x678>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a23      	ldr	r2, [pc, #140]	; (8003bd8 <HAL_DMA_IRQHandler+0x6a8>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d02c      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x678>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a22      	ldr	r2, [pc, #136]	; (8003bdc <HAL_DMA_IRQHandler+0x6ac>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d027      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x678>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a20      	ldr	r2, [pc, #128]	; (8003be0 <HAL_DMA_IRQHandler+0x6b0>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d022      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x678>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a1f      	ldr	r2, [pc, #124]	; (8003be4 <HAL_DMA_IRQHandler+0x6b4>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d01d      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x678>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a1d      	ldr	r2, [pc, #116]	; (8003be8 <HAL_DMA_IRQHandler+0x6b8>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d018      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x678>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a1c      	ldr	r2, [pc, #112]	; (8003bec <HAL_DMA_IRQHandler+0x6bc>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d013      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x678>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a1a      	ldr	r2, [pc, #104]	; (8003bf0 <HAL_DMA_IRQHandler+0x6c0>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d00e      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x678>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a19      	ldr	r2, [pc, #100]	; (8003bf4 <HAL_DMA_IRQHandler+0x6c4>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d009      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x678>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a17      	ldr	r2, [pc, #92]	; (8003bf8 <HAL_DMA_IRQHandler+0x6c8>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d004      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x678>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a16      	ldr	r2, [pc, #88]	; (8003bfc <HAL_DMA_IRQHandler+0x6cc>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d12b      	bne.n	8003c00 <HAL_DMA_IRQHandler+0x6d0>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0310 	and.w	r3, r3, #16
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	bf14      	ite	ne
 8003bb6:	2301      	movne	r3, #1
 8003bb8:	2300      	moveq	r3, #0
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	e02a      	b.n	8003c14 <HAL_DMA_IRQHandler+0x6e4>
 8003bbe:	bf00      	nop
 8003bc0:	40020010 	.word	0x40020010
 8003bc4:	40020028 	.word	0x40020028
 8003bc8:	40020040 	.word	0x40020040
 8003bcc:	40020058 	.word	0x40020058
 8003bd0:	40020070 	.word	0x40020070
 8003bd4:	40020088 	.word	0x40020088
 8003bd8:	400200a0 	.word	0x400200a0
 8003bdc:	400200b8 	.word	0x400200b8
 8003be0:	40020410 	.word	0x40020410
 8003be4:	40020428 	.word	0x40020428
 8003be8:	40020440 	.word	0x40020440
 8003bec:	40020458 	.word	0x40020458
 8003bf0:	40020470 	.word	0x40020470
 8003bf4:	40020488 	.word	0x40020488
 8003bf8:	400204a0 	.word	0x400204a0
 8003bfc:	400204b8 	.word	0x400204b8
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	bf14      	ite	ne
 8003c0e:	2301      	movne	r3, #1
 8003c10:	2300      	moveq	r3, #0
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 8087 	beq.w	8003d28 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c1e:	f003 031f 	and.w	r3, r3, #31
 8003c22:	2220      	movs	r2, #32
 8003c24:	409a      	lsls	r2, r3
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d139      	bne.n	8003caa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0216 	bic.w	r2, r2, #22
 8003c44:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	695a      	ldr	r2, [r3, #20]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c54:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d103      	bne.n	8003c66 <HAL_DMA_IRQHandler+0x736>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d007      	beq.n	8003c76 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0208 	bic.w	r2, r2, #8
 8003c74:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7a:	f003 031f 	and.w	r3, r3, #31
 8003c7e:	223f      	movs	r2, #63	; 0x3f
 8003c80:	409a      	lsls	r2, r3
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 834a 	beq.w	8004334 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	4798      	blx	r3
          }
          return;
 8003ca8:	e344      	b.n	8004334 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d018      	beq.n	8003cea <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d108      	bne.n	8003cd8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d02c      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	4798      	blx	r3
 8003cd6:	e027      	b.n	8003d28 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d023      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	4798      	blx	r3
 8003ce8:	e01e      	b.n	8003d28 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10f      	bne.n	8003d18 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0210 	bic.w	r2, r2, #16
 8003d06:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d003      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 8306 	beq.w	800433e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 8088 	beq.w	8003e50 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2204      	movs	r2, #4
 8003d44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a7a      	ldr	r2, [pc, #488]	; (8003f38 <HAL_DMA_IRQHandler+0xa08>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d04a      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x8b8>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a79      	ldr	r2, [pc, #484]	; (8003f3c <HAL_DMA_IRQHandler+0xa0c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d045      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x8b8>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a77      	ldr	r2, [pc, #476]	; (8003f40 <HAL_DMA_IRQHandler+0xa10>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d040      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x8b8>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a76      	ldr	r2, [pc, #472]	; (8003f44 <HAL_DMA_IRQHandler+0xa14>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d03b      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x8b8>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a74      	ldr	r2, [pc, #464]	; (8003f48 <HAL_DMA_IRQHandler+0xa18>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d036      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x8b8>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a73      	ldr	r2, [pc, #460]	; (8003f4c <HAL_DMA_IRQHandler+0xa1c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d031      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x8b8>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a71      	ldr	r2, [pc, #452]	; (8003f50 <HAL_DMA_IRQHandler+0xa20>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d02c      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x8b8>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a70      	ldr	r2, [pc, #448]	; (8003f54 <HAL_DMA_IRQHandler+0xa24>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d027      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x8b8>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a6e      	ldr	r2, [pc, #440]	; (8003f58 <HAL_DMA_IRQHandler+0xa28>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d022      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x8b8>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a6d      	ldr	r2, [pc, #436]	; (8003f5c <HAL_DMA_IRQHandler+0xa2c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d01d      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x8b8>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a6b      	ldr	r2, [pc, #428]	; (8003f60 <HAL_DMA_IRQHandler+0xa30>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d018      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x8b8>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a6a      	ldr	r2, [pc, #424]	; (8003f64 <HAL_DMA_IRQHandler+0xa34>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d013      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x8b8>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a68      	ldr	r2, [pc, #416]	; (8003f68 <HAL_DMA_IRQHandler+0xa38>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d00e      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x8b8>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a67      	ldr	r2, [pc, #412]	; (8003f6c <HAL_DMA_IRQHandler+0xa3c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d009      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x8b8>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a65      	ldr	r2, [pc, #404]	; (8003f70 <HAL_DMA_IRQHandler+0xa40>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d004      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x8b8>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a64      	ldr	r2, [pc, #400]	; (8003f74 <HAL_DMA_IRQHandler+0xa44>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d108      	bne.n	8003dfa <HAL_DMA_IRQHandler+0x8ca>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0201 	bic.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	e007      	b.n	8003e0a <HAL_DMA_IRQHandler+0x8da>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 0201 	bic.w	r2, r2, #1
 8003e08:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d307      	bcc.n	8003e26 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1f2      	bne.n	8003e0a <HAL_DMA_IRQHandler+0x8da>
 8003e24:	e000      	b.n	8003e28 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003e26:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d004      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2203      	movs	r2, #3
 8003e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003e46:	e003      	b.n	8003e50 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 8272 	beq.w	800433e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	4798      	blx	r3
 8003e62:	e26c      	b.n	800433e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a43      	ldr	r2, [pc, #268]	; (8003f78 <HAL_DMA_IRQHandler+0xa48>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d022      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x984>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a42      	ldr	r2, [pc, #264]	; (8003f7c <HAL_DMA_IRQHandler+0xa4c>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d01d      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x984>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a40      	ldr	r2, [pc, #256]	; (8003f80 <HAL_DMA_IRQHandler+0xa50>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d018      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x984>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a3f      	ldr	r2, [pc, #252]	; (8003f84 <HAL_DMA_IRQHandler+0xa54>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d013      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x984>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a3d      	ldr	r2, [pc, #244]	; (8003f88 <HAL_DMA_IRQHandler+0xa58>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d00e      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x984>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a3c      	ldr	r2, [pc, #240]	; (8003f8c <HAL_DMA_IRQHandler+0xa5c>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d009      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x984>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a3a      	ldr	r2, [pc, #232]	; (8003f90 <HAL_DMA_IRQHandler+0xa60>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d004      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x984>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a39      	ldr	r2, [pc, #228]	; (8003f94 <HAL_DMA_IRQHandler+0xa64>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d101      	bne.n	8003eb8 <HAL_DMA_IRQHandler+0x988>
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e000      	b.n	8003eba <HAL_DMA_IRQHandler+0x98a>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 823f 	beq.w	800433e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ecc:	f003 031f 	and.w	r3, r3, #31
 8003ed0:	2204      	movs	r2, #4
 8003ed2:	409a      	lsls	r2, r3
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 80cd 	beq.w	8004078 <HAL_DMA_IRQHandler+0xb48>
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 80c7 	beq.w	8004078 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eee:	f003 031f 	and.w	r3, r3, #31
 8003ef2:	2204      	movs	r2, #4
 8003ef4:	409a      	lsls	r2, r3
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d049      	beq.n	8003f98 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d109      	bne.n	8003f22 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 8210 	beq.w	8004338 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f20:	e20a      	b.n	8004338 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 8206 	beq.w	8004338 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f34:	e200      	b.n	8004338 <HAL_DMA_IRQHandler+0xe08>
 8003f36:	bf00      	nop
 8003f38:	40020010 	.word	0x40020010
 8003f3c:	40020028 	.word	0x40020028
 8003f40:	40020040 	.word	0x40020040
 8003f44:	40020058 	.word	0x40020058
 8003f48:	40020070 	.word	0x40020070
 8003f4c:	40020088 	.word	0x40020088
 8003f50:	400200a0 	.word	0x400200a0
 8003f54:	400200b8 	.word	0x400200b8
 8003f58:	40020410 	.word	0x40020410
 8003f5c:	40020428 	.word	0x40020428
 8003f60:	40020440 	.word	0x40020440
 8003f64:	40020458 	.word	0x40020458
 8003f68:	40020470 	.word	0x40020470
 8003f6c:	40020488 	.word	0x40020488
 8003f70:	400204a0 	.word	0x400204a0
 8003f74:	400204b8 	.word	0x400204b8
 8003f78:	58025408 	.word	0x58025408
 8003f7c:	5802541c 	.word	0x5802541c
 8003f80:	58025430 	.word	0x58025430
 8003f84:	58025444 	.word	0x58025444
 8003f88:	58025458 	.word	0x58025458
 8003f8c:	5802546c 	.word	0x5802546c
 8003f90:	58025480 	.word	0x58025480
 8003f94:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	f003 0320 	and.w	r3, r3, #32
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d160      	bne.n	8004064 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a8c      	ldr	r2, [pc, #560]	; (80041d8 <HAL_DMA_IRQHandler+0xca8>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d04a      	beq.n	8004042 <HAL_DMA_IRQHandler+0xb12>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a8a      	ldr	r2, [pc, #552]	; (80041dc <HAL_DMA_IRQHandler+0xcac>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d045      	beq.n	8004042 <HAL_DMA_IRQHandler+0xb12>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a89      	ldr	r2, [pc, #548]	; (80041e0 <HAL_DMA_IRQHandler+0xcb0>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d040      	beq.n	8004042 <HAL_DMA_IRQHandler+0xb12>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a87      	ldr	r2, [pc, #540]	; (80041e4 <HAL_DMA_IRQHandler+0xcb4>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d03b      	beq.n	8004042 <HAL_DMA_IRQHandler+0xb12>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a86      	ldr	r2, [pc, #536]	; (80041e8 <HAL_DMA_IRQHandler+0xcb8>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d036      	beq.n	8004042 <HAL_DMA_IRQHandler+0xb12>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a84      	ldr	r2, [pc, #528]	; (80041ec <HAL_DMA_IRQHandler+0xcbc>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d031      	beq.n	8004042 <HAL_DMA_IRQHandler+0xb12>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a83      	ldr	r2, [pc, #524]	; (80041f0 <HAL_DMA_IRQHandler+0xcc0>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d02c      	beq.n	8004042 <HAL_DMA_IRQHandler+0xb12>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a81      	ldr	r2, [pc, #516]	; (80041f4 <HAL_DMA_IRQHandler+0xcc4>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d027      	beq.n	8004042 <HAL_DMA_IRQHandler+0xb12>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a80      	ldr	r2, [pc, #512]	; (80041f8 <HAL_DMA_IRQHandler+0xcc8>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d022      	beq.n	8004042 <HAL_DMA_IRQHandler+0xb12>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a7e      	ldr	r2, [pc, #504]	; (80041fc <HAL_DMA_IRQHandler+0xccc>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d01d      	beq.n	8004042 <HAL_DMA_IRQHandler+0xb12>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a7d      	ldr	r2, [pc, #500]	; (8004200 <HAL_DMA_IRQHandler+0xcd0>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d018      	beq.n	8004042 <HAL_DMA_IRQHandler+0xb12>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a7b      	ldr	r2, [pc, #492]	; (8004204 <HAL_DMA_IRQHandler+0xcd4>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d013      	beq.n	8004042 <HAL_DMA_IRQHandler+0xb12>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a7a      	ldr	r2, [pc, #488]	; (8004208 <HAL_DMA_IRQHandler+0xcd8>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d00e      	beq.n	8004042 <HAL_DMA_IRQHandler+0xb12>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a78      	ldr	r2, [pc, #480]	; (800420c <HAL_DMA_IRQHandler+0xcdc>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d009      	beq.n	8004042 <HAL_DMA_IRQHandler+0xb12>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a77      	ldr	r2, [pc, #476]	; (8004210 <HAL_DMA_IRQHandler+0xce0>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d004      	beq.n	8004042 <HAL_DMA_IRQHandler+0xb12>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a75      	ldr	r2, [pc, #468]	; (8004214 <HAL_DMA_IRQHandler+0xce4>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d108      	bne.n	8004054 <HAL_DMA_IRQHandler+0xb24>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0208 	bic.w	r2, r2, #8
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	e007      	b.n	8004064 <HAL_DMA_IRQHandler+0xb34>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0204 	bic.w	r2, r2, #4
 8004062:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 8165 	beq.w	8004338 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004076:	e15f      	b.n	8004338 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800407c:	f003 031f 	and.w	r3, r3, #31
 8004080:	2202      	movs	r2, #2
 8004082:	409a      	lsls	r2, r3
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	4013      	ands	r3, r2
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 80c5 	beq.w	8004218 <HAL_DMA_IRQHandler+0xce8>
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 80bf 	beq.w	8004218 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800409e:	f003 031f 	and.w	r3, r3, #31
 80040a2:	2202      	movs	r2, #2
 80040a4:	409a      	lsls	r2, r3
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d018      	beq.n	80040e6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d109      	bne.n	80040d2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 813a 	beq.w	800433c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040d0:	e134      	b.n	800433c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 8130 	beq.w	800433c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040e4:	e12a      	b.n	800433c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f003 0320 	and.w	r3, r3, #32
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d168      	bne.n	80041c2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a38      	ldr	r2, [pc, #224]	; (80041d8 <HAL_DMA_IRQHandler+0xca8>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d04a      	beq.n	8004190 <HAL_DMA_IRQHandler+0xc60>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a37      	ldr	r2, [pc, #220]	; (80041dc <HAL_DMA_IRQHandler+0xcac>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d045      	beq.n	8004190 <HAL_DMA_IRQHandler+0xc60>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a35      	ldr	r2, [pc, #212]	; (80041e0 <HAL_DMA_IRQHandler+0xcb0>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d040      	beq.n	8004190 <HAL_DMA_IRQHandler+0xc60>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a34      	ldr	r2, [pc, #208]	; (80041e4 <HAL_DMA_IRQHandler+0xcb4>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d03b      	beq.n	8004190 <HAL_DMA_IRQHandler+0xc60>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a32      	ldr	r2, [pc, #200]	; (80041e8 <HAL_DMA_IRQHandler+0xcb8>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d036      	beq.n	8004190 <HAL_DMA_IRQHandler+0xc60>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a31      	ldr	r2, [pc, #196]	; (80041ec <HAL_DMA_IRQHandler+0xcbc>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d031      	beq.n	8004190 <HAL_DMA_IRQHandler+0xc60>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a2f      	ldr	r2, [pc, #188]	; (80041f0 <HAL_DMA_IRQHandler+0xcc0>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d02c      	beq.n	8004190 <HAL_DMA_IRQHandler+0xc60>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a2e      	ldr	r2, [pc, #184]	; (80041f4 <HAL_DMA_IRQHandler+0xcc4>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d027      	beq.n	8004190 <HAL_DMA_IRQHandler+0xc60>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a2c      	ldr	r2, [pc, #176]	; (80041f8 <HAL_DMA_IRQHandler+0xcc8>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d022      	beq.n	8004190 <HAL_DMA_IRQHandler+0xc60>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a2b      	ldr	r2, [pc, #172]	; (80041fc <HAL_DMA_IRQHandler+0xccc>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d01d      	beq.n	8004190 <HAL_DMA_IRQHandler+0xc60>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a29      	ldr	r2, [pc, #164]	; (8004200 <HAL_DMA_IRQHandler+0xcd0>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d018      	beq.n	8004190 <HAL_DMA_IRQHandler+0xc60>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a28      	ldr	r2, [pc, #160]	; (8004204 <HAL_DMA_IRQHandler+0xcd4>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d013      	beq.n	8004190 <HAL_DMA_IRQHandler+0xc60>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a26      	ldr	r2, [pc, #152]	; (8004208 <HAL_DMA_IRQHandler+0xcd8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d00e      	beq.n	8004190 <HAL_DMA_IRQHandler+0xc60>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a25      	ldr	r2, [pc, #148]	; (800420c <HAL_DMA_IRQHandler+0xcdc>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d009      	beq.n	8004190 <HAL_DMA_IRQHandler+0xc60>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a23      	ldr	r2, [pc, #140]	; (8004210 <HAL_DMA_IRQHandler+0xce0>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d004      	beq.n	8004190 <HAL_DMA_IRQHandler+0xc60>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a22      	ldr	r2, [pc, #136]	; (8004214 <HAL_DMA_IRQHandler+0xce4>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d108      	bne.n	80041a2 <HAL_DMA_IRQHandler+0xc72>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f022 0214 	bic.w	r2, r2, #20
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	e007      	b.n	80041b2 <HAL_DMA_IRQHandler+0xc82>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 020a 	bic.w	r2, r2, #10
 80041b0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f000 80b8 	beq.w	800433c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041d4:	e0b2      	b.n	800433c <HAL_DMA_IRQHandler+0xe0c>
 80041d6:	bf00      	nop
 80041d8:	40020010 	.word	0x40020010
 80041dc:	40020028 	.word	0x40020028
 80041e0:	40020040 	.word	0x40020040
 80041e4:	40020058 	.word	0x40020058
 80041e8:	40020070 	.word	0x40020070
 80041ec:	40020088 	.word	0x40020088
 80041f0:	400200a0 	.word	0x400200a0
 80041f4:	400200b8 	.word	0x400200b8
 80041f8:	40020410 	.word	0x40020410
 80041fc:	40020428 	.word	0x40020428
 8004200:	40020440 	.word	0x40020440
 8004204:	40020458 	.word	0x40020458
 8004208:	40020470 	.word	0x40020470
 800420c:	40020488 	.word	0x40020488
 8004210:	400204a0 	.word	0x400204a0
 8004214:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800421c:	f003 031f 	and.w	r3, r3, #31
 8004220:	2208      	movs	r2, #8
 8004222:	409a      	lsls	r2, r3
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	4013      	ands	r3, r2
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 8088 	beq.w	800433e <HAL_DMA_IRQHandler+0xe0e>
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	f003 0308 	and.w	r3, r3, #8
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 8082 	beq.w	800433e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a41      	ldr	r2, [pc, #260]	; (8004344 <HAL_DMA_IRQHandler+0xe14>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d04a      	beq.n	80042da <HAL_DMA_IRQHandler+0xdaa>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a3f      	ldr	r2, [pc, #252]	; (8004348 <HAL_DMA_IRQHandler+0xe18>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d045      	beq.n	80042da <HAL_DMA_IRQHandler+0xdaa>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a3e      	ldr	r2, [pc, #248]	; (800434c <HAL_DMA_IRQHandler+0xe1c>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d040      	beq.n	80042da <HAL_DMA_IRQHandler+0xdaa>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a3c      	ldr	r2, [pc, #240]	; (8004350 <HAL_DMA_IRQHandler+0xe20>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d03b      	beq.n	80042da <HAL_DMA_IRQHandler+0xdaa>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a3b      	ldr	r2, [pc, #236]	; (8004354 <HAL_DMA_IRQHandler+0xe24>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d036      	beq.n	80042da <HAL_DMA_IRQHandler+0xdaa>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a39      	ldr	r2, [pc, #228]	; (8004358 <HAL_DMA_IRQHandler+0xe28>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d031      	beq.n	80042da <HAL_DMA_IRQHandler+0xdaa>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a38      	ldr	r2, [pc, #224]	; (800435c <HAL_DMA_IRQHandler+0xe2c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d02c      	beq.n	80042da <HAL_DMA_IRQHandler+0xdaa>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a36      	ldr	r2, [pc, #216]	; (8004360 <HAL_DMA_IRQHandler+0xe30>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d027      	beq.n	80042da <HAL_DMA_IRQHandler+0xdaa>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a35      	ldr	r2, [pc, #212]	; (8004364 <HAL_DMA_IRQHandler+0xe34>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d022      	beq.n	80042da <HAL_DMA_IRQHandler+0xdaa>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a33      	ldr	r2, [pc, #204]	; (8004368 <HAL_DMA_IRQHandler+0xe38>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d01d      	beq.n	80042da <HAL_DMA_IRQHandler+0xdaa>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a32      	ldr	r2, [pc, #200]	; (800436c <HAL_DMA_IRQHandler+0xe3c>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d018      	beq.n	80042da <HAL_DMA_IRQHandler+0xdaa>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a30      	ldr	r2, [pc, #192]	; (8004370 <HAL_DMA_IRQHandler+0xe40>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d013      	beq.n	80042da <HAL_DMA_IRQHandler+0xdaa>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a2f      	ldr	r2, [pc, #188]	; (8004374 <HAL_DMA_IRQHandler+0xe44>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d00e      	beq.n	80042da <HAL_DMA_IRQHandler+0xdaa>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a2d      	ldr	r2, [pc, #180]	; (8004378 <HAL_DMA_IRQHandler+0xe48>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d009      	beq.n	80042da <HAL_DMA_IRQHandler+0xdaa>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a2c      	ldr	r2, [pc, #176]	; (800437c <HAL_DMA_IRQHandler+0xe4c>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d004      	beq.n	80042da <HAL_DMA_IRQHandler+0xdaa>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a2a      	ldr	r2, [pc, #168]	; (8004380 <HAL_DMA_IRQHandler+0xe50>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d108      	bne.n	80042ec <HAL_DMA_IRQHandler+0xdbc>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 021c 	bic.w	r2, r2, #28
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	e007      	b.n	80042fc <HAL_DMA_IRQHandler+0xdcc>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 020e 	bic.w	r2, r2, #14
 80042fa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004300:	f003 031f 	and.w	r3, r3, #31
 8004304:	2201      	movs	r2, #1
 8004306:	409a      	lsls	r2, r3
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004326:	2b00      	cmp	r3, #0
 8004328:	d009      	beq.n	800433e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	4798      	blx	r3
 8004332:	e004      	b.n	800433e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004334:	bf00      	nop
 8004336:	e002      	b.n	800433e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004338:	bf00      	nop
 800433a:	e000      	b.n	800433e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800433c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800433e:	3728      	adds	r7, #40	; 0x28
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40020010 	.word	0x40020010
 8004348:	40020028 	.word	0x40020028
 800434c:	40020040 	.word	0x40020040
 8004350:	40020058 	.word	0x40020058
 8004354:	40020070 	.word	0x40020070
 8004358:	40020088 	.word	0x40020088
 800435c:	400200a0 	.word	0x400200a0
 8004360:	400200b8 	.word	0x400200b8
 8004364:	40020410 	.word	0x40020410
 8004368:	40020428 	.word	0x40020428
 800436c:	40020440 	.word	0x40020440
 8004370:	40020458 	.word	0x40020458
 8004374:	40020470 	.word	0x40020470
 8004378:	40020488 	.word	0x40020488
 800437c:	400204a0 	.word	0x400204a0
 8004380:	400204b8 	.word	0x400204b8

08004384 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a42      	ldr	r2, [pc, #264]	; (800449c <DMA_CalcBaseAndBitshift+0x118>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d04a      	beq.n	800442c <DMA_CalcBaseAndBitshift+0xa8>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a41      	ldr	r2, [pc, #260]	; (80044a0 <DMA_CalcBaseAndBitshift+0x11c>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d045      	beq.n	800442c <DMA_CalcBaseAndBitshift+0xa8>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a3f      	ldr	r2, [pc, #252]	; (80044a4 <DMA_CalcBaseAndBitshift+0x120>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d040      	beq.n	800442c <DMA_CalcBaseAndBitshift+0xa8>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a3e      	ldr	r2, [pc, #248]	; (80044a8 <DMA_CalcBaseAndBitshift+0x124>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d03b      	beq.n	800442c <DMA_CalcBaseAndBitshift+0xa8>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a3c      	ldr	r2, [pc, #240]	; (80044ac <DMA_CalcBaseAndBitshift+0x128>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d036      	beq.n	800442c <DMA_CalcBaseAndBitshift+0xa8>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a3b      	ldr	r2, [pc, #236]	; (80044b0 <DMA_CalcBaseAndBitshift+0x12c>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d031      	beq.n	800442c <DMA_CalcBaseAndBitshift+0xa8>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a39      	ldr	r2, [pc, #228]	; (80044b4 <DMA_CalcBaseAndBitshift+0x130>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d02c      	beq.n	800442c <DMA_CalcBaseAndBitshift+0xa8>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a38      	ldr	r2, [pc, #224]	; (80044b8 <DMA_CalcBaseAndBitshift+0x134>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d027      	beq.n	800442c <DMA_CalcBaseAndBitshift+0xa8>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a36      	ldr	r2, [pc, #216]	; (80044bc <DMA_CalcBaseAndBitshift+0x138>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d022      	beq.n	800442c <DMA_CalcBaseAndBitshift+0xa8>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a35      	ldr	r2, [pc, #212]	; (80044c0 <DMA_CalcBaseAndBitshift+0x13c>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d01d      	beq.n	800442c <DMA_CalcBaseAndBitshift+0xa8>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a33      	ldr	r2, [pc, #204]	; (80044c4 <DMA_CalcBaseAndBitshift+0x140>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d018      	beq.n	800442c <DMA_CalcBaseAndBitshift+0xa8>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a32      	ldr	r2, [pc, #200]	; (80044c8 <DMA_CalcBaseAndBitshift+0x144>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d013      	beq.n	800442c <DMA_CalcBaseAndBitshift+0xa8>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a30      	ldr	r2, [pc, #192]	; (80044cc <DMA_CalcBaseAndBitshift+0x148>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d00e      	beq.n	800442c <DMA_CalcBaseAndBitshift+0xa8>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a2f      	ldr	r2, [pc, #188]	; (80044d0 <DMA_CalcBaseAndBitshift+0x14c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d009      	beq.n	800442c <DMA_CalcBaseAndBitshift+0xa8>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a2d      	ldr	r2, [pc, #180]	; (80044d4 <DMA_CalcBaseAndBitshift+0x150>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d004      	beq.n	800442c <DMA_CalcBaseAndBitshift+0xa8>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a2c      	ldr	r2, [pc, #176]	; (80044d8 <DMA_CalcBaseAndBitshift+0x154>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d101      	bne.n	8004430 <DMA_CalcBaseAndBitshift+0xac>
 800442c:	2301      	movs	r3, #1
 800442e:	e000      	b.n	8004432 <DMA_CalcBaseAndBitshift+0xae>
 8004430:	2300      	movs	r3, #0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d024      	beq.n	8004480 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	b2db      	uxtb	r3, r3
 800443c:	3b10      	subs	r3, #16
 800443e:	4a27      	ldr	r2, [pc, #156]	; (80044dc <DMA_CalcBaseAndBitshift+0x158>)
 8004440:	fba2 2303 	umull	r2, r3, r2, r3
 8004444:	091b      	lsrs	r3, r3, #4
 8004446:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f003 0307 	and.w	r3, r3, #7
 800444e:	4a24      	ldr	r2, [pc, #144]	; (80044e0 <DMA_CalcBaseAndBitshift+0x15c>)
 8004450:	5cd3      	ldrb	r3, [r2, r3]
 8004452:	461a      	mov	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2b03      	cmp	r3, #3
 800445c:	d908      	bls.n	8004470 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	4b1f      	ldr	r3, [pc, #124]	; (80044e4 <DMA_CalcBaseAndBitshift+0x160>)
 8004466:	4013      	ands	r3, r2
 8004468:	1d1a      	adds	r2, r3, #4
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	659a      	str	r2, [r3, #88]	; 0x58
 800446e:	e00d      	b.n	800448c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	461a      	mov	r2, r3
 8004476:	4b1b      	ldr	r3, [pc, #108]	; (80044e4 <DMA_CalcBaseAndBitshift+0x160>)
 8004478:	4013      	ands	r3, r2
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	6593      	str	r3, [r2, #88]	; 0x58
 800447e:	e005      	b.n	800448c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004490:	4618      	mov	r0, r3
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	40020010 	.word	0x40020010
 80044a0:	40020028 	.word	0x40020028
 80044a4:	40020040 	.word	0x40020040
 80044a8:	40020058 	.word	0x40020058
 80044ac:	40020070 	.word	0x40020070
 80044b0:	40020088 	.word	0x40020088
 80044b4:	400200a0 	.word	0x400200a0
 80044b8:	400200b8 	.word	0x400200b8
 80044bc:	40020410 	.word	0x40020410
 80044c0:	40020428 	.word	0x40020428
 80044c4:	40020440 	.word	0x40020440
 80044c8:	40020458 	.word	0x40020458
 80044cc:	40020470 	.word	0x40020470
 80044d0:	40020488 	.word	0x40020488
 80044d4:	400204a0 	.word	0x400204a0
 80044d8:	400204b8 	.word	0x400204b8
 80044dc:	aaaaaaab 	.word	0xaaaaaaab
 80044e0:	08009f8c 	.word	0x08009f8c
 80044e4:	fffffc00 	.word	0xfffffc00

080044e8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044f0:	2300      	movs	r3, #0
 80044f2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d120      	bne.n	800453e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004500:	2b03      	cmp	r3, #3
 8004502:	d858      	bhi.n	80045b6 <DMA_CheckFifoParam+0xce>
 8004504:	a201      	add	r2, pc, #4	; (adr r2, 800450c <DMA_CheckFifoParam+0x24>)
 8004506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450a:	bf00      	nop
 800450c:	0800451d 	.word	0x0800451d
 8004510:	0800452f 	.word	0x0800452f
 8004514:	0800451d 	.word	0x0800451d
 8004518:	080045b7 	.word	0x080045b7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004520:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d048      	beq.n	80045ba <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800452c:	e045      	b.n	80045ba <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004532:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004536:	d142      	bne.n	80045be <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800453c:	e03f      	b.n	80045be <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004546:	d123      	bne.n	8004590 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454c:	2b03      	cmp	r3, #3
 800454e:	d838      	bhi.n	80045c2 <DMA_CheckFifoParam+0xda>
 8004550:	a201      	add	r2, pc, #4	; (adr r2, 8004558 <DMA_CheckFifoParam+0x70>)
 8004552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004556:	bf00      	nop
 8004558:	08004569 	.word	0x08004569
 800455c:	0800456f 	.word	0x0800456f
 8004560:	08004569 	.word	0x08004569
 8004564:	08004581 	.word	0x08004581
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	73fb      	strb	r3, [r7, #15]
        break;
 800456c:	e030      	b.n	80045d0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004572:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d025      	beq.n	80045c6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800457e:	e022      	b.n	80045c6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004584:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004588:	d11f      	bne.n	80045ca <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800458e:	e01c      	b.n	80045ca <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004594:	2b02      	cmp	r3, #2
 8004596:	d902      	bls.n	800459e <DMA_CheckFifoParam+0xb6>
 8004598:	2b03      	cmp	r3, #3
 800459a:	d003      	beq.n	80045a4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800459c:	e018      	b.n	80045d0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	73fb      	strb	r3, [r7, #15]
        break;
 80045a2:	e015      	b.n	80045d0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00e      	beq.n	80045ce <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	73fb      	strb	r3, [r7, #15]
    break;
 80045b4:	e00b      	b.n	80045ce <DMA_CheckFifoParam+0xe6>
        break;
 80045b6:	bf00      	nop
 80045b8:	e00a      	b.n	80045d0 <DMA_CheckFifoParam+0xe8>
        break;
 80045ba:	bf00      	nop
 80045bc:	e008      	b.n	80045d0 <DMA_CheckFifoParam+0xe8>
        break;
 80045be:	bf00      	nop
 80045c0:	e006      	b.n	80045d0 <DMA_CheckFifoParam+0xe8>
        break;
 80045c2:	bf00      	nop
 80045c4:	e004      	b.n	80045d0 <DMA_CheckFifoParam+0xe8>
        break;
 80045c6:	bf00      	nop
 80045c8:	e002      	b.n	80045d0 <DMA_CheckFifoParam+0xe8>
        break;
 80045ca:	bf00      	nop
 80045cc:	e000      	b.n	80045d0 <DMA_CheckFifoParam+0xe8>
    break;
 80045ce:	bf00      	nop
    }
  }

  return status;
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop

080045e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a38      	ldr	r2, [pc, #224]	; (80046d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d022      	beq.n	800463e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a36      	ldr	r2, [pc, #216]	; (80046d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d01d      	beq.n	800463e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a35      	ldr	r2, [pc, #212]	; (80046dc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d018      	beq.n	800463e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a33      	ldr	r2, [pc, #204]	; (80046e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d013      	beq.n	800463e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a32      	ldr	r2, [pc, #200]	; (80046e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d00e      	beq.n	800463e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a30      	ldr	r2, [pc, #192]	; (80046e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d009      	beq.n	800463e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a2f      	ldr	r2, [pc, #188]	; (80046ec <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d004      	beq.n	800463e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a2d      	ldr	r2, [pc, #180]	; (80046f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d101      	bne.n	8004642 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800463e:	2301      	movs	r3, #1
 8004640:	e000      	b.n	8004644 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004642:	2300      	movs	r3, #0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d01a      	beq.n	800467e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	b2db      	uxtb	r3, r3
 800464e:	3b08      	subs	r3, #8
 8004650:	4a28      	ldr	r2, [pc, #160]	; (80046f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004652:	fba2 2303 	umull	r2, r3, r2, r3
 8004656:	091b      	lsrs	r3, r3, #4
 8004658:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	4b26      	ldr	r3, [pc, #152]	; (80046f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800465e:	4413      	add	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	461a      	mov	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a24      	ldr	r2, [pc, #144]	; (80046fc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800466c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f003 031f 	and.w	r3, r3, #31
 8004674:	2201      	movs	r2, #1
 8004676:	409a      	lsls	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800467c:	e024      	b.n	80046c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	b2db      	uxtb	r3, r3
 8004684:	3b10      	subs	r3, #16
 8004686:	4a1e      	ldr	r2, [pc, #120]	; (8004700 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004688:	fba2 2303 	umull	r2, r3, r2, r3
 800468c:	091b      	lsrs	r3, r3, #4
 800468e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	4a1c      	ldr	r2, [pc, #112]	; (8004704 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d806      	bhi.n	80046a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	4a1b      	ldr	r2, [pc, #108]	; (8004708 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d902      	bls.n	80046a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	3308      	adds	r3, #8
 80046a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	4b18      	ldr	r3, [pc, #96]	; (800470c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80046aa:	4413      	add	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	461a      	mov	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a16      	ldr	r2, [pc, #88]	; (8004710 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80046b8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f003 031f 	and.w	r3, r3, #31
 80046c0:	2201      	movs	r2, #1
 80046c2:	409a      	lsls	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80046c8:	bf00      	nop
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	58025408 	.word	0x58025408
 80046d8:	5802541c 	.word	0x5802541c
 80046dc:	58025430 	.word	0x58025430
 80046e0:	58025444 	.word	0x58025444
 80046e4:	58025458 	.word	0x58025458
 80046e8:	5802546c 	.word	0x5802546c
 80046ec:	58025480 	.word	0x58025480
 80046f0:	58025494 	.word	0x58025494
 80046f4:	cccccccd 	.word	0xcccccccd
 80046f8:	16009600 	.word	0x16009600
 80046fc:	58025880 	.word	0x58025880
 8004700:	aaaaaaab 	.word	0xaaaaaaab
 8004704:	400204b8 	.word	0x400204b8
 8004708:	4002040f 	.word	0x4002040f
 800470c:	10008200 	.word	0x10008200
 8004710:	40020880 	.word	0x40020880

08004714 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	b2db      	uxtb	r3, r3
 8004722:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d04a      	beq.n	80047c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2b08      	cmp	r3, #8
 800472e:	d847      	bhi.n	80047c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a25      	ldr	r2, [pc, #148]	; (80047cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d022      	beq.n	8004780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a24      	ldr	r2, [pc, #144]	; (80047d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d01d      	beq.n	8004780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a22      	ldr	r2, [pc, #136]	; (80047d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d018      	beq.n	8004780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a21      	ldr	r2, [pc, #132]	; (80047d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d013      	beq.n	8004780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a1f      	ldr	r2, [pc, #124]	; (80047dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d00e      	beq.n	8004780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a1e      	ldr	r2, [pc, #120]	; (80047e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d009      	beq.n	8004780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a1c      	ldr	r2, [pc, #112]	; (80047e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d004      	beq.n	8004780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a1b      	ldr	r2, [pc, #108]	; (80047e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d101      	bne.n	8004784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004780:	2301      	movs	r3, #1
 8004782:	e000      	b.n	8004786 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004784:	2300      	movs	r3, #0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	4b17      	ldr	r3, [pc, #92]	; (80047ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800478e:	4413      	add	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	461a      	mov	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a15      	ldr	r2, [pc, #84]	; (80047f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800479c:	671a      	str	r2, [r3, #112]	; 0x70
 800479e:	e009      	b.n	80047b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	4b14      	ldr	r3, [pc, #80]	; (80047f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80047a4:	4413      	add	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	461a      	mov	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a11      	ldr	r2, [pc, #68]	; (80047f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80047b2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	3b01      	subs	r3, #1
 80047b8:	2201      	movs	r2, #1
 80047ba:	409a      	lsls	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80047c0:	bf00      	nop
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	58025408 	.word	0x58025408
 80047d0:	5802541c 	.word	0x5802541c
 80047d4:	58025430 	.word	0x58025430
 80047d8:	58025444 	.word	0x58025444
 80047dc:	58025458 	.word	0x58025458
 80047e0:	5802546c 	.word	0x5802546c
 80047e4:	58025480 	.word	0x58025480
 80047e8:	58025494 	.word	0x58025494
 80047ec:	1600963f 	.word	0x1600963f
 80047f0:	58025940 	.word	0x58025940
 80047f4:	1000823f 	.word	0x1000823f
 80047f8:	40020940 	.word	0x40020940

080047fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b089      	sub	sp, #36	; 0x24
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004806:	2300      	movs	r3, #0
 8004808:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800480a:	4b89      	ldr	r3, [pc, #548]	; (8004a30 <HAL_GPIO_Init+0x234>)
 800480c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800480e:	e194      	b.n	8004b3a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	2101      	movs	r1, #1
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	fa01 f303 	lsl.w	r3, r1, r3
 800481c:	4013      	ands	r3, r2
 800481e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 8186 	beq.w	8004b34 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d00b      	beq.n	8004848 <HAL_GPIO_Init+0x4c>
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	2b02      	cmp	r3, #2
 8004836:	d007      	beq.n	8004848 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800483c:	2b11      	cmp	r3, #17
 800483e:	d003      	beq.n	8004848 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	2b12      	cmp	r3, #18
 8004846:	d130      	bne.n	80048aa <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	2203      	movs	r2, #3
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	43db      	mvns	r3, r3
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	4013      	ands	r3, r2
 800485e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	68da      	ldr	r2, [r3, #12]
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	4313      	orrs	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800487e:	2201      	movs	r2, #1
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	fa02 f303 	lsl.w	r3, r2, r3
 8004886:	43db      	mvns	r3, r3
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	4013      	ands	r3, r2
 800488c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	091b      	lsrs	r3, r3, #4
 8004894:	f003 0201 	and.w	r2, r3, #1
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	fa02 f303 	lsl.w	r3, r2, r3
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	2203      	movs	r2, #3
 80048b6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ba:	43db      	mvns	r3, r3
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	4013      	ands	r3, r2
 80048c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	689a      	ldr	r2, [r3, #8]
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	fa02 f303 	lsl.w	r3, r2, r3
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d003      	beq.n	80048ea <HAL_GPIO_Init+0xee>
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2b12      	cmp	r3, #18
 80048e8:	d123      	bne.n	8004932 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	08da      	lsrs	r2, r3, #3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	3208      	adds	r2, #8
 80048f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	f003 0307 	and.w	r3, r3, #7
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	220f      	movs	r2, #15
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	43db      	mvns	r3, r3
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	4013      	ands	r3, r2
 800490c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	691a      	ldr	r2, [r3, #16]
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	fa02 f303 	lsl.w	r3, r2, r3
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	4313      	orrs	r3, r2
 8004922:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	08da      	lsrs	r2, r3, #3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3208      	adds	r2, #8
 800492c:	69b9      	ldr	r1, [r7, #24]
 800492e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	2203      	movs	r2, #3
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	43db      	mvns	r3, r3
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	4013      	ands	r3, r2
 8004948:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f003 0203 	and.w	r2, r3, #3
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	fa02 f303 	lsl.w	r3, r2, r3
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	4313      	orrs	r3, r2
 800495e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	f000 80e0 	beq.w	8004b34 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004974:	4b2f      	ldr	r3, [pc, #188]	; (8004a34 <HAL_GPIO_Init+0x238>)
 8004976:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800497a:	4a2e      	ldr	r2, [pc, #184]	; (8004a34 <HAL_GPIO_Init+0x238>)
 800497c:	f043 0302 	orr.w	r3, r3, #2
 8004980:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004984:	4b2b      	ldr	r3, [pc, #172]	; (8004a34 <HAL_GPIO_Init+0x238>)
 8004986:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004992:	4a29      	ldr	r2, [pc, #164]	; (8004a38 <HAL_GPIO_Init+0x23c>)
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	089b      	lsrs	r3, r3, #2
 8004998:	3302      	adds	r3, #2
 800499a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800499e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	f003 0303 	and.w	r3, r3, #3
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	220f      	movs	r2, #15
 80049aa:	fa02 f303 	lsl.w	r3, r2, r3
 80049ae:	43db      	mvns	r3, r3
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	4013      	ands	r3, r2
 80049b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a20      	ldr	r2, [pc, #128]	; (8004a3c <HAL_GPIO_Init+0x240>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d052      	beq.n	8004a64 <HAL_GPIO_Init+0x268>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a1f      	ldr	r2, [pc, #124]	; (8004a40 <HAL_GPIO_Init+0x244>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d031      	beq.n	8004a2a <HAL_GPIO_Init+0x22e>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a1e      	ldr	r2, [pc, #120]	; (8004a44 <HAL_GPIO_Init+0x248>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d02b      	beq.n	8004a26 <HAL_GPIO_Init+0x22a>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a1d      	ldr	r2, [pc, #116]	; (8004a48 <HAL_GPIO_Init+0x24c>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d025      	beq.n	8004a22 <HAL_GPIO_Init+0x226>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a1c      	ldr	r2, [pc, #112]	; (8004a4c <HAL_GPIO_Init+0x250>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d01f      	beq.n	8004a1e <HAL_GPIO_Init+0x222>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a1b      	ldr	r2, [pc, #108]	; (8004a50 <HAL_GPIO_Init+0x254>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d019      	beq.n	8004a1a <HAL_GPIO_Init+0x21e>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a1a      	ldr	r2, [pc, #104]	; (8004a54 <HAL_GPIO_Init+0x258>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d013      	beq.n	8004a16 <HAL_GPIO_Init+0x21a>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a19      	ldr	r2, [pc, #100]	; (8004a58 <HAL_GPIO_Init+0x25c>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00d      	beq.n	8004a12 <HAL_GPIO_Init+0x216>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a18      	ldr	r2, [pc, #96]	; (8004a5c <HAL_GPIO_Init+0x260>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d007      	beq.n	8004a0e <HAL_GPIO_Init+0x212>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a17      	ldr	r2, [pc, #92]	; (8004a60 <HAL_GPIO_Init+0x264>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d101      	bne.n	8004a0a <HAL_GPIO_Init+0x20e>
 8004a06:	2309      	movs	r3, #9
 8004a08:	e02d      	b.n	8004a66 <HAL_GPIO_Init+0x26a>
 8004a0a:	230a      	movs	r3, #10
 8004a0c:	e02b      	b.n	8004a66 <HAL_GPIO_Init+0x26a>
 8004a0e:	2308      	movs	r3, #8
 8004a10:	e029      	b.n	8004a66 <HAL_GPIO_Init+0x26a>
 8004a12:	2307      	movs	r3, #7
 8004a14:	e027      	b.n	8004a66 <HAL_GPIO_Init+0x26a>
 8004a16:	2306      	movs	r3, #6
 8004a18:	e025      	b.n	8004a66 <HAL_GPIO_Init+0x26a>
 8004a1a:	2305      	movs	r3, #5
 8004a1c:	e023      	b.n	8004a66 <HAL_GPIO_Init+0x26a>
 8004a1e:	2304      	movs	r3, #4
 8004a20:	e021      	b.n	8004a66 <HAL_GPIO_Init+0x26a>
 8004a22:	2303      	movs	r3, #3
 8004a24:	e01f      	b.n	8004a66 <HAL_GPIO_Init+0x26a>
 8004a26:	2302      	movs	r3, #2
 8004a28:	e01d      	b.n	8004a66 <HAL_GPIO_Init+0x26a>
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e01b      	b.n	8004a66 <HAL_GPIO_Init+0x26a>
 8004a2e:	bf00      	nop
 8004a30:	58000080 	.word	0x58000080
 8004a34:	58024400 	.word	0x58024400
 8004a38:	58000400 	.word	0x58000400
 8004a3c:	58020000 	.word	0x58020000
 8004a40:	58020400 	.word	0x58020400
 8004a44:	58020800 	.word	0x58020800
 8004a48:	58020c00 	.word	0x58020c00
 8004a4c:	58021000 	.word	0x58021000
 8004a50:	58021400 	.word	0x58021400
 8004a54:	58021800 	.word	0x58021800
 8004a58:	58021c00 	.word	0x58021c00
 8004a5c:	58022000 	.word	0x58022000
 8004a60:	58022400 	.word	0x58022400
 8004a64:	2300      	movs	r3, #0
 8004a66:	69fa      	ldr	r2, [r7, #28]
 8004a68:	f002 0203 	and.w	r2, r2, #3
 8004a6c:	0092      	lsls	r2, r2, #2
 8004a6e:	4093      	lsls	r3, r2
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a76:	4938      	ldr	r1, [pc, #224]	; (8004b58 <HAL_GPIO_Init+0x35c>)
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	089b      	lsrs	r3, r3, #2
 8004a7c:	3302      	adds	r3, #2
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	4013      	ands	r3, r2
 8004a92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d003      	beq.n	8004aa8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	43db      	mvns	r3, r3
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	4013      	ands	r3, r2
 8004abc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	43db      	mvns	r3, r3
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004afe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	43db      	mvns	r3, r3
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	4013      	ands	r3, r2
 8004b16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d003      	beq.n	8004b2c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004b2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	3301      	adds	r3, #1
 8004b38:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	fa22 f303 	lsr.w	r3, r2, r3
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f47f ae63 	bne.w	8004810 <HAL_GPIO_Init+0x14>
  }
}
 8004b4a:	bf00      	nop
 8004b4c:	bf00      	nop
 8004b4e:	3724      	adds	r7, #36	; 0x24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	58000400 	.word	0x58000400

08004b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	460b      	mov	r3, r1
 8004b66:	807b      	strh	r3, [r7, #2]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b6c:	787b      	ldrb	r3, [r7, #1]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b72:	887a      	ldrh	r2, [r7, #2]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004b78:	e003      	b.n	8004b82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004b7a:	887b      	ldrh	r3, [r7, #2]
 8004b7c:	041a      	lsls	r2, r3, #16
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	619a      	str	r2, [r3, #24]
}
 8004b82:	bf00      	nop
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b082      	sub	sp, #8
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	4603      	mov	r3, r0
 8004b96:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b9c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ba0:	88fb      	ldrh	r3, [r7, #6]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d008      	beq.n	8004bba <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ba8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bac:	88fb      	ldrh	r3, [r7, #6]
 8004bae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004bb2:	88fb      	ldrh	r3, [r7, #6]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7fc fd25 	bl	8001604 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004bba:	bf00      	nop
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
	...

08004bc4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004bcc:	4b19      	ldr	r3, [pc, #100]	; (8004c34 <HAL_PWREx_ConfigSupply+0x70>)
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b04      	cmp	r3, #4
 8004bd6:	d00a      	beq.n	8004bee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004bd8:	4b16      	ldr	r3, [pc, #88]	; (8004c34 <HAL_PWREx_ConfigSupply+0x70>)
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d001      	beq.n	8004bea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e01f      	b.n	8004c2a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004bea:	2300      	movs	r3, #0
 8004bec:	e01d      	b.n	8004c2a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004bee:	4b11      	ldr	r3, [pc, #68]	; (8004c34 <HAL_PWREx_ConfigSupply+0x70>)
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	f023 0207 	bic.w	r2, r3, #7
 8004bf6:	490f      	ldr	r1, [pc, #60]	; (8004c34 <HAL_PWREx_ConfigSupply+0x70>)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004bfe:	f7fd fa8d 	bl	800211c <HAL_GetTick>
 8004c02:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c04:	e009      	b.n	8004c1a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c06:	f7fd fa89 	bl	800211c <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c14:	d901      	bls.n	8004c1a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e007      	b.n	8004c2a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c1a:	4b06      	ldr	r3, [pc, #24]	; (8004c34 <HAL_PWREx_ConfigSupply+0x70>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c26:	d1ee      	bne.n	8004c06 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	58024800 	.word	0x58024800

08004c38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08c      	sub	sp, #48	; 0x30
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e3ff      	b.n	800544a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f000 8087 	beq.w	8004d66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c58:	4b99      	ldr	r3, [pc, #612]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c62:	4b97      	ldr	r3, [pc, #604]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c66:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6a:	2b10      	cmp	r3, #16
 8004c6c:	d007      	beq.n	8004c7e <HAL_RCC_OscConfig+0x46>
 8004c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c70:	2b18      	cmp	r3, #24
 8004c72:	d110      	bne.n	8004c96 <HAL_RCC_OscConfig+0x5e>
 8004c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c76:	f003 0303 	and.w	r3, r3, #3
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d10b      	bne.n	8004c96 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c7e:	4b90      	ldr	r3, [pc, #576]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d06c      	beq.n	8004d64 <HAL_RCC_OscConfig+0x12c>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d168      	bne.n	8004d64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e3d9      	b.n	800544a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c9e:	d106      	bne.n	8004cae <HAL_RCC_OscConfig+0x76>
 8004ca0:	4b87      	ldr	r3, [pc, #540]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a86      	ldr	r2, [pc, #536]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004caa:	6013      	str	r3, [r2, #0]
 8004cac:	e02e      	b.n	8004d0c <HAL_RCC_OscConfig+0xd4>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10c      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x98>
 8004cb6:	4b82      	ldr	r3, [pc, #520]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a81      	ldr	r2, [pc, #516]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004cbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cc0:	6013      	str	r3, [r2, #0]
 8004cc2:	4b7f      	ldr	r3, [pc, #508]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a7e      	ldr	r2, [pc, #504]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004cc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	e01d      	b.n	8004d0c <HAL_RCC_OscConfig+0xd4>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cd8:	d10c      	bne.n	8004cf4 <HAL_RCC_OscConfig+0xbc>
 8004cda:	4b79      	ldr	r3, [pc, #484]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a78      	ldr	r2, [pc, #480]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ce4:	6013      	str	r3, [r2, #0]
 8004ce6:	4b76      	ldr	r3, [pc, #472]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a75      	ldr	r2, [pc, #468]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf0:	6013      	str	r3, [r2, #0]
 8004cf2:	e00b      	b.n	8004d0c <HAL_RCC_OscConfig+0xd4>
 8004cf4:	4b72      	ldr	r3, [pc, #456]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a71      	ldr	r2, [pc, #452]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cfe:	6013      	str	r3, [r2, #0]
 8004d00:	4b6f      	ldr	r3, [pc, #444]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a6e      	ldr	r2, [pc, #440]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d013      	beq.n	8004d3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d14:	f7fd fa02 	bl	800211c <HAL_GetTick>
 8004d18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d1a:	e008      	b.n	8004d2e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d1c:	f7fd f9fe 	bl	800211c <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b64      	cmp	r3, #100	; 0x64
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e38d      	b.n	800544a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d2e:	4b64      	ldr	r3, [pc, #400]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d0f0      	beq.n	8004d1c <HAL_RCC_OscConfig+0xe4>
 8004d3a:	e014      	b.n	8004d66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3c:	f7fd f9ee 	bl	800211c <HAL_GetTick>
 8004d40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d44:	f7fd f9ea 	bl	800211c <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b64      	cmp	r3, #100	; 0x64
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e379      	b.n	800544a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d56:	4b5a      	ldr	r3, [pc, #360]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1f0      	bne.n	8004d44 <HAL_RCC_OscConfig+0x10c>
 8004d62:	e000      	b.n	8004d66 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 80ae 	beq.w	8004ed0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d74:	4b52      	ldr	r3, [pc, #328]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d7c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d7e:	4b50      	ldr	r3, [pc, #320]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d82:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004d84:	6a3b      	ldr	r3, [r7, #32]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d007      	beq.n	8004d9a <HAL_RCC_OscConfig+0x162>
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	2b18      	cmp	r3, #24
 8004d8e:	d13a      	bne.n	8004e06 <HAL_RCC_OscConfig+0x1ce>
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	f003 0303 	and.w	r3, r3, #3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d135      	bne.n	8004e06 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d9a:	4b49      	ldr	r3, [pc, #292]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0304 	and.w	r3, r3, #4
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d005      	beq.n	8004db2 <HAL_RCC_OscConfig+0x17a>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e34b      	b.n	800544a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004db2:	f7fd f9e3 	bl	800217c <HAL_GetREVID>
 8004db6:	4603      	mov	r3, r0
 8004db8:	f241 0203 	movw	r2, #4099	; 0x1003
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d817      	bhi.n	8004df0 <HAL_RCC_OscConfig+0x1b8>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	2b40      	cmp	r3, #64	; 0x40
 8004dc6:	d108      	bne.n	8004dda <HAL_RCC_OscConfig+0x1a2>
 8004dc8:	4b3d      	ldr	r3, [pc, #244]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004dd0:	4a3b      	ldr	r2, [pc, #236]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004dd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dd6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dd8:	e07a      	b.n	8004ed0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dda:	4b39      	ldr	r3, [pc, #228]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	031b      	lsls	r3, r3, #12
 8004de8:	4935      	ldr	r1, [pc, #212]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dee:	e06f      	b.n	8004ed0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df0:	4b33      	ldr	r3, [pc, #204]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	061b      	lsls	r3, r3, #24
 8004dfe:	4930      	ldr	r1, [pc, #192]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e04:	e064      	b.n	8004ed0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d045      	beq.n	8004e9a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e0e:	4b2c      	ldr	r3, [pc, #176]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f023 0219 	bic.w	r2, r3, #25
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	4929      	ldr	r1, [pc, #164]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e20:	f7fd f97c 	bl	800211c <HAL_GetTick>
 8004e24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e28:	f7fd f978 	bl	800211c <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e307      	b.n	800544a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e3a:	4b21      	ldr	r3, [pc, #132]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0304 	and.w	r3, r3, #4
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d0f0      	beq.n	8004e28 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e46:	f7fd f999 	bl	800217c <HAL_GetREVID>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d817      	bhi.n	8004e84 <HAL_RCC_OscConfig+0x24c>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	2b40      	cmp	r3, #64	; 0x40
 8004e5a:	d108      	bne.n	8004e6e <HAL_RCC_OscConfig+0x236>
 8004e5c:	4b18      	ldr	r3, [pc, #96]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004e64:	4a16      	ldr	r2, [pc, #88]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004e66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e6a:	6053      	str	r3, [r2, #4]
 8004e6c:	e030      	b.n	8004ed0 <HAL_RCC_OscConfig+0x298>
 8004e6e:	4b14      	ldr	r3, [pc, #80]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	031b      	lsls	r3, r3, #12
 8004e7c:	4910      	ldr	r1, [pc, #64]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	604b      	str	r3, [r1, #4]
 8004e82:	e025      	b.n	8004ed0 <HAL_RCC_OscConfig+0x298>
 8004e84:	4b0e      	ldr	r3, [pc, #56]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	061b      	lsls	r3, r3, #24
 8004e92:	490b      	ldr	r1, [pc, #44]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	604b      	str	r3, [r1, #4]
 8004e98:	e01a      	b.n	8004ed0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e9a:	4b09      	ldr	r3, [pc, #36]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a08      	ldr	r2, [pc, #32]	; (8004ec0 <HAL_RCC_OscConfig+0x288>)
 8004ea0:	f023 0301 	bic.w	r3, r3, #1
 8004ea4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea6:	f7fd f939 	bl	800211c <HAL_GetTick>
 8004eaa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004eac:	e00a      	b.n	8004ec4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004eae:	f7fd f935 	bl	800211c <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d903      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e2c4      	b.n	800544a <HAL_RCC_OscConfig+0x812>
 8004ec0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ec4:	4ba4      	ldr	r3, [pc, #656]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0304 	and.w	r3, r3, #4
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1ee      	bne.n	8004eae <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0310 	and.w	r3, r3, #16
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 80a9 	beq.w	8005030 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ede:	4b9e      	ldr	r3, [pc, #632]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ee6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ee8:	4b9b      	ldr	r3, [pc, #620]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eec:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d007      	beq.n	8004f04 <HAL_RCC_OscConfig+0x2cc>
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	2b18      	cmp	r3, #24
 8004ef8:	d13a      	bne.n	8004f70 <HAL_RCC_OscConfig+0x338>
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f003 0303 	and.w	r3, r3, #3
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d135      	bne.n	8004f70 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f04:	4b94      	ldr	r3, [pc, #592]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d005      	beq.n	8004f1c <HAL_RCC_OscConfig+0x2e4>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	69db      	ldr	r3, [r3, #28]
 8004f14:	2b80      	cmp	r3, #128	; 0x80
 8004f16:	d001      	beq.n	8004f1c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e296      	b.n	800544a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f1c:	f7fd f92e 	bl	800217c <HAL_GetREVID>
 8004f20:	4603      	mov	r3, r0
 8004f22:	f241 0203 	movw	r2, #4099	; 0x1003
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d817      	bhi.n	8004f5a <HAL_RCC_OscConfig+0x322>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	2b20      	cmp	r3, #32
 8004f30:	d108      	bne.n	8004f44 <HAL_RCC_OscConfig+0x30c>
 8004f32:	4b89      	ldr	r3, [pc, #548]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004f3a:	4a87      	ldr	r2, [pc, #540]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004f3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f40:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f42:	e075      	b.n	8005030 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f44:	4b84      	ldr	r3, [pc, #528]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	069b      	lsls	r3, r3, #26
 8004f52:	4981      	ldr	r1, [pc, #516]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f58:	e06a      	b.n	8005030 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f5a:	4b7f      	ldr	r3, [pc, #508]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	061b      	lsls	r3, r3, #24
 8004f68:	497b      	ldr	r1, [pc, #492]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f6e:	e05f      	b.n	8005030 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	69db      	ldr	r3, [r3, #28]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d042      	beq.n	8004ffe <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004f78:	4b77      	ldr	r3, [pc, #476]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a76      	ldr	r2, [pc, #472]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f84:	f7fd f8ca 	bl	800211c <HAL_GetTick>
 8004f88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004f8c:	f7fd f8c6 	bl	800211c <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e255      	b.n	800544a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f9e:	4b6e      	ldr	r3, [pc, #440]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0f0      	beq.n	8004f8c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004faa:	f7fd f8e7 	bl	800217c <HAL_GetREVID>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	f241 0203 	movw	r2, #4099	; 0x1003
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d817      	bhi.n	8004fe8 <HAL_RCC_OscConfig+0x3b0>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	2b20      	cmp	r3, #32
 8004fbe:	d108      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x39a>
 8004fc0:	4b65      	ldr	r3, [pc, #404]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004fc8:	4a63      	ldr	r2, [pc, #396]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004fca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fce:	6053      	str	r3, [r2, #4]
 8004fd0:	e02e      	b.n	8005030 <HAL_RCC_OscConfig+0x3f8>
 8004fd2:	4b61      	ldr	r3, [pc, #388]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	069b      	lsls	r3, r3, #26
 8004fe0:	495d      	ldr	r1, [pc, #372]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	604b      	str	r3, [r1, #4]
 8004fe6:	e023      	b.n	8005030 <HAL_RCC_OscConfig+0x3f8>
 8004fe8:	4b5b      	ldr	r3, [pc, #364]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a1b      	ldr	r3, [r3, #32]
 8004ff4:	061b      	lsls	r3, r3, #24
 8004ff6:	4958      	ldr	r1, [pc, #352]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	60cb      	str	r3, [r1, #12]
 8004ffc:	e018      	b.n	8005030 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004ffe:	4b56      	ldr	r3, [pc, #344]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a55      	ldr	r2, [pc, #340]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8005004:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005008:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800500a:	f7fd f887 	bl	800211c <HAL_GetTick>
 800500e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005010:	e008      	b.n	8005024 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005012:	f7fd f883 	bl	800211c <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e212      	b.n	800544a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005024:	4b4c      	ldr	r3, [pc, #304]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1f0      	bne.n	8005012 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0308 	and.w	r3, r3, #8
 8005038:	2b00      	cmp	r3, #0
 800503a:	d036      	beq.n	80050aa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d019      	beq.n	8005078 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005044:	4b44      	ldr	r3, [pc, #272]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 8005046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005048:	4a43      	ldr	r2, [pc, #268]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 800504a:	f043 0301 	orr.w	r3, r3, #1
 800504e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005050:	f7fd f864 	bl	800211c <HAL_GetTick>
 8005054:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005056:	e008      	b.n	800506a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005058:	f7fd f860 	bl	800211c <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e1ef      	b.n	800544a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800506a:	4b3b      	ldr	r3, [pc, #236]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 800506c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0f0      	beq.n	8005058 <HAL_RCC_OscConfig+0x420>
 8005076:	e018      	b.n	80050aa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005078:	4b37      	ldr	r3, [pc, #220]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 800507a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800507c:	4a36      	ldr	r2, [pc, #216]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 800507e:	f023 0301 	bic.w	r3, r3, #1
 8005082:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005084:	f7fd f84a 	bl	800211c <HAL_GetTick>
 8005088:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800508c:	f7fd f846 	bl	800211c <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e1d5      	b.n	800544a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800509e:	4b2e      	ldr	r3, [pc, #184]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 80050a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1f0      	bne.n	800508c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0320 	and.w	r3, r3, #32
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d036      	beq.n	8005124 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d019      	beq.n	80050f2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80050be:	4b26      	ldr	r3, [pc, #152]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a25      	ldr	r2, [pc, #148]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 80050c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80050ca:	f7fd f827 	bl	800211c <HAL_GetTick>
 80050ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80050d0:	e008      	b.n	80050e4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80050d2:	f7fd f823 	bl	800211c <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d901      	bls.n	80050e4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e1b2      	b.n	800544a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80050e4:	4b1c      	ldr	r3, [pc, #112]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d0f0      	beq.n	80050d2 <HAL_RCC_OscConfig+0x49a>
 80050f0:	e018      	b.n	8005124 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80050f2:	4b19      	ldr	r3, [pc, #100]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a18      	ldr	r2, [pc, #96]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 80050f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80050fe:	f7fd f80d 	bl	800211c <HAL_GetTick>
 8005102:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005104:	e008      	b.n	8005118 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005106:	f7fd f809 	bl	800211c <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	2b02      	cmp	r3, #2
 8005112:	d901      	bls.n	8005118 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e198      	b.n	800544a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005118:	4b0f      	ldr	r3, [pc, #60]	; (8005158 <HAL_RCC_OscConfig+0x520>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1f0      	bne.n	8005106 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 8085 	beq.w	800523c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005132:	4b0a      	ldr	r3, [pc, #40]	; (800515c <HAL_RCC_OscConfig+0x524>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a09      	ldr	r2, [pc, #36]	; (800515c <HAL_RCC_OscConfig+0x524>)
 8005138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800513c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800513e:	f7fc ffed 	bl	800211c <HAL_GetTick>
 8005142:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005144:	e00c      	b.n	8005160 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005146:	f7fc ffe9 	bl	800211c <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b64      	cmp	r3, #100	; 0x64
 8005152:	d905      	bls.n	8005160 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e178      	b.n	800544a <HAL_RCC_OscConfig+0x812>
 8005158:	58024400 	.word	0x58024400
 800515c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005160:	4b96      	ldr	r3, [pc, #600]	; (80053bc <HAL_RCC_OscConfig+0x784>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0ec      	beq.n	8005146 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d106      	bne.n	8005182 <HAL_RCC_OscConfig+0x54a>
 8005174:	4b92      	ldr	r3, [pc, #584]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 8005176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005178:	4a91      	ldr	r2, [pc, #580]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 800517a:	f043 0301 	orr.w	r3, r3, #1
 800517e:	6713      	str	r3, [r2, #112]	; 0x70
 8005180:	e02d      	b.n	80051de <HAL_RCC_OscConfig+0x5a6>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10c      	bne.n	80051a4 <HAL_RCC_OscConfig+0x56c>
 800518a:	4b8d      	ldr	r3, [pc, #564]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 800518c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518e:	4a8c      	ldr	r2, [pc, #560]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 8005190:	f023 0301 	bic.w	r3, r3, #1
 8005194:	6713      	str	r3, [r2, #112]	; 0x70
 8005196:	4b8a      	ldr	r3, [pc, #552]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 8005198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519a:	4a89      	ldr	r2, [pc, #548]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 800519c:	f023 0304 	bic.w	r3, r3, #4
 80051a0:	6713      	str	r3, [r2, #112]	; 0x70
 80051a2:	e01c      	b.n	80051de <HAL_RCC_OscConfig+0x5a6>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	2b05      	cmp	r3, #5
 80051aa:	d10c      	bne.n	80051c6 <HAL_RCC_OscConfig+0x58e>
 80051ac:	4b84      	ldr	r3, [pc, #528]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 80051ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b0:	4a83      	ldr	r2, [pc, #524]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 80051b2:	f043 0304 	orr.w	r3, r3, #4
 80051b6:	6713      	str	r3, [r2, #112]	; 0x70
 80051b8:	4b81      	ldr	r3, [pc, #516]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 80051ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051bc:	4a80      	ldr	r2, [pc, #512]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 80051be:	f043 0301 	orr.w	r3, r3, #1
 80051c2:	6713      	str	r3, [r2, #112]	; 0x70
 80051c4:	e00b      	b.n	80051de <HAL_RCC_OscConfig+0x5a6>
 80051c6:	4b7e      	ldr	r3, [pc, #504]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 80051c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ca:	4a7d      	ldr	r2, [pc, #500]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 80051cc:	f023 0301 	bic.w	r3, r3, #1
 80051d0:	6713      	str	r3, [r2, #112]	; 0x70
 80051d2:	4b7b      	ldr	r3, [pc, #492]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 80051d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d6:	4a7a      	ldr	r2, [pc, #488]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 80051d8:	f023 0304 	bic.w	r3, r3, #4
 80051dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d015      	beq.n	8005212 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051e6:	f7fc ff99 	bl	800211c <HAL_GetTick>
 80051ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051ec:	e00a      	b.n	8005204 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051ee:	f7fc ff95 	bl	800211c <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d901      	bls.n	8005204 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e122      	b.n	800544a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005204:	4b6e      	ldr	r3, [pc, #440]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 8005206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d0ee      	beq.n	80051ee <HAL_RCC_OscConfig+0x5b6>
 8005210:	e014      	b.n	800523c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005212:	f7fc ff83 	bl	800211c <HAL_GetTick>
 8005216:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005218:	e00a      	b.n	8005230 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800521a:	f7fc ff7f 	bl	800211c <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	f241 3288 	movw	r2, #5000	; 0x1388
 8005228:	4293      	cmp	r3, r2
 800522a:	d901      	bls.n	8005230 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e10c      	b.n	800544a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005230:	4b63      	ldr	r3, [pc, #396]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 8005232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1ee      	bne.n	800521a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 8101 	beq.w	8005448 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005246:	4b5e      	ldr	r3, [pc, #376]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800524e:	2b18      	cmp	r3, #24
 8005250:	f000 80bc 	beq.w	80053cc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005258:	2b02      	cmp	r3, #2
 800525a:	f040 8095 	bne.w	8005388 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800525e:	4b58      	ldr	r3, [pc, #352]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a57      	ldr	r2, [pc, #348]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 8005264:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005268:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800526a:	f7fc ff57 	bl	800211c <HAL_GetTick>
 800526e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005270:	e008      	b.n	8005284 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005272:	f7fc ff53 	bl	800211c <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	2b02      	cmp	r3, #2
 800527e:	d901      	bls.n	8005284 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e0e2      	b.n	800544a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005284:	4b4e      	ldr	r3, [pc, #312]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1f0      	bne.n	8005272 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005290:	4b4b      	ldr	r3, [pc, #300]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 8005292:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005294:	4b4b      	ldr	r3, [pc, #300]	; (80053c4 <HAL_RCC_OscConfig+0x78c>)
 8005296:	4013      	ands	r3, r2
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80052a0:	0112      	lsls	r2, r2, #4
 80052a2:	430a      	orrs	r2, r1
 80052a4:	4946      	ldr	r1, [pc, #280]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	628b      	str	r3, [r1, #40]	; 0x28
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ae:	3b01      	subs	r3, #1
 80052b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b8:	3b01      	subs	r3, #1
 80052ba:	025b      	lsls	r3, r3, #9
 80052bc:	b29b      	uxth	r3, r3
 80052be:	431a      	orrs	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c4:	3b01      	subs	r3, #1
 80052c6:	041b      	lsls	r3, r3, #16
 80052c8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80052cc:	431a      	orrs	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d2:	3b01      	subs	r3, #1
 80052d4:	061b      	lsls	r3, r3, #24
 80052d6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80052da:	4939      	ldr	r1, [pc, #228]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80052e0:	4b37      	ldr	r3, [pc, #220]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 80052e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e4:	4a36      	ldr	r2, [pc, #216]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 80052e6:	f023 0301 	bic.w	r3, r3, #1
 80052ea:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80052ec:	4b34      	ldr	r3, [pc, #208]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 80052ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052f0:	4b35      	ldr	r3, [pc, #212]	; (80053c8 <HAL_RCC_OscConfig+0x790>)
 80052f2:	4013      	ands	r3, r2
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80052f8:	00d2      	lsls	r2, r2, #3
 80052fa:	4931      	ldr	r1, [pc, #196]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005300:	4b2f      	ldr	r3, [pc, #188]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 8005302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005304:	f023 020c 	bic.w	r2, r3, #12
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530c:	492c      	ldr	r1, [pc, #176]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 800530e:	4313      	orrs	r3, r2
 8005310:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005312:	4b2b      	ldr	r3, [pc, #172]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 8005314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005316:	f023 0202 	bic.w	r2, r3, #2
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531e:	4928      	ldr	r1, [pc, #160]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 8005320:	4313      	orrs	r3, r2
 8005322:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005324:	4b26      	ldr	r3, [pc, #152]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 8005326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005328:	4a25      	ldr	r2, [pc, #148]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 800532a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800532e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005330:	4b23      	ldr	r3, [pc, #140]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 8005332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005334:	4a22      	ldr	r2, [pc, #136]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 8005336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800533a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800533c:	4b20      	ldr	r3, [pc, #128]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 800533e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005340:	4a1f      	ldr	r2, [pc, #124]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 8005342:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005346:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005348:	4b1d      	ldr	r3, [pc, #116]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 800534a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534c:	4a1c      	ldr	r2, [pc, #112]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 800534e:	f043 0301 	orr.w	r3, r3, #1
 8005352:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005354:	4b1a      	ldr	r3, [pc, #104]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a19      	ldr	r2, [pc, #100]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 800535a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800535e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005360:	f7fc fedc 	bl	800211c <HAL_GetTick>
 8005364:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005366:	e008      	b.n	800537a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005368:	f7fc fed8 	bl	800211c <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	2b02      	cmp	r3, #2
 8005374:	d901      	bls.n	800537a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e067      	b.n	800544a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800537a:	4b11      	ldr	r3, [pc, #68]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d0f0      	beq.n	8005368 <HAL_RCC_OscConfig+0x730>
 8005386:	e05f      	b.n	8005448 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005388:	4b0d      	ldr	r3, [pc, #52]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a0c      	ldr	r2, [pc, #48]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 800538e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005394:	f7fc fec2 	bl	800211c <HAL_GetTick>
 8005398:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800539a:	e008      	b.n	80053ae <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800539c:	f7fc febe 	bl	800211c <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e04d      	b.n	800544a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053ae:	4b04      	ldr	r3, [pc, #16]	; (80053c0 <HAL_RCC_OscConfig+0x788>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1f0      	bne.n	800539c <HAL_RCC_OscConfig+0x764>
 80053ba:	e045      	b.n	8005448 <HAL_RCC_OscConfig+0x810>
 80053bc:	58024800 	.word	0x58024800
 80053c0:	58024400 	.word	0x58024400
 80053c4:	fffffc0c 	.word	0xfffffc0c
 80053c8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80053cc:	4b21      	ldr	r3, [pc, #132]	; (8005454 <HAL_RCC_OscConfig+0x81c>)
 80053ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80053d2:	4b20      	ldr	r3, [pc, #128]	; (8005454 <HAL_RCC_OscConfig+0x81c>)
 80053d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d031      	beq.n	8005444 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	f003 0203 	and.w	r2, r3, #3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d12a      	bne.n	8005444 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	091b      	lsrs	r3, r3, #4
 80053f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d122      	bne.n	8005444 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005408:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800540a:	429a      	cmp	r2, r3
 800540c:	d11a      	bne.n	8005444 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	0a5b      	lsrs	r3, r3, #9
 8005412:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800541a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800541c:	429a      	cmp	r2, r3
 800541e:	d111      	bne.n	8005444 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	0c1b      	lsrs	r3, r3, #16
 8005424:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800542e:	429a      	cmp	r2, r3
 8005430:	d108      	bne.n	8005444 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	0e1b      	lsrs	r3, r3, #24
 8005436:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800543e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005440:	429a      	cmp	r2, r3
 8005442:	d001      	beq.n	8005448 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e000      	b.n	800544a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3730      	adds	r7, #48	; 0x30
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	58024400 	.word	0x58024400

08005458 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d101      	bne.n	800546c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e19c      	b.n	80057a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800546c:	4b8a      	ldr	r3, [pc, #552]	; (8005698 <HAL_RCC_ClockConfig+0x240>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 030f 	and.w	r3, r3, #15
 8005474:	683a      	ldr	r2, [r7, #0]
 8005476:	429a      	cmp	r2, r3
 8005478:	d910      	bls.n	800549c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800547a:	4b87      	ldr	r3, [pc, #540]	; (8005698 <HAL_RCC_ClockConfig+0x240>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f023 020f 	bic.w	r2, r3, #15
 8005482:	4985      	ldr	r1, [pc, #532]	; (8005698 <HAL_RCC_ClockConfig+0x240>)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	4313      	orrs	r3, r2
 8005488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800548a:	4b83      	ldr	r3, [pc, #524]	; (8005698 <HAL_RCC_ClockConfig+0x240>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 030f 	and.w	r3, r3, #15
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	429a      	cmp	r2, r3
 8005496:	d001      	beq.n	800549c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e184      	b.n	80057a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d010      	beq.n	80054ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	691a      	ldr	r2, [r3, #16]
 80054ac:	4b7b      	ldr	r3, [pc, #492]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d908      	bls.n	80054ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80054b8:	4b78      	ldr	r3, [pc, #480]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	4975      	ldr	r1, [pc, #468]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0308 	and.w	r3, r3, #8
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d010      	beq.n	80054f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	695a      	ldr	r2, [r3, #20]
 80054da:	4b70      	ldr	r3, [pc, #448]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 80054dc:	69db      	ldr	r3, [r3, #28]
 80054de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d908      	bls.n	80054f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80054e6:	4b6d      	ldr	r3, [pc, #436]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	496a      	ldr	r1, [pc, #424]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0310 	and.w	r3, r3, #16
 8005500:	2b00      	cmp	r3, #0
 8005502:	d010      	beq.n	8005526 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	699a      	ldr	r2, [r3, #24]
 8005508:	4b64      	ldr	r3, [pc, #400]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 800550a:	69db      	ldr	r3, [r3, #28]
 800550c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005510:	429a      	cmp	r2, r3
 8005512:	d908      	bls.n	8005526 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005514:	4b61      	ldr	r3, [pc, #388]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	495e      	ldr	r1, [pc, #376]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 8005522:	4313      	orrs	r3, r2
 8005524:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0320 	and.w	r3, r3, #32
 800552e:	2b00      	cmp	r3, #0
 8005530:	d010      	beq.n	8005554 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	69da      	ldr	r2, [r3, #28]
 8005536:	4b59      	ldr	r3, [pc, #356]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800553e:	429a      	cmp	r2, r3
 8005540:	d908      	bls.n	8005554 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005542:	4b56      	ldr	r3, [pc, #344]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	4953      	ldr	r1, [pc, #332]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 8005550:	4313      	orrs	r3, r2
 8005552:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0302 	and.w	r3, r3, #2
 800555c:	2b00      	cmp	r3, #0
 800555e:	d010      	beq.n	8005582 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	68da      	ldr	r2, [r3, #12]
 8005564:	4b4d      	ldr	r3, [pc, #308]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	f003 030f 	and.w	r3, r3, #15
 800556c:	429a      	cmp	r2, r3
 800556e:	d908      	bls.n	8005582 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005570:	4b4a      	ldr	r3, [pc, #296]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	f023 020f 	bic.w	r2, r3, #15
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	4947      	ldr	r1, [pc, #284]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 800557e:	4313      	orrs	r3, r2
 8005580:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	2b00      	cmp	r3, #0
 800558c:	d055      	beq.n	800563a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800558e:	4b43      	ldr	r3, [pc, #268]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	4940      	ldr	r1, [pc, #256]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 800559c:	4313      	orrs	r3, r2
 800559e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d107      	bne.n	80055b8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055a8:	4b3c      	ldr	r3, [pc, #240]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d121      	bne.n	80055f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e0f6      	b.n	80057a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	2b03      	cmp	r3, #3
 80055be:	d107      	bne.n	80055d0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80055c0:	4b36      	ldr	r3, [pc, #216]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d115      	bne.n	80055f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e0ea      	b.n	80057a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d107      	bne.n	80055e8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055d8:	4b30      	ldr	r3, [pc, #192]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d109      	bne.n	80055f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e0de      	b.n	80057a6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055e8:	4b2c      	ldr	r3, [pc, #176]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0304 	and.w	r3, r3, #4
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d101      	bne.n	80055f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e0d6      	b.n	80057a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055f8:	4b28      	ldr	r3, [pc, #160]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	f023 0207 	bic.w	r2, r3, #7
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	4925      	ldr	r1, [pc, #148]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 8005606:	4313      	orrs	r3, r2
 8005608:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800560a:	f7fc fd87 	bl	800211c <HAL_GetTick>
 800560e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005610:	e00a      	b.n	8005628 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005612:	f7fc fd83 	bl	800211c <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005620:	4293      	cmp	r3, r2
 8005622:	d901      	bls.n	8005628 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e0be      	b.n	80057a6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005628:	4b1c      	ldr	r3, [pc, #112]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	429a      	cmp	r2, r3
 8005638:	d1eb      	bne.n	8005612 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d010      	beq.n	8005668 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68da      	ldr	r2, [r3, #12]
 800564a:	4b14      	ldr	r3, [pc, #80]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	f003 030f 	and.w	r3, r3, #15
 8005652:	429a      	cmp	r2, r3
 8005654:	d208      	bcs.n	8005668 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005656:	4b11      	ldr	r3, [pc, #68]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	f023 020f 	bic.w	r2, r3, #15
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	490e      	ldr	r1, [pc, #56]	; (800569c <HAL_RCC_ClockConfig+0x244>)
 8005664:	4313      	orrs	r3, r2
 8005666:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005668:	4b0b      	ldr	r3, [pc, #44]	; (8005698 <HAL_RCC_ClockConfig+0x240>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 030f 	and.w	r3, r3, #15
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	429a      	cmp	r2, r3
 8005674:	d214      	bcs.n	80056a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005676:	4b08      	ldr	r3, [pc, #32]	; (8005698 <HAL_RCC_ClockConfig+0x240>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f023 020f 	bic.w	r2, r3, #15
 800567e:	4906      	ldr	r1, [pc, #24]	; (8005698 <HAL_RCC_ClockConfig+0x240>)
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	4313      	orrs	r3, r2
 8005684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005686:	4b04      	ldr	r3, [pc, #16]	; (8005698 <HAL_RCC_ClockConfig+0x240>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 030f 	and.w	r3, r3, #15
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	429a      	cmp	r2, r3
 8005692:	d005      	beq.n	80056a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e086      	b.n	80057a6 <HAL_RCC_ClockConfig+0x34e>
 8005698:	52002000 	.word	0x52002000
 800569c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0304 	and.w	r3, r3, #4
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d010      	beq.n	80056ce <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	691a      	ldr	r2, [r3, #16]
 80056b0:	4b3f      	ldr	r3, [pc, #252]	; (80057b0 <HAL_RCC_ClockConfig+0x358>)
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d208      	bcs.n	80056ce <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80056bc:	4b3c      	ldr	r3, [pc, #240]	; (80057b0 <HAL_RCC_ClockConfig+0x358>)
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	4939      	ldr	r1, [pc, #228]	; (80057b0 <HAL_RCC_ClockConfig+0x358>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0308 	and.w	r3, r3, #8
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d010      	beq.n	80056fc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	695a      	ldr	r2, [r3, #20]
 80056de:	4b34      	ldr	r3, [pc, #208]	; (80057b0 <HAL_RCC_ClockConfig+0x358>)
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d208      	bcs.n	80056fc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80056ea:	4b31      	ldr	r3, [pc, #196]	; (80057b0 <HAL_RCC_ClockConfig+0x358>)
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	492e      	ldr	r1, [pc, #184]	; (80057b0 <HAL_RCC_ClockConfig+0x358>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0310 	and.w	r3, r3, #16
 8005704:	2b00      	cmp	r3, #0
 8005706:	d010      	beq.n	800572a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	699a      	ldr	r2, [r3, #24]
 800570c:	4b28      	ldr	r3, [pc, #160]	; (80057b0 <HAL_RCC_ClockConfig+0x358>)
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005714:	429a      	cmp	r2, r3
 8005716:	d208      	bcs.n	800572a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005718:	4b25      	ldr	r3, [pc, #148]	; (80057b0 <HAL_RCC_ClockConfig+0x358>)
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	4922      	ldr	r1, [pc, #136]	; (80057b0 <HAL_RCC_ClockConfig+0x358>)
 8005726:	4313      	orrs	r3, r2
 8005728:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0320 	and.w	r3, r3, #32
 8005732:	2b00      	cmp	r3, #0
 8005734:	d010      	beq.n	8005758 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	69da      	ldr	r2, [r3, #28]
 800573a:	4b1d      	ldr	r3, [pc, #116]	; (80057b0 <HAL_RCC_ClockConfig+0x358>)
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005742:	429a      	cmp	r2, r3
 8005744:	d208      	bcs.n	8005758 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005746:	4b1a      	ldr	r3, [pc, #104]	; (80057b0 <HAL_RCC_ClockConfig+0x358>)
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	4917      	ldr	r1, [pc, #92]	; (80057b0 <HAL_RCC_ClockConfig+0x358>)
 8005754:	4313      	orrs	r3, r2
 8005756:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005758:	f000 f834 	bl	80057c4 <HAL_RCC_GetSysClockFreq>
 800575c:	4602      	mov	r2, r0
 800575e:	4b14      	ldr	r3, [pc, #80]	; (80057b0 <HAL_RCC_ClockConfig+0x358>)
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	0a1b      	lsrs	r3, r3, #8
 8005764:	f003 030f 	and.w	r3, r3, #15
 8005768:	4912      	ldr	r1, [pc, #72]	; (80057b4 <HAL_RCC_ClockConfig+0x35c>)
 800576a:	5ccb      	ldrb	r3, [r1, r3]
 800576c:	f003 031f 	and.w	r3, r3, #31
 8005770:	fa22 f303 	lsr.w	r3, r2, r3
 8005774:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005776:	4b0e      	ldr	r3, [pc, #56]	; (80057b0 <HAL_RCC_ClockConfig+0x358>)
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	f003 030f 	and.w	r3, r3, #15
 800577e:	4a0d      	ldr	r2, [pc, #52]	; (80057b4 <HAL_RCC_ClockConfig+0x35c>)
 8005780:	5cd3      	ldrb	r3, [r2, r3]
 8005782:	f003 031f 	and.w	r3, r3, #31
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	fa22 f303 	lsr.w	r3, r2, r3
 800578c:	4a0a      	ldr	r2, [pc, #40]	; (80057b8 <HAL_RCC_ClockConfig+0x360>)
 800578e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005790:	4a0a      	ldr	r2, [pc, #40]	; (80057bc <HAL_RCC_ClockConfig+0x364>)
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005796:	4b0a      	ldr	r3, [pc, #40]	; (80057c0 <HAL_RCC_ClockConfig+0x368>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4618      	mov	r0, r3
 800579c:	f7fc fc74 	bl	8002088 <HAL_InitTick>
 80057a0:	4603      	mov	r3, r0
 80057a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3718      	adds	r7, #24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	58024400 	.word	0x58024400
 80057b4:	08009f7c 	.word	0x08009f7c
 80057b8:	20000004 	.word	0x20000004
 80057bc:	20000000 	.word	0x20000000
 80057c0:	20000008 	.word	0x20000008

080057c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b089      	sub	sp, #36	; 0x24
 80057c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057ca:	4bb3      	ldr	r3, [pc, #716]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057d2:	2b18      	cmp	r3, #24
 80057d4:	f200 8155 	bhi.w	8005a82 <HAL_RCC_GetSysClockFreq+0x2be>
 80057d8:	a201      	add	r2, pc, #4	; (adr r2, 80057e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80057da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057de:	bf00      	nop
 80057e0:	08005845 	.word	0x08005845
 80057e4:	08005a83 	.word	0x08005a83
 80057e8:	08005a83 	.word	0x08005a83
 80057ec:	08005a83 	.word	0x08005a83
 80057f0:	08005a83 	.word	0x08005a83
 80057f4:	08005a83 	.word	0x08005a83
 80057f8:	08005a83 	.word	0x08005a83
 80057fc:	08005a83 	.word	0x08005a83
 8005800:	0800586b 	.word	0x0800586b
 8005804:	08005a83 	.word	0x08005a83
 8005808:	08005a83 	.word	0x08005a83
 800580c:	08005a83 	.word	0x08005a83
 8005810:	08005a83 	.word	0x08005a83
 8005814:	08005a83 	.word	0x08005a83
 8005818:	08005a83 	.word	0x08005a83
 800581c:	08005a83 	.word	0x08005a83
 8005820:	08005871 	.word	0x08005871
 8005824:	08005a83 	.word	0x08005a83
 8005828:	08005a83 	.word	0x08005a83
 800582c:	08005a83 	.word	0x08005a83
 8005830:	08005a83 	.word	0x08005a83
 8005834:	08005a83 	.word	0x08005a83
 8005838:	08005a83 	.word	0x08005a83
 800583c:	08005a83 	.word	0x08005a83
 8005840:	08005877 	.word	0x08005877
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005844:	4b94      	ldr	r3, [pc, #592]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0320 	and.w	r3, r3, #32
 800584c:	2b00      	cmp	r3, #0
 800584e:	d009      	beq.n	8005864 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005850:	4b91      	ldr	r3, [pc, #580]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	08db      	lsrs	r3, r3, #3
 8005856:	f003 0303 	and.w	r3, r3, #3
 800585a:	4a90      	ldr	r2, [pc, #576]	; (8005a9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800585c:	fa22 f303 	lsr.w	r3, r2, r3
 8005860:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005862:	e111      	b.n	8005a88 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005864:	4b8d      	ldr	r3, [pc, #564]	; (8005a9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005866:	61bb      	str	r3, [r7, #24]
    break;
 8005868:	e10e      	b.n	8005a88 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800586a:	4b8d      	ldr	r3, [pc, #564]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800586c:	61bb      	str	r3, [r7, #24]
    break;
 800586e:	e10b      	b.n	8005a88 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005870:	4b8c      	ldr	r3, [pc, #560]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005872:	61bb      	str	r3, [r7, #24]
    break;
 8005874:	e108      	b.n	8005a88 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005876:	4b88      	ldr	r3, [pc, #544]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587a:	f003 0303 	and.w	r3, r3, #3
 800587e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005880:	4b85      	ldr	r3, [pc, #532]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005884:	091b      	lsrs	r3, r3, #4
 8005886:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800588a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800588c:	4b82      	ldr	r3, [pc, #520]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800588e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005890:	f003 0301 	and.w	r3, r3, #1
 8005894:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005896:	4b80      	ldr	r3, [pc, #512]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589a:	08db      	lsrs	r3, r3, #3
 800589c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	fb02 f303 	mul.w	r3, r2, r3
 80058a6:	ee07 3a90 	vmov	s15, r3
 80058aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ae:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 80e1 	beq.w	8005a7c <HAL_RCC_GetSysClockFreq+0x2b8>
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	2b02      	cmp	r3, #2
 80058be:	f000 8083 	beq.w	80059c8 <HAL_RCC_GetSysClockFreq+0x204>
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	f200 80a1 	bhi.w	8005a0c <HAL_RCC_GetSysClockFreq+0x248>
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d003      	beq.n	80058d8 <HAL_RCC_GetSysClockFreq+0x114>
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d056      	beq.n	8005984 <HAL_RCC_GetSysClockFreq+0x1c0>
 80058d6:	e099      	b.n	8005a0c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058d8:	4b6f      	ldr	r3, [pc, #444]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0320 	and.w	r3, r3, #32
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d02d      	beq.n	8005940 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80058e4:	4b6c      	ldr	r3, [pc, #432]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	08db      	lsrs	r3, r3, #3
 80058ea:	f003 0303 	and.w	r3, r3, #3
 80058ee:	4a6b      	ldr	r2, [pc, #428]	; (8005a9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80058f0:	fa22 f303 	lsr.w	r3, r2, r3
 80058f4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	ee07 3a90 	vmov	s15, r3
 80058fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	ee07 3a90 	vmov	s15, r3
 8005906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800590a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800590e:	4b62      	ldr	r3, [pc, #392]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005916:	ee07 3a90 	vmov	s15, r3
 800591a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800591e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005922:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005aa8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800592a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800592e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800593a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800593e:	e087      	b.n	8005a50 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	ee07 3a90 	vmov	s15, r3
 8005946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800594a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005aac <HAL_RCC_GetSysClockFreq+0x2e8>
 800594e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005952:	4b51      	ldr	r3, [pc, #324]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800595a:	ee07 3a90 	vmov	s15, r3
 800595e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005962:	ed97 6a02 	vldr	s12, [r7, #8]
 8005966:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005aa8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800596a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800596e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005972:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800597a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800597e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005982:	e065      	b.n	8005a50 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	ee07 3a90 	vmov	s15, r3
 800598a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800598e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005ab0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005996:	4b40      	ldr	r3, [pc, #256]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800599e:	ee07 3a90 	vmov	s15, r3
 80059a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80059aa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005aa8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059c6:	e043      	b.n	8005a50 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	ee07 3a90 	vmov	s15, r3
 80059ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059d2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005ab4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80059d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059da:	4b2f      	ldr	r3, [pc, #188]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059e2:	ee07 3a90 	vmov	s15, r3
 80059e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80059ee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005aa8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a0a:	e021      	b.n	8005a50 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	ee07 3a90 	vmov	s15, r3
 8005a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a16:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005ab0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a1e:	4b1e      	ldr	r3, [pc, #120]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a26:	ee07 3a90 	vmov	s15, r3
 8005a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a32:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005aa8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a4e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005a50:	4b11      	ldr	r3, [pc, #68]	; (8005a98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a54:	0a5b      	lsrs	r3, r3, #9
 8005a56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	ee07 3a90 	vmov	s15, r3
 8005a64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a68:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a74:	ee17 3a90 	vmov	r3, s15
 8005a78:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005a7a:	e005      	b.n	8005a88 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	61bb      	str	r3, [r7, #24]
    break;
 8005a80:	e002      	b.n	8005a88 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005a82:	4b07      	ldr	r3, [pc, #28]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a84:	61bb      	str	r3, [r7, #24]
    break;
 8005a86:	bf00      	nop
  }

  return sysclockfreq;
 8005a88:	69bb      	ldr	r3, [r7, #24]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3724      	adds	r7, #36	; 0x24
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	58024400 	.word	0x58024400
 8005a9c:	03d09000 	.word	0x03d09000
 8005aa0:	003d0900 	.word	0x003d0900
 8005aa4:	02dc6c00 	.word	0x02dc6c00
 8005aa8:	46000000 	.word	0x46000000
 8005aac:	4c742400 	.word	0x4c742400
 8005ab0:	4a742400 	.word	0x4a742400
 8005ab4:	4c371b00 	.word	0x4c371b00

08005ab8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005abe:	f7ff fe81 	bl	80057c4 <HAL_RCC_GetSysClockFreq>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	4b10      	ldr	r3, [pc, #64]	; (8005b08 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	0a1b      	lsrs	r3, r3, #8
 8005aca:	f003 030f 	and.w	r3, r3, #15
 8005ace:	490f      	ldr	r1, [pc, #60]	; (8005b0c <HAL_RCC_GetHCLKFreq+0x54>)
 8005ad0:	5ccb      	ldrb	r3, [r1, r3]
 8005ad2:	f003 031f 	and.w	r3, r3, #31
 8005ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8005ada:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005adc:	4b0a      	ldr	r3, [pc, #40]	; (8005b08 <HAL_RCC_GetHCLKFreq+0x50>)
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	f003 030f 	and.w	r3, r3, #15
 8005ae4:	4a09      	ldr	r2, [pc, #36]	; (8005b0c <HAL_RCC_GetHCLKFreq+0x54>)
 8005ae6:	5cd3      	ldrb	r3, [r2, r3]
 8005ae8:	f003 031f 	and.w	r3, r3, #31
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	fa22 f303 	lsr.w	r3, r2, r3
 8005af2:	4a07      	ldr	r2, [pc, #28]	; (8005b10 <HAL_RCC_GetHCLKFreq+0x58>)
 8005af4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005af6:	4a07      	ldr	r2, [pc, #28]	; (8005b14 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005afc:	4b04      	ldr	r3, [pc, #16]	; (8005b10 <HAL_RCC_GetHCLKFreq+0x58>)
 8005afe:	681b      	ldr	r3, [r3, #0]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3708      	adds	r7, #8
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	58024400 	.word	0x58024400
 8005b0c:	08009f7c 	.word	0x08009f7c
 8005b10:	20000004 	.word	0x20000004
 8005b14:	20000000 	.word	0x20000000

08005b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005b1c:	f7ff ffcc 	bl	8005ab8 <HAL_RCC_GetHCLKFreq>
 8005b20:	4602      	mov	r2, r0
 8005b22:	4b06      	ldr	r3, [pc, #24]	; (8005b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	091b      	lsrs	r3, r3, #4
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	4904      	ldr	r1, [pc, #16]	; (8005b40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b2e:	5ccb      	ldrb	r3, [r1, r3]
 8005b30:	f003 031f 	and.w	r3, r3, #31
 8005b34:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	58024400 	.word	0x58024400
 8005b40:	08009f7c 	.word	0x08009f7c

08005b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005b48:	f7ff ffb6 	bl	8005ab8 <HAL_RCC_GetHCLKFreq>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	4b06      	ldr	r3, [pc, #24]	; (8005b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	0a1b      	lsrs	r3, r3, #8
 8005b54:	f003 0307 	and.w	r3, r3, #7
 8005b58:	4904      	ldr	r1, [pc, #16]	; (8005b6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b5a:	5ccb      	ldrb	r3, [r1, r3]
 8005b5c:	f003 031f 	and.w	r3, r3, #31
 8005b60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	58024400 	.word	0x58024400
 8005b6c:	08009f7c 	.word	0x08009f7c

08005b70 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b78:	2300      	movs	r3, #0
 8005b7a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d03f      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b94:	d02a      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005b96:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b9a:	d824      	bhi.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005b9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ba0:	d018      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005ba2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ba6:	d81e      	bhi.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d003      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005bac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bb0:	d007      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005bb2:	e018      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bb4:	4bab      	ldr	r3, [pc, #684]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb8:	4aaa      	ldr	r2, [pc, #680]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005bc0:	e015      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	3304      	adds	r3, #4
 8005bc6:	2102      	movs	r1, #2
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f001 f9cf 	bl	8006f6c <RCCEx_PLL2_Config>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005bd2:	e00c      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	3324      	adds	r3, #36	; 0x24
 8005bd8:	2102      	movs	r1, #2
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f001 fa78 	bl	80070d0 <RCCEx_PLL3_Config>
 8005be0:	4603      	mov	r3, r0
 8005be2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005be4:	e003      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	75fb      	strb	r3, [r7, #23]
      break;
 8005bea:	e000      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005bec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bee:	7dfb      	ldrb	r3, [r7, #23]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d109      	bne.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005bf4:	4b9b      	ldr	r3, [pc, #620]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c00:	4998      	ldr	r1, [pc, #608]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	650b      	str	r3, [r1, #80]	; 0x50
 8005c06:	e001      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c08:	7dfb      	ldrb	r3, [r7, #23]
 8005c0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d03d      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c1c:	2b04      	cmp	r3, #4
 8005c1e:	d826      	bhi.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005c20:	a201      	add	r2, pc, #4	; (adr r2, 8005c28 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c26:	bf00      	nop
 8005c28:	08005c3d 	.word	0x08005c3d
 8005c2c:	08005c4b 	.word	0x08005c4b
 8005c30:	08005c5d 	.word	0x08005c5d
 8005c34:	08005c75 	.word	0x08005c75
 8005c38:	08005c75 	.word	0x08005c75
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c3c:	4b89      	ldr	r3, [pc, #548]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c40:	4a88      	ldr	r2, [pc, #544]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c48:	e015      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	3304      	adds	r3, #4
 8005c4e:	2100      	movs	r1, #0
 8005c50:	4618      	mov	r0, r3
 8005c52:	f001 f98b 	bl	8006f6c <RCCEx_PLL2_Config>
 8005c56:	4603      	mov	r3, r0
 8005c58:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c5a:	e00c      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	3324      	adds	r3, #36	; 0x24
 8005c60:	2100      	movs	r1, #0
 8005c62:	4618      	mov	r0, r3
 8005c64:	f001 fa34 	bl	80070d0 <RCCEx_PLL3_Config>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c6c:	e003      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	75fb      	strb	r3, [r7, #23]
      break;
 8005c72:	e000      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005c74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c76:	7dfb      	ldrb	r3, [r7, #23]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d109      	bne.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c7c:	4b79      	ldr	r3, [pc, #484]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c80:	f023 0207 	bic.w	r2, r3, #7
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c88:	4976      	ldr	r1, [pc, #472]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	650b      	str	r3, [r1, #80]	; 0x50
 8005c8e:	e001      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c90:	7dfb      	ldrb	r3, [r7, #23]
 8005c92:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d042      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ca4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ca8:	d02b      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cae:	d825      	bhi.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005cb0:	2bc0      	cmp	r3, #192	; 0xc0
 8005cb2:	d028      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005cb4:	2bc0      	cmp	r3, #192	; 0xc0
 8005cb6:	d821      	bhi.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005cb8:	2b80      	cmp	r3, #128	; 0x80
 8005cba:	d016      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005cbc:	2b80      	cmp	r3, #128	; 0x80
 8005cbe:	d81d      	bhi.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d002      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005cc4:	2b40      	cmp	r3, #64	; 0x40
 8005cc6:	d007      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005cc8:	e018      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cca:	4b66      	ldr	r3, [pc, #408]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cce:	4a65      	ldr	r2, [pc, #404]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cd4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005cd6:	e017      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	3304      	adds	r3, #4
 8005cdc:	2100      	movs	r1, #0
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f001 f944 	bl	8006f6c <RCCEx_PLL2_Config>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005ce8:	e00e      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	3324      	adds	r3, #36	; 0x24
 8005cee:	2100      	movs	r1, #0
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f001 f9ed 	bl	80070d0 <RCCEx_PLL3_Config>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005cfa:	e005      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8005d00:	e002      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005d02:	bf00      	nop
 8005d04:	e000      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005d06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d08:	7dfb      	ldrb	r3, [r7, #23]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d109      	bne.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005d0e:	4b55      	ldr	r3, [pc, #340]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d12:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d1a:	4952      	ldr	r1, [pc, #328]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	650b      	str	r3, [r1, #80]	; 0x50
 8005d20:	e001      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d22:	7dfb      	ldrb	r3, [r7, #23]
 8005d24:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d049      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005d38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d3c:	d030      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005d3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d42:	d82a      	bhi.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005d44:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005d48:	d02c      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005d4a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005d4e:	d824      	bhi.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005d50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d54:	d018      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005d56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d5a:	d81e      	bhi.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d003      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005d60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d64:	d007      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005d66:	e018      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d68:	4b3e      	ldr	r3, [pc, #248]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6c:	4a3d      	ldr	r2, [pc, #244]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d74:	e017      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	3304      	adds	r3, #4
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f001 f8f5 	bl	8006f6c <RCCEx_PLL2_Config>
 8005d82:	4603      	mov	r3, r0
 8005d84:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005d86:	e00e      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	3324      	adds	r3, #36	; 0x24
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f001 f99e 	bl	80070d0 <RCCEx_PLL3_Config>
 8005d94:	4603      	mov	r3, r0
 8005d96:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d98:	e005      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	75fb      	strb	r3, [r7, #23]
      break;
 8005d9e:	e002      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005da0:	bf00      	nop
 8005da2:	e000      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005da4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005da6:	7dfb      	ldrb	r3, [r7, #23]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10a      	bne.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005dac:	4b2d      	ldr	r3, [pc, #180]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005db0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005dba:	492a      	ldr	r1, [pc, #168]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	658b      	str	r3, [r1, #88]	; 0x58
 8005dc0:	e001      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc2:	7dfb      	ldrb	r3, [r7, #23]
 8005dc4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d04c      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005dd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ddc:	d030      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005dde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005de2:	d82a      	bhi.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005de4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005de8:	d02c      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005dea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005dee:	d824      	bhi.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005df0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005df4:	d018      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005df6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005dfa:	d81e      	bhi.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d003      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005e00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e04:	d007      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005e06:	e018      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e08:	4b16      	ldr	r3, [pc, #88]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0c:	4a15      	ldr	r2, [pc, #84]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e14:	e017      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	3304      	adds	r3, #4
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f001 f8a5 	bl	8006f6c <RCCEx_PLL2_Config>
 8005e22:	4603      	mov	r3, r0
 8005e24:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005e26:	e00e      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	3324      	adds	r3, #36	; 0x24
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f001 f94e 	bl	80070d0 <RCCEx_PLL3_Config>
 8005e34:	4603      	mov	r3, r0
 8005e36:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e38:	e005      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	75fb      	strb	r3, [r7, #23]
      break;
 8005e3e:	e002      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005e40:	bf00      	nop
 8005e42:	e000      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005e44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e46:	7dfb      	ldrb	r3, [r7, #23]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d10d      	bne.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005e4c:	4b05      	ldr	r3, [pc, #20]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e50:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005e5a:	4902      	ldr	r1, [pc, #8]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	658b      	str	r3, [r1, #88]	; 0x58
 8005e60:	e004      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005e62:	bf00      	nop
 8005e64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e68:	7dfb      	ldrb	r3, [r7, #23]
 8005e6a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d032      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e7c:	2b30      	cmp	r3, #48	; 0x30
 8005e7e:	d01c      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005e80:	2b30      	cmp	r3, #48	; 0x30
 8005e82:	d817      	bhi.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005e84:	2b20      	cmp	r3, #32
 8005e86:	d00c      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005e88:	2b20      	cmp	r3, #32
 8005e8a:	d813      	bhi.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d016      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005e90:	2b10      	cmp	r3, #16
 8005e92:	d10f      	bne.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e94:	4baf      	ldr	r3, [pc, #700]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e98:	4aae      	ldr	r2, [pc, #696]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005e9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005ea0:	e00e      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	3304      	adds	r3, #4
 8005ea6:	2102      	movs	r1, #2
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f001 f85f 	bl	8006f6c <RCCEx_PLL2_Config>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005eb2:	e005      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8005eb8:	e002      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005eba:	bf00      	nop
 8005ebc:	e000      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005ebe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ec0:	7dfb      	ldrb	r3, [r7, #23]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d109      	bne.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005ec6:	4ba3      	ldr	r3, [pc, #652]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ed2:	49a0      	ldr	r1, [pc, #640]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005ed8:	e001      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eda:	7dfb      	ldrb	r3, [r7, #23]
 8005edc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d047      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ef2:	d030      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005ef4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ef8:	d82a      	bhi.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005efa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005efe:	d02c      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005f00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f04:	d824      	bhi.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005f06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f0a:	d018      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f10:	d81e      	bhi.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d003      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8005f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f1a:	d007      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005f1c:	e018      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f1e:	4b8d      	ldr	r3, [pc, #564]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f22:	4a8c      	ldr	r2, [pc, #560]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005f2a:	e017      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	3304      	adds	r3, #4
 8005f30:	2100      	movs	r1, #0
 8005f32:	4618      	mov	r0, r3
 8005f34:	f001 f81a 	bl	8006f6c <RCCEx_PLL2_Config>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005f3c:	e00e      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	3324      	adds	r3, #36	; 0x24
 8005f42:	2100      	movs	r1, #0
 8005f44:	4618      	mov	r0, r3
 8005f46:	f001 f8c3 	bl	80070d0 <RCCEx_PLL3_Config>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005f4e:	e005      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	75fb      	strb	r3, [r7, #23]
      break;
 8005f54:	e002      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005f56:	bf00      	nop
 8005f58:	e000      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005f5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f5c:	7dfb      	ldrb	r3, [r7, #23]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d109      	bne.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005f62:	4b7c      	ldr	r3, [pc, #496]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f66:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f6e:	4979      	ldr	r1, [pc, #484]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	650b      	str	r3, [r1, #80]	; 0x50
 8005f74:	e001      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f76:	7dfb      	ldrb	r3, [r7, #23]
 8005f78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d049      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f8e:	d02e      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005f90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f94:	d828      	bhi.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005f96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f9a:	d02a      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005f9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005fa0:	d822      	bhi.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005fa2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005fa6:	d026      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005fa8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005fac:	d81c      	bhi.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005fae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fb2:	d010      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8005fb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fb8:	d816      	bhi.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d01d      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fc2:	d111      	bne.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	3304      	adds	r3, #4
 8005fc8:	2101      	movs	r1, #1
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f000 ffce 	bl	8006f6c <RCCEx_PLL2_Config>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005fd4:	e012      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	3324      	adds	r3, #36	; 0x24
 8005fda:	2101      	movs	r1, #1
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f001 f877 	bl	80070d0 <RCCEx_PLL3_Config>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005fe6:	e009      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	75fb      	strb	r3, [r7, #23]
      break;
 8005fec:	e006      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005fee:	bf00      	nop
 8005ff0:	e004      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005ff2:	bf00      	nop
 8005ff4:	e002      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005ff6:	bf00      	nop
 8005ff8:	e000      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005ffa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ffc:	7dfb      	ldrb	r3, [r7, #23]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d109      	bne.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006002:	4b54      	ldr	r3, [pc, #336]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006006:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800600e:	4951      	ldr	r1, [pc, #324]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006010:	4313      	orrs	r3, r2
 8006012:	650b      	str	r3, [r1, #80]	; 0x50
 8006014:	e001      	b.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006016:	7dfb      	ldrb	r3, [r7, #23]
 8006018:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d04b      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800602c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006030:	d02e      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8006032:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006036:	d828      	bhi.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800603c:	d02a      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800603e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006042:	d822      	bhi.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006044:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006048:	d026      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800604a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800604e:	d81c      	bhi.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006050:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006054:	d010      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8006056:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800605a:	d816      	bhi.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800605c:	2b00      	cmp	r3, #0
 800605e:	d01d      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8006060:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006064:	d111      	bne.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	3304      	adds	r3, #4
 800606a:	2101      	movs	r1, #1
 800606c:	4618      	mov	r0, r3
 800606e:	f000 ff7d 	bl	8006f6c <RCCEx_PLL2_Config>
 8006072:	4603      	mov	r3, r0
 8006074:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006076:	e012      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	3324      	adds	r3, #36	; 0x24
 800607c:	2101      	movs	r1, #1
 800607e:	4618      	mov	r0, r3
 8006080:	f001 f826 	bl	80070d0 <RCCEx_PLL3_Config>
 8006084:	4603      	mov	r3, r0
 8006086:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006088:	e009      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	75fb      	strb	r3, [r7, #23]
      break;
 800608e:	e006      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006090:	bf00      	nop
 8006092:	e004      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006094:	bf00      	nop
 8006096:	e002      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006098:	bf00      	nop
 800609a:	e000      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800609c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800609e:	7dfb      	ldrb	r3, [r7, #23]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d10a      	bne.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80060a4:	4b2b      	ldr	r3, [pc, #172]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80060a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80060b2:	4928      	ldr	r1, [pc, #160]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80060b4:	4313      	orrs	r3, r2
 80060b6:	658b      	str	r3, [r1, #88]	; 0x58
 80060b8:	e001      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ba:	7dfb      	ldrb	r3, [r7, #23]
 80060bc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d02f      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060d2:	d00e      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80060d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060d8:	d814      	bhi.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d015      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80060de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060e2:	d10f      	bne.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060e4:	4b1b      	ldr	r3, [pc, #108]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80060e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e8:	4a1a      	ldr	r2, [pc, #104]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80060ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80060f0:	e00c      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	3304      	adds	r3, #4
 80060f6:	2101      	movs	r1, #1
 80060f8:	4618      	mov	r0, r3
 80060fa:	f000 ff37 	bl	8006f6c <RCCEx_PLL2_Config>
 80060fe:	4603      	mov	r3, r0
 8006100:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006102:	e003      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	75fb      	strb	r3, [r7, #23]
      break;
 8006108:	e000      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800610a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800610c:	7dfb      	ldrb	r3, [r7, #23]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d109      	bne.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006112:	4b10      	ldr	r3, [pc, #64]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006116:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800611e:	490d      	ldr	r1, [pc, #52]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006120:	4313      	orrs	r3, r2
 8006122:	650b      	str	r3, [r1, #80]	; 0x50
 8006124:	e001      	b.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006126:	7dfb      	ldrb	r3, [r7, #23]
 8006128:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d033      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800613a:	2b03      	cmp	r3, #3
 800613c:	d81c      	bhi.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800613e:	a201      	add	r2, pc, #4	; (adr r2, 8006144 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8006140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006144:	0800617f 	.word	0x0800617f
 8006148:	08006159 	.word	0x08006159
 800614c:	08006167 	.word	0x08006167
 8006150:	0800617f 	.word	0x0800617f
 8006154:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006158:	4bb8      	ldr	r3, [pc, #736]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800615a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615c:	4ab7      	ldr	r2, [pc, #732]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800615e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006162:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006164:	e00c      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	3304      	adds	r3, #4
 800616a:	2102      	movs	r1, #2
 800616c:	4618      	mov	r0, r3
 800616e:	f000 fefd 	bl	8006f6c <RCCEx_PLL2_Config>
 8006172:	4603      	mov	r3, r0
 8006174:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006176:	e003      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	75fb      	strb	r3, [r7, #23]
      break;
 800617c:	e000      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800617e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006180:	7dfb      	ldrb	r3, [r7, #23]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d109      	bne.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006186:	4bad      	ldr	r3, [pc, #692]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800618a:	f023 0203 	bic.w	r2, r3, #3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006192:	49aa      	ldr	r1, [pc, #680]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006194:	4313      	orrs	r3, r2
 8006196:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006198:	e001      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800619a:	7dfb      	ldrb	r3, [r7, #23]
 800619c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f000 8086 	beq.w	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061ac:	4ba4      	ldr	r3, [pc, #656]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4aa3      	ldr	r2, [pc, #652]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80061b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061b8:	f7fb ffb0 	bl	800211c <HAL_GetTick>
 80061bc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061be:	e009      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061c0:	f7fb ffac 	bl	800211c <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	2b64      	cmp	r3, #100	; 0x64
 80061cc:	d902      	bls.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	75fb      	strb	r3, [r7, #23]
        break;
 80061d2:	e005      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061d4:	4b9a      	ldr	r3, [pc, #616]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d0ef      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80061e0:	7dfb      	ldrb	r3, [r7, #23]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d166      	bne.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80061e6:	4b95      	ldr	r3, [pc, #596]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80061e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80061f0:	4053      	eors	r3, r2
 80061f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d013      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061fa:	4b90      	ldr	r3, [pc, #576]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80061fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006202:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006204:	4b8d      	ldr	r3, [pc, #564]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006208:	4a8c      	ldr	r2, [pc, #560]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800620a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800620e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006210:	4b8a      	ldr	r3, [pc, #552]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006214:	4a89      	ldr	r2, [pc, #548]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800621a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800621c:	4a87      	ldr	r2, [pc, #540]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800622c:	d115      	bne.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800622e:	f7fb ff75 	bl	800211c <HAL_GetTick>
 8006232:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006234:	e00b      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006236:	f7fb ff71 	bl	800211c <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	f241 3288 	movw	r2, #5000	; 0x1388
 8006244:	4293      	cmp	r3, r2
 8006246:	d902      	bls.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	75fb      	strb	r3, [r7, #23]
            break;
 800624c:	e005      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800624e:	4b7b      	ldr	r3, [pc, #492]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	2b00      	cmp	r3, #0
 8006258:	d0ed      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800625a:	7dfb      	ldrb	r3, [r7, #23]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d126      	bne.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800626a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800626e:	d10d      	bne.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006270:	4b72      	ldr	r3, [pc, #456]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800627e:	0919      	lsrs	r1, r3, #4
 8006280:	4b70      	ldr	r3, [pc, #448]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8006282:	400b      	ands	r3, r1
 8006284:	496d      	ldr	r1, [pc, #436]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006286:	4313      	orrs	r3, r2
 8006288:	610b      	str	r3, [r1, #16]
 800628a:	e005      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800628c:	4b6b      	ldr	r3, [pc, #428]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	4a6a      	ldr	r2, [pc, #424]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006292:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006296:	6113      	str	r3, [r2, #16]
 8006298:	4b68      	ldr	r3, [pc, #416]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800629a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062a6:	4965      	ldr	r1, [pc, #404]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80062a8:	4313      	orrs	r3, r2
 80062aa:	670b      	str	r3, [r1, #112]	; 0x70
 80062ac:	e004      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062ae:	7dfb      	ldrb	r3, [r7, #23]
 80062b0:	75bb      	strb	r3, [r7, #22]
 80062b2:	e001      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b4:	7dfb      	ldrb	r3, [r7, #23]
 80062b6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d07e      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062c8:	2b28      	cmp	r3, #40	; 0x28
 80062ca:	d867      	bhi.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80062cc:	a201      	add	r2, pc, #4	; (adr r2, 80062d4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80062ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d2:	bf00      	nop
 80062d4:	080063a3 	.word	0x080063a3
 80062d8:	0800639d 	.word	0x0800639d
 80062dc:	0800639d 	.word	0x0800639d
 80062e0:	0800639d 	.word	0x0800639d
 80062e4:	0800639d 	.word	0x0800639d
 80062e8:	0800639d 	.word	0x0800639d
 80062ec:	0800639d 	.word	0x0800639d
 80062f0:	0800639d 	.word	0x0800639d
 80062f4:	08006379 	.word	0x08006379
 80062f8:	0800639d 	.word	0x0800639d
 80062fc:	0800639d 	.word	0x0800639d
 8006300:	0800639d 	.word	0x0800639d
 8006304:	0800639d 	.word	0x0800639d
 8006308:	0800639d 	.word	0x0800639d
 800630c:	0800639d 	.word	0x0800639d
 8006310:	0800639d 	.word	0x0800639d
 8006314:	0800638b 	.word	0x0800638b
 8006318:	0800639d 	.word	0x0800639d
 800631c:	0800639d 	.word	0x0800639d
 8006320:	0800639d 	.word	0x0800639d
 8006324:	0800639d 	.word	0x0800639d
 8006328:	0800639d 	.word	0x0800639d
 800632c:	0800639d 	.word	0x0800639d
 8006330:	0800639d 	.word	0x0800639d
 8006334:	080063a3 	.word	0x080063a3
 8006338:	0800639d 	.word	0x0800639d
 800633c:	0800639d 	.word	0x0800639d
 8006340:	0800639d 	.word	0x0800639d
 8006344:	0800639d 	.word	0x0800639d
 8006348:	0800639d 	.word	0x0800639d
 800634c:	0800639d 	.word	0x0800639d
 8006350:	0800639d 	.word	0x0800639d
 8006354:	080063a3 	.word	0x080063a3
 8006358:	0800639d 	.word	0x0800639d
 800635c:	0800639d 	.word	0x0800639d
 8006360:	0800639d 	.word	0x0800639d
 8006364:	0800639d 	.word	0x0800639d
 8006368:	0800639d 	.word	0x0800639d
 800636c:	0800639d 	.word	0x0800639d
 8006370:	0800639d 	.word	0x0800639d
 8006374:	080063a3 	.word	0x080063a3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	3304      	adds	r3, #4
 800637c:	2101      	movs	r1, #1
 800637e:	4618      	mov	r0, r3
 8006380:	f000 fdf4 	bl	8006f6c <RCCEx_PLL2_Config>
 8006384:	4603      	mov	r3, r0
 8006386:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006388:	e00c      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	3324      	adds	r3, #36	; 0x24
 800638e:	2101      	movs	r1, #1
 8006390:	4618      	mov	r0, r3
 8006392:	f000 fe9d 	bl	80070d0 <RCCEx_PLL3_Config>
 8006396:	4603      	mov	r3, r0
 8006398:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800639a:	e003      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	75fb      	strb	r3, [r7, #23]
      break;
 80063a0:	e000      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80063a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063a4:	7dfb      	ldrb	r3, [r7, #23]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d109      	bne.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80063aa:	4b24      	ldr	r3, [pc, #144]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80063ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ae:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063b6:	4921      	ldr	r1, [pc, #132]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	654b      	str	r3, [r1, #84]	; 0x54
 80063bc:	e001      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063be:	7dfb      	ldrb	r3, [r7, #23]
 80063c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d03e      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063d2:	2b05      	cmp	r3, #5
 80063d4:	d820      	bhi.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80063d6:	a201      	add	r2, pc, #4	; (adr r2, 80063dc <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80063d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063dc:	0800641f 	.word	0x0800641f
 80063e0:	080063f5 	.word	0x080063f5
 80063e4:	08006407 	.word	0x08006407
 80063e8:	0800641f 	.word	0x0800641f
 80063ec:	0800641f 	.word	0x0800641f
 80063f0:	0800641f 	.word	0x0800641f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	3304      	adds	r3, #4
 80063f8:	2101      	movs	r1, #1
 80063fa:	4618      	mov	r0, r3
 80063fc:	f000 fdb6 	bl	8006f6c <RCCEx_PLL2_Config>
 8006400:	4603      	mov	r3, r0
 8006402:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006404:	e00c      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	3324      	adds	r3, #36	; 0x24
 800640a:	2101      	movs	r1, #1
 800640c:	4618      	mov	r0, r3
 800640e:	f000 fe5f 	bl	80070d0 <RCCEx_PLL3_Config>
 8006412:	4603      	mov	r3, r0
 8006414:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006416:	e003      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	75fb      	strb	r3, [r7, #23]
      break;
 800641c:	e000      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800641e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006420:	7dfb      	ldrb	r3, [r7, #23]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d110      	bne.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006426:	4b05      	ldr	r3, [pc, #20]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800642a:	f023 0207 	bic.w	r2, r3, #7
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006432:	4902      	ldr	r1, [pc, #8]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006434:	4313      	orrs	r3, r2
 8006436:	654b      	str	r3, [r1, #84]	; 0x54
 8006438:	e008      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800643a:	bf00      	nop
 800643c:	58024400 	.word	0x58024400
 8006440:	58024800 	.word	0x58024800
 8006444:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006448:	7dfb      	ldrb	r3, [r7, #23]
 800644a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0304 	and.w	r3, r3, #4
 8006454:	2b00      	cmp	r3, #0
 8006456:	d039      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800645e:	2b05      	cmp	r3, #5
 8006460:	d820      	bhi.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006462:	a201      	add	r2, pc, #4	; (adr r2, 8006468 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006468:	080064ab 	.word	0x080064ab
 800646c:	08006481 	.word	0x08006481
 8006470:	08006493 	.word	0x08006493
 8006474:	080064ab 	.word	0x080064ab
 8006478:	080064ab 	.word	0x080064ab
 800647c:	080064ab 	.word	0x080064ab
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	3304      	adds	r3, #4
 8006484:	2101      	movs	r1, #1
 8006486:	4618      	mov	r0, r3
 8006488:	f000 fd70 	bl	8006f6c <RCCEx_PLL2_Config>
 800648c:	4603      	mov	r3, r0
 800648e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006490:	e00c      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	3324      	adds	r3, #36	; 0x24
 8006496:	2101      	movs	r1, #1
 8006498:	4618      	mov	r0, r3
 800649a:	f000 fe19 	bl	80070d0 <RCCEx_PLL3_Config>
 800649e:	4603      	mov	r3, r0
 80064a0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80064a2:	e003      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	75fb      	strb	r3, [r7, #23]
      break;
 80064a8:	e000      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80064aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064ac:	7dfb      	ldrb	r3, [r7, #23]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10a      	bne.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064b2:	4bb7      	ldr	r3, [pc, #732]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80064b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b6:	f023 0207 	bic.w	r2, r3, #7
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064c0:	49b3      	ldr	r1, [pc, #716]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80064c2:	4313      	orrs	r3, r2
 80064c4:	658b      	str	r3, [r1, #88]	; 0x58
 80064c6:	e001      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c8:	7dfb      	ldrb	r3, [r7, #23]
 80064ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0320 	and.w	r3, r3, #32
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d04b      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064e2:	d02e      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80064e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064e8:	d828      	bhi.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80064ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ee:	d02a      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80064f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064f4:	d822      	bhi.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80064f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80064fa:	d026      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80064fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006500:	d81c      	bhi.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006502:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006506:	d010      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800650c:	d816      	bhi.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800650e:	2b00      	cmp	r3, #0
 8006510:	d01d      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006512:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006516:	d111      	bne.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	3304      	adds	r3, #4
 800651c:	2100      	movs	r1, #0
 800651e:	4618      	mov	r0, r3
 8006520:	f000 fd24 	bl	8006f6c <RCCEx_PLL2_Config>
 8006524:	4603      	mov	r3, r0
 8006526:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006528:	e012      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	3324      	adds	r3, #36	; 0x24
 800652e:	2102      	movs	r1, #2
 8006530:	4618      	mov	r0, r3
 8006532:	f000 fdcd 	bl	80070d0 <RCCEx_PLL3_Config>
 8006536:	4603      	mov	r3, r0
 8006538:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800653a:	e009      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	75fb      	strb	r3, [r7, #23]
      break;
 8006540:	e006      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006542:	bf00      	nop
 8006544:	e004      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006546:	bf00      	nop
 8006548:	e002      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800654a:	bf00      	nop
 800654c:	e000      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800654e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006550:	7dfb      	ldrb	r3, [r7, #23]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10a      	bne.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006556:	4b8e      	ldr	r3, [pc, #568]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800655a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006564:	498a      	ldr	r1, [pc, #552]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006566:	4313      	orrs	r3, r2
 8006568:	654b      	str	r3, [r1, #84]	; 0x54
 800656a:	e001      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800656c:	7dfb      	ldrb	r3, [r7, #23]
 800656e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006578:	2b00      	cmp	r3, #0
 800657a:	d04b      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006582:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006586:	d02e      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006588:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800658c:	d828      	bhi.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800658e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006592:	d02a      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006598:	d822      	bhi.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800659a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800659e:	d026      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80065a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065a4:	d81c      	bhi.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80065a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065aa:	d010      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80065ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065b0:	d816      	bhi.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d01d      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80065b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065ba:	d111      	bne.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3304      	adds	r3, #4
 80065c0:	2100      	movs	r1, #0
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 fcd2 	bl	8006f6c <RCCEx_PLL2_Config>
 80065c8:	4603      	mov	r3, r0
 80065ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80065cc:	e012      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	3324      	adds	r3, #36	; 0x24
 80065d2:	2102      	movs	r1, #2
 80065d4:	4618      	mov	r0, r3
 80065d6:	f000 fd7b 	bl	80070d0 <RCCEx_PLL3_Config>
 80065da:	4603      	mov	r3, r0
 80065dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80065de:	e009      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	75fb      	strb	r3, [r7, #23]
      break;
 80065e4:	e006      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80065e6:	bf00      	nop
 80065e8:	e004      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80065ea:	bf00      	nop
 80065ec:	e002      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80065ee:	bf00      	nop
 80065f0:	e000      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80065f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065f4:	7dfb      	ldrb	r3, [r7, #23]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10a      	bne.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80065fa:	4b65      	ldr	r3, [pc, #404]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80065fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065fe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006608:	4961      	ldr	r1, [pc, #388]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800660a:	4313      	orrs	r3, r2
 800660c:	658b      	str	r3, [r1, #88]	; 0x58
 800660e:	e001      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006610:	7dfb      	ldrb	r3, [r7, #23]
 8006612:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800661c:	2b00      	cmp	r3, #0
 800661e:	d04b      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006626:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800662a:	d02e      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800662c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006630:	d828      	bhi.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006636:	d02a      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800663c:	d822      	bhi.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800663e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006642:	d026      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006644:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006648:	d81c      	bhi.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800664a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800664e:	d010      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006650:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006654:	d816      	bhi.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006656:	2b00      	cmp	r3, #0
 8006658:	d01d      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800665a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800665e:	d111      	bne.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	3304      	adds	r3, #4
 8006664:	2100      	movs	r1, #0
 8006666:	4618      	mov	r0, r3
 8006668:	f000 fc80 	bl	8006f6c <RCCEx_PLL2_Config>
 800666c:	4603      	mov	r3, r0
 800666e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006670:	e012      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	3324      	adds	r3, #36	; 0x24
 8006676:	2102      	movs	r1, #2
 8006678:	4618      	mov	r0, r3
 800667a:	f000 fd29 	bl	80070d0 <RCCEx_PLL3_Config>
 800667e:	4603      	mov	r3, r0
 8006680:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006682:	e009      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	75fb      	strb	r3, [r7, #23]
      break;
 8006688:	e006      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800668a:	bf00      	nop
 800668c:	e004      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800668e:	bf00      	nop
 8006690:	e002      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006692:	bf00      	nop
 8006694:	e000      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006696:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006698:	7dfb      	ldrb	r3, [r7, #23]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10a      	bne.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800669e:	4b3c      	ldr	r3, [pc, #240]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80066a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066ac:	4938      	ldr	r1, [pc, #224]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	658b      	str	r3, [r1, #88]	; 0x58
 80066b2:	e001      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066b4:	7dfb      	ldrb	r3, [r7, #23]
 80066b6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0308 	and.w	r3, r3, #8
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d01a      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ce:	d10a      	bne.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	3324      	adds	r3, #36	; 0x24
 80066d4:	2102      	movs	r1, #2
 80066d6:	4618      	mov	r0, r3
 80066d8:	f000 fcfa 	bl	80070d0 <RCCEx_PLL3_Config>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d001      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80066e6:	4b2a      	ldr	r3, [pc, #168]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80066e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066f4:	4926      	ldr	r1, [pc, #152]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0310 	and.w	r3, r3, #16
 8006702:	2b00      	cmp	r3, #0
 8006704:	d01a      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800670c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006710:	d10a      	bne.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	3324      	adds	r3, #36	; 0x24
 8006716:	2102      	movs	r1, #2
 8006718:	4618      	mov	r0, r3
 800671a:	f000 fcd9 	bl	80070d0 <RCCEx_PLL3_Config>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d001      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006728:	4b19      	ldr	r3, [pc, #100]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800672a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800672c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006736:	4916      	ldr	r1, [pc, #88]	; (8006790 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006738:	4313      	orrs	r3, r2
 800673a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d036      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800674e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006752:	d01f      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006754:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006758:	d817      	bhi.n	800678a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800675a:	2b00      	cmp	r3, #0
 800675c:	d003      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800675e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006762:	d009      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006764:	e011      	b.n	800678a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	3304      	adds	r3, #4
 800676a:	2100      	movs	r1, #0
 800676c:	4618      	mov	r0, r3
 800676e:	f000 fbfd 	bl	8006f6c <RCCEx_PLL2_Config>
 8006772:	4603      	mov	r3, r0
 8006774:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006776:	e00e      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	3324      	adds	r3, #36	; 0x24
 800677c:	2102      	movs	r1, #2
 800677e:	4618      	mov	r0, r3
 8006780:	f000 fca6 	bl	80070d0 <RCCEx_PLL3_Config>
 8006784:	4603      	mov	r3, r0
 8006786:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006788:	e005      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	75fb      	strb	r3, [r7, #23]
      break;
 800678e:	e002      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006790:	58024400 	.word	0x58024400
      break;
 8006794:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006796:	7dfb      	ldrb	r3, [r7, #23]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10a      	bne.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800679c:	4b93      	ldr	r3, [pc, #588]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800679e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80067aa:	4990      	ldr	r1, [pc, #576]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067ac:	4313      	orrs	r3, r2
 80067ae:	658b      	str	r3, [r1, #88]	; 0x58
 80067b0:	e001      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067b2:	7dfb      	ldrb	r3, [r7, #23]
 80067b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d033      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80067cc:	d01c      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80067ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80067d2:	d816      	bhi.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80067d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067d8:	d003      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80067da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067de:	d007      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80067e0:	e00f      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067e2:	4b82      	ldr	r3, [pc, #520]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e6:	4a81      	ldr	r2, [pc, #516]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80067e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80067ee:	e00c      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	3324      	adds	r3, #36	; 0x24
 80067f4:	2101      	movs	r1, #1
 80067f6:	4618      	mov	r0, r3
 80067f8:	f000 fc6a 	bl	80070d0 <RCCEx_PLL3_Config>
 80067fc:	4603      	mov	r3, r0
 80067fe:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006800:	e003      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	75fb      	strb	r3, [r7, #23]
      break;
 8006806:	e000      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006808:	bf00      	nop
    }

    if(ret == HAL_OK)
 800680a:	7dfb      	ldrb	r3, [r7, #23]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10a      	bne.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006810:	4b76      	ldr	r3, [pc, #472]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006814:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800681e:	4973      	ldr	r1, [pc, #460]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006820:	4313      	orrs	r3, r2
 8006822:	654b      	str	r3, [r1, #84]	; 0x54
 8006824:	e001      	b.n	800682a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006826:	7dfb      	ldrb	r3, [r7, #23]
 8006828:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d029      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800683e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006842:	d007      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006844:	e00f      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006846:	4b69      	ldr	r3, [pc, #420]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684a:	4a68      	ldr	r2, [pc, #416]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800684c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006850:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006852:	e00b      	b.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	3304      	adds	r3, #4
 8006858:	2102      	movs	r1, #2
 800685a:	4618      	mov	r0, r3
 800685c:	f000 fb86 	bl	8006f6c <RCCEx_PLL2_Config>
 8006860:	4603      	mov	r3, r0
 8006862:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006864:	e002      	b.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	75fb      	strb	r3, [r7, #23]
      break;
 800686a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800686c:	7dfb      	ldrb	r3, [r7, #23]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d109      	bne.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006872:	4b5e      	ldr	r3, [pc, #376]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006876:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800687e:	495b      	ldr	r1, [pc, #364]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006880:	4313      	orrs	r3, r2
 8006882:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006884:	e001      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006886:	7dfb      	ldrb	r3, [r7, #23]
 8006888:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00a      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	3324      	adds	r3, #36	; 0x24
 800689a:	2102      	movs	r1, #2
 800689c:	4618      	mov	r0, r3
 800689e:	f000 fc17 	bl	80070d0 <RCCEx_PLL3_Config>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d030      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068c0:	d017      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80068c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068c6:	d811      	bhi.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80068c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068cc:	d013      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80068ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068d2:	d80b      	bhi.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d010      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80068d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068dc:	d106      	bne.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068de:	4b43      	ldr	r3, [pc, #268]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80068e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e2:	4a42      	ldr	r2, [pc, #264]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80068e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80068ea:	e007      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	75fb      	strb	r3, [r7, #23]
      break;
 80068f0:	e004      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80068f2:	bf00      	nop
 80068f4:	e002      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80068f6:	bf00      	nop
 80068f8:	e000      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80068fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068fc:	7dfb      	ldrb	r3, [r7, #23]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d109      	bne.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006902:	4b3a      	ldr	r3, [pc, #232]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006906:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800690e:	4937      	ldr	r1, [pc, #220]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006910:	4313      	orrs	r3, r2
 8006912:	654b      	str	r3, [r1, #84]	; 0x54
 8006914:	e001      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006916:	7dfb      	ldrb	r3, [r7, #23]
 8006918:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d008      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006926:	4b31      	ldr	r3, [pc, #196]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800692a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006932:	492e      	ldr	r1, [pc, #184]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006934:	4313      	orrs	r3, r2
 8006936:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d009      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006944:	4b29      	ldr	r3, [pc, #164]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006952:	4926      	ldr	r1, [pc, #152]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006954:	4313      	orrs	r3, r2
 8006956:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d008      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006964:	4b21      	ldr	r3, [pc, #132]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006968:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006970:	491e      	ldr	r1, [pc, #120]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006972:	4313      	orrs	r3, r2
 8006974:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00d      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006982:	4b1a      	ldr	r3, [pc, #104]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	4a19      	ldr	r2, [pc, #100]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006988:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800698c:	6113      	str	r3, [r2, #16]
 800698e:	4b17      	ldr	r3, [pc, #92]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006990:	691a      	ldr	r2, [r3, #16]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006998:	4914      	ldr	r1, [pc, #80]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800699a:	4313      	orrs	r3, r2
 800699c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	da08      	bge.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80069a6:	4b11      	ldr	r3, [pc, #68]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80069a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069b2:	490e      	ldr	r1, [pc, #56]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d009      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80069c4:	4b09      	ldr	r3, [pc, #36]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80069c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069d2:	4906      	ldr	r1, [pc, #24]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80069d8:	7dbb      	ldrb	r3, [r7, #22]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d101      	bne.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80069de:	2300      	movs	r3, #0
 80069e0:	e000      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3718      	adds	r7, #24
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	58024400 	.word	0x58024400

080069f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80069f4:	f7ff f860 	bl	8005ab8 <HAL_RCC_GetHCLKFreq>
 80069f8:	4602      	mov	r2, r0
 80069fa:	4b06      	ldr	r3, [pc, #24]	; (8006a14 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	091b      	lsrs	r3, r3, #4
 8006a00:	f003 0307 	and.w	r3, r3, #7
 8006a04:	4904      	ldr	r1, [pc, #16]	; (8006a18 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006a06:	5ccb      	ldrb	r3, [r1, r3]
 8006a08:	f003 031f 	and.w	r3, r3, #31
 8006a0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	58024400 	.word	0x58024400
 8006a18:	08009f7c 	.word	0x08009f7c

08006a1c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b089      	sub	sp, #36	; 0x24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a24:	4ba1      	ldr	r3, [pc, #644]	; (8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a28:	f003 0303 	and.w	r3, r3, #3
 8006a2c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006a2e:	4b9f      	ldr	r3, [pc, #636]	; (8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a32:	0b1b      	lsrs	r3, r3, #12
 8006a34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a38:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006a3a:	4b9c      	ldr	r3, [pc, #624]	; (8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3e:	091b      	lsrs	r3, r3, #4
 8006a40:	f003 0301 	and.w	r3, r3, #1
 8006a44:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006a46:	4b99      	ldr	r3, [pc, #612]	; (8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a4a:	08db      	lsrs	r3, r3, #3
 8006a4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	fb02 f303 	mul.w	r3, r2, r3
 8006a56:	ee07 3a90 	vmov	s15, r3
 8006a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f000 8111 	beq.w	8006c8c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	f000 8083 	beq.w	8006b78 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	f200 80a1 	bhi.w	8006bbc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d003      	beq.n	8006a88 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d056      	beq.n	8006b34 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006a86:	e099      	b.n	8006bbc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a88:	4b88      	ldr	r3, [pc, #544]	; (8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 0320 	and.w	r3, r3, #32
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d02d      	beq.n	8006af0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a94:	4b85      	ldr	r3, [pc, #532]	; (8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	08db      	lsrs	r3, r3, #3
 8006a9a:	f003 0303 	and.w	r3, r3, #3
 8006a9e:	4a84      	ldr	r2, [pc, #528]	; (8006cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8006aa4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	ee07 3a90 	vmov	s15, r3
 8006aac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	ee07 3a90 	vmov	s15, r3
 8006ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006abe:	4b7b      	ldr	r3, [pc, #492]	; (8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ac6:	ee07 3a90 	vmov	s15, r3
 8006aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ad2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ade:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006aee:	e087      	b.n	8006c00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	ee07 3a90 	vmov	s15, r3
 8006af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006afa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b02:	4b6a      	ldr	r3, [pc, #424]	; (8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b0a:	ee07 3a90 	vmov	s15, r3
 8006b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b12:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b16:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b32:	e065      	b.n	8006c00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	ee07 3a90 	vmov	s15, r3
 8006b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b3e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b46:	4b59      	ldr	r3, [pc, #356]	; (8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b4e:	ee07 3a90 	vmov	s15, r3
 8006b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b56:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b5a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b76:	e043      	b.n	8006c00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	ee07 3a90 	vmov	s15, r3
 8006b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b82:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b8a:	4b48      	ldr	r3, [pc, #288]	; (8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b92:	ee07 3a90 	vmov	s15, r3
 8006b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b9e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006baa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bb6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bba:	e021      	b.n	8006c00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	ee07 3a90 	vmov	s15, r3
 8006bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bc6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006cbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bce:	4b37      	ldr	r3, [pc, #220]	; (8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bd6:	ee07 3a90 	vmov	s15, r3
 8006bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bde:	ed97 6a03 	vldr	s12, [r7, #12]
 8006be2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bfa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bfe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006c00:	4b2a      	ldr	r3, [pc, #168]	; (8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c04:	0a5b      	lsrs	r3, r3, #9
 8006c06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c0a:	ee07 3a90 	vmov	s15, r3
 8006c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c26:	ee17 2a90 	vmov	r2, s15
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006c2e:	4b1f      	ldr	r3, [pc, #124]	; (8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c32:	0c1b      	lsrs	r3, r3, #16
 8006c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c38:	ee07 3a90 	vmov	s15, r3
 8006c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c48:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c54:	ee17 2a90 	vmov	r2, s15
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006c5c:	4b13      	ldr	r3, [pc, #76]	; (8006cac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c60:	0e1b      	lsrs	r3, r3, #24
 8006c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c66:	ee07 3a90 	vmov	s15, r3
 8006c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c76:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c82:	ee17 2a90 	vmov	r2, s15
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006c8a:	e008      	b.n	8006c9e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	609a      	str	r2, [r3, #8]
}
 8006c9e:	bf00      	nop
 8006ca0:	3724      	adds	r7, #36	; 0x24
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	58024400 	.word	0x58024400
 8006cb0:	03d09000 	.word	0x03d09000
 8006cb4:	46000000 	.word	0x46000000
 8006cb8:	4c742400 	.word	0x4c742400
 8006cbc:	4a742400 	.word	0x4a742400
 8006cc0:	4c371b00 	.word	0x4c371b00

08006cc4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b089      	sub	sp, #36	; 0x24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ccc:	4ba1      	ldr	r3, [pc, #644]	; (8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd0:	f003 0303 	and.w	r3, r3, #3
 8006cd4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006cd6:	4b9f      	ldr	r3, [pc, #636]	; (8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cda:	0d1b      	lsrs	r3, r3, #20
 8006cdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ce0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006ce2:	4b9c      	ldr	r3, [pc, #624]	; (8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce6:	0a1b      	lsrs	r3, r3, #8
 8006ce8:	f003 0301 	and.w	r3, r3, #1
 8006cec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006cee:	4b99      	ldr	r3, [pc, #612]	; (8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cf2:	08db      	lsrs	r3, r3, #3
 8006cf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	fb02 f303 	mul.w	r3, r2, r3
 8006cfe:	ee07 3a90 	vmov	s15, r3
 8006d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f000 8111 	beq.w	8006f34 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	f000 8083 	beq.w	8006e20 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	f200 80a1 	bhi.w	8006e64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d003      	beq.n	8006d30 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d056      	beq.n	8006ddc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006d2e:	e099      	b.n	8006e64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d30:	4b88      	ldr	r3, [pc, #544]	; (8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0320 	and.w	r3, r3, #32
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d02d      	beq.n	8006d98 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d3c:	4b85      	ldr	r3, [pc, #532]	; (8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	08db      	lsrs	r3, r3, #3
 8006d42:	f003 0303 	and.w	r3, r3, #3
 8006d46:	4a84      	ldr	r2, [pc, #528]	; (8006f58 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006d48:	fa22 f303 	lsr.w	r3, r2, r3
 8006d4c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	ee07 3a90 	vmov	s15, r3
 8006d54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	ee07 3a90 	vmov	s15, r3
 8006d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d66:	4b7b      	ldr	r3, [pc, #492]	; (8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d6e:	ee07 3a90 	vmov	s15, r3
 8006d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d76:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d7a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006f5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d92:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006d96:	e087      	b.n	8006ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	ee07 3a90 	vmov	s15, r3
 8006d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006da2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006f60 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006daa:	4b6a      	ldr	r3, [pc, #424]	; (8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006db2:	ee07 3a90 	vmov	s15, r3
 8006db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dba:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dbe:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006f5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006dda:	e065      	b.n	8006ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	ee07 3a90 	vmov	s15, r3
 8006de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006de6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dee:	4b59      	ldr	r3, [pc, #356]	; (8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006df6:	ee07 3a90 	vmov	s15, r3
 8006dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e02:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006f5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e1e:	e043      	b.n	8006ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	ee07 3a90 	vmov	s15, r3
 8006e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e2a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006f68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e32:	4b48      	ldr	r3, [pc, #288]	; (8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e3a:	ee07 3a90 	vmov	s15, r3
 8006e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e42:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e46:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006f5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e62:	e021      	b.n	8006ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	ee07 3a90 	vmov	s15, r3
 8006e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e6e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006f64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e76:	4b37      	ldr	r3, [pc, #220]	; (8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e7e:	ee07 3a90 	vmov	s15, r3
 8006e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e86:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e8a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006f5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ea2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ea6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006ea8:	4b2a      	ldr	r3, [pc, #168]	; (8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eac:	0a5b      	lsrs	r3, r3, #9
 8006eae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eb2:	ee07 3a90 	vmov	s15, r3
 8006eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ebe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ec2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ec6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006eca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ece:	ee17 2a90 	vmov	r2, s15
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006ed6:	4b1f      	ldr	r3, [pc, #124]	; (8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eda:	0c1b      	lsrs	r3, r3, #16
 8006edc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ee0:	ee07 3a90 	vmov	s15, r3
 8006ee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ee8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006eec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ef0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ef4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ef8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006efc:	ee17 2a90 	vmov	r2, s15
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006f04:	4b13      	ldr	r3, [pc, #76]	; (8006f54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f08:	0e1b      	lsrs	r3, r3, #24
 8006f0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f0e:	ee07 3a90 	vmov	s15, r3
 8006f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f2a:	ee17 2a90 	vmov	r2, s15
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006f32:	e008      	b.n	8006f46 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	609a      	str	r2, [r3, #8]
}
 8006f46:	bf00      	nop
 8006f48:	3724      	adds	r7, #36	; 0x24
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	58024400 	.word	0x58024400
 8006f58:	03d09000 	.word	0x03d09000
 8006f5c:	46000000 	.word	0x46000000
 8006f60:	4c742400 	.word	0x4c742400
 8006f64:	4a742400 	.word	0x4a742400
 8006f68:	4c371b00 	.word	0x4c371b00

08006f6c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f76:	2300      	movs	r3, #0
 8006f78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f7a:	4b53      	ldr	r3, [pc, #332]	; (80070c8 <RCCEx_PLL2_Config+0x15c>)
 8006f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7e:	f003 0303 	and.w	r3, r3, #3
 8006f82:	2b03      	cmp	r3, #3
 8006f84:	d101      	bne.n	8006f8a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e099      	b.n	80070be <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006f8a:	4b4f      	ldr	r3, [pc, #316]	; (80070c8 <RCCEx_PLL2_Config+0x15c>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a4e      	ldr	r2, [pc, #312]	; (80070c8 <RCCEx_PLL2_Config+0x15c>)
 8006f90:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f96:	f7fb f8c1 	bl	800211c <HAL_GetTick>
 8006f9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f9c:	e008      	b.n	8006fb0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006f9e:	f7fb f8bd 	bl	800211c <HAL_GetTick>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d901      	bls.n	8006fb0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e086      	b.n	80070be <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006fb0:	4b45      	ldr	r3, [pc, #276]	; (80070c8 <RCCEx_PLL2_Config+0x15c>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1f0      	bne.n	8006f9e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006fbc:	4b42      	ldr	r3, [pc, #264]	; (80070c8 <RCCEx_PLL2_Config+0x15c>)
 8006fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	031b      	lsls	r3, r3, #12
 8006fca:	493f      	ldr	r1, [pc, #252]	; (80070c8 <RCCEx_PLL2_Config+0x15c>)
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	628b      	str	r3, [r1, #40]	; 0x28
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	025b      	lsls	r3, r3, #9
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	431a      	orrs	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	3b01      	subs	r3, #1
 8006fec:	041b      	lsls	r3, r3, #16
 8006fee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006ff2:	431a      	orrs	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	061b      	lsls	r3, r3, #24
 8006ffc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007000:	4931      	ldr	r1, [pc, #196]	; (80070c8 <RCCEx_PLL2_Config+0x15c>)
 8007002:	4313      	orrs	r3, r2
 8007004:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007006:	4b30      	ldr	r3, [pc, #192]	; (80070c8 <RCCEx_PLL2_Config+0x15c>)
 8007008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	492d      	ldr	r1, [pc, #180]	; (80070c8 <RCCEx_PLL2_Config+0x15c>)
 8007014:	4313      	orrs	r3, r2
 8007016:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007018:	4b2b      	ldr	r3, [pc, #172]	; (80070c8 <RCCEx_PLL2_Config+0x15c>)
 800701a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701c:	f023 0220 	bic.w	r2, r3, #32
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	4928      	ldr	r1, [pc, #160]	; (80070c8 <RCCEx_PLL2_Config+0x15c>)
 8007026:	4313      	orrs	r3, r2
 8007028:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800702a:	4b27      	ldr	r3, [pc, #156]	; (80070c8 <RCCEx_PLL2_Config+0x15c>)
 800702c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702e:	4a26      	ldr	r2, [pc, #152]	; (80070c8 <RCCEx_PLL2_Config+0x15c>)
 8007030:	f023 0310 	bic.w	r3, r3, #16
 8007034:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007036:	4b24      	ldr	r3, [pc, #144]	; (80070c8 <RCCEx_PLL2_Config+0x15c>)
 8007038:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800703a:	4b24      	ldr	r3, [pc, #144]	; (80070cc <RCCEx_PLL2_Config+0x160>)
 800703c:	4013      	ands	r3, r2
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	69d2      	ldr	r2, [r2, #28]
 8007042:	00d2      	lsls	r2, r2, #3
 8007044:	4920      	ldr	r1, [pc, #128]	; (80070c8 <RCCEx_PLL2_Config+0x15c>)
 8007046:	4313      	orrs	r3, r2
 8007048:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800704a:	4b1f      	ldr	r3, [pc, #124]	; (80070c8 <RCCEx_PLL2_Config+0x15c>)
 800704c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704e:	4a1e      	ldr	r2, [pc, #120]	; (80070c8 <RCCEx_PLL2_Config+0x15c>)
 8007050:	f043 0310 	orr.w	r3, r3, #16
 8007054:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d106      	bne.n	800706a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800705c:	4b1a      	ldr	r3, [pc, #104]	; (80070c8 <RCCEx_PLL2_Config+0x15c>)
 800705e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007060:	4a19      	ldr	r2, [pc, #100]	; (80070c8 <RCCEx_PLL2_Config+0x15c>)
 8007062:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007066:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007068:	e00f      	b.n	800708a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d106      	bne.n	800707e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007070:	4b15      	ldr	r3, [pc, #84]	; (80070c8 <RCCEx_PLL2_Config+0x15c>)
 8007072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007074:	4a14      	ldr	r2, [pc, #80]	; (80070c8 <RCCEx_PLL2_Config+0x15c>)
 8007076:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800707a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800707c:	e005      	b.n	800708a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800707e:	4b12      	ldr	r3, [pc, #72]	; (80070c8 <RCCEx_PLL2_Config+0x15c>)
 8007080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007082:	4a11      	ldr	r2, [pc, #68]	; (80070c8 <RCCEx_PLL2_Config+0x15c>)
 8007084:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007088:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800708a:	4b0f      	ldr	r3, [pc, #60]	; (80070c8 <RCCEx_PLL2_Config+0x15c>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a0e      	ldr	r2, [pc, #56]	; (80070c8 <RCCEx_PLL2_Config+0x15c>)
 8007090:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007094:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007096:	f7fb f841 	bl	800211c <HAL_GetTick>
 800709a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800709c:	e008      	b.n	80070b0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800709e:	f7fb f83d 	bl	800211c <HAL_GetTick>
 80070a2:	4602      	mov	r2, r0
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d901      	bls.n	80070b0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80070ac:	2303      	movs	r3, #3
 80070ae:	e006      	b.n	80070be <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80070b0:	4b05      	ldr	r3, [pc, #20]	; (80070c8 <RCCEx_PLL2_Config+0x15c>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d0f0      	beq.n	800709e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80070bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	58024400 	.word	0x58024400
 80070cc:	ffff0007 	.word	0xffff0007

080070d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80070da:	2300      	movs	r3, #0
 80070dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80070de:	4b53      	ldr	r3, [pc, #332]	; (800722c <RCCEx_PLL3_Config+0x15c>)
 80070e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e2:	f003 0303 	and.w	r3, r3, #3
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d101      	bne.n	80070ee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e099      	b.n	8007222 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80070ee:	4b4f      	ldr	r3, [pc, #316]	; (800722c <RCCEx_PLL3_Config+0x15c>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a4e      	ldr	r2, [pc, #312]	; (800722c <RCCEx_PLL3_Config+0x15c>)
 80070f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070fa:	f7fb f80f 	bl	800211c <HAL_GetTick>
 80070fe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007100:	e008      	b.n	8007114 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007102:	f7fb f80b 	bl	800211c <HAL_GetTick>
 8007106:	4602      	mov	r2, r0
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	2b02      	cmp	r3, #2
 800710e:	d901      	bls.n	8007114 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e086      	b.n	8007222 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007114:	4b45      	ldr	r3, [pc, #276]	; (800722c <RCCEx_PLL3_Config+0x15c>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1f0      	bne.n	8007102 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007120:	4b42      	ldr	r3, [pc, #264]	; (800722c <RCCEx_PLL3_Config+0x15c>)
 8007122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007124:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	051b      	lsls	r3, r3, #20
 800712e:	493f      	ldr	r1, [pc, #252]	; (800722c <RCCEx_PLL3_Config+0x15c>)
 8007130:	4313      	orrs	r3, r2
 8007132:	628b      	str	r3, [r1, #40]	; 0x28
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	3b01      	subs	r3, #1
 800713a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	3b01      	subs	r3, #1
 8007144:	025b      	lsls	r3, r3, #9
 8007146:	b29b      	uxth	r3, r3
 8007148:	431a      	orrs	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	3b01      	subs	r3, #1
 8007150:	041b      	lsls	r3, r3, #16
 8007152:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007156:	431a      	orrs	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	3b01      	subs	r3, #1
 800715e:	061b      	lsls	r3, r3, #24
 8007160:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007164:	4931      	ldr	r1, [pc, #196]	; (800722c <RCCEx_PLL3_Config+0x15c>)
 8007166:	4313      	orrs	r3, r2
 8007168:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800716a:	4b30      	ldr	r3, [pc, #192]	; (800722c <RCCEx_PLL3_Config+0x15c>)
 800716c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	492d      	ldr	r1, [pc, #180]	; (800722c <RCCEx_PLL3_Config+0x15c>)
 8007178:	4313      	orrs	r3, r2
 800717a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800717c:	4b2b      	ldr	r3, [pc, #172]	; (800722c <RCCEx_PLL3_Config+0x15c>)
 800717e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007180:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	4928      	ldr	r1, [pc, #160]	; (800722c <RCCEx_PLL3_Config+0x15c>)
 800718a:	4313      	orrs	r3, r2
 800718c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800718e:	4b27      	ldr	r3, [pc, #156]	; (800722c <RCCEx_PLL3_Config+0x15c>)
 8007190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007192:	4a26      	ldr	r2, [pc, #152]	; (800722c <RCCEx_PLL3_Config+0x15c>)
 8007194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007198:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800719a:	4b24      	ldr	r3, [pc, #144]	; (800722c <RCCEx_PLL3_Config+0x15c>)
 800719c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800719e:	4b24      	ldr	r3, [pc, #144]	; (8007230 <RCCEx_PLL3_Config+0x160>)
 80071a0:	4013      	ands	r3, r2
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	69d2      	ldr	r2, [r2, #28]
 80071a6:	00d2      	lsls	r2, r2, #3
 80071a8:	4920      	ldr	r1, [pc, #128]	; (800722c <RCCEx_PLL3_Config+0x15c>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80071ae:	4b1f      	ldr	r3, [pc, #124]	; (800722c <RCCEx_PLL3_Config+0x15c>)
 80071b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b2:	4a1e      	ldr	r2, [pc, #120]	; (800722c <RCCEx_PLL3_Config+0x15c>)
 80071b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d106      	bne.n	80071ce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80071c0:	4b1a      	ldr	r3, [pc, #104]	; (800722c <RCCEx_PLL3_Config+0x15c>)
 80071c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c4:	4a19      	ldr	r2, [pc, #100]	; (800722c <RCCEx_PLL3_Config+0x15c>)
 80071c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80071ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80071cc:	e00f      	b.n	80071ee <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d106      	bne.n	80071e2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80071d4:	4b15      	ldr	r3, [pc, #84]	; (800722c <RCCEx_PLL3_Config+0x15c>)
 80071d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d8:	4a14      	ldr	r2, [pc, #80]	; (800722c <RCCEx_PLL3_Config+0x15c>)
 80071da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80071de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80071e0:	e005      	b.n	80071ee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80071e2:	4b12      	ldr	r3, [pc, #72]	; (800722c <RCCEx_PLL3_Config+0x15c>)
 80071e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e6:	4a11      	ldr	r2, [pc, #68]	; (800722c <RCCEx_PLL3_Config+0x15c>)
 80071e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80071ee:	4b0f      	ldr	r3, [pc, #60]	; (800722c <RCCEx_PLL3_Config+0x15c>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a0e      	ldr	r2, [pc, #56]	; (800722c <RCCEx_PLL3_Config+0x15c>)
 80071f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071fa:	f7fa ff8f 	bl	800211c <HAL_GetTick>
 80071fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007200:	e008      	b.n	8007214 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007202:	f7fa ff8b 	bl	800211c <HAL_GetTick>
 8007206:	4602      	mov	r2, r0
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	2b02      	cmp	r3, #2
 800720e:	d901      	bls.n	8007214 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	e006      	b.n	8007222 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007214:	4b05      	ldr	r3, [pc, #20]	; (800722c <RCCEx_PLL3_Config+0x15c>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d0f0      	beq.n	8007202 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007220:	7bfb      	ldrb	r3, [r7, #15]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	58024400 	.word	0x58024400
 8007230:	ffff0007 	.word	0xffff0007

08007234 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800723c:	2300      	movs	r3, #0
 800723e:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d101      	bne.n	800724a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e0eb      	b.n	8007422 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a75      	ldr	r2, [pc, #468]	; (800742c <HAL_SPI_Init+0x1f8>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d00f      	beq.n	800727a <HAL_SPI_Init+0x46>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a74      	ldr	r2, [pc, #464]	; (8007430 <HAL_SPI_Init+0x1fc>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d00a      	beq.n	800727a <HAL_SPI_Init+0x46>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a72      	ldr	r2, [pc, #456]	; (8007434 <HAL_SPI_Init+0x200>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d005      	beq.n	800727a <HAL_SPI_Init+0x46>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	2b0f      	cmp	r3, #15
 8007274:	d901      	bls.n	800727a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e0d3      	b.n	8007422 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f8dc 	bl	8007438 <SPI_GetPacketSize>
 8007280:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a69      	ldr	r2, [pc, #420]	; (800742c <HAL_SPI_Init+0x1f8>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d00c      	beq.n	80072a6 <HAL_SPI_Init+0x72>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a67      	ldr	r2, [pc, #412]	; (8007430 <HAL_SPI_Init+0x1fc>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d007      	beq.n	80072a6 <HAL_SPI_Init+0x72>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a66      	ldr	r2, [pc, #408]	; (8007434 <HAL_SPI_Init+0x200>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d002      	beq.n	80072a6 <HAL_SPI_Init+0x72>
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	2b08      	cmp	r3, #8
 80072a4:	d811      	bhi.n	80072ca <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80072aa:	4a60      	ldr	r2, [pc, #384]	; (800742c <HAL_SPI_Init+0x1f8>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d009      	beq.n	80072c4 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a5e      	ldr	r2, [pc, #376]	; (8007430 <HAL_SPI_Init+0x1fc>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d004      	beq.n	80072c4 <HAL_SPI_Init+0x90>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a5d      	ldr	r2, [pc, #372]	; (8007434 <HAL_SPI_Init+0x200>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d104      	bne.n	80072ce <HAL_SPI_Init+0x9a>
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	2b10      	cmp	r3, #16
 80072c8:	d901      	bls.n	80072ce <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e0a9      	b.n	8007422 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d106      	bne.n	80072e8 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7fa f9c2 	bl	800166c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2202      	movs	r2, #2
 80072ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f022 0201 	bic.w	r2, r2, #1
 80072fe:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	699b      	ldr	r3, [r3, #24]
 8007304:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007308:	d119      	bne.n	800733e <HAL_SPI_Init+0x10a>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007312:	d103      	bne.n	800731c <HAL_SPI_Init+0xe8>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007318:	2b00      	cmp	r3, #0
 800731a:	d008      	beq.n	800732e <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007320:	2b00      	cmp	r3, #0
 8007322:	d10c      	bne.n	800733e <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007328:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800732c:	d107      	bne.n	800733e <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800733c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	69da      	ldr	r2, [r3, #28]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007346:	431a      	orrs	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	431a      	orrs	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007350:	ea42 0103 	orr.w	r1, r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	68da      	ldr	r2, [r3, #12]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	430a      	orrs	r2, r1
 800735e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007368:	431a      	orrs	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736e:	431a      	orrs	r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	699b      	ldr	r3, [r3, #24]
 8007374:	431a      	orrs	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	431a      	orrs	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	695b      	ldr	r3, [r3, #20]
 8007380:	431a      	orrs	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a1b      	ldr	r3, [r3, #32]
 8007386:	431a      	orrs	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	431a      	orrs	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007392:	431a      	orrs	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	431a      	orrs	r2, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800739e:	ea42 0103 	orr.w	r1, r2, r3
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	430a      	orrs	r2, r1
 80073ac:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d113      	bne.n	80073de <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073c8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073dc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f022 0201 	bic.w	r2, r2, #1
 80073ec:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00a      	beq.n	8007410 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	430a      	orrs	r2, r1
 800740e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	40013000 	.word	0x40013000
 8007430:	40003800 	.word	0x40003800
 8007434:	40003c00 	.word	0x40003c00

08007438 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007444:	095b      	lsrs	r3, r3, #5
 8007446:	3301      	adds	r3, #1
 8007448:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	3301      	adds	r3, #1
 8007450:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	3307      	adds	r3, #7
 8007456:	08db      	lsrs	r3, r3, #3
 8007458:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	fb02 f303 	mul.w	r3, r2, r3
}
 8007462:	4618      	mov	r0, r3
 8007464:	3714      	adds	r7, #20
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b082      	sub	sp, #8
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d101      	bne.n	8007480 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	e049      	b.n	8007514 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007486:	b2db      	uxtb	r3, r3
 8007488:	2b00      	cmp	r3, #0
 800748a:	d106      	bne.n	800749a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f7fa f94f 	bl	8001738 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2202      	movs	r2, #2
 800749e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	3304      	adds	r3, #4
 80074aa:	4619      	mov	r1, r3
 80074ac:	4610      	mov	r0, r2
 80074ae:	f000 fbe1 	bl	8007c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2201      	movs	r2, #1
 80074be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3708      	adds	r7, #8
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d101      	bne.n	800752e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e049      	b.n	80075c2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007534:	b2db      	uxtb	r3, r3
 8007536:	2b00      	cmp	r3, #0
 8007538:	d106      	bne.n	8007548 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f841 	bl	80075ca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2202      	movs	r2, #2
 800754c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	3304      	adds	r3, #4
 8007558:	4619      	mov	r1, r3
 800755a:	4610      	mov	r0, r2
 800755c:	f000 fb8a 	bl	8007c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3708      	adds	r7, #8
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80075ca:	b480      	push	{r7}
 80075cc:	b083      	sub	sp, #12
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80075d2:	bf00      	nop
 80075d4:	370c      	adds	r7, #12
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr

080075de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b082      	sub	sp, #8
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	f003 0302 	and.w	r3, r3, #2
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	d122      	bne.n	800763a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	f003 0302 	and.w	r3, r3, #2
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d11b      	bne.n	800763a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f06f 0202 	mvn.w	r2, #2
 800760a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	699b      	ldr	r3, [r3, #24]
 8007618:	f003 0303 	and.w	r3, r3, #3
 800761c:	2b00      	cmp	r3, #0
 800761e:	d003      	beq.n	8007628 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fb09 	bl	8007c38 <HAL_TIM_IC_CaptureCallback>
 8007626:	e005      	b.n	8007634 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 fafb 	bl	8007c24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fb0c 	bl	8007c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	f003 0304 	and.w	r3, r3, #4
 8007644:	2b04      	cmp	r3, #4
 8007646:	d122      	bne.n	800768e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	f003 0304 	and.w	r3, r3, #4
 8007652:	2b04      	cmp	r3, #4
 8007654:	d11b      	bne.n	800768e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f06f 0204 	mvn.w	r2, #4
 800765e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2202      	movs	r2, #2
 8007664:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007670:	2b00      	cmp	r3, #0
 8007672:	d003      	beq.n	800767c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 fadf 	bl	8007c38 <HAL_TIM_IC_CaptureCallback>
 800767a:	e005      	b.n	8007688 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 fad1 	bl	8007c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 fae2 	bl	8007c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	f003 0308 	and.w	r3, r3, #8
 8007698:	2b08      	cmp	r3, #8
 800769a:	d122      	bne.n	80076e2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	f003 0308 	and.w	r3, r3, #8
 80076a6:	2b08      	cmp	r3, #8
 80076a8:	d11b      	bne.n	80076e2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f06f 0208 	mvn.w	r2, #8
 80076b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2204      	movs	r2, #4
 80076b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	69db      	ldr	r3, [r3, #28]
 80076c0:	f003 0303 	and.w	r3, r3, #3
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d003      	beq.n	80076d0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 fab5 	bl	8007c38 <HAL_TIM_IC_CaptureCallback>
 80076ce:	e005      	b.n	80076dc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 faa7 	bl	8007c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fab8 	bl	8007c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	f003 0310 	and.w	r3, r3, #16
 80076ec:	2b10      	cmp	r3, #16
 80076ee:	d122      	bne.n	8007736 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	f003 0310 	and.w	r3, r3, #16
 80076fa:	2b10      	cmp	r3, #16
 80076fc:	d11b      	bne.n	8007736 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f06f 0210 	mvn.w	r2, #16
 8007706:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2208      	movs	r2, #8
 800770c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	69db      	ldr	r3, [r3, #28]
 8007714:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007718:	2b00      	cmp	r3, #0
 800771a:	d003      	beq.n	8007724 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 fa8b 	bl	8007c38 <HAL_TIM_IC_CaptureCallback>
 8007722:	e005      	b.n	8007730 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fa7d 	bl	8007c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 fa8e 	bl	8007c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	f003 0301 	and.w	r3, r3, #1
 8007740:	2b01      	cmp	r3, #1
 8007742:	d10e      	bne.n	8007762 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	f003 0301 	and.w	r3, r3, #1
 800774e:	2b01      	cmp	r3, #1
 8007750:	d107      	bne.n	8007762 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f06f 0201 	mvn.w	r2, #1
 800775a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f7f9 ff5c 	bl	800161a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800776c:	2b80      	cmp	r3, #128	; 0x80
 800776e:	d10e      	bne.n	800778e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800777a:	2b80      	cmp	r3, #128	; 0x80
 800777c:	d107      	bne.n	800778e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 ff89 	bl	80086a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800779c:	d10e      	bne.n	80077bc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077a8:	2b80      	cmp	r3, #128	; 0x80
 80077aa:	d107      	bne.n	80077bc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80077b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 ff7c 	bl	80086b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c6:	2b40      	cmp	r3, #64	; 0x40
 80077c8:	d10e      	bne.n	80077e8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077d4:	2b40      	cmp	r3, #64	; 0x40
 80077d6:	d107      	bne.n	80077e8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80077e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fa3c 	bl	8007c60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	f003 0320 	and.w	r3, r3, #32
 80077f2:	2b20      	cmp	r3, #32
 80077f4:	d10e      	bne.n	8007814 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	f003 0320 	and.w	r3, r3, #32
 8007800:	2b20      	cmp	r3, #32
 8007802:	d107      	bne.n	8007814 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f06f 0220 	mvn.w	r2, #32
 800780c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 ff3c 	bl	800868c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007814:	bf00      	nop
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800782e:	2b01      	cmp	r3, #1
 8007830:	d101      	bne.n	8007836 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007832:	2302      	movs	r3, #2
 8007834:	e0fd      	b.n	8007a32 <HAL_TIM_PWM_ConfigChannel+0x216>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2201      	movs	r2, #1
 800783a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2b14      	cmp	r3, #20
 8007842:	f200 80f0 	bhi.w	8007a26 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8007846:	a201      	add	r2, pc, #4	; (adr r2, 800784c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784c:	080078a1 	.word	0x080078a1
 8007850:	08007a27 	.word	0x08007a27
 8007854:	08007a27 	.word	0x08007a27
 8007858:	08007a27 	.word	0x08007a27
 800785c:	080078e1 	.word	0x080078e1
 8007860:	08007a27 	.word	0x08007a27
 8007864:	08007a27 	.word	0x08007a27
 8007868:	08007a27 	.word	0x08007a27
 800786c:	08007923 	.word	0x08007923
 8007870:	08007a27 	.word	0x08007a27
 8007874:	08007a27 	.word	0x08007a27
 8007878:	08007a27 	.word	0x08007a27
 800787c:	08007963 	.word	0x08007963
 8007880:	08007a27 	.word	0x08007a27
 8007884:	08007a27 	.word	0x08007a27
 8007888:	08007a27 	.word	0x08007a27
 800788c:	080079a5 	.word	0x080079a5
 8007890:	08007a27 	.word	0x08007a27
 8007894:	08007a27 	.word	0x08007a27
 8007898:	08007a27 	.word	0x08007a27
 800789c:	080079e5 	.word	0x080079e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	68b9      	ldr	r1, [r7, #8]
 80078a6:	4618      	mov	r0, r3
 80078a8:	f000 fa7e 	bl	8007da8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	699a      	ldr	r2, [r3, #24]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f042 0208 	orr.w	r2, r2, #8
 80078ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	699a      	ldr	r2, [r3, #24]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f022 0204 	bic.w	r2, r2, #4
 80078ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	6999      	ldr	r1, [r3, #24]
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	691a      	ldr	r2, [r3, #16]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	430a      	orrs	r2, r1
 80078dc:	619a      	str	r2, [r3, #24]
      break;
 80078de:	e0a3      	b.n	8007a28 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68b9      	ldr	r1, [r7, #8]
 80078e6:	4618      	mov	r0, r3
 80078e8:	f000 faee 	bl	8007ec8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	699a      	ldr	r2, [r3, #24]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	699a      	ldr	r2, [r3, #24]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800790a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	6999      	ldr	r1, [r3, #24]
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	021a      	lsls	r2, r3, #8
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	430a      	orrs	r2, r1
 800791e:	619a      	str	r2, [r3, #24]
      break;
 8007920:	e082      	b.n	8007a28 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68b9      	ldr	r1, [r7, #8]
 8007928:	4618      	mov	r0, r3
 800792a:	f000 fb57 	bl	8007fdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	69da      	ldr	r2, [r3, #28]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f042 0208 	orr.w	r2, r2, #8
 800793c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	69da      	ldr	r2, [r3, #28]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f022 0204 	bic.w	r2, r2, #4
 800794c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	69d9      	ldr	r1, [r3, #28]
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	691a      	ldr	r2, [r3, #16]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	430a      	orrs	r2, r1
 800795e:	61da      	str	r2, [r3, #28]
      break;
 8007960:	e062      	b.n	8007a28 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68b9      	ldr	r1, [r7, #8]
 8007968:	4618      	mov	r0, r3
 800796a:	f000 fbbd 	bl	80080e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	69da      	ldr	r2, [r3, #28]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800797c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	69da      	ldr	r2, [r3, #28]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800798c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	69d9      	ldr	r1, [r3, #28]
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	021a      	lsls	r2, r3, #8
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	430a      	orrs	r2, r1
 80079a0:	61da      	str	r2, [r3, #28]
      break;
 80079a2:	e041      	b.n	8007a28 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	68b9      	ldr	r1, [r7, #8]
 80079aa:	4618      	mov	r0, r3
 80079ac:	f000 fc04 	bl	80081b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f042 0208 	orr.w	r2, r2, #8
 80079be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f022 0204 	bic.w	r2, r2, #4
 80079ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	691a      	ldr	r2, [r3, #16]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	430a      	orrs	r2, r1
 80079e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80079e2:	e021      	b.n	8007a28 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68b9      	ldr	r1, [r7, #8]
 80079ea:	4618      	mov	r0, r3
 80079ec:	f000 fc46 	bl	800827c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a0e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	021a      	lsls	r2, r3, #8
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	430a      	orrs	r2, r1
 8007a22:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007a24:	e000      	b.n	8007a28 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8007a26:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop

08007a3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d101      	bne.n	8007a54 <HAL_TIM_ConfigClockSource+0x18>
 8007a50:	2302      	movs	r3, #2
 8007a52:	e0db      	b.n	8007c0c <HAL_TIM_ConfigClockSource+0x1d0>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2202      	movs	r2, #2
 8007a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	4b69      	ldr	r3, [pc, #420]	; (8007c14 <HAL_TIM_ConfigClockSource+0x1d8>)
 8007a70:	4013      	ands	r3, r2
 8007a72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a7a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a63      	ldr	r2, [pc, #396]	; (8007c18 <HAL_TIM_ConfigClockSource+0x1dc>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	f000 80a9 	beq.w	8007be2 <HAL_TIM_ConfigClockSource+0x1a6>
 8007a90:	4a61      	ldr	r2, [pc, #388]	; (8007c18 <HAL_TIM_ConfigClockSource+0x1dc>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	f200 80ae 	bhi.w	8007bf4 <HAL_TIM_ConfigClockSource+0x1b8>
 8007a98:	4a60      	ldr	r2, [pc, #384]	; (8007c1c <HAL_TIM_ConfigClockSource+0x1e0>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	f000 80a1 	beq.w	8007be2 <HAL_TIM_ConfigClockSource+0x1a6>
 8007aa0:	4a5e      	ldr	r2, [pc, #376]	; (8007c1c <HAL_TIM_ConfigClockSource+0x1e0>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	f200 80a6 	bhi.w	8007bf4 <HAL_TIM_ConfigClockSource+0x1b8>
 8007aa8:	4a5d      	ldr	r2, [pc, #372]	; (8007c20 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	f000 8099 	beq.w	8007be2 <HAL_TIM_ConfigClockSource+0x1a6>
 8007ab0:	4a5b      	ldr	r2, [pc, #364]	; (8007c20 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	f200 809e 	bhi.w	8007bf4 <HAL_TIM_ConfigClockSource+0x1b8>
 8007ab8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007abc:	f000 8091 	beq.w	8007be2 <HAL_TIM_ConfigClockSource+0x1a6>
 8007ac0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007ac4:	f200 8096 	bhi.w	8007bf4 <HAL_TIM_ConfigClockSource+0x1b8>
 8007ac8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007acc:	f000 8089 	beq.w	8007be2 <HAL_TIM_ConfigClockSource+0x1a6>
 8007ad0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ad4:	f200 808e 	bhi.w	8007bf4 <HAL_TIM_ConfigClockSource+0x1b8>
 8007ad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007adc:	d03e      	beq.n	8007b5c <HAL_TIM_ConfigClockSource+0x120>
 8007ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ae2:	f200 8087 	bhi.w	8007bf4 <HAL_TIM_ConfigClockSource+0x1b8>
 8007ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aea:	f000 8085 	beq.w	8007bf8 <HAL_TIM_ConfigClockSource+0x1bc>
 8007aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007af2:	d87f      	bhi.n	8007bf4 <HAL_TIM_ConfigClockSource+0x1b8>
 8007af4:	2b70      	cmp	r3, #112	; 0x70
 8007af6:	d01a      	beq.n	8007b2e <HAL_TIM_ConfigClockSource+0xf2>
 8007af8:	2b70      	cmp	r3, #112	; 0x70
 8007afa:	d87b      	bhi.n	8007bf4 <HAL_TIM_ConfigClockSource+0x1b8>
 8007afc:	2b60      	cmp	r3, #96	; 0x60
 8007afe:	d050      	beq.n	8007ba2 <HAL_TIM_ConfigClockSource+0x166>
 8007b00:	2b60      	cmp	r3, #96	; 0x60
 8007b02:	d877      	bhi.n	8007bf4 <HAL_TIM_ConfigClockSource+0x1b8>
 8007b04:	2b50      	cmp	r3, #80	; 0x50
 8007b06:	d03c      	beq.n	8007b82 <HAL_TIM_ConfigClockSource+0x146>
 8007b08:	2b50      	cmp	r3, #80	; 0x50
 8007b0a:	d873      	bhi.n	8007bf4 <HAL_TIM_ConfigClockSource+0x1b8>
 8007b0c:	2b40      	cmp	r3, #64	; 0x40
 8007b0e:	d058      	beq.n	8007bc2 <HAL_TIM_ConfigClockSource+0x186>
 8007b10:	2b40      	cmp	r3, #64	; 0x40
 8007b12:	d86f      	bhi.n	8007bf4 <HAL_TIM_ConfigClockSource+0x1b8>
 8007b14:	2b30      	cmp	r3, #48	; 0x30
 8007b16:	d064      	beq.n	8007be2 <HAL_TIM_ConfigClockSource+0x1a6>
 8007b18:	2b30      	cmp	r3, #48	; 0x30
 8007b1a:	d86b      	bhi.n	8007bf4 <HAL_TIM_ConfigClockSource+0x1b8>
 8007b1c:	2b20      	cmp	r3, #32
 8007b1e:	d060      	beq.n	8007be2 <HAL_TIM_ConfigClockSource+0x1a6>
 8007b20:	2b20      	cmp	r3, #32
 8007b22:	d867      	bhi.n	8007bf4 <HAL_TIM_ConfigClockSource+0x1b8>
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d05c      	beq.n	8007be2 <HAL_TIM_ConfigClockSource+0x1a6>
 8007b28:	2b10      	cmp	r3, #16
 8007b2a:	d05a      	beq.n	8007be2 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007b2c:	e062      	b.n	8007bf4 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6818      	ldr	r0, [r3, #0]
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	6899      	ldr	r1, [r3, #8]
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	685a      	ldr	r2, [r3, #4]
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	f000 fc7f 	bl	8008440 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007b50:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	609a      	str	r2, [r3, #8]
      break;
 8007b5a:	e04e      	b.n	8007bfa <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6818      	ldr	r0, [r3, #0]
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	6899      	ldr	r1, [r3, #8]
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	685a      	ldr	r2, [r3, #4]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	f000 fc68 	bl	8008440 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	689a      	ldr	r2, [r3, #8]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b7e:	609a      	str	r2, [r3, #8]
      break;
 8007b80:	e03b      	b.n	8007bfa <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6818      	ldr	r0, [r3, #0]
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	6859      	ldr	r1, [r3, #4]
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	461a      	mov	r2, r3
 8007b90:	f000 fbd8 	bl	8008344 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2150      	movs	r1, #80	; 0x50
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f000 fc32 	bl	8008404 <TIM_ITRx_SetConfig>
      break;
 8007ba0:	e02b      	b.n	8007bfa <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6818      	ldr	r0, [r3, #0]
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	6859      	ldr	r1, [r3, #4]
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	461a      	mov	r2, r3
 8007bb0:	f000 fbf7 	bl	80083a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2160      	movs	r1, #96	; 0x60
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f000 fc22 	bl	8008404 <TIM_ITRx_SetConfig>
      break;
 8007bc0:	e01b      	b.n	8007bfa <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6818      	ldr	r0, [r3, #0]
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	6859      	ldr	r1, [r3, #4]
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	461a      	mov	r2, r3
 8007bd0:	f000 fbb8 	bl	8008344 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2140      	movs	r1, #64	; 0x40
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f000 fc12 	bl	8008404 <TIM_ITRx_SetConfig>
      break;
 8007be0:	e00b      	b.n	8007bfa <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4619      	mov	r1, r3
 8007bec:	4610      	mov	r0, r2
 8007bee:	f000 fc09 	bl	8008404 <TIM_ITRx_SetConfig>
        break;
 8007bf2:	e002      	b.n	8007bfa <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8007bf4:	bf00      	nop
 8007bf6:	e000      	b.n	8007bfa <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8007bf8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	ffceff88 	.word	0xffceff88
 8007c18:	00100040 	.word	0x00100040
 8007c1c:	00100030 	.word	0x00100030
 8007c20:	00100020 	.word	0x00100020

08007c24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c2c:	bf00      	nop
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c54:	bf00      	nop
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a40      	ldr	r2, [pc, #256]	; (8007d88 <TIM_Base_SetConfig+0x114>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d013      	beq.n	8007cb4 <TIM_Base_SetConfig+0x40>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c92:	d00f      	beq.n	8007cb4 <TIM_Base_SetConfig+0x40>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a3d      	ldr	r2, [pc, #244]	; (8007d8c <TIM_Base_SetConfig+0x118>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d00b      	beq.n	8007cb4 <TIM_Base_SetConfig+0x40>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a3c      	ldr	r2, [pc, #240]	; (8007d90 <TIM_Base_SetConfig+0x11c>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d007      	beq.n	8007cb4 <TIM_Base_SetConfig+0x40>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a3b      	ldr	r2, [pc, #236]	; (8007d94 <TIM_Base_SetConfig+0x120>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d003      	beq.n	8007cb4 <TIM_Base_SetConfig+0x40>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	4a3a      	ldr	r2, [pc, #232]	; (8007d98 <TIM_Base_SetConfig+0x124>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d108      	bne.n	8007cc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a2f      	ldr	r2, [pc, #188]	; (8007d88 <TIM_Base_SetConfig+0x114>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d01f      	beq.n	8007d0e <TIM_Base_SetConfig+0x9a>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cd4:	d01b      	beq.n	8007d0e <TIM_Base_SetConfig+0x9a>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4a2c      	ldr	r2, [pc, #176]	; (8007d8c <TIM_Base_SetConfig+0x118>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d017      	beq.n	8007d0e <TIM_Base_SetConfig+0x9a>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a2b      	ldr	r2, [pc, #172]	; (8007d90 <TIM_Base_SetConfig+0x11c>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d013      	beq.n	8007d0e <TIM_Base_SetConfig+0x9a>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4a2a      	ldr	r2, [pc, #168]	; (8007d94 <TIM_Base_SetConfig+0x120>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d00f      	beq.n	8007d0e <TIM_Base_SetConfig+0x9a>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a29      	ldr	r2, [pc, #164]	; (8007d98 <TIM_Base_SetConfig+0x124>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d00b      	beq.n	8007d0e <TIM_Base_SetConfig+0x9a>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a28      	ldr	r2, [pc, #160]	; (8007d9c <TIM_Base_SetConfig+0x128>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d007      	beq.n	8007d0e <TIM_Base_SetConfig+0x9a>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a27      	ldr	r2, [pc, #156]	; (8007da0 <TIM_Base_SetConfig+0x12c>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d003      	beq.n	8007d0e <TIM_Base_SetConfig+0x9a>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a26      	ldr	r2, [pc, #152]	; (8007da4 <TIM_Base_SetConfig+0x130>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d108      	bne.n	8007d20 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	695b      	ldr	r3, [r3, #20]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	68fa      	ldr	r2, [r7, #12]
 8007d32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	689a      	ldr	r2, [r3, #8]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a10      	ldr	r2, [pc, #64]	; (8007d88 <TIM_Base_SetConfig+0x114>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d00f      	beq.n	8007d6c <TIM_Base_SetConfig+0xf8>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a12      	ldr	r2, [pc, #72]	; (8007d98 <TIM_Base_SetConfig+0x124>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d00b      	beq.n	8007d6c <TIM_Base_SetConfig+0xf8>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a11      	ldr	r2, [pc, #68]	; (8007d9c <TIM_Base_SetConfig+0x128>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d007      	beq.n	8007d6c <TIM_Base_SetConfig+0xf8>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a10      	ldr	r2, [pc, #64]	; (8007da0 <TIM_Base_SetConfig+0x12c>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d003      	beq.n	8007d6c <TIM_Base_SetConfig+0xf8>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a0f      	ldr	r2, [pc, #60]	; (8007da4 <TIM_Base_SetConfig+0x130>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d103      	bne.n	8007d74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	691a      	ldr	r2, [r3, #16]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	615a      	str	r2, [r3, #20]
}
 8007d7a:	bf00      	nop
 8007d7c:	3714      	adds	r7, #20
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop
 8007d88:	40010000 	.word	0x40010000
 8007d8c:	40000400 	.word	0x40000400
 8007d90:	40000800 	.word	0x40000800
 8007d94:	40000c00 	.word	0x40000c00
 8007d98:	40010400 	.word	0x40010400
 8007d9c:	40014000 	.word	0x40014000
 8007da0:	40014400 	.word	0x40014400
 8007da4:	40014800 	.word	0x40014800

08007da8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b087      	sub	sp, #28
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a1b      	ldr	r3, [r3, #32]
 8007db6:	f023 0201 	bic.w	r2, r3, #1
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a1b      	ldr	r3, [r3, #32]
 8007dc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	699b      	ldr	r3, [r3, #24]
 8007dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007dd0:	68fa      	ldr	r2, [r7, #12]
 8007dd2:	4b37      	ldr	r3, [pc, #220]	; (8007eb0 <TIM_OC1_SetConfig+0x108>)
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f023 0303 	bic.w	r3, r3, #3
 8007dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	f023 0302 	bic.w	r3, r3, #2
 8007df0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	697a      	ldr	r2, [r7, #20]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4a2d      	ldr	r2, [pc, #180]	; (8007eb4 <TIM_OC1_SetConfig+0x10c>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d00f      	beq.n	8007e24 <TIM_OC1_SetConfig+0x7c>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4a2c      	ldr	r2, [pc, #176]	; (8007eb8 <TIM_OC1_SetConfig+0x110>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d00b      	beq.n	8007e24 <TIM_OC1_SetConfig+0x7c>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4a2b      	ldr	r2, [pc, #172]	; (8007ebc <TIM_OC1_SetConfig+0x114>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d007      	beq.n	8007e24 <TIM_OC1_SetConfig+0x7c>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a2a      	ldr	r2, [pc, #168]	; (8007ec0 <TIM_OC1_SetConfig+0x118>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d003      	beq.n	8007e24 <TIM_OC1_SetConfig+0x7c>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a29      	ldr	r2, [pc, #164]	; (8007ec4 <TIM_OC1_SetConfig+0x11c>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d10c      	bne.n	8007e3e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	f023 0308 	bic.w	r3, r3, #8
 8007e2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	697a      	ldr	r2, [r7, #20]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	f023 0304 	bic.w	r3, r3, #4
 8007e3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a1c      	ldr	r2, [pc, #112]	; (8007eb4 <TIM_OC1_SetConfig+0x10c>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d00f      	beq.n	8007e66 <TIM_OC1_SetConfig+0xbe>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a1b      	ldr	r2, [pc, #108]	; (8007eb8 <TIM_OC1_SetConfig+0x110>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d00b      	beq.n	8007e66 <TIM_OC1_SetConfig+0xbe>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a1a      	ldr	r2, [pc, #104]	; (8007ebc <TIM_OC1_SetConfig+0x114>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d007      	beq.n	8007e66 <TIM_OC1_SetConfig+0xbe>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a19      	ldr	r2, [pc, #100]	; (8007ec0 <TIM_OC1_SetConfig+0x118>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d003      	beq.n	8007e66 <TIM_OC1_SetConfig+0xbe>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a18      	ldr	r2, [pc, #96]	; (8007ec4 <TIM_OC1_SetConfig+0x11c>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d111      	bne.n	8007e8a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	695b      	ldr	r3, [r3, #20]
 8007e7a:	693a      	ldr	r2, [r7, #16]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	699b      	ldr	r3, [r3, #24]
 8007e84:	693a      	ldr	r2, [r7, #16]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	693a      	ldr	r2, [r7, #16]
 8007e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	685a      	ldr	r2, [r3, #4]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	621a      	str	r2, [r3, #32]
}
 8007ea4:	bf00      	nop
 8007ea6:	371c      	adds	r7, #28
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr
 8007eb0:	fffeff8f 	.word	0xfffeff8f
 8007eb4:	40010000 	.word	0x40010000
 8007eb8:	40010400 	.word	0x40010400
 8007ebc:	40014000 	.word	0x40014000
 8007ec0:	40014400 	.word	0x40014400
 8007ec4:	40014800 	.word	0x40014800

08007ec8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b087      	sub	sp, #28
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a1b      	ldr	r3, [r3, #32]
 8007ed6:	f023 0210 	bic.w	r2, r3, #16
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a1b      	ldr	r3, [r3, #32]
 8007ee2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	699b      	ldr	r3, [r3, #24]
 8007eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	4b34      	ldr	r3, [pc, #208]	; (8007fc4 <TIM_OC2_SetConfig+0xfc>)
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007efe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	021b      	lsls	r3, r3, #8
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	f023 0320 	bic.w	r3, r3, #32
 8007f12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	011b      	lsls	r3, r3, #4
 8007f1a:	697a      	ldr	r2, [r7, #20]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a29      	ldr	r2, [pc, #164]	; (8007fc8 <TIM_OC2_SetConfig+0x100>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d003      	beq.n	8007f30 <TIM_OC2_SetConfig+0x68>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a28      	ldr	r2, [pc, #160]	; (8007fcc <TIM_OC2_SetConfig+0x104>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d10d      	bne.n	8007f4c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	011b      	lsls	r3, r3, #4
 8007f3e:	697a      	ldr	r2, [r7, #20]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4a1e      	ldr	r2, [pc, #120]	; (8007fc8 <TIM_OC2_SetConfig+0x100>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d00f      	beq.n	8007f74 <TIM_OC2_SetConfig+0xac>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4a1d      	ldr	r2, [pc, #116]	; (8007fcc <TIM_OC2_SetConfig+0x104>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d00b      	beq.n	8007f74 <TIM_OC2_SetConfig+0xac>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a1c      	ldr	r2, [pc, #112]	; (8007fd0 <TIM_OC2_SetConfig+0x108>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d007      	beq.n	8007f74 <TIM_OC2_SetConfig+0xac>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a1b      	ldr	r2, [pc, #108]	; (8007fd4 <TIM_OC2_SetConfig+0x10c>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d003      	beq.n	8007f74 <TIM_OC2_SetConfig+0xac>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a1a      	ldr	r2, [pc, #104]	; (8007fd8 <TIM_OC2_SetConfig+0x110>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d113      	bne.n	8007f9c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	695b      	ldr	r3, [r3, #20]
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	693a      	ldr	r2, [r7, #16]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	699b      	ldr	r3, [r3, #24]
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	693a      	ldr	r2, [r7, #16]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	693a      	ldr	r2, [r7, #16]
 8007fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	685a      	ldr	r2, [r3, #4]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	697a      	ldr	r2, [r7, #20]
 8007fb4:	621a      	str	r2, [r3, #32]
}
 8007fb6:	bf00      	nop
 8007fb8:	371c      	adds	r7, #28
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	feff8fff 	.word	0xfeff8fff
 8007fc8:	40010000 	.word	0x40010000
 8007fcc:	40010400 	.word	0x40010400
 8007fd0:	40014000 	.word	0x40014000
 8007fd4:	40014400 	.word	0x40014400
 8007fd8:	40014800 	.word	0x40014800

08007fdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b087      	sub	sp, #28
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a1b      	ldr	r3, [r3, #32]
 8007fea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a1b      	ldr	r3, [r3, #32]
 8007ff6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	69db      	ldr	r3, [r3, #28]
 8008002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800800a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f023 0303 	bic.w	r3, r3, #3
 8008012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	4313      	orrs	r3, r2
 800801c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	021b      	lsls	r3, r3, #8
 800802c:	697a      	ldr	r2, [r7, #20]
 800802e:	4313      	orrs	r3, r2
 8008030:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4a27      	ldr	r2, [pc, #156]	; (80080d4 <TIM_OC3_SetConfig+0xf8>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d003      	beq.n	8008042 <TIM_OC3_SetConfig+0x66>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4a26      	ldr	r2, [pc, #152]	; (80080d8 <TIM_OC3_SetConfig+0xfc>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d10d      	bne.n	800805e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008048:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	021b      	lsls	r3, r3, #8
 8008050:	697a      	ldr	r2, [r7, #20]
 8008052:	4313      	orrs	r3, r2
 8008054:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800805c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4a1c      	ldr	r2, [pc, #112]	; (80080d4 <TIM_OC3_SetConfig+0xf8>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d00f      	beq.n	8008086 <TIM_OC3_SetConfig+0xaa>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a1b      	ldr	r2, [pc, #108]	; (80080d8 <TIM_OC3_SetConfig+0xfc>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d00b      	beq.n	8008086 <TIM_OC3_SetConfig+0xaa>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a1a      	ldr	r2, [pc, #104]	; (80080dc <TIM_OC3_SetConfig+0x100>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d007      	beq.n	8008086 <TIM_OC3_SetConfig+0xaa>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4a19      	ldr	r2, [pc, #100]	; (80080e0 <TIM_OC3_SetConfig+0x104>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d003      	beq.n	8008086 <TIM_OC3_SetConfig+0xaa>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4a18      	ldr	r2, [pc, #96]	; (80080e4 <TIM_OC3_SetConfig+0x108>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d113      	bne.n	80080ae <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800808c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008094:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	695b      	ldr	r3, [r3, #20]
 800809a:	011b      	lsls	r3, r3, #4
 800809c:	693a      	ldr	r2, [r7, #16]
 800809e:	4313      	orrs	r3, r2
 80080a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	011b      	lsls	r3, r3, #4
 80080a8:	693a      	ldr	r2, [r7, #16]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	693a      	ldr	r2, [r7, #16]
 80080b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	685a      	ldr	r2, [r3, #4]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	697a      	ldr	r2, [r7, #20]
 80080c6:	621a      	str	r2, [r3, #32]
}
 80080c8:	bf00      	nop
 80080ca:	371c      	adds	r7, #28
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr
 80080d4:	40010000 	.word	0x40010000
 80080d8:	40010400 	.word	0x40010400
 80080dc:	40014000 	.word	0x40014000
 80080e0:	40014400 	.word	0x40014400
 80080e4:	40014800 	.word	0x40014800

080080e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b087      	sub	sp, #28
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a1b      	ldr	r3, [r3, #32]
 80080f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a1b      	ldr	r3, [r3, #32]
 8008102:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	69db      	ldr	r3, [r3, #28]
 800810e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800811e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	021b      	lsls	r3, r3, #8
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	4313      	orrs	r3, r2
 800812a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008132:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	031b      	lsls	r3, r3, #12
 800813a:	693a      	ldr	r2, [r7, #16]
 800813c:	4313      	orrs	r3, r2
 800813e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4a18      	ldr	r2, [pc, #96]	; (80081a4 <TIM_OC4_SetConfig+0xbc>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d00f      	beq.n	8008168 <TIM_OC4_SetConfig+0x80>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4a17      	ldr	r2, [pc, #92]	; (80081a8 <TIM_OC4_SetConfig+0xc0>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d00b      	beq.n	8008168 <TIM_OC4_SetConfig+0x80>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a16      	ldr	r2, [pc, #88]	; (80081ac <TIM_OC4_SetConfig+0xc4>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d007      	beq.n	8008168 <TIM_OC4_SetConfig+0x80>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a15      	ldr	r2, [pc, #84]	; (80081b0 <TIM_OC4_SetConfig+0xc8>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d003      	beq.n	8008168 <TIM_OC4_SetConfig+0x80>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4a14      	ldr	r2, [pc, #80]	; (80081b4 <TIM_OC4_SetConfig+0xcc>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d109      	bne.n	800817c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800816e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	695b      	ldr	r3, [r3, #20]
 8008174:	019b      	lsls	r3, r3, #6
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	4313      	orrs	r3, r2
 800817a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	697a      	ldr	r2, [r7, #20]
 8008180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	68fa      	ldr	r2, [r7, #12]
 8008186:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	685a      	ldr	r2, [r3, #4]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	693a      	ldr	r2, [r7, #16]
 8008194:	621a      	str	r2, [r3, #32]
}
 8008196:	bf00      	nop
 8008198:	371c      	adds	r7, #28
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr
 80081a2:	bf00      	nop
 80081a4:	40010000 	.word	0x40010000
 80081a8:	40010400 	.word	0x40010400
 80081ac:	40014000 	.word	0x40014000
 80081b0:	40014400 	.word	0x40014400
 80081b4:	40014800 	.word	0x40014800

080081b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b087      	sub	sp, #28
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a1b      	ldr	r3, [r3, #32]
 80081d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80081f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	041b      	lsls	r3, r3, #16
 8008200:	693a      	ldr	r2, [r7, #16]
 8008202:	4313      	orrs	r3, r2
 8008204:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a17      	ldr	r2, [pc, #92]	; (8008268 <TIM_OC5_SetConfig+0xb0>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d00f      	beq.n	800822e <TIM_OC5_SetConfig+0x76>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a16      	ldr	r2, [pc, #88]	; (800826c <TIM_OC5_SetConfig+0xb4>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d00b      	beq.n	800822e <TIM_OC5_SetConfig+0x76>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	4a15      	ldr	r2, [pc, #84]	; (8008270 <TIM_OC5_SetConfig+0xb8>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d007      	beq.n	800822e <TIM_OC5_SetConfig+0x76>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4a14      	ldr	r2, [pc, #80]	; (8008274 <TIM_OC5_SetConfig+0xbc>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d003      	beq.n	800822e <TIM_OC5_SetConfig+0x76>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	4a13      	ldr	r2, [pc, #76]	; (8008278 <TIM_OC5_SetConfig+0xc0>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d109      	bne.n	8008242 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008234:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	695b      	ldr	r3, [r3, #20]
 800823a:	021b      	lsls	r3, r3, #8
 800823c:	697a      	ldr	r2, [r7, #20]
 800823e:	4313      	orrs	r3, r2
 8008240:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	697a      	ldr	r2, [r7, #20]
 8008246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	685a      	ldr	r2, [r3, #4]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	693a      	ldr	r2, [r7, #16]
 800825a:	621a      	str	r2, [r3, #32]
}
 800825c:	bf00      	nop
 800825e:	371c      	adds	r7, #28
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr
 8008268:	40010000 	.word	0x40010000
 800826c:	40010400 	.word	0x40010400
 8008270:	40014000 	.word	0x40014000
 8008274:	40014400 	.word	0x40014400
 8008278:	40014800 	.word	0x40014800

0800827c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800827c:	b480      	push	{r7}
 800827e:	b087      	sub	sp, #28
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a1b      	ldr	r3, [r3, #32]
 800828a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6a1b      	ldr	r3, [r3, #32]
 8008296:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	021b      	lsls	r3, r3, #8
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80082be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	051b      	lsls	r3, r3, #20
 80082c6:	693a      	ldr	r2, [r7, #16]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4a18      	ldr	r2, [pc, #96]	; (8008330 <TIM_OC6_SetConfig+0xb4>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d00f      	beq.n	80082f4 <TIM_OC6_SetConfig+0x78>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	4a17      	ldr	r2, [pc, #92]	; (8008334 <TIM_OC6_SetConfig+0xb8>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d00b      	beq.n	80082f4 <TIM_OC6_SetConfig+0x78>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4a16      	ldr	r2, [pc, #88]	; (8008338 <TIM_OC6_SetConfig+0xbc>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d007      	beq.n	80082f4 <TIM_OC6_SetConfig+0x78>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a15      	ldr	r2, [pc, #84]	; (800833c <TIM_OC6_SetConfig+0xc0>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d003      	beq.n	80082f4 <TIM_OC6_SetConfig+0x78>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4a14      	ldr	r2, [pc, #80]	; (8008340 <TIM_OC6_SetConfig+0xc4>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d109      	bne.n	8008308 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80082fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	695b      	ldr	r3, [r3, #20]
 8008300:	029b      	lsls	r3, r3, #10
 8008302:	697a      	ldr	r2, [r7, #20]
 8008304:	4313      	orrs	r3, r2
 8008306:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	697a      	ldr	r2, [r7, #20]
 800830c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	68fa      	ldr	r2, [r7, #12]
 8008312:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	685a      	ldr	r2, [r3, #4]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	693a      	ldr	r2, [r7, #16]
 8008320:	621a      	str	r2, [r3, #32]
}
 8008322:	bf00      	nop
 8008324:	371c      	adds	r7, #28
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	40010000 	.word	0x40010000
 8008334:	40010400 	.word	0x40010400
 8008338:	40014000 	.word	0x40014000
 800833c:	40014400 	.word	0x40014400
 8008340:	40014800 	.word	0x40014800

08008344 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008344:	b480      	push	{r7}
 8008346:	b087      	sub	sp, #28
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6a1b      	ldr	r3, [r3, #32]
 8008354:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6a1b      	ldr	r3, [r3, #32]
 800835a:	f023 0201 	bic.w	r2, r3, #1
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800836e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	011b      	lsls	r3, r3, #4
 8008374:	693a      	ldr	r2, [r7, #16]
 8008376:	4313      	orrs	r3, r2
 8008378:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	f023 030a 	bic.w	r3, r3, #10
 8008380:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008382:	697a      	ldr	r2, [r7, #20]
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	4313      	orrs	r3, r2
 8008388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	693a      	ldr	r2, [r7, #16]
 800838e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	697a      	ldr	r2, [r7, #20]
 8008394:	621a      	str	r2, [r3, #32]
}
 8008396:	bf00      	nop
 8008398:	371c      	adds	r7, #28
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr

080083a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083a2:	b480      	push	{r7}
 80083a4:	b087      	sub	sp, #28
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	60f8      	str	r0, [r7, #12]
 80083aa:	60b9      	str	r1, [r7, #8]
 80083ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6a1b      	ldr	r3, [r3, #32]
 80083b2:	f023 0210 	bic.w	r2, r3, #16
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	699b      	ldr	r3, [r3, #24]
 80083be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6a1b      	ldr	r3, [r3, #32]
 80083c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80083cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	031b      	lsls	r3, r3, #12
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80083de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	011b      	lsls	r3, r3, #4
 80083e4:	693a      	ldr	r2, [r7, #16]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	697a      	ldr	r2, [r7, #20]
 80083ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	693a      	ldr	r2, [r7, #16]
 80083f4:	621a      	str	r2, [r3, #32]
}
 80083f6:	bf00      	nop
 80083f8:	371c      	adds	r7, #28
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
	...

08008404 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008404:	b480      	push	{r7}
 8008406:	b085      	sub	sp, #20
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008414:	68fa      	ldr	r2, [r7, #12]
 8008416:	4b09      	ldr	r3, [pc, #36]	; (800843c <TIM_ITRx_SetConfig+0x38>)
 8008418:	4013      	ands	r3, r2
 800841a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800841c:	683a      	ldr	r2, [r7, #0]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	4313      	orrs	r3, r2
 8008422:	f043 0307 	orr.w	r3, r3, #7
 8008426:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	609a      	str	r2, [r3, #8]
}
 800842e:	bf00      	nop
 8008430:	3714      	adds	r7, #20
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	ffcfff8f 	.word	0xffcfff8f

08008440 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008440:	b480      	push	{r7}
 8008442:	b087      	sub	sp, #28
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]
 800844c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800845a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	021a      	lsls	r2, r3, #8
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	431a      	orrs	r2, r3
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	4313      	orrs	r3, r2
 8008468:	697a      	ldr	r2, [r7, #20]
 800846a:	4313      	orrs	r3, r2
 800846c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	697a      	ldr	r2, [r7, #20]
 8008472:	609a      	str	r2, [r3, #8]
}
 8008474:	bf00      	nop
 8008476:	371c      	adds	r7, #28
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008480:	b480      	push	{r7}
 8008482:	b085      	sub	sp, #20
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008490:	2b01      	cmp	r3, #1
 8008492:	d101      	bne.n	8008498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008494:	2302      	movs	r3, #2
 8008496:	e068      	b.n	800856a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2202      	movs	r2, #2
 80084a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a2e      	ldr	r2, [pc, #184]	; (8008578 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d004      	beq.n	80084cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a2d      	ldr	r2, [pc, #180]	; (800857c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d108      	bne.n	80084de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80084d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	68fa      	ldr	r2, [r7, #12]
 80084da:	4313      	orrs	r3, r2
 80084dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a1e      	ldr	r2, [pc, #120]	; (8008578 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d01d      	beq.n	800853e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800850a:	d018      	beq.n	800853e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a1b      	ldr	r2, [pc, #108]	; (8008580 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d013      	beq.n	800853e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a1a      	ldr	r2, [pc, #104]	; (8008584 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d00e      	beq.n	800853e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a18      	ldr	r2, [pc, #96]	; (8008588 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d009      	beq.n	800853e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a13      	ldr	r2, [pc, #76]	; (800857c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d004      	beq.n	800853e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a14      	ldr	r2, [pc, #80]	; (800858c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d10c      	bne.n	8008558 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008544:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	68ba      	ldr	r2, [r7, #8]
 800854c:	4313      	orrs	r3, r2
 800854e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	68ba      	ldr	r2, [r7, #8]
 8008556:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3714      	adds	r7, #20
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr
 8008576:	bf00      	nop
 8008578:	40010000 	.word	0x40010000
 800857c:	40010400 	.word	0x40010400
 8008580:	40000400 	.word	0x40000400
 8008584:	40000800 	.word	0x40000800
 8008588:	40000c00 	.word	0x40000c00
 800858c:	40001800 	.word	0x40001800

08008590 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800859a:	2300      	movs	r3, #0
 800859c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d101      	bne.n	80085ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80085a8:	2302      	movs	r3, #2
 80085aa:	e065      	b.n	8008678 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	4313      	orrs	r3, r2
 80085c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	4313      	orrs	r3, r2
 80085ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	4313      	orrs	r3, r2
 80085dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	695b      	ldr	r3, [r3, #20]
 8008604:	4313      	orrs	r3, r2
 8008606:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008612:	4313      	orrs	r3, r2
 8008614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	699b      	ldr	r3, [r3, #24]
 8008620:	041b      	lsls	r3, r3, #16
 8008622:	4313      	orrs	r3, r2
 8008624:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a16      	ldr	r2, [pc, #88]	; (8008684 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d004      	beq.n	800863a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a14      	ldr	r2, [pc, #80]	; (8008688 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d115      	bne.n	8008666 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008644:	051b      	lsls	r3, r3, #20
 8008646:	4313      	orrs	r3, r2
 8008648:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	69db      	ldr	r3, [r3, #28]
 8008654:	4313      	orrs	r3, r2
 8008656:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	6a1b      	ldr	r3, [r3, #32]
 8008662:	4313      	orrs	r3, r2
 8008664:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	68fa      	ldr	r2, [r7, #12]
 800866c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008676:	2300      	movs	r3, #0
}
 8008678:	4618      	mov	r0, r3
 800867a:	3714      	adds	r7, #20
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr
 8008684:	40010000 	.word	0x40010000
 8008688:	40010400 	.word	0x40010400

0800868c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008694:	bf00      	nop
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086a8:	bf00      	nop
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80086bc:	bf00      	nop
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d101      	bne.n	80086da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	e042      	b.n	8008760 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d106      	bne.n	80086f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f7f9 f999 	bl	8001a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2224      	movs	r2, #36	; 0x24
 80086f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f022 0201 	bic.w	r2, r2, #1
 8008708:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 fafc 	bl	8008d08 <UART_SetConfig>
 8008710:	4603      	mov	r3, r0
 8008712:	2b01      	cmp	r3, #1
 8008714:	d101      	bne.n	800871a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008716:	2301      	movs	r3, #1
 8008718:	e022      	b.n	8008760 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800871e:	2b00      	cmp	r3, #0
 8008720:	d002      	beq.n	8008728 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f001 f850 	bl	80097c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	685a      	ldr	r2, [r3, #4]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008736:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	689a      	ldr	r2, [r3, #8]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008746:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f042 0201 	orr.w	r2, r2, #1
 8008756:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f001 f8d7 	bl	800990c <UART_CheckIdleState>
 800875e:	4603      	mov	r3, r0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3708      	adds	r7, #8
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b088      	sub	sp, #32
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	69db      	ldr	r3, [r3, #28]
 8008776:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008788:	69fa      	ldr	r2, [r7, #28]
 800878a:	f640 030f 	movw	r3, #2063	; 0x80f
 800878e:	4013      	ands	r3, r2
 8008790:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d118      	bne.n	80087ca <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	f003 0320 	and.w	r3, r3, #32
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d013      	beq.n	80087ca <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	f003 0320 	and.w	r3, r3, #32
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d104      	bne.n	80087b6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d009      	beq.n	80087ca <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f000 8282 	beq.w	8008cc4 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	4798      	blx	r3
      }
      return;
 80087c8:	e27c      	b.n	8008cc4 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f000 80ef 	beq.w	80089b0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80087d2:	697a      	ldr	r2, [r7, #20]
 80087d4:	4b73      	ldr	r3, [pc, #460]	; (80089a4 <HAL_UART_IRQHandler+0x23c>)
 80087d6:	4013      	ands	r3, r2
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d105      	bne.n	80087e8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80087dc:	69ba      	ldr	r2, [r7, #24]
 80087de:	4b72      	ldr	r3, [pc, #456]	; (80089a8 <HAL_UART_IRQHandler+0x240>)
 80087e0:	4013      	ands	r3, r2
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f000 80e4 	beq.w	80089b0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	f003 0301 	and.w	r3, r3, #1
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d010      	beq.n	8008814 <HAL_UART_IRQHandler+0xac>
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d00b      	beq.n	8008814 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2201      	movs	r2, #1
 8008802:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800880a:	f043 0201 	orr.w	r2, r3, #1
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	f003 0302 	and.w	r3, r3, #2
 800881a:	2b00      	cmp	r3, #0
 800881c:	d010      	beq.n	8008840 <HAL_UART_IRQHandler+0xd8>
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	f003 0301 	and.w	r3, r3, #1
 8008824:	2b00      	cmp	r3, #0
 8008826:	d00b      	beq.n	8008840 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2202      	movs	r2, #2
 800882e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008836:	f043 0204 	orr.w	r2, r3, #4
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	f003 0304 	and.w	r3, r3, #4
 8008846:	2b00      	cmp	r3, #0
 8008848:	d010      	beq.n	800886c <HAL_UART_IRQHandler+0x104>
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	f003 0301 	and.w	r3, r3, #1
 8008850:	2b00      	cmp	r3, #0
 8008852:	d00b      	beq.n	800886c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2204      	movs	r2, #4
 800885a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008862:	f043 0202 	orr.w	r2, r3, #2
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	f003 0308 	and.w	r3, r3, #8
 8008872:	2b00      	cmp	r3, #0
 8008874:	d015      	beq.n	80088a2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	f003 0320 	and.w	r3, r3, #32
 800887c:	2b00      	cmp	r3, #0
 800887e:	d104      	bne.n	800888a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008880:	697a      	ldr	r2, [r7, #20]
 8008882:	4b48      	ldr	r3, [pc, #288]	; (80089a4 <HAL_UART_IRQHandler+0x23c>)
 8008884:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008886:	2b00      	cmp	r3, #0
 8008888:	d00b      	beq.n	80088a2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2208      	movs	r2, #8
 8008890:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008898:	f043 0208 	orr.w	r2, r3, #8
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d011      	beq.n	80088d0 <HAL_UART_IRQHandler+0x168>
 80088ac:	69bb      	ldr	r3, [r7, #24]
 80088ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00c      	beq.n	80088d0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80088be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088c6:	f043 0220 	orr.w	r2, r3, #32
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	f000 81f6 	beq.w	8008cc8 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80088dc:	69fb      	ldr	r3, [r7, #28]
 80088de:	f003 0320 	and.w	r3, r3, #32
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d011      	beq.n	800890a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	f003 0320 	and.w	r3, r3, #32
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d104      	bne.n	80088fa <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d007      	beq.n	800890a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d003      	beq.n	800890a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008910:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800891c:	2b40      	cmp	r3, #64	; 0x40
 800891e:	d004      	beq.n	800892a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008926:	2b00      	cmp	r3, #0
 8008928:	d031      	beq.n	800898e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f001 f8ba 	bl	8009aa4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800893a:	2b40      	cmp	r3, #64	; 0x40
 800893c:	d123      	bne.n	8008986 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	689a      	ldr	r2, [r3, #8]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800894c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008952:	2b00      	cmp	r3, #0
 8008954:	d013      	beq.n	800897e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800895a:	4a14      	ldr	r2, [pc, #80]	; (80089ac <HAL_UART_IRQHandler+0x244>)
 800895c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008962:	4618      	mov	r0, r3
 8008964:	f7fa fba0 	bl	80030a8 <HAL_DMA_Abort_IT>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d017      	beq.n	800899e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008978:	4610      	mov	r0, r2
 800897a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800897c:	e00f      	b.n	800899e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 f9ac 	bl	8008cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008984:	e00b      	b.n	800899e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 f9a8 	bl	8008cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800898c:	e007      	b.n	800899e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 f9a4 	bl	8008cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800899c:	e194      	b.n	8008cc8 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800899e:	bf00      	nop
    return;
 80089a0:	e192      	b.n	8008cc8 <HAL_UART_IRQHandler+0x560>
 80089a2:	bf00      	nop
 80089a4:	10000001 	.word	0x10000001
 80089a8:	04000120 	.word	0x04000120
 80089ac:	08009b09 	.word	0x08009b09

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	f040 810f 	bne.w	8008bd8 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	f003 0310 	and.w	r3, r3, #16
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	f000 8109 	beq.w	8008bd8 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	f003 0310 	and.w	r3, r3, #16
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f000 8103 	beq.w	8008bd8 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	2210      	movs	r2, #16
 80089d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e4:	2b40      	cmp	r3, #64	; 0x40
 80089e6:	f040 80bb 	bne.w	8008b60 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a96      	ldr	r2, [pc, #600]	; (8008c4c <HAL_UART_IRQHandler+0x4e4>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d059      	beq.n	8008aaa <HAL_UART_IRQHandler+0x342>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a94      	ldr	r2, [pc, #592]	; (8008c50 <HAL_UART_IRQHandler+0x4e8>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d053      	beq.n	8008aaa <HAL_UART_IRQHandler+0x342>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a92      	ldr	r2, [pc, #584]	; (8008c54 <HAL_UART_IRQHandler+0x4ec>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d04d      	beq.n	8008aaa <HAL_UART_IRQHandler+0x342>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a90      	ldr	r2, [pc, #576]	; (8008c58 <HAL_UART_IRQHandler+0x4f0>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d047      	beq.n	8008aaa <HAL_UART_IRQHandler+0x342>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a8e      	ldr	r2, [pc, #568]	; (8008c5c <HAL_UART_IRQHandler+0x4f4>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d041      	beq.n	8008aaa <HAL_UART_IRQHandler+0x342>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a8c      	ldr	r2, [pc, #560]	; (8008c60 <HAL_UART_IRQHandler+0x4f8>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d03b      	beq.n	8008aaa <HAL_UART_IRQHandler+0x342>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a8a      	ldr	r2, [pc, #552]	; (8008c64 <HAL_UART_IRQHandler+0x4fc>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d035      	beq.n	8008aaa <HAL_UART_IRQHandler+0x342>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a88      	ldr	r2, [pc, #544]	; (8008c68 <HAL_UART_IRQHandler+0x500>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d02f      	beq.n	8008aaa <HAL_UART_IRQHandler+0x342>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a86      	ldr	r2, [pc, #536]	; (8008c6c <HAL_UART_IRQHandler+0x504>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d029      	beq.n	8008aaa <HAL_UART_IRQHandler+0x342>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a84      	ldr	r2, [pc, #528]	; (8008c70 <HAL_UART_IRQHandler+0x508>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d023      	beq.n	8008aaa <HAL_UART_IRQHandler+0x342>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a82      	ldr	r2, [pc, #520]	; (8008c74 <HAL_UART_IRQHandler+0x50c>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d01d      	beq.n	8008aaa <HAL_UART_IRQHandler+0x342>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a80      	ldr	r2, [pc, #512]	; (8008c78 <HAL_UART_IRQHandler+0x510>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d017      	beq.n	8008aaa <HAL_UART_IRQHandler+0x342>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a7e      	ldr	r2, [pc, #504]	; (8008c7c <HAL_UART_IRQHandler+0x514>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d011      	beq.n	8008aaa <HAL_UART_IRQHandler+0x342>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a7c      	ldr	r2, [pc, #496]	; (8008c80 <HAL_UART_IRQHandler+0x518>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d00b      	beq.n	8008aaa <HAL_UART_IRQHandler+0x342>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a7a      	ldr	r2, [pc, #488]	; (8008c84 <HAL_UART_IRQHandler+0x51c>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d005      	beq.n	8008aaa <HAL_UART_IRQHandler+0x342>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a78      	ldr	r2, [pc, #480]	; (8008c88 <HAL_UART_IRQHandler+0x520>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d105      	bne.n	8008ab6 <HAL_UART_IRQHandler+0x34e>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	e004      	b.n	8008ac0 <HAL_UART_IRQHandler+0x358>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8008ac2:	893b      	ldrh	r3, [r7, #8]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	f000 8101 	beq.w	8008ccc <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008ad0:	893a      	ldrh	r2, [r7, #8]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	f080 80fa 	bcs.w	8008ccc <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	893a      	ldrh	r2, [r7, #8]
 8008adc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ae4:	69db      	ldr	r3, [r3, #28]
 8008ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008aea:	d02b      	beq.n	8008b44 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008afa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	689a      	ldr	r2, [r3, #8]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f022 0201 	bic.w	r2, r2, #1
 8008b0a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	689a      	ldr	r2, [r3, #8]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b1a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2220      	movs	r2, #32
 8008b20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f022 0210 	bic.w	r2, r2, #16
 8008b38:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7f9 ff94 	bl	8002a6c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	1ad3      	subs	r3, r2, r3
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	4619      	mov	r1, r3
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 f8c9 	bl	8008cf0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008b5e:	e0b5      	b.n	8008ccc <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	1ad3      	subs	r3, r2, r3
 8008b70:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	f000 80a8 	beq.w	8008cd0 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8008b80:	897b      	ldrh	r3, [r7, #10]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	f000 80a4 	beq.w	8008cd0 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008b96:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	6899      	ldr	r1, [r3, #8]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	4b3a      	ldr	r3, [pc, #232]	; (8008c8c <HAL_UART_IRQHandler+0x524>)
 8008ba4:	400b      	ands	r3, r1
 8008ba6:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2220      	movs	r2, #32
 8008bac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f022 0210 	bic.w	r2, r2, #16
 8008bca:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008bcc:	897b      	ldrh	r3, [r7, #10]
 8008bce:	4619      	mov	r1, r3
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 f88d 	bl	8008cf0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008bd6:	e07b      	b.n	8008cd0 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d00d      	beq.n	8008bfe <HAL_UART_IRQHandler+0x496>
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d008      	beq.n	8008bfe <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008bf4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f001 f820 	bl	8009c3c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008bfc:	e06b      	b.n	8008cd6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d012      	beq.n	8008c2e <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d104      	bne.n	8008c1c <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d008      	beq.n	8008c2e <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d057      	beq.n	8008cd4 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	4798      	blx	r3
    }
    return;
 8008c2c:	e052      	b.n	8008cd4 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d02b      	beq.n	8008c90 <HAL_UART_IRQHandler+0x528>
 8008c38:	69bb      	ldr	r3, [r7, #24]
 8008c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d026      	beq.n	8008c90 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 ff76 	bl	8009b34 <UART_EndTransmit_IT>
    return;
 8008c48:	e045      	b.n	8008cd6 <HAL_UART_IRQHandler+0x56e>
 8008c4a:	bf00      	nop
 8008c4c:	40020010 	.word	0x40020010
 8008c50:	40020028 	.word	0x40020028
 8008c54:	40020040 	.word	0x40020040
 8008c58:	40020058 	.word	0x40020058
 8008c5c:	40020070 	.word	0x40020070
 8008c60:	40020088 	.word	0x40020088
 8008c64:	400200a0 	.word	0x400200a0
 8008c68:	400200b8 	.word	0x400200b8
 8008c6c:	40020410 	.word	0x40020410
 8008c70:	40020428 	.word	0x40020428
 8008c74:	40020440 	.word	0x40020440
 8008c78:	40020458 	.word	0x40020458
 8008c7c:	40020470 	.word	0x40020470
 8008c80:	40020488 	.word	0x40020488
 8008c84:	400204a0 	.word	0x400204a0
 8008c88:	400204b8 	.word	0x400204b8
 8008c8c:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d008      	beq.n	8008cac <HAL_UART_IRQHandler+0x544>
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d003      	beq.n	8008cac <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 ffdd 	bl	8009c64 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008caa:	e014      	b.n	8008cd6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00f      	beq.n	8008cd6 <HAL_UART_IRQHandler+0x56e>
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	da0c      	bge.n	8008cd6 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 ffc7 	bl	8009c50 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008cc2:	e008      	b.n	8008cd6 <HAL_UART_IRQHandler+0x56e>
      return;
 8008cc4:	bf00      	nop
 8008cc6:	e006      	b.n	8008cd6 <HAL_UART_IRQHandler+0x56e>
    return;
 8008cc8:	bf00      	nop
 8008cca:	e004      	b.n	8008cd6 <HAL_UART_IRQHandler+0x56e>
      return;
 8008ccc:	bf00      	nop
 8008cce:	e002      	b.n	8008cd6 <HAL_UART_IRQHandler+0x56e>
      return;
 8008cd0:	bf00      	nop
 8008cd2:	e000      	b.n	8008cd6 <HAL_UART_IRQHandler+0x56e>
    return;
 8008cd4:	bf00      	nop
  }
}
 8008cd6:	3720      	adds	r7, #32
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008ce4:	bf00      	nop
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008cfc:	bf00      	nop
 8008cfe:	370c      	adds	r7, #12
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d08:	b5b0      	push	{r4, r5, r7, lr}
 8008d0a:	b08e      	sub	sp, #56	; 0x38
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d10:	2300      	movs	r3, #0
 8008d12:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	689a      	ldr	r2, [r3, #8]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	691b      	ldr	r3, [r3, #16]
 8008d1e:	431a      	orrs	r2, r3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	695b      	ldr	r3, [r3, #20]
 8008d24:	431a      	orrs	r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	69db      	ldr	r3, [r3, #28]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	4bbf      	ldr	r3, [pc, #764]	; (8009034 <UART_SetConfig+0x32c>)
 8008d36:	4013      	ands	r3, r2
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	6812      	ldr	r2, [r2, #0]
 8008d3c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008d3e:	430b      	orrs	r3, r1
 8008d40:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	68da      	ldr	r2, [r3, #12]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	430a      	orrs	r2, r1
 8008d56:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	699b      	ldr	r3, [r3, #24]
 8008d5c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4ab5      	ldr	r2, [pc, #724]	; (8009038 <UART_SetConfig+0x330>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d004      	beq.n	8008d72 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6a1b      	ldr	r3, [r3, #32]
 8008d6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	689a      	ldr	r2, [r3, #8]
 8008d78:	4bb0      	ldr	r3, [pc, #704]	; (800903c <UART_SetConfig+0x334>)
 8008d7a:	4013      	ands	r3, r2
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	6812      	ldr	r2, [r2, #0]
 8008d80:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008d82:	430b      	orrs	r3, r1
 8008d84:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d8c:	f023 010f 	bic.w	r1, r3, #15
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	430a      	orrs	r2, r1
 8008d9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4aa7      	ldr	r2, [pc, #668]	; (8009040 <UART_SetConfig+0x338>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d176      	bne.n	8008e94 <UART_SetConfig+0x18c>
 8008da6:	4ba7      	ldr	r3, [pc, #668]	; (8009044 <UART_SetConfig+0x33c>)
 8008da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008daa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008dae:	2b28      	cmp	r3, #40	; 0x28
 8008db0:	d86c      	bhi.n	8008e8c <UART_SetConfig+0x184>
 8008db2:	a201      	add	r2, pc, #4	; (adr r2, 8008db8 <UART_SetConfig+0xb0>)
 8008db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db8:	08008e5d 	.word	0x08008e5d
 8008dbc:	08008e8d 	.word	0x08008e8d
 8008dc0:	08008e8d 	.word	0x08008e8d
 8008dc4:	08008e8d 	.word	0x08008e8d
 8008dc8:	08008e8d 	.word	0x08008e8d
 8008dcc:	08008e8d 	.word	0x08008e8d
 8008dd0:	08008e8d 	.word	0x08008e8d
 8008dd4:	08008e8d 	.word	0x08008e8d
 8008dd8:	08008e65 	.word	0x08008e65
 8008ddc:	08008e8d 	.word	0x08008e8d
 8008de0:	08008e8d 	.word	0x08008e8d
 8008de4:	08008e8d 	.word	0x08008e8d
 8008de8:	08008e8d 	.word	0x08008e8d
 8008dec:	08008e8d 	.word	0x08008e8d
 8008df0:	08008e8d 	.word	0x08008e8d
 8008df4:	08008e8d 	.word	0x08008e8d
 8008df8:	08008e6d 	.word	0x08008e6d
 8008dfc:	08008e8d 	.word	0x08008e8d
 8008e00:	08008e8d 	.word	0x08008e8d
 8008e04:	08008e8d 	.word	0x08008e8d
 8008e08:	08008e8d 	.word	0x08008e8d
 8008e0c:	08008e8d 	.word	0x08008e8d
 8008e10:	08008e8d 	.word	0x08008e8d
 8008e14:	08008e8d 	.word	0x08008e8d
 8008e18:	08008e75 	.word	0x08008e75
 8008e1c:	08008e8d 	.word	0x08008e8d
 8008e20:	08008e8d 	.word	0x08008e8d
 8008e24:	08008e8d 	.word	0x08008e8d
 8008e28:	08008e8d 	.word	0x08008e8d
 8008e2c:	08008e8d 	.word	0x08008e8d
 8008e30:	08008e8d 	.word	0x08008e8d
 8008e34:	08008e8d 	.word	0x08008e8d
 8008e38:	08008e7d 	.word	0x08008e7d
 8008e3c:	08008e8d 	.word	0x08008e8d
 8008e40:	08008e8d 	.word	0x08008e8d
 8008e44:	08008e8d 	.word	0x08008e8d
 8008e48:	08008e8d 	.word	0x08008e8d
 8008e4c:	08008e8d 	.word	0x08008e8d
 8008e50:	08008e8d 	.word	0x08008e8d
 8008e54:	08008e8d 	.word	0x08008e8d
 8008e58:	08008e85 	.word	0x08008e85
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e62:	e222      	b.n	80092aa <UART_SetConfig+0x5a2>
 8008e64:	2304      	movs	r3, #4
 8008e66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e6a:	e21e      	b.n	80092aa <UART_SetConfig+0x5a2>
 8008e6c:	2308      	movs	r3, #8
 8008e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e72:	e21a      	b.n	80092aa <UART_SetConfig+0x5a2>
 8008e74:	2310      	movs	r3, #16
 8008e76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e7a:	e216      	b.n	80092aa <UART_SetConfig+0x5a2>
 8008e7c:	2320      	movs	r3, #32
 8008e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e82:	e212      	b.n	80092aa <UART_SetConfig+0x5a2>
 8008e84:	2340      	movs	r3, #64	; 0x40
 8008e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e8a:	e20e      	b.n	80092aa <UART_SetConfig+0x5a2>
 8008e8c:	2380      	movs	r3, #128	; 0x80
 8008e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e92:	e20a      	b.n	80092aa <UART_SetConfig+0x5a2>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a6b      	ldr	r2, [pc, #428]	; (8009048 <UART_SetConfig+0x340>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d130      	bne.n	8008f00 <UART_SetConfig+0x1f8>
 8008e9e:	4b69      	ldr	r3, [pc, #420]	; (8009044 <UART_SetConfig+0x33c>)
 8008ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ea2:	f003 0307 	and.w	r3, r3, #7
 8008ea6:	2b05      	cmp	r3, #5
 8008ea8:	d826      	bhi.n	8008ef8 <UART_SetConfig+0x1f0>
 8008eaa:	a201      	add	r2, pc, #4	; (adr r2, 8008eb0 <UART_SetConfig+0x1a8>)
 8008eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb0:	08008ec9 	.word	0x08008ec9
 8008eb4:	08008ed1 	.word	0x08008ed1
 8008eb8:	08008ed9 	.word	0x08008ed9
 8008ebc:	08008ee1 	.word	0x08008ee1
 8008ec0:	08008ee9 	.word	0x08008ee9
 8008ec4:	08008ef1 	.word	0x08008ef1
 8008ec8:	2300      	movs	r3, #0
 8008eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ece:	e1ec      	b.n	80092aa <UART_SetConfig+0x5a2>
 8008ed0:	2304      	movs	r3, #4
 8008ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ed6:	e1e8      	b.n	80092aa <UART_SetConfig+0x5a2>
 8008ed8:	2308      	movs	r3, #8
 8008eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ede:	e1e4      	b.n	80092aa <UART_SetConfig+0x5a2>
 8008ee0:	2310      	movs	r3, #16
 8008ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ee6:	e1e0      	b.n	80092aa <UART_SetConfig+0x5a2>
 8008ee8:	2320      	movs	r3, #32
 8008eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eee:	e1dc      	b.n	80092aa <UART_SetConfig+0x5a2>
 8008ef0:	2340      	movs	r3, #64	; 0x40
 8008ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ef6:	e1d8      	b.n	80092aa <UART_SetConfig+0x5a2>
 8008ef8:	2380      	movs	r3, #128	; 0x80
 8008efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008efe:	e1d4      	b.n	80092aa <UART_SetConfig+0x5a2>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a51      	ldr	r2, [pc, #324]	; (800904c <UART_SetConfig+0x344>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d130      	bne.n	8008f6c <UART_SetConfig+0x264>
 8008f0a:	4b4e      	ldr	r3, [pc, #312]	; (8009044 <UART_SetConfig+0x33c>)
 8008f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f0e:	f003 0307 	and.w	r3, r3, #7
 8008f12:	2b05      	cmp	r3, #5
 8008f14:	d826      	bhi.n	8008f64 <UART_SetConfig+0x25c>
 8008f16:	a201      	add	r2, pc, #4	; (adr r2, 8008f1c <UART_SetConfig+0x214>)
 8008f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f1c:	08008f35 	.word	0x08008f35
 8008f20:	08008f3d 	.word	0x08008f3d
 8008f24:	08008f45 	.word	0x08008f45
 8008f28:	08008f4d 	.word	0x08008f4d
 8008f2c:	08008f55 	.word	0x08008f55
 8008f30:	08008f5d 	.word	0x08008f5d
 8008f34:	2300      	movs	r3, #0
 8008f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f3a:	e1b6      	b.n	80092aa <UART_SetConfig+0x5a2>
 8008f3c:	2304      	movs	r3, #4
 8008f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f42:	e1b2      	b.n	80092aa <UART_SetConfig+0x5a2>
 8008f44:	2308      	movs	r3, #8
 8008f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f4a:	e1ae      	b.n	80092aa <UART_SetConfig+0x5a2>
 8008f4c:	2310      	movs	r3, #16
 8008f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f52:	e1aa      	b.n	80092aa <UART_SetConfig+0x5a2>
 8008f54:	2320      	movs	r3, #32
 8008f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f5a:	e1a6      	b.n	80092aa <UART_SetConfig+0x5a2>
 8008f5c:	2340      	movs	r3, #64	; 0x40
 8008f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f62:	e1a2      	b.n	80092aa <UART_SetConfig+0x5a2>
 8008f64:	2380      	movs	r3, #128	; 0x80
 8008f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f6a:	e19e      	b.n	80092aa <UART_SetConfig+0x5a2>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a37      	ldr	r2, [pc, #220]	; (8009050 <UART_SetConfig+0x348>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d130      	bne.n	8008fd8 <UART_SetConfig+0x2d0>
 8008f76:	4b33      	ldr	r3, [pc, #204]	; (8009044 <UART_SetConfig+0x33c>)
 8008f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f7a:	f003 0307 	and.w	r3, r3, #7
 8008f7e:	2b05      	cmp	r3, #5
 8008f80:	d826      	bhi.n	8008fd0 <UART_SetConfig+0x2c8>
 8008f82:	a201      	add	r2, pc, #4	; (adr r2, 8008f88 <UART_SetConfig+0x280>)
 8008f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f88:	08008fa1 	.word	0x08008fa1
 8008f8c:	08008fa9 	.word	0x08008fa9
 8008f90:	08008fb1 	.word	0x08008fb1
 8008f94:	08008fb9 	.word	0x08008fb9
 8008f98:	08008fc1 	.word	0x08008fc1
 8008f9c:	08008fc9 	.word	0x08008fc9
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fa6:	e180      	b.n	80092aa <UART_SetConfig+0x5a2>
 8008fa8:	2304      	movs	r3, #4
 8008faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fae:	e17c      	b.n	80092aa <UART_SetConfig+0x5a2>
 8008fb0:	2308      	movs	r3, #8
 8008fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fb6:	e178      	b.n	80092aa <UART_SetConfig+0x5a2>
 8008fb8:	2310      	movs	r3, #16
 8008fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fbe:	e174      	b.n	80092aa <UART_SetConfig+0x5a2>
 8008fc0:	2320      	movs	r3, #32
 8008fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fc6:	e170      	b.n	80092aa <UART_SetConfig+0x5a2>
 8008fc8:	2340      	movs	r3, #64	; 0x40
 8008fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fce:	e16c      	b.n	80092aa <UART_SetConfig+0x5a2>
 8008fd0:	2380      	movs	r3, #128	; 0x80
 8008fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fd6:	e168      	b.n	80092aa <UART_SetConfig+0x5a2>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a1d      	ldr	r2, [pc, #116]	; (8009054 <UART_SetConfig+0x34c>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d142      	bne.n	8009068 <UART_SetConfig+0x360>
 8008fe2:	4b18      	ldr	r3, [pc, #96]	; (8009044 <UART_SetConfig+0x33c>)
 8008fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fe6:	f003 0307 	and.w	r3, r3, #7
 8008fea:	2b05      	cmp	r3, #5
 8008fec:	d838      	bhi.n	8009060 <UART_SetConfig+0x358>
 8008fee:	a201      	add	r2, pc, #4	; (adr r2, 8008ff4 <UART_SetConfig+0x2ec>)
 8008ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff4:	0800900d 	.word	0x0800900d
 8008ff8:	08009015 	.word	0x08009015
 8008ffc:	0800901d 	.word	0x0800901d
 8009000:	08009025 	.word	0x08009025
 8009004:	0800902d 	.word	0x0800902d
 8009008:	08009059 	.word	0x08009059
 800900c:	2300      	movs	r3, #0
 800900e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009012:	e14a      	b.n	80092aa <UART_SetConfig+0x5a2>
 8009014:	2304      	movs	r3, #4
 8009016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800901a:	e146      	b.n	80092aa <UART_SetConfig+0x5a2>
 800901c:	2308      	movs	r3, #8
 800901e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009022:	e142      	b.n	80092aa <UART_SetConfig+0x5a2>
 8009024:	2310      	movs	r3, #16
 8009026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800902a:	e13e      	b.n	80092aa <UART_SetConfig+0x5a2>
 800902c:	2320      	movs	r3, #32
 800902e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009032:	e13a      	b.n	80092aa <UART_SetConfig+0x5a2>
 8009034:	cfff69f3 	.word	0xcfff69f3
 8009038:	58000c00 	.word	0x58000c00
 800903c:	11fff4ff 	.word	0x11fff4ff
 8009040:	40011000 	.word	0x40011000
 8009044:	58024400 	.word	0x58024400
 8009048:	40004400 	.word	0x40004400
 800904c:	40004800 	.word	0x40004800
 8009050:	40004c00 	.word	0x40004c00
 8009054:	40005000 	.word	0x40005000
 8009058:	2340      	movs	r3, #64	; 0x40
 800905a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800905e:	e124      	b.n	80092aa <UART_SetConfig+0x5a2>
 8009060:	2380      	movs	r3, #128	; 0x80
 8009062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009066:	e120      	b.n	80092aa <UART_SetConfig+0x5a2>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4acc      	ldr	r2, [pc, #816]	; (80093a0 <UART_SetConfig+0x698>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d176      	bne.n	8009160 <UART_SetConfig+0x458>
 8009072:	4bcc      	ldr	r3, [pc, #816]	; (80093a4 <UART_SetConfig+0x69c>)
 8009074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009076:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800907a:	2b28      	cmp	r3, #40	; 0x28
 800907c:	d86c      	bhi.n	8009158 <UART_SetConfig+0x450>
 800907e:	a201      	add	r2, pc, #4	; (adr r2, 8009084 <UART_SetConfig+0x37c>)
 8009080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009084:	08009129 	.word	0x08009129
 8009088:	08009159 	.word	0x08009159
 800908c:	08009159 	.word	0x08009159
 8009090:	08009159 	.word	0x08009159
 8009094:	08009159 	.word	0x08009159
 8009098:	08009159 	.word	0x08009159
 800909c:	08009159 	.word	0x08009159
 80090a0:	08009159 	.word	0x08009159
 80090a4:	08009131 	.word	0x08009131
 80090a8:	08009159 	.word	0x08009159
 80090ac:	08009159 	.word	0x08009159
 80090b0:	08009159 	.word	0x08009159
 80090b4:	08009159 	.word	0x08009159
 80090b8:	08009159 	.word	0x08009159
 80090bc:	08009159 	.word	0x08009159
 80090c0:	08009159 	.word	0x08009159
 80090c4:	08009139 	.word	0x08009139
 80090c8:	08009159 	.word	0x08009159
 80090cc:	08009159 	.word	0x08009159
 80090d0:	08009159 	.word	0x08009159
 80090d4:	08009159 	.word	0x08009159
 80090d8:	08009159 	.word	0x08009159
 80090dc:	08009159 	.word	0x08009159
 80090e0:	08009159 	.word	0x08009159
 80090e4:	08009141 	.word	0x08009141
 80090e8:	08009159 	.word	0x08009159
 80090ec:	08009159 	.word	0x08009159
 80090f0:	08009159 	.word	0x08009159
 80090f4:	08009159 	.word	0x08009159
 80090f8:	08009159 	.word	0x08009159
 80090fc:	08009159 	.word	0x08009159
 8009100:	08009159 	.word	0x08009159
 8009104:	08009149 	.word	0x08009149
 8009108:	08009159 	.word	0x08009159
 800910c:	08009159 	.word	0x08009159
 8009110:	08009159 	.word	0x08009159
 8009114:	08009159 	.word	0x08009159
 8009118:	08009159 	.word	0x08009159
 800911c:	08009159 	.word	0x08009159
 8009120:	08009159 	.word	0x08009159
 8009124:	08009151 	.word	0x08009151
 8009128:	2301      	movs	r3, #1
 800912a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800912e:	e0bc      	b.n	80092aa <UART_SetConfig+0x5a2>
 8009130:	2304      	movs	r3, #4
 8009132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009136:	e0b8      	b.n	80092aa <UART_SetConfig+0x5a2>
 8009138:	2308      	movs	r3, #8
 800913a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800913e:	e0b4      	b.n	80092aa <UART_SetConfig+0x5a2>
 8009140:	2310      	movs	r3, #16
 8009142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009146:	e0b0      	b.n	80092aa <UART_SetConfig+0x5a2>
 8009148:	2320      	movs	r3, #32
 800914a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800914e:	e0ac      	b.n	80092aa <UART_SetConfig+0x5a2>
 8009150:	2340      	movs	r3, #64	; 0x40
 8009152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009156:	e0a8      	b.n	80092aa <UART_SetConfig+0x5a2>
 8009158:	2380      	movs	r3, #128	; 0x80
 800915a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800915e:	e0a4      	b.n	80092aa <UART_SetConfig+0x5a2>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a90      	ldr	r2, [pc, #576]	; (80093a8 <UART_SetConfig+0x6a0>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d130      	bne.n	80091cc <UART_SetConfig+0x4c4>
 800916a:	4b8e      	ldr	r3, [pc, #568]	; (80093a4 <UART_SetConfig+0x69c>)
 800916c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800916e:	f003 0307 	and.w	r3, r3, #7
 8009172:	2b05      	cmp	r3, #5
 8009174:	d826      	bhi.n	80091c4 <UART_SetConfig+0x4bc>
 8009176:	a201      	add	r2, pc, #4	; (adr r2, 800917c <UART_SetConfig+0x474>)
 8009178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800917c:	08009195 	.word	0x08009195
 8009180:	0800919d 	.word	0x0800919d
 8009184:	080091a5 	.word	0x080091a5
 8009188:	080091ad 	.word	0x080091ad
 800918c:	080091b5 	.word	0x080091b5
 8009190:	080091bd 	.word	0x080091bd
 8009194:	2300      	movs	r3, #0
 8009196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800919a:	e086      	b.n	80092aa <UART_SetConfig+0x5a2>
 800919c:	2304      	movs	r3, #4
 800919e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091a2:	e082      	b.n	80092aa <UART_SetConfig+0x5a2>
 80091a4:	2308      	movs	r3, #8
 80091a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091aa:	e07e      	b.n	80092aa <UART_SetConfig+0x5a2>
 80091ac:	2310      	movs	r3, #16
 80091ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091b2:	e07a      	b.n	80092aa <UART_SetConfig+0x5a2>
 80091b4:	2320      	movs	r3, #32
 80091b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091ba:	e076      	b.n	80092aa <UART_SetConfig+0x5a2>
 80091bc:	2340      	movs	r3, #64	; 0x40
 80091be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091c2:	e072      	b.n	80092aa <UART_SetConfig+0x5a2>
 80091c4:	2380      	movs	r3, #128	; 0x80
 80091c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80091ca:	e06e      	b.n	80092aa <UART_SetConfig+0x5a2>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a76      	ldr	r2, [pc, #472]	; (80093ac <UART_SetConfig+0x6a4>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d130      	bne.n	8009238 <UART_SetConfig+0x530>
 80091d6:	4b73      	ldr	r3, [pc, #460]	; (80093a4 <UART_SetConfig+0x69c>)
 80091d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091da:	f003 0307 	and.w	r3, r3, #7
 80091de:	2b05      	cmp	r3, #5
 80091e0:	d826      	bhi.n	8009230 <UART_SetConfig+0x528>
 80091e2:	a201      	add	r2, pc, #4	; (adr r2, 80091e8 <UART_SetConfig+0x4e0>)
 80091e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e8:	08009201 	.word	0x08009201
 80091ec:	08009209 	.word	0x08009209
 80091f0:	08009211 	.word	0x08009211
 80091f4:	08009219 	.word	0x08009219
 80091f8:	08009221 	.word	0x08009221
 80091fc:	08009229 	.word	0x08009229
 8009200:	2300      	movs	r3, #0
 8009202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009206:	e050      	b.n	80092aa <UART_SetConfig+0x5a2>
 8009208:	2304      	movs	r3, #4
 800920a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800920e:	e04c      	b.n	80092aa <UART_SetConfig+0x5a2>
 8009210:	2308      	movs	r3, #8
 8009212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009216:	e048      	b.n	80092aa <UART_SetConfig+0x5a2>
 8009218:	2310      	movs	r3, #16
 800921a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800921e:	e044      	b.n	80092aa <UART_SetConfig+0x5a2>
 8009220:	2320      	movs	r3, #32
 8009222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009226:	e040      	b.n	80092aa <UART_SetConfig+0x5a2>
 8009228:	2340      	movs	r3, #64	; 0x40
 800922a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800922e:	e03c      	b.n	80092aa <UART_SetConfig+0x5a2>
 8009230:	2380      	movs	r3, #128	; 0x80
 8009232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009236:	e038      	b.n	80092aa <UART_SetConfig+0x5a2>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a5c      	ldr	r2, [pc, #368]	; (80093b0 <UART_SetConfig+0x6a8>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d130      	bne.n	80092a4 <UART_SetConfig+0x59c>
 8009242:	4b58      	ldr	r3, [pc, #352]	; (80093a4 <UART_SetConfig+0x69c>)
 8009244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009246:	f003 0307 	and.w	r3, r3, #7
 800924a:	2b05      	cmp	r3, #5
 800924c:	d826      	bhi.n	800929c <UART_SetConfig+0x594>
 800924e:	a201      	add	r2, pc, #4	; (adr r2, 8009254 <UART_SetConfig+0x54c>)
 8009250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009254:	0800926d 	.word	0x0800926d
 8009258:	08009275 	.word	0x08009275
 800925c:	0800927d 	.word	0x0800927d
 8009260:	08009285 	.word	0x08009285
 8009264:	0800928d 	.word	0x0800928d
 8009268:	08009295 	.word	0x08009295
 800926c:	2302      	movs	r3, #2
 800926e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009272:	e01a      	b.n	80092aa <UART_SetConfig+0x5a2>
 8009274:	2304      	movs	r3, #4
 8009276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800927a:	e016      	b.n	80092aa <UART_SetConfig+0x5a2>
 800927c:	2308      	movs	r3, #8
 800927e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009282:	e012      	b.n	80092aa <UART_SetConfig+0x5a2>
 8009284:	2310      	movs	r3, #16
 8009286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800928a:	e00e      	b.n	80092aa <UART_SetConfig+0x5a2>
 800928c:	2320      	movs	r3, #32
 800928e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009292:	e00a      	b.n	80092aa <UART_SetConfig+0x5a2>
 8009294:	2340      	movs	r3, #64	; 0x40
 8009296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800929a:	e006      	b.n	80092aa <UART_SetConfig+0x5a2>
 800929c:	2380      	movs	r3, #128	; 0x80
 800929e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092a2:	e002      	b.n	80092aa <UART_SetConfig+0x5a2>
 80092a4:	2380      	movs	r3, #128	; 0x80
 80092a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a40      	ldr	r2, [pc, #256]	; (80093b0 <UART_SetConfig+0x6a8>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	f040 80ef 	bne.w	8009494 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80092b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80092ba:	2b20      	cmp	r3, #32
 80092bc:	dc46      	bgt.n	800934c <UART_SetConfig+0x644>
 80092be:	2b02      	cmp	r3, #2
 80092c0:	f2c0 8081 	blt.w	80093c6 <UART_SetConfig+0x6be>
 80092c4:	3b02      	subs	r3, #2
 80092c6:	2b1e      	cmp	r3, #30
 80092c8:	d87d      	bhi.n	80093c6 <UART_SetConfig+0x6be>
 80092ca:	a201      	add	r2, pc, #4	; (adr r2, 80092d0 <UART_SetConfig+0x5c8>)
 80092cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d0:	08009353 	.word	0x08009353
 80092d4:	080093c7 	.word	0x080093c7
 80092d8:	0800935b 	.word	0x0800935b
 80092dc:	080093c7 	.word	0x080093c7
 80092e0:	080093c7 	.word	0x080093c7
 80092e4:	080093c7 	.word	0x080093c7
 80092e8:	0800936b 	.word	0x0800936b
 80092ec:	080093c7 	.word	0x080093c7
 80092f0:	080093c7 	.word	0x080093c7
 80092f4:	080093c7 	.word	0x080093c7
 80092f8:	080093c7 	.word	0x080093c7
 80092fc:	080093c7 	.word	0x080093c7
 8009300:	080093c7 	.word	0x080093c7
 8009304:	080093c7 	.word	0x080093c7
 8009308:	0800937b 	.word	0x0800937b
 800930c:	080093c7 	.word	0x080093c7
 8009310:	080093c7 	.word	0x080093c7
 8009314:	080093c7 	.word	0x080093c7
 8009318:	080093c7 	.word	0x080093c7
 800931c:	080093c7 	.word	0x080093c7
 8009320:	080093c7 	.word	0x080093c7
 8009324:	080093c7 	.word	0x080093c7
 8009328:	080093c7 	.word	0x080093c7
 800932c:	080093c7 	.word	0x080093c7
 8009330:	080093c7 	.word	0x080093c7
 8009334:	080093c7 	.word	0x080093c7
 8009338:	080093c7 	.word	0x080093c7
 800933c:	080093c7 	.word	0x080093c7
 8009340:	080093c7 	.word	0x080093c7
 8009344:	080093c7 	.word	0x080093c7
 8009348:	080093b9 	.word	0x080093b9
 800934c:	2b40      	cmp	r3, #64	; 0x40
 800934e:	d036      	beq.n	80093be <UART_SetConfig+0x6b6>
 8009350:	e039      	b.n	80093c6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009352:	f7fd fb4d 	bl	80069f0 <HAL_RCCEx_GetD3PCLK1Freq>
 8009356:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009358:	e03b      	b.n	80093d2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800935a:	f107 0314 	add.w	r3, r7, #20
 800935e:	4618      	mov	r0, r3
 8009360:	f7fd fb5c 	bl	8006a1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009368:	e033      	b.n	80093d2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800936a:	f107 0308 	add.w	r3, r7, #8
 800936e:	4618      	mov	r0, r3
 8009370:	f7fd fca8 	bl	8006cc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009378:	e02b      	b.n	80093d2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800937a:	4b0a      	ldr	r3, [pc, #40]	; (80093a4 <UART_SetConfig+0x69c>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f003 0320 	and.w	r3, r3, #32
 8009382:	2b00      	cmp	r3, #0
 8009384:	d009      	beq.n	800939a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009386:	4b07      	ldr	r3, [pc, #28]	; (80093a4 <UART_SetConfig+0x69c>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	08db      	lsrs	r3, r3, #3
 800938c:	f003 0303 	and.w	r3, r3, #3
 8009390:	4a08      	ldr	r2, [pc, #32]	; (80093b4 <UART_SetConfig+0x6ac>)
 8009392:	fa22 f303 	lsr.w	r3, r2, r3
 8009396:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009398:	e01b      	b.n	80093d2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800939a:	4b06      	ldr	r3, [pc, #24]	; (80093b4 <UART_SetConfig+0x6ac>)
 800939c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800939e:	e018      	b.n	80093d2 <UART_SetConfig+0x6ca>
 80093a0:	40011400 	.word	0x40011400
 80093a4:	58024400 	.word	0x58024400
 80093a8:	40007800 	.word	0x40007800
 80093ac:	40007c00 	.word	0x40007c00
 80093b0:	58000c00 	.word	0x58000c00
 80093b4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80093b8:	4bc4      	ldr	r3, [pc, #784]	; (80096cc <UART_SetConfig+0x9c4>)
 80093ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093bc:	e009      	b.n	80093d2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093c4:	e005      	b.n	80093d2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80093c6:	2300      	movs	r3, #0
 80093c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80093d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80093d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	f000 81da 	beq.w	800978e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093de:	4abc      	ldr	r2, [pc, #752]	; (80096d0 <UART_SetConfig+0x9c8>)
 80093e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093e4:	461a      	mov	r2, r3
 80093e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80093ec:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	685a      	ldr	r2, [r3, #4]
 80093f2:	4613      	mov	r3, r2
 80093f4:	005b      	lsls	r3, r3, #1
 80093f6:	4413      	add	r3, r2
 80093f8:	6a3a      	ldr	r2, [r7, #32]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d305      	bcc.n	800940a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009404:	6a3a      	ldr	r2, [r7, #32]
 8009406:	429a      	cmp	r2, r3
 8009408:	d903      	bls.n	8009412 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800940a:	2301      	movs	r3, #1
 800940c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009410:	e1bd      	b.n	800978e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009414:	4618      	mov	r0, r3
 8009416:	f04f 0100 	mov.w	r1, #0
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800941e:	4aac      	ldr	r2, [pc, #688]	; (80096d0 <UART_SetConfig+0x9c8>)
 8009420:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009424:	b29a      	uxth	r2, r3
 8009426:	f04f 0300 	mov.w	r3, #0
 800942a:	f7f6 ff55 	bl	80002d8 <__aeabi_uldivmod>
 800942e:	4602      	mov	r2, r0
 8009430:	460b      	mov	r3, r1
 8009432:	4610      	mov	r0, r2
 8009434:	4619      	mov	r1, r3
 8009436:	f04f 0200 	mov.w	r2, #0
 800943a:	f04f 0300 	mov.w	r3, #0
 800943e:	020b      	lsls	r3, r1, #8
 8009440:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009444:	0202      	lsls	r2, r0, #8
 8009446:	6879      	ldr	r1, [r7, #4]
 8009448:	6849      	ldr	r1, [r1, #4]
 800944a:	0849      	lsrs	r1, r1, #1
 800944c:	4608      	mov	r0, r1
 800944e:	f04f 0100 	mov.w	r1, #0
 8009452:	1814      	adds	r4, r2, r0
 8009454:	eb43 0501 	adc.w	r5, r3, r1
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	461a      	mov	r2, r3
 800945e:	f04f 0300 	mov.w	r3, #0
 8009462:	4620      	mov	r0, r4
 8009464:	4629      	mov	r1, r5
 8009466:	f7f6 ff37 	bl	80002d8 <__aeabi_uldivmod>
 800946a:	4602      	mov	r2, r0
 800946c:	460b      	mov	r3, r1
 800946e:	4613      	mov	r3, r2
 8009470:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009474:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009478:	d308      	bcc.n	800948c <UART_SetConfig+0x784>
 800947a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009480:	d204      	bcs.n	800948c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009488:	60da      	str	r2, [r3, #12]
 800948a:	e180      	b.n	800978e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800948c:	2301      	movs	r3, #1
 800948e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009492:	e17c      	b.n	800978e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	69db      	ldr	r3, [r3, #28]
 8009498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800949c:	f040 80bf 	bne.w	800961e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 80094a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80094a4:	2b20      	cmp	r3, #32
 80094a6:	dc49      	bgt.n	800953c <UART_SetConfig+0x834>
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	db7c      	blt.n	80095a6 <UART_SetConfig+0x89e>
 80094ac:	2b20      	cmp	r3, #32
 80094ae:	d87a      	bhi.n	80095a6 <UART_SetConfig+0x89e>
 80094b0:	a201      	add	r2, pc, #4	; (adr r2, 80094b8 <UART_SetConfig+0x7b0>)
 80094b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b6:	bf00      	nop
 80094b8:	08009543 	.word	0x08009543
 80094bc:	0800954b 	.word	0x0800954b
 80094c0:	080095a7 	.word	0x080095a7
 80094c4:	080095a7 	.word	0x080095a7
 80094c8:	08009553 	.word	0x08009553
 80094cc:	080095a7 	.word	0x080095a7
 80094d0:	080095a7 	.word	0x080095a7
 80094d4:	080095a7 	.word	0x080095a7
 80094d8:	08009563 	.word	0x08009563
 80094dc:	080095a7 	.word	0x080095a7
 80094e0:	080095a7 	.word	0x080095a7
 80094e4:	080095a7 	.word	0x080095a7
 80094e8:	080095a7 	.word	0x080095a7
 80094ec:	080095a7 	.word	0x080095a7
 80094f0:	080095a7 	.word	0x080095a7
 80094f4:	080095a7 	.word	0x080095a7
 80094f8:	08009573 	.word	0x08009573
 80094fc:	080095a7 	.word	0x080095a7
 8009500:	080095a7 	.word	0x080095a7
 8009504:	080095a7 	.word	0x080095a7
 8009508:	080095a7 	.word	0x080095a7
 800950c:	080095a7 	.word	0x080095a7
 8009510:	080095a7 	.word	0x080095a7
 8009514:	080095a7 	.word	0x080095a7
 8009518:	080095a7 	.word	0x080095a7
 800951c:	080095a7 	.word	0x080095a7
 8009520:	080095a7 	.word	0x080095a7
 8009524:	080095a7 	.word	0x080095a7
 8009528:	080095a7 	.word	0x080095a7
 800952c:	080095a7 	.word	0x080095a7
 8009530:	080095a7 	.word	0x080095a7
 8009534:	080095a7 	.word	0x080095a7
 8009538:	08009599 	.word	0x08009599
 800953c:	2b40      	cmp	r3, #64	; 0x40
 800953e:	d02e      	beq.n	800959e <UART_SetConfig+0x896>
 8009540:	e031      	b.n	80095a6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009542:	f7fc fae9 	bl	8005b18 <HAL_RCC_GetPCLK1Freq>
 8009546:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009548:	e033      	b.n	80095b2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800954a:	f7fc fafb 	bl	8005b44 <HAL_RCC_GetPCLK2Freq>
 800954e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009550:	e02f      	b.n	80095b2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009552:	f107 0314 	add.w	r3, r7, #20
 8009556:	4618      	mov	r0, r3
 8009558:	f7fd fa60 	bl	8006a1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009560:	e027      	b.n	80095b2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009562:	f107 0308 	add.w	r3, r7, #8
 8009566:	4618      	mov	r0, r3
 8009568:	f7fd fbac 	bl	8006cc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009570:	e01f      	b.n	80095b2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009572:	4b58      	ldr	r3, [pc, #352]	; (80096d4 <UART_SetConfig+0x9cc>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f003 0320 	and.w	r3, r3, #32
 800957a:	2b00      	cmp	r3, #0
 800957c:	d009      	beq.n	8009592 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800957e:	4b55      	ldr	r3, [pc, #340]	; (80096d4 <UART_SetConfig+0x9cc>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	08db      	lsrs	r3, r3, #3
 8009584:	f003 0303 	and.w	r3, r3, #3
 8009588:	4a53      	ldr	r2, [pc, #332]	; (80096d8 <UART_SetConfig+0x9d0>)
 800958a:	fa22 f303 	lsr.w	r3, r2, r3
 800958e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009590:	e00f      	b.n	80095b2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8009592:	4b51      	ldr	r3, [pc, #324]	; (80096d8 <UART_SetConfig+0x9d0>)
 8009594:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009596:	e00c      	b.n	80095b2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009598:	4b4c      	ldr	r3, [pc, #304]	; (80096cc <UART_SetConfig+0x9c4>)
 800959a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800959c:	e009      	b.n	80095b2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800959e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80095a4:	e005      	b.n	80095b2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 80095a6:	2300      	movs	r3, #0
 80095a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80095b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80095b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	f000 80ea 	beq.w	800978e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095be:	4a44      	ldr	r2, [pc, #272]	; (80096d0 <UART_SetConfig+0x9c8>)
 80095c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095c4:	461a      	mov	r2, r3
 80095c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80095cc:	005a      	lsls	r2, r3, #1
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	085b      	lsrs	r3, r3, #1
 80095d4:	441a      	add	r2, r3
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	fbb2 f3f3 	udiv	r3, r2, r3
 80095de:	b29b      	uxth	r3, r3
 80095e0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e4:	2b0f      	cmp	r3, #15
 80095e6:	d916      	bls.n	8009616 <UART_SetConfig+0x90e>
 80095e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095ee:	d212      	bcs.n	8009616 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80095f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	f023 030f 	bic.w	r3, r3, #15
 80095f8:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80095fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fc:	085b      	lsrs	r3, r3, #1
 80095fe:	b29b      	uxth	r3, r3
 8009600:	f003 0307 	and.w	r3, r3, #7
 8009604:	b29a      	uxth	r2, r3
 8009606:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009608:	4313      	orrs	r3, r2
 800960a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009612:	60da      	str	r2, [r3, #12]
 8009614:	e0bb      	b.n	800978e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800961c:	e0b7      	b.n	800978e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800961e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009622:	2b20      	cmp	r3, #32
 8009624:	dc4a      	bgt.n	80096bc <UART_SetConfig+0x9b4>
 8009626:	2b00      	cmp	r3, #0
 8009628:	f2c0 8086 	blt.w	8009738 <UART_SetConfig+0xa30>
 800962c:	2b20      	cmp	r3, #32
 800962e:	f200 8083 	bhi.w	8009738 <UART_SetConfig+0xa30>
 8009632:	a201      	add	r2, pc, #4	; (adr r2, 8009638 <UART_SetConfig+0x930>)
 8009634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009638:	080096c3 	.word	0x080096c3
 800963c:	080096dd 	.word	0x080096dd
 8009640:	08009739 	.word	0x08009739
 8009644:	08009739 	.word	0x08009739
 8009648:	080096e5 	.word	0x080096e5
 800964c:	08009739 	.word	0x08009739
 8009650:	08009739 	.word	0x08009739
 8009654:	08009739 	.word	0x08009739
 8009658:	080096f5 	.word	0x080096f5
 800965c:	08009739 	.word	0x08009739
 8009660:	08009739 	.word	0x08009739
 8009664:	08009739 	.word	0x08009739
 8009668:	08009739 	.word	0x08009739
 800966c:	08009739 	.word	0x08009739
 8009670:	08009739 	.word	0x08009739
 8009674:	08009739 	.word	0x08009739
 8009678:	08009705 	.word	0x08009705
 800967c:	08009739 	.word	0x08009739
 8009680:	08009739 	.word	0x08009739
 8009684:	08009739 	.word	0x08009739
 8009688:	08009739 	.word	0x08009739
 800968c:	08009739 	.word	0x08009739
 8009690:	08009739 	.word	0x08009739
 8009694:	08009739 	.word	0x08009739
 8009698:	08009739 	.word	0x08009739
 800969c:	08009739 	.word	0x08009739
 80096a0:	08009739 	.word	0x08009739
 80096a4:	08009739 	.word	0x08009739
 80096a8:	08009739 	.word	0x08009739
 80096ac:	08009739 	.word	0x08009739
 80096b0:	08009739 	.word	0x08009739
 80096b4:	08009739 	.word	0x08009739
 80096b8:	0800972b 	.word	0x0800972b
 80096bc:	2b40      	cmp	r3, #64	; 0x40
 80096be:	d037      	beq.n	8009730 <UART_SetConfig+0xa28>
 80096c0:	e03a      	b.n	8009738 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096c2:	f7fc fa29 	bl	8005b18 <HAL_RCC_GetPCLK1Freq>
 80096c6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80096c8:	e03c      	b.n	8009744 <UART_SetConfig+0xa3c>
 80096ca:	bf00      	nop
 80096cc:	003d0900 	.word	0x003d0900
 80096d0:	08009f94 	.word	0x08009f94
 80096d4:	58024400 	.word	0x58024400
 80096d8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80096dc:	f7fc fa32 	bl	8005b44 <HAL_RCC_GetPCLK2Freq>
 80096e0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80096e2:	e02f      	b.n	8009744 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096e4:	f107 0314 	add.w	r3, r7, #20
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7fd f997 	bl	8006a1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80096ee:	69bb      	ldr	r3, [r7, #24]
 80096f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80096f2:	e027      	b.n	8009744 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096f4:	f107 0308 	add.w	r3, r7, #8
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7fd fae3 	bl	8006cc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009702:	e01f      	b.n	8009744 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009704:	4b2c      	ldr	r3, [pc, #176]	; (80097b8 <UART_SetConfig+0xab0>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f003 0320 	and.w	r3, r3, #32
 800970c:	2b00      	cmp	r3, #0
 800970e:	d009      	beq.n	8009724 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009710:	4b29      	ldr	r3, [pc, #164]	; (80097b8 <UART_SetConfig+0xab0>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	08db      	lsrs	r3, r3, #3
 8009716:	f003 0303 	and.w	r3, r3, #3
 800971a:	4a28      	ldr	r2, [pc, #160]	; (80097bc <UART_SetConfig+0xab4>)
 800971c:	fa22 f303 	lsr.w	r3, r2, r3
 8009720:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009722:	e00f      	b.n	8009744 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8009724:	4b25      	ldr	r3, [pc, #148]	; (80097bc <UART_SetConfig+0xab4>)
 8009726:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009728:	e00c      	b.n	8009744 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800972a:	4b25      	ldr	r3, [pc, #148]	; (80097c0 <UART_SetConfig+0xab8>)
 800972c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800972e:	e009      	b.n	8009744 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009730:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009734:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009736:	e005      	b.n	8009744 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8009738:	2300      	movs	r3, #0
 800973a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800973c:	2301      	movs	r3, #1
 800973e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009742:	bf00      	nop
    }

    if (pclk != 0U)
 8009744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009746:	2b00      	cmp	r3, #0
 8009748:	d021      	beq.n	800978e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974e:	4a1d      	ldr	r2, [pc, #116]	; (80097c4 <UART_SetConfig+0xabc>)
 8009750:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009754:	461a      	mov	r2, r3
 8009756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009758:	fbb3 f2f2 	udiv	r2, r3, r2
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	085b      	lsrs	r3, r3, #1
 8009762:	441a      	add	r2, r3
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	fbb2 f3f3 	udiv	r3, r2, r3
 800976c:	b29b      	uxth	r3, r3
 800976e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009772:	2b0f      	cmp	r3, #15
 8009774:	d908      	bls.n	8009788 <UART_SetConfig+0xa80>
 8009776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800977c:	d204      	bcs.n	8009788 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009784:	60da      	str	r2, [r3, #12]
 8009786:	e002      	b.n	800978e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2201      	movs	r2, #1
 8009792:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2201      	movs	r2, #1
 800979a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80097aa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3738      	adds	r7, #56	; 0x38
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bdb0      	pop	{r4, r5, r7, pc}
 80097b6:	bf00      	nop
 80097b8:	58024400 	.word	0x58024400
 80097bc:	03d09000 	.word	0x03d09000
 80097c0:	003d0900 	.word	0x003d0900
 80097c4:	08009f94 	.word	0x08009f94

080097c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d4:	f003 0301 	and.w	r3, r3, #1
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d00a      	beq.n	80097f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	430a      	orrs	r2, r1
 80097f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f6:	f003 0302 	and.w	r3, r3, #2
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d00a      	beq.n	8009814 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	430a      	orrs	r2, r1
 8009812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009818:	f003 0304 	and.w	r3, r3, #4
 800981c:	2b00      	cmp	r3, #0
 800981e:	d00a      	beq.n	8009836 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	430a      	orrs	r2, r1
 8009834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800983a:	f003 0308 	and.w	r3, r3, #8
 800983e:	2b00      	cmp	r3, #0
 8009840:	d00a      	beq.n	8009858 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	430a      	orrs	r2, r1
 8009856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800985c:	f003 0310 	and.w	r3, r3, #16
 8009860:	2b00      	cmp	r3, #0
 8009862:	d00a      	beq.n	800987a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	430a      	orrs	r2, r1
 8009878:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800987e:	f003 0320 	and.w	r3, r3, #32
 8009882:	2b00      	cmp	r3, #0
 8009884:	d00a      	beq.n	800989c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	430a      	orrs	r2, r1
 800989a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d01a      	beq.n	80098de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	430a      	orrs	r2, r1
 80098bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098c6:	d10a      	bne.n	80098de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	430a      	orrs	r2, r1
 80098dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00a      	beq.n	8009900 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	430a      	orrs	r2, r1
 80098fe:	605a      	str	r2, [r3, #4]
  }
}
 8009900:	bf00      	nop
 8009902:	370c      	adds	r7, #12
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b086      	sub	sp, #24
 8009910:	af02      	add	r7, sp, #8
 8009912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800991c:	f7f8 fbfe 	bl	800211c <HAL_GetTick>
 8009920:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f003 0308 	and.w	r3, r3, #8
 800992c:	2b08      	cmp	r3, #8
 800992e:	d10e      	bne.n	800994e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009930:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009934:	9300      	str	r3, [sp, #0]
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2200      	movs	r2, #0
 800993a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 f82f 	bl	80099a2 <UART_WaitOnFlagUntilTimeout>
 8009944:	4603      	mov	r3, r0
 8009946:	2b00      	cmp	r3, #0
 8009948:	d001      	beq.n	800994e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800994a:	2303      	movs	r3, #3
 800994c:	e025      	b.n	800999a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f003 0304 	and.w	r3, r3, #4
 8009958:	2b04      	cmp	r3, #4
 800995a:	d10e      	bne.n	800997a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800995c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009960:	9300      	str	r3, [sp, #0]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2200      	movs	r2, #0
 8009966:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 f819 	bl	80099a2 <UART_WaitOnFlagUntilTimeout>
 8009970:	4603      	mov	r3, r0
 8009972:	2b00      	cmp	r3, #0
 8009974:	d001      	beq.n	800997a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009976:	2303      	movs	r3, #3
 8009978:	e00f      	b.n	800999a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2220      	movs	r2, #32
 800997e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2220      	movs	r2, #32
 8009986:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009998:	2300      	movs	r3, #0
}
 800999a:	4618      	mov	r0, r3
 800999c:	3710      	adds	r7, #16
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}

080099a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b084      	sub	sp, #16
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	60f8      	str	r0, [r7, #12]
 80099aa:	60b9      	str	r1, [r7, #8]
 80099ac:	603b      	str	r3, [r7, #0]
 80099ae:	4613      	mov	r3, r2
 80099b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099b2:	e062      	b.n	8009a7a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ba:	d05e      	beq.n	8009a7a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099bc:	f7f8 fbae 	bl	800211c <HAL_GetTick>
 80099c0:	4602      	mov	r2, r0
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	1ad3      	subs	r3, r2, r3
 80099c6:	69ba      	ldr	r2, [r7, #24]
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d302      	bcc.n	80099d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d11d      	bne.n	8009a0e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80099e0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	689a      	ldr	r2, [r3, #8]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f022 0201 	bic.w	r2, r2, #1
 80099f0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2220      	movs	r2, #32
 80099f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2220      	movs	r2, #32
 80099fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2200      	movs	r2, #0
 8009a06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009a0a:	2303      	movs	r3, #3
 8009a0c:	e045      	b.n	8009a9a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f003 0304 	and.w	r3, r3, #4
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d02e      	beq.n	8009a7a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	69db      	ldr	r3, [r3, #28]
 8009a22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a2a:	d126      	bne.n	8009a7a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a34:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009a44:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	689a      	ldr	r2, [r3, #8]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f022 0201 	bic.w	r2, r2, #1
 8009a54:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2220      	movs	r2, #32
 8009a5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2220      	movs	r2, #32
 8009a62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2220      	movs	r2, #32
 8009a6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2200      	movs	r2, #0
 8009a72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009a76:	2303      	movs	r3, #3
 8009a78:	e00f      	b.n	8009a9a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	69da      	ldr	r2, [r3, #28]
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	4013      	ands	r3, r2
 8009a84:	68ba      	ldr	r2, [r7, #8]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	bf0c      	ite	eq
 8009a8a:	2301      	moveq	r3, #1
 8009a8c:	2300      	movne	r3, #0
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	461a      	mov	r2, r3
 8009a92:	79fb      	ldrb	r3, [r7, #7]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d08d      	beq.n	80099b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a98:	2300      	movs	r3, #0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3710      	adds	r7, #16
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
	...

08009aa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009aba:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	6899      	ldr	r1, [r3, #8]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	4b0f      	ldr	r3, [pc, #60]	; (8009b04 <UART_EndRxTransfer+0x60>)
 8009ac8:	400b      	ands	r3, r1
 8009aca:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d107      	bne.n	8009ae4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f022 0210 	bic.w	r2, r2, #16
 8009ae2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2220      	movs	r2, #32
 8009ae8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009af8:	bf00      	nop
 8009afa:	370c      	adds	r7, #12
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr
 8009b04:	effffffe 	.word	0xeffffffe

08009b08 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2200      	movs	r2, #0
 8009b22:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b26:	68f8      	ldr	r0, [r7, #12]
 8009b28:	f7ff f8d8 	bl	8008cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b2c:	bf00      	nop
 8009b2e:	3710      	adds	r7, #16
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b082      	sub	sp, #8
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b4a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2220      	movs	r2, #32
 8009b50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f7f7 fd48 	bl	80015f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b60:	bf00      	nop
 8009b62:	3708      	adds	r7, #8
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b086      	sub	sp, #24
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	607a      	str	r2, [r7, #4]
 8009b74:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d101      	bne.n	8009b80 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	e056      	b.n	8009c2e <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d106      	bne.n	8009b98 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8009b92:	68f8      	ldr	r0, [r7, #12]
 8009b94:	f7f7 ff46 	bl	8001a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2224      	movs	r2, #36	; 0x24
 8009b9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f022 0201 	bic.w	r2, r2, #1
 8009bae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009bb0:	68f8      	ldr	r0, [r7, #12]
 8009bb2:	f7ff f8a9 	bl	8008d08 <UART_SetConfig>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d101      	bne.n	8009bc0 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	e036      	b.n	8009c2e <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d002      	beq.n	8009bce <HAL_RS485Ex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8009bc8:	68f8      	ldr	r0, [r7, #12]
 8009bca:	f7ff fdfd 	bl	80097c8 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	689a      	ldr	r2, [r3, #8]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009bdc:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	68ba      	ldr	r2, [r7, #8]
 8009bee:	430a      	orrs	r2, r1
 8009bf0:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	055b      	lsls	r3, r3, #21
 8009bf6:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	041b      	lsls	r3, r3, #16
 8009bfc:	697a      	ldr	r2, [r7, #20]
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	4b0b      	ldr	r3, [pc, #44]	; (8009c38 <HAL_RS485Ex_Init+0xd0>)
 8009c0a:	4013      	ands	r3, r2
 8009c0c:	68fa      	ldr	r2, [r7, #12]
 8009c0e:	6812      	ldr	r2, [r2, #0]
 8009c10:	6979      	ldr	r1, [r7, #20]
 8009c12:	430b      	orrs	r3, r1
 8009c14:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f042 0201 	orr.w	r2, r2, #1
 8009c24:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c26:	68f8      	ldr	r0, [r7, #12]
 8009c28:	f7ff fe70 	bl	800990c <UART_CheckIdleState>
 8009c2c:	4603      	mov	r3, r0
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3718      	adds	r7, #24
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	fc00ffff 	.word	0xfc00ffff

08009c3c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b083      	sub	sp, #12
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009c44:	bf00      	nop
 8009c46:	370c      	adds	r7, #12
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr

08009c50 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b083      	sub	sp, #12
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009c58:	bf00      	nop
 8009c5a:	370c      	adds	r7, #12
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr

08009c64 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009c6c:	bf00      	nop
 8009c6e:	370c      	adds	r7, #12
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b085      	sub	sp, #20
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d101      	bne.n	8009c8e <HAL_UARTEx_DisableFifoMode+0x16>
 8009c8a:	2302      	movs	r3, #2
 8009c8c:	e027      	b.n	8009cde <HAL_UARTEx_DisableFifoMode+0x66>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2201      	movs	r2, #1
 8009c92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2224      	movs	r2, #36	; 0x24
 8009c9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f022 0201 	bic.w	r2, r2, #1
 8009cb4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009cbc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2220      	movs	r2, #32
 8009cd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009cdc:	2300      	movs	r3, #0
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3714      	adds	r7, #20
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr

08009cea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b084      	sub	sp, #16
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
 8009cf2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d101      	bne.n	8009d02 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009cfe:	2302      	movs	r3, #2
 8009d00:	e02d      	b.n	8009d5e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2201      	movs	r2, #1
 8009d06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2224      	movs	r2, #36	; 0x24
 8009d0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f022 0201 	bic.w	r2, r2, #1
 8009d28:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	683a      	ldr	r2, [r7, #0]
 8009d3a:	430a      	orrs	r2, r1
 8009d3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 f850 	bl	8009de4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	68fa      	ldr	r2, [r7, #12]
 8009d4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2220      	movs	r2, #32
 8009d50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2200      	movs	r2, #0
 8009d58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009d5c:	2300      	movs	r3, #0
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3710      	adds	r7, #16
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}

08009d66 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b084      	sub	sp, #16
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
 8009d6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d101      	bne.n	8009d7e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009d7a:	2302      	movs	r3, #2
 8009d7c:	e02d      	b.n	8009dda <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2201      	movs	r2, #1
 8009d82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2224      	movs	r2, #36	; 0x24
 8009d8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f022 0201 	bic.w	r2, r2, #1
 8009da4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	683a      	ldr	r2, [r7, #0]
 8009db6:	430a      	orrs	r2, r1
 8009db8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 f812 	bl	8009de4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2220      	movs	r2, #32
 8009dcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009dd8:	2300      	movs	r3, #0
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3710      	adds	r7, #16
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
	...

08009de4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b085      	sub	sp, #20
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d108      	bne.n	8009e06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2201      	movs	r2, #1
 8009df8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2201      	movs	r2, #1
 8009e00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009e04:	e031      	b.n	8009e6a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009e06:	2310      	movs	r3, #16
 8009e08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009e0a:	2310      	movs	r3, #16
 8009e0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	0e5b      	lsrs	r3, r3, #25
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	f003 0307 	and.w	r3, r3, #7
 8009e1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	689b      	ldr	r3, [r3, #8]
 8009e24:	0f5b      	lsrs	r3, r3, #29
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	f003 0307 	and.w	r3, r3, #7
 8009e2c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e2e:	7bbb      	ldrb	r3, [r7, #14]
 8009e30:	7b3a      	ldrb	r2, [r7, #12]
 8009e32:	4911      	ldr	r1, [pc, #68]	; (8009e78 <UARTEx_SetNbDataToProcess+0x94>)
 8009e34:	5c8a      	ldrb	r2, [r1, r2]
 8009e36:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009e3a:	7b3a      	ldrb	r2, [r7, #12]
 8009e3c:	490f      	ldr	r1, [pc, #60]	; (8009e7c <UARTEx_SetNbDataToProcess+0x98>)
 8009e3e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e40:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e44:	b29a      	uxth	r2, r3
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e4c:	7bfb      	ldrb	r3, [r7, #15]
 8009e4e:	7b7a      	ldrb	r2, [r7, #13]
 8009e50:	4909      	ldr	r1, [pc, #36]	; (8009e78 <UARTEx_SetNbDataToProcess+0x94>)
 8009e52:	5c8a      	ldrb	r2, [r1, r2]
 8009e54:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009e58:	7b7a      	ldrb	r2, [r7, #13]
 8009e5a:	4908      	ldr	r1, [pc, #32]	; (8009e7c <UARTEx_SetNbDataToProcess+0x98>)
 8009e5c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e62:	b29a      	uxth	r2, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009e6a:	bf00      	nop
 8009e6c:	3714      	adds	r7, #20
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr
 8009e76:	bf00      	nop
 8009e78:	08009fac 	.word	0x08009fac
 8009e7c:	08009fb4 	.word	0x08009fb4

08009e80 <round>:
 8009e80:	ee10 1a90 	vmov	r1, s1
 8009e84:	f3c1 500a 	ubfx	r0, r1, #20, #11
 8009e88:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 8009e8c:	2a13      	cmp	r2, #19
 8009e8e:	b510      	push	{r4, lr}
 8009e90:	ee10 3a10 	vmov	r3, s0
 8009e94:	dc19      	bgt.n	8009eca <round+0x4a>
 8009e96:	2a00      	cmp	r2, #0
 8009e98:	da09      	bge.n	8009eae <round+0x2e>
 8009e9a:	3201      	adds	r2, #1
 8009e9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8009ea0:	d103      	bne.n	8009eaa <round+0x2a>
 8009ea2:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8009ea6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009eaa:	2000      	movs	r0, #0
 8009eac:	e027      	b.n	8009efe <round+0x7e>
 8009eae:	4816      	ldr	r0, [pc, #88]	; (8009f08 <round+0x88>)
 8009eb0:	4110      	asrs	r0, r2
 8009eb2:	ea01 0400 	and.w	r4, r1, r0
 8009eb6:	4323      	orrs	r3, r4
 8009eb8:	d00e      	beq.n	8009ed8 <round+0x58>
 8009eba:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009ebe:	fa43 f202 	asr.w	r2, r3, r2
 8009ec2:	4411      	add	r1, r2
 8009ec4:	ea21 0100 	bic.w	r1, r1, r0
 8009ec8:	e7ef      	b.n	8009eaa <round+0x2a>
 8009eca:	2a33      	cmp	r2, #51	; 0x33
 8009ecc:	dd05      	ble.n	8009eda <round+0x5a>
 8009ece:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009ed2:	d101      	bne.n	8009ed8 <round+0x58>
 8009ed4:	ee30 0b00 	vadd.f64	d0, d0, d0
 8009ed8:	bd10      	pop	{r4, pc}
 8009eda:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 8009ede:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee2:	fa20 f404 	lsr.w	r4, r0, r4
 8009ee6:	4223      	tst	r3, r4
 8009ee8:	d0f6      	beq.n	8009ed8 <round+0x58>
 8009eea:	2001      	movs	r0, #1
 8009eec:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 8009ef0:	fa00 f202 	lsl.w	r2, r0, r2
 8009ef4:	189b      	adds	r3, r3, r2
 8009ef6:	bf28      	it	cs
 8009ef8:	1809      	addcs	r1, r1, r0
 8009efa:	ea23 0004 	bic.w	r0, r3, r4
 8009efe:	460b      	mov	r3, r1
 8009f00:	4602      	mov	r2, r0
 8009f02:	ec43 2b10 	vmov	d0, r2, r3
 8009f06:	e7e7      	b.n	8009ed8 <round+0x58>
 8009f08:	000fffff 	.word	0x000fffff

08009f0c <__libc_init_array>:
 8009f0c:	b570      	push	{r4, r5, r6, lr}
 8009f0e:	4d0d      	ldr	r5, [pc, #52]	; (8009f44 <__libc_init_array+0x38>)
 8009f10:	4c0d      	ldr	r4, [pc, #52]	; (8009f48 <__libc_init_array+0x3c>)
 8009f12:	1b64      	subs	r4, r4, r5
 8009f14:	10a4      	asrs	r4, r4, #2
 8009f16:	2600      	movs	r6, #0
 8009f18:	42a6      	cmp	r6, r4
 8009f1a:	d109      	bne.n	8009f30 <__libc_init_array+0x24>
 8009f1c:	4d0b      	ldr	r5, [pc, #44]	; (8009f4c <__libc_init_array+0x40>)
 8009f1e:	4c0c      	ldr	r4, [pc, #48]	; (8009f50 <__libc_init_array+0x44>)
 8009f20:	f000 f820 	bl	8009f64 <_init>
 8009f24:	1b64      	subs	r4, r4, r5
 8009f26:	10a4      	asrs	r4, r4, #2
 8009f28:	2600      	movs	r6, #0
 8009f2a:	42a6      	cmp	r6, r4
 8009f2c:	d105      	bne.n	8009f3a <__libc_init_array+0x2e>
 8009f2e:	bd70      	pop	{r4, r5, r6, pc}
 8009f30:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f34:	4798      	blx	r3
 8009f36:	3601      	adds	r6, #1
 8009f38:	e7ee      	b.n	8009f18 <__libc_init_array+0xc>
 8009f3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f3e:	4798      	blx	r3
 8009f40:	3601      	adds	r6, #1
 8009f42:	e7f2      	b.n	8009f2a <__libc_init_array+0x1e>
 8009f44:	08009fc4 	.word	0x08009fc4
 8009f48:	08009fc4 	.word	0x08009fc4
 8009f4c:	08009fc4 	.word	0x08009fc4
 8009f50:	08009fc8 	.word	0x08009fc8

08009f54 <memset>:
 8009f54:	4402      	add	r2, r0
 8009f56:	4603      	mov	r3, r0
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d100      	bne.n	8009f5e <memset+0xa>
 8009f5c:	4770      	bx	lr
 8009f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8009f62:	e7f9      	b.n	8009f58 <memset+0x4>

08009f64 <_init>:
 8009f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f66:	bf00      	nop
 8009f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f6a:	bc08      	pop	{r3}
 8009f6c:	469e      	mov	lr, r3
 8009f6e:	4770      	bx	lr

08009f70 <_fini>:
 8009f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f72:	bf00      	nop
 8009f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f76:	bc08      	pop	{r3}
 8009f78:	469e      	mov	lr, r3
 8009f7a:	4770      	bx	lr
