
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011e4c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e7c  080120f0  080120f0  000220f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013f6c  08013f6c  00023f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08013f74  08013f74  00023f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08013f7c  08013f7c  00023f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000218  24000000  08013f84  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000c3c  24000218  0801419c  00030218  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000e54  0801419c  00030e54  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 10 .debug_info   00037dff  00000000  00000000  00030246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005314  00000000  00000000  00068045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001638  00000000  00000000  0006d360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000014a0  00000000  00000000  0006e998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003de64  00000000  00000000  0006fe38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000219e8  00000000  00000000  000adc9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016d8e6  00000000  00000000  000cf684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0023cf6a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006f88  00000000  00000000  0023cfc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000218 	.word	0x24000218
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080120d4 	.word	0x080120d4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400021c 	.word	0x2400021c
 80002dc:	080120d4 	.word	0x080120d4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b96e 	b.w	80009fc <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	4604      	mov	r4, r0
 8000740:	468c      	mov	ip, r1
 8000742:	2b00      	cmp	r3, #0
 8000744:	f040 8083 	bne.w	800084e <__udivmoddi4+0x116>
 8000748:	428a      	cmp	r2, r1
 800074a:	4617      	mov	r7, r2
 800074c:	d947      	bls.n	80007de <__udivmoddi4+0xa6>
 800074e:	fab2 f282 	clz	r2, r2
 8000752:	b142      	cbz	r2, 8000766 <__udivmoddi4+0x2e>
 8000754:	f1c2 0020 	rsb	r0, r2, #32
 8000758:	fa24 f000 	lsr.w	r0, r4, r0
 800075c:	4091      	lsls	r1, r2
 800075e:	4097      	lsls	r7, r2
 8000760:	ea40 0c01 	orr.w	ip, r0, r1
 8000764:	4094      	lsls	r4, r2
 8000766:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800076a:	0c23      	lsrs	r3, r4, #16
 800076c:	fbbc f6f8 	udiv	r6, ip, r8
 8000770:	fa1f fe87 	uxth.w	lr, r7
 8000774:	fb08 c116 	mls	r1, r8, r6, ip
 8000778:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800077c:	fb06 f10e 	mul.w	r1, r6, lr
 8000780:	4299      	cmp	r1, r3
 8000782:	d909      	bls.n	8000798 <__udivmoddi4+0x60>
 8000784:	18fb      	adds	r3, r7, r3
 8000786:	f106 30ff 	add.w	r0, r6, #4294967295
 800078a:	f080 8119 	bcs.w	80009c0 <__udivmoddi4+0x288>
 800078e:	4299      	cmp	r1, r3
 8000790:	f240 8116 	bls.w	80009c0 <__udivmoddi4+0x288>
 8000794:	3e02      	subs	r6, #2
 8000796:	443b      	add	r3, r7
 8000798:	1a5b      	subs	r3, r3, r1
 800079a:	b2a4      	uxth	r4, r4
 800079c:	fbb3 f0f8 	udiv	r0, r3, r8
 80007a0:	fb08 3310 	mls	r3, r8, r0, r3
 80007a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80007ac:	45a6      	cmp	lr, r4
 80007ae:	d909      	bls.n	80007c4 <__udivmoddi4+0x8c>
 80007b0:	193c      	adds	r4, r7, r4
 80007b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007b6:	f080 8105 	bcs.w	80009c4 <__udivmoddi4+0x28c>
 80007ba:	45a6      	cmp	lr, r4
 80007bc:	f240 8102 	bls.w	80009c4 <__udivmoddi4+0x28c>
 80007c0:	3802      	subs	r0, #2
 80007c2:	443c      	add	r4, r7
 80007c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007c8:	eba4 040e 	sub.w	r4, r4, lr
 80007cc:	2600      	movs	r6, #0
 80007ce:	b11d      	cbz	r5, 80007d8 <__udivmoddi4+0xa0>
 80007d0:	40d4      	lsrs	r4, r2
 80007d2:	2300      	movs	r3, #0
 80007d4:	e9c5 4300 	strd	r4, r3, [r5]
 80007d8:	4631      	mov	r1, r6
 80007da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007de:	b902      	cbnz	r2, 80007e2 <__udivmoddi4+0xaa>
 80007e0:	deff      	udf	#255	; 0xff
 80007e2:	fab2 f282 	clz	r2, r2
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	d150      	bne.n	800088c <__udivmoddi4+0x154>
 80007ea:	1bcb      	subs	r3, r1, r7
 80007ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007f0:	fa1f f887 	uxth.w	r8, r7
 80007f4:	2601      	movs	r6, #1
 80007f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007fa:	0c21      	lsrs	r1, r4, #16
 80007fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000800:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000804:	fb08 f30c 	mul.w	r3, r8, ip
 8000808:	428b      	cmp	r3, r1
 800080a:	d907      	bls.n	800081c <__udivmoddi4+0xe4>
 800080c:	1879      	adds	r1, r7, r1
 800080e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000812:	d202      	bcs.n	800081a <__udivmoddi4+0xe2>
 8000814:	428b      	cmp	r3, r1
 8000816:	f200 80e9 	bhi.w	80009ec <__udivmoddi4+0x2b4>
 800081a:	4684      	mov	ip, r0
 800081c:	1ac9      	subs	r1, r1, r3
 800081e:	b2a3      	uxth	r3, r4
 8000820:	fbb1 f0fe 	udiv	r0, r1, lr
 8000824:	fb0e 1110 	mls	r1, lr, r0, r1
 8000828:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800082c:	fb08 f800 	mul.w	r8, r8, r0
 8000830:	45a0      	cmp	r8, r4
 8000832:	d907      	bls.n	8000844 <__udivmoddi4+0x10c>
 8000834:	193c      	adds	r4, r7, r4
 8000836:	f100 33ff 	add.w	r3, r0, #4294967295
 800083a:	d202      	bcs.n	8000842 <__udivmoddi4+0x10a>
 800083c:	45a0      	cmp	r8, r4
 800083e:	f200 80d9 	bhi.w	80009f4 <__udivmoddi4+0x2bc>
 8000842:	4618      	mov	r0, r3
 8000844:	eba4 0408 	sub.w	r4, r4, r8
 8000848:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800084c:	e7bf      	b.n	80007ce <__udivmoddi4+0x96>
 800084e:	428b      	cmp	r3, r1
 8000850:	d909      	bls.n	8000866 <__udivmoddi4+0x12e>
 8000852:	2d00      	cmp	r5, #0
 8000854:	f000 80b1 	beq.w	80009ba <__udivmoddi4+0x282>
 8000858:	2600      	movs	r6, #0
 800085a:	e9c5 0100 	strd	r0, r1, [r5]
 800085e:	4630      	mov	r0, r6
 8000860:	4631      	mov	r1, r6
 8000862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000866:	fab3 f683 	clz	r6, r3
 800086a:	2e00      	cmp	r6, #0
 800086c:	d14a      	bne.n	8000904 <__udivmoddi4+0x1cc>
 800086e:	428b      	cmp	r3, r1
 8000870:	d302      	bcc.n	8000878 <__udivmoddi4+0x140>
 8000872:	4282      	cmp	r2, r0
 8000874:	f200 80b8 	bhi.w	80009e8 <__udivmoddi4+0x2b0>
 8000878:	1a84      	subs	r4, r0, r2
 800087a:	eb61 0103 	sbc.w	r1, r1, r3
 800087e:	2001      	movs	r0, #1
 8000880:	468c      	mov	ip, r1
 8000882:	2d00      	cmp	r5, #0
 8000884:	d0a8      	beq.n	80007d8 <__udivmoddi4+0xa0>
 8000886:	e9c5 4c00 	strd	r4, ip, [r5]
 800088a:	e7a5      	b.n	80007d8 <__udivmoddi4+0xa0>
 800088c:	f1c2 0320 	rsb	r3, r2, #32
 8000890:	fa20 f603 	lsr.w	r6, r0, r3
 8000894:	4097      	lsls	r7, r2
 8000896:	fa01 f002 	lsl.w	r0, r1, r2
 800089a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800089e:	40d9      	lsrs	r1, r3
 80008a0:	4330      	orrs	r0, r6
 80008a2:	0c03      	lsrs	r3, r0, #16
 80008a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80008a8:	fa1f f887 	uxth.w	r8, r7
 80008ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80008b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008b4:	fb06 f108 	mul.w	r1, r6, r8
 80008b8:	4299      	cmp	r1, r3
 80008ba:	fa04 f402 	lsl.w	r4, r4, r2
 80008be:	d909      	bls.n	80008d4 <__udivmoddi4+0x19c>
 80008c0:	18fb      	adds	r3, r7, r3
 80008c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80008c6:	f080 808d 	bcs.w	80009e4 <__udivmoddi4+0x2ac>
 80008ca:	4299      	cmp	r1, r3
 80008cc:	f240 808a 	bls.w	80009e4 <__udivmoddi4+0x2ac>
 80008d0:	3e02      	subs	r6, #2
 80008d2:	443b      	add	r3, r7
 80008d4:	1a5b      	subs	r3, r3, r1
 80008d6:	b281      	uxth	r1, r0
 80008d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80008e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008e4:	fb00 f308 	mul.w	r3, r0, r8
 80008e8:	428b      	cmp	r3, r1
 80008ea:	d907      	bls.n	80008fc <__udivmoddi4+0x1c4>
 80008ec:	1879      	adds	r1, r7, r1
 80008ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80008f2:	d273      	bcs.n	80009dc <__udivmoddi4+0x2a4>
 80008f4:	428b      	cmp	r3, r1
 80008f6:	d971      	bls.n	80009dc <__udivmoddi4+0x2a4>
 80008f8:	3802      	subs	r0, #2
 80008fa:	4439      	add	r1, r7
 80008fc:	1acb      	subs	r3, r1, r3
 80008fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000902:	e778      	b.n	80007f6 <__udivmoddi4+0xbe>
 8000904:	f1c6 0c20 	rsb	ip, r6, #32
 8000908:	fa03 f406 	lsl.w	r4, r3, r6
 800090c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000910:	431c      	orrs	r4, r3
 8000912:	fa20 f70c 	lsr.w	r7, r0, ip
 8000916:	fa01 f306 	lsl.w	r3, r1, r6
 800091a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800091e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000922:	431f      	orrs	r7, r3
 8000924:	0c3b      	lsrs	r3, r7, #16
 8000926:	fbb1 f9fe 	udiv	r9, r1, lr
 800092a:	fa1f f884 	uxth.w	r8, r4
 800092e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000932:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000936:	fb09 fa08 	mul.w	sl, r9, r8
 800093a:	458a      	cmp	sl, r1
 800093c:	fa02 f206 	lsl.w	r2, r2, r6
 8000940:	fa00 f306 	lsl.w	r3, r0, r6
 8000944:	d908      	bls.n	8000958 <__udivmoddi4+0x220>
 8000946:	1861      	adds	r1, r4, r1
 8000948:	f109 30ff 	add.w	r0, r9, #4294967295
 800094c:	d248      	bcs.n	80009e0 <__udivmoddi4+0x2a8>
 800094e:	458a      	cmp	sl, r1
 8000950:	d946      	bls.n	80009e0 <__udivmoddi4+0x2a8>
 8000952:	f1a9 0902 	sub.w	r9, r9, #2
 8000956:	4421      	add	r1, r4
 8000958:	eba1 010a 	sub.w	r1, r1, sl
 800095c:	b2bf      	uxth	r7, r7
 800095e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000962:	fb0e 1110 	mls	r1, lr, r0, r1
 8000966:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800096a:	fb00 f808 	mul.w	r8, r0, r8
 800096e:	45b8      	cmp	r8, r7
 8000970:	d907      	bls.n	8000982 <__udivmoddi4+0x24a>
 8000972:	19e7      	adds	r7, r4, r7
 8000974:	f100 31ff 	add.w	r1, r0, #4294967295
 8000978:	d22e      	bcs.n	80009d8 <__udivmoddi4+0x2a0>
 800097a:	45b8      	cmp	r8, r7
 800097c:	d92c      	bls.n	80009d8 <__udivmoddi4+0x2a0>
 800097e:	3802      	subs	r0, #2
 8000980:	4427      	add	r7, r4
 8000982:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000986:	eba7 0708 	sub.w	r7, r7, r8
 800098a:	fba0 8902 	umull	r8, r9, r0, r2
 800098e:	454f      	cmp	r7, r9
 8000990:	46c6      	mov	lr, r8
 8000992:	4649      	mov	r1, r9
 8000994:	d31a      	bcc.n	80009cc <__udivmoddi4+0x294>
 8000996:	d017      	beq.n	80009c8 <__udivmoddi4+0x290>
 8000998:	b15d      	cbz	r5, 80009b2 <__udivmoddi4+0x27a>
 800099a:	ebb3 020e 	subs.w	r2, r3, lr
 800099e:	eb67 0701 	sbc.w	r7, r7, r1
 80009a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80009a6:	40f2      	lsrs	r2, r6
 80009a8:	ea4c 0202 	orr.w	r2, ip, r2
 80009ac:	40f7      	lsrs	r7, r6
 80009ae:	e9c5 2700 	strd	r2, r7, [r5]
 80009b2:	2600      	movs	r6, #0
 80009b4:	4631      	mov	r1, r6
 80009b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ba:	462e      	mov	r6, r5
 80009bc:	4628      	mov	r0, r5
 80009be:	e70b      	b.n	80007d8 <__udivmoddi4+0xa0>
 80009c0:	4606      	mov	r6, r0
 80009c2:	e6e9      	b.n	8000798 <__udivmoddi4+0x60>
 80009c4:	4618      	mov	r0, r3
 80009c6:	e6fd      	b.n	80007c4 <__udivmoddi4+0x8c>
 80009c8:	4543      	cmp	r3, r8
 80009ca:	d2e5      	bcs.n	8000998 <__udivmoddi4+0x260>
 80009cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80009d0:	eb69 0104 	sbc.w	r1, r9, r4
 80009d4:	3801      	subs	r0, #1
 80009d6:	e7df      	b.n	8000998 <__udivmoddi4+0x260>
 80009d8:	4608      	mov	r0, r1
 80009da:	e7d2      	b.n	8000982 <__udivmoddi4+0x24a>
 80009dc:	4660      	mov	r0, ip
 80009de:	e78d      	b.n	80008fc <__udivmoddi4+0x1c4>
 80009e0:	4681      	mov	r9, r0
 80009e2:	e7b9      	b.n	8000958 <__udivmoddi4+0x220>
 80009e4:	4666      	mov	r6, ip
 80009e6:	e775      	b.n	80008d4 <__udivmoddi4+0x19c>
 80009e8:	4630      	mov	r0, r6
 80009ea:	e74a      	b.n	8000882 <__udivmoddi4+0x14a>
 80009ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80009f0:	4439      	add	r1, r7
 80009f2:	e713      	b.n	800081c <__udivmoddi4+0xe4>
 80009f4:	3802      	subs	r0, #2
 80009f6:	443c      	add	r4, r7
 80009f8:	e724      	b.n	8000844 <__udivmoddi4+0x10c>
 80009fa:	bf00      	nop

080009fc <__aeabi_idiv0>:
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>:
 *  Created on: Jan 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AMT21.h"

AMT21::AMT21(UART_HandleTypeDef *_amt21_huart, uint8_t _address) {
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	71fb      	strb	r3, [r7, #7]
	this->amt21_huart = _amt21_huart;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	68ba      	ldr	r2, [r7, #8]
 8000a12:	601a      	str	r2, [r3, #0]
	this->address = _address;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	79fa      	ldrb	r2, [r7, #7]
 8000a18:	729a      	strb	r2, [r3, #10]
}
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <_ZN5AMT21D1Ev>:

AMT21::~AMT21() {
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

}
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4618      	mov	r0, r3
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <_ZN5AMT2110AMT21_ReadEv>:

void AMT21::AMT21_Read() {
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) &(this->address),
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6818      	ldr	r0, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f103 010a 	add.w	r1, r3, #10
 8000a50:	2364      	movs	r3, #100	; 0x64
 8000a52:	2201      	movs	r2, #1
 8000a54:	f00b feb0 	bl	800c7b8 <HAL_UART_Transmit>
			sizeof(this->address), 100);
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
	HAL_UART_Receive(this->amt21_huart, (uint8_t*) &(this->uart_buf), 2, 100);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6818      	ldr	r0, [r3, #0]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f103 010c 	add.w	r1, r3, #12
 8000a62:	2364      	movs	r3, #100	; 0x64
 8000a64:	2202      	movs	r2, #2
 8000a66:	f00b ff3d 	bl	800c8e4 <HAL_UART_Receive>
	this->k0 = (this->uart_buf & 0x4000) == 0x4000;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	899b      	ldrh	r3, [r3, #12]
 8000a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	bf14      	ite	ne
 8000a76:	2301      	movne	r3, #1
 8000a78:	2300      	moveq	r3, #0
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	761a      	strb	r2, [r3, #24]
	this->k1 = (this->uart_buf & 0x8000) == 0x8000;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	899b      	ldrh	r3, [r3, #12]
 8000a86:	b21b      	sxth	r3, r3
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	0bdb      	lsrs	r3, r3, #15
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	461a      	mov	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	765a      	strb	r2, [r3, #25]
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <_ZN5AMT2117AMT21_Check_ValueEv>:
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) set_zero_command,
			sizeof(this->address), 100);
	//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
}

HAL_StatusTypeDef AMT21::AMT21_Check_Value() {
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	uint16_t raw_value_temp = this->uart_buf & 0x3FFF;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	899b      	ldrh	r3, [r3, #12]
 8000aa8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000aac:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = this->uart_buf & 0x0001;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	899b      	ldrh	r3, [r3, #12]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (this->uart_buf >> 1) & 0x0001;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	899b      	ldrh	r3, [r3, #12]
 8000abe:	105b      	asrs	r3, r3, #1
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000ac8:	2300      	movs	r3, #0
 8000aca:	737b      	strb	r3, [r7, #13]
 8000acc:	7b7b      	ldrb	r3, [r7, #13]
 8000ace:	2b05      	cmp	r3, #5
 8000ad0:	d820      	bhi.n	8000b14 <_ZN5AMT2117AMT21_Check_ValueEv+0x78>
		this->uart_buf = this->uart_buf >> 2;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	899b      	ldrh	r3, [r3, #12]
 8000ad6:	109b      	asrs	r3, r3, #2
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	819a      	strh	r2, [r3, #12]
		k0_check ^= this->uart_buf & 0x0001;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	899b      	ldrh	r3, [r3, #12]
 8000ae2:	b25b      	sxtb	r3, r3
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	b25a      	sxtb	r2, r3
 8000aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aee:	4053      	eors	r3, r2
 8000af0:	b25b      	sxtb	r3, r3
 8000af2:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (this->uart_buf >> 1) & 0x0001;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	899b      	ldrh	r3, [r3, #12]
 8000af8:	105b      	asrs	r3, r3, #1
 8000afa:	b25b      	sxtb	r3, r3
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	b25a      	sxtb	r2, r3
 8000b02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b06:	4053      	eors	r3, r2
 8000b08:	b25b      	sxtb	r3, r3
 8000b0a:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000b0c:	7b7b      	ldrb	r3, [r7, #13]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	737b      	strb	r3, [r7, #13]
 8000b12:	e7db      	b.n	8000acc <_ZN5AMT2117AMT21_Check_ValueEv+0x30>
	}
	k0_check = !k0_check;
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	bf0c      	ite	eq
 8000b1a:	2301      	moveq	r3, #1
 8000b1c:	2300      	movne	r3, #0
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 8000b22:	7bbb      	ldrb	r3, [r7, #14]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	bf0c      	ite	eq
 8000b28:	2301      	moveq	r3, #1
 8000b2a:	2300      	movne	r3, #0
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	73bb      	strb	r3, [r7, #14]
	if ((this->k0 == k0_check) && (this->k1 == k1_check)) {
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	7e1b      	ldrb	r3, [r3, #24]
 8000b34:	7bfa      	ldrb	r2, [r7, #15]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d10a      	bne.n	8000b50 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	7e5b      	ldrb	r3, [r3, #25]
 8000b3e:	7bba      	ldrb	r2, [r7, #14]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d105      	bne.n	8000b50 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
		this->raw_value = raw_value_temp;
 8000b44:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	e003      	b.n	8000b58 <_ZN5AMT2117AMT21_Check_ValueEv+0xbc>
	} else {
		this->raw_value = 0;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	81da      	strh	r2, [r3, #14]
		return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
	}
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <_ZN5AMT2112getAngPos180Ev>:
}
int16_t AMT21::getPrevRawValue() {
	return this->prev_raw_value;
}

int16_t AMT21::getAngPos180() {
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	return ((((this->raw_value & 0x2000) >> 13) * (-16383))
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	135b      	asrs	r3, r3, #13
			+ (this->raw_value & 0x3FFF)) * -1;
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	461a      	mov	r2, r3
 8000b80:	0392      	lsls	r2, r2, #14
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	b21b      	sxth	r3, r3
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	ed87 0a01 	vstr	s0, [r7, #4]
 8000bb0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bb4:	eef0 7ae7 	vabs.f32	s15, s15
 8000bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	ed87 0a01 	vstr	s0, [r7, #4]
 8000bd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bd4:	fef8 7a67 	vrinta.f32	s15, s15
 8000bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
	...

08000be8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>:
 *  Created on: Jan 29, 2022
 *      Author: SakuranohanaTH
 */
#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef *_stepper_htim, uint32_t _STEPPER_TIM_CHANNEL,
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
 8000bf4:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *_DIRPort, uint32_t _DIRPin) {
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	4a18      	ldr	r2, [pc, #96]	; (8000c5c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 8000bfa:	615a      	str	r2, [r3, #20]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	4a18      	ldr	r2, [pc, #96]	; (8000c60 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8000c00:	619a      	str	r2, [r3, #24]
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000c08:	61da      	str	r2, [r3, #28]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	4a15      	ldr	r2, [pc, #84]	; (8000c64 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x7c>)
 8000c0e:	621a      	str	r2, [r3, #32]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000c16:	625a      	str	r2, [r3, #36]	; 0x24
	this->stepper_htim = _stepper_htim;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	68ba      	ldr	r2, [r7, #8]
 8000c1c:	601a      	str	r2, [r3, #0]
	this->STEPPER_TIM_CHANNEL = _STEPPER_TIM_CHANNEL;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	605a      	str	r2, [r3, #4]
	this->stepper_htim->Instance->PSC = _PSC_STEPPER_MOTOR - 1U;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	22c7      	movs	r2, #199	; 0xc7
 8000c2c:	629a      	str	r2, [r3, #40]	; 0x28
	this->minFrequency = 60.0f;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	4a0d      	ldr	r2, [pc, #52]	; (8000c68 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x80>)
 8000c32:	615a      	str	r2, [r3, #20]
	this->maxFrequency = 20000.0f;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8000c38:	619a      	str	r2, [r3, #24]
	this->StepperSetFrequency(0.0f);
 8000c3a:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8000c6c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x84>
 8000c3e:	68f8      	ldr	r0, [r7, #12]
 8000c40:	f000 f832 	bl	8000ca8 <_ZN7Stepper19StepperSetFrequencyEf>
	this->DIRPort = _DIRPort;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	683a      	ldr	r2, [r7, #0]
 8000c48:	609a      	str	r2, [r3, #8]
	this->DIRPin = _DIRPin;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	60da      	str	r2, [r3, #12]
}
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4618      	mov	r0, r3
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	41a00000 	.word	0x41a00000
 8000c60:	469c4000 	.word	0x469c4000
 8000c64:	43480000 	.word	0x43480000
 8000c68:	42700000 	.word	0x42700000
 8000c6c:	00000000 	.word	0x00000000

08000c70 <_ZN7StepperD1Ev>:
Stepper::~Stepper() {
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
}
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <_ZN7Stepper13StepperEnableEv>:
void Stepper::StepperEnable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	4619      	mov	r1, r3
 8000c98:	4610      	mov	r0, r2
 8000c9a:	f00a fb7d 	bl	800b398 <HAL_TIM_PWM_Start>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <_ZN7Stepper19StepperSetFrequencyEf>:
void Stepper::StepperDisable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
	HAL_TIM_PWM_Stop(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
}
void Stepper::StepperSetFrequency(float _frequency) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	ed2d 8b02 	vpush	{d8}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = _frequency ;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	683a      	ldr	r2, [r7, #0]
 8000cbc:	611a      	str	r2, [r3, #16]

	float f;
	if (fabs(this->frequency) <= this->minFrequency)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	edd3 7a04 	vldr	s15, [r3, #16]
 8000cc4:	eeb0 0a67 	vmov.f32	s0, s15
 8000cc8:	f7ff ff6d 	bl	8000ba6 <_ZSt4fabsf>
 8000ccc:	eeb0 7a40 	vmov.f32	s14, s0
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	edd3 7a05 	vldr	s15, [r3, #20]
 8000cd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cde:	bf94      	ite	ls
 8000ce0:	2301      	movls	r3, #1
 8000ce2:	2300      	movhi	r3, #0
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d003      	beq.n	8000cf2 <_ZN7Stepper19StepperSetFrequencyEf+0x4a>
		f = this->minFrequency;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	e01b      	b.n	8000d2a <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else if (fabs(this->frequency) >= this->maxFrequency)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	edd3 7a04 	vldr	s15, [r3, #16]
 8000cf8:	eeb0 0a67 	vmov.f32	s0, s15
 8000cfc:	f7ff ff53 	bl	8000ba6 <_ZSt4fabsf>
 8000d00:	eeb0 7a40 	vmov.f32	s14, s0
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	edd3 7a06 	vldr	s15, [r3, #24]
 8000d0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d12:	bfac      	ite	ge
 8000d14:	2301      	movge	r3, #1
 8000d16:	2300      	movlt	r3, #0
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d003      	beq.n	8000d26 <_ZN7Stepper19StepperSetFrequencyEf+0x7e>
		f = this->maxFrequency;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	e001      	b.n	8000d2a <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else
		f = _frequency;
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	60fb      	str	r3, [r7, #12]

	if (this->frequency >= 0.001f) {
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d30:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8000fcc <_ZN7Stepper19StepperSetFrequencyEf+0x324>
 8000d34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d3c:	f2c0 80db 	blt.w	8000ef6 <_ZN7Stepper19StepperSetFrequencyEf+0x24e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_SET);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6898      	ldr	r0, [r3, #8]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f007 fd49 	bl	80087e4 <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * (f))) - 1U);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	ee07 3a90 	vmov	s15, r3
 8000d60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d64:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d6c:	eddf 6a98 	vldr	s13, [pc, #608]	; 8000fd0 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8000d70:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8000d74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000d78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000d7c:	eeb0 0a67 	vmov.f32	s0, s15
 8000d80:	f7ff ff21 	bl	8000bc6 <_ZSt5roundf>
 8000d84:	eef0 7a40 	vmov.f32	s15, s0
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d92:	ee17 2a90 	vmov	r2, s15
 8000d96:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d113      	bne.n	8000dc8 <_ZN7Stepper19StepperSetFrequencyEf+0x120>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8000daa:	085b      	lsrs	r3, r3, #1
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 fa5b 	bl	8001268 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000db2:	eeb0 7b40 	vmov.f64	d7, d0
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000dc0:	ee17 2a90 	vmov	r2, s15
 8000dc4:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR4 = 0;
			this->stepper_htim->Instance->CCR5 = 0;
			this->stepper_htim->Instance->CCR6 = 0;
		}
	}
}
 8000dc6:	e1e0      	b.n	800118a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	2b04      	cmp	r3, #4
 8000dce:	d113      	bne.n	8000df8 <_ZN7Stepper19StepperSetFrequencyEf+0x150>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8000dda:	085b      	lsrs	r3, r3, #1
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f000 fa43 	bl	8001268 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000de2:	eeb0 7b40 	vmov.f64	d7, d0
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000df0:	ee17 2a90 	vmov	r2, s15
 8000df4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000df6:	e1c8      	b.n	800118a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	2b08      	cmp	r3, #8
 8000dfe:	d113      	bne.n	8000e28 <_ZN7Stepper19StepperSetFrequencyEf+0x180>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e08:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8000e0a:	085b      	lsrs	r3, r3, #1
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 fa2b 	bl	8001268 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000e12:	eeb0 7b40 	vmov.f64	d7, d0
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e20:	ee17 2a90 	vmov	r2, s15
 8000e24:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000e26:	e1b0      	b.n	800118a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2b0c      	cmp	r3, #12
 8000e2e:	d113      	bne.n	8000e58 <_ZN7Stepper19StepperSetFrequencyEf+0x1b0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e38:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8000e3a:	085b      	lsrs	r3, r3, #1
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 fa13 	bl	8001268 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000e42:	eeb0 7b40 	vmov.f64	d7, d0
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e50:	ee17 2a90 	vmov	r2, s15
 8000e54:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000e56:	e198      	b.n	800118a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	2b10      	cmp	r3, #16
 8000e5e:	d113      	bne.n	8000e88 <_ZN7Stepper19StepperSetFrequencyEf+0x1e0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e68:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8000e6a:	085b      	lsrs	r3, r3, #1
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 f9fb 	bl	8001268 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000e72:	eeb0 7b40 	vmov.f64	d7, d0
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e80:	ee17 2a90 	vmov	r2, s15
 8000e84:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000e86:	e180      	b.n	800118a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	2b14      	cmp	r3, #20
 8000e8e:	d113      	bne.n	8000eb8 <_ZN7Stepper19StepperSetFrequencyEf+0x210>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e98:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8000e9a:	085b      	lsrs	r3, r3, #1
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f000 f9e3 	bl	8001268 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000ea2:	eeb0 7b40 	vmov.f64	d7, d0
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000eb0:	ee17 2a90 	vmov	r2, s15
 8000eb4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000eb6:	e168      	b.n	800118a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2200      	movs	r2, #0
 8000ede:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000ef4:	e149      	b.n	800118a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
	} else if (this->frequency <= -0.001f) {
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	edd3 7a04 	vldr	s15, [r3, #16]
 8000efc:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8000fd4 <_ZN7Stepper19StepperSetFrequencyEf+0x32c>
 8000f00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f08:	f200 80e5 	bhi.w	80010d6 <_ZN7Stepper19StepperSetFrequencyEf+0x42e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_RESET);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6898      	ldr	r0, [r3, #8]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	2200      	movs	r2, #0
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f007 fc63 	bl	80087e4 <HAL_GPIO_WritePin>
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * fabs(f))) - 1U);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f26:	3301      	adds	r3, #1
 8000f28:	ee07 3a90 	vmov	s15, r3
 8000f2c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000f30:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f34:	f7ff fe37 	bl	8000ba6 <_ZSt4fabsf>
 8000f38:	eef0 7a40 	vmov.f32	s15, s0
 8000f3c:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000f40:	eddf 6a23 	vldr	s13, [pc, #140]	; 8000fd0 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8000f44:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8000f48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f50:	eeb0 0a67 	vmov.f32	s0, s15
 8000f54:	f7ff fe37 	bl	8000bc6 <_ZSt5roundf>
 8000f58:	eef0 7a40 	vmov.f32	s15, s0
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f66:	ee17 2a90 	vmov	r2, s15
 8000f6a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d113      	bne.n	8000f9c <_ZN7Stepper19StepperSetFrequencyEf+0x2f4>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8000f7e:	085b      	lsrs	r3, r3, #1
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 f971 	bl	8001268 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000f86:	eeb0 7b40 	vmov.f64	d7, d0
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f94:	ee17 2a90 	vmov	r2, s15
 8000f98:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f9a:	e0f6      	b.n	800118a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2b04      	cmp	r3, #4
 8000fa2:	d119      	bne.n	8000fd8 <_ZN7Stepper19StepperSetFrequencyEf+0x330>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fac:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8000fae:	085b      	lsrs	r3, r3, #1
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f000 f959 	bl	8001268 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000fb6:	eeb0 7b40 	vmov.f64	d7, d0
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fc4:	ee17 2a90 	vmov	r2, s15
 8000fc8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000fca:	e0de      	b.n	800118a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
 8000fcc:	3a83126f 	.word	0x3a83126f
 8000fd0:	4d64e1c0 	.word	0x4d64e1c0
 8000fd4:	ba83126f 	.word	0xba83126f
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2b08      	cmp	r3, #8
 8000fde:	d113      	bne.n	8001008 <_ZN7Stepper19StepperSetFrequencyEf+0x360>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8000fea:	085b      	lsrs	r3, r3, #1
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 f93b 	bl	8001268 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000ff2:	eeb0 7b40 	vmov.f64	d7, d0
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001000:	ee17 2a90 	vmov	r2, s15
 8001004:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001006:	e0c0      	b.n	800118a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	2b0c      	cmp	r3, #12
 800100e:	d113      	bne.n	8001038 <_ZN7Stepper19StepperSetFrequencyEf+0x390>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001018:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 800101a:	085b      	lsrs	r3, r3, #1
 800101c:	4618      	mov	r0, r3
 800101e:	f000 f923 	bl	8001268 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001022:	eeb0 7b40 	vmov.f64	d7, d0
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001030:	ee17 2a90 	vmov	r2, s15
 8001034:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001036:	e0a8      	b.n	800118a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2b10      	cmp	r3, #16
 800103e:	d113      	bne.n	8001068 <_ZN7Stepper19StepperSetFrequencyEf+0x3c0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001048:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 800104a:	085b      	lsrs	r3, r3, #1
 800104c:	4618      	mov	r0, r3
 800104e:	f000 f90b 	bl	8001268 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001052:	eeb0 7b40 	vmov.f64	d7, d0
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001060:	ee17 2a90 	vmov	r2, s15
 8001064:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001066:	e090      	b.n	800118a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2b14      	cmp	r3, #20
 800106e:	d113      	bne.n	8001098 <_ZN7Stepper19StepperSetFrequencyEf+0x3f0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001078:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 800107a:	085b      	lsrs	r3, r3, #1
 800107c:	4618      	mov	r0, r3
 800107e:	f000 f8f3 	bl	8001268 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001082:	eeb0 7b40 	vmov.f64	d7, d0
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001090:	ee17 2a90 	vmov	r2, s15
 8001094:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001096:	e078      	b.n	800118a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2200      	movs	r2, #0
 80010a0:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2200      	movs	r2, #0
 80010aa:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2200      	movs	r2, #0
 80010b4:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2200      	movs	r2, #0
 80010be:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2200      	movs	r2, #0
 80010c8:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2200      	movs	r2, #0
 80010d2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80010d4:	e059      	b.n	800118a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d105      	bne.n	80010ea <_ZN7Stepper19StepperSetFrequencyEf+0x442>
			this->stepper_htim->Instance->CCR1 = 0;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2200      	movs	r2, #0
 80010e6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010e8:	e04f      	b.n	800118a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2b04      	cmp	r3, #4
 80010f0:	d105      	bne.n	80010fe <_ZN7Stepper19StepperSetFrequencyEf+0x456>
			this->stepper_htim->Instance->CCR2 = 0;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2200      	movs	r2, #0
 80010fa:	639a      	str	r2, [r3, #56]	; 0x38
}
 80010fc:	e045      	b.n	800118a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b08      	cmp	r3, #8
 8001104:	d105      	bne.n	8001112 <_ZN7Stepper19StepperSetFrequencyEf+0x46a>
			this->stepper_htim->Instance->CCR3 = 0;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2200      	movs	r2, #0
 800110e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001110:	e03b      	b.n	800118a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2b0c      	cmp	r3, #12
 8001118:	d105      	bne.n	8001126 <_ZN7Stepper19StepperSetFrequencyEf+0x47e>
			this->stepper_htim->Instance->CCR4 = 0;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2200      	movs	r2, #0
 8001122:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001124:	e031      	b.n	800118a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b10      	cmp	r3, #16
 800112c:	d105      	bne.n	800113a <_ZN7Stepper19StepperSetFrequencyEf+0x492>
			this->stepper_htim->Instance->CCR5 = 0;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2200      	movs	r2, #0
 8001136:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001138:	e027      	b.n	800118a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	2b14      	cmp	r3, #20
 8001140:	d105      	bne.n	800114e <_ZN7Stepper19StepperSetFrequencyEf+0x4a6>
			this->stepper_htim->Instance->CCR6 = 0;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2200      	movs	r2, #0
 800114a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800114c:	e01d      	b.n	800118a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2200      	movs	r2, #0
 8001156:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2200      	movs	r2, #0
 8001160:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2200      	movs	r2, #0
 800116a:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2200      	movs	r2, #0
 8001174:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2200      	movs	r2, #0
 800117e:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2200      	movs	r2, #0
 8001188:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	ecbd 8b02 	vpop	{d8}
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop

08001198 <_ZN7Stepper15StepperSetRatioEf>:
void Stepper::StepperSetMaxFrequency(float _maxFrequency) {
	this->maxFrequency = fabs((float) _maxFrequency);
}
void Stepper::StepperSetRatio(float _ratio) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	ed87 0a00 	vstr	s0, [r7]
	this->ratio = fabs(_ratio);
 80011a4:	ed97 0a00 	vldr	s0, [r7]
 80011a8:	f7ff fcfd 	bl	8000ba6 <_ZSt4fabsf>
 80011ac:	eef0 7a40 	vmov.f32	s15, s0
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	71fb      	strb	r3, [r7, #7]
    { return __builtin_fabs(__x); }
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	ee07 3a90 	vmov	s15, r3
 80011ce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80011d2:	eeb0 0b47 	vmov.f64	d0, d7
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <_ZN7Stepper19StepperSetMicrostepEh>:
void Stepper::StepperSetMicrostep(uint8_t _microstep) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	70fb      	strb	r3, [r7, #3]
	this->microStep = fabs(_microstep);
 80011ec:	78fb      	ldrb	r3, [r7, #3]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff ffe5 	bl	80011be <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80011f4:	eeb0 7b40 	vmov.f64	d7, d0
 80011f8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	0000      	movs	r0, r0
 800120c:	0000      	movs	r0, r0
	...

08001210 <_ZN7Stepper20StepperOpenLoopSpeedEf>:
void Stepper::StepperOpenLoopSpeed(float _speed) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	ed87 0a00 	vstr	s0, [r7]
//	if (_speed > -0.07853981634f && _speed < 0.07853981634f) { // upper than abs(-20Hz) and lower than 20Hz
//		this->StepperSetFrequency(0.0f);
//	} else {
		this->StepperSetFrequency(
				(float) (_speed * this->microStep * this->ratio * this->SPR * 1
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	ed93 7a07 	vldr	s14, [r3, #28]
 8001222:	edd7 7a00 	vldr	s15, [r7]
 8001226:	ee27 7a27 	vmul.f32	s14, s14, s15
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001230:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	edd3 7a08 	vldr	s15, [r3, #32]
 800123a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800123e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
						/ (2.0f * PI)));
 8001242:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8001260 <_ZN7Stepper20StepperOpenLoopSpeedEf+0x50>
 8001246:	ee86 7b05 	vdiv.f64	d7, d6, d5
		this->StepperSetFrequency(
 800124a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800124e:	eeb0 0a67 	vmov.f32	s0, s15
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff fd28 	bl	8000ca8 <_ZN7Stepper19StepperSetFrequencyEf>
//	}
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	54442eea 	.word	0x54442eea
 8001264:	401921fb 	.word	0x401921fb

08001268 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    round(_Tp __x)
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
    { return __builtin_round(__x); }
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	ee07 3a90 	vmov	s15, r3
 8001276:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800127a:	eeb0 0b47 	vmov.f64	d0, d7
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <MX_CRC_Init+0x54>)
 800128e:	4a14      	ldr	r2, [pc, #80]	; (80012e0 <MX_CRC_Init+0x58>)
 8001290:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8001292:	4b12      	ldr	r3, [pc, #72]	; (80012dc <MX_CRC_Init+0x54>)
 8001294:	2201      	movs	r2, #1
 8001296:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8001298:	4b10      	ldr	r3, [pc, #64]	; (80012dc <MX_CRC_Init+0x54>)
 800129a:	2201      	movs	r2, #1
 800129c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 32773;
 800129e:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <MX_CRC_Init+0x54>)
 80012a0:	f248 0205 	movw	r2, #32773	; 0x8005
 80012a4:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 80012a6:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <MX_CRC_Init+0x54>)
 80012a8:	2208      	movs	r2, #8
 80012aa:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <MX_CRC_Init+0x54>)
 80012ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012b2:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <MX_CRC_Init+0x54>)
 80012b6:	2220      	movs	r2, #32
 80012b8:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <MX_CRC_Init+0x54>)
 80012bc:	2280      	movs	r2, #128	; 0x80
 80012be:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <MX_CRC_Init+0x54>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_CRC_Init+0x54>)
 80012c8:	f004 f8a4 	bl	8005414 <HAL_CRC_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_CRC_Init+0x4e>
  {
    Error_Handler();
 80012d2:	f002 f923 	bl	800351c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	24000648 	.word	0x24000648
 80012e0:	58024c00 	.word	0x58024c00

080012e4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0b      	ldr	r2, [pc, #44]	; (8001320 <HAL_CRC_MspInit+0x3c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d10e      	bne.n	8001314 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80012f6:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <HAL_CRC_MspInit+0x40>)
 80012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fc:	4a09      	ldr	r2, [pc, #36]	; (8001324 <HAL_CRC_MspInit+0x40>)
 80012fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001302:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001306:	4b07      	ldr	r3, [pc, #28]	; (8001324 <HAL_CRC_MspInit+0x40>)
 8001308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800130c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	58024c00 	.word	0x58024c00
 8001324:	58024400 	.word	0x58024400

08001328 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800132e:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <MX_DMA_Init+0x7c>)
 8001330:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001334:	4a1b      	ldr	r2, [pc, #108]	; (80013a4 <MX_DMA_Init+0x7c>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800133e:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <MX_DMA_Init+0x7c>)
 8001340:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800134c:	2200      	movs	r2, #0
 800134e:	2100      	movs	r1, #0
 8001350:	200b      	movs	r0, #11
 8001352:	f004 f81e 	bl	8005392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001356:	200b      	movs	r0, #11
 8001358:	f004 f835 	bl	80053c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800135c:	2200      	movs	r2, #0
 800135e:	2100      	movs	r1, #0
 8001360:	200c      	movs	r0, #12
 8001362:	f004 f816 	bl	8005392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001366:	200c      	movs	r0, #12
 8001368:	f004 f82d 	bl	80053c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800136c:	2200      	movs	r2, #0
 800136e:	2100      	movs	r1, #0
 8001370:	200d      	movs	r0, #13
 8001372:	f004 f80e 	bl	8005392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001376:	200d      	movs	r0, #13
 8001378:	f004 f825 	bl	80053c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	2100      	movs	r1, #0
 8001380:	200e      	movs	r0, #14
 8001382:	f004 f806 	bl	8005392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001386:	200e      	movs	r0, #14
 8001388:	f004 f81d 	bl	80053c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800138c:	2200      	movs	r2, #0
 800138e:	2100      	movs	r1, #0
 8001390:	200f      	movs	r0, #15
 8001392:	f003 fffe 	bl	8005392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001396:	200f      	movs	r0, #15
 8001398:	f004 f815 	bl	80053c6 <HAL_NVIC_EnableIRQ>

}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	58024400 	.word	0x58024400

080013a8 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08c      	sub	sp, #48	; 0x30
 80013ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013be:	4b8e      	ldr	r3, [pc, #568]	; (80015f8 <MX_GPIO_Init+0x250>)
 80013c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c4:	4a8c      	ldr	r2, [pc, #560]	; (80015f8 <MX_GPIO_Init+0x250>)
 80013c6:	f043 0310 	orr.w	r3, r3, #16
 80013ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ce:	4b8a      	ldr	r3, [pc, #552]	; (80015f8 <MX_GPIO_Init+0x250>)
 80013d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d4:	f003 0310 	and.w	r3, r3, #16
 80013d8:	61bb      	str	r3, [r7, #24]
 80013da:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013dc:	4b86      	ldr	r3, [pc, #536]	; (80015f8 <MX_GPIO_Init+0x250>)
 80013de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e2:	4a85      	ldr	r2, [pc, #532]	; (80015f8 <MX_GPIO_Init+0x250>)
 80013e4:	f043 0304 	orr.w	r3, r3, #4
 80013e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ec:	4b82      	ldr	r3, [pc, #520]	; (80015f8 <MX_GPIO_Init+0x250>)
 80013ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f2:	f003 0304 	and.w	r3, r3, #4
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013fa:	4b7f      	ldr	r3, [pc, #508]	; (80015f8 <MX_GPIO_Init+0x250>)
 80013fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001400:	4a7d      	ldr	r2, [pc, #500]	; (80015f8 <MX_GPIO_Init+0x250>)
 8001402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001406:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800140a:	4b7b      	ldr	r3, [pc, #492]	; (80015f8 <MX_GPIO_Init+0x250>)
 800140c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001414:	613b      	str	r3, [r7, #16]
 8001416:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001418:	4b77      	ldr	r3, [pc, #476]	; (80015f8 <MX_GPIO_Init+0x250>)
 800141a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800141e:	4a76      	ldr	r2, [pc, #472]	; (80015f8 <MX_GPIO_Init+0x250>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001428:	4b73      	ldr	r3, [pc, #460]	; (80015f8 <MX_GPIO_Init+0x250>)
 800142a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	4b70      	ldr	r3, [pc, #448]	; (80015f8 <MX_GPIO_Init+0x250>)
 8001438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800143c:	4a6e      	ldr	r2, [pc, #440]	; (80015f8 <MX_GPIO_Init+0x250>)
 800143e:	f043 0302 	orr.w	r3, r3, #2
 8001442:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001446:	4b6c      	ldr	r3, [pc, #432]	; (80015f8 <MX_GPIO_Init+0x250>)
 8001448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001454:	4b68      	ldr	r3, [pc, #416]	; (80015f8 <MX_GPIO_Init+0x250>)
 8001456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145a:	4a67      	ldr	r2, [pc, #412]	; (80015f8 <MX_GPIO_Init+0x250>)
 800145c:	f043 0308 	orr.w	r3, r3, #8
 8001460:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001464:	4b64      	ldr	r3, [pc, #400]	; (80015f8 <MX_GPIO_Init+0x250>)
 8001466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001472:	4b61      	ldr	r3, [pc, #388]	; (80015f8 <MX_GPIO_Init+0x250>)
 8001474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001478:	4a5f      	ldr	r2, [pc, #380]	; (80015f8 <MX_GPIO_Init+0x250>)
 800147a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800147e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001482:	4b5d      	ldr	r3, [pc, #372]	; (80015f8 <MX_GPIO_Init+0x250>)
 8001484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800148c:	603b      	str	r3, [r7, #0]
 800148e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8001490:	2200      	movs	r2, #0
 8001492:	f644 2121 	movw	r1, #18977	; 0x4a21
 8001496:	4859      	ldr	r0, [pc, #356]	; (80015fc <MX_GPIO_Init+0x254>)
 8001498:	f007 f9a4 	bl	80087e4 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 800149c:	2200      	movs	r2, #0
 800149e:	f24c 0102 	movw	r1, #49154	; 0xc002
 80014a2:	4857      	ldr	r0, [pc, #348]	; (8001600 <MX_GPIO_Init+0x258>)
 80014a4:	f007 f99e 	bl	80087e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80014a8:	2200      	movs	r2, #0
 80014aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014ae:	4855      	ldr	r0, [pc, #340]	; (8001604 <MX_GPIO_Init+0x25c>)
 80014b0:	f007 f998 	bl	80087e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80014b4:	2200      	movs	r2, #0
 80014b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014ba:	4853      	ldr	r0, [pc, #332]	; (8001608 <MX_GPIO_Init+0x260>)
 80014bc:	f007 f992 	bl	80087e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 80014c0:	2200      	movs	r2, #0
 80014c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014c6:	4851      	ldr	r0, [pc, #324]	; (800160c <MX_GPIO_Init+0x264>)
 80014c8:	f007 f98c 	bl	80087e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_Button_Pin_Pin;
 80014cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Blue_Button_Pin_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	4619      	mov	r1, r3
 80014e2:	4849      	ldr	r0, [pc, #292]	; (8001608 <MX_GPIO_Init+0x260>)
 80014e4:	f006 ffce 	bl	8008484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80014e8:	f644 2321 	movw	r3, #18977	; 0x4a21
 80014ec:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fa:	f107 031c 	add.w	r3, r7, #28
 80014fe:	4619      	mov	r1, r3
 8001500:	483e      	ldr	r0, [pc, #248]	; (80015fc <MX_GPIO_Init+0x254>)
 8001502:	f006 ffbf 	bl	8008484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin;
 8001506:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800150a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800150c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001510:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	4619      	mov	r1, r3
 800151c:	4838      	ldr	r0, [pc, #224]	; (8001600 <MX_GPIO_Init+0x258>)
 800151e:	f006 ffb1 	bl	8008484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 8001522:	f24c 0302 	movw	r3, #49154	; 0xc002
 8001526:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001528:	2301      	movs	r3, #1
 800152a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2300      	movs	r3, #0
 8001532:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001534:	f107 031c 	add.w	r3, r7, #28
 8001538:	4619      	mov	r1, r3
 800153a:	4831      	ldr	r0, [pc, #196]	; (8001600 <MX_GPIO_Init+0x258>)
 800153c:	f006 ffa2 	bl	8008484 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001540:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001544:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001546:	2301      	movs	r3, #1
 8001548:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	2300      	movs	r3, #0
 8001550:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001552:	f107 031c 	add.w	r3, r7, #28
 8001556:	4619      	mov	r1, r3
 8001558:	482a      	ldr	r0, [pc, #168]	; (8001604 <MX_GPIO_Init+0x25c>)
 800155a:	f006 ff93 	bl	8008484 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 800155e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001562:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001564:	2301      	movs	r3, #1
 8001566:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001570:	f107 031c 	add.w	r3, r7, #28
 8001574:	4619      	mov	r1, r3
 8001576:	4824      	ldr	r0, [pc, #144]	; (8001608 <MX_GPIO_Init+0x260>)
 8001578:	f006 ff84 	bl	8008484 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 800157c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001580:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001582:	2301      	movs	r3, #1
 8001584:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158a:	2300      	movs	r3, #0
 800158c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 800158e:	f107 031c 	add.w	r3, r7, #28
 8001592:	4619      	mov	r1, r3
 8001594:	481d      	ldr	r0, [pc, #116]	; (800160c <MX_GPIO_Init+0x264>)
 8001596:	f006 ff75 	bl	8008484 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LM5_Pin;
 800159a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800159e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 031c 	add.w	r3, r7, #28
 80015ae:	4619      	mov	r1, r3
 80015b0:	4817      	ldr	r0, [pc, #92]	; (8001610 <MX_GPIO_Init+0x268>)
 80015b2:	f006 ff67 	bl	8008484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 80015b6:	23c0      	movs	r3, #192	; 0xc0
 80015b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c4:	f107 031c 	add.w	r3, r7, #28
 80015c8:	4619      	mov	r1, r3
 80015ca:	480c      	ldr	r0, [pc, #48]	; (80015fc <MX_GPIO_Init+0x254>)
 80015cc:	f006 ff5a 	bl	8008484 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2100      	movs	r1, #0
 80015d4:	2017      	movs	r0, #23
 80015d6:	f003 fedc 	bl	8005392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015da:	2017      	movs	r0, #23
 80015dc:	f003 fef3 	bl	80053c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015e0:	2200      	movs	r2, #0
 80015e2:	2100      	movs	r1, #0
 80015e4:	2028      	movs	r0, #40	; 0x28
 80015e6:	f003 fed4 	bl	8005392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015ea:	2028      	movs	r0, #40	; 0x28
 80015ec:	f003 feeb 	bl	80053c6 <HAL_NVIC_EnableIRQ>

}
 80015f0:	bf00      	nop
 80015f2:	3730      	adds	r7, #48	; 0x30
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	58024400 	.word	0x58024400
 80015fc:	58020400 	.word	0x58020400
 8001600:	58021000 	.word	0x58021000
 8001604:	58020c00 	.word	0x58020c00
 8001608:	58020800 	.word	0x58020800
 800160c:	58020000 	.word	0x58020000
 8001610:	58021800 	.word	0x58021800

08001614 <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	ed87 0a01 	vstr	s0, [r7, #4]
 800161e:	edc7 0a00 	vstr	s1, [r7]
 8001622:	edd7 0a00 	vldr	s1, [r7]
 8001626:	ed97 0a01 	vldr	s0, [r7, #4]
 800162a:	f00d fec9 	bl	800f3c0 <atan2f>
 800162e:	eef0 7a40 	vmov.f32	s15, s0
 8001632:	eeb0 0a67 	vmov.f32	s0, s15
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	ed87 0a01 	vstr	s0, [r7, #4]
 8001646:	ed97 0a01 	vldr	s0, [r7, #4]
 800164a:	f00d fa49 	bl	800eae0 <cosf>
 800164e:	eef0 7a40 	vmov.f32	s15, s0
 8001652:	eeb0 0a67 	vmov.f32	s0, s15
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <_ZSt3sinf>:
  { return __builtin_sinf(__x); }
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	ed87 0a01 	vstr	s0, [r7, #4]
 8001666:	ed97 0a01 	vldr	s0, [r7, #4]
 800166a:	f00d fe09 	bl	800f280 <sinf>
 800166e:	eef0 7a40 	vmov.f32	s15, s0
 8001672:	eeb0 0a67 	vmov.f32	s0, s15
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <_ZSt4sqrtf>:
  { return __builtin_sqrtf(__x); }
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	ed87 0a01 	vstr	s0, [r7, #4]
 8001686:	ed97 0a01 	vldr	s0, [r7, #4]
 800168a:	f00d fe9b 	bl	800f3c4 <sqrtf>
 800168e:	eef0 7a40 	vmov.f32	s15, s0
 8001692:	eeb0 0a67 	vmov.f32	s0, s15
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <HAL_UARTEx_RxEventCallback>:
#define Rx_BUFFER_SIZE   20
uint8_t Old_Rx_Buffer[Rx_BUFFER_SIZE] = {0};
uint8_t New_Rx_Buffer[Rx_BUFFER_SIZE] = {0};
volatile uint16_t cmdDataSize = 0;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 800169c:	b5b0      	push	{r4, r5, r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]
	if (huart == &huart3) {
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a99      	ldr	r2, [pc, #612]	; (8001910 <HAL_UARTEx_RxEventCallback+0x274>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	f040 8216 	bne.w	8001ade <HAL_UARTEx_RxEventCallback+0x442>
		memcpy(Old_Rx_Buffer, &New_Rx_Buffer, Rx_BUFFER_SIZE);	// Keep buffer.
 80016b2:	4a98      	ldr	r2, [pc, #608]	; (8001914 <HAL_UARTEx_RxEventCallback+0x278>)
 80016b4:	4b98      	ldr	r3, [pc, #608]	; (8001918 <HAL_UARTEx_RxEventCallback+0x27c>)
 80016b6:	4614      	mov	r4, r2
 80016b8:	461d      	mov	r5, r3
 80016ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016be:	682b      	ldr	r3, [r5, #0]
 80016c0:	6023      	str	r3, [r4, #0]
		memset(New_Rx_Buffer, 0, Rx_BUFFER_SIZE);	// Clear received data.
 80016c2:	2214      	movs	r2, #20
 80016c4:	2100      	movs	r1, #0
 80016c6:	4894      	ldr	r0, [pc, #592]	; (8001918 <HAL_UARTEx_RxEventCallback+0x27c>)
 80016c8:	f00e f8ca 	bl	800f860 <memset>
		if(Size - 2 > 0 && Size <= Rx_BUFFER_SIZE){	// Check if there's some data.
 80016cc:	887b      	ldrh	r3, [r7, #2]
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	f240 818c 	bls.w	80019ec <HAL_UARTEx_RxEventCallback+0x350>
 80016d4:	887b      	ldrh	r3, [r7, #2]
 80016d6:	2b14      	cmp	r3, #20
 80016d8:	f200 8188 	bhi.w	80019ec <HAL_UARTEx_RxEventCallback+0x350>
			cmdDataSize = Size - 2;	// Calculate data length.
 80016dc:	887b      	ldrh	r3, [r7, #2]
 80016de:	3b02      	subs	r3, #2
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	4b8e      	ldr	r3, [pc, #568]	; (800191c <HAL_UARTEx_RxEventCallback+0x280>)
 80016e4:	801a      	strh	r2, [r3, #0]
			CRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t *)Old_Rx_Buffer, cmdDataSize); // Calculate data only by STM32 Hardware CRC.
 80016e6:	4b8d      	ldr	r3, [pc, #564]	; (800191c <HAL_UARTEx_RxEventCallback+0x280>)
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	461a      	mov	r2, r3
 80016ee:	4989      	ldr	r1, [pc, #548]	; (8001914 <HAL_UARTEx_RxEventCallback+0x278>)
 80016f0:	488b      	ldr	r0, [pc, #556]	; (8001920 <HAL_UARTEx_RxEventCallback+0x284>)
 80016f2:	f003 fef3 	bl	80054dc <HAL_CRC_Calculate>
 80016f6:	4603      	mov	r3, r0
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	4b8a      	ldr	r3, [pc, #552]	; (8001924 <HAL_UARTEx_RxEventCallback+0x288>)
 80016fc:	801a      	strh	r2, [r3, #0]
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8 | Old_Rx_Buffer[cmdDataSize+1]; // Read Expected CRC from Protocol.
 80016fe:	4b87      	ldr	r3, [pc, #540]	; (800191c <HAL_UARTEx_RxEventCallback+0x280>)
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	b29b      	uxth	r3, r3
 8001704:	461a      	mov	r2, r3
 8001706:	4b83      	ldr	r3, [pc, #524]	; (8001914 <HAL_UARTEx_RxEventCallback+0x278>)
 8001708:	5c9b      	ldrb	r3, [r3, r2]
 800170a:	021b      	lsls	r3, r3, #8
 800170c:	b21a      	sxth	r2, r3
 800170e:	4b83      	ldr	r3, [pc, #524]	; (800191c <HAL_UARTEx_RxEventCallback+0x280>)
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	b29b      	uxth	r3, r3
 8001714:	3301      	adds	r3, #1
 8001716:	497f      	ldr	r1, [pc, #508]	; (8001914 <HAL_UARTEx_RxEventCallback+0x278>)
 8001718:	5ccb      	ldrb	r3, [r1, r3]
 800171a:	b21b      	sxth	r3, r3
 800171c:	4313      	orrs	r3, r2
 800171e:	b21b      	sxth	r3, r3
 8001720:	b29a      	uxth	r2, r3
 8001722:	4b81      	ldr	r3, [pc, #516]	; (8001928 <HAL_UARTEx_RxEventCallback+0x28c>)
 8001724:	801a      	strh	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 8001726:	4b7f      	ldr	r3, [pc, #508]	; (8001924 <HAL_UARTEx_RxEventCallback+0x288>)
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	b29a      	uxth	r2, r3
 800172c:	4b7e      	ldr	r3, [pc, #504]	; (8001928 <HAL_UARTEx_RxEventCallback+0x28c>)
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	b29b      	uxth	r3, r3
 8001732:	429a      	cmp	r2, r3
 8001734:	bf0c      	ite	eq
 8001736:	2301      	moveq	r3, #1
 8001738:	2300      	movne	r3, #0
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 8144 	beq.w	80019ca <HAL_UARTEx_RxEventCallback+0x32e>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001742:	2201      	movs	r2, #1
 8001744:	2102      	movs	r1, #2
 8001746:	4879      	ldr	r0, [pc, #484]	; (800192c <HAL_UARTEx_RxEventCallback+0x290>)
 8001748:	f007 f84c 	bl	80087e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800174c:	2200      	movs	r2, #0
 800174e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001752:	4877      	ldr	r0, [pc, #476]	; (8001930 <HAL_UARTEx_RxEventCallback+0x294>)
 8001754:	f007 f846 	bl	80087e4 <HAL_GPIO_WritePin>
				if(Old_Rx_Buffer[0] == 0x41 && cmdDataSize == 3){	// Joint Jog q1
 8001758:	4b6e      	ldr	r3, [pc, #440]	; (8001914 <HAL_UARTEx_RxEventCallback+0x278>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b41      	cmp	r3, #65	; 0x41
 800175e:	d106      	bne.n	800176e <HAL_UARTEx_RxEventCallback+0xd2>
 8001760:	4b6e      	ldr	r3, [pc, #440]	; (800191c <HAL_UARTEx_RxEventCallback+0x280>)
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	b29b      	uxth	r3, r3
 8001766:	2b03      	cmp	r3, #3
 8001768:	d101      	bne.n	800176e <HAL_UARTEx_RxEventCallback+0xd2>
 800176a:	2301      	movs	r3, #1
 800176c:	e000      	b.n	8001770 <HAL_UARTEx_RxEventCallback+0xd4>
 800176e:	2300      	movs	r3, #0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d00b      	beq.n	800178c <HAL_UARTEx_RxEventCallback+0xf0>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001774:	4b67      	ldr	r3, [pc, #412]	; (8001914 <HAL_UARTEx_RxEventCallback+0x278>)
 8001776:	785b      	ldrb	r3, [r3, #1]
 8001778:	021b      	lsls	r3, r3, #8
 800177a:	b25a      	sxtb	r2, r3
 800177c:	4b65      	ldr	r3, [pc, #404]	; (8001914 <HAL_UARTEx_RxEventCallback+0x278>)
 800177e:	789b      	ldrb	r3, [r3, #2]
 8001780:	b25b      	sxtb	r3, r3
 8001782:	4313      	orrs	r3, r2
 8001784:	b25a      	sxtb	r2, r3
 8001786:	4b6b      	ldr	r3, [pc, #428]	; (8001934 <HAL_UARTEx_RxEventCallback+0x298>)
 8001788:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 800178a:	e140      	b.n	8001a0e <HAL_UARTEx_RxEventCallback+0x372>
				}
				else if(Old_Rx_Buffer[0] == 0x42 && cmdDataSize == 3){	// Joint Jog q2
 800178c:	4b61      	ldr	r3, [pc, #388]	; (8001914 <HAL_UARTEx_RxEventCallback+0x278>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b42      	cmp	r3, #66	; 0x42
 8001792:	d106      	bne.n	80017a2 <HAL_UARTEx_RxEventCallback+0x106>
 8001794:	4b61      	ldr	r3, [pc, #388]	; (800191c <HAL_UARTEx_RxEventCallback+0x280>)
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	b29b      	uxth	r3, r3
 800179a:	2b03      	cmp	r3, #3
 800179c:	d101      	bne.n	80017a2 <HAL_UARTEx_RxEventCallback+0x106>
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <HAL_UARTEx_RxEventCallback+0x108>
 80017a2:	2300      	movs	r3, #0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00b      	beq.n	80017c0 <HAL_UARTEx_RxEventCallback+0x124>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq2 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 80017a8:	4b5a      	ldr	r3, [pc, #360]	; (8001914 <HAL_UARTEx_RxEventCallback+0x278>)
 80017aa:	785b      	ldrb	r3, [r3, #1]
 80017ac:	021b      	lsls	r3, r3, #8
 80017ae:	b25a      	sxtb	r2, r3
 80017b0:	4b58      	ldr	r3, [pc, #352]	; (8001914 <HAL_UARTEx_RxEventCallback+0x278>)
 80017b2:	789b      	ldrb	r3, [r3, #2]
 80017b4:	b25b      	sxtb	r3, r3
 80017b6:	4313      	orrs	r3, r2
 80017b8:	b25a      	sxtb	r2, r3
 80017ba:	4b5f      	ldr	r3, [pc, #380]	; (8001938 <HAL_UARTEx_RxEventCallback+0x29c>)
 80017bc:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 80017be:	e126      	b.n	8001a0e <HAL_UARTEx_RxEventCallback+0x372>
				}
				else if(Old_Rx_Buffer[0] == 0x43 && cmdDataSize == 3){	// Joint Jog q3
 80017c0:	4b54      	ldr	r3, [pc, #336]	; (8001914 <HAL_UARTEx_RxEventCallback+0x278>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b43      	cmp	r3, #67	; 0x43
 80017c6:	d106      	bne.n	80017d6 <HAL_UARTEx_RxEventCallback+0x13a>
 80017c8:	4b54      	ldr	r3, [pc, #336]	; (800191c <HAL_UARTEx_RxEventCallback+0x280>)
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	2b03      	cmp	r3, #3
 80017d0:	d101      	bne.n	80017d6 <HAL_UARTEx_RxEventCallback+0x13a>
 80017d2:	2301      	movs	r3, #1
 80017d4:	e000      	b.n	80017d8 <HAL_UARTEx_RxEventCallback+0x13c>
 80017d6:	2300      	movs	r3, #0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d00b      	beq.n	80017f4 <HAL_UARTEx_RxEventCallback+0x158>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq3 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 80017dc:	4b4d      	ldr	r3, [pc, #308]	; (8001914 <HAL_UARTEx_RxEventCallback+0x278>)
 80017de:	785b      	ldrb	r3, [r3, #1]
 80017e0:	021b      	lsls	r3, r3, #8
 80017e2:	b25a      	sxtb	r2, r3
 80017e4:	4b4b      	ldr	r3, [pc, #300]	; (8001914 <HAL_UARTEx_RxEventCallback+0x278>)
 80017e6:	789b      	ldrb	r3, [r3, #2]
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	4313      	orrs	r3, r2
 80017ec:	b25a      	sxtb	r2, r3
 80017ee:	4b53      	ldr	r3, [pc, #332]	; (800193c <HAL_UARTEx_RxEventCallback+0x2a0>)
 80017f0:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 80017f2:	e10c      	b.n	8001a0e <HAL_UARTEx_RxEventCallback+0x372>
				}
				else if(Old_Rx_Buffer[0] == 0x44 && cmdDataSize == 3){	// Joint Jog q4
 80017f4:	4b47      	ldr	r3, [pc, #284]	; (8001914 <HAL_UARTEx_RxEventCallback+0x278>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b44      	cmp	r3, #68	; 0x44
 80017fa:	d106      	bne.n	800180a <HAL_UARTEx_RxEventCallback+0x16e>
 80017fc:	4b47      	ldr	r3, [pc, #284]	; (800191c <HAL_UARTEx_RxEventCallback+0x280>)
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	b29b      	uxth	r3, r3
 8001802:	2b03      	cmp	r3, #3
 8001804:	d101      	bne.n	800180a <HAL_UARTEx_RxEventCallback+0x16e>
 8001806:	2301      	movs	r3, #1
 8001808:	e000      	b.n	800180c <HAL_UARTEx_RxEventCallback+0x170>
 800180a:	2300      	movs	r3, #0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d00b      	beq.n	8001828 <HAL_UARTEx_RxEventCallback+0x18c>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq4 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001810:	4b40      	ldr	r3, [pc, #256]	; (8001914 <HAL_UARTEx_RxEventCallback+0x278>)
 8001812:	785b      	ldrb	r3, [r3, #1]
 8001814:	021b      	lsls	r3, r3, #8
 8001816:	b25a      	sxtb	r2, r3
 8001818:	4b3e      	ldr	r3, [pc, #248]	; (8001914 <HAL_UARTEx_RxEventCallback+0x278>)
 800181a:	789b      	ldrb	r3, [r3, #2]
 800181c:	b25b      	sxtb	r3, r3
 800181e:	4313      	orrs	r3, r2
 8001820:	b25a      	sxtb	r2, r3
 8001822:	4b47      	ldr	r3, [pc, #284]	; (8001940 <HAL_UARTEx_RxEventCallback+0x2a4>)
 8001824:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 8001826:	e0f2      	b.n	8001a0e <HAL_UARTEx_RxEventCallback+0x372>
				}
				else if(Old_Rx_Buffer[0] == 0x51 && cmdDataSize == 3){	// Linear Jog X
 8001828:	4b3a      	ldr	r3, [pc, #232]	; (8001914 <HAL_UARTEx_RxEventCallback+0x278>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b51      	cmp	r3, #81	; 0x51
 800182e:	d106      	bne.n	800183e <HAL_UARTEx_RxEventCallback+0x1a2>
 8001830:	4b3a      	ldr	r3, [pc, #232]	; (800191c <HAL_UARTEx_RxEventCallback+0x280>)
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	b29b      	uxth	r3, r3
 8001836:	2b03      	cmp	r3, #3
 8001838:	d101      	bne.n	800183e <HAL_UARTEx_RxEventCallback+0x1a2>
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <HAL_UARTEx_RxEventCallback+0x1a4>
 800183e:	2300      	movs	r3, #0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d00b      	beq.n	800185c <HAL_UARTEx_RxEventCallback+0x1c0>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dx = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001844:	4b33      	ldr	r3, [pc, #204]	; (8001914 <HAL_UARTEx_RxEventCallback+0x278>)
 8001846:	785b      	ldrb	r3, [r3, #1]
 8001848:	021b      	lsls	r3, r3, #8
 800184a:	b25a      	sxtb	r2, r3
 800184c:	4b31      	ldr	r3, [pc, #196]	; (8001914 <HAL_UARTEx_RxEventCallback+0x278>)
 800184e:	789b      	ldrb	r3, [r3, #2]
 8001850:	b25b      	sxtb	r3, r3
 8001852:	4313      	orrs	r3, r2
 8001854:	b25a      	sxtb	r2, r3
 8001856:	4b3b      	ldr	r3, [pc, #236]	; (8001944 <HAL_UARTEx_RxEventCallback+0x2a8>)
 8001858:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 800185a:	e0d8      	b.n	8001a0e <HAL_UARTEx_RxEventCallback+0x372>
				}
				else if(Old_Rx_Buffer[0] == 0x52 && cmdDataSize == 3){	// Linear Jog Y
 800185c:	4b2d      	ldr	r3, [pc, #180]	; (8001914 <HAL_UARTEx_RxEventCallback+0x278>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b52      	cmp	r3, #82	; 0x52
 8001862:	d106      	bne.n	8001872 <HAL_UARTEx_RxEventCallback+0x1d6>
 8001864:	4b2d      	ldr	r3, [pc, #180]	; (800191c <HAL_UARTEx_RxEventCallback+0x280>)
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	b29b      	uxth	r3, r3
 800186a:	2b03      	cmp	r3, #3
 800186c:	d101      	bne.n	8001872 <HAL_UARTEx_RxEventCallback+0x1d6>
 800186e:	2301      	movs	r3, #1
 8001870:	e000      	b.n	8001874 <HAL_UARTEx_RxEventCallback+0x1d8>
 8001872:	2300      	movs	r3, #0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d00b      	beq.n	8001890 <HAL_UARTEx_RxEventCallback+0x1f4>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dy = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001878:	4b26      	ldr	r3, [pc, #152]	; (8001914 <HAL_UARTEx_RxEventCallback+0x278>)
 800187a:	785b      	ldrb	r3, [r3, #1]
 800187c:	021b      	lsls	r3, r3, #8
 800187e:	b25a      	sxtb	r2, r3
 8001880:	4b24      	ldr	r3, [pc, #144]	; (8001914 <HAL_UARTEx_RxEventCallback+0x278>)
 8001882:	789b      	ldrb	r3, [r3, #2]
 8001884:	b25b      	sxtb	r3, r3
 8001886:	4313      	orrs	r3, r2
 8001888:	b25a      	sxtb	r2, r3
 800188a:	4b2f      	ldr	r3, [pc, #188]	; (8001948 <HAL_UARTEx_RxEventCallback+0x2ac>)
 800188c:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 800188e:	e0be      	b.n	8001a0e <HAL_UARTEx_RxEventCallback+0x372>
				}
				else if(Old_Rx_Buffer[0] == 0x53 && cmdDataSize == 3){	// Linear Jog Z
 8001890:	4b20      	ldr	r3, [pc, #128]	; (8001914 <HAL_UARTEx_RxEventCallback+0x278>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b53      	cmp	r3, #83	; 0x53
 8001896:	d106      	bne.n	80018a6 <HAL_UARTEx_RxEventCallback+0x20a>
 8001898:	4b20      	ldr	r3, [pc, #128]	; (800191c <HAL_UARTEx_RxEventCallback+0x280>)
 800189a:	881b      	ldrh	r3, [r3, #0]
 800189c:	b29b      	uxth	r3, r3
 800189e:	2b03      	cmp	r3, #3
 80018a0:	d101      	bne.n	80018a6 <HAL_UARTEx_RxEventCallback+0x20a>
 80018a2:	2301      	movs	r3, #1
 80018a4:	e000      	b.n	80018a8 <HAL_UARTEx_RxEventCallback+0x20c>
 80018a6:	2300      	movs	r3, #0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d00b      	beq.n	80018c4 <HAL_UARTEx_RxEventCallback+0x228>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dz = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 80018ac:	4b19      	ldr	r3, [pc, #100]	; (8001914 <HAL_UARTEx_RxEventCallback+0x278>)
 80018ae:	785b      	ldrb	r3, [r3, #1]
 80018b0:	021b      	lsls	r3, r3, #8
 80018b2:	b25a      	sxtb	r2, r3
 80018b4:	4b17      	ldr	r3, [pc, #92]	; (8001914 <HAL_UARTEx_RxEventCallback+0x278>)
 80018b6:	789b      	ldrb	r3, [r3, #2]
 80018b8:	b25b      	sxtb	r3, r3
 80018ba:	4313      	orrs	r3, r2
 80018bc:	b25a      	sxtb	r2, r3
 80018be:	4b23      	ldr	r3, [pc, #140]	; (800194c <HAL_UARTEx_RxEventCallback+0x2b0>)
 80018c0:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 80018c2:	e0a4      	b.n	8001a0e <HAL_UARTEx_RxEventCallback+0x372>
				}
				else if(Old_Rx_Buffer[0] == 0x54 && cmdDataSize == 3){	// Linear Jog Yaw
 80018c4:	4b13      	ldr	r3, [pc, #76]	; (8001914 <HAL_UARTEx_RxEventCallback+0x278>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b54      	cmp	r3, #84	; 0x54
 80018ca:	d106      	bne.n	80018da <HAL_UARTEx_RxEventCallback+0x23e>
 80018cc:	4b13      	ldr	r3, [pc, #76]	; (800191c <HAL_UARTEx_RxEventCallback+0x280>)
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	2b03      	cmp	r3, #3
 80018d4:	d101      	bne.n	80018da <HAL_UARTEx_RxEventCallback+0x23e>
 80018d6:	2301      	movs	r3, #1
 80018d8:	e000      	b.n	80018dc <HAL_UARTEx_RxEventCallback+0x240>
 80018da:	2300      	movs	r3, #0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d00b      	beq.n	80018f8 <HAL_UARTEx_RxEventCallback+0x25c>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dyaw = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <HAL_UARTEx_RxEventCallback+0x278>)
 80018e2:	785b      	ldrb	r3, [r3, #1]
 80018e4:	021b      	lsls	r3, r3, #8
 80018e6:	b25a      	sxtb	r2, r3
 80018e8:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <HAL_UARTEx_RxEventCallback+0x278>)
 80018ea:	789b      	ldrb	r3, [r3, #2]
 80018ec:	b25b      	sxtb	r3, r3
 80018ee:	4313      	orrs	r3, r2
 80018f0:	b25a      	sxtb	r2, r3
 80018f2:	4b17      	ldr	r3, [pc, #92]	; (8001950 <HAL_UARTEx_RxEventCallback+0x2b4>)
 80018f4:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 80018f6:	e08a      	b.n	8001a0e <HAL_UARTEx_RxEventCallback+0x372>
				}
				else if(Old_Rx_Buffer[0] == 0x61 && cmdDataSize == 5){ // Joint Jog 4q
 80018f8:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_UARTEx_RxEventCallback+0x278>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b61      	cmp	r3, #97	; 0x61
 80018fe:	d129      	bne.n	8001954 <HAL_UARTEx_RxEventCallback+0x2b8>
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <HAL_UARTEx_RxEventCallback+0x280>)
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	b29b      	uxth	r3, r3
 8001906:	2b05      	cmp	r3, #5
 8001908:	d124      	bne.n	8001954 <HAL_UARTEx_RxEventCallback+0x2b8>
 800190a:	2301      	movs	r3, #1
 800190c:	e023      	b.n	8001956 <HAL_UARTEx_RxEventCallback+0x2ba>
 800190e:	bf00      	nop
 8001910:	24000bb8 	.word	0x24000bb8
 8001914:	24000240 	.word	0x24000240
 8001918:	24000254 	.word	0x24000254
 800191c:	24000268 	.word	0x24000268
 8001920:	24000648 	.word	0x24000648
 8001924:	2400023c 	.word	0x2400023c
 8001928:	2400023e 	.word	0x2400023e
 800192c:	58021000 	.word	0x58021000
 8001930:	58020400 	.word	0x58020400
 8001934:	24000234 	.word	0x24000234
 8001938:	24000235 	.word	0x24000235
 800193c:	24000236 	.word	0x24000236
 8001940:	24000237 	.word	0x24000237
 8001944:	24000238 	.word	0x24000238
 8001948:	24000239 	.word	0x24000239
 800194c:	2400023a 	.word	0x2400023a
 8001950:	2400023b 	.word	0x2400023b
 8001954:	2300      	movs	r3, #0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d014      	beq.n	8001984 <HAL_UARTEx_RxEventCallback+0x2e8>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = Old_Rx_Buffer[1];
 800195a:	4b63      	ldr	r3, [pc, #396]	; (8001ae8 <HAL_UARTEx_RxEventCallback+0x44c>)
 800195c:	785b      	ldrb	r3, [r3, #1]
 800195e:	b25a      	sxtb	r2, r3
 8001960:	4b62      	ldr	r3, [pc, #392]	; (8001aec <HAL_UARTEx_RxEventCallback+0x450>)
 8001962:	701a      	strb	r2, [r3, #0]
					dq2 = Old_Rx_Buffer[2];
 8001964:	4b60      	ldr	r3, [pc, #384]	; (8001ae8 <HAL_UARTEx_RxEventCallback+0x44c>)
 8001966:	789b      	ldrb	r3, [r3, #2]
 8001968:	b25a      	sxtb	r2, r3
 800196a:	4b61      	ldr	r3, [pc, #388]	; (8001af0 <HAL_UARTEx_RxEventCallback+0x454>)
 800196c:	701a      	strb	r2, [r3, #0]
					dq3 = Old_Rx_Buffer[3];
 800196e:	4b5e      	ldr	r3, [pc, #376]	; (8001ae8 <HAL_UARTEx_RxEventCallback+0x44c>)
 8001970:	78db      	ldrb	r3, [r3, #3]
 8001972:	b25a      	sxtb	r2, r3
 8001974:	4b5f      	ldr	r3, [pc, #380]	; (8001af4 <HAL_UARTEx_RxEventCallback+0x458>)
 8001976:	701a      	strb	r2, [r3, #0]
					dq4 = Old_Rx_Buffer[4];
 8001978:	4b5b      	ldr	r3, [pc, #364]	; (8001ae8 <HAL_UARTEx_RxEventCallback+0x44c>)
 800197a:	791b      	ldrb	r3, [r3, #4]
 800197c:	b25a      	sxtb	r2, r3
 800197e:	4b5e      	ldr	r3, [pc, #376]	; (8001af8 <HAL_UARTEx_RxEventCallback+0x45c>)
 8001980:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 8001982:	e044      	b.n	8001a0e <HAL_UARTEx_RxEventCallback+0x372>
				}
				else if(Old_Rx_Buffer[0] == 0x71 && cmdDataSize == 5){ // Linear Jog X,Y,Z,Yaw
 8001984:	4b58      	ldr	r3, [pc, #352]	; (8001ae8 <HAL_UARTEx_RxEventCallback+0x44c>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b71      	cmp	r3, #113	; 0x71
 800198a:	d106      	bne.n	800199a <HAL_UARTEx_RxEventCallback+0x2fe>
 800198c:	4b5b      	ldr	r3, [pc, #364]	; (8001afc <HAL_UARTEx_RxEventCallback+0x460>)
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	b29b      	uxth	r3, r3
 8001992:	2b05      	cmp	r3, #5
 8001994:	d101      	bne.n	800199a <HAL_UARTEx_RxEventCallback+0x2fe>
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <HAL_UARTEx_RxEventCallback+0x300>
 800199a:	2300      	movs	r3, #0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d036      	beq.n	8001a0e <HAL_UARTEx_RxEventCallback+0x372>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dx = Old_Rx_Buffer[1];
 80019a0:	4b51      	ldr	r3, [pc, #324]	; (8001ae8 <HAL_UARTEx_RxEventCallback+0x44c>)
 80019a2:	785b      	ldrb	r3, [r3, #1]
 80019a4:	b25a      	sxtb	r2, r3
 80019a6:	4b56      	ldr	r3, [pc, #344]	; (8001b00 <HAL_UARTEx_RxEventCallback+0x464>)
 80019a8:	701a      	strb	r2, [r3, #0]
					dy = Old_Rx_Buffer[2];
 80019aa:	4b4f      	ldr	r3, [pc, #316]	; (8001ae8 <HAL_UARTEx_RxEventCallback+0x44c>)
 80019ac:	789b      	ldrb	r3, [r3, #2]
 80019ae:	b25a      	sxtb	r2, r3
 80019b0:	4b54      	ldr	r3, [pc, #336]	; (8001b04 <HAL_UARTEx_RxEventCallback+0x468>)
 80019b2:	701a      	strb	r2, [r3, #0]
					dz = Old_Rx_Buffer[3];
 80019b4:	4b4c      	ldr	r3, [pc, #304]	; (8001ae8 <HAL_UARTEx_RxEventCallback+0x44c>)
 80019b6:	78db      	ldrb	r3, [r3, #3]
 80019b8:	b25a      	sxtb	r2, r3
 80019ba:	4b53      	ldr	r3, [pc, #332]	; (8001b08 <HAL_UARTEx_RxEventCallback+0x46c>)
 80019bc:	701a      	strb	r2, [r3, #0]
					dyaw = Old_Rx_Buffer[4];
 80019be:	4b4a      	ldr	r3, [pc, #296]	; (8001ae8 <HAL_UARTEx_RxEventCallback+0x44c>)
 80019c0:	791b      	ldrb	r3, [r3, #4]
 80019c2:	b25a      	sxtb	r2, r3
 80019c4:	4b51      	ldr	r3, [pc, #324]	; (8001b0c <HAL_UARTEx_RxEventCallback+0x470>)
 80019c6:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 80019c8:	e021      	b.n	8001a0e <HAL_UARTEx_RxEventCallback+0x372>
				}
			}
			else{
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019ca:	2200      	movs	r2, #0
 80019cc:	2102      	movs	r1, #2
 80019ce:	4850      	ldr	r0, [pc, #320]	; (8001b10 <HAL_UARTEx_RxEventCallback+0x474>)
 80019d0:	f006 ff08 	bl	80087e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80019d4:	2201      	movs	r2, #1
 80019d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019da:	484e      	ldr	r0, [pc, #312]	; (8001b14 <HAL_UARTEx_RxEventCallback+0x478>)
 80019dc:	f006 ff02 	bl	80087e4 <HAL_GPIO_WritePin>
				HAL_UART_Transmit_DMA(&huart3, (uint8_t *)"CRC16 error\n", 12);
 80019e0:	220c      	movs	r2, #12
 80019e2:	494d      	ldr	r1, [pc, #308]	; (8001b18 <HAL_UARTEx_RxEventCallback+0x47c>)
 80019e4:	484d      	ldr	r0, [pc, #308]	; (8001b1c <HAL_UARTEx_RxEventCallback+0x480>)
 80019e6:	f00b f851 	bl	800ca8c <HAL_UART_Transmit_DMA>
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 80019ea:	e010      	b.n	8001a0e <HAL_UARTEx_RxEventCallback+0x372>
			}
		}
		else{
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019ec:	2200      	movs	r2, #0
 80019ee:	2102      	movs	r1, #2
 80019f0:	4847      	ldr	r0, [pc, #284]	; (8001b10 <HAL_UARTEx_RxEventCallback+0x474>)
 80019f2:	f006 fef7 	bl	80087e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80019f6:	2201      	movs	r2, #1
 80019f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019fc:	4845      	ldr	r0, [pc, #276]	; (8001b14 <HAL_UARTEx_RxEventCallback+0x478>)
 80019fe:	f006 fef1 	bl	80087e4 <HAL_GPIO_WritePin>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t *)"Protocol match error\n", 21);
 8001a02:	2215      	movs	r2, #21
 8001a04:	4946      	ldr	r1, [pc, #280]	; (8001b20 <HAL_UARTEx_RxEventCallback+0x484>)
 8001a06:	4845      	ldr	r0, [pc, #276]	; (8001b1c <HAL_UARTEx_RxEventCallback+0x480>)
 8001a08:	f00b f840 	bl	800ca8c <HAL_UART_Transmit_DMA>
 8001a0c:	e000      	b.n	8001a10 <HAL_UARTEx_RxEventCallback+0x374>
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 8001a0e:	bf00      	nop
		}
		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer, Rx_BUFFER_SIZE);
 8001a10:	2214      	movs	r2, #20
 8001a12:	4944      	ldr	r1, [pc, #272]	; (8001b24 <HAL_UARTEx_RxEventCallback+0x488>)
 8001a14:	4841      	ldr	r0, [pc, #260]	; (8001b1c <HAL_UARTEx_RxEventCallback+0x480>)
 8001a16:	f00c ff8c 	bl	800e932 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8001a1a:	4b43      	ldr	r3, [pc, #268]	; (8001b28 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a43      	ldr	r2, [pc, #268]	; (8001b2c <HAL_UARTEx_RxEventCallback+0x490>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d04a      	beq.n	8001aba <HAL_UARTEx_RxEventCallback+0x41e>
 8001a24:	4b40      	ldr	r3, [pc, #256]	; (8001b28 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a41      	ldr	r2, [pc, #260]	; (8001b30 <HAL_UARTEx_RxEventCallback+0x494>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d045      	beq.n	8001aba <HAL_UARTEx_RxEventCallback+0x41e>
 8001a2e:	4b3e      	ldr	r3, [pc, #248]	; (8001b28 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a40      	ldr	r2, [pc, #256]	; (8001b34 <HAL_UARTEx_RxEventCallback+0x498>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d040      	beq.n	8001aba <HAL_UARTEx_RxEventCallback+0x41e>
 8001a38:	4b3b      	ldr	r3, [pc, #236]	; (8001b28 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a3e      	ldr	r2, [pc, #248]	; (8001b38 <HAL_UARTEx_RxEventCallback+0x49c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d03b      	beq.n	8001aba <HAL_UARTEx_RxEventCallback+0x41e>
 8001a42:	4b39      	ldr	r3, [pc, #228]	; (8001b28 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a3d      	ldr	r2, [pc, #244]	; (8001b3c <HAL_UARTEx_RxEventCallback+0x4a0>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d036      	beq.n	8001aba <HAL_UARTEx_RxEventCallback+0x41e>
 8001a4c:	4b36      	ldr	r3, [pc, #216]	; (8001b28 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a3b      	ldr	r2, [pc, #236]	; (8001b40 <HAL_UARTEx_RxEventCallback+0x4a4>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d031      	beq.n	8001aba <HAL_UARTEx_RxEventCallback+0x41e>
 8001a56:	4b34      	ldr	r3, [pc, #208]	; (8001b28 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a3a      	ldr	r2, [pc, #232]	; (8001b44 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d02c      	beq.n	8001aba <HAL_UARTEx_RxEventCallback+0x41e>
 8001a60:	4b31      	ldr	r3, [pc, #196]	; (8001b28 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a38      	ldr	r2, [pc, #224]	; (8001b48 <HAL_UARTEx_RxEventCallback+0x4ac>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d027      	beq.n	8001aba <HAL_UARTEx_RxEventCallback+0x41e>
 8001a6a:	4b2f      	ldr	r3, [pc, #188]	; (8001b28 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a37      	ldr	r2, [pc, #220]	; (8001b4c <HAL_UARTEx_RxEventCallback+0x4b0>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d022      	beq.n	8001aba <HAL_UARTEx_RxEventCallback+0x41e>
 8001a74:	4b2c      	ldr	r3, [pc, #176]	; (8001b28 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a35      	ldr	r2, [pc, #212]	; (8001b50 <HAL_UARTEx_RxEventCallback+0x4b4>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d01d      	beq.n	8001aba <HAL_UARTEx_RxEventCallback+0x41e>
 8001a7e:	4b2a      	ldr	r3, [pc, #168]	; (8001b28 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a34      	ldr	r2, [pc, #208]	; (8001b54 <HAL_UARTEx_RxEventCallback+0x4b8>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d018      	beq.n	8001aba <HAL_UARTEx_RxEventCallback+0x41e>
 8001a88:	4b27      	ldr	r3, [pc, #156]	; (8001b28 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a32      	ldr	r2, [pc, #200]	; (8001b58 <HAL_UARTEx_RxEventCallback+0x4bc>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d013      	beq.n	8001aba <HAL_UARTEx_RxEventCallback+0x41e>
 8001a92:	4b25      	ldr	r3, [pc, #148]	; (8001b28 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a31      	ldr	r2, [pc, #196]	; (8001b5c <HAL_UARTEx_RxEventCallback+0x4c0>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d00e      	beq.n	8001aba <HAL_UARTEx_RxEventCallback+0x41e>
 8001a9c:	4b22      	ldr	r3, [pc, #136]	; (8001b28 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a2f      	ldr	r2, [pc, #188]	; (8001b60 <HAL_UARTEx_RxEventCallback+0x4c4>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d009      	beq.n	8001aba <HAL_UARTEx_RxEventCallback+0x41e>
 8001aa6:	4b20      	ldr	r3, [pc, #128]	; (8001b28 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a2e      	ldr	r2, [pc, #184]	; (8001b64 <HAL_UARTEx_RxEventCallback+0x4c8>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d004      	beq.n	8001aba <HAL_UARTEx_RxEventCallback+0x41e>
 8001ab0:	4b1d      	ldr	r3, [pc, #116]	; (8001b28 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a2c      	ldr	r2, [pc, #176]	; (8001b68 <HAL_UARTEx_RxEventCallback+0x4cc>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d109      	bne.n	8001ace <HAL_UARTEx_RxEventCallback+0x432>
 8001aba:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4b19      	ldr	r3, [pc, #100]	; (8001b28 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 0208 	bic.w	r2, r2, #8
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	bf00      	nop
	}
}
 8001acc:	e007      	b.n	8001ade <HAL_UARTEx_RxEventCallback+0x442>
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8001ace:	4b16      	ldr	r3, [pc, #88]	; (8001b28 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 0204 	bic.w	r2, r2, #4
 8001adc:	601a      	str	r2, [r3, #0]
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	24000240 	.word	0x24000240
 8001aec:	24000234 	.word	0x24000234
 8001af0:	24000235 	.word	0x24000235
 8001af4:	24000236 	.word	0x24000236
 8001af8:	24000237 	.word	0x24000237
 8001afc:	24000268 	.word	0x24000268
 8001b00:	24000238 	.word	0x24000238
 8001b04:	24000239 	.word	0x24000239
 8001b08:	2400023a 	.word	0x2400023a
 8001b0c:	2400023b 	.word	0x2400023b
 8001b10:	58021000 	.word	0x58021000
 8001b14:	58020400 	.word	0x58020400
 8001b18:	080120f0 	.word	0x080120f0
 8001b1c:	24000bb8 	.word	0x24000bb8
 8001b20:	08012100 	.word	0x08012100
 8001b24:	24000254 	.word	0x24000254
 8001b28:	24000b40 	.word	0x24000b40
 8001b2c:	40020010 	.word	0x40020010
 8001b30:	40020028 	.word	0x40020028
 8001b34:	40020040 	.word	0x40020040
 8001b38:	40020058 	.word	0x40020058
 8001b3c:	40020070 	.word	0x40020070
 8001b40:	40020088 	.word	0x40020088
 8001b44:	400200a0 	.word	0x400200a0
 8001b48:	400200b8 	.word	0x400200b8
 8001b4c:	40020410 	.word	0x40020410
 8001b50:	40020428 	.word	0x40020428
 8001b54:	40020440 	.word	0x40020440
 8001b58:	40020458 	.word	0x40020458
 8001b5c:	40020470 	.word	0x40020470
 8001b60:	40020488 	.word	0x40020488
 8001b64:	400204a0 	.word	0x400204a0
 8001b68:	400204b8 	.word	0x400204b8

08001b6c <_ZN11robot_jointC1Ev>:
struct joint_state {
    float q1,q2,q3,q4;
};
typedef struct joint_state joint_config;

struct robot_joint{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	661a      	str	r2, [r3, #96]	; 0x60
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b8a:	665a      	str	r2, [r3, #100]	; 0x64
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	669a      	str	r2, [r3, #104]	; 0x68
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b9a:	66da      	str	r2, [r3, #108]	; 0x6c
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	671a      	str	r2, [r3, #112]	; 0x70
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	675a      	str	r2, [r3, #116]	; 0x74
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	679a      	str	r2, [r3, #120]	; 0x78
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a06      	ldr	r2, [pc, #24]	; (8001bd0 <_ZN11robot_jointC1Ev+0x64>)
 8001bb8:	67da      	str	r2, [r3, #124]	; 0x7c
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a05      	ldr	r2, [pc, #20]	; (8001bd4 <_ZN11robot_jointC1Ev+0x68>)
 8001bbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	3dc28f5c 	.word	0x3dc28f5c
 8001bd4:	387ba882 	.word	0x387ba882

08001bd8 <_Z10Update_ivkffffffff>:

fcb_joint fcb_joint1, fcb_joint2, fcb_joint3, fcb_joint4;


void Update_ivk(float q1,float q2,float q3,float q4,float Vx, float Vy, float Vz, float Wz)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b090      	sub	sp, #64	; 0x40
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	ed87 0a07 	vstr	s0, [r7, #28]
 8001be2:	edc7 0a06 	vstr	s1, [r7, #24]
 8001be6:	ed87 1a05 	vstr	s2, [r7, #20]
 8001bea:	edc7 1a04 	vstr	s3, [r7, #16]
 8001bee:	ed87 2a03 	vstr	s4, [r7, #12]
 8001bf2:	edc7 2a02 	vstr	s5, [r7, #8]
 8001bf6:	ed87 3a01 	vstr	s6, [r7, #4]
 8001bfa:	edc7 3a00 	vstr	s7, [r7]
	float S13 = sin(q1+q3);
 8001bfe:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c02:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c0e:	f7ff fd25 	bl	800165c <_ZSt3sinf>
 8001c12:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
	float C13 = cos(q1+q3);
 8001c16:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c22:	eeb0 0a67 	vmov.f32	s0, s15
 8001c26:	f7ff fd09 	bl	800163c <_ZSt3cosf>
 8001c2a:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
	float S3 = sin(q3);
 8001c2e:	ed97 0a05 	vldr	s0, [r7, #20]
 8001c32:	f7ff fd13 	bl	800165c <_ZSt3sinf>
 8001c36:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	float S1 = sin(q1);
 8001c3a:	ed97 0a07 	vldr	s0, [r7, #28]
 8001c3e:	f7ff fd0d 	bl	800165c <_ZSt3sinf>
 8001c42:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
	float C1 = cos(q1);
 8001c46:	ed97 0a07 	vldr	s0, [r7, #28]
 8001c4a:	f7ff fcf7 	bl	800163c <_ZSt3cosf>
 8001c4e:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	float L12 = L1 + L2;
 8001c52:	4b53      	ldr	r3, [pc, #332]	; (8001da0 <_Z10Update_ivkffffffff+0x1c8>)
 8001c54:	ed93 7a00 	vldr	s14, [r3]
 8001c58:	4b52      	ldr	r3, [pc, #328]	; (8001da4 <_Z10Update_ivkffffffff+0x1cc>)
 8001c5a:	edd3 7a00 	vldr	s15, [r3]
 8001c5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c62:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float L3S3 = L3 * S3;
 8001c66:	4b50      	ldr	r3, [pc, #320]	; (8001da8 <_Z10Update_ivkffffffff+0x1d0>)
 8001c68:	edd3 7a00 	vldr	s15, [r3]
 8001c6c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c74:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	w_q1 = (Vx*C13 + Vy*S13)/(S3*L12);
 8001c78:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c7c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001c80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c84:	edd7 6a02 	vldr	s13, [r7, #8]
 8001c88:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001c8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c90:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001c94:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001c98:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001c9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ca4:	4b41      	ldr	r3, [pc, #260]	; (8001dac <_Z10Update_ivkffffffff+0x1d4>)
 8001ca6:	edc3 7a00 	vstr	s15, [r3]
	w_q2 = Vz;
 8001caa:	4a41      	ldr	r2, [pc, #260]	; (8001db0 <_Z10Update_ivkffffffff+0x1d8>)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6013      	str	r3, [r2, #0]
	w_q3 = -(Vx*(L3*C13 + L1*C1 + L2*C1))/(L3S3*L12) - (Vy*(L3*S13 + L1*S1 + L2*S1))/(L3S3*L12);
 8001cb0:	4b3d      	ldr	r3, [pc, #244]	; (8001da8 <_Z10Update_ivkffffffff+0x1d0>)
 8001cb2:	ed93 7a00 	vldr	s14, [r3]
 8001cb6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001cba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cbe:	4b38      	ldr	r3, [pc, #224]	; (8001da0 <_Z10Update_ivkffffffff+0x1c8>)
 8001cc0:	edd3 6a00 	vldr	s13, [r3]
 8001cc4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001cc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ccc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cd0:	4b34      	ldr	r3, [pc, #208]	; (8001da4 <_Z10Update_ivkffffffff+0x1cc>)
 8001cd2:	edd3 6a00 	vldr	s13, [r3]
 8001cd6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001cda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ce2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cea:	eef1 6a67 	vneg.f32	s13, s15
 8001cee:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001cf2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cfe:	4b2a      	ldr	r3, [pc, #168]	; (8001da8 <_Z10Update_ivkffffffff+0x1d0>)
 8001d00:	edd3 6a00 	vldr	s13, [r3]
 8001d04:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001d08:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d0c:	4b24      	ldr	r3, [pc, #144]	; (8001da0 <_Z10Update_ivkffffffff+0x1c8>)
 8001d0e:	ed93 6a00 	vldr	s12, [r3]
 8001d12:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001d16:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d1a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001d1e:	4b21      	ldr	r3, [pc, #132]	; (8001da4 <_Z10Update_ivkffffffff+0x1cc>)
 8001d20:	ed93 6a00 	vldr	s12, [r3]
 8001d24:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001d28:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d2c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001d30:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d34:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001d38:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001d3c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001d40:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d44:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001d48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d4c:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <_Z10Update_ivkffffffff+0x1dc>)
 8001d4e:	edc3 7a00 	vstr	s15, [r3]
	w_q4 = (Vx*C1 + Vy*S1 + L3*Wz*S3)/(L3S3);
 8001d52:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d56:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d5e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001d62:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001d66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <_Z10Update_ivkffffffff+0x1d0>)
 8001d70:	edd3 6a00 	vldr	s13, [r3]
 8001d74:	edd7 7a00 	vldr	s15, [r7]
 8001d78:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d7c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001d80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d84:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001d88:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001d8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d90:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <_Z10Update_ivkffffffff+0x1e0>)
 8001d92:	edc3 7a00 	vstr	s15, [r3]

};
 8001d96:	bf00      	nop
 8001d98:	3740      	adds	r7, #64	; 0x40
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	24000000 	.word	0x24000000
 8001da4:	24000004 	.word	0x24000004
 8001da8:	24000008 	.word	0x24000008
 8001dac:	2400036c 	.word	0x2400036c
 8001db0:	24000370 	.word	0x24000370
 8001db4:	24000374 	.word	0x24000374
 8001db8:	24000378 	.word	0x24000378

08001dbc <_Z12KalmanFilterf11robot_joint>:
////     p21 = P21 + P22*dt + (Q*dt3)/2 - (((Q*dt3)/2 + P22*dt + P21)*(P11 + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt)))/(P11 + R + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt));
////	 p22 = P22 + Q*dt2 - (((Q*dt3)/2 + P22*dt + P12)*((Q*dt3)/2 + P22*dt + P21))/(P11 + R + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt));
//}

fcb_joint KalmanFilter(float theta_k, fcb_joint joint)
{
 8001dbc:	b084      	sub	sp, #16
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	ed2d 8b08 	vpush	{d8-d11}
 8001dc4:	b08a      	sub	sp, #40	; 0x28
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	ed87 0a00 	vstr	s0, [r7]
 8001dce:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001dd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
//	bug1 = joint.Encoder;
	float X1 = joint.X11;
 8001dd6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
	float X2 = joint.X21;
 8001ddc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001de0:	623b      	str	r3, [r7, #32]
	float P11 = joint.p11;
 8001de2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001de6:	61fb      	str	r3, [r7, #28]
	float P12 = joint.p12;
 8001de8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001dec:	61bb      	str	r3, [r7, #24]
	float P21 = joint.p21;
 8001dee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001df2:	617b      	str	r3, [r7, #20]
	float P22 = joint.p22;
 8001df4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001df8:	613b      	str	r3, [r7, #16]
	float Q = joint.Q;
 8001dfa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001dfe:	60fb      	str	r3, [r7, #12]
	float R = joint.R;
 8001e00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e04:	60bb      	str	r3, [r7, #8]

	joint.X11 = X1 + (X2*dt) - ((X1 - theta_k + X2*dt)*(P11 + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt)))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt));
 8001e06:	4bef      	ldr	r3, [pc, #956]	; (80021c4 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001e08:	ed93 7a00 	vldr	s14, [r3]
 8001e0c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e14:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001e18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e1c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001e20:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001e24:	edd7 7a00 	vldr	s15, [r7]
 8001e28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e2c:	4be5      	ldr	r3, [pc, #916]	; (80021c4 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001e2e:	edd3 6a00 	vldr	s13, [r3]
 8001e32:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e3e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001e42:	4be0      	ldr	r3, [pc, #896]	; (80021c4 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001e44:	ed93 7a00 	vldr	s14, [r3]
 8001e48:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e50:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e58:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001e5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e60:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001e64:	4bd7      	ldr	r3, [pc, #860]	; (80021c4 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001e66:	edd3 7a00 	vldr	s15, [r3]
 8001e6a:	2004      	movs	r0, #4
 8001e6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e70:	f001 fb6e 	bl	8003550 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001e74:	eeb0 7b40 	vmov.f64	d7, d0
 8001e78:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001e7c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001e80:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001e84:	ee3a 6b07 	vadd.f64	d6, d10, d7
 8001e88:	4bce      	ldr	r3, [pc, #824]	; (80021c4 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001e8a:	ed93 7a00 	vldr	s14, [r3]
 8001e8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e96:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e9e:	4bc9      	ldr	r3, [pc, #804]	; (80021c4 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001ea0:	edd3 7a00 	vldr	s15, [r3]
 8001ea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ea8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001eac:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001eb0:	ee29 9b07 	vmul.f64	d9, d9, d7
 8001eb4:	ed97 7a07 	vldr	s14, [r7, #28]
 8001eb8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ebc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ec0:	4bc0      	ldr	r3, [pc, #768]	; (80021c4 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001ec2:	edd3 6a00 	vldr	s13, [r3]
 8001ec6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001eca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ece:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ed2:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001ed6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001eda:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001ede:	4bb9      	ldr	r3, [pc, #740]	; (80021c4 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001ee0:	edd3 7a00 	vldr	s15, [r3]
 8001ee4:	2004      	movs	r0, #4
 8001ee6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eea:	f001 fb31 	bl	8003550 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001eee:	eeb0 7b40 	vmov.f64	d7, d0
 8001ef2:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001ef6:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001efa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001efe:	ee3a 6b07 	vadd.f64	d6, d10, d7
 8001f02:	4bb0      	ldr	r3, [pc, #704]	; (80021c4 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001f04:	ed93 7a00 	vldr	s14, [r3]
 8001f08:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f10:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f18:	4baa      	ldr	r3, [pc, #680]	; (80021c4 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001f1a:	edd3 7a00 	vldr	s15, [r3]
 8001f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f26:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001f2a:	ee89 7b06 	vdiv.f64	d7, d9, d6
 8001f2e:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001f32:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001f36:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	joint.X21 = X2 - (((Q*pow(dt,3))/2 + P22*dt + P21)*(X1 - theta_k + X2*dt))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt));
 8001f3a:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f3e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001f42:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f46:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001f4a:	4b9e      	ldr	r3, [pc, #632]	; (80021c4 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001f4c:	edd3 7a00 	vldr	s15, [r3]
 8001f50:	2003      	movs	r0, #3
 8001f52:	eeb0 0a67 	vmov.f32	s0, s15
 8001f56:	f001 fafb 	bl	8003550 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001f5a:	eeb0 7b40 	vmov.f64	d7, d0
 8001f5e:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001f62:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001f66:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001f6a:	4b96      	ldr	r3, [pc, #600]	; (80021c4 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001f6c:	ed93 7a00 	vldr	s14, [r3]
 8001f70:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f78:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f7c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001f80:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f84:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f88:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001f8c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001f90:	edd7 7a00 	vldr	s15, [r7]
 8001f94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f98:	4b8a      	ldr	r3, [pc, #552]	; (80021c4 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001f9a:	edd3 5a00 	vldr	s11, [r3]
 8001f9e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001fa2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001faa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001fae:	ee26 9b07 	vmul.f64	d9, d6, d7
 8001fb2:	ed97 7a07 	vldr	s14, [r7, #28]
 8001fb6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fbe:	4b81      	ldr	r3, [pc, #516]	; (80021c4 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001fc0:	edd3 6a00 	vldr	s13, [r3]
 8001fc4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fd0:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001fd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fd8:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001fdc:	4b79      	ldr	r3, [pc, #484]	; (80021c4 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001fde:	edd3 7a00 	vldr	s15, [r3]
 8001fe2:	2004      	movs	r0, #4
 8001fe4:	eeb0 0a67 	vmov.f32	s0, s15
 8001fe8:	f001 fab2 	bl	8003550 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001fec:	eeb0 7b40 	vmov.f64	d7, d0
 8001ff0:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001ff4:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001ff8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ffc:	ee3a 6b07 	vadd.f64	d6, d10, d7
 8002000:	4b70      	ldr	r3, [pc, #448]	; (80021c4 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002002:	ed93 7a00 	vldr	s14, [r3]
 8002006:	edd7 7a04 	vldr	s15, [r7, #16]
 800200a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800200e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002012:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002016:	4b6b      	ldr	r3, [pc, #428]	; (80021c4 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002018:	edd3 7a00 	vldr	s15, [r3]
 800201c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002020:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002024:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002028:	ee89 7b06 	vdiv.f64	d7, d9, d6
 800202c:	ee38 7b47 	vsub.f64	d7, d8, d7
 8002030:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002034:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	joint.p11 = -((P11 + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt)) - 1)*(P11 + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt));
 8002038:	4b62      	ldr	r3, [pc, #392]	; (80021c4 <_Z12KalmanFilterf11robot_joint+0x408>)
 800203a:	ed93 7a00 	vldr	s14, [r3]
 800203e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002042:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002046:	edd7 7a07 	vldr	s15, [r7, #28]
 800204a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800204e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002052:	edd7 7a03 	vldr	s15, [r7, #12]
 8002056:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800205a:	4b5a      	ldr	r3, [pc, #360]	; (80021c4 <_Z12KalmanFilterf11robot_joint+0x408>)
 800205c:	edd3 7a00 	vldr	s15, [r3]
 8002060:	2004      	movs	r0, #4
 8002062:	eeb0 0a67 	vmov.f32	s0, s15
 8002066:	f001 fa73 	bl	8003550 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800206a:	eeb0 7b40 	vmov.f64	d7, d0
 800206e:	ee29 6b07 	vmul.f64	d6, d9, d7
 8002072:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8002076:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800207a:	ee38 6b07 	vadd.f64	d6, d8, d7
 800207e:	4b51      	ldr	r3, [pc, #324]	; (80021c4 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002080:	ed93 7a00 	vldr	s14, [r3]
 8002084:	edd7 7a04 	vldr	s15, [r7, #16]
 8002088:	ee27 7a27 	vmul.f32	s14, s14, s15
 800208c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002090:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002094:	4b4b      	ldr	r3, [pc, #300]	; (80021c4 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002096:	edd3 7a00 	vldr	s15, [r3]
 800209a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800209e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020a2:	ee36 8b07 	vadd.f64	d8, d6, d7
 80020a6:	ed97 7a07 	vldr	s14, [r7, #28]
 80020aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80020ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020b2:	4b44      	ldr	r3, [pc, #272]	; (80021c4 <_Z12KalmanFilterf11robot_joint+0x408>)
 80020b4:	edd3 6a00 	vldr	s13, [r3]
 80020b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80020bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c4:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80020c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80020cc:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80020d0:	4b3c      	ldr	r3, [pc, #240]	; (80021c4 <_Z12KalmanFilterf11robot_joint+0x408>)
 80020d2:	edd3 7a00 	vldr	s15, [r3]
 80020d6:	2004      	movs	r0, #4
 80020d8:	eeb0 0a67 	vmov.f32	s0, s15
 80020dc:	f001 fa38 	bl	8003550 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80020e0:	eeb0 7b40 	vmov.f64	d7, d0
 80020e4:	ee2a 6b07 	vmul.f64	d6, d10, d7
 80020e8:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80020ec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80020f0:	ee39 6b07 	vadd.f64	d6, d9, d7
 80020f4:	4b33      	ldr	r3, [pc, #204]	; (80021c4 <_Z12KalmanFilterf11robot_joint+0x408>)
 80020f6:	ed93 7a00 	vldr	s14, [r3]
 80020fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80020fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002102:	edd7 7a06 	vldr	s15, [r7, #24]
 8002106:	ee37 7a27 	vadd.f32	s14, s14, s15
 800210a:	4b2e      	ldr	r3, [pc, #184]	; (80021c4 <_Z12KalmanFilterf11robot_joint+0x408>)
 800210c:	edd3 7a00 	vldr	s15, [r3]
 8002110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002114:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002118:	ee36 6b07 	vadd.f64	d6, d6, d7
 800211c:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8002120:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002124:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002128:	eeb1 8b47 	vneg.f64	d8, d7
 800212c:	4b25      	ldr	r3, [pc, #148]	; (80021c4 <_Z12KalmanFilterf11robot_joint+0x408>)
 800212e:	ed93 7a00 	vldr	s14, [r3]
 8002132:	edd7 7a05 	vldr	s15, [r7, #20]
 8002136:	ee27 7a27 	vmul.f32	s14, s14, s15
 800213a:	edd7 7a07 	vldr	s15, [r7, #28]
 800213e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002142:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002146:	edd7 7a03 	vldr	s15, [r7, #12]
 800214a:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800214e:	4b1d      	ldr	r3, [pc, #116]	; (80021c4 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002150:	edd3 7a00 	vldr	s15, [r3]
 8002154:	2004      	movs	r0, #4
 8002156:	eeb0 0a67 	vmov.f32	s0, s15
 800215a:	f001 f9f9 	bl	8003550 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800215e:	eeb0 7b40 	vmov.f64	d7, d0
 8002162:	ee2a 6b07 	vmul.f64	d6, d10, d7
 8002166:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800216a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800216e:	ee39 6b07 	vadd.f64	d6, d9, d7
 8002172:	4b14      	ldr	r3, [pc, #80]	; (80021c4 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002174:	ed93 7a00 	vldr	s14, [r3]
 8002178:	edd7 7a04 	vldr	s15, [r7, #16]
 800217c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002180:	edd7 7a06 	vldr	s15, [r7, #24]
 8002184:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002188:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <_Z12KalmanFilterf11robot_joint+0x408>)
 800218a:	edd3 7a00 	vldr	s15, [r3]
 800218e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002192:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002196:	ee36 7b07 	vadd.f64	d7, d6, d7
 800219a:	ee28 7b07 	vmul.f64	d7, d8, d7
 800219e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80021a2:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
	joint.p12 = -((P11 + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt)) - 1)*((Q*pow(dt,3))/2 + P22*dt + P12);
 80021a6:	4b07      	ldr	r3, [pc, #28]	; (80021c4 <_Z12KalmanFilterf11robot_joint+0x408>)
 80021a8:	ed93 7a00 	vldr	s14, [r3]
 80021ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80021b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80021b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021bc:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80021c0:	e002      	b.n	80021c8 <_Z12KalmanFilterf11robot_joint+0x40c>
 80021c2:	bf00      	nop
 80021c4:	24000030 	.word	0x24000030
 80021c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80021cc:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80021d0:	4bef      	ldr	r3, [pc, #956]	; (8002590 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80021d2:	edd3 7a00 	vldr	s15, [r3]
 80021d6:	2004      	movs	r0, #4
 80021d8:	eeb0 0a67 	vmov.f32	s0, s15
 80021dc:	f001 f9b8 	bl	8003550 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80021e0:	eeb0 7b40 	vmov.f64	d7, d0
 80021e4:	ee29 6b07 	vmul.f64	d6, d9, d7
 80021e8:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80021ec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80021f0:	ee38 6b07 	vadd.f64	d6, d8, d7
 80021f4:	4be6      	ldr	r3, [pc, #920]	; (8002590 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80021f6:	ed93 7a00 	vldr	s14, [r3]
 80021fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80021fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002202:	edd7 7a06 	vldr	s15, [r7, #24]
 8002206:	ee37 7a27 	vadd.f32	s14, s14, s15
 800220a:	4be1      	ldr	r3, [pc, #900]	; (8002590 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 800220c:	edd3 7a00 	vldr	s15, [r3]
 8002210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002214:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002218:	ee36 8b07 	vadd.f64	d8, d6, d7
 800221c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002220:	edd7 7a02 	vldr	s15, [r7, #8]
 8002224:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002228:	4bd9      	ldr	r3, [pc, #868]	; (8002590 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 800222a:	edd3 6a00 	vldr	s13, [r3]
 800222e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002232:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002236:	ee77 7a27 	vadd.f32	s15, s14, s15
 800223a:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800223e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002242:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8002246:	4bd2      	ldr	r3, [pc, #840]	; (8002590 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002248:	edd3 7a00 	vldr	s15, [r3]
 800224c:	2004      	movs	r0, #4
 800224e:	eeb0 0a67 	vmov.f32	s0, s15
 8002252:	f001 f97d 	bl	8003550 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002256:	eeb0 7b40 	vmov.f64	d7, d0
 800225a:	ee2a 6b07 	vmul.f64	d6, d10, d7
 800225e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8002262:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002266:	ee39 6b07 	vadd.f64	d6, d9, d7
 800226a:	4bc9      	ldr	r3, [pc, #804]	; (8002590 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 800226c:	ed93 7a00 	vldr	s14, [r3]
 8002270:	edd7 7a04 	vldr	s15, [r7, #16]
 8002274:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002278:	edd7 7a06 	vldr	s15, [r7, #24]
 800227c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002280:	4bc3      	ldr	r3, [pc, #780]	; (8002590 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002282:	edd3 7a00 	vldr	s15, [r3]
 8002286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800228a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800228e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002292:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8002296:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800229a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800229e:	eeb1 8b47 	vneg.f64	d8, d7
 80022a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80022a6:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80022aa:	4bb9      	ldr	r3, [pc, #740]	; (8002590 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80022ac:	edd3 7a00 	vldr	s15, [r3]
 80022b0:	2003      	movs	r0, #3
 80022b2:	eeb0 0a67 	vmov.f32	s0, s15
 80022b6:	f001 f94b 	bl	8003550 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80022ba:	eeb0 7b40 	vmov.f64	d7, d0
 80022be:	ee29 7b07 	vmul.f64	d7, d9, d7
 80022c2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80022c6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80022ca:	4bb1      	ldr	r3, [pc, #708]	; (8002590 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80022cc:	ed93 7a00 	vldr	s14, [r3]
 80022d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80022d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022dc:	ee36 6b07 	vadd.f64	d6, d6, d7
 80022e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80022e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022e8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80022ec:	ee28 7b07 	vmul.f64	d7, d8, d7
 80022f0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80022f4:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
	joint.p21 = P21 + P22*dt + (Q*pow(dt,3))/2 - (((Q*pow(dt,3))/2 + P22*dt + P21)*(P11 + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt)))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt));
 80022f8:	4ba5      	ldr	r3, [pc, #660]	; (8002590 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80022fa:	ed93 7a00 	vldr	s14, [r3]
 80022fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8002302:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002306:	edd7 7a05 	vldr	s15, [r7, #20]
 800230a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800230e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002312:	edd7 7a03 	vldr	s15, [r7, #12]
 8002316:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800231a:	4b9d      	ldr	r3, [pc, #628]	; (8002590 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 800231c:	edd3 7a00 	vldr	s15, [r3]
 8002320:	2003      	movs	r0, #3
 8002322:	eeb0 0a67 	vmov.f32	s0, s15
 8002326:	f001 f913 	bl	8003550 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800232a:	eeb0 7b40 	vmov.f64	d7, d0
 800232e:	ee29 6b07 	vmul.f64	d6, d9, d7
 8002332:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8002336:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800233a:	ee38 8b07 	vadd.f64	d8, d8, d7
 800233e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002342:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002346:	4b92      	ldr	r3, [pc, #584]	; (8002590 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002348:	edd3 7a00 	vldr	s15, [r3]
 800234c:	2003      	movs	r0, #3
 800234e:	eeb0 0a67 	vmov.f32	s0, s15
 8002352:	f001 f8fd 	bl	8003550 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002356:	eeb0 7b40 	vmov.f64	d7, d0
 800235a:	ee29 7b07 	vmul.f64	d7, d9, d7
 800235e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8002362:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002366:	4b8a      	ldr	r3, [pc, #552]	; (8002590 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002368:	ed93 7a00 	vldr	s14, [r3]
 800236c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002374:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002378:	ee36 6b07 	vadd.f64	d6, d6, d7
 800237c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002380:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002384:	ee36 9b07 	vadd.f64	d9, d6, d7
 8002388:	4b81      	ldr	r3, [pc, #516]	; (8002590 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 800238a:	ed93 7a00 	vldr	s14, [r3]
 800238e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002392:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002396:	edd7 7a07 	vldr	s15, [r7, #28]
 800239a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800239e:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80023a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80023a6:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80023aa:	4b79      	ldr	r3, [pc, #484]	; (8002590 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80023ac:	edd3 7a00 	vldr	s15, [r3]
 80023b0:	2004      	movs	r0, #4
 80023b2:	eeb0 0a67 	vmov.f32	s0, s15
 80023b6:	f001 f8cb 	bl	8003550 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80023ba:	eeb0 7b40 	vmov.f64	d7, d0
 80023be:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80023c2:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80023c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80023ca:	ee3a 6b07 	vadd.f64	d6, d10, d7
 80023ce:	4b70      	ldr	r3, [pc, #448]	; (8002590 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80023d0:	ed93 7a00 	vldr	s14, [r3]
 80023d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80023d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80023e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023e4:	4b6a      	ldr	r3, [pc, #424]	; (8002590 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80023e6:	edd3 7a00 	vldr	s15, [r3]
 80023ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80023f2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80023f6:	ee29 9b07 	vmul.f64	d9, d9, d7
 80023fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80023fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8002402:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002406:	4b62      	ldr	r3, [pc, #392]	; (8002590 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002408:	edd3 6a00 	vldr	s13, [r3]
 800240c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002410:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002414:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002418:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800241c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002420:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8002424:	4b5a      	ldr	r3, [pc, #360]	; (8002590 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002426:	edd3 7a00 	vldr	s15, [r3]
 800242a:	2004      	movs	r0, #4
 800242c:	eeb0 0a67 	vmov.f32	s0, s15
 8002430:	f001 f88e 	bl	8003550 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002434:	eeb0 7b40 	vmov.f64	d7, d0
 8002438:	ee2b 6b07 	vmul.f64	d6, d11, d7
 800243c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8002440:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002444:	ee3a 6b07 	vadd.f64	d6, d10, d7
 8002448:	4b51      	ldr	r3, [pc, #324]	; (8002590 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 800244a:	ed93 7a00 	vldr	s14, [r3]
 800244e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002452:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002456:	edd7 7a06 	vldr	s15, [r7, #24]
 800245a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800245e:	4b4c      	ldr	r3, [pc, #304]	; (8002590 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002460:	edd3 7a00 	vldr	s15, [r3]
 8002464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002468:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800246c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002470:	ee89 7b06 	vdiv.f64	d7, d9, d6
 8002474:	ee38 7b47 	vsub.f64	d7, d8, d7
 8002478:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800247c:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
	joint.p22 = P22 + Q*pow(dt,2) - (((Q*pow(dt,3))/2 + P22*dt + P12)*((Q*pow(dt,3))/2 + P22*dt + P21))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt));
 8002480:	edd7 7a04 	vldr	s15, [r7, #16]
 8002484:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002488:	edd7 7a03 	vldr	s15, [r7, #12]
 800248c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002490:	4b3f      	ldr	r3, [pc, #252]	; (8002590 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002492:	edd3 7a00 	vldr	s15, [r3]
 8002496:	2002      	movs	r0, #2
 8002498:	eeb0 0a67 	vmov.f32	s0, s15
 800249c:	f001 f858 	bl	8003550 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80024a0:	eeb0 7b40 	vmov.f64	d7, d0
 80024a4:	ee29 7b07 	vmul.f64	d7, d9, d7
 80024a8:	ee38 8b07 	vadd.f64	d8, d8, d7
 80024ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80024b0:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80024b4:	4b36      	ldr	r3, [pc, #216]	; (8002590 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80024b6:	edd3 7a00 	vldr	s15, [r3]
 80024ba:	2003      	movs	r0, #3
 80024bc:	eeb0 0a67 	vmov.f32	s0, s15
 80024c0:	f001 f846 	bl	8003550 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80024c4:	eeb0 7b40 	vmov.f64	d7, d0
 80024c8:	ee29 7b07 	vmul.f64	d7, d9, d7
 80024cc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80024d0:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80024d4:	4b2e      	ldr	r3, [pc, #184]	; (8002590 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80024d6:	ed93 7a00 	vldr	s14, [r3]
 80024da:	edd7 7a04 	vldr	s15, [r7, #16]
 80024de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024e6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80024ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80024ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024f2:	ee36 9b07 	vadd.f64	d9, d6, d7
 80024f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80024fa:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80024fe:	4b24      	ldr	r3, [pc, #144]	; (8002590 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002500:	edd3 7a00 	vldr	s15, [r3]
 8002504:	2003      	movs	r0, #3
 8002506:	eeb0 0a67 	vmov.f32	s0, s15
 800250a:	f001 f821 	bl	8003550 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800250e:	eeb0 7b40 	vmov.f64	d7, d0
 8002512:	ee2a 7b07 	vmul.f64	d7, d10, d7
 8002516:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800251a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800251e:	4b1c      	ldr	r3, [pc, #112]	; (8002590 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002520:	ed93 7a00 	vldr	s14, [r3]
 8002524:	edd7 7a04 	vldr	s15, [r7, #16]
 8002528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800252c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002530:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002534:	edd7 7a05 	vldr	s15, [r7, #20]
 8002538:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800253c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002540:	ee29 9b07 	vmul.f64	d9, d9, d7
 8002544:	ed97 7a07 	vldr	s14, [r7, #28]
 8002548:	edd7 7a02 	vldr	s15, [r7, #8]
 800254c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002550:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002552:	edd3 6a00 	vldr	s13, [r3]
 8002556:	edd7 7a05 	vldr	s15, [r7, #20]
 800255a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800255e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002562:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8002566:	edd7 7a03 	vldr	s15, [r7, #12]
 800256a:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 800256e:	4b08      	ldr	r3, [pc, #32]	; (8002590 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002570:	edd3 7a00 	vldr	s15, [r3]
 8002574:	2004      	movs	r0, #4
 8002576:	eeb0 0a67 	vmov.f32	s0, s15
 800257a:	f000 ffe9 	bl	8003550 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800257e:	eeb0 7b40 	vmov.f64	d7, d0
 8002582:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8002586:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800258a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800258e:	e001      	b.n	8002594 <_Z12KalmanFilterf11robot_joint+0x7d8>
 8002590:	24000030 	.word	0x24000030
 8002594:	ee3a 6b07 	vadd.f64	d6, d10, d7
 8002598:	4b16      	ldr	r3, [pc, #88]	; (80025f4 <_Z12KalmanFilterf11robot_joint+0x838>)
 800259a:	ed93 7a00 	vldr	s14, [r3]
 800259e:	edd7 7a04 	vldr	s15, [r7, #16]
 80025a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80025aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025ae:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <_Z12KalmanFilterf11robot_joint+0x838>)
 80025b0:	edd3 7a00 	vldr	s15, [r3]
 80025b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025bc:	ee36 6b07 	vadd.f64	d6, d6, d7
 80025c0:	ee89 7b06 	vdiv.f64	d7, d9, d6
 80025c4:	ee38 7b47 	vsub.f64	d7, d8, d7
 80025c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80025cc:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
//	joint.p11 = (R*(4*p11 + 4*dt*p12 + 4*dt*p21 + Q*dt4 + 4*dt2*p22))/(4*R + 4*p11 + 4*dt*p12 + 4*dt*p21 + Q*dt4 + 4*dt2*p22);
//	joint.p12 = (2*R*(Q*dt3 + 2*p22*dt + 2*p12))/(4*R + 4*p11 + 4*dt*p12 + 4*dt*p21 + Q*dt4 + 4*dt2*p22);
//	joint.p21 = (2*R*(Q*dt3 + 2*p22*dt + 2*p21))/(4*R + 4*p11 + 4*dt*p12 + 4*dt*p21 + Q*dt4 + 4*dt2*p22);
//	joint.p22 = p22 + Q*dt2 - (((Q*dt3)/2 + p22*dt + p12)*((Q*dt3)/2 + p22*dt + p21))/(R + p11 + dt*p21 + (Q*dt4)/4 + dt*(p12 + dt*p22));

	return  joint;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80025d8:	2284      	movs	r2, #132	; 0x84
 80025da:	4619      	mov	r1, r3
 80025dc:	f00d f932 	bl	800f844 <memcpy>

}
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	3728      	adds	r7, #40	; 0x28
 80025e4:	46bd      	mov	sp, r7
 80025e6:	ecbd 8b08 	vpop	{d8-d11}
 80025ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80025ee:	b004      	add	sp, #16
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	24000030 	.word	0x24000030

080025f8 <_Z7find_IKffff>:

joint_config find_IK(float gripper_linear_x, float gripper_linear_y, float gripper_linear_z, float gripper_angular_yaw)
{
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b09b      	sub	sp, #108	; 0x6c
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	ed87 0a07 	vstr	s0, [r7, #28]
 8002602:	edc7 0a06 	vstr	s1, [r7, #24]
 8002606:	ed87 1a05 	vstr	s2, [r7, #20]
 800260a:	edc7 1a04 	vstr	s3, [r7, #16]
	bug1 = gripper_linear_x*gripper_linear_x;
 800260e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002612:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002616:	4b74      	ldr	r3, [pc, #464]	; (80027e8 <_Z7find_IKffff+0x1f0>)
 8002618:	edc3 7a00 	vstr	s15, [r3]
	bug2 = gripper_linear_y*gripper_linear_y;
 800261c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002620:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002624:	4b71      	ldr	r3, [pc, #452]	; (80027ec <_Z7find_IKffff+0x1f4>)
 8002626:	edc3 7a00 	vstr	s15, [r3]
	bug3 = L12*L12;
 800262a:	4b71      	ldr	r3, [pc, #452]	; (80027f0 <_Z7find_IKffff+0x1f8>)
 800262c:	ed93 7a00 	vldr	s14, [r3]
 8002630:	4b6f      	ldr	r3, [pc, #444]	; (80027f0 <_Z7find_IKffff+0x1f8>)
 8002632:	edd3 7a00 	vldr	s15, [r3]
 8002636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800263a:	4b6e      	ldr	r3, [pc, #440]	; (80027f4 <_Z7find_IKffff+0x1fc>)
 800263c:	edc3 7a00 	vstr	s15, [r3]
	bug4 = L3*L3 ;
 8002640:	4b6d      	ldr	r3, [pc, #436]	; (80027f8 <_Z7find_IKffff+0x200>)
 8002642:	ed93 7a00 	vldr	s14, [r3]
 8002646:	4b6c      	ldr	r3, [pc, #432]	; (80027f8 <_Z7find_IKffff+0x200>)
 8002648:	edd3 7a00 	vldr	s15, [r3]
 800264c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002650:	4b6a      	ldr	r3, [pc, #424]	; (80027fc <_Z7find_IKffff+0x204>)
 8002652:	edc3 7a00 	vstr	s15, [r3]
	float C3 = ((gripper_linear_x*gripper_linear_x)+(gripper_linear_y*gripper_linear_y)-(L12*L12)-(L3*L3)) / (2*L12*L3);
 8002656:	edd7 7a07 	vldr	s15, [r7, #28]
 800265a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800265e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002662:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002666:	ee37 7a27 	vadd.f32	s14, s14, s15
 800266a:	4b61      	ldr	r3, [pc, #388]	; (80027f0 <_Z7find_IKffff+0x1f8>)
 800266c:	edd3 6a00 	vldr	s13, [r3]
 8002670:	4b5f      	ldr	r3, [pc, #380]	; (80027f0 <_Z7find_IKffff+0x1f8>)
 8002672:	edd3 7a00 	vldr	s15, [r3]
 8002676:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800267a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800267e:	4b5e      	ldr	r3, [pc, #376]	; (80027f8 <_Z7find_IKffff+0x200>)
 8002680:	edd3 6a00 	vldr	s13, [r3]
 8002684:	4b5c      	ldr	r3, [pc, #368]	; (80027f8 <_Z7find_IKffff+0x200>)
 8002686:	edd3 7a00 	vldr	s15, [r3]
 800268a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800268e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002692:	4b57      	ldr	r3, [pc, #348]	; (80027f0 <_Z7find_IKffff+0x1f8>)
 8002694:	edd3 7a00 	vldr	s15, [r3]
 8002698:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800269c:	4b56      	ldr	r3, [pc, #344]	; (80027f8 <_Z7find_IKffff+0x200>)
 800269e:	edd3 7a00 	vldr	s15, [r3]
 80026a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026aa:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	float S3 = sqrt(1-(C3*C3));
 80026ae:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80026b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026be:	eeb0 0a67 	vmov.f32	s0, s15
 80026c2:	f7fe ffdb 	bl	800167c <_ZSt4sqrtf>
 80026c6:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
	float q3 = atan2(S3,C3);
 80026ca:	edd7 0a19 	vldr	s1, [r7, #100]	; 0x64
 80026ce:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 80026d2:	f7fe ff9f 	bl	8001614 <_ZSt5atan2ff>
 80026d6:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c

	float L3S3 = L3*S3;
 80026da:	4b47      	ldr	r3, [pc, #284]	; (80027f8 <_Z7find_IKffff+0x200>)
 80026dc:	edd3 7a00 	vldr	s15, [r3]
 80026e0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80026e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026e8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	float L123C3 = L12 + (L3*C3);
 80026ec:	4b42      	ldr	r3, [pc, #264]	; (80027f8 <_Z7find_IKffff+0x200>)
 80026ee:	ed93 7a00 	vldr	s14, [r3]
 80026f2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80026f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026fa:	4b3d      	ldr	r3, [pc, #244]	; (80027f0 <_Z7find_IKffff+0x1f8>)
 80026fc:	edd3 7a00 	vldr	s15, [r3]
 8002700:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002704:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	float S1 = (-L3S3*gripper_linear_x) + (L123C3*gripper_linear_y);
 8002708:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800270c:	eeb1 7a67 	vneg.f32	s14, s15
 8002710:	edd7 7a07 	vldr	s15, [r7, #28]
 8002714:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002718:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800271c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002720:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002724:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002728:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	float C1 = (L3S3*gripper_linear_y) + (L123C3*gripper_linear_x);
 800272c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002730:	edd7 7a06 	vldr	s15, [r7, #24]
 8002734:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002738:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800273c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002740:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002744:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002748:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	float q1 = atan2(S1,C1);
 800274c:	edd7 0a13 	vldr	s1, [r7, #76]	; 0x4c
 8002750:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8002754:	f7fe ff5e 	bl	8001614 <_ZSt5atan2ff>
 8002758:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	float q4 = gripper_angular_yaw - q1 - q3;
 800275c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002760:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002764:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002768:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800276c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002770:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	float q2 = gripper_linear_z + H4 - H3 - H1;
 8002774:	4b22      	ldr	r3, [pc, #136]	; (8002800 <_Z7find_IKffff+0x208>)
 8002776:	ed93 7a00 	vldr	s14, [r3]
 800277a:	edd7 7a05 	vldr	s15, [r7, #20]
 800277e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002782:	4b20      	ldr	r3, [pc, #128]	; (8002804 <_Z7find_IKffff+0x20c>)
 8002784:	edd3 7a00 	vldr	s15, [r3]
 8002788:	ee37 7a67 	vsub.f32	s14, s14, s15
 800278c:	4b1e      	ldr	r3, [pc, #120]	; (8002808 <_Z7find_IKffff+0x210>)
 800278e:	edd3 7a00 	vldr	s15, [r3]
 8002792:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002796:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

	joint_config buff;
	buff.q1 = q1;
 800279a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800279c:	623b      	str	r3, [r7, #32]
	buff.q2 = C3;
 800279e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027a0:	627b      	str	r3, [r7, #36]	; 0x24
	buff.q3 = q3;
 80027a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027a4:	62bb      	str	r3, [r7, #40]	; 0x28
	buff.q4 = S3;
 80027a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027a8:	62fb      	str	r3, [r7, #44]	; 0x2c

    return buff;
 80027aa:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80027ae:	f107 0320 	add.w	r3, r7, #32
 80027b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80027b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80027bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027c0:	ee06 0a10 	vmov	s12, r0
 80027c4:	ee06 1a90 	vmov	s13, r1
 80027c8:	ee07 2a10 	vmov	s14, r2
 80027cc:	ee07 3a90 	vmov	s15, r3
}
 80027d0:	eeb0 0a46 	vmov.f32	s0, s12
 80027d4:	eef0 0a66 	vmov.f32	s1, s13
 80027d8:	eeb0 1a47 	vmov.f32	s2, s14
 80027dc:	eef0 1a67 	vmov.f32	s3, s15
 80027e0:	376c      	adds	r7, #108	; 0x6c
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd90      	pop	{r4, r7, pc}
 80027e6:	bf00      	nop
 80027e8:	24000344 	.word	0x24000344
 80027ec:	24000348 	.word	0x24000348
 80027f0:	2400000c 	.word	0x2400000c
 80027f4:	2400034c 	.word	0x2400034c
 80027f8:	24000008 	.word	0x24000008
 80027fc:	24000350 	.word	0x24000350
 8002800:	24000018 	.word	0x24000018
 8002804:	24000014 	.word	0x24000014
 8002808:	24000010 	.word	0x24000010
 800280c:	00000000 	.word	0x00000000

08002810 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002812:	ed2d 8b02 	vpush	{d8}
 8002816:	b0cb      	sub	sp, #300	; 0x12c
 8002818:	af1e      	add	r7, sp, #120	; 0x78
 800281a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

	if (htim == &htim12){	//

	}

	if (htim == &htim5){	//
 800281e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002822:	4a81      	ldr	r2, [pc, #516]	; (8002a28 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002824:	4293      	cmp	r3, r2
 8002826:	f040 8147 	bne.w	8002ab8 <HAL_TIM_PeriodElapsedCallback+0x2a8>


		encoderJ1.AMT21_Read();
 800282a:	4880      	ldr	r0, [pc, #512]	; (8002a2c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800282c:	f7fe f907 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8002830:	487e      	ldr	r0, [pc, #504]	; (8002a2c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002832:	f7fe f933 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 8002836:	4603      	mov	r3, r0
 8002838:	461a      	mov	r2, r3
 800283a:	4b7d      	ldr	r3, [pc, #500]	; (8002a30 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800283c:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 800283e:	4b7c      	ldr	r3, [pc, #496]	; (8002a30 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d106      	bne.n	8002854 <HAL_TIM_PeriodElapsedCallback+0x44>
			fcb_joint1.Encoder = encoderJ1.getAngPos180() ;
 8002846:	4879      	ldr	r0, [pc, #484]	; (8002a2c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002848:	f7fe f98c 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 800284c:	4603      	mov	r3, r0
 800284e:	461a      	mov	r2, r3
 8002850:	4b78      	ldr	r3, [pc, #480]	; (8002a34 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002852:	801a      	strh	r2, [r3, #0]
//			encoderJ2.unwarp();
//			posJ2 = encoderJ2.getUnwarpValue();
//		}


		encoderJ3.AMT21_Read();
 8002854:	4878      	ldr	r0, [pc, #480]	; (8002a38 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002856:	f7fe f8f2 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 800285a:	4877      	ldr	r0, [pc, #476]	; (8002a38 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800285c:	f7fe f91e 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 8002860:	4603      	mov	r3, r0
 8002862:	461a      	mov	r2, r3
 8002864:	4b75      	ldr	r3, [pc, #468]	; (8002a3c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002866:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 8002868:	4b74      	ldr	r3, [pc, #464]	; (8002a3c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d106      	bne.n	800287e <HAL_TIM_PeriodElapsedCallback+0x6e>
			fcb_joint3.Encoder = encoderJ3.getAngPos180() ;
 8002870:	4871      	ldr	r0, [pc, #452]	; (8002a38 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002872:	f7fe f977 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 8002876:	4603      	mov	r3, r0
 8002878:	461a      	mov	r2, r3
 800287a:	4b71      	ldr	r3, [pc, #452]	; (8002a40 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800287c:	801a      	strh	r2, [r3, #0]
//		stepperJ1.StepperSetFrequency(u_q1/num*1.0);
//		stepperJ3.StepperSetFrequency(u_q3/num*1.0);



		Update_ivk(fcb_joint1.Encoder / 2609.0 ,0,fcb_joint3.Encoder / 2609.0,0, dx/1000.0, dy/1000.0, dz/1000.0, dyaw/1000.0);
 800287e:	4b6d      	ldr	r3, [pc, #436]	; (8002a34 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	b21b      	sxth	r3, r3
 8002884:	ee07 3a90 	vmov	s15, r3
 8002888:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800288c:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8002a18 <HAL_TIM_PeriodElapsedCallback+0x208>
 8002890:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002894:	eef7 4bc7 	vcvt.f32.f64	s9, d7
 8002898:	4b69      	ldr	r3, [pc, #420]	; (8002a40 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	b21b      	sxth	r3, r3
 800289e:	ee07 3a90 	vmov	s15, r3
 80028a2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80028a6:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 8002a18 <HAL_TIM_PeriodElapsedCallback+0x208>
 80028aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80028ae:	eeb7 4bc7 	vcvt.f32.f64	s8, d7
 80028b2:	4b64      	ldr	r3, [pc, #400]	; (8002a44 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	b25b      	sxtb	r3, r3
 80028b8:	ee07 3a90 	vmov	s15, r3
 80028bc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80028c0:	ed9f 5b57 	vldr	d5, [pc, #348]	; 8002a20 <HAL_TIM_PeriodElapsedCallback+0x210>
 80028c4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80028c8:	eeb7 2bc7 	vcvt.f32.f64	s4, d7
 80028cc:	4b5e      	ldr	r3, [pc, #376]	; (8002a48 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	b25b      	sxtb	r3, r3
 80028d2:	ee07 3a90 	vmov	s15, r3
 80028d6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80028da:	ed9f 5b51 	vldr	d5, [pc, #324]	; 8002a20 <HAL_TIM_PeriodElapsedCallback+0x210>
 80028de:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80028e2:	eef7 2bc7 	vcvt.f32.f64	s5, d7
 80028e6:	4b59      	ldr	r3, [pc, #356]	; (8002a4c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	b25b      	sxtb	r3, r3
 80028ec:	ee07 3a90 	vmov	s15, r3
 80028f0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80028f4:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8002a20 <HAL_TIM_PeriodElapsedCallback+0x210>
 80028f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80028fc:	eeb7 3bc7 	vcvt.f32.f64	s6, d7
 8002900:	4b53      	ldr	r3, [pc, #332]	; (8002a50 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	b25b      	sxtb	r3, r3
 8002906:	ee07 3a90 	vmov	s15, r3
 800290a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800290e:	ed9f 5b44 	vldr	d5, [pc, #272]	; 8002a20 <HAL_TIM_PeriodElapsedCallback+0x210>
 8002912:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002916:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800291a:	eef0 3a67 	vmov.f32	s7, s15
 800291e:	eddf 1a4d 	vldr	s3, [pc, #308]	; 8002a54 <HAL_TIM_PeriodElapsedCallback+0x244>
 8002922:	eeb0 1a44 	vmov.f32	s2, s8
 8002926:	eddf 0a4b 	vldr	s1, [pc, #300]	; 8002a54 <HAL_TIM_PeriodElapsedCallback+0x244>
 800292a:	eeb0 0a64 	vmov.f32	s0, s9
 800292e:	f7ff f953 	bl	8001bd8 <_Z10Update_ivkffffffff>
//
//		stepperJ2.StepperOpenLoopSpeed(-1.0 * w_q1);
//		stepperJ3.StepperOpenLoopSpeed(w_q3);

		int i;
				for (i = 1 ; i<num ; i++)
 8002932:	2301      	movs	r3, #1
 8002934:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002938:	4b47      	ldr	r3, [pc, #284]	; (8002a58 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002940:	429a      	cmp	r2, r3
 8002942:	da1f      	bge.n	8002984 <HAL_TIM_PeriodElapsedCallback+0x174>
				{
					box_q1[i-1] = box_q1[i];
 8002944:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002948:	3b01      	subs	r3, #1
 800294a:	4944      	ldr	r1, [pc, #272]	; (8002a5c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800294c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002950:	0092      	lsls	r2, r2, #2
 8002952:	440a      	add	r2, r1
 8002954:	6812      	ldr	r2, [r2, #0]
 8002956:	4941      	ldr	r1, [pc, #260]	; (8002a5c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	440b      	add	r3, r1
 800295c:	601a      	str	r2, [r3, #0]
					box_q3[i-1] = box_q3[i];
 800295e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002962:	3b01      	subs	r3, #1
 8002964:	493e      	ldr	r1, [pc, #248]	; (8002a60 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002966:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800296a:	0092      	lsls	r2, r2, #2
 800296c:	440a      	add	r2, r1
 800296e:	6812      	ldr	r2, [r2, #0]
 8002970:	493b      	ldr	r1, [pc, #236]	; (8002a60 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	601a      	str	r2, [r3, #0]
				for (i = 1 ; i<num ; i++)
 8002978:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800297c:	3301      	adds	r3, #1
 800297e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002982:	e7d9      	b.n	8002938 <HAL_TIM_PeriodElapsedCallback+0x128>
				}
				 box_q1[num-1] = w_q1;
 8002984:	4b34      	ldr	r3, [pc, #208]	; (8002a58 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	3b01      	subs	r3, #1
 800298a:	4a36      	ldr	r2, [pc, #216]	; (8002a64 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800298c:	6812      	ldr	r2, [r2, #0]
 800298e:	4933      	ldr	r1, [pc, #204]	; (8002a5c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	440b      	add	r3, r1
 8002994:	601a      	str	r2, [r3, #0]
				 box_q3[num-1] = w_q3;
 8002996:	4b30      	ldr	r3, [pc, #192]	; (8002a58 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	3b01      	subs	r3, #1
 800299c:	4a32      	ldr	r2, [pc, #200]	; (8002a68 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800299e:	6812      	ldr	r2, [r2, #0]
 80029a0:	492f      	ldr	r1, [pc, #188]	; (8002a60 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	601a      	str	r2, [r3, #0]

				u_q1 = 0.0;
 80029a8:	4b30      	ldr	r3, [pc, #192]	; (8002a6c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
				u_q3 = 0.0;
 80029b0:	4b2f      	ldr	r3, [pc, #188]	; (8002a70 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80029b2:	f04f 0200 	mov.w	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]

				for(i = 0; i < num; i++)
 80029b8:	2300      	movs	r3, #0
 80029ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80029be:	4b26      	ldr	r3, [pc, #152]	; (8002a58 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80029c6:	429a      	cmp	r2, r3
 80029c8:	da54      	bge.n	8002a74 <HAL_TIM_PeriodElapsedCallback+0x264>
				{
					u_q1 += box_q1[i];
 80029ca:	4a24      	ldr	r2, [pc, #144]	; (8002a5c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80029cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	ed93 7a00 	vldr	s14, [r3]
 80029d8:	4b24      	ldr	r3, [pc, #144]	; (8002a6c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80029da:	edd3 7a00 	vldr	s15, [r3]
 80029de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029e2:	4b22      	ldr	r3, [pc, #136]	; (8002a6c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80029e4:	edc3 7a00 	vstr	s15, [r3]
					u_q3 += box_q3[i];
 80029e8:	4a1d      	ldr	r2, [pc, #116]	; (8002a60 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80029ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	ed93 7a00 	vldr	s14, [r3]
 80029f6:	4b1e      	ldr	r3, [pc, #120]	; (8002a70 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80029f8:	edd3 7a00 	vldr	s15, [r3]
 80029fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a00:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8002a02:	edc3 7a00 	vstr	s15, [r3]
				for(i = 0; i < num; i++)
 8002a06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a10:	e7d5      	b.n	80029be <HAL_TIM_PeriodElapsedCallback+0x1ae>
 8002a12:	bf00      	nop
 8002a14:	f3af 8000 	nop.w
 8002a18:	00000000 	.word	0x00000000
 8002a1c:	40a46200 	.word	0x40a46200
 8002a20:	00000000 	.word	0x00000000
 8002a24:	408f4000 	.word	0x408f4000
 8002a28:	2400078c 	.word	0x2400078c
 8002a2c:	2400026c 	.word	0x2400026c
 8002a30:	2400031c 	.word	0x2400031c
 8002a34:	2400042c 	.word	0x2400042c
 8002a38:	24000288 	.word	0x24000288
 8002a3c:	2400031d 	.word	0x2400031d
 8002a40:	24000534 	.word	0x24000534
 8002a44:	24000238 	.word	0x24000238
 8002a48:	24000239 	.word	0x24000239
 8002a4c:	2400023a 	.word	0x2400023a
 8002a50:	2400023b 	.word	0x2400023b
 8002a54:	00000000 	.word	0x00000000
 8002a58:	24000034 	.word	0x24000034
 8002a5c:	24000384 	.word	0x24000384
 8002a60:	240003d4 	.word	0x240003d4
 8002a64:	2400036c 	.word	0x2400036c
 8002a68:	24000374 	.word	0x24000374
 8002a6c:	2400037c 	.word	0x2400037c
 8002a70:	24000380 	.word	0x24000380
				}
				stepperJ1.StepperOpenLoopSpeed(u_q1/num*-1.0);
 8002a74:	4b78      	ldr	r3, [pc, #480]	; (8002c58 <HAL_TIM_PeriodElapsedCallback+0x448>)
 8002a76:	edd3 6a00 	vldr	s13, [r3]
 8002a7a:	4b78      	ldr	r3, [pc, #480]	; (8002c5c <HAL_TIM_PeriodElapsedCallback+0x44c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	ee07 3a90 	vmov	s15, r3
 8002a82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a8a:	eef1 7a67 	vneg.f32	s15, s15
 8002a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a92:	4873      	ldr	r0, [pc, #460]	; (8002c60 <HAL_TIM_PeriodElapsedCallback+0x450>)
 8002a94:	f7fe fbbc 	bl	8001210 <_ZN7Stepper20StepperOpenLoopSpeedEf>
				stepperJ3.StepperOpenLoopSpeed(u_q3/num*1.0);
 8002a98:	4b72      	ldr	r3, [pc, #456]	; (8002c64 <HAL_TIM_PeriodElapsedCallback+0x454>)
 8002a9a:	ed93 7a00 	vldr	s14, [r3]
 8002a9e:	4b6f      	ldr	r3, [pc, #444]	; (8002c5c <HAL_TIM_PeriodElapsedCallback+0x44c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	ee07 3a90 	vmov	s15, r3
 8002aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aaa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002aae:	eeb0 0a66 	vmov.f32	s0, s13
 8002ab2:	486d      	ldr	r0, [pc, #436]	; (8002c68 <HAL_TIM_PeriodElapsedCallback+0x458>)
 8002ab4:	f7fe fbac 	bl	8001210 <_ZN7Stepper20StepperOpenLoopSpeedEf>


	}
	if (htim == &htim7) { 	//
 8002ab8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002abc:	4a6b      	ldr	r2, [pc, #428]	; (8002c6c <HAL_TIM_PeriodElapsedCallback+0x45c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	f040 82fd 	bne.w	80030be <HAL_TIM_PeriodElapsedCallback+0x8ae>
//			fcb_joint3.Encoder = encoderJ3.getAngPos180() ;
//		}



	    float t_2 = t*t;
 8002ac4:	4b6a      	ldr	r3, [pc, #424]	; (8002c70 <HAL_TIM_PeriodElapsedCallback+0x460>)
 8002ac6:	ed93 7a00 	vldr	s14, [r3]
 8002aca:	4b69      	ldr	r3, [pc, #420]	; (8002c70 <HAL_TIM_PeriodElapsedCallback+0x460>)
 8002acc:	edd3 7a00 	vldr	s15, [r3]
 8002ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ad4:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	    float t_3 = t*t*t;
 8002ad8:	4b65      	ldr	r3, [pc, #404]	; (8002c70 <HAL_TIM_PeriodElapsedCallback+0x460>)
 8002ada:	ed93 7a00 	vldr	s14, [r3]
 8002ade:	4b64      	ldr	r3, [pc, #400]	; (8002c70 <HAL_TIM_PeriodElapsedCallback+0x460>)
 8002ae0:	edd3 7a00 	vldr	s15, [r3]
 8002ae4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ae8:	4b61      	ldr	r3, [pc, #388]	; (8002c70 <HAL_TIM_PeriodElapsedCallback+0x460>)
 8002aea:	edd3 7a00 	vldr	s15, [r3]
 8002aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002af2:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4

	    fcb_joint3.Goal_Position =  C0_q1 + (C2_q1*t_2) - (C3_q1*t_3);
 8002af6:	4b5f      	ldr	r3, [pc, #380]	; (8002c74 <HAL_TIM_PeriodElapsedCallback+0x464>)
 8002af8:	ed93 7a00 	vldr	s14, [r3]
 8002afc:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002b00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b04:	4b5c      	ldr	r3, [pc, #368]	; (8002c78 <HAL_TIM_PeriodElapsedCallback+0x468>)
 8002b06:	edd3 7a00 	vldr	s15, [r3]
 8002b0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b0e:	4b5b      	ldr	r3, [pc, #364]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8002b10:	edd3 6a00 	vldr	s13, [r3]
 8002b14:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002b18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b20:	4b57      	ldr	r3, [pc, #348]	; (8002c80 <HAL_TIM_PeriodElapsedCallback+0x470>)
 8002b22:	edc3 7a01 	vstr	s15, [r3, #4]

//	    kalman_pos = fcb_joint1.Goal_Position;
	    kalman_pos = (fcb_joint1.Old_p - fcb_joint1.Encoder);
 8002b26:	4b57      	ldr	r3, [pc, #348]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8002b28:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8002b2c:	4b55      	ldr	r3, [pc, #340]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	b21b      	sxth	r3, r3
 8002b32:	ee07 3a90 	vmov	s15, r3
 8002b36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b3e:	4b52      	ldr	r3, [pc, #328]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8002b40:	edc3 7a00 	vstr	s15, [r3]

	    kalman_velo_input =  kalman_pos ;
 8002b44:	4b50      	ldr	r3, [pc, #320]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a50      	ldr	r2, [pc, #320]	; (8002c8c <HAL_TIM_PeriodElapsedCallback+0x47c>)
 8002b4a:	6013      	str	r3, [r2, #0]

	    if (direction_traj == 1){
 8002b4c:	4b50      	ldr	r3, [pc, #320]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0x480>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	bf0c      	ite	eq
 8002b54:	2301      	moveq	r3, #1
 8002b56:	2300      	movne	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 809c 	beq.w	8002c98 <HAL_TIM_PeriodElapsedCallback+0x488>
	    	fcb_joint1.Goal_Position = unwrap_pose + (C0_q1 + (C2_q1*t_2) - (C3_q1*t_3)) - 0.8 ;
 8002b60:	4b44      	ldr	r3, [pc, #272]	; (8002c74 <HAL_TIM_PeriodElapsedCallback+0x464>)
 8002b62:	ed93 7a00 	vldr	s14, [r3]
 8002b66:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002b6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b6e:	4b42      	ldr	r3, [pc, #264]	; (8002c78 <HAL_TIM_PeriodElapsedCallback+0x468>)
 8002b70:	edd3 7a00 	vldr	s15, [r3]
 8002b74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b78:	4b40      	ldr	r3, [pc, #256]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8002b7a:	edd3 6a00 	vldr	s13, [r3]
 8002b7e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002b82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b8a:	4b42      	ldr	r3, [pc, #264]	; (8002c94 <HAL_TIM_PeriodElapsedCallback+0x484>)
 8002b8c:	edd3 7a00 	vldr	s15, [r3]
 8002b90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b98:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8002c50 <HAL_TIM_PeriodElapsedCallback+0x440>
 8002b9c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002ba0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002ba4:	4b37      	ldr	r3, [pc, #220]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8002ba6:	edc3 7a01 	vstr	s15, [r3, #4]
	    	fcb_joint1.Goal_Velocity = ((2.0*C2_q1*t) - (3.0 * C3_q1*t_2)) * -2 ;
 8002baa:	4b32      	ldr	r3, [pc, #200]	; (8002c74 <HAL_TIM_PeriodElapsedCallback+0x464>)
 8002bac:	edd3 7a00 	vldr	s15, [r3]
 8002bb0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002bb4:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002bb8:	4b2d      	ldr	r3, [pc, #180]	; (8002c70 <HAL_TIM_PeriodElapsedCallback+0x460>)
 8002bba:	edd3 7a00 	vldr	s15, [r3]
 8002bbe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002bc2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002bc6:	4b2d      	ldr	r3, [pc, #180]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8002bc8:	edd3 7a00 	vldr	s15, [r3]
 8002bcc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002bd0:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8002bd4:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002bd8:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002bdc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002be0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002be4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002be8:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8002bec:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002bf0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002bf4:	4b23      	ldr	r3, [pc, #140]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8002bf6:	edc3 7a02 	vstr	s15, [r3, #8]
	    	fcb_joint3.Goal_Velocity = ((2.0*C2_q1*t) - (3.0 * C3_q1*t_2)) * -2 ;
 8002bfa:	4b1e      	ldr	r3, [pc, #120]	; (8002c74 <HAL_TIM_PeriodElapsedCallback+0x464>)
 8002bfc:	edd3 7a00 	vldr	s15, [r3]
 8002c00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c04:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002c08:	4b19      	ldr	r3, [pc, #100]	; (8002c70 <HAL_TIM_PeriodElapsedCallback+0x460>)
 8002c0a:	edd3 7a00 	vldr	s15, [r3]
 8002c0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c12:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002c16:	4b19      	ldr	r3, [pc, #100]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8002c18:	edd3 7a00 	vldr	s15, [r3]
 8002c1c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c20:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8002c24:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002c28:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002c2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c30:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002c34:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002c38:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8002c3c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002c40:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002c44:	4b0e      	ldr	r3, [pc, #56]	; (8002c80 <HAL_TIM_PeriodElapsedCallback+0x470>)
 8002c46:	edc3 7a02 	vstr	s15, [r3, #8]
 8002c4a:	e096      	b.n	8002d7a <HAL_TIM_PeriodElapsedCallback+0x56a>
 8002c4c:	f3af 8000 	nop.w
 8002c50:	9999999a 	.word	0x9999999a
 8002c54:	3fe99999 	.word	0x3fe99999
 8002c58:	2400037c 	.word	0x2400037c
 8002c5c:	24000034 	.word	0x24000034
 8002c60:	240002a4 	.word	0x240002a4
 8002c64:	24000380 	.word	0x24000380
 8002c68:	240002f4 	.word	0x240002f4
 8002c6c:	240009ec 	.word	0x240009ec
 8002c70:	24000330 	.word	0x24000330
 8002c74:	24000334 	.word	0x24000334
 8002c78:	24000020 	.word	0x24000020
 8002c7c:	24000338 	.word	0x24000338
 8002c80:	24000534 	.word	0x24000534
 8002c84:	2400042c 	.word	0x2400042c
 8002c88:	24000354 	.word	0x24000354
 8002c8c:	24000364 	.word	0x24000364
 8002c90:	24000320 	.word	0x24000320
 8002c94:	24000368 	.word	0x24000368
	    }
	    else
	    {
	    	fcb_joint1.Goal_Position = unwrap_pose - (C0_q1 + (C2_q1*t_2) - (C3_q1*t_3)) + 0.8;
 8002c98:	4bd3      	ldr	r3, [pc, #844]	; (8002fe8 <HAL_TIM_PeriodElapsedCallback+0x7d8>)
 8002c9a:	ed93 7a00 	vldr	s14, [r3]
 8002c9e:	4bd3      	ldr	r3, [pc, #844]	; (8002fec <HAL_TIM_PeriodElapsedCallback+0x7dc>)
 8002ca0:	edd3 6a00 	vldr	s13, [r3]
 8002ca4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002ca8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002cac:	4bd0      	ldr	r3, [pc, #832]	; (8002ff0 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 8002cae:	edd3 7a00 	vldr	s15, [r3]
 8002cb2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002cb6:	4bcf      	ldr	r3, [pc, #828]	; (8002ff4 <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8002cb8:	ed93 6a00 	vldr	s12, [r3]
 8002cbc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002cc0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002cc4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002cc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ccc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cd0:	ed9f 6bbb 	vldr	d6, [pc, #748]	; 8002fc0 <HAL_TIM_PeriodElapsedCallback+0x7b0>
 8002cd4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002cd8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002cdc:	4bc6      	ldr	r3, [pc, #792]	; (8002ff8 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8002cde:	edc3 7a01 	vstr	s15, [r3, #4]
	    	fcb_joint1.Goal_Velocity = ((2.0*C2_q1*t) - (3.0 * C3_q1*t_2)) * 2 ;
 8002ce2:	4bc2      	ldr	r3, [pc, #776]	; (8002fec <HAL_TIM_PeriodElapsedCallback+0x7dc>)
 8002ce4:	edd3 7a00 	vldr	s15, [r3]
 8002ce8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cec:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002cf0:	4bc2      	ldr	r3, [pc, #776]	; (8002ffc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8002cf2:	edd3 7a00 	vldr	s15, [r3]
 8002cf6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cfa:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002cfe:	4bbd      	ldr	r3, [pc, #756]	; (8002ff4 <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8002d00:	edd3 7a00 	vldr	s15, [r3]
 8002d04:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d08:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8002d0c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002d10:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002d14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d18:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002d1c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002d20:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002d24:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d28:	4bb3      	ldr	r3, [pc, #716]	; (8002ff8 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8002d2a:	edc3 7a02 	vstr	s15, [r3, #8]
	    	fcb_joint3.Goal_Velocity = ((2.0*C2_q1*t) - (3.0 * C3_q1*t_2)) * 2 ;
 8002d2e:	4baf      	ldr	r3, [pc, #700]	; (8002fec <HAL_TIM_PeriodElapsedCallback+0x7dc>)
 8002d30:	edd3 7a00 	vldr	s15, [r3]
 8002d34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d38:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002d3c:	4baf      	ldr	r3, [pc, #700]	; (8002ffc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8002d3e:	edd3 7a00 	vldr	s15, [r3]
 8002d42:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d46:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002d4a:	4baa      	ldr	r3, [pc, #680]	; (8002ff4 <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 8002d4c:	edd3 7a00 	vldr	s15, [r3]
 8002d50:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d54:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8002d58:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002d5c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002d60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d64:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002d68:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002d6c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002d70:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d74:	4ba2      	ldr	r3, [pc, #648]	; (8003000 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8002d76:	edc3 7a02 	vstr	s15, [r3, #8]


//		fcb_joint1.Goal_Velocity = sin(0.314 * 2 * t) * 2000;
//		fcb_joint3.Goal_Velocity = sin(0.314 * 2 * t) * 4000;

	    chess_board_ang = chessboard_angular_velocity * t;
 8002d7a:	4ba2      	ldr	r3, [pc, #648]	; (8003004 <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 8002d7c:	ed93 7a00 	vldr	s14, [r3]
 8002d80:	4b9e      	ldr	r3, [pc, #632]	; (8002ffc <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 8002d82:	edd3 7a00 	vldr	s15, [r3]
 8002d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d8a:	4b9f      	ldr	r3, [pc, #636]	; (8003008 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8002d8c:	edc3 7a00 	vstr	s15, [r3]

		joint_config findchessbot_joint_state;
		debug_pos_x = 0.247*cos(chess_board_ang)+0.42744;
 8002d90:	4b9d      	ldr	r3, [pc, #628]	; (8003008 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8002d92:	edd3 7a00 	vldr	s15, [r3]
 8002d96:	eeb0 0a67 	vmov.f32	s0, s15
 8002d9a:	f7fe fc4f 	bl	800163c <_ZSt3cosf>
 8002d9e:	eef0 7a40 	vmov.f32	s15, s0
 8002da2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002da6:	ed9f 6b88 	vldr	d6, [pc, #544]	; 8002fc8 <HAL_TIM_PeriodElapsedCallback+0x7b8>
 8002daa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002dae:	ed9f 6b88 	vldr	d6, [pc, #544]	; 8002fd0 <HAL_TIM_PeriodElapsedCallback+0x7c0>
 8002db2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002db6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002dba:	4b94      	ldr	r3, [pc, #592]	; (800300c <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8002dbc:	edc3 7a00 	vstr	s15, [r3]
		debug_pos_y = 0.247*sin(chess_board_ang)+0.00059371;
 8002dc0:	4b91      	ldr	r3, [pc, #580]	; (8003008 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8002dc2:	edd3 7a00 	vldr	s15, [r3]
 8002dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8002dca:	f7fe fc47 	bl	800165c <_ZSt3sinf>
 8002dce:	eef0 7a40 	vmov.f32	s15, s0
 8002dd2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002dd6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8002fc8 <HAL_TIM_PeriodElapsedCallback+0x7b8>
 8002dda:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002dde:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8002fd8 <HAL_TIM_PeriodElapsedCallback+0x7c8>
 8002de2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002de6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002dea:	4b89      	ldr	r3, [pc, #548]	; (8003010 <HAL_TIM_PeriodElapsedCallback+0x800>)
 8002dec:	edc3 7a00 	vstr	s15, [r3]
		idx = 0.247*cos(chess_board_ang) * chessboard_angular_velocity;
 8002df0:	4b85      	ldr	r3, [pc, #532]	; (8003008 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8002df2:	edd3 7a00 	vldr	s15, [r3]
 8002df6:	eeb0 0a67 	vmov.f32	s0, s15
 8002dfa:	f7fe fc1f 	bl	800163c <_ZSt3cosf>
 8002dfe:	eef0 7a40 	vmov.f32	s15, s0
 8002e02:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e06:	ed9f 6b70 	vldr	d6, [pc, #448]	; 8002fc8 <HAL_TIM_PeriodElapsedCallback+0x7b8>
 8002e0a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002e0e:	4b7d      	ldr	r3, [pc, #500]	; (8003004 <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 8002e10:	edd3 7a00 	vldr	s15, [r3]
 8002e14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e18:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002e1c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002e20:	4b7c      	ldr	r3, [pc, #496]	; (8003014 <HAL_TIM_PeriodElapsedCallback+0x804>)
 8002e22:	edc3 7a00 	vstr	s15, [r3]
		idy = 0.247*cos(chess_board_ang) * chessboard_angular_velocity;
 8002e26:	4b78      	ldr	r3, [pc, #480]	; (8003008 <HAL_TIM_PeriodElapsedCallback+0x7f8>)
 8002e28:	edd3 7a00 	vldr	s15, [r3]
 8002e2c:	eeb0 0a67 	vmov.f32	s0, s15
 8002e30:	f7fe fc04 	bl	800163c <_ZSt3cosf>
 8002e34:	eef0 7a40 	vmov.f32	s15, s0
 8002e38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e3c:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8002fc8 <HAL_TIM_PeriodElapsedCallback+0x7b8>
 8002e40:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002e44:	4b6f      	ldr	r3, [pc, #444]	; (8003004 <HAL_TIM_PeriodElapsedCallback+0x7f4>)
 8002e46:	edd3 7a00 	vldr	s15, [r3]
 8002e4a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e4e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002e52:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002e56:	4b70      	ldr	r3, [pc, #448]	; (8003018 <HAL_TIM_PeriodElapsedCallback+0x808>)
 8002e58:	edc3 7a00 	vstr	s15, [r3]
		findchessbot_joint_state = find_IK(
				debug_pos_x,
				debug_pos_y,
				0,
				0);
 8002e5c:	4b6b      	ldr	r3, [pc, #428]	; (800300c <HAL_TIM_PeriodElapsedCallback+0x7fc>)
 8002e5e:	edd3 7a00 	vldr	s15, [r3]
 8002e62:	4b6b      	ldr	r3, [pc, #428]	; (8003010 <HAL_TIM_PeriodElapsedCallback+0x800>)
 8002e64:	ed93 7a00 	vldr	s14, [r3]
 8002e68:	eddf 1a6c 	vldr	s3, [pc, #432]	; 800301c <HAL_TIM_PeriodElapsedCallback+0x80c>
 8002e6c:	ed9f 1a6b 	vldr	s2, [pc, #428]	; 800301c <HAL_TIM_PeriodElapsedCallback+0x80c>
 8002e70:	eef0 0a47 	vmov.f32	s1, s14
 8002e74:	eeb0 0a67 	vmov.f32	s0, s15
 8002e78:	f7ff fbbe 	bl	80025f8 <_Z7find_IKffff>
 8002e7c:	eeb0 6a40 	vmov.f32	s12, s0
 8002e80:	eef0 6a60 	vmov.f32	s13, s1
 8002e84:	eeb0 7a41 	vmov.f32	s14, s2
 8002e88:	eef0 7a61 	vmov.f32	s15, s3
 8002e8c:	ed87 6a25 	vstr	s12, [r7, #148]	; 0x94
 8002e90:	edc7 6a26 	vstr	s13, [r7, #152]	; 0x98
 8002e94:	ed87 7a27 	vstr	s14, [r7, #156]	; 0x9c
 8002e98:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0

//		setpointJ1 = Goal_velocity_q1;
//		setpointJ3 = Goal_velocity_q3;


		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.Encoder;
 8002e9c:	4b56      	ldr	r3, [pc, #344]	; (8002ff8 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8002e9e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ea2:	4b55      	ldr	r3, [pc, #340]	; (8002ff8 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8002ea4:	881b      	ldrh	r3, [r3, #0]
 8002ea6:	b21b      	sxth	r3, r3
 8002ea8:	ee07 3a90 	vmov	s15, r3
 8002eac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002eb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eb4:	4b50      	ldr	r3, [pc, #320]	; (8002ff8 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8002eb6:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.Encoder;
 8002eba:	4b51      	ldr	r3, [pc, #324]	; (8003000 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8002ebc:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ec0:	4b4f      	ldr	r3, [pc, #316]	; (8003000 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	b21b      	sxth	r3, r3
 8002ec6:	ee07 3a90 	vmov	s15, r3
 8002eca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ece:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ed2:	4b4b      	ldr	r3, [pc, #300]	; (8003000 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8002ed4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
 8002ed8:	4b47      	ldr	r3, [pc, #284]	; (8002ff8 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8002eda:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002ede:	4b46      	ldr	r3, [pc, #280]	; (8002ff8 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8002ee0:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002ee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ee8:	4b43      	ldr	r3, [pc, #268]	; (8002ff8 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8002eea:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;
 8002eee:	4b44      	ldr	r3, [pc, #272]	; (8003000 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8002ef0:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002ef4:	4b42      	ldr	r3, [pc, #264]	; (8003000 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8002ef6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002efa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002efe:	4b40      	ldr	r3, [pc, #256]	; (8003000 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8002f00:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

		fcb_joint1.Kp_p = 0.0 ;
 8002f04:	4b3c      	ldr	r3, [pc, #240]	; (8002ff8 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	61da      	str	r2, [r3, #28]
		fcb_joint1.Ki_p = 0.0 ;
 8002f0c:	4b3a      	ldr	r3, [pc, #232]	; (8002ff8 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8002f0e:	f04f 0200 	mov.w	r2, #0
 8002f12:	621a      	str	r2, [r3, #32]
		fcb_joint1.Kd_p = 0.0 ;
 8002f14:	4b38      	ldr	r3, [pc, #224]	; (8002ff8 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	625a      	str	r2, [r3, #36]	; 0x24

		fcb_joint1.Kp_v = 0.0 ;
 8002f1c:	4b36      	ldr	r3, [pc, #216]	; (8002ff8 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	629a      	str	r2, [r3, #40]	; 0x28
		fcb_joint1.Ki_v = 0.0 ;
 8002f24:	4b34      	ldr	r3, [pc, #208]	; (8002ff8 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8002f26:	f04f 0200 	mov.w	r2, #0
 8002f2a:	62da      	str	r2, [r3, #44]	; 0x2c
		fcb_joint1.Kd_v = 0.0 ;
 8002f2c:	4b32      	ldr	r3, [pc, #200]	; (8002ff8 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	631a      	str	r2, [r3, #48]	; 0x30

		fcb_joint3.Kp_p = 0.0 ;
 8002f34:	4b32      	ldr	r3, [pc, #200]	; (8003000 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	61da      	str	r2, [r3, #28]
		fcb_joint3.Ki_p = 0.0 ;
 8002f3c:	4b30      	ldr	r3, [pc, #192]	; (8003000 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	621a      	str	r2, [r3, #32]
		fcb_joint3.Kd_p = 0.0 ;
 8002f44:	4b2e      	ldr	r3, [pc, #184]	; (8003000 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	625a      	str	r2, [r3, #36]	; 0x24

		fcb_joint3.Kp_v = 0.0 ;
 8002f4c:	4b2c      	ldr	r3, [pc, #176]	; (8003000 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	629a      	str	r2, [r3, #40]	; 0x28
		fcb_joint3.Ki_v = 0.0 ;
 8002f54:	4b2a      	ldr	r3, [pc, #168]	; (8003000 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	62da      	str	r2, [r3, #44]	; 0x2c
		fcb_joint3.Kd_v = 0.0 ;
 8002f5c:	4b28      	ldr	r3, [pc, #160]	; (8003000 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8002f5e:	f04f 0200 	mov.w	r2, #0
 8002f62:	631a      	str	r2, [r3, #48]	; 0x30

//		KalmanFilter(float theta_k,float kalman_pos,float kalman_velo,float P11,float P12,float P21,float P22);
//		KalmanFilter(fcb_joint1.Encoder/ 2609.0 , X11, X21, p11, p12, p21, p22, fcb_joint1);

		fcb_joint1 = KalmanFilter(fcb_joint1.Encoder/ 2609.0 ,fcb_joint1);
 8002f64:	4b24      	ldr	r3, [pc, #144]	; (8002ff8 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8002f66:	881b      	ldrh	r3, [r3, #0]
 8002f68:	b21b      	sxth	r3, r3
 8002f6a:	ee07 3a90 	vmov	s15, r3
 8002f6e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002f72:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 8002fe0 <HAL_TIM_PeriodElapsedCallback+0x7d0>
 8002f76:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002f7a:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
 8002f7e:	4e1e      	ldr	r6, [pc, #120]	; (8002ff8 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8002f80:	463d      	mov	r5, r7
 8002f82:	4c1d      	ldr	r4, [pc, #116]	; (8002ff8 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8002f84:	4668      	mov	r0, sp
 8002f86:	f104 030c 	add.w	r3, r4, #12
 8002f8a:	2278      	movs	r2, #120	; 0x78
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	f00c fc59 	bl	800f844 <memcpy>
 8002f92:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002f96:	eeb0 0a48 	vmov.f32	s0, s16
 8002f9a:	4628      	mov	r0, r5
 8002f9c:	f7fe ff0e 	bl	8001dbc <_Z12KalmanFilterf11robot_joint>
 8002fa0:	4630      	mov	r0, r6
 8002fa2:	463b      	mov	r3, r7
 8002fa4:	2284      	movs	r2, #132	; 0x84
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	f00c fc4c 	bl	800f844 <memcpy>
//		fcb_joint1.Output_Stepper_Frequency = fcb_joint1.Goal_Position;
//		fcb_joint3.Output_Stepper_Frequency = fcb_joint3.Goal_Position;



		fcb_joint1.Old_Error_p = fcb_joint1.Error_p;
 8002fac:	4b12      	ldr	r3, [pc, #72]	; (8002ff8 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8002fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb0:	4a11      	ldr	r2, [pc, #68]	; (8002ff8 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 8002fb2:	6393      	str	r3, [r2, #56]	; 0x38
		fcb_joint3.Old_Error_p = fcb_joint3.Error_p;
 8002fb4:	4b12      	ldr	r3, [pc, #72]	; (8003000 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8002fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb8:	4a11      	ldr	r2, [pc, #68]	; (8003000 <HAL_TIM_PeriodElapsedCallback+0x7f0>)
 8002fba:	6393      	str	r3, [r2, #56]	; 0x38
 8002fbc:	e030      	b.n	8003020 <HAL_TIM_PeriodElapsedCallback+0x810>
 8002fbe:	bf00      	nop
 8002fc0:	9999999a 	.word	0x9999999a
 8002fc4:	3fe99999 	.word	0x3fe99999
 8002fc8:	2d0e5604 	.word	0x2d0e5604
 8002fcc:	3fcf9db2 	.word	0x3fcf9db2
 8002fd0:	4d4024b3 	.word	0x4d4024b3
 8002fd4:	3fdb5b2d 	.word	0x3fdb5b2d
 8002fd8:	84437119 	.word	0x84437119
 8002fdc:	3f437466 	.word	0x3f437466
 8002fe0:	00000000 	.word	0x00000000
 8002fe4:	40a46200 	.word	0x40a46200
 8002fe8:	24000368 	.word	0x24000368
 8002fec:	24000334 	.word	0x24000334
 8002ff0:	24000020 	.word	0x24000020
 8002ff4:	24000338 	.word	0x24000338
 8002ff8:	2400042c 	.word	0x2400042c
 8002ffc:	24000330 	.word	0x24000330
 8003000:	24000534 	.word	0x24000534
 8003004:	2400002c 	.word	0x2400002c
 8003008:	24000324 	.word	0x24000324
 800300c:	24000328 	.word	0x24000328
 8003010:	2400032c 	.word	0x2400032c
 8003014:	24000424 	.word	0x24000424
 8003018:	24000428 	.word	0x24000428
 800301c:	00000000 	.word	0x00000000
		fcb_joint1.Old_p = fcb_joint1.Encoder;
 8003020:	4b2a      	ldr	r3, [pc, #168]	; (80030cc <HAL_TIM_PeriodElapsedCallback+0x8bc>)
 8003022:	881b      	ldrh	r3, [r3, #0]
 8003024:	b21b      	sxth	r3, r3
 8003026:	ee07 3a90 	vmov	s15, r3
 800302a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800302e:	4b27      	ldr	r3, [pc, #156]	; (80030cc <HAL_TIM_PeriodElapsedCallback+0x8bc>)
 8003030:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint3.Old_p = fcb_joint3.Encoder;
 8003034:	4b26      	ldr	r3, [pc, #152]	; (80030d0 <HAL_TIM_PeriodElapsedCallback+0x8c0>)
 8003036:	881b      	ldrh	r3, [r3, #0]
 8003038:	b21b      	sxth	r3, r3
 800303a:	ee07 3a90 	vmov	s15, r3
 800303e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003042:	4b23      	ldr	r3, [pc, #140]	; (80030d0 <HAL_TIM_PeriodElapsedCallback+0x8c0>)
 8003044:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
//		stepperJ1.StepperSetFrequency(300.0f);

//		stepperJ1.StepperSetFrequency(uJ1);
//		stepperJ3.StepperSetFrequency(0.0f);

		stepperJ2.StepperOpenLoopSpeed(-1.0 * fcb_joint1.Goal_Velocity);
 8003048:	4b20      	ldr	r3, [pc, #128]	; (80030cc <HAL_TIM_PeriodElapsedCallback+0x8bc>)
 800304a:	edd3 7a02 	vldr	s15, [r3, #8]
 800304e:	eef1 7a67 	vneg.f32	s15, s15
 8003052:	eeb0 0a67 	vmov.f32	s0, s15
 8003056:	481f      	ldr	r0, [pc, #124]	; (80030d4 <HAL_TIM_PeriodElapsedCallback+0x8c4>)
 8003058:	f7fe f8da 	bl	8001210 <_ZN7Stepper20StepperOpenLoopSpeedEf>
		stepperJ3.StepperOpenLoopSpeed(fcb_joint3.Goal_Velocity);
 800305c:	4b1c      	ldr	r3, [pc, #112]	; (80030d0 <HAL_TIM_PeriodElapsedCallback+0x8c0>)
 800305e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003062:	eeb0 0a67 	vmov.f32	s0, s15
 8003066:	481c      	ldr	r0, [pc, #112]	; (80030d8 <HAL_TIM_PeriodElapsedCallback+0x8c8>)
 8003068:	f7fe f8d2 	bl	8001210 <_ZN7Stepper20StepperOpenLoopSpeedEf>
//		stepperJ1.StepperOpenLoopSpeed(w_q1);
//		stepperJ3.StepperOpenLoopSpeed(w_q3);

		#endif

		t = t + (sample_time_1000) ;
 800306c:	4b1b      	ldr	r3, [pc, #108]	; (80030dc <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 800306e:	ed93 7a00 	vldr	s14, [r3]
 8003072:	4b1b      	ldr	r3, [pc, #108]	; (80030e0 <HAL_TIM_PeriodElapsedCallback+0x8d0>)
 8003074:	edd3 7a00 	vldr	s15, [r3]
 8003078:	ee77 7a27 	vadd.f32	s15, s14, s15
 800307c:	4b17      	ldr	r3, [pc, #92]	; (80030dc <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 800307e:	edc3 7a00 	vstr	s15, [r3]
		if (t >= Time)
 8003082:	4b16      	ldr	r3, [pc, #88]	; (80030dc <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 8003084:	ed93 7a00 	vldr	s14, [r3]
 8003088:	4b16      	ldr	r3, [pc, #88]	; (80030e4 <HAL_TIM_PeriodElapsedCallback+0x8d4>)
 800308a:	edd3 7a00 	vldr	s15, [r3]
 800308e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003096:	bfac      	ite	ge
 8003098:	2301      	movge	r3, #1
 800309a:	2300      	movlt	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00d      	beq.n	80030be <HAL_TIM_PeriodElapsedCallback+0x8ae>
		{
			t = 0.0;
 80030a2:	4b0e      	ldr	r3, [pc, #56]	; (80030dc <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 80030a4:	f04f 0200 	mov.w	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]
			direction_traj ^= 1;
 80030aa:	4b0f      	ldr	r3, [pc, #60]	; (80030e8 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f083 0301 	eor.w	r3, r3, #1
 80030b2:	4a0d      	ldr	r2, [pc, #52]	; (80030e8 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 80030b4:	6013      	str	r3, [r2, #0]
			unwrap_pose =  fcb_joint1.Goal_Position;
 80030b6:	4b05      	ldr	r3, [pc, #20]	; (80030cc <HAL_TIM_PeriodElapsedCallback+0x8bc>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	4a0c      	ldr	r2, [pc, #48]	; (80030ec <HAL_TIM_PeriodElapsedCallback+0x8dc>)
 80030bc:	6013      	str	r3, [r2, #0]
//					direction_traj ^= 1;
//					unwrap_pose =  fcb_joint1.Goal_Position;
//				}

	}
}
 80030be:	bf00      	nop
 80030c0:	37b4      	adds	r7, #180	; 0xb4
 80030c2:	46bd      	mov	sp, r7
 80030c4:	ecbd 8b02 	vpop	{d8}
 80030c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030ca:	bf00      	nop
 80030cc:	2400042c 	.word	0x2400042c
 80030d0:	24000534 	.word	0x24000534
 80030d4:	240002cc 	.word	0x240002cc
 80030d8:	240002f4 	.word	0x240002f4
 80030dc:	24000330 	.word	0x24000330
 80030e0:	24000028 	.word	0x24000028
 80030e4:	2400001c 	.word	0x2400001c
 80030e8:	24000320 	.word	0x24000320
 80030ec:	24000368 	.word	0x24000368

080030f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80030f4:	f001 ffd4 	bl	80050a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030f8:	f000 f970 	bl	80033dc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030fc:	f7fe f954 	bl	80013a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003100:	f7fe f912 	bl	8001328 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8003104:	f001 fd20 	bl	8004b48 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8003108:	f000 ff24 	bl	8003f54 <MX_TIM2_Init>
  MX_UART4_Init();
 800310c:	f001 fc7a 	bl	8004a04 <MX_UART4_Init>
  MX_TIM4_Init();
 8003110:	f001 f810 	bl	8004134 <MX_TIM4_Init>
  MX_SPI3_Init();
 8003114:	f000 fb72 	bl	80037fc <MX_SPI3_Init>
  MX_TIM1_Init();
 8003118:	f000 fe6e 	bl	8003df8 <MX_TIM1_Init>
  MX_TIM3_Init();
 800311c:	f000 ff92 	bl	8004044 <MX_TIM3_Init>
  MX_TIM5_Init();
 8003120:	f001 f880 	bl	8004224 <MX_TIM5_Init>
  MX_TIM15_Init();
 8003124:	f001 f9ba 	bl	800449c <MX_TIM15_Init>
  MX_CRC_Init();
 8003128:	f7fe f8ae 	bl	8001288 <MX_CRC_Init>
  MX_UART7_Init();
 800312c:	f001 fcbe 	bl	8004aac <MX_UART7_Init>
  MX_TIM6_Init();
 8003130:	f001 f8c6 	bl	80042c0 <MX_TIM6_Init>
  MX_TIM7_Init();
 8003134:	f001 f8fa 	bl	800432c <MX_TIM7_Init>
  MX_TIM12_Init();
 8003138:	f001 f92e 	bl	8004398 <MX_TIM12_Init>
  MX_TIM13_Init();
 800313c:	f001 f966 	bl	800440c <MX_TIM13_Init>
  MX_TIM14_Init();
 8003140:	f001 f988 	bl	8004454 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8003144:	2201      	movs	r2, #1
 8003146:	2101      	movs	r1, #1
 8003148:	4885      	ldr	r0, [pc, #532]	; (8003360 <main+0x270>)
 800314a:	f005 fb4b 	bl	80087e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800314e:	2201      	movs	r2, #1
 8003150:	2102      	movs	r1, #2
 8003152:	4884      	ldr	r0, [pc, #528]	; (8003364 <main+0x274>)
 8003154:	f005 fb46 	bl	80087e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8003158:	2200      	movs	r2, #0
 800315a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800315e:	4880      	ldr	r0, [pc, #512]	; (8003360 <main+0x270>)
 8003160:	f005 fb40 	bl	80087e4 <HAL_GPIO_WritePin>

#ifdef __cplusplus
	stepperJ1.StepperSetFrequency(0.0f);
 8003164:	ed9f 0a80 	vldr	s0, [pc, #512]	; 8003368 <main+0x278>
 8003168:	4880      	ldr	r0, [pc, #512]	; (800336c <main+0x27c>)
 800316a:	f7fd fd9d 	bl	8000ca8 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ1.StepperSetMicrostep(4);
 800316e:	2104      	movs	r1, #4
 8003170:	487e      	ldr	r0, [pc, #504]	; (800336c <main+0x27c>)
 8003172:	f7fe f835 	bl	80011e0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ1.StepperSetRatio(42);
 8003176:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8003370 <main+0x280>
 800317a:	487c      	ldr	r0, [pc, #496]	; (800336c <main+0x27c>)
 800317c:	f7fe f80c 	bl	8001198 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ1.StepperEnable();
 8003180:	487a      	ldr	r0, [pc, #488]	; (800336c <main+0x27c>)
 8003182:	f7fd fd80 	bl	8000c86 <_ZN7Stepper13StepperEnableEv>

	stepperJ2.StepperSetFrequency(0.0f);
 8003186:	ed9f 0a78 	vldr	s0, [pc, #480]	; 8003368 <main+0x278>
 800318a:	487a      	ldr	r0, [pc, #488]	; (8003374 <main+0x284>)
 800318c:	f7fd fd8c 	bl	8000ca8 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ2.StepperSetMicrostep(4);
 8003190:	2104      	movs	r1, #4
 8003192:	4878      	ldr	r0, [pc, #480]	; (8003374 <main+0x284>)
 8003194:	f7fe f824 	bl	80011e0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ2.StepperSetRatio(42);
 8003198:	ed9f 0a75 	vldr	s0, [pc, #468]	; 8003370 <main+0x280>
 800319c:	4875      	ldr	r0, [pc, #468]	; (8003374 <main+0x284>)
 800319e:	f7fd fffb 	bl	8001198 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ2.StepperEnable();
 80031a2:	4874      	ldr	r0, [pc, #464]	; (8003374 <main+0x284>)
 80031a4:	f7fd fd6f 	bl	8000c86 <_ZN7Stepper13StepperEnableEv>

	stepperJ3.StepperSetFrequency(0.0f);
 80031a8:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8003368 <main+0x278>
 80031ac:	4872      	ldr	r0, [pc, #456]	; (8003378 <main+0x288>)
 80031ae:	f7fd fd7b 	bl	8000ca8 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetMicrostep(8);
 80031b2:	2108      	movs	r1, #8
 80031b4:	4870      	ldr	r0, [pc, #448]	; (8003378 <main+0x288>)
 80031b6:	f7fe f813 	bl	80011e0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ3.StepperSetRatio(9);
 80031ba:	eeb2 0a02 	vmov.f32	s0, #34	; 0x41100000  9.0
 80031be:	486e      	ldr	r0, [pc, #440]	; (8003378 <main+0x288>)
 80031c0:	f7fd ffea 	bl	8001198 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ3.StepperEnable();
 80031c4:	486c      	ldr	r0, [pc, #432]	; (8003378 <main+0x288>)
 80031c6:	f7fd fd5e 	bl	8000c86 <_ZN7Stepper13StepperEnableEv>

//	stepperJ4.StepperSetMicrostep(1);
//	stepperJ4.StepperSetRatio(1);
#endif

	HAL_TIM_Base_Start_IT(&htim5);
 80031ca:	486c      	ldr	r0, [pc, #432]	; (800337c <main+0x28c>)
 80031cc:	f008 f80a 	bl	800b1e4 <HAL_TIM_Base_Start_IT>
//	HAL_TIM_Base_Start_IT(&htim7);
//	HAL_TIM_Base_Start_IT(&htim12);
//	HAL_TIM_Base_Start_IT(&htim14);


	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer, Rx_BUFFER_SIZE);
 80031d0:	2214      	movs	r2, #20
 80031d2:	496b      	ldr	r1, [pc, #428]	; (8003380 <main+0x290>)
 80031d4:	486b      	ldr	r0, [pc, #428]	; (8003384 <main+0x294>)
 80031d6:	f00b fbac 	bl	800e932 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80031da:	4b6b      	ldr	r3, [pc, #428]	; (8003388 <main+0x298>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a6b      	ldr	r2, [pc, #428]	; (800338c <main+0x29c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d04a      	beq.n	800327a <main+0x18a>
 80031e4:	4b68      	ldr	r3, [pc, #416]	; (8003388 <main+0x298>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a69      	ldr	r2, [pc, #420]	; (8003390 <main+0x2a0>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d045      	beq.n	800327a <main+0x18a>
 80031ee:	4b66      	ldr	r3, [pc, #408]	; (8003388 <main+0x298>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a68      	ldr	r2, [pc, #416]	; (8003394 <main+0x2a4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d040      	beq.n	800327a <main+0x18a>
 80031f8:	4b63      	ldr	r3, [pc, #396]	; (8003388 <main+0x298>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a66      	ldr	r2, [pc, #408]	; (8003398 <main+0x2a8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d03b      	beq.n	800327a <main+0x18a>
 8003202:	4b61      	ldr	r3, [pc, #388]	; (8003388 <main+0x298>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a65      	ldr	r2, [pc, #404]	; (800339c <main+0x2ac>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d036      	beq.n	800327a <main+0x18a>
 800320c:	4b5e      	ldr	r3, [pc, #376]	; (8003388 <main+0x298>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a63      	ldr	r2, [pc, #396]	; (80033a0 <main+0x2b0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d031      	beq.n	800327a <main+0x18a>
 8003216:	4b5c      	ldr	r3, [pc, #368]	; (8003388 <main+0x298>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a62      	ldr	r2, [pc, #392]	; (80033a4 <main+0x2b4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d02c      	beq.n	800327a <main+0x18a>
 8003220:	4b59      	ldr	r3, [pc, #356]	; (8003388 <main+0x298>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a60      	ldr	r2, [pc, #384]	; (80033a8 <main+0x2b8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d027      	beq.n	800327a <main+0x18a>
 800322a:	4b57      	ldr	r3, [pc, #348]	; (8003388 <main+0x298>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a5f      	ldr	r2, [pc, #380]	; (80033ac <main+0x2bc>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d022      	beq.n	800327a <main+0x18a>
 8003234:	4b54      	ldr	r3, [pc, #336]	; (8003388 <main+0x298>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a5d      	ldr	r2, [pc, #372]	; (80033b0 <main+0x2c0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d01d      	beq.n	800327a <main+0x18a>
 800323e:	4b52      	ldr	r3, [pc, #328]	; (8003388 <main+0x298>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a5c      	ldr	r2, [pc, #368]	; (80033b4 <main+0x2c4>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d018      	beq.n	800327a <main+0x18a>
 8003248:	4b4f      	ldr	r3, [pc, #316]	; (8003388 <main+0x298>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a5a      	ldr	r2, [pc, #360]	; (80033b8 <main+0x2c8>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d013      	beq.n	800327a <main+0x18a>
 8003252:	4b4d      	ldr	r3, [pc, #308]	; (8003388 <main+0x298>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a59      	ldr	r2, [pc, #356]	; (80033bc <main+0x2cc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d00e      	beq.n	800327a <main+0x18a>
 800325c:	4b4a      	ldr	r3, [pc, #296]	; (8003388 <main+0x298>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a57      	ldr	r2, [pc, #348]	; (80033c0 <main+0x2d0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d009      	beq.n	800327a <main+0x18a>
 8003266:	4b48      	ldr	r3, [pc, #288]	; (8003388 <main+0x298>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a56      	ldr	r2, [pc, #344]	; (80033c4 <main+0x2d4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d004      	beq.n	800327a <main+0x18a>
 8003270:	4b45      	ldr	r3, [pc, #276]	; (8003388 <main+0x298>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a54      	ldr	r2, [pc, #336]	; (80033c8 <main+0x2d8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d108      	bne.n	800328c <main+0x19c>
 800327a:	4b43      	ldr	r3, [pc, #268]	; (8003388 <main+0x298>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	4b41      	ldr	r3, [pc, #260]	; (8003388 <main+0x298>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0208 	bic.w	r2, r2, #8
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	e007      	b.n	800329c <main+0x1ac>
 800328c:	4b3e      	ldr	r3, [pc, #248]	; (8003388 <main+0x298>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	4b3d      	ldr	r3, [pc, #244]	; (8003388 <main+0x298>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0204 	bic.w	r2, r2, #4
 800329a:	601a      	str	r2, [r3, #0]
//	stepperJ1.StepperOpenLoopSpeed(1.00f);

	// Backup
	fcb_joint1.Kp_p = 0.0 ;
 800329c:	4b4b      	ldr	r3, [pc, #300]	; (80033cc <main+0x2dc>)
 800329e:	f04f 0200 	mov.w	r2, #0
 80032a2:	61da      	str	r2, [r3, #28]
	fcb_joint1.Kp_v = 0.0 ;
 80032a4:	4b49      	ldr	r3, [pc, #292]	; (80033cc <main+0x2dc>)
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint1.Ki_p = 0.0 ;
 80032ac:	4b47      	ldr	r3, [pc, #284]	; (80033cc <main+0x2dc>)
 80032ae:	f04f 0200 	mov.w	r2, #0
 80032b2:	621a      	str	r2, [r3, #32]
	fcb_joint1.Ki_v = 0.0 ;
 80032b4:	4b45      	ldr	r3, [pc, #276]	; (80033cc <main+0x2dc>)
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint1.Kd_p = 0.0 ;
 80032bc:	4b43      	ldr	r3, [pc, #268]	; (80033cc <main+0x2dc>)
 80032be:	f04f 0200 	mov.w	r2, #0
 80032c2:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint1.Kd_p = 0.0 ;
 80032c4:	4b41      	ldr	r3, [pc, #260]	; (80033cc <main+0x2dc>)
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	625a      	str	r2, [r3, #36]	; 0x24

	fcb_joint2.Kp_p = 0.0 ;
 80032cc:	4b40      	ldr	r3, [pc, #256]	; (80033d0 <main+0x2e0>)
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	61da      	str	r2, [r3, #28]
	fcb_joint2.Kp_v = 0.0 ;
 80032d4:	4b3e      	ldr	r3, [pc, #248]	; (80033d0 <main+0x2e0>)
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint2.Ki_p = 0.0 ;
 80032dc:	4b3c      	ldr	r3, [pc, #240]	; (80033d0 <main+0x2e0>)
 80032de:	f04f 0200 	mov.w	r2, #0
 80032e2:	621a      	str	r2, [r3, #32]
	fcb_joint2.Ki_v = 0.0 ;
 80032e4:	4b3a      	ldr	r3, [pc, #232]	; (80033d0 <main+0x2e0>)
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint2.Kd_p = 0.0 ;
 80032ec:	4b38      	ldr	r3, [pc, #224]	; (80033d0 <main+0x2e0>)
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint2.Kd_p = 0.0 ;
 80032f4:	4b36      	ldr	r3, [pc, #216]	; (80033d0 <main+0x2e0>)
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	625a      	str	r2, [r3, #36]	; 0x24

	fcb_joint3.Kp_p = 0.0 ;
 80032fc:	4b35      	ldr	r3, [pc, #212]	; (80033d4 <main+0x2e4>)
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	61da      	str	r2, [r3, #28]
	fcb_joint3.Kp_v = 0.0 ;
 8003304:	4b33      	ldr	r3, [pc, #204]	; (80033d4 <main+0x2e4>)
 8003306:	f04f 0200 	mov.w	r2, #0
 800330a:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint3.Ki_p = 0.0 ;
 800330c:	4b31      	ldr	r3, [pc, #196]	; (80033d4 <main+0x2e4>)
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	621a      	str	r2, [r3, #32]
	fcb_joint3.Ki_v = 0.0 ;
 8003314:	4b2f      	ldr	r3, [pc, #188]	; (80033d4 <main+0x2e4>)
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint3.Kd_p = 0.0 ;
 800331c:	4b2d      	ldr	r3, [pc, #180]	; (80033d4 <main+0x2e4>)
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint3.Kd_p = 0.0 ;
 8003324:	4b2b      	ldr	r3, [pc, #172]	; (80033d4 <main+0x2e4>)
 8003326:	f04f 0200 	mov.w	r2, #0
 800332a:	625a      	str	r2, [r3, #36]	; 0x24

	fcb_joint4.Kp_p = 0.0 ;
 800332c:	4b2a      	ldr	r3, [pc, #168]	; (80033d8 <main+0x2e8>)
 800332e:	f04f 0200 	mov.w	r2, #0
 8003332:	61da      	str	r2, [r3, #28]
	fcb_joint4.Kp_v = 0.0 ;
 8003334:	4b28      	ldr	r3, [pc, #160]	; (80033d8 <main+0x2e8>)
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint4.Ki_p = 0.0 ;
 800333c:	4b26      	ldr	r3, [pc, #152]	; (80033d8 <main+0x2e8>)
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	621a      	str	r2, [r3, #32]
	fcb_joint4.Ki_v = 0.0 ;
 8003344:	4b24      	ldr	r3, [pc, #144]	; (80033d8 <main+0x2e8>)
 8003346:	f04f 0200 	mov.w	r2, #0
 800334a:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint4.Kd_p = 0.0 ;
 800334c:	4b22      	ldr	r3, [pc, #136]	; (80033d8 <main+0x2e8>)
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint4.Kd_p = 0.0 ;
 8003354:	4b20      	ldr	r3, [pc, #128]	; (80033d8 <main+0x2e8>)
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800335c:	e7fe      	b.n	800335c <main+0x26c>
 800335e:	bf00      	nop
 8003360:	58020400 	.word	0x58020400
 8003364:	58021000 	.word	0x58021000
 8003368:	00000000 	.word	0x00000000
 800336c:	240002a4 	.word	0x240002a4
 8003370:	42280000 	.word	0x42280000
 8003374:	240002cc 	.word	0x240002cc
 8003378:	240002f4 	.word	0x240002f4
 800337c:	2400078c 	.word	0x2400078c
 8003380:	24000254 	.word	0x24000254
 8003384:	24000bb8 	.word	0x24000bb8
 8003388:	24000b40 	.word	0x24000b40
 800338c:	40020010 	.word	0x40020010
 8003390:	40020028 	.word	0x40020028
 8003394:	40020040 	.word	0x40020040
 8003398:	40020058 	.word	0x40020058
 800339c:	40020070 	.word	0x40020070
 80033a0:	40020088 	.word	0x40020088
 80033a4:	400200a0 	.word	0x400200a0
 80033a8:	400200b8 	.word	0x400200b8
 80033ac:	40020410 	.word	0x40020410
 80033b0:	40020428 	.word	0x40020428
 80033b4:	40020440 	.word	0x40020440
 80033b8:	40020458 	.word	0x40020458
 80033bc:	40020470 	.word	0x40020470
 80033c0:	40020488 	.word	0x40020488
 80033c4:	400204a0 	.word	0x400204a0
 80033c8:	400204b8 	.word	0x400204b8
 80033cc:	2400042c 	.word	0x2400042c
 80033d0:	240004b0 	.word	0x240004b0
 80033d4:	24000534 	.word	0x24000534
 80033d8:	240005b8 	.word	0x240005b8

080033dc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b09c      	sub	sp, #112	; 0x70
 80033e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033e6:	224c      	movs	r2, #76	; 0x4c
 80033e8:	2100      	movs	r1, #0
 80033ea:	4618      	mov	r0, r3
 80033ec:	f00c fa38 	bl	800f860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033f0:	1d3b      	adds	r3, r7, #4
 80033f2:	2220      	movs	r2, #32
 80033f4:	2100      	movs	r1, #0
 80033f6:	4618      	mov	r0, r3
 80033f8:	f00c fa32 	bl	800f860 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80033fc:	2002      	movs	r0, #2
 80033fe:	f005 fa25 	bl	800884c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003402:	2300      	movs	r3, #0
 8003404:	603b      	str	r3, [r7, #0]
 8003406:	4b38      	ldr	r3, [pc, #224]	; (80034e8 <_Z18SystemClock_Configv+0x10c>)
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	4a37      	ldr	r2, [pc, #220]	; (80034e8 <_Z18SystemClock_Configv+0x10c>)
 800340c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003410:	6193      	str	r3, [r2, #24]
 8003412:	4b35      	ldr	r3, [pc, #212]	; (80034e8 <_Z18SystemClock_Configv+0x10c>)
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800341a:	603b      	str	r3, [r7, #0]
 800341c:	4b33      	ldr	r3, [pc, #204]	; (80034ec <_Z18SystemClock_Configv+0x110>)
 800341e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003420:	4a32      	ldr	r2, [pc, #200]	; (80034ec <_Z18SystemClock_Configv+0x110>)
 8003422:	f043 0301 	orr.w	r3, r3, #1
 8003426:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003428:	4b30      	ldr	r3, [pc, #192]	; (80034ec <_Z18SystemClock_Configv+0x110>)
 800342a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	603b      	str	r3, [r7, #0]
 8003432:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003434:	4b2c      	ldr	r3, [pc, #176]	; (80034e8 <_Z18SystemClock_Configv+0x10c>)
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800343c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003440:	bf14      	ite	ne
 8003442:	2301      	movne	r3, #1
 8003444:	2300      	moveq	r3, #0
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d000      	beq.n	800344e <_Z18SystemClock_Configv+0x72>
 800344c:	e7f2      	b.n	8003434 <_Z18SystemClock_Configv+0x58>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800344e:	2302      	movs	r3, #2
 8003450:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8003452:	2301      	movs	r3, #1
 8003454:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003456:	2340      	movs	r3, #64	; 0x40
 8003458:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800345a:	2302      	movs	r3, #2
 800345c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800345e:	2300      	movs	r3, #0
 8003460:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003462:	2304      	movs	r3, #4
 8003464:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8003466:	233c      	movs	r3, #60	; 0x3c
 8003468:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800346a:	2302      	movs	r3, #2
 800346c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800346e:	2306      	movs	r3, #6
 8003470:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003472:	2302      	movs	r3, #2
 8003474:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003476:	230c      	movs	r3, #12
 8003478:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800347a:	2300      	movs	r3, #0
 800347c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800347e:	2300      	movs	r3, #0
 8003480:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003486:	4618      	mov	r0, r3
 8003488:	f005 fa1a 	bl	80088c0 <HAL_RCC_OscConfig>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	bf14      	ite	ne
 8003492:	2301      	movne	r3, #1
 8003494:	2300      	moveq	r3, #0
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 800349c:	f000 f83e 	bl	800351c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034a0:	233f      	movs	r3, #63	; 0x3f
 80034a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034a4:	2303      	movs	r3, #3
 80034a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80034a8:	2300      	movs	r3, #0
 80034aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80034ac:	2308      	movs	r3, #8
 80034ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80034b0:	2340      	movs	r3, #64	; 0x40
 80034b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80034b4:	2340      	movs	r3, #64	; 0x40
 80034b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80034b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80034be:	2340      	movs	r3, #64	; 0x40
 80034c0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80034c2:	1d3b      	adds	r3, r7, #4
 80034c4:	2104      	movs	r1, #4
 80034c6:	4618      	mov	r0, r3
 80034c8:	f005 fe26 	bl	8009118 <HAL_RCC_ClockConfig>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	bf14      	ite	ne
 80034d2:	2301      	movne	r3, #1
 80034d4:	2300      	moveq	r3, #0
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 80034dc:	f000 f81e 	bl	800351c <Error_Handler>
  }
}
 80034e0:	bf00      	nop
 80034e2:	3770      	adds	r7, #112	; 0x70
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	58024800 	.word	0x58024800
 80034ec:	58000400 	.word	0x58000400

080034f0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]

}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	4603      	mov	r3, r0
 800350c:	80fb      	strh	r3, [r7, #6]

}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
	...

0800351c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8003520:	2200      	movs	r2, #0
 8003522:	2101      	movs	r1, #1
 8003524:	4808      	ldr	r0, [pc, #32]	; (8003548 <Error_Handler+0x2c>)
 8003526:	f005 f95d 	bl	80087e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800352a:	2200      	movs	r2, #0
 800352c:	2102      	movs	r1, #2
 800352e:	4807      	ldr	r0, [pc, #28]	; (800354c <Error_Handler+0x30>)
 8003530:	f005 f958 	bl	80087e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8003534:	2201      	movs	r2, #1
 8003536:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800353a:	4803      	ldr	r0, [pc, #12]	; (8003548 <Error_Handler+0x2c>)
 800353c:	f005 f952 	bl	80087e4 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003540:	b672      	cpsid	i
}
 8003542:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003544:	e7fe      	b.n	8003544 <Error_Handler+0x28>
 8003546:	bf00      	nop
 8003548:	58020400 	.word	0x58020400
 800354c:	58021000 	.word	0x58021000

08003550 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	ed87 0a01 	vstr	s0, [r7, #4]
 800355a:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 800355c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003560:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	ee06 3a90 	vmov	s13, r3
 800356a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800356e:	eeb0 1b46 	vmov.f64	d1, d6
 8003572:	eeb0 0b47 	vmov.f64	d0, d7
 8003576:	f00b fb97 	bl	800eca8 <pow>
 800357a:	eeb0 7b40 	vmov.f64	d7, d0
    }
 800357e:	eeb0 0b47 	vmov.f64	d0, d7
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <_Z41__static_initialization_and_destruction_0ii>:
	}
  /* USER CODE END Error_Handler_Debug */
}
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af02      	add	r7, sp, #8
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b01      	cmp	r3, #1
 8003596:	f040 80d1 	bne.w	800373c <_Z41__static_initialization_and_destruction_0ii+0x1b4>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035a0:	4293      	cmp	r3, r2
 80035a2:	f040 80cb 	bne.w	800373c <_Z41__static_initialization_and_destruction_0ii+0x1b4>
AMT21 encoderJ1(&huart4, 0xD4);
 80035a6:	22d4      	movs	r2, #212	; 0xd4
 80035a8:	4972      	ldr	r1, [pc, #456]	; (8003774 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 80035aa:	4873      	ldr	r0, [pc, #460]	; (8003778 <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 80035ac:	f7fd fa28 	bl	8000a00 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ3(&huart4, 0xC4);
 80035b0:	22c4      	movs	r2, #196	; 0xc4
 80035b2:	4970      	ldr	r1, [pc, #448]	; (8003774 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 80035b4:	4871      	ldr	r0, [pc, #452]	; (800377c <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 80035b6:	f7fd fa23 	bl	8000a00 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 80035ba:	2320      	movs	r3, #32
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	4b70      	ldr	r3, [pc, #448]	; (8003780 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	4970      	ldr	r1, [pc, #448]	; (8003784 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 80035c4:	4870      	ldr	r0, [pc, #448]	; (8003788 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 80035c6:	f7fd fb0f 	bl	8000be8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 80035ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	4b6e      	ldr	r3, [pc, #440]	; (800378c <_Z41__static_initialization_and_destruction_0ii+0x204>)
 80035d2:	2204      	movs	r2, #4
 80035d4:	496e      	ldr	r1, [pc, #440]	; (8003790 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 80035d6:	486f      	ldr	r0, [pc, #444]	; (8003794 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 80035d8:	f7fd fb06 	bl	8000be8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 80035dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	4b6a      	ldr	r3, [pc, #424]	; (800378c <_Z41__static_initialization_and_destruction_0ii+0x204>)
 80035e4:	2204      	movs	r2, #4
 80035e6:	496c      	ldr	r1, [pc, #432]	; (8003798 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 80035e8:	486c      	ldr	r0, [pc, #432]	; (800379c <_Z41__static_initialization_and_destruction_0ii+0x214>)
 80035ea:	f7fd fafd 	bl	8000be8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
volatile const float C2_q1 = (3.0*C0_q1) / (Time*Time);
 80035ee:	4b6c      	ldr	r3, [pc, #432]	; (80037a0 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 80035f0:	edd3 7a00 	vldr	s15, [r3]
 80035f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80035f8:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80035fc:	ee27 5b06 	vmul.f64	d5, d7, d6
 8003600:	4b68      	ldr	r3, [pc, #416]	; (80037a4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8003602:	ed93 7a00 	vldr	s14, [r3]
 8003606:	4b67      	ldr	r3, [pc, #412]	; (80037a4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8003608:	edd3 7a00 	vldr	s15, [r3]
 800360c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003610:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003614:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003618:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800361c:	4b62      	ldr	r3, [pc, #392]	; (80037a8 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 800361e:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q1 = (2.0*C0_q1) / (Time*Time*Time);
 8003622:	4b5f      	ldr	r3, [pc, #380]	; (80037a0 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8003624:	edd3 7a00 	vldr	s15, [r3]
 8003628:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800362c:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003630:	4b5c      	ldr	r3, [pc, #368]	; (80037a4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8003632:	ed93 7a00 	vldr	s14, [r3]
 8003636:	4b5b      	ldr	r3, [pc, #364]	; (80037a4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8003638:	edd3 7a00 	vldr	s15, [r3]
 800363c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003640:	4b58      	ldr	r3, [pc, #352]	; (80037a4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8003642:	edd3 7a00 	vldr	s15, [r3]
 8003646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800364a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800364e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003652:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003656:	4b55      	ldr	r3, [pc, #340]	; (80037ac <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8003658:	edc3 7a00 	vstr	s15, [r3]
volatile const float C2_q3 = (3.0*C0_q3) / (Time*Time);
 800365c:	4b54      	ldr	r3, [pc, #336]	; (80037b0 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 800365e:	edd3 7a00 	vldr	s15, [r3]
 8003662:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003666:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 800366a:	ee27 5b06 	vmul.f64	d5, d7, d6
 800366e:	4b4d      	ldr	r3, [pc, #308]	; (80037a4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8003670:	ed93 7a00 	vldr	s14, [r3]
 8003674:	4b4b      	ldr	r3, [pc, #300]	; (80037a4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8003676:	edd3 7a00 	vldr	s15, [r3]
 800367a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800367e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003682:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003686:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800368a:	4b4a      	ldr	r3, [pc, #296]	; (80037b4 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 800368c:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q3 = (2.0*C0_q3) / (Time*Time*Time);
 8003690:	4b47      	ldr	r3, [pc, #284]	; (80037b0 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8003692:	edd3 7a00 	vldr	s15, [r3]
 8003696:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800369a:	ee37 5b07 	vadd.f64	d5, d7, d7
 800369e:	4b41      	ldr	r3, [pc, #260]	; (80037a4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 80036a0:	ed93 7a00 	vldr	s14, [r3]
 80036a4:	4b3f      	ldr	r3, [pc, #252]	; (80037a4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 80036a6:	edd3 7a00 	vldr	s15, [r3]
 80036aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036ae:	4b3d      	ldr	r3, [pc, #244]	; (80037a4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 80036b0:	edd3 7a00 	vldr	s15, [r3]
 80036b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036b8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80036bc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80036c0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80036c4:	4b3c      	ldr	r3, [pc, #240]	; (80037b8 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 80036c6:	edc3 7a00 	vstr	s15, [r3]
volatile const float dt2 = pow(dt,2);
 80036ca:	4b3c      	ldr	r3, [pc, #240]	; (80037bc <_Z41__static_initialization_and_destruction_0ii+0x234>)
 80036cc:	edd3 7a00 	vldr	s15, [r3]
 80036d0:	2002      	movs	r0, #2
 80036d2:	eeb0 0a67 	vmov.f32	s0, s15
 80036d6:	f7ff ff3b 	bl	8003550 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80036da:	eeb0 7b40 	vmov.f64	d7, d0
 80036de:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80036e2:	4b37      	ldr	r3, [pc, #220]	; (80037c0 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 80036e4:	edc3 7a00 	vstr	s15, [r3]
volatile const float dt3 = pow(dt,3);
 80036e8:	4b34      	ldr	r3, [pc, #208]	; (80037bc <_Z41__static_initialization_and_destruction_0ii+0x234>)
 80036ea:	edd3 7a00 	vldr	s15, [r3]
 80036ee:	2003      	movs	r0, #3
 80036f0:	eeb0 0a67 	vmov.f32	s0, s15
 80036f4:	f7ff ff2c 	bl	8003550 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80036f8:	eeb0 7b40 	vmov.f64	d7, d0
 80036fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003700:	4b30      	ldr	r3, [pc, #192]	; (80037c4 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003702:	edc3 7a00 	vstr	s15, [r3]
volatile const float dt4 = pow(dt,4);
 8003706:	4b2d      	ldr	r3, [pc, #180]	; (80037bc <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8003708:	edd3 7a00 	vldr	s15, [r3]
 800370c:	2004      	movs	r0, #4
 800370e:	eeb0 0a67 	vmov.f32	s0, s15
 8003712:	f7ff ff1d 	bl	8003550 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003716:	eeb0 7b40 	vmov.f64	d7, d0
 800371a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800371e:	4b2a      	ldr	r3, [pc, #168]	; (80037c8 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8003720:	edc3 7a00 	vstr	s15, [r3]
fcb_joint fcb_joint1, fcb_joint2, fcb_joint3, fcb_joint4;
 8003724:	4829      	ldr	r0, [pc, #164]	; (80037cc <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8003726:	f7fe fa21 	bl	8001b6c <_ZN11robot_jointC1Ev>
 800372a:	4829      	ldr	r0, [pc, #164]	; (80037d0 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 800372c:	f7fe fa1e 	bl	8001b6c <_ZN11robot_jointC1Ev>
 8003730:	4828      	ldr	r0, [pc, #160]	; (80037d4 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8003732:	f7fe fa1b 	bl	8001b6c <_ZN11robot_jointC1Ev>
 8003736:	4828      	ldr	r0, [pc, #160]	; (80037d8 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8003738:	f7fe fa18 	bl	8001b6c <_ZN11robot_jointC1Ev>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d113      	bne.n	800376a <_Z41__static_initialization_and_destruction_0ii+0x1e2>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003748:	4293      	cmp	r3, r2
 800374a:	d10e      	bne.n	800376a <_Z41__static_initialization_and_destruction_0ii+0x1e2>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 800374c:	4813      	ldr	r0, [pc, #76]	; (800379c <_Z41__static_initialization_and_destruction_0ii+0x214>)
 800374e:	f7fd fa8f 	bl	8000c70 <_ZN7StepperD1Ev>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8003752:	4810      	ldr	r0, [pc, #64]	; (8003794 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 8003754:	f7fd fa8c 	bl	8000c70 <_ZN7StepperD1Ev>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8003758:	480b      	ldr	r0, [pc, #44]	; (8003788 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 800375a:	f7fd fa89 	bl	8000c70 <_ZN7StepperD1Ev>
AMT21 encoderJ3(&huart4, 0xC4);
 800375e:	4807      	ldr	r0, [pc, #28]	; (800377c <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8003760:	f7fd f962 	bl	8000a28 <_ZN5AMT21D1Ev>
AMT21 encoderJ1(&huart4, 0xD4);
 8003764:	4804      	ldr	r0, [pc, #16]	; (8003778 <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 8003766:	f7fd f95f 	bl	8000a28 <_ZN5AMT21D1Ev>
}
 800376a:	bf00      	nop
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	24000d38 	.word	0x24000d38
 8003778:	2400026c 	.word	0x2400026c
 800377c:	24000288 	.word	0x24000288
 8003780:	58020400 	.word	0x58020400
 8003784:	240007d8 	.word	0x240007d8
 8003788:	240002a4 	.word	0x240002a4
 800378c:	58021000 	.word	0x58021000
 8003790:	240008bc 	.word	0x240008bc
 8003794:	240002cc 	.word	0x240002cc
 8003798:	24000740 	.word	0x24000740
 800379c:	240002f4 	.word	0x240002f4
 80037a0:	24000020 	.word	0x24000020
 80037a4:	2400001c 	.word	0x2400001c
 80037a8:	24000334 	.word	0x24000334
 80037ac:	24000338 	.word	0x24000338
 80037b0:	24000024 	.word	0x24000024
 80037b4:	2400033c 	.word	0x2400033c
 80037b8:	24000340 	.word	0x24000340
 80037bc:	24000030 	.word	0x24000030
 80037c0:	24000358 	.word	0x24000358
 80037c4:	2400035c 	.word	0x2400035c
 80037c8:	24000360 	.word	0x24000360
 80037cc:	2400042c 	.word	0x2400042c
 80037d0:	240004b0 	.word	0x240004b0
 80037d4:	24000534 	.word	0x24000534
 80037d8:	240005b8 	.word	0x240005b8

080037dc <_GLOBAL__sub_I_TIM_MS>:
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
 80037e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80037e4:	2001      	movs	r0, #1
 80037e6:	f7ff fecf 	bl	8003588 <_Z41__static_initialization_and_destruction_0ii>
 80037ea:	bd80      	pop	{r7, pc}

080037ec <_GLOBAL__sub_D_TIM_MS>:
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80037f4:	2000      	movs	r0, #0
 80037f6:	f7ff fec7 	bl	8003588 <_Z41__static_initialization_and_destruction_0ii>
 80037fa:	bd80      	pop	{r7, pc}

080037fc <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8003800:	4b27      	ldr	r3, [pc, #156]	; (80038a0 <MX_SPI3_Init+0xa4>)
 8003802:	4a28      	ldr	r2, [pc, #160]	; (80038a4 <MX_SPI3_Init+0xa8>)
 8003804:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003806:	4b26      	ldr	r3, [pc, #152]	; (80038a0 <MX_SPI3_Init+0xa4>)
 8003808:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800380c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800380e:	4b24      	ldr	r3, [pc, #144]	; (80038a0 <MX_SPI3_Init+0xa4>)
 8003810:	2200      	movs	r2, #0
 8003812:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8003814:	4b22      	ldr	r3, [pc, #136]	; (80038a0 <MX_SPI3_Init+0xa4>)
 8003816:	2203      	movs	r2, #3
 8003818:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800381a:	4b21      	ldr	r3, [pc, #132]	; (80038a0 <MX_SPI3_Init+0xa4>)
 800381c:	2200      	movs	r2, #0
 800381e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003820:	4b1f      	ldr	r3, [pc, #124]	; (80038a0 <MX_SPI3_Init+0xa4>)
 8003822:	2200      	movs	r2, #0
 8003824:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003826:	4b1e      	ldr	r3, [pc, #120]	; (80038a0 <MX_SPI3_Init+0xa4>)
 8003828:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800382c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800382e:	4b1c      	ldr	r3, [pc, #112]	; (80038a0 <MX_SPI3_Init+0xa4>)
 8003830:	2200      	movs	r2, #0
 8003832:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003834:	4b1a      	ldr	r3, [pc, #104]	; (80038a0 <MX_SPI3_Init+0xa4>)
 8003836:	2200      	movs	r2, #0
 8003838:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800383a:	4b19      	ldr	r3, [pc, #100]	; (80038a0 <MX_SPI3_Init+0xa4>)
 800383c:	2200      	movs	r2, #0
 800383e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003840:	4b17      	ldr	r3, [pc, #92]	; (80038a0 <MX_SPI3_Init+0xa4>)
 8003842:	2200      	movs	r2, #0
 8003844:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8003846:	4b16      	ldr	r3, [pc, #88]	; (80038a0 <MX_SPI3_Init+0xa4>)
 8003848:	2200      	movs	r2, #0
 800384a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800384c:	4b14      	ldr	r3, [pc, #80]	; (80038a0 <MX_SPI3_Init+0xa4>)
 800384e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003852:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003854:	4b12      	ldr	r3, [pc, #72]	; (80038a0 <MX_SPI3_Init+0xa4>)
 8003856:	2200      	movs	r2, #0
 8003858:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800385a:	4b11      	ldr	r3, [pc, #68]	; (80038a0 <MX_SPI3_Init+0xa4>)
 800385c:	2200      	movs	r2, #0
 800385e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003860:	4b0f      	ldr	r3, [pc, #60]	; (80038a0 <MX_SPI3_Init+0xa4>)
 8003862:	2200      	movs	r2, #0
 8003864:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003866:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <MX_SPI3_Init+0xa4>)
 8003868:	2200      	movs	r2, #0
 800386a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800386c:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <MX_SPI3_Init+0xa4>)
 800386e:	2200      	movs	r2, #0
 8003870:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003872:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <MX_SPI3_Init+0xa4>)
 8003874:	2200      	movs	r2, #0
 8003876:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003878:	4b09      	ldr	r3, [pc, #36]	; (80038a0 <MX_SPI3_Init+0xa4>)
 800387a:	2200      	movs	r2, #0
 800387c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800387e:	4b08      	ldr	r3, [pc, #32]	; (80038a0 <MX_SPI3_Init+0xa4>)
 8003880:	2200      	movs	r2, #0
 8003882:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003884:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <MX_SPI3_Init+0xa4>)
 8003886:	2200      	movs	r2, #0
 8003888:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800388a:	4805      	ldr	r0, [pc, #20]	; (80038a0 <MX_SPI3_Init+0xa4>)
 800388c:	f007 fb32 	bl	800aef4 <HAL_SPI_Init>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8003896:	f7ff fe41 	bl	800351c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800389a:	bf00      	nop
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	2400066c 	.word	0x2400066c
 80038a4:	40003c00 	.word	0x40003c00

080038a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b0b8      	sub	sp, #224	; 0xe0
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	605a      	str	r2, [r3, #4]
 80038ba:	609a      	str	r2, [r3, #8]
 80038bc:	60da      	str	r2, [r3, #12]
 80038be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038c0:	f107 0310 	add.w	r3, r7, #16
 80038c4:	22bc      	movs	r2, #188	; 0xbc
 80038c6:	2100      	movs	r1, #0
 80038c8:	4618      	mov	r0, r3
 80038ca:	f00b ffc9 	bl	800f860 <memset>
  if(spiHandle->Instance==SPI3)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a25      	ldr	r2, [pc, #148]	; (8003968 <HAL_SPI_MspInit+0xc0>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d142      	bne.n	800395e <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80038d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038dc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80038de:	2300      	movs	r3, #0
 80038e0:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038e2:	f107 0310 	add.w	r3, r7, #16
 80038e6:	4618      	mov	r0, r3
 80038e8:	f005 ffa2 	bl	8009830 <HAL_RCCEx_PeriphCLKConfig>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80038f2:	f7ff fe13 	bl	800351c <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80038f6:	4b1d      	ldr	r3, [pc, #116]	; (800396c <HAL_SPI_MspInit+0xc4>)
 80038f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038fc:	4a1b      	ldr	r2, [pc, #108]	; (800396c <HAL_SPI_MspInit+0xc4>)
 80038fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003902:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003906:	4b19      	ldr	r3, [pc, #100]	; (800396c <HAL_SPI_MspInit+0xc4>)
 8003908:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800390c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003914:	4b15      	ldr	r3, [pc, #84]	; (800396c <HAL_SPI_MspInit+0xc4>)
 8003916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800391a:	4a14      	ldr	r2, [pc, #80]	; (800396c <HAL_SPI_MspInit+0xc4>)
 800391c:	f043 0304 	orr.w	r3, r3, #4
 8003920:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003924:	4b11      	ldr	r3, [pc, #68]	; (800396c <HAL_SPI_MspInit+0xc4>)
 8003926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800392a:	f003 0304 	and.w	r3, r3, #4
 800392e:	60bb      	str	r3, [r7, #8]
 8003930:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003932:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003936:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800393a:	2302      	movs	r3, #2
 800393c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003940:	2300      	movs	r3, #0
 8003942:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003946:	2300      	movs	r3, #0
 8003948:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800394c:	2306      	movs	r3, #6
 800394e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003952:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003956:	4619      	mov	r1, r3
 8003958:	4805      	ldr	r0, [pc, #20]	; (8003970 <HAL_SPI_MspInit+0xc8>)
 800395a:	f004 fd93 	bl	8008484 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800395e:	bf00      	nop
 8003960:	37e0      	adds	r7, #224	; 0xe0
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40003c00 	.word	0x40003c00
 800396c:	58024400 	.word	0x58024400
 8003970:	58020800 	.word	0x58020800

08003974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800397a:	4b0a      	ldr	r3, [pc, #40]	; (80039a4 <HAL_MspInit+0x30>)
 800397c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003980:	4a08      	ldr	r2, [pc, #32]	; (80039a4 <HAL_MspInit+0x30>)
 8003982:	f043 0302 	orr.w	r3, r3, #2
 8003986:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800398a:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <HAL_MspInit+0x30>)
 800398c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	607b      	str	r3, [r7, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	58024400 	.word	0x58024400

080039a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039ac:	e7fe      	b.n	80039ac <NMI_Handler+0x4>

080039ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039ae:	b480      	push	{r7}
 80039b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039b2:	e7fe      	b.n	80039b2 <HardFault_Handler+0x4>

080039b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039b8:	e7fe      	b.n	80039b8 <MemManage_Handler+0x4>

080039ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039ba:	b480      	push	{r7}
 80039bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039be:	e7fe      	b.n	80039be <BusFault_Handler+0x4>

080039c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039c4:	e7fe      	b.n	80039c4 <UsageFault_Handler+0x4>

080039c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039c6:	b480      	push	{r7}
 80039c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039ca:	bf00      	nop
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039d8:	bf00      	nop
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039e2:	b480      	push	{r7}
 80039e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039e6:	bf00      	nop
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039f4:	f001 fbc6 	bl	8005184 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80039f8:	f001 fcff 	bl	80053fa <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80039fc:	bf00      	nop
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8003a04:	4802      	ldr	r0, [pc, #8]	; (8003a10 <DMA1_Stream0_IRQHandler+0x10>)
 8003a06:	f003 fa2b 	bl	8006e60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003a0a:	bf00      	nop
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	24000cc0 	.word	0x24000cc0

08003a14 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003a18:	4802      	ldr	r0, [pc, #8]	; (8003a24 <DMA1_Stream1_IRQHandler+0x10>)
 8003a1a:	f003 fa21 	bl	8006e60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003a1e:	bf00      	nop
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	24000b40 	.word	0x24000b40

08003a28 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003a2c:	4802      	ldr	r0, [pc, #8]	; (8003a38 <DMA1_Stream2_IRQHandler+0x10>)
 8003a2e:	f003 fa17 	bl	8006e60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003a32:	bf00      	nop
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	24000c48 	.word	0x24000c48

08003a3c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003a40:	4802      	ldr	r0, [pc, #8]	; (8003a4c <DMA1_Stream3_IRQHandler+0x10>)
 8003a42:	f003 fa0d 	bl	8006e60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003a46:	bf00      	nop
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	24000a38 	.word	0x24000a38

08003a50 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8003a54:	4802      	ldr	r0, [pc, #8]	; (8003a60 <DMA1_Stream4_IRQHandler+0x10>)
 8003a56:	f003 fa03 	bl	8006e60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003a5a:	bf00      	nop
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	24000dc8 	.word	0x24000dc8

08003a64 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 8003a68:	2040      	movs	r0, #64	; 0x40
 8003a6a:	f004 fed4 	bl	8008816 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM3_Pin);
 8003a6e:	2080      	movs	r0, #128	; 0x80
 8003a70:	f004 fed1 	bl	8008816 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003a74:	bf00      	nop
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003a7c:	4802      	ldr	r0, [pc, #8]	; (8003a88 <USART3_IRQHandler+0x10>)
 8003a7e:	f009 f897 	bl	800cbb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003a82:	bf00      	nop
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	24000bb8 	.word	0x24000bb8

08003a8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 8003a90:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003a94:	f004 febf 	bl	8008816 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 8003a98:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003a9c:	f004 febb 	bl	8008816 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin_Pin);
 8003aa0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003aa4:	f004 feb7 	bl	8008816 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 8003aa8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003aac:	f004 feb3 	bl	8008816 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003ab0:	bf00      	nop
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8003ab8:	4802      	ldr	r0, [pc, #8]	; (8003ac4 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8003aba:	f007 fd7b 	bl	800b5b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8003abe:	bf00      	nop
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	240009a0 	.word	0x240009a0

08003ac8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8003acc:	4802      	ldr	r0, [pc, #8]	; (8003ad8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003ace:	f007 fd71 	bl	800b5b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003ad2:	bf00      	nop
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	24000824 	.word	0x24000824

08003adc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003ae0:	4802      	ldr	r0, [pc, #8]	; (8003aec <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003ae2:	f007 fd67 	bl	800b5b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003ae6:	bf00      	nop
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	24000954 	.word	0x24000954

08003af0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003af4:	4802      	ldr	r0, [pc, #8]	; (8003b00 <TIM5_IRQHandler+0x10>)
 8003af6:	f007 fd5d 	bl	800b5b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003afa:	bf00      	nop
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	2400078c 	.word	0x2400078c

08003b04 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003b08:	4802      	ldr	r0, [pc, #8]	; (8003b14 <UART4_IRQHandler+0x10>)
 8003b0a:	f009 f851 	bl	800cbb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003b0e:	bf00      	nop
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	24000d38 	.word	0x24000d38

08003b18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003b1c:	4802      	ldr	r0, [pc, #8]	; (8003b28 <TIM6_DAC_IRQHandler+0x10>)
 8003b1e:	f007 fd49 	bl	800b5b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003b22:	bf00      	nop
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	24000870 	.word	0x24000870

08003b2c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003b30:	4802      	ldr	r0, [pc, #8]	; (8003b3c <TIM7_IRQHandler+0x10>)
 8003b32:	f007 fd3f 	bl	800b5b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003b36:	bf00      	nop
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	240009ec 	.word	0x240009ec

08003b40 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8003b44:	4802      	ldr	r0, [pc, #8]	; (8003b50 <UART7_IRQHandler+0x10>)
 8003b46:	f009 f833 	bl	800cbb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8003b4a:	bf00      	nop
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	24000ab0 	.word	0x24000ab0

08003b54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
	return 1;
 8003b58:	2301      	movs	r3, #1
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <_kill>:

int _kill(int pid, int sig)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003b6e:	f00b fe3f 	bl	800f7f0 <__errno>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2216      	movs	r2, #22
 8003b76:	601a      	str	r2, [r3, #0]
	return -1;
 8003b78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <_exit>:

void _exit (int status)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7ff ffe7 	bl	8003b64 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b96:	e7fe      	b.n	8003b96 <_exit+0x12>

08003b98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	e00a      	b.n	8003bc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003baa:	f3af 8000 	nop.w
 8003bae:	4601      	mov	r1, r0
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	1c5a      	adds	r2, r3, #1
 8003bb4:	60ba      	str	r2, [r7, #8]
 8003bb6:	b2ca      	uxtb	r2, r1
 8003bb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	dbf0      	blt.n	8003baa <_read+0x12>
	}

return len;
 8003bc8:	687b      	ldr	r3, [r7, #4]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b086      	sub	sp, #24
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	60f8      	str	r0, [r7, #12]
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bde:	2300      	movs	r3, #0
 8003be0:	617b      	str	r3, [r7, #20]
 8003be2:	e009      	b.n	8003bf8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	60ba      	str	r2, [r7, #8]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	dbf1      	blt.n	8003be4 <_write+0x12>
	}
	return len;
 8003c00:	687b      	ldr	r3, [r7, #4]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <_close>:

int _close(int file)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
	return -1;
 8003c12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
 8003c2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c32:	605a      	str	r2, [r3, #4]
	return 0;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <_isatty>:

int _isatty(int file)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
	return 1;
 8003c4a:	2301      	movs	r3, #1
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
	return 0;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
	...

08003c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c7c:	4a14      	ldr	r2, [pc, #80]	; (8003cd0 <_sbrk+0x5c>)
 8003c7e:	4b15      	ldr	r3, [pc, #84]	; (8003cd4 <_sbrk+0x60>)
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c88:	4b13      	ldr	r3, [pc, #76]	; (8003cd8 <_sbrk+0x64>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d102      	bne.n	8003c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c90:	4b11      	ldr	r3, [pc, #68]	; (8003cd8 <_sbrk+0x64>)
 8003c92:	4a12      	ldr	r2, [pc, #72]	; (8003cdc <_sbrk+0x68>)
 8003c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c96:	4b10      	ldr	r3, [pc, #64]	; (8003cd8 <_sbrk+0x64>)
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d207      	bcs.n	8003cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ca4:	f00b fda4 	bl	800f7f0 <__errno>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	220c      	movs	r2, #12
 8003cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cae:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb2:	e009      	b.n	8003cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cb4:	4b08      	ldr	r3, [pc, #32]	; (8003cd8 <_sbrk+0x64>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cba:	4b07      	ldr	r3, [pc, #28]	; (8003cd8 <_sbrk+0x64>)
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	4a05      	ldr	r2, [pc, #20]	; (8003cd8 <_sbrk+0x64>)
 8003cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	24001458 	.word	0x24001458
 8003cd4:	00000400 	.word	0x00000400
 8003cd8:	2400063c 	.word	0x2400063c
 8003cdc:	24000e58 	.word	0x24000e58

08003ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003ce4:	4b39      	ldr	r3, [pc, #228]	; (8003dcc <SystemInit+0xec>)
 8003ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cea:	4a38      	ldr	r2, [pc, #224]	; (8003dcc <SystemInit+0xec>)
 8003cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003cf4:	4b36      	ldr	r3, [pc, #216]	; (8003dd0 <SystemInit+0xf0>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 030f 	and.w	r3, r3, #15
 8003cfc:	2b06      	cmp	r3, #6
 8003cfe:	d807      	bhi.n	8003d10 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003d00:	4b33      	ldr	r3, [pc, #204]	; (8003dd0 <SystemInit+0xf0>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f023 030f 	bic.w	r3, r3, #15
 8003d08:	4a31      	ldr	r2, [pc, #196]	; (8003dd0 <SystemInit+0xf0>)
 8003d0a:	f043 0307 	orr.w	r3, r3, #7
 8003d0e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003d10:	4b30      	ldr	r3, [pc, #192]	; (8003dd4 <SystemInit+0xf4>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a2f      	ldr	r2, [pc, #188]	; (8003dd4 <SystemInit+0xf4>)
 8003d16:	f043 0301 	orr.w	r3, r3, #1
 8003d1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003d1c:	4b2d      	ldr	r3, [pc, #180]	; (8003dd4 <SystemInit+0xf4>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003d22:	4b2c      	ldr	r3, [pc, #176]	; (8003dd4 <SystemInit+0xf4>)
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	492b      	ldr	r1, [pc, #172]	; (8003dd4 <SystemInit+0xf4>)
 8003d28:	4b2b      	ldr	r3, [pc, #172]	; (8003dd8 <SystemInit+0xf8>)
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003d2e:	4b28      	ldr	r3, [pc, #160]	; (8003dd0 <SystemInit+0xf0>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0308 	and.w	r3, r3, #8
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d007      	beq.n	8003d4a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003d3a:	4b25      	ldr	r3, [pc, #148]	; (8003dd0 <SystemInit+0xf0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f023 030f 	bic.w	r3, r3, #15
 8003d42:	4a23      	ldr	r2, [pc, #140]	; (8003dd0 <SystemInit+0xf0>)
 8003d44:	f043 0307 	orr.w	r3, r3, #7
 8003d48:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003d4a:	4b22      	ldr	r3, [pc, #136]	; (8003dd4 <SystemInit+0xf4>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003d50:	4b20      	ldr	r3, [pc, #128]	; (8003dd4 <SystemInit+0xf4>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003d56:	4b1f      	ldr	r3, [pc, #124]	; (8003dd4 <SystemInit+0xf4>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003d5c:	4b1d      	ldr	r3, [pc, #116]	; (8003dd4 <SystemInit+0xf4>)
 8003d5e:	4a1f      	ldr	r2, [pc, #124]	; (8003ddc <SystemInit+0xfc>)
 8003d60:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003d62:	4b1c      	ldr	r3, [pc, #112]	; (8003dd4 <SystemInit+0xf4>)
 8003d64:	4a1e      	ldr	r2, [pc, #120]	; (8003de0 <SystemInit+0x100>)
 8003d66:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003d68:	4b1a      	ldr	r3, [pc, #104]	; (8003dd4 <SystemInit+0xf4>)
 8003d6a:	4a1e      	ldr	r2, [pc, #120]	; (8003de4 <SystemInit+0x104>)
 8003d6c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003d6e:	4b19      	ldr	r3, [pc, #100]	; (8003dd4 <SystemInit+0xf4>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003d74:	4b17      	ldr	r3, [pc, #92]	; (8003dd4 <SystemInit+0xf4>)
 8003d76:	4a1b      	ldr	r2, [pc, #108]	; (8003de4 <SystemInit+0x104>)
 8003d78:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003d7a:	4b16      	ldr	r3, [pc, #88]	; (8003dd4 <SystemInit+0xf4>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003d80:	4b14      	ldr	r3, [pc, #80]	; (8003dd4 <SystemInit+0xf4>)
 8003d82:	4a18      	ldr	r2, [pc, #96]	; (8003de4 <SystemInit+0x104>)
 8003d84:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003d86:	4b13      	ldr	r3, [pc, #76]	; (8003dd4 <SystemInit+0xf4>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003d8c:	4b11      	ldr	r3, [pc, #68]	; (8003dd4 <SystemInit+0xf4>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a10      	ldr	r2, [pc, #64]	; (8003dd4 <SystemInit+0xf4>)
 8003d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d96:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003d98:	4b0e      	ldr	r3, [pc, #56]	; (8003dd4 <SystemInit+0xf4>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003d9e:	4b12      	ldr	r3, [pc, #72]	; (8003de8 <SystemInit+0x108>)
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	4b12      	ldr	r3, [pc, #72]	; (8003dec <SystemInit+0x10c>)
 8003da4:	4013      	ands	r3, r2
 8003da6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003daa:	d202      	bcs.n	8003db2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003dac:	4b10      	ldr	r3, [pc, #64]	; (8003df0 <SystemInit+0x110>)
 8003dae:	2201      	movs	r2, #1
 8003db0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003db2:	4b10      	ldr	r3, [pc, #64]	; (8003df4 <SystemInit+0x114>)
 8003db4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003db8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003dba:	4b04      	ldr	r3, [pc, #16]	; (8003dcc <SystemInit+0xec>)
 8003dbc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003dc0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003dc2:	bf00      	nop
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	e000ed00 	.word	0xe000ed00
 8003dd0:	52002000 	.word	0x52002000
 8003dd4:	58024400 	.word	0x58024400
 8003dd8:	eaf6ed7f 	.word	0xeaf6ed7f
 8003ddc:	02020200 	.word	0x02020200
 8003de0:	01ff0000 	.word	0x01ff0000
 8003de4:	01010280 	.word	0x01010280
 8003de8:	5c001000 	.word	0x5c001000
 8003dec:	ffff0000 	.word	0xffff0000
 8003df0:	51008108 	.word	0x51008108
 8003df4:	52004000 	.word	0x52004000

08003df8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b09a      	sub	sp, #104	; 0x68
 8003dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dfe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e02:	2200      	movs	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	605a      	str	r2, [r3, #4]
 8003e08:	609a      	str	r2, [r3, #8]
 8003e0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e0c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	605a      	str	r2, [r3, #4]
 8003e16:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	605a      	str	r2, [r3, #4]
 8003e22:	609a      	str	r2, [r3, #8]
 8003e24:	60da      	str	r2, [r3, #12]
 8003e26:	611a      	str	r2, [r3, #16]
 8003e28:	615a      	str	r2, [r3, #20]
 8003e2a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003e2c:	1d3b      	adds	r3, r7, #4
 8003e2e:	222c      	movs	r2, #44	; 0x2c
 8003e30:	2100      	movs	r1, #0
 8003e32:	4618      	mov	r0, r3
 8003e34:	f00b fd14 	bl	800f860 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003e38:	4b44      	ldr	r3, [pc, #272]	; (8003f4c <MX_TIM1_Init+0x154>)
 8003e3a:	4a45      	ldr	r2, [pc, #276]	; (8003f50 <MX_TIM1_Init+0x158>)
 8003e3c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 8003e3e:	4b43      	ldr	r3, [pc, #268]	; (8003f4c <MX_TIM1_Init+0x154>)
 8003e40:	22c7      	movs	r2, #199	; 0xc7
 8003e42:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e44:	4b41      	ldr	r3, [pc, #260]	; (8003f4c <MX_TIM1_Init+0x154>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 8003e4a:	4b40      	ldr	r3, [pc, #256]	; (8003f4c <MX_TIM1_Init+0x154>)
 8003e4c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8003e50:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e52:	4b3e      	ldr	r3, [pc, #248]	; (8003f4c <MX_TIM1_Init+0x154>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e58:	4b3c      	ldr	r3, [pc, #240]	; (8003f4c <MX_TIM1_Init+0x154>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003e5e:	4b3b      	ldr	r3, [pc, #236]	; (8003f4c <MX_TIM1_Init+0x154>)
 8003e60:	2280      	movs	r2, #128	; 0x80
 8003e62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003e64:	4839      	ldr	r0, [pc, #228]	; (8003f4c <MX_TIM1_Init+0x154>)
 8003e66:	f007 f966 	bl	800b136 <HAL_TIM_Base_Init>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003e70:	f7ff fb54 	bl	800351c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e78:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003e7a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e7e:	4619      	mov	r1, r3
 8003e80:	4832      	ldr	r0, [pc, #200]	; (8003f4c <MX_TIM1_Init+0x154>)
 8003e82:	f007 fdcb 	bl	800ba1c <HAL_TIM_ConfigClockSource>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003e8c:	f7ff fb46 	bl	800351c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003e90:	482e      	ldr	r0, [pc, #184]	; (8003f4c <MX_TIM1_Init+0x154>)
 8003e92:	f007 fa1f 	bl	800b2d4 <HAL_TIM_PWM_Init>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003e9c:	f7ff fb3e 	bl	800351c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003eac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4826      	ldr	r0, [pc, #152]	; (8003f4c <MX_TIM1_Init+0x154>)
 8003eb4:	f008 fb06 	bl	800c4c4 <HAL_TIMEx_MasterConfigSynchronization>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003ebe:	f7ff fb2d 	bl	800351c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ec2:	2360      	movs	r3, #96	; 0x60
 8003ec4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8003ec6:	f240 1339 	movw	r3, #313	; 0x139
 8003eca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003edc:	2300      	movs	r3, #0
 8003ede:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ee0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ee4:	2204      	movs	r2, #4
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	4818      	ldr	r0, [pc, #96]	; (8003f4c <MX_TIM1_Init+0x154>)
 8003eea:	f007 fc83 	bl	800b7f4 <HAL_TIM_PWM_ConfigChannel>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8003ef4:	f7ff fb12 	bl	800351c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003efc:	2300      	movs	r3, #0
 8003efe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f00:	2300      	movs	r3, #0
 8003f02:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003f04:	2300      	movs	r3, #0
 8003f06:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f10:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003f12:	2300      	movs	r3, #0
 8003f14:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003f16:	2300      	movs	r3, #0
 8003f18:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003f1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003f20:	2300      	movs	r3, #0
 8003f22:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f24:	2300      	movs	r3, #0
 8003f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003f28:	1d3b      	adds	r3, r7, #4
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4807      	ldr	r0, [pc, #28]	; (8003f4c <MX_TIM1_Init+0x154>)
 8003f2e:	f008 fb57 	bl	800c5e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8003f38:	f7ff faf0 	bl	800351c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003f3c:	4803      	ldr	r0, [pc, #12]	; (8003f4c <MX_TIM1_Init+0x154>)
 8003f3e:	f000 fc85 	bl	800484c <HAL_TIM_MspPostInit>

}
 8003f42:	bf00      	nop
 8003f44:	3768      	adds	r7, #104	; 0x68
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	240008bc 	.word	0x240008bc
 8003f50:	40010000 	.word	0x40010000

08003f54 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b08e      	sub	sp, #56	; 0x38
 8003f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	605a      	str	r2, [r3, #4]
 8003f64:	609a      	str	r2, [r3, #8]
 8003f66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f68:	f107 031c 	add.w	r3, r7, #28
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	605a      	str	r2, [r3, #4]
 8003f72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f74:	463b      	mov	r3, r7
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	605a      	str	r2, [r3, #4]
 8003f7c:	609a      	str	r2, [r3, #8]
 8003f7e:	60da      	str	r2, [r3, #12]
 8003f80:	611a      	str	r2, [r3, #16]
 8003f82:	615a      	str	r2, [r3, #20]
 8003f84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003f86:	4b2e      	ldr	r3, [pc, #184]	; (8004040 <MX_TIM2_Init+0xec>)
 8003f88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8003f8e:	4b2c      	ldr	r3, [pc, #176]	; (8004040 <MX_TIM2_Init+0xec>)
 8003f90:	22c7      	movs	r2, #199	; 0xc7
 8003f92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f94:	4b2a      	ldr	r3, [pc, #168]	; (8004040 <MX_TIM2_Init+0xec>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 8003f9a:	4b29      	ldr	r3, [pc, #164]	; (8004040 <MX_TIM2_Init+0xec>)
 8003f9c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8003fa0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fa2:	4b27      	ldr	r3, [pc, #156]	; (8004040 <MX_TIM2_Init+0xec>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003fa8:	4b25      	ldr	r3, [pc, #148]	; (8004040 <MX_TIM2_Init+0xec>)
 8003faa:	2280      	movs	r2, #128	; 0x80
 8003fac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003fae:	4824      	ldr	r0, [pc, #144]	; (8004040 <MX_TIM2_Init+0xec>)
 8003fb0:	f007 f8c1 	bl	800b136 <HAL_TIM_Base_Init>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003fba:	f7ff faaf 	bl	800351c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003fc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fc8:	4619      	mov	r1, r3
 8003fca:	481d      	ldr	r0, [pc, #116]	; (8004040 <MX_TIM2_Init+0xec>)
 8003fcc:	f007 fd26 	bl	800ba1c <HAL_TIM_ConfigClockSource>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003fd6:	f7ff faa1 	bl	800351c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003fda:	4819      	ldr	r0, [pc, #100]	; (8004040 <MX_TIM2_Init+0xec>)
 8003fdc:	f007 f97a 	bl	800b2d4 <HAL_TIM_PWM_Init>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003fe6:	f7ff fa99 	bl	800351c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fea:	2300      	movs	r3, #0
 8003fec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003ff2:	f107 031c 	add.w	r3, r7, #28
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	4811      	ldr	r0, [pc, #68]	; (8004040 <MX_TIM2_Init+0xec>)
 8003ffa:	f008 fa63 	bl	800c4c4 <HAL_TIMEx_MasterConfigSynchronization>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004004:	f7ff fa8a 	bl	800351c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004008:	2360      	movs	r3, #96	; 0x60
 800400a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 800400c:	f240 1339 	movw	r3, #313	; 0x139
 8004010:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004012:	2300      	movs	r3, #0
 8004014:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004016:	2300      	movs	r3, #0
 8004018:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800401a:	463b      	mov	r3, r7
 800401c:	2208      	movs	r2, #8
 800401e:	4619      	mov	r1, r3
 8004020:	4807      	ldr	r0, [pc, #28]	; (8004040 <MX_TIM2_Init+0xec>)
 8004022:	f007 fbe7 	bl	800b7f4 <HAL_TIM_PWM_ConfigChannel>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800402c:	f7ff fa76 	bl	800351c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004030:	4803      	ldr	r0, [pc, #12]	; (8004040 <MX_TIM2_Init+0xec>)
 8004032:	f000 fc0b 	bl	800484c <HAL_TIM_MspPostInit>

}
 8004036:	bf00      	nop
 8004038:	3738      	adds	r7, #56	; 0x38
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	24000908 	.word	0x24000908

08004044 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b08e      	sub	sp, #56	; 0x38
 8004048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800404a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800404e:	2200      	movs	r2, #0
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	605a      	str	r2, [r3, #4]
 8004054:	609a      	str	r2, [r3, #8]
 8004056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004058:	f107 031c 	add.w	r3, r7, #28
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	605a      	str	r2, [r3, #4]
 8004062:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004064:	463b      	mov	r3, r7
 8004066:	2200      	movs	r2, #0
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	605a      	str	r2, [r3, #4]
 800406c:	609a      	str	r2, [r3, #8]
 800406e:	60da      	str	r2, [r3, #12]
 8004070:	611a      	str	r2, [r3, #16]
 8004072:	615a      	str	r2, [r3, #20]
 8004074:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004076:	4b2d      	ldr	r3, [pc, #180]	; (800412c <MX_TIM3_Init+0xe8>)
 8004078:	4a2d      	ldr	r2, [pc, #180]	; (8004130 <MX_TIM3_Init+0xec>)
 800407a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 800407c:	4b2b      	ldr	r3, [pc, #172]	; (800412c <MX_TIM3_Init+0xe8>)
 800407e:	22c7      	movs	r2, #199	; 0xc7
 8004080:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004082:	4b2a      	ldr	r3, [pc, #168]	; (800412c <MX_TIM3_Init+0xe8>)
 8004084:	2200      	movs	r2, #0
 8004086:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2400-1;
 8004088:	4b28      	ldr	r3, [pc, #160]	; (800412c <MX_TIM3_Init+0xe8>)
 800408a:	f640 125f 	movw	r2, #2399	; 0x95f
 800408e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004090:	4b26      	ldr	r3, [pc, #152]	; (800412c <MX_TIM3_Init+0xe8>)
 8004092:	2200      	movs	r2, #0
 8004094:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004096:	4b25      	ldr	r3, [pc, #148]	; (800412c <MX_TIM3_Init+0xe8>)
 8004098:	2280      	movs	r2, #128	; 0x80
 800409a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800409c:	4823      	ldr	r0, [pc, #140]	; (800412c <MX_TIM3_Init+0xe8>)
 800409e:	f007 f84a 	bl	800b136 <HAL_TIM_Base_Init>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80040a8:	f7ff fa38 	bl	800351c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040b0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80040b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040b6:	4619      	mov	r1, r3
 80040b8:	481c      	ldr	r0, [pc, #112]	; (800412c <MX_TIM3_Init+0xe8>)
 80040ba:	f007 fcaf 	bl	800ba1c <HAL_TIM_ConfigClockSource>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80040c4:	f7ff fa2a 	bl	800351c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80040c8:	4818      	ldr	r0, [pc, #96]	; (800412c <MX_TIM3_Init+0xe8>)
 80040ca:	f007 f903 	bl	800b2d4 <HAL_TIM_PWM_Init>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80040d4:	f7ff fa22 	bl	800351c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040d8:	2300      	movs	r3, #0
 80040da:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040dc:	2300      	movs	r3, #0
 80040de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80040e0:	f107 031c 	add.w	r3, r7, #28
 80040e4:	4619      	mov	r1, r3
 80040e6:	4811      	ldr	r0, [pc, #68]	; (800412c <MX_TIM3_Init+0xe8>)
 80040e8:	f008 f9ec 	bl	800c4c4 <HAL_TIMEx_MasterConfigSynchronization>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80040f2:	f7ff fa13 	bl	800351c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040f6:	2360      	movs	r3, #96	; 0x60
 80040f8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80040fa:	2300      	movs	r3, #0
 80040fc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040fe:	2300      	movs	r3, #0
 8004100:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004102:	2300      	movs	r3, #0
 8004104:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004106:	463b      	mov	r3, r7
 8004108:	2200      	movs	r2, #0
 800410a:	4619      	mov	r1, r3
 800410c:	4807      	ldr	r0, [pc, #28]	; (800412c <MX_TIM3_Init+0xe8>)
 800410e:	f007 fb71 	bl	800b7f4 <HAL_TIM_PWM_ConfigChannel>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8004118:	f7ff fa00 	bl	800351c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800411c:	4803      	ldr	r0, [pc, #12]	; (800412c <MX_TIM3_Init+0xe8>)
 800411e:	f000 fb95 	bl	800484c <HAL_TIM_MspPostInit>

}
 8004122:	bf00      	nop
 8004124:	3738      	adds	r7, #56	; 0x38
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	240007d8 	.word	0x240007d8
 8004130:	40000400 	.word	0x40000400

08004134 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b08e      	sub	sp, #56	; 0x38
 8004138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800413a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800413e:	2200      	movs	r2, #0
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	605a      	str	r2, [r3, #4]
 8004144:	609a      	str	r2, [r3, #8]
 8004146:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004148:	f107 031c 	add.w	r3, r7, #28
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	605a      	str	r2, [r3, #4]
 8004152:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004154:	463b      	mov	r3, r7
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	605a      	str	r2, [r3, #4]
 800415c:	609a      	str	r2, [r3, #8]
 800415e:	60da      	str	r2, [r3, #12]
 8004160:	611a      	str	r2, [r3, #16]
 8004162:	615a      	str	r2, [r3, #20]
 8004164:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004166:	4b2d      	ldr	r3, [pc, #180]	; (800421c <MX_TIM4_Init+0xe8>)
 8004168:	4a2d      	ldr	r2, [pc, #180]	; (8004220 <MX_TIM4_Init+0xec>)
 800416a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200-1;
 800416c:	4b2b      	ldr	r3, [pc, #172]	; (800421c <MX_TIM4_Init+0xe8>)
 800416e:	22c7      	movs	r2, #199	; 0xc7
 8004170:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004172:	4b2a      	ldr	r3, [pc, #168]	; (800421c <MX_TIM4_Init+0xe8>)
 8004174:	2200      	movs	r2, #0
 8004176:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 8004178:	4b28      	ldr	r3, [pc, #160]	; (800421c <MX_TIM4_Init+0xe8>)
 800417a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800417e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004180:	4b26      	ldr	r3, [pc, #152]	; (800421c <MX_TIM4_Init+0xe8>)
 8004182:	2200      	movs	r2, #0
 8004184:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004186:	4b25      	ldr	r3, [pc, #148]	; (800421c <MX_TIM4_Init+0xe8>)
 8004188:	2280      	movs	r2, #128	; 0x80
 800418a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800418c:	4823      	ldr	r0, [pc, #140]	; (800421c <MX_TIM4_Init+0xe8>)
 800418e:	f006 ffd2 	bl	800b136 <HAL_TIM_Base_Init>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8004198:	f7ff f9c0 	bl	800351c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800419c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041a0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80041a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041a6:	4619      	mov	r1, r3
 80041a8:	481c      	ldr	r0, [pc, #112]	; (800421c <MX_TIM4_Init+0xe8>)
 80041aa:	f007 fc37 	bl	800ba1c <HAL_TIM_ConfigClockSource>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80041b4:	f7ff f9b2 	bl	800351c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80041b8:	4818      	ldr	r0, [pc, #96]	; (800421c <MX_TIM4_Init+0xe8>)
 80041ba:	f007 f88b 	bl	800b2d4 <HAL_TIM_PWM_Init>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80041c4:	f7ff f9aa 	bl	800351c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041c8:	2300      	movs	r3, #0
 80041ca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041cc:	2300      	movs	r3, #0
 80041ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80041d0:	f107 031c 	add.w	r3, r7, #28
 80041d4:	4619      	mov	r1, r3
 80041d6:	4811      	ldr	r0, [pc, #68]	; (800421c <MX_TIM4_Init+0xe8>)
 80041d8:	f008 f974 	bl	800c4c4 <HAL_TIMEx_MasterConfigSynchronization>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80041e2:	f7ff f99b 	bl	800351c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041e6:	2360      	movs	r3, #96	; 0x60
 80041e8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 80041ea:	f240 1339 	movw	r3, #313	; 0x139
 80041ee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041f0:	2300      	movs	r3, #0
 80041f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041f4:	2300      	movs	r3, #0
 80041f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80041f8:	463b      	mov	r3, r7
 80041fa:	2208      	movs	r2, #8
 80041fc:	4619      	mov	r1, r3
 80041fe:	4807      	ldr	r0, [pc, #28]	; (800421c <MX_TIM4_Init+0xe8>)
 8004200:	f007 faf8 	bl	800b7f4 <HAL_TIM_PWM_ConfigChannel>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800420a:	f7ff f987 	bl	800351c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800420e:	4803      	ldr	r0, [pc, #12]	; (800421c <MX_TIM4_Init+0xe8>)
 8004210:	f000 fb1c 	bl	800484c <HAL_TIM_MspPostInit>

}
 8004214:	bf00      	nop
 8004216:	3738      	adds	r7, #56	; 0x38
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	240006f4 	.word	0x240006f4
 8004220:	40000800 	.word	0x40000800

08004224 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b088      	sub	sp, #32
 8004228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800422a:	f107 0310 	add.w	r3, r7, #16
 800422e:	2200      	movs	r2, #0
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	605a      	str	r2, [r3, #4]
 8004234:	609a      	str	r2, [r3, #8]
 8004236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004238:	1d3b      	adds	r3, r7, #4
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	605a      	str	r2, [r3, #4]
 8004240:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004242:	4b1d      	ldr	r3, [pc, #116]	; (80042b8 <MX_TIM5_Init+0x94>)
 8004244:	4a1d      	ldr	r2, [pc, #116]	; (80042bc <MX_TIM5_Init+0x98>)
 8004246:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 8004248:	4b1b      	ldr	r3, [pc, #108]	; (80042b8 <MX_TIM5_Init+0x94>)
 800424a:	22c7      	movs	r2, #199	; 0xc7
 800424c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800424e:	4b1a      	ldr	r3, [pc, #104]	; (80042b8 <MX_TIM5_Init+0x94>)
 8004250:	2200      	movs	r2, #0
 8004252:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 8004254:	4b18      	ldr	r3, [pc, #96]	; (80042b8 <MX_TIM5_Init+0x94>)
 8004256:	f642 62df 	movw	r2, #11999	; 0x2edf
 800425a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800425c:	4b16      	ldr	r3, [pc, #88]	; (80042b8 <MX_TIM5_Init+0x94>)
 800425e:	2200      	movs	r2, #0
 8004260:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004262:	4b15      	ldr	r3, [pc, #84]	; (80042b8 <MX_TIM5_Init+0x94>)
 8004264:	2280      	movs	r2, #128	; 0x80
 8004266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004268:	4813      	ldr	r0, [pc, #76]	; (80042b8 <MX_TIM5_Init+0x94>)
 800426a:	f006 ff64 	bl	800b136 <HAL_TIM_Base_Init>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d001      	beq.n	8004278 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8004274:	f7ff f952 	bl	800351c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800427c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800427e:	f107 0310 	add.w	r3, r7, #16
 8004282:	4619      	mov	r1, r3
 8004284:	480c      	ldr	r0, [pc, #48]	; (80042b8 <MX_TIM5_Init+0x94>)
 8004286:	f007 fbc9 	bl	800ba1c <HAL_TIM_ConfigClockSource>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8004290:	f7ff f944 	bl	800351c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004294:	2300      	movs	r3, #0
 8004296:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004298:	2300      	movs	r3, #0
 800429a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800429c:	1d3b      	adds	r3, r7, #4
 800429e:	4619      	mov	r1, r3
 80042a0:	4805      	ldr	r0, [pc, #20]	; (80042b8 <MX_TIM5_Init+0x94>)
 80042a2:	f008 f90f 	bl	800c4c4 <HAL_TIMEx_MasterConfigSynchronization>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80042ac:	f7ff f936 	bl	800351c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80042b0:	bf00      	nop
 80042b2:	3720      	adds	r7, #32
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	2400078c 	.word	0x2400078c
 80042bc:	40000c00 	.word	0x40000c00

080042c0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042c6:	1d3b      	adds	r3, r7, #4
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	605a      	str	r2, [r3, #4]
 80042ce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80042d0:	4b14      	ldr	r3, [pc, #80]	; (8004324 <MX_TIM6_Init+0x64>)
 80042d2:	4a15      	ldr	r2, [pc, #84]	; (8004328 <MX_TIM6_Init+0x68>)
 80042d4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 80042d6:	4b13      	ldr	r3, [pc, #76]	; (8004324 <MX_TIM6_Init+0x64>)
 80042d8:	22c7      	movs	r2, #199	; 0xc7
 80042da:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042dc:	4b11      	ldr	r3, [pc, #68]	; (8004324 <MX_TIM6_Init+0x64>)
 80042de:	2200      	movs	r2, #0
 80042e0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6000-1;
 80042e2:	4b10      	ldr	r3, [pc, #64]	; (8004324 <MX_TIM6_Init+0x64>)
 80042e4:	f241 726f 	movw	r2, #5999	; 0x176f
 80042e8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80042ea:	4b0e      	ldr	r3, [pc, #56]	; (8004324 <MX_TIM6_Init+0x64>)
 80042ec:	2280      	movs	r2, #128	; 0x80
 80042ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80042f0:	480c      	ldr	r0, [pc, #48]	; (8004324 <MX_TIM6_Init+0x64>)
 80042f2:	f006 ff20 	bl	800b136 <HAL_TIM_Base_Init>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80042fc:	f7ff f90e 	bl	800351c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004300:	2300      	movs	r3, #0
 8004302:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004304:	2300      	movs	r3, #0
 8004306:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004308:	1d3b      	adds	r3, r7, #4
 800430a:	4619      	mov	r1, r3
 800430c:	4805      	ldr	r0, [pc, #20]	; (8004324 <MX_TIM6_Init+0x64>)
 800430e:	f008 f8d9 	bl	800c4c4 <HAL_TIMEx_MasterConfigSynchronization>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8004318:	f7ff f900 	bl	800351c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800431c:	bf00      	nop
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	24000870 	.word	0x24000870
 8004328:	40001000 	.word	0x40001000

0800432c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004332:	1d3b      	adds	r3, r7, #4
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	605a      	str	r2, [r3, #4]
 800433a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800433c:	4b14      	ldr	r3, [pc, #80]	; (8004390 <MX_TIM7_Init+0x64>)
 800433e:	4a15      	ldr	r2, [pc, #84]	; (8004394 <MX_TIM7_Init+0x68>)
 8004340:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 8004342:	4b13      	ldr	r3, [pc, #76]	; (8004390 <MX_TIM7_Init+0x64>)
 8004344:	22c7      	movs	r2, #199	; 0xc7
 8004346:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004348:	4b11      	ldr	r3, [pc, #68]	; (8004390 <MX_TIM7_Init+0x64>)
 800434a:	2200      	movs	r2, #0
 800434c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1200-1;
 800434e:	4b10      	ldr	r3, [pc, #64]	; (8004390 <MX_TIM7_Init+0x64>)
 8004350:	f240 42af 	movw	r2, #1199	; 0x4af
 8004354:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004356:	4b0e      	ldr	r3, [pc, #56]	; (8004390 <MX_TIM7_Init+0x64>)
 8004358:	2280      	movs	r2, #128	; 0x80
 800435a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800435c:	480c      	ldr	r0, [pc, #48]	; (8004390 <MX_TIM7_Init+0x64>)
 800435e:	f006 feea 	bl	800b136 <HAL_TIM_Base_Init>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004368:	f7ff f8d8 	bl	800351c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800436c:	2300      	movs	r3, #0
 800436e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004370:	2300      	movs	r3, #0
 8004372:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004374:	1d3b      	adds	r3, r7, #4
 8004376:	4619      	mov	r1, r3
 8004378:	4805      	ldr	r0, [pc, #20]	; (8004390 <MX_TIM7_Init+0x64>)
 800437a:	f008 f8a3 	bl	800c4c4 <HAL_TIMEx_MasterConfigSynchronization>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8004384:	f7ff f8ca 	bl	800351c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004388:	bf00      	nop
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	240009ec 	.word	0x240009ec
 8004394:	40001400 	.word	0x40001400

08004398 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800439e:	463b      	mov	r3, r7
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	605a      	str	r2, [r3, #4]
 80043a6:	609a      	str	r2, [r3, #8]
 80043a8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80043aa:	4b16      	ldr	r3, [pc, #88]	; (8004404 <MX_TIM12_Init+0x6c>)
 80043ac:	4a16      	ldr	r2, [pc, #88]	; (8004408 <MX_TIM12_Init+0x70>)
 80043ae:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 80043b0:	4b14      	ldr	r3, [pc, #80]	; (8004404 <MX_TIM12_Init+0x6c>)
 80043b2:	22c7      	movs	r2, #199	; 0xc7
 80043b4:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043b6:	4b13      	ldr	r3, [pc, #76]	; (8004404 <MX_TIM12_Init+0x6c>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 600-1;
 80043bc:	4b11      	ldr	r3, [pc, #68]	; (8004404 <MX_TIM12_Init+0x6c>)
 80043be:	f240 2257 	movw	r2, #599	; 0x257
 80043c2:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043c4:	4b0f      	ldr	r3, [pc, #60]	; (8004404 <MX_TIM12_Init+0x6c>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80043ca:	4b0e      	ldr	r3, [pc, #56]	; (8004404 <MX_TIM12_Init+0x6c>)
 80043cc:	2280      	movs	r2, #128	; 0x80
 80043ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80043d0:	480c      	ldr	r0, [pc, #48]	; (8004404 <MX_TIM12_Init+0x6c>)
 80043d2:	f006 feb0 	bl	800b136 <HAL_TIM_Base_Init>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 80043dc:	f7ff f89e 	bl	800351c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043e4:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80043e6:	463b      	mov	r3, r7
 80043e8:	4619      	mov	r1, r3
 80043ea:	4806      	ldr	r0, [pc, #24]	; (8004404 <MX_TIM12_Init+0x6c>)
 80043ec:	f007 fb16 	bl	800ba1c <HAL_TIM_ConfigClockSource>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 80043f6:	f7ff f891 	bl	800351c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80043fa:	bf00      	nop
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	240009a0 	.word	0x240009a0
 8004408:	40001800 	.word	0x40001800

0800440c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004410:	4b0e      	ldr	r3, [pc, #56]	; (800444c <MX_TIM13_Init+0x40>)
 8004412:	4a0f      	ldr	r2, [pc, #60]	; (8004450 <MX_TIM13_Init+0x44>)
 8004414:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 200-1;
 8004416:	4b0d      	ldr	r3, [pc, #52]	; (800444c <MX_TIM13_Init+0x40>)
 8004418:	22c7      	movs	r2, #199	; 0xc7
 800441a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800441c:	4b0b      	ldr	r3, [pc, #44]	; (800444c <MX_TIM13_Init+0x40>)
 800441e:	2200      	movs	r2, #0
 8004420:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 600-1;
 8004422:	4b0a      	ldr	r3, [pc, #40]	; (800444c <MX_TIM13_Init+0x40>)
 8004424:	f240 2257 	movw	r2, #599	; 0x257
 8004428:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800442a:	4b08      	ldr	r3, [pc, #32]	; (800444c <MX_TIM13_Init+0x40>)
 800442c:	2200      	movs	r2, #0
 800442e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004430:	4b06      	ldr	r3, [pc, #24]	; (800444c <MX_TIM13_Init+0x40>)
 8004432:	2280      	movs	r2, #128	; 0x80
 8004434:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004436:	4805      	ldr	r0, [pc, #20]	; (800444c <MX_TIM13_Init+0x40>)
 8004438:	f006 fe7d 	bl	800b136 <HAL_TIM_Base_Init>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8004442:	f7ff f86b 	bl	800351c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004446:	bf00      	nop
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	24000824 	.word	0x24000824
 8004450:	40001c00 	.word	0x40001c00

08004454 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004458:	4b0e      	ldr	r3, [pc, #56]	; (8004494 <MX_TIM14_Init+0x40>)
 800445a:	4a0f      	ldr	r2, [pc, #60]	; (8004498 <MX_TIM14_Init+0x44>)
 800445c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 200-1;
 800445e:	4b0d      	ldr	r3, [pc, #52]	; (8004494 <MX_TIM14_Init+0x40>)
 8004460:	22c7      	movs	r2, #199	; 0xc7
 8004462:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004464:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <MX_TIM14_Init+0x40>)
 8004466:	2200      	movs	r2, #0
 8004468:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2400-1;
 800446a:	4b0a      	ldr	r3, [pc, #40]	; (8004494 <MX_TIM14_Init+0x40>)
 800446c:	f640 125f 	movw	r2, #2399	; 0x95f
 8004470:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004472:	4b08      	ldr	r3, [pc, #32]	; (8004494 <MX_TIM14_Init+0x40>)
 8004474:	2200      	movs	r2, #0
 8004476:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004478:	4b06      	ldr	r3, [pc, #24]	; (8004494 <MX_TIM14_Init+0x40>)
 800447a:	2280      	movs	r2, #128	; 0x80
 800447c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800447e:	4805      	ldr	r0, [pc, #20]	; (8004494 <MX_TIM14_Init+0x40>)
 8004480:	f006 fe59 	bl	800b136 <HAL_TIM_Base_Init>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800448a:	f7ff f847 	bl	800351c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800448e:	bf00      	nop
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	24000954 	.word	0x24000954
 8004498:	40002000 	.word	0x40002000

0800449c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b09a      	sub	sp, #104	; 0x68
 80044a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80044a6:	2200      	movs	r2, #0
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	605a      	str	r2, [r3, #4]
 80044ac:	609a      	str	r2, [r3, #8]
 80044ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80044b4:	2200      	movs	r2, #0
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	605a      	str	r2, [r3, #4]
 80044ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80044bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80044c0:	2200      	movs	r2, #0
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	605a      	str	r2, [r3, #4]
 80044c6:	609a      	str	r2, [r3, #8]
 80044c8:	60da      	str	r2, [r3, #12]
 80044ca:	611a      	str	r2, [r3, #16]
 80044cc:	615a      	str	r2, [r3, #20]
 80044ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80044d0:	1d3b      	adds	r3, r7, #4
 80044d2:	222c      	movs	r2, #44	; 0x2c
 80044d4:	2100      	movs	r1, #0
 80044d6:	4618      	mov	r0, r3
 80044d8:	f00b f9c2 	bl	800f860 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80044dc:	4b3f      	ldr	r3, [pc, #252]	; (80045dc <MX_TIM15_Init+0x140>)
 80044de:	4a40      	ldr	r2, [pc, #256]	; (80045e0 <MX_TIM15_Init+0x144>)
 80044e0:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 80044e2:	4b3e      	ldr	r3, [pc, #248]	; (80045dc <MX_TIM15_Init+0x140>)
 80044e4:	22ef      	movs	r2, #239	; 0xef
 80044e6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044e8:	4b3c      	ldr	r3, [pc, #240]	; (80045dc <MX_TIM15_Init+0x140>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 80044ee:	4b3b      	ldr	r3, [pc, #236]	; (80045dc <MX_TIM15_Init+0x140>)
 80044f0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80044f4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044f6:	4b39      	ldr	r3, [pc, #228]	; (80045dc <MX_TIM15_Init+0x140>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80044fc:	4b37      	ldr	r3, [pc, #220]	; (80045dc <MX_TIM15_Init+0x140>)
 80044fe:	2200      	movs	r2, #0
 8004500:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004502:	4b36      	ldr	r3, [pc, #216]	; (80045dc <MX_TIM15_Init+0x140>)
 8004504:	2280      	movs	r2, #128	; 0x80
 8004506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8004508:	4834      	ldr	r0, [pc, #208]	; (80045dc <MX_TIM15_Init+0x140>)
 800450a:	f006 fe14 	bl	800b136 <HAL_TIM_Base_Init>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d001      	beq.n	8004518 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8004514:	f7ff f802 	bl	800351c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800451c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800451e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004522:	4619      	mov	r1, r3
 8004524:	482d      	ldr	r0, [pc, #180]	; (80045dc <MX_TIM15_Init+0x140>)
 8004526:	f007 fa79 	bl	800ba1c <HAL_TIM_ConfigClockSource>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8004530:	f7fe fff4 	bl	800351c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8004534:	4829      	ldr	r0, [pc, #164]	; (80045dc <MX_TIM15_Init+0x140>)
 8004536:	f006 fecd 	bl	800b2d4 <HAL_TIM_PWM_Init>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8004540:	f7fe ffec 	bl	800351c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004544:	2300      	movs	r3, #0
 8004546:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004548:	2300      	movs	r3, #0
 800454a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800454c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004550:	4619      	mov	r1, r3
 8004552:	4822      	ldr	r0, [pc, #136]	; (80045dc <MX_TIM15_Init+0x140>)
 8004554:	f007 ffb6 	bl	800c4c4 <HAL_TIMEx_MasterConfigSynchronization>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800455e:	f7fe ffdd 	bl	800351c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004562:	2360      	movs	r3, #96	; 0x60
 8004564:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8004566:	f240 1339 	movw	r3, #313	; 0x139
 800456a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800456c:	2300      	movs	r3, #0
 800456e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004570:	2300      	movs	r3, #0
 8004572:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004574:	2300      	movs	r3, #0
 8004576:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004578:	2300      	movs	r3, #0
 800457a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800457c:	2300      	movs	r3, #0
 800457e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004580:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004584:	2204      	movs	r2, #4
 8004586:	4619      	mov	r1, r3
 8004588:	4814      	ldr	r0, [pc, #80]	; (80045dc <MX_TIM15_Init+0x140>)
 800458a:	f007 f933 	bl	800b7f4 <HAL_TIM_PWM_ConfigChannel>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8004594:	f7fe ffc2 	bl	800351c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004598:	2300      	movs	r3, #0
 800459a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800459c:	2300      	movs	r3, #0
 800459e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80045a0:	2300      	movs	r3, #0
 80045a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80045a4:	2300      	movs	r3, #0
 80045a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80045ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80045b2:	2300      	movs	r3, #0
 80045b4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80045b6:	2300      	movs	r3, #0
 80045b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80045ba:	1d3b      	adds	r3, r7, #4
 80045bc:	4619      	mov	r1, r3
 80045be:	4807      	ldr	r0, [pc, #28]	; (80045dc <MX_TIM15_Init+0x140>)
 80045c0:	f008 f80e 	bl	800c5e0 <HAL_TIMEx_ConfigBreakDeadTime>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 80045ca:	f7fe ffa7 	bl	800351c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80045ce:	4803      	ldr	r0, [pc, #12]	; (80045dc <MX_TIM15_Init+0x140>)
 80045d0:	f000 f93c 	bl	800484c <HAL_TIM_MspPostInit>

}
 80045d4:	bf00      	nop
 80045d6:	3768      	adds	r7, #104	; 0x68
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	24000740 	.word	0x24000740
 80045e0:	40014000 	.word	0x40014000

080045e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b08e      	sub	sp, #56	; 0x38
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a8b      	ldr	r2, [pc, #556]	; (8004820 <HAL_TIM_Base_MspInit+0x23c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d10f      	bne.n	8004616 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80045f6:	4b8b      	ldr	r3, [pc, #556]	; (8004824 <HAL_TIM_Base_MspInit+0x240>)
 80045f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045fc:	4a89      	ldr	r2, [pc, #548]	; (8004824 <HAL_TIM_Base_MspInit+0x240>)
 80045fe:	f043 0301 	orr.w	r3, r3, #1
 8004602:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004606:	4b87      	ldr	r3, [pc, #540]	; (8004824 <HAL_TIM_Base_MspInit+0x240>)
 8004608:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	637b      	str	r3, [r7, #52]	; 0x34
 8004612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8004614:	e100      	b.n	8004818 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM2)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800461e:	d10f      	bne.n	8004640 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004620:	4b80      	ldr	r3, [pc, #512]	; (8004824 <HAL_TIM_Base_MspInit+0x240>)
 8004622:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004626:	4a7f      	ldr	r2, [pc, #508]	; (8004824 <HAL_TIM_Base_MspInit+0x240>)
 8004628:	f043 0301 	orr.w	r3, r3, #1
 800462c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004630:	4b7c      	ldr	r3, [pc, #496]	; (8004824 <HAL_TIM_Base_MspInit+0x240>)
 8004632:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	633b      	str	r3, [r7, #48]	; 0x30
 800463c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800463e:	e0eb      	b.n	8004818 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM3)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a78      	ldr	r2, [pc, #480]	; (8004828 <HAL_TIM_Base_MspInit+0x244>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d10f      	bne.n	800466a <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800464a:	4b76      	ldr	r3, [pc, #472]	; (8004824 <HAL_TIM_Base_MspInit+0x240>)
 800464c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004650:	4a74      	ldr	r2, [pc, #464]	; (8004824 <HAL_TIM_Base_MspInit+0x240>)
 8004652:	f043 0302 	orr.w	r3, r3, #2
 8004656:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800465a:	4b72      	ldr	r3, [pc, #456]	; (8004824 <HAL_TIM_Base_MspInit+0x240>)
 800465c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004668:	e0d6      	b.n	8004818 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM4)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a6f      	ldr	r2, [pc, #444]	; (800482c <HAL_TIM_Base_MspInit+0x248>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d10f      	bne.n	8004694 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004674:	4b6b      	ldr	r3, [pc, #428]	; (8004824 <HAL_TIM_Base_MspInit+0x240>)
 8004676:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800467a:	4a6a      	ldr	r2, [pc, #424]	; (8004824 <HAL_TIM_Base_MspInit+0x240>)
 800467c:	f043 0304 	orr.w	r3, r3, #4
 8004680:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004684:	4b67      	ldr	r3, [pc, #412]	; (8004824 <HAL_TIM_Base_MspInit+0x240>)
 8004686:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800468a:	f003 0304 	and.w	r3, r3, #4
 800468e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004690:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004692:	e0c1      	b.n	8004818 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM5)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a65      	ldr	r2, [pc, #404]	; (8004830 <HAL_TIM_Base_MspInit+0x24c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d117      	bne.n	80046ce <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800469e:	4b61      	ldr	r3, [pc, #388]	; (8004824 <HAL_TIM_Base_MspInit+0x240>)
 80046a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046a4:	4a5f      	ldr	r2, [pc, #380]	; (8004824 <HAL_TIM_Base_MspInit+0x240>)
 80046a6:	f043 0308 	orr.w	r3, r3, #8
 80046aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80046ae:	4b5d      	ldr	r3, [pc, #372]	; (8004824 <HAL_TIM_Base_MspInit+0x240>)
 80046b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046b4:	f003 0308 	and.w	r3, r3, #8
 80046b8:	627b      	str	r3, [r7, #36]	; 0x24
 80046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80046bc:	2200      	movs	r2, #0
 80046be:	2100      	movs	r1, #0
 80046c0:	2032      	movs	r0, #50	; 0x32
 80046c2:	f000 fe66 	bl	8005392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80046c6:	2032      	movs	r0, #50	; 0x32
 80046c8:	f000 fe7d 	bl	80053c6 <HAL_NVIC_EnableIRQ>
}
 80046cc:	e0a4      	b.n	8004818 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM6)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a58      	ldr	r2, [pc, #352]	; (8004834 <HAL_TIM_Base_MspInit+0x250>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d117      	bne.n	8004708 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80046d8:	4b52      	ldr	r3, [pc, #328]	; (8004824 <HAL_TIM_Base_MspInit+0x240>)
 80046da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046de:	4a51      	ldr	r2, [pc, #324]	; (8004824 <HAL_TIM_Base_MspInit+0x240>)
 80046e0:	f043 0310 	orr.w	r3, r3, #16
 80046e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80046e8:	4b4e      	ldr	r3, [pc, #312]	; (8004824 <HAL_TIM_Base_MspInit+0x240>)
 80046ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046ee:	f003 0310 	and.w	r3, r3, #16
 80046f2:	623b      	str	r3, [r7, #32]
 80046f4:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80046f6:	2200      	movs	r2, #0
 80046f8:	2100      	movs	r1, #0
 80046fa:	2036      	movs	r0, #54	; 0x36
 80046fc:	f000 fe49 	bl	8005392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004700:	2036      	movs	r0, #54	; 0x36
 8004702:	f000 fe60 	bl	80053c6 <HAL_NVIC_EnableIRQ>
}
 8004706:	e087      	b.n	8004818 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM7)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a4a      	ldr	r2, [pc, #296]	; (8004838 <HAL_TIM_Base_MspInit+0x254>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d117      	bne.n	8004742 <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004712:	4b44      	ldr	r3, [pc, #272]	; (8004824 <HAL_TIM_Base_MspInit+0x240>)
 8004714:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004718:	4a42      	ldr	r2, [pc, #264]	; (8004824 <HAL_TIM_Base_MspInit+0x240>)
 800471a:	f043 0320 	orr.w	r3, r3, #32
 800471e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004722:	4b40      	ldr	r3, [pc, #256]	; (8004824 <HAL_TIM_Base_MspInit+0x240>)
 8004724:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004728:	f003 0320 	and.w	r3, r3, #32
 800472c:	61fb      	str	r3, [r7, #28]
 800472e:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004730:	2200      	movs	r2, #0
 8004732:	2100      	movs	r1, #0
 8004734:	2037      	movs	r0, #55	; 0x37
 8004736:	f000 fe2c 	bl	8005392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800473a:	2037      	movs	r0, #55	; 0x37
 800473c:	f000 fe43 	bl	80053c6 <HAL_NVIC_EnableIRQ>
}
 8004740:	e06a      	b.n	8004818 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM12)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a3d      	ldr	r2, [pc, #244]	; (800483c <HAL_TIM_Base_MspInit+0x258>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d117      	bne.n	800477c <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800474c:	4b35      	ldr	r3, [pc, #212]	; (8004824 <HAL_TIM_Base_MspInit+0x240>)
 800474e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004752:	4a34      	ldr	r2, [pc, #208]	; (8004824 <HAL_TIM_Base_MspInit+0x240>)
 8004754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004758:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800475c:	4b31      	ldr	r3, [pc, #196]	; (8004824 <HAL_TIM_Base_MspInit+0x240>)
 800475e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004766:	61bb      	str	r3, [r7, #24]
 8004768:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800476a:	2200      	movs	r2, #0
 800476c:	2100      	movs	r1, #0
 800476e:	202b      	movs	r0, #43	; 0x2b
 8004770:	f000 fe0f 	bl	8005392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8004774:	202b      	movs	r0, #43	; 0x2b
 8004776:	f000 fe26 	bl	80053c6 <HAL_NVIC_EnableIRQ>
}
 800477a:	e04d      	b.n	8004818 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM13)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a2f      	ldr	r2, [pc, #188]	; (8004840 <HAL_TIM_Base_MspInit+0x25c>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d117      	bne.n	80047b6 <HAL_TIM_Base_MspInit+0x1d2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004786:	4b27      	ldr	r3, [pc, #156]	; (8004824 <HAL_TIM_Base_MspInit+0x240>)
 8004788:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800478c:	4a25      	ldr	r2, [pc, #148]	; (8004824 <HAL_TIM_Base_MspInit+0x240>)
 800478e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004792:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004796:	4b23      	ldr	r3, [pc, #140]	; (8004824 <HAL_TIM_Base_MspInit+0x240>)
 8004798:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800479c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a0:	617b      	str	r3, [r7, #20]
 80047a2:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80047a4:	2200      	movs	r2, #0
 80047a6:	2100      	movs	r1, #0
 80047a8:	202c      	movs	r0, #44	; 0x2c
 80047aa:	f000 fdf2 	bl	8005392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80047ae:	202c      	movs	r0, #44	; 0x2c
 80047b0:	f000 fe09 	bl	80053c6 <HAL_NVIC_EnableIRQ>
}
 80047b4:	e030      	b.n	8004818 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM14)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a22      	ldr	r2, [pc, #136]	; (8004844 <HAL_TIM_Base_MspInit+0x260>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d117      	bne.n	80047f0 <HAL_TIM_Base_MspInit+0x20c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80047c0:	4b18      	ldr	r3, [pc, #96]	; (8004824 <HAL_TIM_Base_MspInit+0x240>)
 80047c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047c6:	4a17      	ldr	r2, [pc, #92]	; (8004824 <HAL_TIM_Base_MspInit+0x240>)
 80047c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80047d0:	4b14      	ldr	r3, [pc, #80]	; (8004824 <HAL_TIM_Base_MspInit+0x240>)
 80047d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047da:	613b      	str	r3, [r7, #16]
 80047dc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80047de:	2200      	movs	r2, #0
 80047e0:	2100      	movs	r1, #0
 80047e2:	202d      	movs	r0, #45	; 0x2d
 80047e4:	f000 fdd5 	bl	8005392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80047e8:	202d      	movs	r0, #45	; 0x2d
 80047ea:	f000 fdec 	bl	80053c6 <HAL_NVIC_EnableIRQ>
}
 80047ee:	e013      	b.n	8004818 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM15)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a14      	ldr	r2, [pc, #80]	; (8004848 <HAL_TIM_Base_MspInit+0x264>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d10e      	bne.n	8004818 <HAL_TIM_Base_MspInit+0x234>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80047fa:	4b0a      	ldr	r3, [pc, #40]	; (8004824 <HAL_TIM_Base_MspInit+0x240>)
 80047fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004800:	4a08      	ldr	r2, [pc, #32]	; (8004824 <HAL_TIM_Base_MspInit+0x240>)
 8004802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004806:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800480a:	4b06      	ldr	r3, [pc, #24]	; (8004824 <HAL_TIM_Base_MspInit+0x240>)
 800480c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004814:	60fb      	str	r3, [r7, #12]
 8004816:	68fb      	ldr	r3, [r7, #12]
}
 8004818:	bf00      	nop
 800481a:	3738      	adds	r7, #56	; 0x38
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	40010000 	.word	0x40010000
 8004824:	58024400 	.word	0x58024400
 8004828:	40000400 	.word	0x40000400
 800482c:	40000800 	.word	0x40000800
 8004830:	40000c00 	.word	0x40000c00
 8004834:	40001000 	.word	0x40001000
 8004838:	40001400 	.word	0x40001400
 800483c:	40001800 	.word	0x40001800
 8004840:	40001c00 	.word	0x40001c00
 8004844:	40002000 	.word	0x40002000
 8004848:	40014000 	.word	0x40014000

0800484c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b08c      	sub	sp, #48	; 0x30
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004854:	f107 031c 	add.w	r3, r7, #28
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	605a      	str	r2, [r3, #4]
 800485e:	609a      	str	r2, [r3, #8]
 8004860:	60da      	str	r2, [r3, #12]
 8004862:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a5e      	ldr	r2, [pc, #376]	; (80049e4 <HAL_TIM_MspPostInit+0x198>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d120      	bne.n	80048b0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800486e:	4b5e      	ldr	r3, [pc, #376]	; (80049e8 <HAL_TIM_MspPostInit+0x19c>)
 8004870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004874:	4a5c      	ldr	r2, [pc, #368]	; (80049e8 <HAL_TIM_MspPostInit+0x19c>)
 8004876:	f043 0310 	orr.w	r3, r3, #16
 800487a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800487e:	4b5a      	ldr	r3, [pc, #360]	; (80049e8 <HAL_TIM_MspPostInit+0x19c>)
 8004880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004884:	f003 0310 	and.w	r3, r3, #16
 8004888:	61bb      	str	r3, [r7, #24]
 800488a:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 800488c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004892:	2302      	movs	r3, #2
 8004894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004896:	2300      	movs	r3, #0
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800489a:	2300      	movs	r3, #0
 800489c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800489e:	2301      	movs	r3, #1
 80048a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 80048a2:	f107 031c 	add.w	r3, r7, #28
 80048a6:	4619      	mov	r1, r3
 80048a8:	4850      	ldr	r0, [pc, #320]	; (80049ec <HAL_TIM_MspPostInit+0x1a0>)
 80048aa:	f003 fdeb 	bl	8008484 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80048ae:	e094      	b.n	80049da <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM2)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b8:	d120      	bne.n	80048fc <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048ba:	4b4b      	ldr	r3, [pc, #300]	; (80049e8 <HAL_TIM_MspPostInit+0x19c>)
 80048bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048c0:	4a49      	ldr	r2, [pc, #292]	; (80049e8 <HAL_TIM_MspPostInit+0x19c>)
 80048c2:	f043 0302 	orr.w	r3, r3, #2
 80048c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80048ca:	4b47      	ldr	r3, [pc, #284]	; (80049e8 <HAL_TIM_MspPostInit+0x19c>)
 80048cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	617b      	str	r3, [r7, #20]
 80048d6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 80048d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048de:	2302      	movs	r3, #2
 80048e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e2:	2300      	movs	r3, #0
 80048e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048e6:	2300      	movs	r3, #0
 80048e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80048ea:	2301      	movs	r3, #1
 80048ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 80048ee:	f107 031c 	add.w	r3, r7, #28
 80048f2:	4619      	mov	r1, r3
 80048f4:	483e      	ldr	r0, [pc, #248]	; (80049f0 <HAL_TIM_MspPostInit+0x1a4>)
 80048f6:	f003 fdc5 	bl	8008484 <HAL_GPIO_Init>
}
 80048fa:	e06e      	b.n	80049da <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM3)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a3c      	ldr	r2, [pc, #240]	; (80049f4 <HAL_TIM_MspPostInit+0x1a8>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d11f      	bne.n	8004946 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004906:	4b38      	ldr	r3, [pc, #224]	; (80049e8 <HAL_TIM_MspPostInit+0x19c>)
 8004908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800490c:	4a36      	ldr	r2, [pc, #216]	; (80049e8 <HAL_TIM_MspPostInit+0x19c>)
 800490e:	f043 0301 	orr.w	r3, r3, #1
 8004912:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004916:	4b34      	ldr	r3, [pc, #208]	; (80049e8 <HAL_TIM_MspPostInit+0x19c>)
 8004918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	613b      	str	r3, [r7, #16]
 8004922:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8004924:	2340      	movs	r3, #64	; 0x40
 8004926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004928:	2302      	movs	r3, #2
 800492a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800492c:	2300      	movs	r3, #0
 800492e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004930:	2300      	movs	r3, #0
 8004932:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004934:	2302      	movs	r3, #2
 8004936:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 8004938:	f107 031c 	add.w	r3, r7, #28
 800493c:	4619      	mov	r1, r3
 800493e:	482e      	ldr	r0, [pc, #184]	; (80049f8 <HAL_TIM_MspPostInit+0x1ac>)
 8004940:	f003 fda0 	bl	8008484 <HAL_GPIO_Init>
}
 8004944:	e049      	b.n	80049da <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM4)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a2c      	ldr	r2, [pc, #176]	; (80049fc <HAL_TIM_MspPostInit+0x1b0>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d120      	bne.n	8004992 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004950:	4b25      	ldr	r3, [pc, #148]	; (80049e8 <HAL_TIM_MspPostInit+0x19c>)
 8004952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004956:	4a24      	ldr	r2, [pc, #144]	; (80049e8 <HAL_TIM_MspPostInit+0x19c>)
 8004958:	f043 0302 	orr.w	r3, r3, #2
 800495c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004960:	4b21      	ldr	r3, [pc, #132]	; (80049e8 <HAL_TIM_MspPostInit+0x19c>)
 8004962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	60fb      	str	r3, [r7, #12]
 800496c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 800496e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004974:	2302      	movs	r3, #2
 8004976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004978:	2300      	movs	r3, #0
 800497a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800497c:	2300      	movs	r3, #0
 800497e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004980:	2302      	movs	r3, #2
 8004982:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8004984:	f107 031c 	add.w	r3, r7, #28
 8004988:	4619      	mov	r1, r3
 800498a:	4819      	ldr	r0, [pc, #100]	; (80049f0 <HAL_TIM_MspPostInit+0x1a4>)
 800498c:	f003 fd7a 	bl	8008484 <HAL_GPIO_Init>
}
 8004990:	e023      	b.n	80049da <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM15)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a1a      	ldr	r2, [pc, #104]	; (8004a00 <HAL_TIM_MspPostInit+0x1b4>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d11e      	bne.n	80049da <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800499c:	4b12      	ldr	r3, [pc, #72]	; (80049e8 <HAL_TIM_MspPostInit+0x19c>)
 800499e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049a2:	4a11      	ldr	r2, [pc, #68]	; (80049e8 <HAL_TIM_MspPostInit+0x19c>)
 80049a4:	f043 0310 	orr.w	r3, r3, #16
 80049a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80049ac:	4b0e      	ldr	r3, [pc, #56]	; (80049e8 <HAL_TIM_MspPostInit+0x19c>)
 80049ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049b2:	f003 0310 	and.w	r3, r3, #16
 80049b6:	60bb      	str	r3, [r7, #8]
 80049b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 80049ba:	2340      	movs	r3, #64	; 0x40
 80049bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049be:	2302      	movs	r3, #2
 80049c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049c2:	2300      	movs	r3, #0
 80049c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049c6:	2300      	movs	r3, #0
 80049c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80049ca:	2304      	movs	r3, #4
 80049cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 80049ce:	f107 031c 	add.w	r3, r7, #28
 80049d2:	4619      	mov	r1, r3
 80049d4:	4805      	ldr	r0, [pc, #20]	; (80049ec <HAL_TIM_MspPostInit+0x1a0>)
 80049d6:	f003 fd55 	bl	8008484 <HAL_GPIO_Init>
}
 80049da:	bf00      	nop
 80049dc:	3730      	adds	r7, #48	; 0x30
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40010000 	.word	0x40010000
 80049e8:	58024400 	.word	0x58024400
 80049ec:	58021000 	.word	0x58021000
 80049f0:	58020400 	.word	0x58020400
 80049f4:	40000400 	.word	0x40000400
 80049f8:	58020000 	.word	0x58020000
 80049fc:	40000800 	.word	0x40000800
 8004a00:	40014000 	.word	0x40014000

08004a04 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004a08:	4b25      	ldr	r3, [pc, #148]	; (8004aa0 <MX_UART4_Init+0x9c>)
 8004a0a:	4a26      	ldr	r2, [pc, #152]	; (8004aa4 <MX_UART4_Init+0xa0>)
 8004a0c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 8004a0e:	4b24      	ldr	r3, [pc, #144]	; (8004aa0 <MX_UART4_Init+0x9c>)
 8004a10:	4a25      	ldr	r2, [pc, #148]	; (8004aa8 <MX_UART4_Init+0xa4>)
 8004a12:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004a14:	4b22      	ldr	r3, [pc, #136]	; (8004aa0 <MX_UART4_Init+0x9c>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004a1a:	4b21      	ldr	r3, [pc, #132]	; (8004aa0 <MX_UART4_Init+0x9c>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004a20:	4b1f      	ldr	r3, [pc, #124]	; (8004aa0 <MX_UART4_Init+0x9c>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004a26:	4b1e      	ldr	r3, [pc, #120]	; (8004aa0 <MX_UART4_Init+0x9c>)
 8004a28:	220c      	movs	r2, #12
 8004a2a:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a2c:	4b1c      	ldr	r3, [pc, #112]	; (8004aa0 <MX_UART4_Init+0x9c>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a32:	4b1b      	ldr	r3, [pc, #108]	; (8004aa0 <MX_UART4_Init+0x9c>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004a38:	4b19      	ldr	r3, [pc, #100]	; (8004aa0 <MX_UART4_Init+0x9c>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004a3e:	4b18      	ldr	r3, [pc, #96]	; (8004aa0 <MX_UART4_Init+0x9c>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8004a44:	4b16      	ldr	r3, [pc, #88]	; (8004aa0 <MX_UART4_Init+0x9c>)
 8004a46:	2208      	movs	r2, #8
 8004a48:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8004a4a:	4b15      	ldr	r3, [pc, #84]	; (8004aa0 <MX_UART4_Init+0x9c>)
 8004a4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004a50:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004a52:	4813      	ldr	r0, [pc, #76]	; (8004aa0 <MX_UART4_Init+0x9c>)
 8004a54:	f007 fe60 	bl	800c718 <HAL_UART_Init>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 8004a5e:	f7fe fd5d 	bl	800351c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8004a62:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8004a66:	480e      	ldr	r0, [pc, #56]	; (8004aa0 <MX_UART4_Init+0x9c>)
 8004a68:	f009 fee7 	bl	800e83a <HAL_UARTEx_SetTxFifoThreshold>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <MX_UART4_Init+0x72>
  {
    Error_Handler();
 8004a72:	f7fe fd53 	bl	800351c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8004a76:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8004a7a:	4809      	ldr	r0, [pc, #36]	; (8004aa0 <MX_UART4_Init+0x9c>)
 8004a7c:	f009 ff1b 	bl	800e8b6 <HAL_UARTEx_SetRxFifoThreshold>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <MX_UART4_Init+0x86>
  {
    Error_Handler();
 8004a86:	f7fe fd49 	bl	800351c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 8004a8a:	4805      	ldr	r0, [pc, #20]	; (8004aa0 <MX_UART4_Init+0x9c>)
 8004a8c:	f009 fe61 	bl	800e752 <HAL_UARTEx_EnableFifoMode>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <MX_UART4_Init+0x96>
  {
    Error_Handler();
 8004a96:	f7fe fd41 	bl	800351c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004a9a:	bf00      	nop
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	24000d38 	.word	0x24000d38
 8004aa4:	40004c00 	.word	0x40004c00
 8004aa8:	001e8480 	.word	0x001e8480

08004aac <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8004ab0:	4b23      	ldr	r3, [pc, #140]	; (8004b40 <MX_UART7_Init+0x94>)
 8004ab2:	4a24      	ldr	r2, [pc, #144]	; (8004b44 <MX_UART7_Init+0x98>)
 8004ab4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8004ab6:	4b22      	ldr	r3, [pc, #136]	; (8004b40 <MX_UART7_Init+0x94>)
 8004ab8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004abc:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8004abe:	4b20      	ldr	r3, [pc, #128]	; (8004b40 <MX_UART7_Init+0x94>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8004ac4:	4b1e      	ldr	r3, [pc, #120]	; (8004b40 <MX_UART7_Init+0x94>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8004aca:	4b1d      	ldr	r3, [pc, #116]	; (8004b40 <MX_UART7_Init+0x94>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8004ad0:	4b1b      	ldr	r3, [pc, #108]	; (8004b40 <MX_UART7_Init+0x94>)
 8004ad2:	220c      	movs	r2, #12
 8004ad4:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ad6:	4b1a      	ldr	r3, [pc, #104]	; (8004b40 <MX_UART7_Init+0x94>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8004adc:	4b18      	ldr	r3, [pc, #96]	; (8004b40 <MX_UART7_Init+0x94>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004ae2:	4b17      	ldr	r3, [pc, #92]	; (8004b40 <MX_UART7_Init+0x94>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004ae8:	4b15      	ldr	r3, [pc, #84]	; (8004b40 <MX_UART7_Init+0x94>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004aee:	4b14      	ldr	r3, [pc, #80]	; (8004b40 <MX_UART7_Init+0x94>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8004af4:	4812      	ldr	r0, [pc, #72]	; (8004b40 <MX_UART7_Init+0x94>)
 8004af6:	f007 fe0f 	bl	800c718 <HAL_UART_Init>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8004b00:	f7fe fd0c 	bl	800351c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8004b04:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8004b08:	480d      	ldr	r0, [pc, #52]	; (8004b40 <MX_UART7_Init+0x94>)
 8004b0a:	f009 fe96 	bl	800e83a <HAL_UARTEx_SetTxFifoThreshold>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 8004b14:	f7fe fd02 	bl	800351c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8004b18:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8004b1c:	4808      	ldr	r0, [pc, #32]	; (8004b40 <MX_UART7_Init+0x94>)
 8004b1e:	f009 feca 	bl	800e8b6 <HAL_UARTEx_SetRxFifoThreshold>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <MX_UART7_Init+0x80>
  {
    Error_Handler();
 8004b28:	f7fe fcf8 	bl	800351c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 8004b2c:	4804      	ldr	r0, [pc, #16]	; (8004b40 <MX_UART7_Init+0x94>)
 8004b2e:	f009 fe10 	bl	800e752 <HAL_UARTEx_EnableFifoMode>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d001      	beq.n	8004b3c <MX_UART7_Init+0x90>
  {
    Error_Handler();
 8004b38:	f7fe fcf0 	bl	800351c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8004b3c:	bf00      	nop
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	24000ab0 	.word	0x24000ab0
 8004b44:	40007800 	.word	0x40007800

08004b48 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004b4c:	4b22      	ldr	r3, [pc, #136]	; (8004bd8 <MX_USART3_UART_Init+0x90>)
 8004b4e:	4a23      	ldr	r2, [pc, #140]	; (8004bdc <MX_USART3_UART_Init+0x94>)
 8004b50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004b52:	4b21      	ldr	r3, [pc, #132]	; (8004bd8 <MX_USART3_UART_Init+0x90>)
 8004b54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004b58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004b5a:	4b1f      	ldr	r3, [pc, #124]	; (8004bd8 <MX_USART3_UART_Init+0x90>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004b60:	4b1d      	ldr	r3, [pc, #116]	; (8004bd8 <MX_USART3_UART_Init+0x90>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004b66:	4b1c      	ldr	r3, [pc, #112]	; (8004bd8 <MX_USART3_UART_Init+0x90>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004b6c:	4b1a      	ldr	r3, [pc, #104]	; (8004bd8 <MX_USART3_UART_Init+0x90>)
 8004b6e:	220c      	movs	r2, #12
 8004b70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b72:	4b19      	ldr	r3, [pc, #100]	; (8004bd8 <MX_USART3_UART_Init+0x90>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b78:	4b17      	ldr	r3, [pc, #92]	; (8004bd8 <MX_USART3_UART_Init+0x90>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b7e:	4b16      	ldr	r3, [pc, #88]	; (8004bd8 <MX_USART3_UART_Init+0x90>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004b84:	4b14      	ldr	r3, [pc, #80]	; (8004bd8 <MX_USART3_UART_Init+0x90>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b8a:	4b13      	ldr	r3, [pc, #76]	; (8004bd8 <MX_USART3_UART_Init+0x90>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004b90:	4811      	ldr	r0, [pc, #68]	; (8004bd8 <MX_USART3_UART_Init+0x90>)
 8004b92:	f007 fdc1 	bl	800c718 <HAL_UART_Init>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004b9c:	f7fe fcbe 	bl	800351c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	480d      	ldr	r0, [pc, #52]	; (8004bd8 <MX_USART3_UART_Init+0x90>)
 8004ba4:	f009 fe49 	bl	800e83a <HAL_UARTEx_SetTxFifoThreshold>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8004bae:	f7fe fcb5 	bl	800351c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	4808      	ldr	r0, [pc, #32]	; (8004bd8 <MX_USART3_UART_Init+0x90>)
 8004bb6:	f009 fe7e 	bl	800e8b6 <HAL_UARTEx_SetRxFifoThreshold>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8004bc0:	f7fe fcac 	bl	800351c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004bc4:	4804      	ldr	r0, [pc, #16]	; (8004bd8 <MX_USART3_UART_Init+0x90>)
 8004bc6:	f009 fdff 	bl	800e7c8 <HAL_UARTEx_DisableFifoMode>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8004bd0:	f7fe fca4 	bl	800351c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004bd4:	bf00      	nop
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	24000bb8 	.word	0x24000bb8
 8004bdc:	40004800 	.word	0x40004800

08004be0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b0bc      	sub	sp, #240	; 0xf0
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004be8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004bec:	2200      	movs	r2, #0
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	605a      	str	r2, [r3, #4]
 8004bf2:	609a      	str	r2, [r3, #8]
 8004bf4:	60da      	str	r2, [r3, #12]
 8004bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004bf8:	f107 0320 	add.w	r3, r7, #32
 8004bfc:	22bc      	movs	r2, #188	; 0xbc
 8004bfe:	2100      	movs	r1, #0
 8004c00:	4618      	mov	r0, r3
 8004c02:	f00a fe2d 	bl	800f860 <memset>
  if(uartHandle->Instance==UART4)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4aa1      	ldr	r2, [pc, #644]	; (8004e90 <HAL_UART_MspInit+0x2b0>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	f040 80b7 	bne.w	8004d80 <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8004c12:	2302      	movs	r3, #2
 8004c14:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004c16:	2300      	movs	r3, #0
 8004c18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c1c:	f107 0320 	add.w	r3, r7, #32
 8004c20:	4618      	mov	r0, r3
 8004c22:	f004 fe05 	bl	8009830 <HAL_RCCEx_PeriphCLKConfig>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8004c2c:	f7fe fc76 	bl	800351c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004c30:	4b98      	ldr	r3, [pc, #608]	; (8004e94 <HAL_UART_MspInit+0x2b4>)
 8004c32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c36:	4a97      	ldr	r2, [pc, #604]	; (8004e94 <HAL_UART_MspInit+0x2b4>)
 8004c38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c3c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004c40:	4b94      	ldr	r3, [pc, #592]	; (8004e94 <HAL_UART_MspInit+0x2b4>)
 8004c42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c4a:	61fb      	str	r3, [r7, #28]
 8004c4c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c4e:	4b91      	ldr	r3, [pc, #580]	; (8004e94 <HAL_UART_MspInit+0x2b4>)
 8004c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c54:	4a8f      	ldr	r2, [pc, #572]	; (8004e94 <HAL_UART_MspInit+0x2b4>)
 8004c56:	f043 0308 	orr.w	r3, r3, #8
 8004c5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004c5e:	4b8d      	ldr	r3, [pc, #564]	; (8004e94 <HAL_UART_MspInit+0x2b4>)
 8004c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c64:	f003 0308 	and.w	r3, r3, #8
 8004c68:	61bb      	str	r3, [r7, #24]
 8004c6a:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c72:	2302      	movs	r3, #2
 8004c74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004c84:	2308      	movs	r3, #8
 8004c86:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c8a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4881      	ldr	r0, [pc, #516]	; (8004e98 <HAL_UART_MspInit+0x2b8>)
 8004c92:	f003 fbf7 	bl	8008484 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 8004c96:	4b81      	ldr	r3, [pc, #516]	; (8004e9c <HAL_UART_MspInit+0x2bc>)
 8004c98:	4a81      	ldr	r2, [pc, #516]	; (8004ea0 <HAL_UART_MspInit+0x2c0>)
 8004c9a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8004c9c:	4b7f      	ldr	r3, [pc, #508]	; (8004e9c <HAL_UART_MspInit+0x2bc>)
 8004c9e:	223f      	movs	r2, #63	; 0x3f
 8004ca0:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ca2:	4b7e      	ldr	r3, [pc, #504]	; (8004e9c <HAL_UART_MspInit+0x2bc>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ca8:	4b7c      	ldr	r3, [pc, #496]	; (8004e9c <HAL_UART_MspInit+0x2bc>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004cae:	4b7b      	ldr	r3, [pc, #492]	; (8004e9c <HAL_UART_MspInit+0x2bc>)
 8004cb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cb4:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004cb6:	4b79      	ldr	r3, [pc, #484]	; (8004e9c <HAL_UART_MspInit+0x2bc>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004cbc:	4b77      	ldr	r3, [pc, #476]	; (8004e9c <HAL_UART_MspInit+0x2bc>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8004cc2:	4b76      	ldr	r3, [pc, #472]	; (8004e9c <HAL_UART_MspInit+0x2bc>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004cc8:	4b74      	ldr	r3, [pc, #464]	; (8004e9c <HAL_UART_MspInit+0x2bc>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004cce:	4b73      	ldr	r3, [pc, #460]	; (8004e9c <HAL_UART_MspInit+0x2bc>)
 8004cd0:	2204      	movs	r2, #4
 8004cd2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004cd4:	4b71      	ldr	r3, [pc, #452]	; (8004e9c <HAL_UART_MspInit+0x2bc>)
 8004cd6:	2203      	movs	r2, #3
 8004cd8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8004cda:	4b70      	ldr	r3, [pc, #448]	; (8004e9c <HAL_UART_MspInit+0x2bc>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004ce0:	4b6e      	ldr	r3, [pc, #440]	; (8004e9c <HAL_UART_MspInit+0x2bc>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8004ce6:	486d      	ldr	r0, [pc, #436]	; (8004e9c <HAL_UART_MspInit+0x2bc>)
 8004ce8:	f000 fd92 	bl	8005810 <HAL_DMA_Init>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8004cf2:	f7fe fc13 	bl	800351c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a68      	ldr	r2, [pc, #416]	; (8004e9c <HAL_UART_MspInit+0x2bc>)
 8004cfa:	67da      	str	r2, [r3, #124]	; 0x7c
 8004cfc:	4a67      	ldr	r2, [pc, #412]	; (8004e9c <HAL_UART_MspInit+0x2bc>)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8004d02:	4b68      	ldr	r3, [pc, #416]	; (8004ea4 <HAL_UART_MspInit+0x2c4>)
 8004d04:	4a68      	ldr	r2, [pc, #416]	; (8004ea8 <HAL_UART_MspInit+0x2c8>)
 8004d06:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8004d08:	4b66      	ldr	r3, [pc, #408]	; (8004ea4 <HAL_UART_MspInit+0x2c4>)
 8004d0a:	2240      	movs	r2, #64	; 0x40
 8004d0c:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d0e:	4b65      	ldr	r3, [pc, #404]	; (8004ea4 <HAL_UART_MspInit+0x2c4>)
 8004d10:	2240      	movs	r2, #64	; 0x40
 8004d12:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d14:	4b63      	ldr	r3, [pc, #396]	; (8004ea4 <HAL_UART_MspInit+0x2c4>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d1a:	4b62      	ldr	r3, [pc, #392]	; (8004ea4 <HAL_UART_MspInit+0x2c4>)
 8004d1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d20:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d22:	4b60      	ldr	r3, [pc, #384]	; (8004ea4 <HAL_UART_MspInit+0x2c4>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d28:	4b5e      	ldr	r3, [pc, #376]	; (8004ea4 <HAL_UART_MspInit+0x2c4>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8004d2e:	4b5d      	ldr	r3, [pc, #372]	; (8004ea4 <HAL_UART_MspInit+0x2c4>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004d34:	4b5b      	ldr	r3, [pc, #364]	; (8004ea4 <HAL_UART_MspInit+0x2c4>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004d3a:	4b5a      	ldr	r3, [pc, #360]	; (8004ea4 <HAL_UART_MspInit+0x2c4>)
 8004d3c:	2204      	movs	r2, #4
 8004d3e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004d40:	4b58      	ldr	r3, [pc, #352]	; (8004ea4 <HAL_UART_MspInit+0x2c4>)
 8004d42:	2203      	movs	r2, #3
 8004d44:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8004d46:	4b57      	ldr	r3, [pc, #348]	; (8004ea4 <HAL_UART_MspInit+0x2c4>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004d4c:	4b55      	ldr	r3, [pc, #340]	; (8004ea4 <HAL_UART_MspInit+0x2c4>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8004d52:	4854      	ldr	r0, [pc, #336]	; (8004ea4 <HAL_UART_MspInit+0x2c4>)
 8004d54:	f000 fd5c 	bl	8005810 <HAL_DMA_Init>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 8004d5e:	f7fe fbdd 	bl	800351c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a4f      	ldr	r2, [pc, #316]	; (8004ea4 <HAL_UART_MspInit+0x2c4>)
 8004d66:	679a      	str	r2, [r3, #120]	; 0x78
 8004d68:	4a4e      	ldr	r2, [pc, #312]	; (8004ea4 <HAL_UART_MspInit+0x2c4>)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004d6e:	2200      	movs	r2, #0
 8004d70:	2100      	movs	r1, #0
 8004d72:	2034      	movs	r0, #52	; 0x34
 8004d74:	f000 fb0d 	bl	8005392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004d78:	2034      	movs	r0, #52	; 0x34
 8004d7a:	f000 fb24 	bl	80053c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004d7e:	e153      	b.n	8005028 <HAL_UART_MspInit+0x448>
  else if(uartHandle->Instance==UART7)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a49      	ldr	r2, [pc, #292]	; (8004eac <HAL_UART_MspInit+0x2cc>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	f040 8098 	bne.w	8004ebc <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004d90:	2300      	movs	r3, #0
 8004d92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004d96:	f107 0320 	add.w	r3, r7, #32
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f004 fd48 	bl	8009830 <HAL_RCCEx_PeriphCLKConfig>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 8004da6:	f7fe fbb9 	bl	800351c <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8004daa:	4b3a      	ldr	r3, [pc, #232]	; (8004e94 <HAL_UART_MspInit+0x2b4>)
 8004dac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004db0:	4a38      	ldr	r2, [pc, #224]	; (8004e94 <HAL_UART_MspInit+0x2b4>)
 8004db2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004db6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004dba:	4b36      	ldr	r3, [pc, #216]	; (8004e94 <HAL_UART_MspInit+0x2b4>)
 8004dbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004dc0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004dc4:	617b      	str	r3, [r7, #20]
 8004dc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004dc8:	4b32      	ldr	r3, [pc, #200]	; (8004e94 <HAL_UART_MspInit+0x2b4>)
 8004dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004dce:	4a31      	ldr	r2, [pc, #196]	; (8004e94 <HAL_UART_MspInit+0x2b4>)
 8004dd0:	f043 0310 	orr.w	r3, r3, #16
 8004dd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004dd8:	4b2e      	ldr	r3, [pc, #184]	; (8004e94 <HAL_UART_MspInit+0x2b4>)
 8004dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004dde:	f003 0310 	and.w	r3, r3, #16
 8004de2:	613b      	str	r3, [r7, #16]
 8004de4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004de6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004dea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dee:	2302      	movs	r3, #2
 8004df0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004df4:	2300      	movs	r3, #0
 8004df6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8004e00:	2307      	movs	r3, #7
 8004e02:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e06:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	4828      	ldr	r0, [pc, #160]	; (8004eb0 <HAL_UART_MspInit+0x2d0>)
 8004e0e:	f003 fb39 	bl	8008484 <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 8004e12:	4b28      	ldr	r3, [pc, #160]	; (8004eb4 <HAL_UART_MspInit+0x2d4>)
 8004e14:	4a28      	ldr	r2, [pc, #160]	; (8004eb8 <HAL_UART_MspInit+0x2d8>)
 8004e16:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8004e18:	4b26      	ldr	r3, [pc, #152]	; (8004eb4 <HAL_UART_MspInit+0x2d4>)
 8004e1a:	2250      	movs	r2, #80	; 0x50
 8004e1c:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004e1e:	4b25      	ldr	r3, [pc, #148]	; (8004eb4 <HAL_UART_MspInit+0x2d4>)
 8004e20:	2240      	movs	r2, #64	; 0x40
 8004e22:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e24:	4b23      	ldr	r3, [pc, #140]	; (8004eb4 <HAL_UART_MspInit+0x2d4>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004e2a:	4b22      	ldr	r3, [pc, #136]	; (8004eb4 <HAL_UART_MspInit+0x2d4>)
 8004e2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e30:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e32:	4b20      	ldr	r3, [pc, #128]	; (8004eb4 <HAL_UART_MspInit+0x2d4>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e38:	4b1e      	ldr	r3, [pc, #120]	; (8004eb4 <HAL_UART_MspInit+0x2d4>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8004e3e:	4b1d      	ldr	r3, [pc, #116]	; (8004eb4 <HAL_UART_MspInit+0x2d4>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004e44:	4b1b      	ldr	r3, [pc, #108]	; (8004eb4 <HAL_UART_MspInit+0x2d4>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004e4a:	4b1a      	ldr	r3, [pc, #104]	; (8004eb4 <HAL_UART_MspInit+0x2d4>)
 8004e4c:	2204      	movs	r2, #4
 8004e4e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004e50:	4b18      	ldr	r3, [pc, #96]	; (8004eb4 <HAL_UART_MspInit+0x2d4>)
 8004e52:	2203      	movs	r2, #3
 8004e54:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8004e56:	4b17      	ldr	r3, [pc, #92]	; (8004eb4 <HAL_UART_MspInit+0x2d4>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004e5c:	4b15      	ldr	r3, [pc, #84]	; (8004eb4 <HAL_UART_MspInit+0x2d4>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8004e62:	4814      	ldr	r0, [pc, #80]	; (8004eb4 <HAL_UART_MspInit+0x2d4>)
 8004e64:	f000 fcd4 	bl	8005810 <HAL_DMA_Init>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <HAL_UART_MspInit+0x292>
      Error_Handler();
 8004e6e:	f7fe fb55 	bl	800351c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a0f      	ldr	r2, [pc, #60]	; (8004eb4 <HAL_UART_MspInit+0x2d4>)
 8004e76:	679a      	str	r2, [r3, #120]	; 0x78
 8004e78:	4a0e      	ldr	r2, [pc, #56]	; (8004eb4 <HAL_UART_MspInit+0x2d4>)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8004e7e:	2200      	movs	r2, #0
 8004e80:	2100      	movs	r1, #0
 8004e82:	2052      	movs	r0, #82	; 0x52
 8004e84:	f000 fa85 	bl	8005392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8004e88:	2052      	movs	r0, #82	; 0x52
 8004e8a:	f000 fa9c 	bl	80053c6 <HAL_NVIC_EnableIRQ>
}
 8004e8e:	e0cb      	b.n	8005028 <HAL_UART_MspInit+0x448>
 8004e90:	40004c00 	.word	0x40004c00
 8004e94:	58024400 	.word	0x58024400
 8004e98:	58020c00 	.word	0x58020c00
 8004e9c:	24000a38 	.word	0x24000a38
 8004ea0:	40020058 	.word	0x40020058
 8004ea4:	24000dc8 	.word	0x24000dc8
 8004ea8:	40020070 	.word	0x40020070
 8004eac:	40007800 	.word	0x40007800
 8004eb0:	58021000 	.word	0x58021000
 8004eb4:	24000cc0 	.word	0x24000cc0
 8004eb8:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART3)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a5b      	ldr	r2, [pc, #364]	; (8005030 <HAL_UART_MspInit+0x450>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	f040 80b0 	bne.w	8005028 <HAL_UART_MspInit+0x448>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004ec8:	2302      	movs	r3, #2
 8004eca:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ed2:	f107 0320 	add.w	r3, r7, #32
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f004 fcaa 	bl	8009830 <HAL_RCCEx_PeriphCLKConfig>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <HAL_UART_MspInit+0x306>
      Error_Handler();
 8004ee2:	f7fe fb1b 	bl	800351c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004ee6:	4b53      	ldr	r3, [pc, #332]	; (8005034 <HAL_UART_MspInit+0x454>)
 8004ee8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004eec:	4a51      	ldr	r2, [pc, #324]	; (8005034 <HAL_UART_MspInit+0x454>)
 8004eee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ef2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004ef6:	4b4f      	ldr	r3, [pc, #316]	; (8005034 <HAL_UART_MspInit+0x454>)
 8004ef8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004efc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f04:	4b4b      	ldr	r3, [pc, #300]	; (8005034 <HAL_UART_MspInit+0x454>)
 8004f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f0a:	4a4a      	ldr	r2, [pc, #296]	; (8005034 <HAL_UART_MspInit+0x454>)
 8004f0c:	f043 0308 	orr.w	r3, r3, #8
 8004f10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004f14:	4b47      	ldr	r3, [pc, #284]	; (8005034 <HAL_UART_MspInit+0x454>)
 8004f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f1a:	f003 0308 	and.w	r3, r3, #8
 8004f1e:	60bb      	str	r3, [r7, #8]
 8004f20:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004f22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004f26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f30:	2300      	movs	r3, #0
 8004f32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f36:	2300      	movs	r3, #0
 8004f38:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004f3c:	2307      	movs	r3, #7
 8004f3e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f42:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004f46:	4619      	mov	r1, r3
 8004f48:	483b      	ldr	r0, [pc, #236]	; (8005038 <HAL_UART_MspInit+0x458>)
 8004f4a:	f003 fa9b 	bl	8008484 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004f4e:	4b3b      	ldr	r3, [pc, #236]	; (800503c <HAL_UART_MspInit+0x45c>)
 8004f50:	4a3b      	ldr	r2, [pc, #236]	; (8005040 <HAL_UART_MspInit+0x460>)
 8004f52:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8004f54:	4b39      	ldr	r3, [pc, #228]	; (800503c <HAL_UART_MspInit+0x45c>)
 8004f56:	222d      	movs	r2, #45	; 0x2d
 8004f58:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004f5a:	4b38      	ldr	r3, [pc, #224]	; (800503c <HAL_UART_MspInit+0x45c>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f60:	4b36      	ldr	r3, [pc, #216]	; (800503c <HAL_UART_MspInit+0x45c>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004f66:	4b35      	ldr	r3, [pc, #212]	; (800503c <HAL_UART_MspInit+0x45c>)
 8004f68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f6c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f6e:	4b33      	ldr	r3, [pc, #204]	; (800503c <HAL_UART_MspInit+0x45c>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f74:	4b31      	ldr	r3, [pc, #196]	; (800503c <HAL_UART_MspInit+0x45c>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004f7a:	4b30      	ldr	r3, [pc, #192]	; (800503c <HAL_UART_MspInit+0x45c>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004f80:	4b2e      	ldr	r3, [pc, #184]	; (800503c <HAL_UART_MspInit+0x45c>)
 8004f82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004f86:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004f88:	4b2c      	ldr	r3, [pc, #176]	; (800503c <HAL_UART_MspInit+0x45c>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004f8e:	482b      	ldr	r0, [pc, #172]	; (800503c <HAL_UART_MspInit+0x45c>)
 8004f90:	f000 fc3e 	bl	8005810 <HAL_DMA_Init>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <HAL_UART_MspInit+0x3be>
      Error_Handler();
 8004f9a:	f7fe fabf 	bl	800351c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a26      	ldr	r2, [pc, #152]	; (800503c <HAL_UART_MspInit+0x45c>)
 8004fa2:	67da      	str	r2, [r3, #124]	; 0x7c
 8004fa4:	4a25      	ldr	r2, [pc, #148]	; (800503c <HAL_UART_MspInit+0x45c>)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8004faa:	4b26      	ldr	r3, [pc, #152]	; (8005044 <HAL_UART_MspInit+0x464>)
 8004fac:	4a26      	ldr	r2, [pc, #152]	; (8005048 <HAL_UART_MspInit+0x468>)
 8004fae:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8004fb0:	4b24      	ldr	r3, [pc, #144]	; (8005044 <HAL_UART_MspInit+0x464>)
 8004fb2:	222e      	movs	r2, #46	; 0x2e
 8004fb4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004fb6:	4b23      	ldr	r3, [pc, #140]	; (8005044 <HAL_UART_MspInit+0x464>)
 8004fb8:	2240      	movs	r2, #64	; 0x40
 8004fba:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004fbc:	4b21      	ldr	r3, [pc, #132]	; (8005044 <HAL_UART_MspInit+0x464>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004fc2:	4b20      	ldr	r3, [pc, #128]	; (8005044 <HAL_UART_MspInit+0x464>)
 8004fc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fc8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004fca:	4b1e      	ldr	r3, [pc, #120]	; (8005044 <HAL_UART_MspInit+0x464>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004fd0:	4b1c      	ldr	r3, [pc, #112]	; (8005044 <HAL_UART_MspInit+0x464>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004fd6:	4b1b      	ldr	r3, [pc, #108]	; (8005044 <HAL_UART_MspInit+0x464>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004fdc:	4b19      	ldr	r3, [pc, #100]	; (8005044 <HAL_UART_MspInit+0x464>)
 8004fde:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004fe2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004fe4:	4b17      	ldr	r3, [pc, #92]	; (8005044 <HAL_UART_MspInit+0x464>)
 8004fe6:	2204      	movs	r2, #4
 8004fe8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004fea:	4b16      	ldr	r3, [pc, #88]	; (8005044 <HAL_UART_MspInit+0x464>)
 8004fec:	2203      	movs	r2, #3
 8004fee:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8004ff0:	4b14      	ldr	r3, [pc, #80]	; (8005044 <HAL_UART_MspInit+0x464>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004ff6:	4b13      	ldr	r3, [pc, #76]	; (8005044 <HAL_UART_MspInit+0x464>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004ffc:	4811      	ldr	r0, [pc, #68]	; (8005044 <HAL_UART_MspInit+0x464>)
 8004ffe:	f000 fc07 	bl	8005810 <HAL_DMA_Init>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <HAL_UART_MspInit+0x42c>
      Error_Handler();
 8005008:	f7fe fa88 	bl	800351c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a0d      	ldr	r2, [pc, #52]	; (8005044 <HAL_UART_MspInit+0x464>)
 8005010:	679a      	str	r2, [r3, #120]	; 0x78
 8005012:	4a0c      	ldr	r2, [pc, #48]	; (8005044 <HAL_UART_MspInit+0x464>)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005018:	2200      	movs	r2, #0
 800501a:	2100      	movs	r1, #0
 800501c:	2027      	movs	r0, #39	; 0x27
 800501e:	f000 f9b8 	bl	8005392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005022:	2027      	movs	r0, #39	; 0x27
 8005024:	f000 f9cf 	bl	80053c6 <HAL_NVIC_EnableIRQ>
}
 8005028:	bf00      	nop
 800502a:	37f0      	adds	r7, #240	; 0xf0
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	40004800 	.word	0x40004800
 8005034:	58024400 	.word	0x58024400
 8005038:	58020c00 	.word	0x58020c00
 800503c:	24000b40 	.word	0x24000b40
 8005040:	40020028 	.word	0x40020028
 8005044:	24000c48 	.word	0x24000c48
 8005048:	40020040 	.word	0x40020040

0800504c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
 ldr   sp, =_estack      /* set stack pointer */
 800504c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005084 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005050:	f7fe fe46 	bl	8003ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005054:	480c      	ldr	r0, [pc, #48]	; (8005088 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005056:	490d      	ldr	r1, [pc, #52]	; (800508c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005058:	4a0d      	ldr	r2, [pc, #52]	; (8005090 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800505a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800505c:	e002      	b.n	8005064 <LoopCopyDataInit>

0800505e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800505e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005062:	3304      	adds	r3, #4

08005064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005068:	d3f9      	bcc.n	800505e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800506a:	4a0a      	ldr	r2, [pc, #40]	; (8005094 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800506c:	4c0a      	ldr	r4, [pc, #40]	; (8005098 <LoopFillZerobss+0x22>)
  movs r3, #0
 800506e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005070:	e001      	b.n	8005076 <LoopFillZerobss>

08005072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005074:	3204      	adds	r2, #4

08005076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005078:	d3fb      	bcc.n	8005072 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800507a:	f00a fbbf 	bl	800f7fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800507e:	f7fe f837 	bl	80030f0 <main>
  bx  lr
 8005082:	4770      	bx	lr
 ldr   sp, =_estack      /* set stack pointer */
 8005084:	24001458 	.word	0x24001458
  ldr r0, =_sdata
 8005088:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800508c:	24000218 	.word	0x24000218
  ldr r2, =_sidata
 8005090:	08013f84 	.word	0x08013f84
  ldr r2, =_sbss
 8005094:	24000218 	.word	0x24000218
  ldr r4, =_ebss
 8005098:	24000e54 	.word	0x24000e54

0800509c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800509c:	e7fe      	b.n	800509c <ADC3_IRQHandler>
	...

080050a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80050a6:	2003      	movs	r0, #3
 80050a8:	f000 f968 	bl	800537c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80050ac:	f004 f9ea 	bl	8009484 <HAL_RCC_GetSysClockFreq>
 80050b0:	4602      	mov	r2, r0
 80050b2:	4b15      	ldr	r3, [pc, #84]	; (8005108 <HAL_Init+0x68>)
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	0a1b      	lsrs	r3, r3, #8
 80050b8:	f003 030f 	and.w	r3, r3, #15
 80050bc:	4913      	ldr	r1, [pc, #76]	; (800510c <HAL_Init+0x6c>)
 80050be:	5ccb      	ldrb	r3, [r1, r3]
 80050c0:	f003 031f 	and.w	r3, r3, #31
 80050c4:	fa22 f303 	lsr.w	r3, r2, r3
 80050c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050ca:	4b0f      	ldr	r3, [pc, #60]	; (8005108 <HAL_Init+0x68>)
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	4a0e      	ldr	r2, [pc, #56]	; (800510c <HAL_Init+0x6c>)
 80050d4:	5cd3      	ldrb	r3, [r2, r3]
 80050d6:	f003 031f 	and.w	r3, r3, #31
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	fa22 f303 	lsr.w	r3, r2, r3
 80050e0:	4a0b      	ldr	r2, [pc, #44]	; (8005110 <HAL_Init+0x70>)
 80050e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80050e4:	4a0b      	ldr	r2, [pc, #44]	; (8005114 <HAL_Init+0x74>)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80050ea:	2000      	movs	r0, #0
 80050ec:	f000 f814 	bl	8005118 <HAL_InitTick>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e002      	b.n	8005100 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80050fa:	f7fe fc3b 	bl	8003974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	58024400 	.word	0x58024400
 800510c:	08012118 	.word	0x08012118
 8005110:	2400003c 	.word	0x2400003c
 8005114:	24000038 	.word	0x24000038

08005118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005120:	4b15      	ldr	r3, [pc, #84]	; (8005178 <HAL_InitTick+0x60>)
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e021      	b.n	8005170 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800512c:	4b13      	ldr	r3, [pc, #76]	; (800517c <HAL_InitTick+0x64>)
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	4b11      	ldr	r3, [pc, #68]	; (8005178 <HAL_InitTick+0x60>)
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	4619      	mov	r1, r3
 8005136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800513a:	fbb3 f3f1 	udiv	r3, r3, r1
 800513e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005142:	4618      	mov	r0, r3
 8005144:	f000 f94d 	bl	80053e2 <HAL_SYSTICK_Config>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d001      	beq.n	8005152 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e00e      	b.n	8005170 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b0f      	cmp	r3, #15
 8005156:	d80a      	bhi.n	800516e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005158:	2200      	movs	r2, #0
 800515a:	6879      	ldr	r1, [r7, #4]
 800515c:	f04f 30ff 	mov.w	r0, #4294967295
 8005160:	f000 f917 	bl	8005392 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005164:	4a06      	ldr	r2, [pc, #24]	; (8005180 <HAL_InitTick+0x68>)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800516a:	2300      	movs	r3, #0
 800516c:	e000      	b.n	8005170 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
}
 8005170:	4618      	mov	r0, r3
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	24000044 	.word	0x24000044
 800517c:	24000038 	.word	0x24000038
 8005180:	24000040 	.word	0x24000040

08005184 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005188:	4b06      	ldr	r3, [pc, #24]	; (80051a4 <HAL_IncTick+0x20>)
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	461a      	mov	r2, r3
 800518e:	4b06      	ldr	r3, [pc, #24]	; (80051a8 <HAL_IncTick+0x24>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4413      	add	r3, r2
 8005194:	4a04      	ldr	r2, [pc, #16]	; (80051a8 <HAL_IncTick+0x24>)
 8005196:	6013      	str	r3, [r2, #0]
}
 8005198:	bf00      	nop
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	24000044 	.word	0x24000044
 80051a8:	24000e40 	.word	0x24000e40

080051ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
  return uwTick;
 80051b0:	4b03      	ldr	r3, [pc, #12]	; (80051c0 <HAL_GetTick+0x14>)
 80051b2:	681b      	ldr	r3, [r3, #0]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	24000e40 	.word	0x24000e40

080051c4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80051c8:	4b03      	ldr	r3, [pc, #12]	; (80051d8 <HAL_GetREVID+0x14>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	0c1b      	lsrs	r3, r3, #16
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr
 80051d8:	5c001000 	.word	0x5c001000

080051dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f003 0307 	and.w	r3, r3, #7
 80051ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051ec:	4b0b      	ldr	r3, [pc, #44]	; (800521c <__NVIC_SetPriorityGrouping+0x40>)
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80051f8:	4013      	ands	r3, r2
 80051fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005204:	4b06      	ldr	r3, [pc, #24]	; (8005220 <__NVIC_SetPriorityGrouping+0x44>)
 8005206:	4313      	orrs	r3, r2
 8005208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800520a:	4a04      	ldr	r2, [pc, #16]	; (800521c <__NVIC_SetPriorityGrouping+0x40>)
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	60d3      	str	r3, [r2, #12]
}
 8005210:	bf00      	nop
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	e000ed00 	.word	0xe000ed00
 8005220:	05fa0000 	.word	0x05fa0000

08005224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005224:	b480      	push	{r7}
 8005226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005228:	4b04      	ldr	r3, [pc, #16]	; (800523c <__NVIC_GetPriorityGrouping+0x18>)
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	0a1b      	lsrs	r3, r3, #8
 800522e:	f003 0307 	and.w	r3, r3, #7
}
 8005232:	4618      	mov	r0, r3
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr
 800523c:	e000ed00 	.word	0xe000ed00

08005240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	4603      	mov	r3, r0
 8005248:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800524a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800524e:	2b00      	cmp	r3, #0
 8005250:	db0b      	blt.n	800526a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005252:	88fb      	ldrh	r3, [r7, #6]
 8005254:	f003 021f 	and.w	r2, r3, #31
 8005258:	4907      	ldr	r1, [pc, #28]	; (8005278 <__NVIC_EnableIRQ+0x38>)
 800525a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800525e:	095b      	lsrs	r3, r3, #5
 8005260:	2001      	movs	r0, #1
 8005262:	fa00 f202 	lsl.w	r2, r0, r2
 8005266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800526a:	bf00      	nop
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	e000e100 	.word	0xe000e100

0800527c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	4603      	mov	r3, r0
 8005284:	6039      	str	r1, [r7, #0]
 8005286:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005288:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800528c:	2b00      	cmp	r3, #0
 800528e:	db0a      	blt.n	80052a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	b2da      	uxtb	r2, r3
 8005294:	490c      	ldr	r1, [pc, #48]	; (80052c8 <__NVIC_SetPriority+0x4c>)
 8005296:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800529a:	0112      	lsls	r2, r2, #4
 800529c:	b2d2      	uxtb	r2, r2
 800529e:	440b      	add	r3, r1
 80052a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052a4:	e00a      	b.n	80052bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	4908      	ldr	r1, [pc, #32]	; (80052cc <__NVIC_SetPriority+0x50>)
 80052ac:	88fb      	ldrh	r3, [r7, #6]
 80052ae:	f003 030f 	and.w	r3, r3, #15
 80052b2:	3b04      	subs	r3, #4
 80052b4:	0112      	lsls	r2, r2, #4
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	440b      	add	r3, r1
 80052ba:	761a      	strb	r2, [r3, #24]
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	e000e100 	.word	0xe000e100
 80052cc:	e000ed00 	.word	0xe000ed00

080052d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b089      	sub	sp, #36	; 0x24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	f1c3 0307 	rsb	r3, r3, #7
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	bf28      	it	cs
 80052ee:	2304      	movcs	r3, #4
 80052f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	3304      	adds	r3, #4
 80052f6:	2b06      	cmp	r3, #6
 80052f8:	d902      	bls.n	8005300 <NVIC_EncodePriority+0x30>
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	3b03      	subs	r3, #3
 80052fe:	e000      	b.n	8005302 <NVIC_EncodePriority+0x32>
 8005300:	2300      	movs	r3, #0
 8005302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005304:	f04f 32ff 	mov.w	r2, #4294967295
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	fa02 f303 	lsl.w	r3, r2, r3
 800530e:	43da      	mvns	r2, r3
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	401a      	ands	r2, r3
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005318:	f04f 31ff 	mov.w	r1, #4294967295
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	fa01 f303 	lsl.w	r3, r1, r3
 8005322:	43d9      	mvns	r1, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005328:	4313      	orrs	r3, r2
         );
}
 800532a:	4618      	mov	r0, r3
 800532c:	3724      	adds	r7, #36	; 0x24
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
	...

08005338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	3b01      	subs	r3, #1
 8005344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005348:	d301      	bcc.n	800534e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800534a:	2301      	movs	r3, #1
 800534c:	e00f      	b.n	800536e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800534e:	4a0a      	ldr	r2, [pc, #40]	; (8005378 <SysTick_Config+0x40>)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	3b01      	subs	r3, #1
 8005354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005356:	210f      	movs	r1, #15
 8005358:	f04f 30ff 	mov.w	r0, #4294967295
 800535c:	f7ff ff8e 	bl	800527c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005360:	4b05      	ldr	r3, [pc, #20]	; (8005378 <SysTick_Config+0x40>)
 8005362:	2200      	movs	r2, #0
 8005364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005366:	4b04      	ldr	r3, [pc, #16]	; (8005378 <SysTick_Config+0x40>)
 8005368:	2207      	movs	r2, #7
 800536a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	e000e010 	.word	0xe000e010

0800537c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f7ff ff29 	bl	80051dc <__NVIC_SetPriorityGrouping>
}
 800538a:	bf00      	nop
 800538c:	3708      	adds	r7, #8
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b086      	sub	sp, #24
 8005396:	af00      	add	r7, sp, #0
 8005398:	4603      	mov	r3, r0
 800539a:	60b9      	str	r1, [r7, #8]
 800539c:	607a      	str	r2, [r7, #4]
 800539e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053a0:	f7ff ff40 	bl	8005224 <__NVIC_GetPriorityGrouping>
 80053a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	68b9      	ldr	r1, [r7, #8]
 80053aa:	6978      	ldr	r0, [r7, #20]
 80053ac:	f7ff ff90 	bl	80052d0 <NVIC_EncodePriority>
 80053b0:	4602      	mov	r2, r0
 80053b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80053b6:	4611      	mov	r1, r2
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7ff ff5f 	bl	800527c <__NVIC_SetPriority>
}
 80053be:	bf00      	nop
 80053c0:	3718      	adds	r7, #24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b082      	sub	sp, #8
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	4603      	mov	r3, r0
 80053ce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7ff ff33 	bl	8005240 <__NVIC_EnableIRQ>
}
 80053da:	bf00      	nop
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b082      	sub	sp, #8
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7ff ffa4 	bl	8005338 <SysTick_Config>
 80053f0:	4603      	mov	r3, r0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3708      	adds	r7, #8
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80053fe:	f000 f802 	bl	8005406 <HAL_SYSTICK_Callback>
}
 8005402:	bf00      	nop
 8005404:	bd80      	pop	{r7, pc}

08005406 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8005406:	b480      	push	{r7}
 8005408:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800540a:	bf00      	nop
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e054      	b.n	80054d0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	7f5b      	ldrb	r3, [r3, #29]
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	d105      	bne.n	800543c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7fb ff54 	bl	80012e4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2202      	movs	r2, #2
 8005440:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	791b      	ldrb	r3, [r3, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10c      	bne.n	8005464 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a22      	ldr	r2, [pc, #136]	; (80054d8 <HAL_CRC_Init+0xc4>)
 8005450:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	689a      	ldr	r2, [r3, #8]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 0218 	bic.w	r2, r2, #24
 8005460:	609a      	str	r2, [r3, #8]
 8005462:	e00c      	b.n	800547e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6899      	ldr	r1, [r3, #8]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	461a      	mov	r2, r3
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f948 	bl	8005704 <HAL_CRCEx_Polynomial_Set>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d001      	beq.n	800547e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e028      	b.n	80054d0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	795b      	ldrb	r3, [r3, #5]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d105      	bne.n	8005492 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f04f 32ff 	mov.w	r2, #4294967295
 800548e:	611a      	str	r2, [r3, #16]
 8005490:	e004      	b.n	800549c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	6912      	ldr	r2, [r2, #16]
 800549a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	695a      	ldr	r2, [r3, #20]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	699a      	ldr	r2, [r3, #24]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	04c11db7 	.word	0x04c11db7

080054dc <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80054e8:	2300      	movs	r3, #0
 80054ea:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2202      	movs	r2, #2
 80054f0:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	689a      	ldr	r2, [r3, #8]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f042 0201 	orr.w	r2, r2, #1
 8005500:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	2b03      	cmp	r3, #3
 8005508:	d006      	beq.n	8005518 <HAL_CRC_Calculate+0x3c>
 800550a:	2b03      	cmp	r3, #3
 800550c:	d829      	bhi.n	8005562 <HAL_CRC_Calculate+0x86>
 800550e:	2b01      	cmp	r3, #1
 8005510:	d019      	beq.n	8005546 <HAL_CRC_Calculate+0x6a>
 8005512:	2b02      	cmp	r3, #2
 8005514:	d01e      	beq.n	8005554 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8005516:	e024      	b.n	8005562 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8005518:	2300      	movs	r3, #0
 800551a:	617b      	str	r3, [r7, #20]
 800551c:	e00a      	b.n	8005534 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	441a      	add	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	6812      	ldr	r2, [r2, #0]
 800552c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	3301      	adds	r3, #1
 8005532:	617b      	str	r3, [r7, #20]
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	429a      	cmp	r2, r3
 800553a:	d3f0      	bcc.n	800551e <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	613b      	str	r3, [r7, #16]
      break;
 8005544:	e00e      	b.n	8005564 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	68b9      	ldr	r1, [r7, #8]
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f000 f812 	bl	8005574 <CRC_Handle_8>
 8005550:	6138      	str	r0, [r7, #16]
      break;
 8005552:	e007      	b.n	8005564 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	68b9      	ldr	r1, [r7, #8]
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f000 f899 	bl	8005690 <CRC_Handle_16>
 800555e:	6138      	str	r0, [r7, #16]
      break;
 8005560:	e000      	b.n	8005564 <HAL_CRC_Calculate+0x88>
      break;
 8005562:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2201      	movs	r2, #1
 8005568:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800556a:	693b      	ldr	r3, [r7, #16]
}
 800556c:	4618      	mov	r0, r3
 800556e:	3718      	adds	r7, #24
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8005574:	b480      	push	{r7}
 8005576:	b089      	sub	sp, #36	; 0x24
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8005580:	2300      	movs	r3, #0
 8005582:	61fb      	str	r3, [r7, #28]
 8005584:	e023      	b.n	80055ce <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	4413      	add	r3, r2
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	3301      	adds	r3, #1
 8005598:	68b9      	ldr	r1, [r7, #8]
 800559a:	440b      	add	r3, r1
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80055a0:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	3302      	adds	r3, #2
 80055a8:	68b9      	ldr	r1, [r7, #8]
 80055aa:	440b      	add	r3, r1
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80055b0:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	3303      	adds	r3, #3
 80055b8:	68b9      	ldr	r1, [r7, #8]
 80055ba:	440b      	add	r3, r1
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80055c4:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80055c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	3301      	adds	r3, #1
 80055cc:	61fb      	str	r3, [r7, #28]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	089b      	lsrs	r3, r3, #2
 80055d2:	69fa      	ldr	r2, [r7, #28]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d3d6      	bcc.n	8005586 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f003 0303 	and.w	r3, r3, #3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d04d      	beq.n	800567e <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f003 0303 	and.w	r3, r3, #3
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d107      	bne.n	80055fc <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	4413      	add	r3, r2
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	6812      	ldr	r2, [r2, #0]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f003 0303 	and.w	r3, r3, #3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d116      	bne.n	8005634 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	4413      	add	r3, r2
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	021b      	lsls	r3, r3, #8
 8005612:	b21a      	sxth	r2, r3
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	3301      	adds	r3, #1
 800561a:	68b9      	ldr	r1, [r7, #8]
 800561c:	440b      	add	r3, r1
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	b21b      	sxth	r3, r3
 8005622:	4313      	orrs	r3, r2
 8005624:	b21b      	sxth	r3, r3
 8005626:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	8b7a      	ldrh	r2, [r7, #26]
 8005632:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f003 0303 	and.w	r3, r3, #3
 800563a:	2b03      	cmp	r3, #3
 800563c:	d11f      	bne.n	800567e <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	4413      	add	r3, r2
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	021b      	lsls	r3, r3, #8
 800564a:	b21a      	sxth	r2, r3
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	3301      	adds	r3, #1
 8005652:	68b9      	ldr	r1, [r7, #8]
 8005654:	440b      	add	r3, r1
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	b21b      	sxth	r3, r3
 800565a:	4313      	orrs	r3, r2
 800565c:	b21b      	sxth	r3, r3
 800565e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	8b7a      	ldrh	r2, [r7, #26]
 800566a:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	3302      	adds	r3, #2
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	4413      	add	r3, r2
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	6812      	ldr	r2, [r2, #0]
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
}
 8005684:	4618      	mov	r0, r3
 8005686:	3724      	adds	r7, #36	; 0x24
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8005690:	b480      	push	{r7}
 8005692:	b087      	sub	sp, #28
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800569c:	2300      	movs	r3, #0
 800569e:	617b      	str	r3, [r7, #20]
 80056a0:	e013      	b.n	80056ca <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	4413      	add	r3, r2
 80056aa:	881b      	ldrh	r3, [r3, #0]
 80056ac:	041a      	lsls	r2, r3, #16
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	3302      	adds	r3, #2
 80056b4:	68b9      	ldr	r1, [r7, #8]
 80056b6:	440b      	add	r3, r1
 80056b8:	881b      	ldrh	r3, [r3, #0]
 80056ba:	4619      	mov	r1, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	3301      	adds	r3, #1
 80056c8:	617b      	str	r3, [r7, #20]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	085b      	lsrs	r3, r3, #1
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d3e6      	bcc.n	80056a2 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d009      	beq.n	80056f2 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	4413      	add	r3, r2
 80056ec:	881a      	ldrh	r2, [r3, #0]
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	371c      	adds	r7, #28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005710:	2300      	movs	r3, #0
 8005712:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005714:	231f      	movs	r3, #31
 8005716:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005718:	bf00      	nop
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	1e5a      	subs	r2, r3, #1
 800571e:	613a      	str	r2, [r7, #16]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d009      	beq.n	8005738 <HAL_CRCEx_Polynomial_Set+0x34>
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	f003 031f 	and.w	r3, r3, #31
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	fa22 f303 	lsr.w	r3, r2, r3
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b00      	cmp	r3, #0
 8005736:	d0f0      	beq.n	800571a <HAL_CRCEx_Polynomial_Set+0x16>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b18      	cmp	r3, #24
 800573c:	d846      	bhi.n	80057cc <HAL_CRCEx_Polynomial_Set+0xc8>
 800573e:	a201      	add	r2, pc, #4	; (adr r2, 8005744 <HAL_CRCEx_Polynomial_Set+0x40>)
 8005740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005744:	080057d3 	.word	0x080057d3
 8005748:	080057cd 	.word	0x080057cd
 800574c:	080057cd 	.word	0x080057cd
 8005750:	080057cd 	.word	0x080057cd
 8005754:	080057cd 	.word	0x080057cd
 8005758:	080057cd 	.word	0x080057cd
 800575c:	080057cd 	.word	0x080057cd
 8005760:	080057cd 	.word	0x080057cd
 8005764:	080057c1 	.word	0x080057c1
 8005768:	080057cd 	.word	0x080057cd
 800576c:	080057cd 	.word	0x080057cd
 8005770:	080057cd 	.word	0x080057cd
 8005774:	080057cd 	.word	0x080057cd
 8005778:	080057cd 	.word	0x080057cd
 800577c:	080057cd 	.word	0x080057cd
 8005780:	080057cd 	.word	0x080057cd
 8005784:	080057b5 	.word	0x080057b5
 8005788:	080057cd 	.word	0x080057cd
 800578c:	080057cd 	.word	0x080057cd
 8005790:	080057cd 	.word	0x080057cd
 8005794:	080057cd 	.word	0x080057cd
 8005798:	080057cd 	.word	0x080057cd
 800579c:	080057cd 	.word	0x080057cd
 80057a0:	080057cd 	.word	0x080057cd
 80057a4:	080057a9 	.word	0x080057a9
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	2b06      	cmp	r3, #6
 80057ac:	d913      	bls.n	80057d6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80057b2:	e010      	b.n	80057d6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	2b07      	cmp	r3, #7
 80057b8:	d90f      	bls.n	80057da <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80057be:	e00c      	b.n	80057da <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	2b0f      	cmp	r3, #15
 80057c4:	d90b      	bls.n	80057de <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80057ca:	e008      	b.n	80057de <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	75fb      	strb	r3, [r7, #23]
      break;
 80057d0:	e006      	b.n	80057e0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80057d2:	bf00      	nop
 80057d4:	e004      	b.n	80057e0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80057d6:	bf00      	nop
 80057d8:	e002      	b.n	80057e0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80057da:	bf00      	nop
 80057dc:	e000      	b.n	80057e0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80057de:	bf00      	nop
  }
  if (status == HAL_OK)
 80057e0:	7dfb      	ldrb	r3, [r7, #23]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10d      	bne.n	8005802 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f023 0118 	bic.w	r1, r3, #24
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	430a      	orrs	r2, r1
 8005800:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005802:	7dfb      	ldrb	r3, [r7, #23]
}
 8005804:	4618      	mov	r0, r3
 8005806:	371c      	adds	r7, #28
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005818:	f7ff fcc8 	bl	80051ac <HAL_GetTick>
 800581c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d101      	bne.n	8005828 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e316      	b.n	8005e56 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a66      	ldr	r2, [pc, #408]	; (80059c8 <HAL_DMA_Init+0x1b8>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d04a      	beq.n	80058c8 <HAL_DMA_Init+0xb8>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a65      	ldr	r2, [pc, #404]	; (80059cc <HAL_DMA_Init+0x1bc>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d045      	beq.n	80058c8 <HAL_DMA_Init+0xb8>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a63      	ldr	r2, [pc, #396]	; (80059d0 <HAL_DMA_Init+0x1c0>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d040      	beq.n	80058c8 <HAL_DMA_Init+0xb8>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a62      	ldr	r2, [pc, #392]	; (80059d4 <HAL_DMA_Init+0x1c4>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d03b      	beq.n	80058c8 <HAL_DMA_Init+0xb8>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a60      	ldr	r2, [pc, #384]	; (80059d8 <HAL_DMA_Init+0x1c8>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d036      	beq.n	80058c8 <HAL_DMA_Init+0xb8>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a5f      	ldr	r2, [pc, #380]	; (80059dc <HAL_DMA_Init+0x1cc>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d031      	beq.n	80058c8 <HAL_DMA_Init+0xb8>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a5d      	ldr	r2, [pc, #372]	; (80059e0 <HAL_DMA_Init+0x1d0>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d02c      	beq.n	80058c8 <HAL_DMA_Init+0xb8>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a5c      	ldr	r2, [pc, #368]	; (80059e4 <HAL_DMA_Init+0x1d4>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d027      	beq.n	80058c8 <HAL_DMA_Init+0xb8>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a5a      	ldr	r2, [pc, #360]	; (80059e8 <HAL_DMA_Init+0x1d8>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d022      	beq.n	80058c8 <HAL_DMA_Init+0xb8>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a59      	ldr	r2, [pc, #356]	; (80059ec <HAL_DMA_Init+0x1dc>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d01d      	beq.n	80058c8 <HAL_DMA_Init+0xb8>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a57      	ldr	r2, [pc, #348]	; (80059f0 <HAL_DMA_Init+0x1e0>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d018      	beq.n	80058c8 <HAL_DMA_Init+0xb8>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a56      	ldr	r2, [pc, #344]	; (80059f4 <HAL_DMA_Init+0x1e4>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d013      	beq.n	80058c8 <HAL_DMA_Init+0xb8>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a54      	ldr	r2, [pc, #336]	; (80059f8 <HAL_DMA_Init+0x1e8>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d00e      	beq.n	80058c8 <HAL_DMA_Init+0xb8>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a53      	ldr	r2, [pc, #332]	; (80059fc <HAL_DMA_Init+0x1ec>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d009      	beq.n	80058c8 <HAL_DMA_Init+0xb8>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a51      	ldr	r2, [pc, #324]	; (8005a00 <HAL_DMA_Init+0x1f0>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d004      	beq.n	80058c8 <HAL_DMA_Init+0xb8>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a50      	ldr	r2, [pc, #320]	; (8005a04 <HAL_DMA_Init+0x1f4>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d101      	bne.n	80058cc <HAL_DMA_Init+0xbc>
 80058c8:	2301      	movs	r3, #1
 80058ca:	e000      	b.n	80058ce <HAL_DMA_Init+0xbe>
 80058cc:	2300      	movs	r3, #0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f000 813b 	beq.w	8005b4a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a37      	ldr	r2, [pc, #220]	; (80059c8 <HAL_DMA_Init+0x1b8>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d04a      	beq.n	8005984 <HAL_DMA_Init+0x174>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a36      	ldr	r2, [pc, #216]	; (80059cc <HAL_DMA_Init+0x1bc>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d045      	beq.n	8005984 <HAL_DMA_Init+0x174>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a34      	ldr	r2, [pc, #208]	; (80059d0 <HAL_DMA_Init+0x1c0>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d040      	beq.n	8005984 <HAL_DMA_Init+0x174>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a33      	ldr	r2, [pc, #204]	; (80059d4 <HAL_DMA_Init+0x1c4>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d03b      	beq.n	8005984 <HAL_DMA_Init+0x174>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a31      	ldr	r2, [pc, #196]	; (80059d8 <HAL_DMA_Init+0x1c8>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d036      	beq.n	8005984 <HAL_DMA_Init+0x174>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a30      	ldr	r2, [pc, #192]	; (80059dc <HAL_DMA_Init+0x1cc>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d031      	beq.n	8005984 <HAL_DMA_Init+0x174>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a2e      	ldr	r2, [pc, #184]	; (80059e0 <HAL_DMA_Init+0x1d0>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d02c      	beq.n	8005984 <HAL_DMA_Init+0x174>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a2d      	ldr	r2, [pc, #180]	; (80059e4 <HAL_DMA_Init+0x1d4>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d027      	beq.n	8005984 <HAL_DMA_Init+0x174>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a2b      	ldr	r2, [pc, #172]	; (80059e8 <HAL_DMA_Init+0x1d8>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d022      	beq.n	8005984 <HAL_DMA_Init+0x174>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a2a      	ldr	r2, [pc, #168]	; (80059ec <HAL_DMA_Init+0x1dc>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d01d      	beq.n	8005984 <HAL_DMA_Init+0x174>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a28      	ldr	r2, [pc, #160]	; (80059f0 <HAL_DMA_Init+0x1e0>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d018      	beq.n	8005984 <HAL_DMA_Init+0x174>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a27      	ldr	r2, [pc, #156]	; (80059f4 <HAL_DMA_Init+0x1e4>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d013      	beq.n	8005984 <HAL_DMA_Init+0x174>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a25      	ldr	r2, [pc, #148]	; (80059f8 <HAL_DMA_Init+0x1e8>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d00e      	beq.n	8005984 <HAL_DMA_Init+0x174>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a24      	ldr	r2, [pc, #144]	; (80059fc <HAL_DMA_Init+0x1ec>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d009      	beq.n	8005984 <HAL_DMA_Init+0x174>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a22      	ldr	r2, [pc, #136]	; (8005a00 <HAL_DMA_Init+0x1f0>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d004      	beq.n	8005984 <HAL_DMA_Init+0x174>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a21      	ldr	r2, [pc, #132]	; (8005a04 <HAL_DMA_Init+0x1f4>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d108      	bne.n	8005996 <HAL_DMA_Init+0x186>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f022 0201 	bic.w	r2, r2, #1
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	e007      	b.n	80059a6 <HAL_DMA_Init+0x196>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f022 0201 	bic.w	r2, r2, #1
 80059a4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80059a6:	e02f      	b.n	8005a08 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059a8:	f7ff fc00 	bl	80051ac <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b05      	cmp	r3, #5
 80059b4:	d928      	bls.n	8005a08 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2220      	movs	r2, #32
 80059ba:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2203      	movs	r2, #3
 80059c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e246      	b.n	8005e56 <HAL_DMA_Init+0x646>
 80059c8:	40020010 	.word	0x40020010
 80059cc:	40020028 	.word	0x40020028
 80059d0:	40020040 	.word	0x40020040
 80059d4:	40020058 	.word	0x40020058
 80059d8:	40020070 	.word	0x40020070
 80059dc:	40020088 	.word	0x40020088
 80059e0:	400200a0 	.word	0x400200a0
 80059e4:	400200b8 	.word	0x400200b8
 80059e8:	40020410 	.word	0x40020410
 80059ec:	40020428 	.word	0x40020428
 80059f0:	40020440 	.word	0x40020440
 80059f4:	40020458 	.word	0x40020458
 80059f8:	40020470 	.word	0x40020470
 80059fc:	40020488 	.word	0x40020488
 8005a00:	400204a0 	.word	0x400204a0
 8005a04:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1c8      	bne.n	80059a8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	4b83      	ldr	r3, [pc, #524]	; (8005c30 <HAL_DMA_Init+0x420>)
 8005a22:	4013      	ands	r3, r2
 8005a24:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005a2e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a3a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a46:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a1b      	ldr	r3, [r3, #32]
 8005a4c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	2b04      	cmp	r3, #4
 8005a5a:	d107      	bne.n	8005a6c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a64:	4313      	orrs	r3, r2
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005a6c:	4b71      	ldr	r3, [pc, #452]	; (8005c34 <HAL_DMA_Init+0x424>)
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	4b71      	ldr	r3, [pc, #452]	; (8005c38 <HAL_DMA_Init+0x428>)
 8005a72:	4013      	ands	r3, r2
 8005a74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a78:	d328      	bcc.n	8005acc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	2b28      	cmp	r3, #40	; 0x28
 8005a80:	d903      	bls.n	8005a8a <HAL_DMA_Init+0x27a>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	2b2e      	cmp	r3, #46	; 0x2e
 8005a88:	d917      	bls.n	8005aba <HAL_DMA_Init+0x2aa>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	2b3e      	cmp	r3, #62	; 0x3e
 8005a90:	d903      	bls.n	8005a9a <HAL_DMA_Init+0x28a>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	2b42      	cmp	r3, #66	; 0x42
 8005a98:	d90f      	bls.n	8005aba <HAL_DMA_Init+0x2aa>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	2b46      	cmp	r3, #70	; 0x46
 8005aa0:	d903      	bls.n	8005aaa <HAL_DMA_Init+0x29a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	2b48      	cmp	r3, #72	; 0x48
 8005aa8:	d907      	bls.n	8005aba <HAL_DMA_Init+0x2aa>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	2b4e      	cmp	r3, #78	; 0x4e
 8005ab0:	d905      	bls.n	8005abe <HAL_DMA_Init+0x2ae>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2b52      	cmp	r3, #82	; 0x52
 8005ab8:	d801      	bhi.n	8005abe <HAL_DMA_Init+0x2ae>
 8005aba:	2301      	movs	r3, #1
 8005abc:	e000      	b.n	8005ac0 <HAL_DMA_Init+0x2b0>
 8005abe:	2300      	movs	r3, #0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d003      	beq.n	8005acc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005aca:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f023 0307 	bic.w	r3, r3, #7
 8005ae2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	d117      	bne.n	8005b26 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00e      	beq.n	8005b26 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f002 fb31 	bl	8008170 <DMA_CheckFifoParam>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d008      	beq.n	8005b26 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2240      	movs	r2, #64	; 0x40
 8005b18:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e197      	b.n	8005e56 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f002 fa6c 	bl	800800c <DMA_CalcBaseAndBitshift>
 8005b34:	4603      	mov	r3, r0
 8005b36:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b3c:	f003 031f 	and.w	r3, r3, #31
 8005b40:	223f      	movs	r2, #63	; 0x3f
 8005b42:	409a      	lsls	r2, r3
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	609a      	str	r2, [r3, #8]
 8005b48:	e0cd      	b.n	8005ce6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a3b      	ldr	r2, [pc, #236]	; (8005c3c <HAL_DMA_Init+0x42c>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d022      	beq.n	8005b9a <HAL_DMA_Init+0x38a>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a39      	ldr	r2, [pc, #228]	; (8005c40 <HAL_DMA_Init+0x430>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d01d      	beq.n	8005b9a <HAL_DMA_Init+0x38a>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a38      	ldr	r2, [pc, #224]	; (8005c44 <HAL_DMA_Init+0x434>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d018      	beq.n	8005b9a <HAL_DMA_Init+0x38a>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a36      	ldr	r2, [pc, #216]	; (8005c48 <HAL_DMA_Init+0x438>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d013      	beq.n	8005b9a <HAL_DMA_Init+0x38a>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a35      	ldr	r2, [pc, #212]	; (8005c4c <HAL_DMA_Init+0x43c>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d00e      	beq.n	8005b9a <HAL_DMA_Init+0x38a>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a33      	ldr	r2, [pc, #204]	; (8005c50 <HAL_DMA_Init+0x440>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d009      	beq.n	8005b9a <HAL_DMA_Init+0x38a>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a32      	ldr	r2, [pc, #200]	; (8005c54 <HAL_DMA_Init+0x444>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d004      	beq.n	8005b9a <HAL_DMA_Init+0x38a>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a30      	ldr	r2, [pc, #192]	; (8005c58 <HAL_DMA_Init+0x448>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d101      	bne.n	8005b9e <HAL_DMA_Init+0x38e>
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e000      	b.n	8005ba0 <HAL_DMA_Init+0x390>
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f000 8097 	beq.w	8005cd4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a24      	ldr	r2, [pc, #144]	; (8005c3c <HAL_DMA_Init+0x42c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d021      	beq.n	8005bf4 <HAL_DMA_Init+0x3e4>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a22      	ldr	r2, [pc, #136]	; (8005c40 <HAL_DMA_Init+0x430>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d01c      	beq.n	8005bf4 <HAL_DMA_Init+0x3e4>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a21      	ldr	r2, [pc, #132]	; (8005c44 <HAL_DMA_Init+0x434>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d017      	beq.n	8005bf4 <HAL_DMA_Init+0x3e4>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a1f      	ldr	r2, [pc, #124]	; (8005c48 <HAL_DMA_Init+0x438>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d012      	beq.n	8005bf4 <HAL_DMA_Init+0x3e4>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a1e      	ldr	r2, [pc, #120]	; (8005c4c <HAL_DMA_Init+0x43c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d00d      	beq.n	8005bf4 <HAL_DMA_Init+0x3e4>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a1c      	ldr	r2, [pc, #112]	; (8005c50 <HAL_DMA_Init+0x440>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d008      	beq.n	8005bf4 <HAL_DMA_Init+0x3e4>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a1b      	ldr	r2, [pc, #108]	; (8005c54 <HAL_DMA_Init+0x444>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d003      	beq.n	8005bf4 <HAL_DMA_Init+0x3e4>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a19      	ldr	r2, [pc, #100]	; (8005c58 <HAL_DMA_Init+0x448>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	4b12      	ldr	r3, [pc, #72]	; (8005c5c <HAL_DMA_Init+0x44c>)
 8005c12:	4013      	ands	r3, r2
 8005c14:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	2b40      	cmp	r3, #64	; 0x40
 8005c1c:	d020      	beq.n	8005c60 <HAL_DMA_Init+0x450>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	2b80      	cmp	r3, #128	; 0x80
 8005c24:	d102      	bne.n	8005c2c <HAL_DMA_Init+0x41c>
 8005c26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c2a:	e01a      	b.n	8005c62 <HAL_DMA_Init+0x452>
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	e018      	b.n	8005c62 <HAL_DMA_Init+0x452>
 8005c30:	fe10803f 	.word	0xfe10803f
 8005c34:	5c001000 	.word	0x5c001000
 8005c38:	ffff0000 	.word	0xffff0000
 8005c3c:	58025408 	.word	0x58025408
 8005c40:	5802541c 	.word	0x5802541c
 8005c44:	58025430 	.word	0x58025430
 8005c48:	58025444 	.word	0x58025444
 8005c4c:	58025458 	.word	0x58025458
 8005c50:	5802546c 	.word	0x5802546c
 8005c54:	58025480 	.word	0x58025480
 8005c58:	58025494 	.word	0x58025494
 8005c5c:	fffe000f 	.word	0xfffe000f
 8005c60:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	68d2      	ldr	r2, [r2, #12]
 8005c66:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005c70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005c78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005c80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005c88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005c90:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	4b6e      	ldr	r3, [pc, #440]	; (8005e60 <HAL_DMA_Init+0x650>)
 8005ca8:	4413      	add	r3, r2
 8005caa:	4a6e      	ldr	r2, [pc, #440]	; (8005e64 <HAL_DMA_Init+0x654>)
 8005cac:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb0:	091b      	lsrs	r3, r3, #4
 8005cb2:	009a      	lsls	r2, r3, #2
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f002 f9a7 	bl	800800c <DMA_CalcBaseAndBitshift>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc6:	f003 031f 	and.w	r3, r3, #31
 8005cca:	2201      	movs	r2, #1
 8005ccc:	409a      	lsls	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	605a      	str	r2, [r3, #4]
 8005cd2:	e008      	b.n	8005ce6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2240      	movs	r2, #64	; 0x40
 8005cd8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2203      	movs	r2, #3
 8005cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e0b7      	b.n	8005e56 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a5f      	ldr	r2, [pc, #380]	; (8005e68 <HAL_DMA_Init+0x658>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d072      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a5d      	ldr	r2, [pc, #372]	; (8005e6c <HAL_DMA_Init+0x65c>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d06d      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a5c      	ldr	r2, [pc, #368]	; (8005e70 <HAL_DMA_Init+0x660>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d068      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a5a      	ldr	r2, [pc, #360]	; (8005e74 <HAL_DMA_Init+0x664>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d063      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a59      	ldr	r2, [pc, #356]	; (8005e78 <HAL_DMA_Init+0x668>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d05e      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a57      	ldr	r2, [pc, #348]	; (8005e7c <HAL_DMA_Init+0x66c>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d059      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a56      	ldr	r2, [pc, #344]	; (8005e80 <HAL_DMA_Init+0x670>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d054      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a54      	ldr	r2, [pc, #336]	; (8005e84 <HAL_DMA_Init+0x674>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d04f      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a53      	ldr	r2, [pc, #332]	; (8005e88 <HAL_DMA_Init+0x678>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d04a      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a51      	ldr	r2, [pc, #324]	; (8005e8c <HAL_DMA_Init+0x67c>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d045      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a50      	ldr	r2, [pc, #320]	; (8005e90 <HAL_DMA_Init+0x680>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d040      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a4e      	ldr	r2, [pc, #312]	; (8005e94 <HAL_DMA_Init+0x684>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d03b      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a4d      	ldr	r2, [pc, #308]	; (8005e98 <HAL_DMA_Init+0x688>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d036      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a4b      	ldr	r2, [pc, #300]	; (8005e9c <HAL_DMA_Init+0x68c>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d031      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a4a      	ldr	r2, [pc, #296]	; (8005ea0 <HAL_DMA_Init+0x690>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d02c      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a48      	ldr	r2, [pc, #288]	; (8005ea4 <HAL_DMA_Init+0x694>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d027      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a47      	ldr	r2, [pc, #284]	; (8005ea8 <HAL_DMA_Init+0x698>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d022      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a45      	ldr	r2, [pc, #276]	; (8005eac <HAL_DMA_Init+0x69c>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d01d      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a44      	ldr	r2, [pc, #272]	; (8005eb0 <HAL_DMA_Init+0x6a0>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d018      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a42      	ldr	r2, [pc, #264]	; (8005eb4 <HAL_DMA_Init+0x6a4>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d013      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a41      	ldr	r2, [pc, #260]	; (8005eb8 <HAL_DMA_Init+0x6a8>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d00e      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a3f      	ldr	r2, [pc, #252]	; (8005ebc <HAL_DMA_Init+0x6ac>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d009      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a3e      	ldr	r2, [pc, #248]	; (8005ec0 <HAL_DMA_Init+0x6b0>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d004      	beq.n	8005dd6 <HAL_DMA_Init+0x5c6>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a3c      	ldr	r2, [pc, #240]	; (8005ec4 <HAL_DMA_Init+0x6b4>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d101      	bne.n	8005dda <HAL_DMA_Init+0x5ca>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e000      	b.n	8005ddc <HAL_DMA_Init+0x5cc>
 8005dda:	2300      	movs	r3, #0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d032      	beq.n	8005e46 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f002 fa41 	bl	8008268 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	2b80      	cmp	r3, #128	; 0x80
 8005dec:	d102      	bne.n	8005df4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dfc:	b2d2      	uxtb	r2, r2
 8005dfe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005e08:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d010      	beq.n	8005e34 <HAL_DMA_Init+0x624>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	2b08      	cmp	r3, #8
 8005e18:	d80c      	bhi.n	8005e34 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f002 fabe 	bl	800839c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e24:	2200      	movs	r2, #0
 8005e26:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005e30:	605a      	str	r2, [r3, #4]
 8005e32:	e008      	b.n	8005e46 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3718      	adds	r7, #24
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	a7fdabf8 	.word	0xa7fdabf8
 8005e64:	cccccccd 	.word	0xcccccccd
 8005e68:	40020010 	.word	0x40020010
 8005e6c:	40020028 	.word	0x40020028
 8005e70:	40020040 	.word	0x40020040
 8005e74:	40020058 	.word	0x40020058
 8005e78:	40020070 	.word	0x40020070
 8005e7c:	40020088 	.word	0x40020088
 8005e80:	400200a0 	.word	0x400200a0
 8005e84:	400200b8 	.word	0x400200b8
 8005e88:	40020410 	.word	0x40020410
 8005e8c:	40020428 	.word	0x40020428
 8005e90:	40020440 	.word	0x40020440
 8005e94:	40020458 	.word	0x40020458
 8005e98:	40020470 	.word	0x40020470
 8005e9c:	40020488 	.word	0x40020488
 8005ea0:	400204a0 	.word	0x400204a0
 8005ea4:	400204b8 	.word	0x400204b8
 8005ea8:	58025408 	.word	0x58025408
 8005eac:	5802541c 	.word	0x5802541c
 8005eb0:	58025430 	.word	0x58025430
 8005eb4:	58025444 	.word	0x58025444
 8005eb8:	58025458 	.word	0x58025458
 8005ebc:	5802546c 	.word	0x5802546c
 8005ec0:	58025480 	.word	0x58025480
 8005ec4:	58025494 	.word	0x58025494

08005ec8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b086      	sub	sp, #24
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
 8005ed4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e226      	b.n	8006332 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d101      	bne.n	8005ef2 <HAL_DMA_Start_IT+0x2a>
 8005eee:	2302      	movs	r3, #2
 8005ef0:	e21f      	b.n	8006332 <HAL_DMA_Start_IT+0x46a>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	f040 820a 	bne.w	800631c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a68      	ldr	r2, [pc, #416]	; (80060bc <HAL_DMA_Start_IT+0x1f4>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d04a      	beq.n	8005fb6 <HAL_DMA_Start_IT+0xee>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a66      	ldr	r2, [pc, #408]	; (80060c0 <HAL_DMA_Start_IT+0x1f8>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d045      	beq.n	8005fb6 <HAL_DMA_Start_IT+0xee>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a65      	ldr	r2, [pc, #404]	; (80060c4 <HAL_DMA_Start_IT+0x1fc>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d040      	beq.n	8005fb6 <HAL_DMA_Start_IT+0xee>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a63      	ldr	r2, [pc, #396]	; (80060c8 <HAL_DMA_Start_IT+0x200>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d03b      	beq.n	8005fb6 <HAL_DMA_Start_IT+0xee>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a62      	ldr	r2, [pc, #392]	; (80060cc <HAL_DMA_Start_IT+0x204>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d036      	beq.n	8005fb6 <HAL_DMA_Start_IT+0xee>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a60      	ldr	r2, [pc, #384]	; (80060d0 <HAL_DMA_Start_IT+0x208>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d031      	beq.n	8005fb6 <HAL_DMA_Start_IT+0xee>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a5f      	ldr	r2, [pc, #380]	; (80060d4 <HAL_DMA_Start_IT+0x20c>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d02c      	beq.n	8005fb6 <HAL_DMA_Start_IT+0xee>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a5d      	ldr	r2, [pc, #372]	; (80060d8 <HAL_DMA_Start_IT+0x210>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d027      	beq.n	8005fb6 <HAL_DMA_Start_IT+0xee>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a5c      	ldr	r2, [pc, #368]	; (80060dc <HAL_DMA_Start_IT+0x214>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d022      	beq.n	8005fb6 <HAL_DMA_Start_IT+0xee>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a5a      	ldr	r2, [pc, #360]	; (80060e0 <HAL_DMA_Start_IT+0x218>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d01d      	beq.n	8005fb6 <HAL_DMA_Start_IT+0xee>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a59      	ldr	r2, [pc, #356]	; (80060e4 <HAL_DMA_Start_IT+0x21c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d018      	beq.n	8005fb6 <HAL_DMA_Start_IT+0xee>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a57      	ldr	r2, [pc, #348]	; (80060e8 <HAL_DMA_Start_IT+0x220>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d013      	beq.n	8005fb6 <HAL_DMA_Start_IT+0xee>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a56      	ldr	r2, [pc, #344]	; (80060ec <HAL_DMA_Start_IT+0x224>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d00e      	beq.n	8005fb6 <HAL_DMA_Start_IT+0xee>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a54      	ldr	r2, [pc, #336]	; (80060f0 <HAL_DMA_Start_IT+0x228>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d009      	beq.n	8005fb6 <HAL_DMA_Start_IT+0xee>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a53      	ldr	r2, [pc, #332]	; (80060f4 <HAL_DMA_Start_IT+0x22c>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d004      	beq.n	8005fb6 <HAL_DMA_Start_IT+0xee>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a51      	ldr	r2, [pc, #324]	; (80060f8 <HAL_DMA_Start_IT+0x230>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d108      	bne.n	8005fc8 <HAL_DMA_Start_IT+0x100>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f022 0201 	bic.w	r2, r2, #1
 8005fc4:	601a      	str	r2, [r3, #0]
 8005fc6:	e007      	b.n	8005fd8 <HAL_DMA_Start_IT+0x110>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 0201 	bic.w	r2, r2, #1
 8005fd6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	68b9      	ldr	r1, [r7, #8]
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f001 fe68 	bl	8007cb4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a34      	ldr	r2, [pc, #208]	; (80060bc <HAL_DMA_Start_IT+0x1f4>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d04a      	beq.n	8006084 <HAL_DMA_Start_IT+0x1bc>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a33      	ldr	r2, [pc, #204]	; (80060c0 <HAL_DMA_Start_IT+0x1f8>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d045      	beq.n	8006084 <HAL_DMA_Start_IT+0x1bc>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a31      	ldr	r2, [pc, #196]	; (80060c4 <HAL_DMA_Start_IT+0x1fc>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d040      	beq.n	8006084 <HAL_DMA_Start_IT+0x1bc>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a30      	ldr	r2, [pc, #192]	; (80060c8 <HAL_DMA_Start_IT+0x200>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d03b      	beq.n	8006084 <HAL_DMA_Start_IT+0x1bc>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a2e      	ldr	r2, [pc, #184]	; (80060cc <HAL_DMA_Start_IT+0x204>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d036      	beq.n	8006084 <HAL_DMA_Start_IT+0x1bc>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a2d      	ldr	r2, [pc, #180]	; (80060d0 <HAL_DMA_Start_IT+0x208>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d031      	beq.n	8006084 <HAL_DMA_Start_IT+0x1bc>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a2b      	ldr	r2, [pc, #172]	; (80060d4 <HAL_DMA_Start_IT+0x20c>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d02c      	beq.n	8006084 <HAL_DMA_Start_IT+0x1bc>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a2a      	ldr	r2, [pc, #168]	; (80060d8 <HAL_DMA_Start_IT+0x210>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d027      	beq.n	8006084 <HAL_DMA_Start_IT+0x1bc>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a28      	ldr	r2, [pc, #160]	; (80060dc <HAL_DMA_Start_IT+0x214>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d022      	beq.n	8006084 <HAL_DMA_Start_IT+0x1bc>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a27      	ldr	r2, [pc, #156]	; (80060e0 <HAL_DMA_Start_IT+0x218>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d01d      	beq.n	8006084 <HAL_DMA_Start_IT+0x1bc>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a25      	ldr	r2, [pc, #148]	; (80060e4 <HAL_DMA_Start_IT+0x21c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d018      	beq.n	8006084 <HAL_DMA_Start_IT+0x1bc>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a24      	ldr	r2, [pc, #144]	; (80060e8 <HAL_DMA_Start_IT+0x220>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d013      	beq.n	8006084 <HAL_DMA_Start_IT+0x1bc>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a22      	ldr	r2, [pc, #136]	; (80060ec <HAL_DMA_Start_IT+0x224>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d00e      	beq.n	8006084 <HAL_DMA_Start_IT+0x1bc>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a21      	ldr	r2, [pc, #132]	; (80060f0 <HAL_DMA_Start_IT+0x228>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d009      	beq.n	8006084 <HAL_DMA_Start_IT+0x1bc>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a1f      	ldr	r2, [pc, #124]	; (80060f4 <HAL_DMA_Start_IT+0x22c>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d004      	beq.n	8006084 <HAL_DMA_Start_IT+0x1bc>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a1e      	ldr	r2, [pc, #120]	; (80060f8 <HAL_DMA_Start_IT+0x230>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d101      	bne.n	8006088 <HAL_DMA_Start_IT+0x1c0>
 8006084:	2301      	movs	r3, #1
 8006086:	e000      	b.n	800608a <HAL_DMA_Start_IT+0x1c2>
 8006088:	2300      	movs	r3, #0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d036      	beq.n	80060fc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f023 021e 	bic.w	r2, r3, #30
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f042 0216 	orr.w	r2, r2, #22
 80060a0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d03e      	beq.n	8006128 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f042 0208 	orr.w	r2, r2, #8
 80060b8:	601a      	str	r2, [r3, #0]
 80060ba:	e035      	b.n	8006128 <HAL_DMA_Start_IT+0x260>
 80060bc:	40020010 	.word	0x40020010
 80060c0:	40020028 	.word	0x40020028
 80060c4:	40020040 	.word	0x40020040
 80060c8:	40020058 	.word	0x40020058
 80060cc:	40020070 	.word	0x40020070
 80060d0:	40020088 	.word	0x40020088
 80060d4:	400200a0 	.word	0x400200a0
 80060d8:	400200b8 	.word	0x400200b8
 80060dc:	40020410 	.word	0x40020410
 80060e0:	40020428 	.word	0x40020428
 80060e4:	40020440 	.word	0x40020440
 80060e8:	40020458 	.word	0x40020458
 80060ec:	40020470 	.word	0x40020470
 80060f0:	40020488 	.word	0x40020488
 80060f4:	400204a0 	.word	0x400204a0
 80060f8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f023 020e 	bic.w	r2, r3, #14
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f042 020a 	orr.w	r2, r2, #10
 800610e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006114:	2b00      	cmp	r3, #0
 8006116:	d007      	beq.n	8006128 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f042 0204 	orr.w	r2, r2, #4
 8006126:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a83      	ldr	r2, [pc, #524]	; (800633c <HAL_DMA_Start_IT+0x474>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d072      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a82      	ldr	r2, [pc, #520]	; (8006340 <HAL_DMA_Start_IT+0x478>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d06d      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a80      	ldr	r2, [pc, #512]	; (8006344 <HAL_DMA_Start_IT+0x47c>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d068      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a7f      	ldr	r2, [pc, #508]	; (8006348 <HAL_DMA_Start_IT+0x480>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d063      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a7d      	ldr	r2, [pc, #500]	; (800634c <HAL_DMA_Start_IT+0x484>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d05e      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a7c      	ldr	r2, [pc, #496]	; (8006350 <HAL_DMA_Start_IT+0x488>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d059      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a7a      	ldr	r2, [pc, #488]	; (8006354 <HAL_DMA_Start_IT+0x48c>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d054      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a79      	ldr	r2, [pc, #484]	; (8006358 <HAL_DMA_Start_IT+0x490>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d04f      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a77      	ldr	r2, [pc, #476]	; (800635c <HAL_DMA_Start_IT+0x494>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d04a      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a76      	ldr	r2, [pc, #472]	; (8006360 <HAL_DMA_Start_IT+0x498>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d045      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a74      	ldr	r2, [pc, #464]	; (8006364 <HAL_DMA_Start_IT+0x49c>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d040      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a73      	ldr	r2, [pc, #460]	; (8006368 <HAL_DMA_Start_IT+0x4a0>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d03b      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a71      	ldr	r2, [pc, #452]	; (800636c <HAL_DMA_Start_IT+0x4a4>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d036      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a70      	ldr	r2, [pc, #448]	; (8006370 <HAL_DMA_Start_IT+0x4a8>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d031      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a6e      	ldr	r2, [pc, #440]	; (8006374 <HAL_DMA_Start_IT+0x4ac>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d02c      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a6d      	ldr	r2, [pc, #436]	; (8006378 <HAL_DMA_Start_IT+0x4b0>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d027      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a6b      	ldr	r2, [pc, #428]	; (800637c <HAL_DMA_Start_IT+0x4b4>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d022      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a6a      	ldr	r2, [pc, #424]	; (8006380 <HAL_DMA_Start_IT+0x4b8>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d01d      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a68      	ldr	r2, [pc, #416]	; (8006384 <HAL_DMA_Start_IT+0x4bc>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d018      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a67      	ldr	r2, [pc, #412]	; (8006388 <HAL_DMA_Start_IT+0x4c0>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d013      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a65      	ldr	r2, [pc, #404]	; (800638c <HAL_DMA_Start_IT+0x4c4>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d00e      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a64      	ldr	r2, [pc, #400]	; (8006390 <HAL_DMA_Start_IT+0x4c8>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d009      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a62      	ldr	r2, [pc, #392]	; (8006394 <HAL_DMA_Start_IT+0x4cc>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d004      	beq.n	8006218 <HAL_DMA_Start_IT+0x350>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a61      	ldr	r2, [pc, #388]	; (8006398 <HAL_DMA_Start_IT+0x4d0>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d101      	bne.n	800621c <HAL_DMA_Start_IT+0x354>
 8006218:	2301      	movs	r3, #1
 800621a:	e000      	b.n	800621e <HAL_DMA_Start_IT+0x356>
 800621c:	2300      	movs	r3, #0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d01a      	beq.n	8006258 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d007      	beq.n	8006240 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800623a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800623e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006244:	2b00      	cmp	r3, #0
 8006246:	d007      	beq.n	8006258 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006252:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006256:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a37      	ldr	r2, [pc, #220]	; (800633c <HAL_DMA_Start_IT+0x474>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d04a      	beq.n	80062f8 <HAL_DMA_Start_IT+0x430>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a36      	ldr	r2, [pc, #216]	; (8006340 <HAL_DMA_Start_IT+0x478>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d045      	beq.n	80062f8 <HAL_DMA_Start_IT+0x430>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a34      	ldr	r2, [pc, #208]	; (8006344 <HAL_DMA_Start_IT+0x47c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d040      	beq.n	80062f8 <HAL_DMA_Start_IT+0x430>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a33      	ldr	r2, [pc, #204]	; (8006348 <HAL_DMA_Start_IT+0x480>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d03b      	beq.n	80062f8 <HAL_DMA_Start_IT+0x430>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a31      	ldr	r2, [pc, #196]	; (800634c <HAL_DMA_Start_IT+0x484>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d036      	beq.n	80062f8 <HAL_DMA_Start_IT+0x430>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a30      	ldr	r2, [pc, #192]	; (8006350 <HAL_DMA_Start_IT+0x488>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d031      	beq.n	80062f8 <HAL_DMA_Start_IT+0x430>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a2e      	ldr	r2, [pc, #184]	; (8006354 <HAL_DMA_Start_IT+0x48c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d02c      	beq.n	80062f8 <HAL_DMA_Start_IT+0x430>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a2d      	ldr	r2, [pc, #180]	; (8006358 <HAL_DMA_Start_IT+0x490>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d027      	beq.n	80062f8 <HAL_DMA_Start_IT+0x430>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a2b      	ldr	r2, [pc, #172]	; (800635c <HAL_DMA_Start_IT+0x494>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d022      	beq.n	80062f8 <HAL_DMA_Start_IT+0x430>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a2a      	ldr	r2, [pc, #168]	; (8006360 <HAL_DMA_Start_IT+0x498>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d01d      	beq.n	80062f8 <HAL_DMA_Start_IT+0x430>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a28      	ldr	r2, [pc, #160]	; (8006364 <HAL_DMA_Start_IT+0x49c>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d018      	beq.n	80062f8 <HAL_DMA_Start_IT+0x430>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a27      	ldr	r2, [pc, #156]	; (8006368 <HAL_DMA_Start_IT+0x4a0>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d013      	beq.n	80062f8 <HAL_DMA_Start_IT+0x430>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a25      	ldr	r2, [pc, #148]	; (800636c <HAL_DMA_Start_IT+0x4a4>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d00e      	beq.n	80062f8 <HAL_DMA_Start_IT+0x430>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a24      	ldr	r2, [pc, #144]	; (8006370 <HAL_DMA_Start_IT+0x4a8>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d009      	beq.n	80062f8 <HAL_DMA_Start_IT+0x430>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a22      	ldr	r2, [pc, #136]	; (8006374 <HAL_DMA_Start_IT+0x4ac>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d004      	beq.n	80062f8 <HAL_DMA_Start_IT+0x430>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a21      	ldr	r2, [pc, #132]	; (8006378 <HAL_DMA_Start_IT+0x4b0>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d108      	bne.n	800630a <HAL_DMA_Start_IT+0x442>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f042 0201 	orr.w	r2, r2, #1
 8006306:	601a      	str	r2, [r3, #0]
 8006308:	e012      	b.n	8006330 <HAL_DMA_Start_IT+0x468>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f042 0201 	orr.w	r2, r2, #1
 8006318:	601a      	str	r2, [r3, #0]
 800631a:	e009      	b.n	8006330 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006322:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006330:	7dfb      	ldrb	r3, [r7, #23]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3718      	adds	r7, #24
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	40020010 	.word	0x40020010
 8006340:	40020028 	.word	0x40020028
 8006344:	40020040 	.word	0x40020040
 8006348:	40020058 	.word	0x40020058
 800634c:	40020070 	.word	0x40020070
 8006350:	40020088 	.word	0x40020088
 8006354:	400200a0 	.word	0x400200a0
 8006358:	400200b8 	.word	0x400200b8
 800635c:	40020410 	.word	0x40020410
 8006360:	40020428 	.word	0x40020428
 8006364:	40020440 	.word	0x40020440
 8006368:	40020458 	.word	0x40020458
 800636c:	40020470 	.word	0x40020470
 8006370:	40020488 	.word	0x40020488
 8006374:	400204a0 	.word	0x400204a0
 8006378:	400204b8 	.word	0x400204b8
 800637c:	58025408 	.word	0x58025408
 8006380:	5802541c 	.word	0x5802541c
 8006384:	58025430 	.word	0x58025430
 8006388:	58025444 	.word	0x58025444
 800638c:	58025458 	.word	0x58025458
 8006390:	5802546c 	.word	0x5802546c
 8006394:	58025480 	.word	0x58025480
 8006398:	58025494 	.word	0x58025494

0800639c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80063a4:	f7fe ff02 	bl	80051ac <HAL_GetTick>
 80063a8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d101      	bne.n	80063b4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e2dc      	b.n	800696e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d008      	beq.n	80063d2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2280      	movs	r2, #128	; 0x80
 80063c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e2cd      	b.n	800696e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a76      	ldr	r2, [pc, #472]	; (80065b0 <HAL_DMA_Abort+0x214>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d04a      	beq.n	8006472 <HAL_DMA_Abort+0xd6>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a74      	ldr	r2, [pc, #464]	; (80065b4 <HAL_DMA_Abort+0x218>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d045      	beq.n	8006472 <HAL_DMA_Abort+0xd6>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a73      	ldr	r2, [pc, #460]	; (80065b8 <HAL_DMA_Abort+0x21c>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d040      	beq.n	8006472 <HAL_DMA_Abort+0xd6>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a71      	ldr	r2, [pc, #452]	; (80065bc <HAL_DMA_Abort+0x220>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d03b      	beq.n	8006472 <HAL_DMA_Abort+0xd6>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a70      	ldr	r2, [pc, #448]	; (80065c0 <HAL_DMA_Abort+0x224>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d036      	beq.n	8006472 <HAL_DMA_Abort+0xd6>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a6e      	ldr	r2, [pc, #440]	; (80065c4 <HAL_DMA_Abort+0x228>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d031      	beq.n	8006472 <HAL_DMA_Abort+0xd6>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a6d      	ldr	r2, [pc, #436]	; (80065c8 <HAL_DMA_Abort+0x22c>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d02c      	beq.n	8006472 <HAL_DMA_Abort+0xd6>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a6b      	ldr	r2, [pc, #428]	; (80065cc <HAL_DMA_Abort+0x230>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d027      	beq.n	8006472 <HAL_DMA_Abort+0xd6>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a6a      	ldr	r2, [pc, #424]	; (80065d0 <HAL_DMA_Abort+0x234>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d022      	beq.n	8006472 <HAL_DMA_Abort+0xd6>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a68      	ldr	r2, [pc, #416]	; (80065d4 <HAL_DMA_Abort+0x238>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d01d      	beq.n	8006472 <HAL_DMA_Abort+0xd6>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a67      	ldr	r2, [pc, #412]	; (80065d8 <HAL_DMA_Abort+0x23c>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d018      	beq.n	8006472 <HAL_DMA_Abort+0xd6>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a65      	ldr	r2, [pc, #404]	; (80065dc <HAL_DMA_Abort+0x240>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d013      	beq.n	8006472 <HAL_DMA_Abort+0xd6>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a64      	ldr	r2, [pc, #400]	; (80065e0 <HAL_DMA_Abort+0x244>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d00e      	beq.n	8006472 <HAL_DMA_Abort+0xd6>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a62      	ldr	r2, [pc, #392]	; (80065e4 <HAL_DMA_Abort+0x248>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d009      	beq.n	8006472 <HAL_DMA_Abort+0xd6>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a61      	ldr	r2, [pc, #388]	; (80065e8 <HAL_DMA_Abort+0x24c>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d004      	beq.n	8006472 <HAL_DMA_Abort+0xd6>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a5f      	ldr	r2, [pc, #380]	; (80065ec <HAL_DMA_Abort+0x250>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d101      	bne.n	8006476 <HAL_DMA_Abort+0xda>
 8006472:	2301      	movs	r3, #1
 8006474:	e000      	b.n	8006478 <HAL_DMA_Abort+0xdc>
 8006476:	2300      	movs	r3, #0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d013      	beq.n	80064a4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f022 021e 	bic.w	r2, r2, #30
 800648a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	695a      	ldr	r2, [r3, #20]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800649a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	617b      	str	r3, [r7, #20]
 80064a2:	e00a      	b.n	80064ba <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f022 020e 	bic.w	r2, r2, #14
 80064b2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a3c      	ldr	r2, [pc, #240]	; (80065b0 <HAL_DMA_Abort+0x214>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d072      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a3a      	ldr	r2, [pc, #232]	; (80065b4 <HAL_DMA_Abort+0x218>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d06d      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a39      	ldr	r2, [pc, #228]	; (80065b8 <HAL_DMA_Abort+0x21c>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d068      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a37      	ldr	r2, [pc, #220]	; (80065bc <HAL_DMA_Abort+0x220>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d063      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a36      	ldr	r2, [pc, #216]	; (80065c0 <HAL_DMA_Abort+0x224>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d05e      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a34      	ldr	r2, [pc, #208]	; (80065c4 <HAL_DMA_Abort+0x228>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d059      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a33      	ldr	r2, [pc, #204]	; (80065c8 <HAL_DMA_Abort+0x22c>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d054      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a31      	ldr	r2, [pc, #196]	; (80065cc <HAL_DMA_Abort+0x230>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d04f      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a30      	ldr	r2, [pc, #192]	; (80065d0 <HAL_DMA_Abort+0x234>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d04a      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a2e      	ldr	r2, [pc, #184]	; (80065d4 <HAL_DMA_Abort+0x238>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d045      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a2d      	ldr	r2, [pc, #180]	; (80065d8 <HAL_DMA_Abort+0x23c>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d040      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a2b      	ldr	r2, [pc, #172]	; (80065dc <HAL_DMA_Abort+0x240>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d03b      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a2a      	ldr	r2, [pc, #168]	; (80065e0 <HAL_DMA_Abort+0x244>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d036      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a28      	ldr	r2, [pc, #160]	; (80065e4 <HAL_DMA_Abort+0x248>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d031      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a27      	ldr	r2, [pc, #156]	; (80065e8 <HAL_DMA_Abort+0x24c>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d02c      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a25      	ldr	r2, [pc, #148]	; (80065ec <HAL_DMA_Abort+0x250>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d027      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a24      	ldr	r2, [pc, #144]	; (80065f0 <HAL_DMA_Abort+0x254>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d022      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a22      	ldr	r2, [pc, #136]	; (80065f4 <HAL_DMA_Abort+0x258>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d01d      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a21      	ldr	r2, [pc, #132]	; (80065f8 <HAL_DMA_Abort+0x25c>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d018      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a1f      	ldr	r2, [pc, #124]	; (80065fc <HAL_DMA_Abort+0x260>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d013      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a1e      	ldr	r2, [pc, #120]	; (8006600 <HAL_DMA_Abort+0x264>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d00e      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a1c      	ldr	r2, [pc, #112]	; (8006604 <HAL_DMA_Abort+0x268>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d009      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a1b      	ldr	r2, [pc, #108]	; (8006608 <HAL_DMA_Abort+0x26c>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d004      	beq.n	80065aa <HAL_DMA_Abort+0x20e>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a19      	ldr	r2, [pc, #100]	; (800660c <HAL_DMA_Abort+0x270>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d132      	bne.n	8006610 <HAL_DMA_Abort+0x274>
 80065aa:	2301      	movs	r3, #1
 80065ac:	e031      	b.n	8006612 <HAL_DMA_Abort+0x276>
 80065ae:	bf00      	nop
 80065b0:	40020010 	.word	0x40020010
 80065b4:	40020028 	.word	0x40020028
 80065b8:	40020040 	.word	0x40020040
 80065bc:	40020058 	.word	0x40020058
 80065c0:	40020070 	.word	0x40020070
 80065c4:	40020088 	.word	0x40020088
 80065c8:	400200a0 	.word	0x400200a0
 80065cc:	400200b8 	.word	0x400200b8
 80065d0:	40020410 	.word	0x40020410
 80065d4:	40020428 	.word	0x40020428
 80065d8:	40020440 	.word	0x40020440
 80065dc:	40020458 	.word	0x40020458
 80065e0:	40020470 	.word	0x40020470
 80065e4:	40020488 	.word	0x40020488
 80065e8:	400204a0 	.word	0x400204a0
 80065ec:	400204b8 	.word	0x400204b8
 80065f0:	58025408 	.word	0x58025408
 80065f4:	5802541c 	.word	0x5802541c
 80065f8:	58025430 	.word	0x58025430
 80065fc:	58025444 	.word	0x58025444
 8006600:	58025458 	.word	0x58025458
 8006604:	5802546c 	.word	0x5802546c
 8006608:	58025480 	.word	0x58025480
 800660c:	58025494 	.word	0x58025494
 8006610:	2300      	movs	r3, #0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d007      	beq.n	8006626 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006620:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006624:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a6d      	ldr	r2, [pc, #436]	; (80067e0 <HAL_DMA_Abort+0x444>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d04a      	beq.n	80066c6 <HAL_DMA_Abort+0x32a>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a6b      	ldr	r2, [pc, #428]	; (80067e4 <HAL_DMA_Abort+0x448>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d045      	beq.n	80066c6 <HAL_DMA_Abort+0x32a>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a6a      	ldr	r2, [pc, #424]	; (80067e8 <HAL_DMA_Abort+0x44c>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d040      	beq.n	80066c6 <HAL_DMA_Abort+0x32a>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a68      	ldr	r2, [pc, #416]	; (80067ec <HAL_DMA_Abort+0x450>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d03b      	beq.n	80066c6 <HAL_DMA_Abort+0x32a>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a67      	ldr	r2, [pc, #412]	; (80067f0 <HAL_DMA_Abort+0x454>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d036      	beq.n	80066c6 <HAL_DMA_Abort+0x32a>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a65      	ldr	r2, [pc, #404]	; (80067f4 <HAL_DMA_Abort+0x458>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d031      	beq.n	80066c6 <HAL_DMA_Abort+0x32a>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a64      	ldr	r2, [pc, #400]	; (80067f8 <HAL_DMA_Abort+0x45c>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d02c      	beq.n	80066c6 <HAL_DMA_Abort+0x32a>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a62      	ldr	r2, [pc, #392]	; (80067fc <HAL_DMA_Abort+0x460>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d027      	beq.n	80066c6 <HAL_DMA_Abort+0x32a>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a61      	ldr	r2, [pc, #388]	; (8006800 <HAL_DMA_Abort+0x464>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d022      	beq.n	80066c6 <HAL_DMA_Abort+0x32a>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a5f      	ldr	r2, [pc, #380]	; (8006804 <HAL_DMA_Abort+0x468>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d01d      	beq.n	80066c6 <HAL_DMA_Abort+0x32a>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a5e      	ldr	r2, [pc, #376]	; (8006808 <HAL_DMA_Abort+0x46c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d018      	beq.n	80066c6 <HAL_DMA_Abort+0x32a>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a5c      	ldr	r2, [pc, #368]	; (800680c <HAL_DMA_Abort+0x470>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d013      	beq.n	80066c6 <HAL_DMA_Abort+0x32a>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a5b      	ldr	r2, [pc, #364]	; (8006810 <HAL_DMA_Abort+0x474>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d00e      	beq.n	80066c6 <HAL_DMA_Abort+0x32a>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a59      	ldr	r2, [pc, #356]	; (8006814 <HAL_DMA_Abort+0x478>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d009      	beq.n	80066c6 <HAL_DMA_Abort+0x32a>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a58      	ldr	r2, [pc, #352]	; (8006818 <HAL_DMA_Abort+0x47c>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d004      	beq.n	80066c6 <HAL_DMA_Abort+0x32a>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a56      	ldr	r2, [pc, #344]	; (800681c <HAL_DMA_Abort+0x480>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d108      	bne.n	80066d8 <HAL_DMA_Abort+0x33c>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f022 0201 	bic.w	r2, r2, #1
 80066d4:	601a      	str	r2, [r3, #0]
 80066d6:	e007      	b.n	80066e8 <HAL_DMA_Abort+0x34c>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 0201 	bic.w	r2, r2, #1
 80066e6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80066e8:	e013      	b.n	8006712 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80066ea:	f7fe fd5f 	bl	80051ac <HAL_GetTick>
 80066ee:	4602      	mov	r2, r0
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	2b05      	cmp	r3, #5
 80066f6:	d90c      	bls.n	8006712 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2220      	movs	r2, #32
 80066fc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2203      	movs	r2, #3
 8006702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e12d      	b.n	800696e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1e5      	bne.n	80066ea <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a2f      	ldr	r2, [pc, #188]	; (80067e0 <HAL_DMA_Abort+0x444>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d04a      	beq.n	80067be <HAL_DMA_Abort+0x422>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a2d      	ldr	r2, [pc, #180]	; (80067e4 <HAL_DMA_Abort+0x448>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d045      	beq.n	80067be <HAL_DMA_Abort+0x422>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a2c      	ldr	r2, [pc, #176]	; (80067e8 <HAL_DMA_Abort+0x44c>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d040      	beq.n	80067be <HAL_DMA_Abort+0x422>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a2a      	ldr	r2, [pc, #168]	; (80067ec <HAL_DMA_Abort+0x450>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d03b      	beq.n	80067be <HAL_DMA_Abort+0x422>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a29      	ldr	r2, [pc, #164]	; (80067f0 <HAL_DMA_Abort+0x454>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d036      	beq.n	80067be <HAL_DMA_Abort+0x422>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a27      	ldr	r2, [pc, #156]	; (80067f4 <HAL_DMA_Abort+0x458>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d031      	beq.n	80067be <HAL_DMA_Abort+0x422>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a26      	ldr	r2, [pc, #152]	; (80067f8 <HAL_DMA_Abort+0x45c>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d02c      	beq.n	80067be <HAL_DMA_Abort+0x422>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a24      	ldr	r2, [pc, #144]	; (80067fc <HAL_DMA_Abort+0x460>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d027      	beq.n	80067be <HAL_DMA_Abort+0x422>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a23      	ldr	r2, [pc, #140]	; (8006800 <HAL_DMA_Abort+0x464>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d022      	beq.n	80067be <HAL_DMA_Abort+0x422>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a21      	ldr	r2, [pc, #132]	; (8006804 <HAL_DMA_Abort+0x468>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d01d      	beq.n	80067be <HAL_DMA_Abort+0x422>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a20      	ldr	r2, [pc, #128]	; (8006808 <HAL_DMA_Abort+0x46c>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d018      	beq.n	80067be <HAL_DMA_Abort+0x422>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a1e      	ldr	r2, [pc, #120]	; (800680c <HAL_DMA_Abort+0x470>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d013      	beq.n	80067be <HAL_DMA_Abort+0x422>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a1d      	ldr	r2, [pc, #116]	; (8006810 <HAL_DMA_Abort+0x474>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d00e      	beq.n	80067be <HAL_DMA_Abort+0x422>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a1b      	ldr	r2, [pc, #108]	; (8006814 <HAL_DMA_Abort+0x478>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d009      	beq.n	80067be <HAL_DMA_Abort+0x422>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a1a      	ldr	r2, [pc, #104]	; (8006818 <HAL_DMA_Abort+0x47c>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d004      	beq.n	80067be <HAL_DMA_Abort+0x422>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a18      	ldr	r2, [pc, #96]	; (800681c <HAL_DMA_Abort+0x480>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d101      	bne.n	80067c2 <HAL_DMA_Abort+0x426>
 80067be:	2301      	movs	r3, #1
 80067c0:	e000      	b.n	80067c4 <HAL_DMA_Abort+0x428>
 80067c2:	2300      	movs	r3, #0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d02b      	beq.n	8006820 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067cc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d2:	f003 031f 	and.w	r3, r3, #31
 80067d6:	223f      	movs	r2, #63	; 0x3f
 80067d8:	409a      	lsls	r2, r3
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	609a      	str	r2, [r3, #8]
 80067de:	e02a      	b.n	8006836 <HAL_DMA_Abort+0x49a>
 80067e0:	40020010 	.word	0x40020010
 80067e4:	40020028 	.word	0x40020028
 80067e8:	40020040 	.word	0x40020040
 80067ec:	40020058 	.word	0x40020058
 80067f0:	40020070 	.word	0x40020070
 80067f4:	40020088 	.word	0x40020088
 80067f8:	400200a0 	.word	0x400200a0
 80067fc:	400200b8 	.word	0x400200b8
 8006800:	40020410 	.word	0x40020410
 8006804:	40020428 	.word	0x40020428
 8006808:	40020440 	.word	0x40020440
 800680c:	40020458 	.word	0x40020458
 8006810:	40020470 	.word	0x40020470
 8006814:	40020488 	.word	0x40020488
 8006818:	400204a0 	.word	0x400204a0
 800681c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006824:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800682a:	f003 031f 	and.w	r3, r3, #31
 800682e:	2201      	movs	r2, #1
 8006830:	409a      	lsls	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a4f      	ldr	r2, [pc, #316]	; (8006978 <HAL_DMA_Abort+0x5dc>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d072      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a4d      	ldr	r2, [pc, #308]	; (800697c <HAL_DMA_Abort+0x5e0>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d06d      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a4c      	ldr	r2, [pc, #304]	; (8006980 <HAL_DMA_Abort+0x5e4>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d068      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a4a      	ldr	r2, [pc, #296]	; (8006984 <HAL_DMA_Abort+0x5e8>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d063      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a49      	ldr	r2, [pc, #292]	; (8006988 <HAL_DMA_Abort+0x5ec>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d05e      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a47      	ldr	r2, [pc, #284]	; (800698c <HAL_DMA_Abort+0x5f0>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d059      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a46      	ldr	r2, [pc, #280]	; (8006990 <HAL_DMA_Abort+0x5f4>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d054      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a44      	ldr	r2, [pc, #272]	; (8006994 <HAL_DMA_Abort+0x5f8>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d04f      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a43      	ldr	r2, [pc, #268]	; (8006998 <HAL_DMA_Abort+0x5fc>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d04a      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a41      	ldr	r2, [pc, #260]	; (800699c <HAL_DMA_Abort+0x600>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d045      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a40      	ldr	r2, [pc, #256]	; (80069a0 <HAL_DMA_Abort+0x604>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d040      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a3e      	ldr	r2, [pc, #248]	; (80069a4 <HAL_DMA_Abort+0x608>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d03b      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a3d      	ldr	r2, [pc, #244]	; (80069a8 <HAL_DMA_Abort+0x60c>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d036      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a3b      	ldr	r2, [pc, #236]	; (80069ac <HAL_DMA_Abort+0x610>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d031      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a3a      	ldr	r2, [pc, #232]	; (80069b0 <HAL_DMA_Abort+0x614>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d02c      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a38      	ldr	r2, [pc, #224]	; (80069b4 <HAL_DMA_Abort+0x618>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d027      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a37      	ldr	r2, [pc, #220]	; (80069b8 <HAL_DMA_Abort+0x61c>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d022      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a35      	ldr	r2, [pc, #212]	; (80069bc <HAL_DMA_Abort+0x620>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d01d      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a34      	ldr	r2, [pc, #208]	; (80069c0 <HAL_DMA_Abort+0x624>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d018      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a32      	ldr	r2, [pc, #200]	; (80069c4 <HAL_DMA_Abort+0x628>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d013      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a31      	ldr	r2, [pc, #196]	; (80069c8 <HAL_DMA_Abort+0x62c>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d00e      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a2f      	ldr	r2, [pc, #188]	; (80069cc <HAL_DMA_Abort+0x630>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d009      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a2e      	ldr	r2, [pc, #184]	; (80069d0 <HAL_DMA_Abort+0x634>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d004      	beq.n	8006926 <HAL_DMA_Abort+0x58a>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a2c      	ldr	r2, [pc, #176]	; (80069d4 <HAL_DMA_Abort+0x638>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d101      	bne.n	800692a <HAL_DMA_Abort+0x58e>
 8006926:	2301      	movs	r3, #1
 8006928:	e000      	b.n	800692c <HAL_DMA_Abort+0x590>
 800692a:	2300      	movs	r3, #0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d015      	beq.n	800695c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006938:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00c      	beq.n	800695c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800694c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006950:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800695a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3718      	adds	r7, #24
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	40020010 	.word	0x40020010
 800697c:	40020028 	.word	0x40020028
 8006980:	40020040 	.word	0x40020040
 8006984:	40020058 	.word	0x40020058
 8006988:	40020070 	.word	0x40020070
 800698c:	40020088 	.word	0x40020088
 8006990:	400200a0 	.word	0x400200a0
 8006994:	400200b8 	.word	0x400200b8
 8006998:	40020410 	.word	0x40020410
 800699c:	40020428 	.word	0x40020428
 80069a0:	40020440 	.word	0x40020440
 80069a4:	40020458 	.word	0x40020458
 80069a8:	40020470 	.word	0x40020470
 80069ac:	40020488 	.word	0x40020488
 80069b0:	400204a0 	.word	0x400204a0
 80069b4:	400204b8 	.word	0x400204b8
 80069b8:	58025408 	.word	0x58025408
 80069bc:	5802541c 	.word	0x5802541c
 80069c0:	58025430 	.word	0x58025430
 80069c4:	58025444 	.word	0x58025444
 80069c8:	58025458 	.word	0x58025458
 80069cc:	5802546c 	.word	0x5802546c
 80069d0:	58025480 	.word	0x58025480
 80069d4:	58025494 	.word	0x58025494

080069d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d101      	bne.n	80069ea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e205      	b.n	8006df6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d004      	beq.n	8006a00 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2280      	movs	r2, #128	; 0x80
 80069fa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e1fa      	b.n	8006df6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a8c      	ldr	r2, [pc, #560]	; (8006c38 <HAL_DMA_Abort_IT+0x260>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d04a      	beq.n	8006aa0 <HAL_DMA_Abort_IT+0xc8>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a8b      	ldr	r2, [pc, #556]	; (8006c3c <HAL_DMA_Abort_IT+0x264>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d045      	beq.n	8006aa0 <HAL_DMA_Abort_IT+0xc8>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a89      	ldr	r2, [pc, #548]	; (8006c40 <HAL_DMA_Abort_IT+0x268>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d040      	beq.n	8006aa0 <HAL_DMA_Abort_IT+0xc8>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a88      	ldr	r2, [pc, #544]	; (8006c44 <HAL_DMA_Abort_IT+0x26c>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d03b      	beq.n	8006aa0 <HAL_DMA_Abort_IT+0xc8>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a86      	ldr	r2, [pc, #536]	; (8006c48 <HAL_DMA_Abort_IT+0x270>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d036      	beq.n	8006aa0 <HAL_DMA_Abort_IT+0xc8>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a85      	ldr	r2, [pc, #532]	; (8006c4c <HAL_DMA_Abort_IT+0x274>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d031      	beq.n	8006aa0 <HAL_DMA_Abort_IT+0xc8>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a83      	ldr	r2, [pc, #524]	; (8006c50 <HAL_DMA_Abort_IT+0x278>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d02c      	beq.n	8006aa0 <HAL_DMA_Abort_IT+0xc8>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a82      	ldr	r2, [pc, #520]	; (8006c54 <HAL_DMA_Abort_IT+0x27c>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d027      	beq.n	8006aa0 <HAL_DMA_Abort_IT+0xc8>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a80      	ldr	r2, [pc, #512]	; (8006c58 <HAL_DMA_Abort_IT+0x280>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d022      	beq.n	8006aa0 <HAL_DMA_Abort_IT+0xc8>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a7f      	ldr	r2, [pc, #508]	; (8006c5c <HAL_DMA_Abort_IT+0x284>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d01d      	beq.n	8006aa0 <HAL_DMA_Abort_IT+0xc8>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a7d      	ldr	r2, [pc, #500]	; (8006c60 <HAL_DMA_Abort_IT+0x288>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d018      	beq.n	8006aa0 <HAL_DMA_Abort_IT+0xc8>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a7c      	ldr	r2, [pc, #496]	; (8006c64 <HAL_DMA_Abort_IT+0x28c>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d013      	beq.n	8006aa0 <HAL_DMA_Abort_IT+0xc8>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a7a      	ldr	r2, [pc, #488]	; (8006c68 <HAL_DMA_Abort_IT+0x290>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d00e      	beq.n	8006aa0 <HAL_DMA_Abort_IT+0xc8>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a79      	ldr	r2, [pc, #484]	; (8006c6c <HAL_DMA_Abort_IT+0x294>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d009      	beq.n	8006aa0 <HAL_DMA_Abort_IT+0xc8>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a77      	ldr	r2, [pc, #476]	; (8006c70 <HAL_DMA_Abort_IT+0x298>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d004      	beq.n	8006aa0 <HAL_DMA_Abort_IT+0xc8>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a76      	ldr	r2, [pc, #472]	; (8006c74 <HAL_DMA_Abort_IT+0x29c>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d101      	bne.n	8006aa4 <HAL_DMA_Abort_IT+0xcc>
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e000      	b.n	8006aa6 <HAL_DMA_Abort_IT+0xce>
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d065      	beq.n	8006b76 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2204      	movs	r2, #4
 8006aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a60      	ldr	r2, [pc, #384]	; (8006c38 <HAL_DMA_Abort_IT+0x260>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d04a      	beq.n	8006b52 <HAL_DMA_Abort_IT+0x17a>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a5e      	ldr	r2, [pc, #376]	; (8006c3c <HAL_DMA_Abort_IT+0x264>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d045      	beq.n	8006b52 <HAL_DMA_Abort_IT+0x17a>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a5d      	ldr	r2, [pc, #372]	; (8006c40 <HAL_DMA_Abort_IT+0x268>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d040      	beq.n	8006b52 <HAL_DMA_Abort_IT+0x17a>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a5b      	ldr	r2, [pc, #364]	; (8006c44 <HAL_DMA_Abort_IT+0x26c>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d03b      	beq.n	8006b52 <HAL_DMA_Abort_IT+0x17a>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a5a      	ldr	r2, [pc, #360]	; (8006c48 <HAL_DMA_Abort_IT+0x270>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d036      	beq.n	8006b52 <HAL_DMA_Abort_IT+0x17a>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a58      	ldr	r2, [pc, #352]	; (8006c4c <HAL_DMA_Abort_IT+0x274>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d031      	beq.n	8006b52 <HAL_DMA_Abort_IT+0x17a>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a57      	ldr	r2, [pc, #348]	; (8006c50 <HAL_DMA_Abort_IT+0x278>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d02c      	beq.n	8006b52 <HAL_DMA_Abort_IT+0x17a>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a55      	ldr	r2, [pc, #340]	; (8006c54 <HAL_DMA_Abort_IT+0x27c>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d027      	beq.n	8006b52 <HAL_DMA_Abort_IT+0x17a>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a54      	ldr	r2, [pc, #336]	; (8006c58 <HAL_DMA_Abort_IT+0x280>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d022      	beq.n	8006b52 <HAL_DMA_Abort_IT+0x17a>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a52      	ldr	r2, [pc, #328]	; (8006c5c <HAL_DMA_Abort_IT+0x284>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d01d      	beq.n	8006b52 <HAL_DMA_Abort_IT+0x17a>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a51      	ldr	r2, [pc, #324]	; (8006c60 <HAL_DMA_Abort_IT+0x288>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d018      	beq.n	8006b52 <HAL_DMA_Abort_IT+0x17a>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a4f      	ldr	r2, [pc, #316]	; (8006c64 <HAL_DMA_Abort_IT+0x28c>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d013      	beq.n	8006b52 <HAL_DMA_Abort_IT+0x17a>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a4e      	ldr	r2, [pc, #312]	; (8006c68 <HAL_DMA_Abort_IT+0x290>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d00e      	beq.n	8006b52 <HAL_DMA_Abort_IT+0x17a>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a4c      	ldr	r2, [pc, #304]	; (8006c6c <HAL_DMA_Abort_IT+0x294>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d009      	beq.n	8006b52 <HAL_DMA_Abort_IT+0x17a>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a4b      	ldr	r2, [pc, #300]	; (8006c70 <HAL_DMA_Abort_IT+0x298>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d004      	beq.n	8006b52 <HAL_DMA_Abort_IT+0x17a>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a49      	ldr	r2, [pc, #292]	; (8006c74 <HAL_DMA_Abort_IT+0x29c>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d108      	bne.n	8006b64 <HAL_DMA_Abort_IT+0x18c>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f022 0201 	bic.w	r2, r2, #1
 8006b60:	601a      	str	r2, [r3, #0]
 8006b62:	e147      	b.n	8006df4 <HAL_DMA_Abort_IT+0x41c>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f022 0201 	bic.w	r2, r2, #1
 8006b72:	601a      	str	r2, [r3, #0]
 8006b74:	e13e      	b.n	8006df4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f022 020e 	bic.w	r2, r2, #14
 8006b84:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a2b      	ldr	r2, [pc, #172]	; (8006c38 <HAL_DMA_Abort_IT+0x260>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d04a      	beq.n	8006c26 <HAL_DMA_Abort_IT+0x24e>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a29      	ldr	r2, [pc, #164]	; (8006c3c <HAL_DMA_Abort_IT+0x264>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d045      	beq.n	8006c26 <HAL_DMA_Abort_IT+0x24e>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a28      	ldr	r2, [pc, #160]	; (8006c40 <HAL_DMA_Abort_IT+0x268>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d040      	beq.n	8006c26 <HAL_DMA_Abort_IT+0x24e>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a26      	ldr	r2, [pc, #152]	; (8006c44 <HAL_DMA_Abort_IT+0x26c>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d03b      	beq.n	8006c26 <HAL_DMA_Abort_IT+0x24e>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a25      	ldr	r2, [pc, #148]	; (8006c48 <HAL_DMA_Abort_IT+0x270>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d036      	beq.n	8006c26 <HAL_DMA_Abort_IT+0x24e>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a23      	ldr	r2, [pc, #140]	; (8006c4c <HAL_DMA_Abort_IT+0x274>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d031      	beq.n	8006c26 <HAL_DMA_Abort_IT+0x24e>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a22      	ldr	r2, [pc, #136]	; (8006c50 <HAL_DMA_Abort_IT+0x278>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d02c      	beq.n	8006c26 <HAL_DMA_Abort_IT+0x24e>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a20      	ldr	r2, [pc, #128]	; (8006c54 <HAL_DMA_Abort_IT+0x27c>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d027      	beq.n	8006c26 <HAL_DMA_Abort_IT+0x24e>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a1f      	ldr	r2, [pc, #124]	; (8006c58 <HAL_DMA_Abort_IT+0x280>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d022      	beq.n	8006c26 <HAL_DMA_Abort_IT+0x24e>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a1d      	ldr	r2, [pc, #116]	; (8006c5c <HAL_DMA_Abort_IT+0x284>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d01d      	beq.n	8006c26 <HAL_DMA_Abort_IT+0x24e>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a1c      	ldr	r2, [pc, #112]	; (8006c60 <HAL_DMA_Abort_IT+0x288>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d018      	beq.n	8006c26 <HAL_DMA_Abort_IT+0x24e>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a1a      	ldr	r2, [pc, #104]	; (8006c64 <HAL_DMA_Abort_IT+0x28c>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d013      	beq.n	8006c26 <HAL_DMA_Abort_IT+0x24e>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a19      	ldr	r2, [pc, #100]	; (8006c68 <HAL_DMA_Abort_IT+0x290>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d00e      	beq.n	8006c26 <HAL_DMA_Abort_IT+0x24e>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a17      	ldr	r2, [pc, #92]	; (8006c6c <HAL_DMA_Abort_IT+0x294>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d009      	beq.n	8006c26 <HAL_DMA_Abort_IT+0x24e>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a16      	ldr	r2, [pc, #88]	; (8006c70 <HAL_DMA_Abort_IT+0x298>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d004      	beq.n	8006c26 <HAL_DMA_Abort_IT+0x24e>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a14      	ldr	r2, [pc, #80]	; (8006c74 <HAL_DMA_Abort_IT+0x29c>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d128      	bne.n	8006c78 <HAL_DMA_Abort_IT+0x2a0>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f022 0201 	bic.w	r2, r2, #1
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	e027      	b.n	8006c88 <HAL_DMA_Abort_IT+0x2b0>
 8006c38:	40020010 	.word	0x40020010
 8006c3c:	40020028 	.word	0x40020028
 8006c40:	40020040 	.word	0x40020040
 8006c44:	40020058 	.word	0x40020058
 8006c48:	40020070 	.word	0x40020070
 8006c4c:	40020088 	.word	0x40020088
 8006c50:	400200a0 	.word	0x400200a0
 8006c54:	400200b8 	.word	0x400200b8
 8006c58:	40020410 	.word	0x40020410
 8006c5c:	40020428 	.word	0x40020428
 8006c60:	40020440 	.word	0x40020440
 8006c64:	40020458 	.word	0x40020458
 8006c68:	40020470 	.word	0x40020470
 8006c6c:	40020488 	.word	0x40020488
 8006c70:	400204a0 	.word	0x400204a0
 8006c74:	400204b8 	.word	0x400204b8
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 0201 	bic.w	r2, r2, #1
 8006c86:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a5c      	ldr	r2, [pc, #368]	; (8006e00 <HAL_DMA_Abort_IT+0x428>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d072      	beq.n	8006d78 <HAL_DMA_Abort_IT+0x3a0>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a5b      	ldr	r2, [pc, #364]	; (8006e04 <HAL_DMA_Abort_IT+0x42c>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d06d      	beq.n	8006d78 <HAL_DMA_Abort_IT+0x3a0>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a59      	ldr	r2, [pc, #356]	; (8006e08 <HAL_DMA_Abort_IT+0x430>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d068      	beq.n	8006d78 <HAL_DMA_Abort_IT+0x3a0>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a58      	ldr	r2, [pc, #352]	; (8006e0c <HAL_DMA_Abort_IT+0x434>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d063      	beq.n	8006d78 <HAL_DMA_Abort_IT+0x3a0>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a56      	ldr	r2, [pc, #344]	; (8006e10 <HAL_DMA_Abort_IT+0x438>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d05e      	beq.n	8006d78 <HAL_DMA_Abort_IT+0x3a0>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a55      	ldr	r2, [pc, #340]	; (8006e14 <HAL_DMA_Abort_IT+0x43c>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d059      	beq.n	8006d78 <HAL_DMA_Abort_IT+0x3a0>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a53      	ldr	r2, [pc, #332]	; (8006e18 <HAL_DMA_Abort_IT+0x440>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d054      	beq.n	8006d78 <HAL_DMA_Abort_IT+0x3a0>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a52      	ldr	r2, [pc, #328]	; (8006e1c <HAL_DMA_Abort_IT+0x444>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d04f      	beq.n	8006d78 <HAL_DMA_Abort_IT+0x3a0>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a50      	ldr	r2, [pc, #320]	; (8006e20 <HAL_DMA_Abort_IT+0x448>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d04a      	beq.n	8006d78 <HAL_DMA_Abort_IT+0x3a0>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a4f      	ldr	r2, [pc, #316]	; (8006e24 <HAL_DMA_Abort_IT+0x44c>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d045      	beq.n	8006d78 <HAL_DMA_Abort_IT+0x3a0>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a4d      	ldr	r2, [pc, #308]	; (8006e28 <HAL_DMA_Abort_IT+0x450>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d040      	beq.n	8006d78 <HAL_DMA_Abort_IT+0x3a0>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a4c      	ldr	r2, [pc, #304]	; (8006e2c <HAL_DMA_Abort_IT+0x454>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d03b      	beq.n	8006d78 <HAL_DMA_Abort_IT+0x3a0>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a4a      	ldr	r2, [pc, #296]	; (8006e30 <HAL_DMA_Abort_IT+0x458>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d036      	beq.n	8006d78 <HAL_DMA_Abort_IT+0x3a0>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a49      	ldr	r2, [pc, #292]	; (8006e34 <HAL_DMA_Abort_IT+0x45c>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d031      	beq.n	8006d78 <HAL_DMA_Abort_IT+0x3a0>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a47      	ldr	r2, [pc, #284]	; (8006e38 <HAL_DMA_Abort_IT+0x460>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d02c      	beq.n	8006d78 <HAL_DMA_Abort_IT+0x3a0>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a46      	ldr	r2, [pc, #280]	; (8006e3c <HAL_DMA_Abort_IT+0x464>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d027      	beq.n	8006d78 <HAL_DMA_Abort_IT+0x3a0>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a44      	ldr	r2, [pc, #272]	; (8006e40 <HAL_DMA_Abort_IT+0x468>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d022      	beq.n	8006d78 <HAL_DMA_Abort_IT+0x3a0>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a43      	ldr	r2, [pc, #268]	; (8006e44 <HAL_DMA_Abort_IT+0x46c>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d01d      	beq.n	8006d78 <HAL_DMA_Abort_IT+0x3a0>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a41      	ldr	r2, [pc, #260]	; (8006e48 <HAL_DMA_Abort_IT+0x470>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d018      	beq.n	8006d78 <HAL_DMA_Abort_IT+0x3a0>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a40      	ldr	r2, [pc, #256]	; (8006e4c <HAL_DMA_Abort_IT+0x474>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d013      	beq.n	8006d78 <HAL_DMA_Abort_IT+0x3a0>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a3e      	ldr	r2, [pc, #248]	; (8006e50 <HAL_DMA_Abort_IT+0x478>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d00e      	beq.n	8006d78 <HAL_DMA_Abort_IT+0x3a0>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a3d      	ldr	r2, [pc, #244]	; (8006e54 <HAL_DMA_Abort_IT+0x47c>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d009      	beq.n	8006d78 <HAL_DMA_Abort_IT+0x3a0>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a3b      	ldr	r2, [pc, #236]	; (8006e58 <HAL_DMA_Abort_IT+0x480>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d004      	beq.n	8006d78 <HAL_DMA_Abort_IT+0x3a0>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a3a      	ldr	r2, [pc, #232]	; (8006e5c <HAL_DMA_Abort_IT+0x484>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d101      	bne.n	8006d7c <HAL_DMA_Abort_IT+0x3a4>
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e000      	b.n	8006d7e <HAL_DMA_Abort_IT+0x3a6>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d028      	beq.n	8006dd4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d90:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d96:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d9c:	f003 031f 	and.w	r3, r3, #31
 8006da0:	2201      	movs	r2, #1
 8006da2:	409a      	lsls	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006db0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00c      	beq.n	8006dd4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006dc8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006dd2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d003      	beq.n	8006df4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	40020010 	.word	0x40020010
 8006e04:	40020028 	.word	0x40020028
 8006e08:	40020040 	.word	0x40020040
 8006e0c:	40020058 	.word	0x40020058
 8006e10:	40020070 	.word	0x40020070
 8006e14:	40020088 	.word	0x40020088
 8006e18:	400200a0 	.word	0x400200a0
 8006e1c:	400200b8 	.word	0x400200b8
 8006e20:	40020410 	.word	0x40020410
 8006e24:	40020428 	.word	0x40020428
 8006e28:	40020440 	.word	0x40020440
 8006e2c:	40020458 	.word	0x40020458
 8006e30:	40020470 	.word	0x40020470
 8006e34:	40020488 	.word	0x40020488
 8006e38:	400204a0 	.word	0x400204a0
 8006e3c:	400204b8 	.word	0x400204b8
 8006e40:	58025408 	.word	0x58025408
 8006e44:	5802541c 	.word	0x5802541c
 8006e48:	58025430 	.word	0x58025430
 8006e4c:	58025444 	.word	0x58025444
 8006e50:	58025458 	.word	0x58025458
 8006e54:	5802546c 	.word	0x5802546c
 8006e58:	58025480 	.word	0x58025480
 8006e5c:	58025494 	.word	0x58025494

08006e60 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b08a      	sub	sp, #40	; 0x28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006e6c:	4b67      	ldr	r3, [pc, #412]	; (800700c <HAL_DMA_IRQHandler+0x1ac>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a67      	ldr	r2, [pc, #412]	; (8007010 <HAL_DMA_IRQHandler+0x1b0>)
 8006e72:	fba2 2303 	umull	r2, r3, r2, r3
 8006e76:	0a9b      	lsrs	r3, r3, #10
 8006e78:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e7e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e84:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006e86:	6a3b      	ldr	r3, [r7, #32]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a5f      	ldr	r2, [pc, #380]	; (8007014 <HAL_DMA_IRQHandler+0x1b4>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d04a      	beq.n	8006f32 <HAL_DMA_IRQHandler+0xd2>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a5d      	ldr	r2, [pc, #372]	; (8007018 <HAL_DMA_IRQHandler+0x1b8>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d045      	beq.n	8006f32 <HAL_DMA_IRQHandler+0xd2>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a5c      	ldr	r2, [pc, #368]	; (800701c <HAL_DMA_IRQHandler+0x1bc>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d040      	beq.n	8006f32 <HAL_DMA_IRQHandler+0xd2>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a5a      	ldr	r2, [pc, #360]	; (8007020 <HAL_DMA_IRQHandler+0x1c0>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d03b      	beq.n	8006f32 <HAL_DMA_IRQHandler+0xd2>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a59      	ldr	r2, [pc, #356]	; (8007024 <HAL_DMA_IRQHandler+0x1c4>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d036      	beq.n	8006f32 <HAL_DMA_IRQHandler+0xd2>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a57      	ldr	r2, [pc, #348]	; (8007028 <HAL_DMA_IRQHandler+0x1c8>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d031      	beq.n	8006f32 <HAL_DMA_IRQHandler+0xd2>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a56      	ldr	r2, [pc, #344]	; (800702c <HAL_DMA_IRQHandler+0x1cc>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d02c      	beq.n	8006f32 <HAL_DMA_IRQHandler+0xd2>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a54      	ldr	r2, [pc, #336]	; (8007030 <HAL_DMA_IRQHandler+0x1d0>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d027      	beq.n	8006f32 <HAL_DMA_IRQHandler+0xd2>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a53      	ldr	r2, [pc, #332]	; (8007034 <HAL_DMA_IRQHandler+0x1d4>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d022      	beq.n	8006f32 <HAL_DMA_IRQHandler+0xd2>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a51      	ldr	r2, [pc, #324]	; (8007038 <HAL_DMA_IRQHandler+0x1d8>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d01d      	beq.n	8006f32 <HAL_DMA_IRQHandler+0xd2>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a50      	ldr	r2, [pc, #320]	; (800703c <HAL_DMA_IRQHandler+0x1dc>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d018      	beq.n	8006f32 <HAL_DMA_IRQHandler+0xd2>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a4e      	ldr	r2, [pc, #312]	; (8007040 <HAL_DMA_IRQHandler+0x1e0>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d013      	beq.n	8006f32 <HAL_DMA_IRQHandler+0xd2>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a4d      	ldr	r2, [pc, #308]	; (8007044 <HAL_DMA_IRQHandler+0x1e4>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d00e      	beq.n	8006f32 <HAL_DMA_IRQHandler+0xd2>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a4b      	ldr	r2, [pc, #300]	; (8007048 <HAL_DMA_IRQHandler+0x1e8>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d009      	beq.n	8006f32 <HAL_DMA_IRQHandler+0xd2>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a4a      	ldr	r2, [pc, #296]	; (800704c <HAL_DMA_IRQHandler+0x1ec>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d004      	beq.n	8006f32 <HAL_DMA_IRQHandler+0xd2>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a48      	ldr	r2, [pc, #288]	; (8007050 <HAL_DMA_IRQHandler+0x1f0>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d101      	bne.n	8006f36 <HAL_DMA_IRQHandler+0xd6>
 8006f32:	2301      	movs	r3, #1
 8006f34:	e000      	b.n	8006f38 <HAL_DMA_IRQHandler+0xd8>
 8006f36:	2300      	movs	r3, #0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f000 842b 	beq.w	8007794 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f42:	f003 031f 	and.w	r3, r3, #31
 8006f46:	2208      	movs	r2, #8
 8006f48:	409a      	lsls	r2, r3
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f000 80a2 	beq.w	8007098 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a2e      	ldr	r2, [pc, #184]	; (8007014 <HAL_DMA_IRQHandler+0x1b4>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d04a      	beq.n	8006ff4 <HAL_DMA_IRQHandler+0x194>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a2d      	ldr	r2, [pc, #180]	; (8007018 <HAL_DMA_IRQHandler+0x1b8>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d045      	beq.n	8006ff4 <HAL_DMA_IRQHandler+0x194>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a2b      	ldr	r2, [pc, #172]	; (800701c <HAL_DMA_IRQHandler+0x1bc>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d040      	beq.n	8006ff4 <HAL_DMA_IRQHandler+0x194>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a2a      	ldr	r2, [pc, #168]	; (8007020 <HAL_DMA_IRQHandler+0x1c0>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d03b      	beq.n	8006ff4 <HAL_DMA_IRQHandler+0x194>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a28      	ldr	r2, [pc, #160]	; (8007024 <HAL_DMA_IRQHandler+0x1c4>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d036      	beq.n	8006ff4 <HAL_DMA_IRQHandler+0x194>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a27      	ldr	r2, [pc, #156]	; (8007028 <HAL_DMA_IRQHandler+0x1c8>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d031      	beq.n	8006ff4 <HAL_DMA_IRQHandler+0x194>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a25      	ldr	r2, [pc, #148]	; (800702c <HAL_DMA_IRQHandler+0x1cc>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d02c      	beq.n	8006ff4 <HAL_DMA_IRQHandler+0x194>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a24      	ldr	r2, [pc, #144]	; (8007030 <HAL_DMA_IRQHandler+0x1d0>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d027      	beq.n	8006ff4 <HAL_DMA_IRQHandler+0x194>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a22      	ldr	r2, [pc, #136]	; (8007034 <HAL_DMA_IRQHandler+0x1d4>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d022      	beq.n	8006ff4 <HAL_DMA_IRQHandler+0x194>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a21      	ldr	r2, [pc, #132]	; (8007038 <HAL_DMA_IRQHandler+0x1d8>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d01d      	beq.n	8006ff4 <HAL_DMA_IRQHandler+0x194>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a1f      	ldr	r2, [pc, #124]	; (800703c <HAL_DMA_IRQHandler+0x1dc>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d018      	beq.n	8006ff4 <HAL_DMA_IRQHandler+0x194>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a1e      	ldr	r2, [pc, #120]	; (8007040 <HAL_DMA_IRQHandler+0x1e0>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d013      	beq.n	8006ff4 <HAL_DMA_IRQHandler+0x194>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a1c      	ldr	r2, [pc, #112]	; (8007044 <HAL_DMA_IRQHandler+0x1e4>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d00e      	beq.n	8006ff4 <HAL_DMA_IRQHandler+0x194>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a1b      	ldr	r2, [pc, #108]	; (8007048 <HAL_DMA_IRQHandler+0x1e8>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d009      	beq.n	8006ff4 <HAL_DMA_IRQHandler+0x194>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a19      	ldr	r2, [pc, #100]	; (800704c <HAL_DMA_IRQHandler+0x1ec>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d004      	beq.n	8006ff4 <HAL_DMA_IRQHandler+0x194>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a18      	ldr	r2, [pc, #96]	; (8007050 <HAL_DMA_IRQHandler+0x1f0>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d12f      	bne.n	8007054 <HAL_DMA_IRQHandler+0x1f4>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 0304 	and.w	r3, r3, #4
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	bf14      	ite	ne
 8007002:	2301      	movne	r3, #1
 8007004:	2300      	moveq	r3, #0
 8007006:	b2db      	uxtb	r3, r3
 8007008:	e02e      	b.n	8007068 <HAL_DMA_IRQHandler+0x208>
 800700a:	bf00      	nop
 800700c:	24000038 	.word	0x24000038
 8007010:	1b4e81b5 	.word	0x1b4e81b5
 8007014:	40020010 	.word	0x40020010
 8007018:	40020028 	.word	0x40020028
 800701c:	40020040 	.word	0x40020040
 8007020:	40020058 	.word	0x40020058
 8007024:	40020070 	.word	0x40020070
 8007028:	40020088 	.word	0x40020088
 800702c:	400200a0 	.word	0x400200a0
 8007030:	400200b8 	.word	0x400200b8
 8007034:	40020410 	.word	0x40020410
 8007038:	40020428 	.word	0x40020428
 800703c:	40020440 	.word	0x40020440
 8007040:	40020458 	.word	0x40020458
 8007044:	40020470 	.word	0x40020470
 8007048:	40020488 	.word	0x40020488
 800704c:	400204a0 	.word	0x400204a0
 8007050:	400204b8 	.word	0x400204b8
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 0308 	and.w	r3, r3, #8
 800705e:	2b00      	cmp	r3, #0
 8007060:	bf14      	ite	ne
 8007062:	2301      	movne	r3, #1
 8007064:	2300      	moveq	r3, #0
 8007066:	b2db      	uxtb	r3, r3
 8007068:	2b00      	cmp	r3, #0
 800706a:	d015      	beq.n	8007098 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f022 0204 	bic.w	r2, r2, #4
 800707a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007080:	f003 031f 	and.w	r3, r3, #31
 8007084:	2208      	movs	r2, #8
 8007086:	409a      	lsls	r2, r3
 8007088:	6a3b      	ldr	r3, [r7, #32]
 800708a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007090:	f043 0201 	orr.w	r2, r3, #1
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800709c:	f003 031f 	and.w	r3, r3, #31
 80070a0:	69ba      	ldr	r2, [r7, #24]
 80070a2:	fa22 f303 	lsr.w	r3, r2, r3
 80070a6:	f003 0301 	and.w	r3, r3, #1
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d06e      	beq.n	800718c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a69      	ldr	r2, [pc, #420]	; (8007258 <HAL_DMA_IRQHandler+0x3f8>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d04a      	beq.n	800714e <HAL_DMA_IRQHandler+0x2ee>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a67      	ldr	r2, [pc, #412]	; (800725c <HAL_DMA_IRQHandler+0x3fc>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d045      	beq.n	800714e <HAL_DMA_IRQHandler+0x2ee>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a66      	ldr	r2, [pc, #408]	; (8007260 <HAL_DMA_IRQHandler+0x400>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d040      	beq.n	800714e <HAL_DMA_IRQHandler+0x2ee>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a64      	ldr	r2, [pc, #400]	; (8007264 <HAL_DMA_IRQHandler+0x404>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d03b      	beq.n	800714e <HAL_DMA_IRQHandler+0x2ee>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a63      	ldr	r2, [pc, #396]	; (8007268 <HAL_DMA_IRQHandler+0x408>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d036      	beq.n	800714e <HAL_DMA_IRQHandler+0x2ee>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a61      	ldr	r2, [pc, #388]	; (800726c <HAL_DMA_IRQHandler+0x40c>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d031      	beq.n	800714e <HAL_DMA_IRQHandler+0x2ee>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a60      	ldr	r2, [pc, #384]	; (8007270 <HAL_DMA_IRQHandler+0x410>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d02c      	beq.n	800714e <HAL_DMA_IRQHandler+0x2ee>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a5e      	ldr	r2, [pc, #376]	; (8007274 <HAL_DMA_IRQHandler+0x414>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d027      	beq.n	800714e <HAL_DMA_IRQHandler+0x2ee>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a5d      	ldr	r2, [pc, #372]	; (8007278 <HAL_DMA_IRQHandler+0x418>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d022      	beq.n	800714e <HAL_DMA_IRQHandler+0x2ee>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a5b      	ldr	r2, [pc, #364]	; (800727c <HAL_DMA_IRQHandler+0x41c>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d01d      	beq.n	800714e <HAL_DMA_IRQHandler+0x2ee>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a5a      	ldr	r2, [pc, #360]	; (8007280 <HAL_DMA_IRQHandler+0x420>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d018      	beq.n	800714e <HAL_DMA_IRQHandler+0x2ee>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a58      	ldr	r2, [pc, #352]	; (8007284 <HAL_DMA_IRQHandler+0x424>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d013      	beq.n	800714e <HAL_DMA_IRQHandler+0x2ee>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a57      	ldr	r2, [pc, #348]	; (8007288 <HAL_DMA_IRQHandler+0x428>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d00e      	beq.n	800714e <HAL_DMA_IRQHandler+0x2ee>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a55      	ldr	r2, [pc, #340]	; (800728c <HAL_DMA_IRQHandler+0x42c>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d009      	beq.n	800714e <HAL_DMA_IRQHandler+0x2ee>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a54      	ldr	r2, [pc, #336]	; (8007290 <HAL_DMA_IRQHandler+0x430>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d004      	beq.n	800714e <HAL_DMA_IRQHandler+0x2ee>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a52      	ldr	r2, [pc, #328]	; (8007294 <HAL_DMA_IRQHandler+0x434>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d10a      	bne.n	8007164 <HAL_DMA_IRQHandler+0x304>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	695b      	ldr	r3, [r3, #20]
 8007154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007158:	2b00      	cmp	r3, #0
 800715a:	bf14      	ite	ne
 800715c:	2301      	movne	r3, #1
 800715e:	2300      	moveq	r3, #0
 8007160:	b2db      	uxtb	r3, r3
 8007162:	e003      	b.n	800716c <HAL_DMA_IRQHandler+0x30c>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2300      	movs	r3, #0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00d      	beq.n	800718c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007174:	f003 031f 	and.w	r3, r3, #31
 8007178:	2201      	movs	r2, #1
 800717a:	409a      	lsls	r2, r3
 800717c:	6a3b      	ldr	r3, [r7, #32]
 800717e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007184:	f043 0202 	orr.w	r2, r3, #2
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007190:	f003 031f 	and.w	r3, r3, #31
 8007194:	2204      	movs	r2, #4
 8007196:	409a      	lsls	r2, r3
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	4013      	ands	r3, r2
 800719c:	2b00      	cmp	r3, #0
 800719e:	f000 808f 	beq.w	80072c0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a2c      	ldr	r2, [pc, #176]	; (8007258 <HAL_DMA_IRQHandler+0x3f8>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d04a      	beq.n	8007242 <HAL_DMA_IRQHandler+0x3e2>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a2a      	ldr	r2, [pc, #168]	; (800725c <HAL_DMA_IRQHandler+0x3fc>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d045      	beq.n	8007242 <HAL_DMA_IRQHandler+0x3e2>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a29      	ldr	r2, [pc, #164]	; (8007260 <HAL_DMA_IRQHandler+0x400>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d040      	beq.n	8007242 <HAL_DMA_IRQHandler+0x3e2>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a27      	ldr	r2, [pc, #156]	; (8007264 <HAL_DMA_IRQHandler+0x404>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d03b      	beq.n	8007242 <HAL_DMA_IRQHandler+0x3e2>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a26      	ldr	r2, [pc, #152]	; (8007268 <HAL_DMA_IRQHandler+0x408>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d036      	beq.n	8007242 <HAL_DMA_IRQHandler+0x3e2>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a24      	ldr	r2, [pc, #144]	; (800726c <HAL_DMA_IRQHandler+0x40c>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d031      	beq.n	8007242 <HAL_DMA_IRQHandler+0x3e2>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a23      	ldr	r2, [pc, #140]	; (8007270 <HAL_DMA_IRQHandler+0x410>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d02c      	beq.n	8007242 <HAL_DMA_IRQHandler+0x3e2>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a21      	ldr	r2, [pc, #132]	; (8007274 <HAL_DMA_IRQHandler+0x414>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d027      	beq.n	8007242 <HAL_DMA_IRQHandler+0x3e2>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a20      	ldr	r2, [pc, #128]	; (8007278 <HAL_DMA_IRQHandler+0x418>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d022      	beq.n	8007242 <HAL_DMA_IRQHandler+0x3e2>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a1e      	ldr	r2, [pc, #120]	; (800727c <HAL_DMA_IRQHandler+0x41c>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d01d      	beq.n	8007242 <HAL_DMA_IRQHandler+0x3e2>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a1d      	ldr	r2, [pc, #116]	; (8007280 <HAL_DMA_IRQHandler+0x420>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d018      	beq.n	8007242 <HAL_DMA_IRQHandler+0x3e2>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a1b      	ldr	r2, [pc, #108]	; (8007284 <HAL_DMA_IRQHandler+0x424>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d013      	beq.n	8007242 <HAL_DMA_IRQHandler+0x3e2>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a1a      	ldr	r2, [pc, #104]	; (8007288 <HAL_DMA_IRQHandler+0x428>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d00e      	beq.n	8007242 <HAL_DMA_IRQHandler+0x3e2>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a18      	ldr	r2, [pc, #96]	; (800728c <HAL_DMA_IRQHandler+0x42c>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d009      	beq.n	8007242 <HAL_DMA_IRQHandler+0x3e2>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a17      	ldr	r2, [pc, #92]	; (8007290 <HAL_DMA_IRQHandler+0x430>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d004      	beq.n	8007242 <HAL_DMA_IRQHandler+0x3e2>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a15      	ldr	r2, [pc, #84]	; (8007294 <HAL_DMA_IRQHandler+0x434>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d12a      	bne.n	8007298 <HAL_DMA_IRQHandler+0x438>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 0302 	and.w	r3, r3, #2
 800724c:	2b00      	cmp	r3, #0
 800724e:	bf14      	ite	ne
 8007250:	2301      	movne	r3, #1
 8007252:	2300      	moveq	r3, #0
 8007254:	b2db      	uxtb	r3, r3
 8007256:	e023      	b.n	80072a0 <HAL_DMA_IRQHandler+0x440>
 8007258:	40020010 	.word	0x40020010
 800725c:	40020028 	.word	0x40020028
 8007260:	40020040 	.word	0x40020040
 8007264:	40020058 	.word	0x40020058
 8007268:	40020070 	.word	0x40020070
 800726c:	40020088 	.word	0x40020088
 8007270:	400200a0 	.word	0x400200a0
 8007274:	400200b8 	.word	0x400200b8
 8007278:	40020410 	.word	0x40020410
 800727c:	40020428 	.word	0x40020428
 8007280:	40020440 	.word	0x40020440
 8007284:	40020458 	.word	0x40020458
 8007288:	40020470 	.word	0x40020470
 800728c:	40020488 	.word	0x40020488
 8007290:	400204a0 	.word	0x400204a0
 8007294:	400204b8 	.word	0x400204b8
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2300      	movs	r3, #0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00d      	beq.n	80072c0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072a8:	f003 031f 	and.w	r3, r3, #31
 80072ac:	2204      	movs	r2, #4
 80072ae:	409a      	lsls	r2, r3
 80072b0:	6a3b      	ldr	r3, [r7, #32]
 80072b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b8:	f043 0204 	orr.w	r2, r3, #4
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072c4:	f003 031f 	and.w	r3, r3, #31
 80072c8:	2210      	movs	r2, #16
 80072ca:	409a      	lsls	r2, r3
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	4013      	ands	r3, r2
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f000 80a6 	beq.w	8007422 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a85      	ldr	r2, [pc, #532]	; (80074f0 <HAL_DMA_IRQHandler+0x690>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d04a      	beq.n	8007376 <HAL_DMA_IRQHandler+0x516>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a83      	ldr	r2, [pc, #524]	; (80074f4 <HAL_DMA_IRQHandler+0x694>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d045      	beq.n	8007376 <HAL_DMA_IRQHandler+0x516>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a82      	ldr	r2, [pc, #520]	; (80074f8 <HAL_DMA_IRQHandler+0x698>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d040      	beq.n	8007376 <HAL_DMA_IRQHandler+0x516>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a80      	ldr	r2, [pc, #512]	; (80074fc <HAL_DMA_IRQHandler+0x69c>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d03b      	beq.n	8007376 <HAL_DMA_IRQHandler+0x516>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a7f      	ldr	r2, [pc, #508]	; (8007500 <HAL_DMA_IRQHandler+0x6a0>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d036      	beq.n	8007376 <HAL_DMA_IRQHandler+0x516>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a7d      	ldr	r2, [pc, #500]	; (8007504 <HAL_DMA_IRQHandler+0x6a4>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d031      	beq.n	8007376 <HAL_DMA_IRQHandler+0x516>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a7c      	ldr	r2, [pc, #496]	; (8007508 <HAL_DMA_IRQHandler+0x6a8>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d02c      	beq.n	8007376 <HAL_DMA_IRQHandler+0x516>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a7a      	ldr	r2, [pc, #488]	; (800750c <HAL_DMA_IRQHandler+0x6ac>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d027      	beq.n	8007376 <HAL_DMA_IRQHandler+0x516>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a79      	ldr	r2, [pc, #484]	; (8007510 <HAL_DMA_IRQHandler+0x6b0>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d022      	beq.n	8007376 <HAL_DMA_IRQHandler+0x516>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a77      	ldr	r2, [pc, #476]	; (8007514 <HAL_DMA_IRQHandler+0x6b4>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d01d      	beq.n	8007376 <HAL_DMA_IRQHandler+0x516>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a76      	ldr	r2, [pc, #472]	; (8007518 <HAL_DMA_IRQHandler+0x6b8>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d018      	beq.n	8007376 <HAL_DMA_IRQHandler+0x516>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a74      	ldr	r2, [pc, #464]	; (800751c <HAL_DMA_IRQHandler+0x6bc>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d013      	beq.n	8007376 <HAL_DMA_IRQHandler+0x516>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a73      	ldr	r2, [pc, #460]	; (8007520 <HAL_DMA_IRQHandler+0x6c0>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d00e      	beq.n	8007376 <HAL_DMA_IRQHandler+0x516>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a71      	ldr	r2, [pc, #452]	; (8007524 <HAL_DMA_IRQHandler+0x6c4>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d009      	beq.n	8007376 <HAL_DMA_IRQHandler+0x516>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a70      	ldr	r2, [pc, #448]	; (8007528 <HAL_DMA_IRQHandler+0x6c8>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d004      	beq.n	8007376 <HAL_DMA_IRQHandler+0x516>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a6e      	ldr	r2, [pc, #440]	; (800752c <HAL_DMA_IRQHandler+0x6cc>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d10a      	bne.n	800738c <HAL_DMA_IRQHandler+0x52c>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 0308 	and.w	r3, r3, #8
 8007380:	2b00      	cmp	r3, #0
 8007382:	bf14      	ite	ne
 8007384:	2301      	movne	r3, #1
 8007386:	2300      	moveq	r3, #0
 8007388:	b2db      	uxtb	r3, r3
 800738a:	e009      	b.n	80073a0 <HAL_DMA_IRQHandler+0x540>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0304 	and.w	r3, r3, #4
 8007396:	2b00      	cmp	r3, #0
 8007398:	bf14      	ite	ne
 800739a:	2301      	movne	r3, #1
 800739c:	2300      	moveq	r3, #0
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d03e      	beq.n	8007422 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073a8:	f003 031f 	and.w	r3, r3, #31
 80073ac:	2210      	movs	r2, #16
 80073ae:	409a      	lsls	r2, r3
 80073b0:	6a3b      	ldr	r3, [r7, #32]
 80073b2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d018      	beq.n	80073f4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d108      	bne.n	80073e2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d024      	beq.n	8007422 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	4798      	blx	r3
 80073e0:	e01f      	b.n	8007422 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d01b      	beq.n	8007422 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	4798      	blx	r3
 80073f2:	e016      	b.n	8007422 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d107      	bne.n	8007412 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f022 0208 	bic.w	r2, r2, #8
 8007410:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007416:	2b00      	cmp	r3, #0
 8007418:	d003      	beq.n	8007422 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007426:	f003 031f 	and.w	r3, r3, #31
 800742a:	2220      	movs	r2, #32
 800742c:	409a      	lsls	r2, r3
 800742e:	69bb      	ldr	r3, [r7, #24]
 8007430:	4013      	ands	r3, r2
 8007432:	2b00      	cmp	r3, #0
 8007434:	f000 8110 	beq.w	8007658 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a2c      	ldr	r2, [pc, #176]	; (80074f0 <HAL_DMA_IRQHandler+0x690>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d04a      	beq.n	80074d8 <HAL_DMA_IRQHandler+0x678>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a2b      	ldr	r2, [pc, #172]	; (80074f4 <HAL_DMA_IRQHandler+0x694>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d045      	beq.n	80074d8 <HAL_DMA_IRQHandler+0x678>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a29      	ldr	r2, [pc, #164]	; (80074f8 <HAL_DMA_IRQHandler+0x698>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d040      	beq.n	80074d8 <HAL_DMA_IRQHandler+0x678>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a28      	ldr	r2, [pc, #160]	; (80074fc <HAL_DMA_IRQHandler+0x69c>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d03b      	beq.n	80074d8 <HAL_DMA_IRQHandler+0x678>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a26      	ldr	r2, [pc, #152]	; (8007500 <HAL_DMA_IRQHandler+0x6a0>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d036      	beq.n	80074d8 <HAL_DMA_IRQHandler+0x678>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a25      	ldr	r2, [pc, #148]	; (8007504 <HAL_DMA_IRQHandler+0x6a4>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d031      	beq.n	80074d8 <HAL_DMA_IRQHandler+0x678>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a23      	ldr	r2, [pc, #140]	; (8007508 <HAL_DMA_IRQHandler+0x6a8>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d02c      	beq.n	80074d8 <HAL_DMA_IRQHandler+0x678>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a22      	ldr	r2, [pc, #136]	; (800750c <HAL_DMA_IRQHandler+0x6ac>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d027      	beq.n	80074d8 <HAL_DMA_IRQHandler+0x678>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a20      	ldr	r2, [pc, #128]	; (8007510 <HAL_DMA_IRQHandler+0x6b0>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d022      	beq.n	80074d8 <HAL_DMA_IRQHandler+0x678>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a1f      	ldr	r2, [pc, #124]	; (8007514 <HAL_DMA_IRQHandler+0x6b4>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d01d      	beq.n	80074d8 <HAL_DMA_IRQHandler+0x678>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a1d      	ldr	r2, [pc, #116]	; (8007518 <HAL_DMA_IRQHandler+0x6b8>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d018      	beq.n	80074d8 <HAL_DMA_IRQHandler+0x678>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a1c      	ldr	r2, [pc, #112]	; (800751c <HAL_DMA_IRQHandler+0x6bc>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d013      	beq.n	80074d8 <HAL_DMA_IRQHandler+0x678>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a1a      	ldr	r2, [pc, #104]	; (8007520 <HAL_DMA_IRQHandler+0x6c0>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d00e      	beq.n	80074d8 <HAL_DMA_IRQHandler+0x678>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a19      	ldr	r2, [pc, #100]	; (8007524 <HAL_DMA_IRQHandler+0x6c4>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d009      	beq.n	80074d8 <HAL_DMA_IRQHandler+0x678>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a17      	ldr	r2, [pc, #92]	; (8007528 <HAL_DMA_IRQHandler+0x6c8>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d004      	beq.n	80074d8 <HAL_DMA_IRQHandler+0x678>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a16      	ldr	r2, [pc, #88]	; (800752c <HAL_DMA_IRQHandler+0x6cc>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d12b      	bne.n	8007530 <HAL_DMA_IRQHandler+0x6d0>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 0310 	and.w	r3, r3, #16
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	bf14      	ite	ne
 80074e6:	2301      	movne	r3, #1
 80074e8:	2300      	moveq	r3, #0
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	e02a      	b.n	8007544 <HAL_DMA_IRQHandler+0x6e4>
 80074ee:	bf00      	nop
 80074f0:	40020010 	.word	0x40020010
 80074f4:	40020028 	.word	0x40020028
 80074f8:	40020040 	.word	0x40020040
 80074fc:	40020058 	.word	0x40020058
 8007500:	40020070 	.word	0x40020070
 8007504:	40020088 	.word	0x40020088
 8007508:	400200a0 	.word	0x400200a0
 800750c:	400200b8 	.word	0x400200b8
 8007510:	40020410 	.word	0x40020410
 8007514:	40020428 	.word	0x40020428
 8007518:	40020440 	.word	0x40020440
 800751c:	40020458 	.word	0x40020458
 8007520:	40020470 	.word	0x40020470
 8007524:	40020488 	.word	0x40020488
 8007528:	400204a0 	.word	0x400204a0
 800752c:	400204b8 	.word	0x400204b8
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 0302 	and.w	r3, r3, #2
 800753a:	2b00      	cmp	r3, #0
 800753c:	bf14      	ite	ne
 800753e:	2301      	movne	r3, #1
 8007540:	2300      	moveq	r3, #0
 8007542:	b2db      	uxtb	r3, r3
 8007544:	2b00      	cmp	r3, #0
 8007546:	f000 8087 	beq.w	8007658 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800754e:	f003 031f 	and.w	r3, r3, #31
 8007552:	2220      	movs	r2, #32
 8007554:	409a      	lsls	r2, r3
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b04      	cmp	r3, #4
 8007564:	d139      	bne.n	80075da <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f022 0216 	bic.w	r2, r2, #22
 8007574:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	695a      	ldr	r2, [r3, #20]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007584:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758a:	2b00      	cmp	r3, #0
 800758c:	d103      	bne.n	8007596 <HAL_DMA_IRQHandler+0x736>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007592:	2b00      	cmp	r3, #0
 8007594:	d007      	beq.n	80075a6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f022 0208 	bic.w	r2, r2, #8
 80075a4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075aa:	f003 031f 	and.w	r3, r3, #31
 80075ae:	223f      	movs	r2, #63	; 0x3f
 80075b0:	409a      	lsls	r2, r3
 80075b2:	6a3b      	ldr	r3, [r7, #32]
 80075b4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2201      	movs	r2, #1
 80075ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f000 834a 	beq.w	8007c64 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	4798      	blx	r3
          }
          return;
 80075d8:	e344      	b.n	8007c64 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d018      	beq.n	800761a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d108      	bne.n	8007608 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d02c      	beq.n	8007658 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	4798      	blx	r3
 8007606:	e027      	b.n	8007658 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800760c:	2b00      	cmp	r3, #0
 800760e:	d023      	beq.n	8007658 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	4798      	blx	r3
 8007618:	e01e      	b.n	8007658 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10f      	bne.n	8007648 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f022 0210 	bic.w	r2, r2, #16
 8007636:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800764c:	2b00      	cmp	r3, #0
 800764e:	d003      	beq.n	8007658 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800765c:	2b00      	cmp	r3, #0
 800765e:	f000 8306 	beq.w	8007c6e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007666:	f003 0301 	and.w	r3, r3, #1
 800766a:	2b00      	cmp	r3, #0
 800766c:	f000 8088 	beq.w	8007780 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2204      	movs	r2, #4
 8007674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a7a      	ldr	r2, [pc, #488]	; (8007868 <HAL_DMA_IRQHandler+0xa08>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d04a      	beq.n	8007718 <HAL_DMA_IRQHandler+0x8b8>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a79      	ldr	r2, [pc, #484]	; (800786c <HAL_DMA_IRQHandler+0xa0c>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d045      	beq.n	8007718 <HAL_DMA_IRQHandler+0x8b8>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a77      	ldr	r2, [pc, #476]	; (8007870 <HAL_DMA_IRQHandler+0xa10>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d040      	beq.n	8007718 <HAL_DMA_IRQHandler+0x8b8>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a76      	ldr	r2, [pc, #472]	; (8007874 <HAL_DMA_IRQHandler+0xa14>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d03b      	beq.n	8007718 <HAL_DMA_IRQHandler+0x8b8>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a74      	ldr	r2, [pc, #464]	; (8007878 <HAL_DMA_IRQHandler+0xa18>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d036      	beq.n	8007718 <HAL_DMA_IRQHandler+0x8b8>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a73      	ldr	r2, [pc, #460]	; (800787c <HAL_DMA_IRQHandler+0xa1c>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d031      	beq.n	8007718 <HAL_DMA_IRQHandler+0x8b8>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a71      	ldr	r2, [pc, #452]	; (8007880 <HAL_DMA_IRQHandler+0xa20>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d02c      	beq.n	8007718 <HAL_DMA_IRQHandler+0x8b8>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a70      	ldr	r2, [pc, #448]	; (8007884 <HAL_DMA_IRQHandler+0xa24>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d027      	beq.n	8007718 <HAL_DMA_IRQHandler+0x8b8>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a6e      	ldr	r2, [pc, #440]	; (8007888 <HAL_DMA_IRQHandler+0xa28>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d022      	beq.n	8007718 <HAL_DMA_IRQHandler+0x8b8>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a6d      	ldr	r2, [pc, #436]	; (800788c <HAL_DMA_IRQHandler+0xa2c>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d01d      	beq.n	8007718 <HAL_DMA_IRQHandler+0x8b8>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a6b      	ldr	r2, [pc, #428]	; (8007890 <HAL_DMA_IRQHandler+0xa30>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d018      	beq.n	8007718 <HAL_DMA_IRQHandler+0x8b8>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a6a      	ldr	r2, [pc, #424]	; (8007894 <HAL_DMA_IRQHandler+0xa34>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d013      	beq.n	8007718 <HAL_DMA_IRQHandler+0x8b8>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a68      	ldr	r2, [pc, #416]	; (8007898 <HAL_DMA_IRQHandler+0xa38>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d00e      	beq.n	8007718 <HAL_DMA_IRQHandler+0x8b8>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a67      	ldr	r2, [pc, #412]	; (800789c <HAL_DMA_IRQHandler+0xa3c>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d009      	beq.n	8007718 <HAL_DMA_IRQHandler+0x8b8>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a65      	ldr	r2, [pc, #404]	; (80078a0 <HAL_DMA_IRQHandler+0xa40>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d004      	beq.n	8007718 <HAL_DMA_IRQHandler+0x8b8>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a64      	ldr	r2, [pc, #400]	; (80078a4 <HAL_DMA_IRQHandler+0xa44>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d108      	bne.n	800772a <HAL_DMA_IRQHandler+0x8ca>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f022 0201 	bic.w	r2, r2, #1
 8007726:	601a      	str	r2, [r3, #0]
 8007728:	e007      	b.n	800773a <HAL_DMA_IRQHandler+0x8da>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f022 0201 	bic.w	r2, r2, #1
 8007738:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	3301      	adds	r3, #1
 800773e:	60fb      	str	r3, [r7, #12]
 8007740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007742:	429a      	cmp	r2, r3
 8007744:	d307      	bcc.n	8007756 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 0301 	and.w	r3, r3, #1
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1f2      	bne.n	800773a <HAL_DMA_IRQHandler+0x8da>
 8007754:	e000      	b.n	8007758 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007756:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 0301 	and.w	r3, r3, #1
 8007762:	2b00      	cmp	r3, #0
 8007764:	d004      	beq.n	8007770 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2203      	movs	r2, #3
 800776a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800776e:	e003      	b.n	8007778 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007784:	2b00      	cmp	r3, #0
 8007786:	f000 8272 	beq.w	8007c6e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	4798      	blx	r3
 8007792:	e26c      	b.n	8007c6e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a43      	ldr	r2, [pc, #268]	; (80078a8 <HAL_DMA_IRQHandler+0xa48>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d022      	beq.n	80077e4 <HAL_DMA_IRQHandler+0x984>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a42      	ldr	r2, [pc, #264]	; (80078ac <HAL_DMA_IRQHandler+0xa4c>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d01d      	beq.n	80077e4 <HAL_DMA_IRQHandler+0x984>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a40      	ldr	r2, [pc, #256]	; (80078b0 <HAL_DMA_IRQHandler+0xa50>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d018      	beq.n	80077e4 <HAL_DMA_IRQHandler+0x984>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a3f      	ldr	r2, [pc, #252]	; (80078b4 <HAL_DMA_IRQHandler+0xa54>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d013      	beq.n	80077e4 <HAL_DMA_IRQHandler+0x984>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a3d      	ldr	r2, [pc, #244]	; (80078b8 <HAL_DMA_IRQHandler+0xa58>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d00e      	beq.n	80077e4 <HAL_DMA_IRQHandler+0x984>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a3c      	ldr	r2, [pc, #240]	; (80078bc <HAL_DMA_IRQHandler+0xa5c>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d009      	beq.n	80077e4 <HAL_DMA_IRQHandler+0x984>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a3a      	ldr	r2, [pc, #232]	; (80078c0 <HAL_DMA_IRQHandler+0xa60>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d004      	beq.n	80077e4 <HAL_DMA_IRQHandler+0x984>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a39      	ldr	r2, [pc, #228]	; (80078c4 <HAL_DMA_IRQHandler+0xa64>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d101      	bne.n	80077e8 <HAL_DMA_IRQHandler+0x988>
 80077e4:	2301      	movs	r3, #1
 80077e6:	e000      	b.n	80077ea <HAL_DMA_IRQHandler+0x98a>
 80077e8:	2300      	movs	r3, #0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f000 823f 	beq.w	8007c6e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077fc:	f003 031f 	and.w	r3, r3, #31
 8007800:	2204      	movs	r2, #4
 8007802:	409a      	lsls	r2, r3
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	4013      	ands	r3, r2
 8007808:	2b00      	cmp	r3, #0
 800780a:	f000 80cd 	beq.w	80079a8 <HAL_DMA_IRQHandler+0xb48>
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	f003 0304 	and.w	r3, r3, #4
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 80c7 	beq.w	80079a8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800781e:	f003 031f 	and.w	r3, r3, #31
 8007822:	2204      	movs	r2, #4
 8007824:	409a      	lsls	r2, r3
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007830:	2b00      	cmp	r3, #0
 8007832:	d049      	beq.n	80078c8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800783a:	2b00      	cmp	r3, #0
 800783c:	d109      	bne.n	8007852 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007842:	2b00      	cmp	r3, #0
 8007844:	f000 8210 	beq.w	8007c68 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007850:	e20a      	b.n	8007c68 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007856:	2b00      	cmp	r3, #0
 8007858:	f000 8206 	beq.w	8007c68 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007864:	e200      	b.n	8007c68 <HAL_DMA_IRQHandler+0xe08>
 8007866:	bf00      	nop
 8007868:	40020010 	.word	0x40020010
 800786c:	40020028 	.word	0x40020028
 8007870:	40020040 	.word	0x40020040
 8007874:	40020058 	.word	0x40020058
 8007878:	40020070 	.word	0x40020070
 800787c:	40020088 	.word	0x40020088
 8007880:	400200a0 	.word	0x400200a0
 8007884:	400200b8 	.word	0x400200b8
 8007888:	40020410 	.word	0x40020410
 800788c:	40020428 	.word	0x40020428
 8007890:	40020440 	.word	0x40020440
 8007894:	40020458 	.word	0x40020458
 8007898:	40020470 	.word	0x40020470
 800789c:	40020488 	.word	0x40020488
 80078a0:	400204a0 	.word	0x400204a0
 80078a4:	400204b8 	.word	0x400204b8
 80078a8:	58025408 	.word	0x58025408
 80078ac:	5802541c 	.word	0x5802541c
 80078b0:	58025430 	.word	0x58025430
 80078b4:	58025444 	.word	0x58025444
 80078b8:	58025458 	.word	0x58025458
 80078bc:	5802546c 	.word	0x5802546c
 80078c0:	58025480 	.word	0x58025480
 80078c4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	f003 0320 	and.w	r3, r3, #32
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d160      	bne.n	8007994 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a8c      	ldr	r2, [pc, #560]	; (8007b08 <HAL_DMA_IRQHandler+0xca8>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d04a      	beq.n	8007972 <HAL_DMA_IRQHandler+0xb12>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a8a      	ldr	r2, [pc, #552]	; (8007b0c <HAL_DMA_IRQHandler+0xcac>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d045      	beq.n	8007972 <HAL_DMA_IRQHandler+0xb12>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a89      	ldr	r2, [pc, #548]	; (8007b10 <HAL_DMA_IRQHandler+0xcb0>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d040      	beq.n	8007972 <HAL_DMA_IRQHandler+0xb12>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a87      	ldr	r2, [pc, #540]	; (8007b14 <HAL_DMA_IRQHandler+0xcb4>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d03b      	beq.n	8007972 <HAL_DMA_IRQHandler+0xb12>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a86      	ldr	r2, [pc, #536]	; (8007b18 <HAL_DMA_IRQHandler+0xcb8>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d036      	beq.n	8007972 <HAL_DMA_IRQHandler+0xb12>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a84      	ldr	r2, [pc, #528]	; (8007b1c <HAL_DMA_IRQHandler+0xcbc>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d031      	beq.n	8007972 <HAL_DMA_IRQHandler+0xb12>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a83      	ldr	r2, [pc, #524]	; (8007b20 <HAL_DMA_IRQHandler+0xcc0>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d02c      	beq.n	8007972 <HAL_DMA_IRQHandler+0xb12>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a81      	ldr	r2, [pc, #516]	; (8007b24 <HAL_DMA_IRQHandler+0xcc4>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d027      	beq.n	8007972 <HAL_DMA_IRQHandler+0xb12>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a80      	ldr	r2, [pc, #512]	; (8007b28 <HAL_DMA_IRQHandler+0xcc8>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d022      	beq.n	8007972 <HAL_DMA_IRQHandler+0xb12>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a7e      	ldr	r2, [pc, #504]	; (8007b2c <HAL_DMA_IRQHandler+0xccc>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d01d      	beq.n	8007972 <HAL_DMA_IRQHandler+0xb12>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a7d      	ldr	r2, [pc, #500]	; (8007b30 <HAL_DMA_IRQHandler+0xcd0>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d018      	beq.n	8007972 <HAL_DMA_IRQHandler+0xb12>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a7b      	ldr	r2, [pc, #492]	; (8007b34 <HAL_DMA_IRQHandler+0xcd4>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d013      	beq.n	8007972 <HAL_DMA_IRQHandler+0xb12>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a7a      	ldr	r2, [pc, #488]	; (8007b38 <HAL_DMA_IRQHandler+0xcd8>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d00e      	beq.n	8007972 <HAL_DMA_IRQHandler+0xb12>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a78      	ldr	r2, [pc, #480]	; (8007b3c <HAL_DMA_IRQHandler+0xcdc>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d009      	beq.n	8007972 <HAL_DMA_IRQHandler+0xb12>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a77      	ldr	r2, [pc, #476]	; (8007b40 <HAL_DMA_IRQHandler+0xce0>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d004      	beq.n	8007972 <HAL_DMA_IRQHandler+0xb12>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a75      	ldr	r2, [pc, #468]	; (8007b44 <HAL_DMA_IRQHandler+0xce4>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d108      	bne.n	8007984 <HAL_DMA_IRQHandler+0xb24>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f022 0208 	bic.w	r2, r2, #8
 8007980:	601a      	str	r2, [r3, #0]
 8007982:	e007      	b.n	8007994 <HAL_DMA_IRQHandler+0xb34>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f022 0204 	bic.w	r2, r2, #4
 8007992:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007998:	2b00      	cmp	r3, #0
 800799a:	f000 8165 	beq.w	8007c68 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079a6:	e15f      	b.n	8007c68 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079ac:	f003 031f 	and.w	r3, r3, #31
 80079b0:	2202      	movs	r2, #2
 80079b2:	409a      	lsls	r2, r3
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	4013      	ands	r3, r2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 80c5 	beq.w	8007b48 <HAL_DMA_IRQHandler+0xce8>
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	f003 0302 	and.w	r3, r3, #2
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f000 80bf 	beq.w	8007b48 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079ce:	f003 031f 	and.w	r3, r3, #31
 80079d2:	2202      	movs	r2, #2
 80079d4:	409a      	lsls	r2, r3
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d018      	beq.n	8007a16 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d109      	bne.n	8007a02 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	f000 813a 	beq.w	8007c6c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a00:	e134      	b.n	8007c6c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f000 8130 	beq.w	8007c6c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a14:	e12a      	b.n	8007c6c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	f003 0320 	and.w	r3, r3, #32
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d168      	bne.n	8007af2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a38      	ldr	r2, [pc, #224]	; (8007b08 <HAL_DMA_IRQHandler+0xca8>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d04a      	beq.n	8007ac0 <HAL_DMA_IRQHandler+0xc60>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a37      	ldr	r2, [pc, #220]	; (8007b0c <HAL_DMA_IRQHandler+0xcac>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d045      	beq.n	8007ac0 <HAL_DMA_IRQHandler+0xc60>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a35      	ldr	r2, [pc, #212]	; (8007b10 <HAL_DMA_IRQHandler+0xcb0>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d040      	beq.n	8007ac0 <HAL_DMA_IRQHandler+0xc60>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a34      	ldr	r2, [pc, #208]	; (8007b14 <HAL_DMA_IRQHandler+0xcb4>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d03b      	beq.n	8007ac0 <HAL_DMA_IRQHandler+0xc60>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a32      	ldr	r2, [pc, #200]	; (8007b18 <HAL_DMA_IRQHandler+0xcb8>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d036      	beq.n	8007ac0 <HAL_DMA_IRQHandler+0xc60>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a31      	ldr	r2, [pc, #196]	; (8007b1c <HAL_DMA_IRQHandler+0xcbc>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d031      	beq.n	8007ac0 <HAL_DMA_IRQHandler+0xc60>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a2f      	ldr	r2, [pc, #188]	; (8007b20 <HAL_DMA_IRQHandler+0xcc0>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d02c      	beq.n	8007ac0 <HAL_DMA_IRQHandler+0xc60>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a2e      	ldr	r2, [pc, #184]	; (8007b24 <HAL_DMA_IRQHandler+0xcc4>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d027      	beq.n	8007ac0 <HAL_DMA_IRQHandler+0xc60>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a2c      	ldr	r2, [pc, #176]	; (8007b28 <HAL_DMA_IRQHandler+0xcc8>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d022      	beq.n	8007ac0 <HAL_DMA_IRQHandler+0xc60>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a2b      	ldr	r2, [pc, #172]	; (8007b2c <HAL_DMA_IRQHandler+0xccc>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d01d      	beq.n	8007ac0 <HAL_DMA_IRQHandler+0xc60>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a29      	ldr	r2, [pc, #164]	; (8007b30 <HAL_DMA_IRQHandler+0xcd0>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d018      	beq.n	8007ac0 <HAL_DMA_IRQHandler+0xc60>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a28      	ldr	r2, [pc, #160]	; (8007b34 <HAL_DMA_IRQHandler+0xcd4>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d013      	beq.n	8007ac0 <HAL_DMA_IRQHandler+0xc60>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a26      	ldr	r2, [pc, #152]	; (8007b38 <HAL_DMA_IRQHandler+0xcd8>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d00e      	beq.n	8007ac0 <HAL_DMA_IRQHandler+0xc60>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a25      	ldr	r2, [pc, #148]	; (8007b3c <HAL_DMA_IRQHandler+0xcdc>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d009      	beq.n	8007ac0 <HAL_DMA_IRQHandler+0xc60>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a23      	ldr	r2, [pc, #140]	; (8007b40 <HAL_DMA_IRQHandler+0xce0>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d004      	beq.n	8007ac0 <HAL_DMA_IRQHandler+0xc60>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a22      	ldr	r2, [pc, #136]	; (8007b44 <HAL_DMA_IRQHandler+0xce4>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d108      	bne.n	8007ad2 <HAL_DMA_IRQHandler+0xc72>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f022 0214 	bic.w	r2, r2, #20
 8007ace:	601a      	str	r2, [r3, #0]
 8007ad0:	e007      	b.n	8007ae2 <HAL_DMA_IRQHandler+0xc82>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f022 020a 	bic.w	r2, r2, #10
 8007ae0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	f000 80b8 	beq.w	8007c6c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b04:	e0b2      	b.n	8007c6c <HAL_DMA_IRQHandler+0xe0c>
 8007b06:	bf00      	nop
 8007b08:	40020010 	.word	0x40020010
 8007b0c:	40020028 	.word	0x40020028
 8007b10:	40020040 	.word	0x40020040
 8007b14:	40020058 	.word	0x40020058
 8007b18:	40020070 	.word	0x40020070
 8007b1c:	40020088 	.word	0x40020088
 8007b20:	400200a0 	.word	0x400200a0
 8007b24:	400200b8 	.word	0x400200b8
 8007b28:	40020410 	.word	0x40020410
 8007b2c:	40020428 	.word	0x40020428
 8007b30:	40020440 	.word	0x40020440
 8007b34:	40020458 	.word	0x40020458
 8007b38:	40020470 	.word	0x40020470
 8007b3c:	40020488 	.word	0x40020488
 8007b40:	400204a0 	.word	0x400204a0
 8007b44:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b4c:	f003 031f 	and.w	r3, r3, #31
 8007b50:	2208      	movs	r2, #8
 8007b52:	409a      	lsls	r2, r3
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	4013      	ands	r3, r2
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 8088 	beq.w	8007c6e <HAL_DMA_IRQHandler+0xe0e>
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	f003 0308 	and.w	r3, r3, #8
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f000 8082 	beq.w	8007c6e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a41      	ldr	r2, [pc, #260]	; (8007c74 <HAL_DMA_IRQHandler+0xe14>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d04a      	beq.n	8007c0a <HAL_DMA_IRQHandler+0xdaa>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a3f      	ldr	r2, [pc, #252]	; (8007c78 <HAL_DMA_IRQHandler+0xe18>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d045      	beq.n	8007c0a <HAL_DMA_IRQHandler+0xdaa>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a3e      	ldr	r2, [pc, #248]	; (8007c7c <HAL_DMA_IRQHandler+0xe1c>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d040      	beq.n	8007c0a <HAL_DMA_IRQHandler+0xdaa>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a3c      	ldr	r2, [pc, #240]	; (8007c80 <HAL_DMA_IRQHandler+0xe20>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d03b      	beq.n	8007c0a <HAL_DMA_IRQHandler+0xdaa>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a3b      	ldr	r2, [pc, #236]	; (8007c84 <HAL_DMA_IRQHandler+0xe24>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d036      	beq.n	8007c0a <HAL_DMA_IRQHandler+0xdaa>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a39      	ldr	r2, [pc, #228]	; (8007c88 <HAL_DMA_IRQHandler+0xe28>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d031      	beq.n	8007c0a <HAL_DMA_IRQHandler+0xdaa>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a38      	ldr	r2, [pc, #224]	; (8007c8c <HAL_DMA_IRQHandler+0xe2c>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d02c      	beq.n	8007c0a <HAL_DMA_IRQHandler+0xdaa>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a36      	ldr	r2, [pc, #216]	; (8007c90 <HAL_DMA_IRQHandler+0xe30>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d027      	beq.n	8007c0a <HAL_DMA_IRQHandler+0xdaa>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a35      	ldr	r2, [pc, #212]	; (8007c94 <HAL_DMA_IRQHandler+0xe34>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d022      	beq.n	8007c0a <HAL_DMA_IRQHandler+0xdaa>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a33      	ldr	r2, [pc, #204]	; (8007c98 <HAL_DMA_IRQHandler+0xe38>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d01d      	beq.n	8007c0a <HAL_DMA_IRQHandler+0xdaa>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a32      	ldr	r2, [pc, #200]	; (8007c9c <HAL_DMA_IRQHandler+0xe3c>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d018      	beq.n	8007c0a <HAL_DMA_IRQHandler+0xdaa>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a30      	ldr	r2, [pc, #192]	; (8007ca0 <HAL_DMA_IRQHandler+0xe40>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d013      	beq.n	8007c0a <HAL_DMA_IRQHandler+0xdaa>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a2f      	ldr	r2, [pc, #188]	; (8007ca4 <HAL_DMA_IRQHandler+0xe44>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d00e      	beq.n	8007c0a <HAL_DMA_IRQHandler+0xdaa>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a2d      	ldr	r2, [pc, #180]	; (8007ca8 <HAL_DMA_IRQHandler+0xe48>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d009      	beq.n	8007c0a <HAL_DMA_IRQHandler+0xdaa>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a2c      	ldr	r2, [pc, #176]	; (8007cac <HAL_DMA_IRQHandler+0xe4c>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d004      	beq.n	8007c0a <HAL_DMA_IRQHandler+0xdaa>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a2a      	ldr	r2, [pc, #168]	; (8007cb0 <HAL_DMA_IRQHandler+0xe50>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d108      	bne.n	8007c1c <HAL_DMA_IRQHandler+0xdbc>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f022 021c 	bic.w	r2, r2, #28
 8007c18:	601a      	str	r2, [r3, #0]
 8007c1a:	e007      	b.n	8007c2c <HAL_DMA_IRQHandler+0xdcc>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f022 020e 	bic.w	r2, r2, #14
 8007c2a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c30:	f003 031f 	and.w	r3, r3, #31
 8007c34:	2201      	movs	r2, #1
 8007c36:	409a      	lsls	r2, r3
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2201      	movs	r2, #1
 8007c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d009      	beq.n	8007c6e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	4798      	blx	r3
 8007c62:	e004      	b.n	8007c6e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007c64:	bf00      	nop
 8007c66:	e002      	b.n	8007c6e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c68:	bf00      	nop
 8007c6a:	e000      	b.n	8007c6e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c6c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007c6e:	3728      	adds	r7, #40	; 0x28
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	40020010 	.word	0x40020010
 8007c78:	40020028 	.word	0x40020028
 8007c7c:	40020040 	.word	0x40020040
 8007c80:	40020058 	.word	0x40020058
 8007c84:	40020070 	.word	0x40020070
 8007c88:	40020088 	.word	0x40020088
 8007c8c:	400200a0 	.word	0x400200a0
 8007c90:	400200b8 	.word	0x400200b8
 8007c94:	40020410 	.word	0x40020410
 8007c98:	40020428 	.word	0x40020428
 8007c9c:	40020440 	.word	0x40020440
 8007ca0:	40020458 	.word	0x40020458
 8007ca4:	40020470 	.word	0x40020470
 8007ca8:	40020488 	.word	0x40020488
 8007cac:	400204a0 	.word	0x400204a0
 8007cb0:	400204b8 	.word	0x400204b8

08007cb4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b087      	sub	sp, #28
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
 8007cc0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cc6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ccc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a84      	ldr	r2, [pc, #528]	; (8007ee4 <DMA_SetConfig+0x230>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d072      	beq.n	8007dbe <DMA_SetConfig+0x10a>
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a82      	ldr	r2, [pc, #520]	; (8007ee8 <DMA_SetConfig+0x234>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d06d      	beq.n	8007dbe <DMA_SetConfig+0x10a>
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a81      	ldr	r2, [pc, #516]	; (8007eec <DMA_SetConfig+0x238>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d068      	beq.n	8007dbe <DMA_SetConfig+0x10a>
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a7f      	ldr	r2, [pc, #508]	; (8007ef0 <DMA_SetConfig+0x23c>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d063      	beq.n	8007dbe <DMA_SetConfig+0x10a>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a7e      	ldr	r2, [pc, #504]	; (8007ef4 <DMA_SetConfig+0x240>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d05e      	beq.n	8007dbe <DMA_SetConfig+0x10a>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a7c      	ldr	r2, [pc, #496]	; (8007ef8 <DMA_SetConfig+0x244>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d059      	beq.n	8007dbe <DMA_SetConfig+0x10a>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a7b      	ldr	r2, [pc, #492]	; (8007efc <DMA_SetConfig+0x248>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d054      	beq.n	8007dbe <DMA_SetConfig+0x10a>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a79      	ldr	r2, [pc, #484]	; (8007f00 <DMA_SetConfig+0x24c>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d04f      	beq.n	8007dbe <DMA_SetConfig+0x10a>
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a78      	ldr	r2, [pc, #480]	; (8007f04 <DMA_SetConfig+0x250>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d04a      	beq.n	8007dbe <DMA_SetConfig+0x10a>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a76      	ldr	r2, [pc, #472]	; (8007f08 <DMA_SetConfig+0x254>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d045      	beq.n	8007dbe <DMA_SetConfig+0x10a>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a75      	ldr	r2, [pc, #468]	; (8007f0c <DMA_SetConfig+0x258>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d040      	beq.n	8007dbe <DMA_SetConfig+0x10a>
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a73      	ldr	r2, [pc, #460]	; (8007f10 <DMA_SetConfig+0x25c>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d03b      	beq.n	8007dbe <DMA_SetConfig+0x10a>
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a72      	ldr	r2, [pc, #456]	; (8007f14 <DMA_SetConfig+0x260>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d036      	beq.n	8007dbe <DMA_SetConfig+0x10a>
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a70      	ldr	r2, [pc, #448]	; (8007f18 <DMA_SetConfig+0x264>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d031      	beq.n	8007dbe <DMA_SetConfig+0x10a>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a6f      	ldr	r2, [pc, #444]	; (8007f1c <DMA_SetConfig+0x268>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d02c      	beq.n	8007dbe <DMA_SetConfig+0x10a>
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a6d      	ldr	r2, [pc, #436]	; (8007f20 <DMA_SetConfig+0x26c>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d027      	beq.n	8007dbe <DMA_SetConfig+0x10a>
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a6c      	ldr	r2, [pc, #432]	; (8007f24 <DMA_SetConfig+0x270>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d022      	beq.n	8007dbe <DMA_SetConfig+0x10a>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a6a      	ldr	r2, [pc, #424]	; (8007f28 <DMA_SetConfig+0x274>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d01d      	beq.n	8007dbe <DMA_SetConfig+0x10a>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a69      	ldr	r2, [pc, #420]	; (8007f2c <DMA_SetConfig+0x278>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d018      	beq.n	8007dbe <DMA_SetConfig+0x10a>
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a67      	ldr	r2, [pc, #412]	; (8007f30 <DMA_SetConfig+0x27c>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d013      	beq.n	8007dbe <DMA_SetConfig+0x10a>
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a66      	ldr	r2, [pc, #408]	; (8007f34 <DMA_SetConfig+0x280>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d00e      	beq.n	8007dbe <DMA_SetConfig+0x10a>
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a64      	ldr	r2, [pc, #400]	; (8007f38 <DMA_SetConfig+0x284>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d009      	beq.n	8007dbe <DMA_SetConfig+0x10a>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a63      	ldr	r2, [pc, #396]	; (8007f3c <DMA_SetConfig+0x288>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d004      	beq.n	8007dbe <DMA_SetConfig+0x10a>
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a61      	ldr	r2, [pc, #388]	; (8007f40 <DMA_SetConfig+0x28c>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d101      	bne.n	8007dc2 <DMA_SetConfig+0x10e>
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e000      	b.n	8007dc4 <DMA_SetConfig+0x110>
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00d      	beq.n	8007de4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007dd0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d004      	beq.n	8007de4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007de2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a3e      	ldr	r2, [pc, #248]	; (8007ee4 <DMA_SetConfig+0x230>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d04a      	beq.n	8007e84 <DMA_SetConfig+0x1d0>
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a3d      	ldr	r2, [pc, #244]	; (8007ee8 <DMA_SetConfig+0x234>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d045      	beq.n	8007e84 <DMA_SetConfig+0x1d0>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a3b      	ldr	r2, [pc, #236]	; (8007eec <DMA_SetConfig+0x238>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d040      	beq.n	8007e84 <DMA_SetConfig+0x1d0>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a3a      	ldr	r2, [pc, #232]	; (8007ef0 <DMA_SetConfig+0x23c>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d03b      	beq.n	8007e84 <DMA_SetConfig+0x1d0>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a38      	ldr	r2, [pc, #224]	; (8007ef4 <DMA_SetConfig+0x240>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d036      	beq.n	8007e84 <DMA_SetConfig+0x1d0>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a37      	ldr	r2, [pc, #220]	; (8007ef8 <DMA_SetConfig+0x244>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d031      	beq.n	8007e84 <DMA_SetConfig+0x1d0>
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a35      	ldr	r2, [pc, #212]	; (8007efc <DMA_SetConfig+0x248>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d02c      	beq.n	8007e84 <DMA_SetConfig+0x1d0>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a34      	ldr	r2, [pc, #208]	; (8007f00 <DMA_SetConfig+0x24c>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d027      	beq.n	8007e84 <DMA_SetConfig+0x1d0>
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a32      	ldr	r2, [pc, #200]	; (8007f04 <DMA_SetConfig+0x250>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d022      	beq.n	8007e84 <DMA_SetConfig+0x1d0>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a31      	ldr	r2, [pc, #196]	; (8007f08 <DMA_SetConfig+0x254>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d01d      	beq.n	8007e84 <DMA_SetConfig+0x1d0>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a2f      	ldr	r2, [pc, #188]	; (8007f0c <DMA_SetConfig+0x258>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d018      	beq.n	8007e84 <DMA_SetConfig+0x1d0>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a2e      	ldr	r2, [pc, #184]	; (8007f10 <DMA_SetConfig+0x25c>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d013      	beq.n	8007e84 <DMA_SetConfig+0x1d0>
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a2c      	ldr	r2, [pc, #176]	; (8007f14 <DMA_SetConfig+0x260>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d00e      	beq.n	8007e84 <DMA_SetConfig+0x1d0>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a2b      	ldr	r2, [pc, #172]	; (8007f18 <DMA_SetConfig+0x264>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d009      	beq.n	8007e84 <DMA_SetConfig+0x1d0>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a29      	ldr	r2, [pc, #164]	; (8007f1c <DMA_SetConfig+0x268>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d004      	beq.n	8007e84 <DMA_SetConfig+0x1d0>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a28      	ldr	r2, [pc, #160]	; (8007f20 <DMA_SetConfig+0x26c>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d101      	bne.n	8007e88 <DMA_SetConfig+0x1d4>
 8007e84:	2301      	movs	r3, #1
 8007e86:	e000      	b.n	8007e8a <DMA_SetConfig+0x1d6>
 8007e88:	2300      	movs	r3, #0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d05a      	beq.n	8007f44 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e92:	f003 031f 	and.w	r3, r3, #31
 8007e96:	223f      	movs	r2, #63	; 0x3f
 8007e98:	409a      	lsls	r2, r3
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007eac:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	683a      	ldr	r2, [r7, #0]
 8007eb4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	2b40      	cmp	r3, #64	; 0x40
 8007ebc:	d108      	bne.n	8007ed0 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007ece:	e087      	b.n	8007fe0 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68ba      	ldr	r2, [r7, #8]
 8007ed6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	60da      	str	r2, [r3, #12]
}
 8007ee0:	e07e      	b.n	8007fe0 <DMA_SetConfig+0x32c>
 8007ee2:	bf00      	nop
 8007ee4:	40020010 	.word	0x40020010
 8007ee8:	40020028 	.word	0x40020028
 8007eec:	40020040 	.word	0x40020040
 8007ef0:	40020058 	.word	0x40020058
 8007ef4:	40020070 	.word	0x40020070
 8007ef8:	40020088 	.word	0x40020088
 8007efc:	400200a0 	.word	0x400200a0
 8007f00:	400200b8 	.word	0x400200b8
 8007f04:	40020410 	.word	0x40020410
 8007f08:	40020428 	.word	0x40020428
 8007f0c:	40020440 	.word	0x40020440
 8007f10:	40020458 	.word	0x40020458
 8007f14:	40020470 	.word	0x40020470
 8007f18:	40020488 	.word	0x40020488
 8007f1c:	400204a0 	.word	0x400204a0
 8007f20:	400204b8 	.word	0x400204b8
 8007f24:	58025408 	.word	0x58025408
 8007f28:	5802541c 	.word	0x5802541c
 8007f2c:	58025430 	.word	0x58025430
 8007f30:	58025444 	.word	0x58025444
 8007f34:	58025458 	.word	0x58025458
 8007f38:	5802546c 	.word	0x5802546c
 8007f3c:	58025480 	.word	0x58025480
 8007f40:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a28      	ldr	r2, [pc, #160]	; (8007fec <DMA_SetConfig+0x338>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d022      	beq.n	8007f94 <DMA_SetConfig+0x2e0>
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a27      	ldr	r2, [pc, #156]	; (8007ff0 <DMA_SetConfig+0x33c>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d01d      	beq.n	8007f94 <DMA_SetConfig+0x2e0>
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a25      	ldr	r2, [pc, #148]	; (8007ff4 <DMA_SetConfig+0x340>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d018      	beq.n	8007f94 <DMA_SetConfig+0x2e0>
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a24      	ldr	r2, [pc, #144]	; (8007ff8 <DMA_SetConfig+0x344>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d013      	beq.n	8007f94 <DMA_SetConfig+0x2e0>
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a22      	ldr	r2, [pc, #136]	; (8007ffc <DMA_SetConfig+0x348>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d00e      	beq.n	8007f94 <DMA_SetConfig+0x2e0>
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a21      	ldr	r2, [pc, #132]	; (8008000 <DMA_SetConfig+0x34c>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d009      	beq.n	8007f94 <DMA_SetConfig+0x2e0>
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a1f      	ldr	r2, [pc, #124]	; (8008004 <DMA_SetConfig+0x350>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d004      	beq.n	8007f94 <DMA_SetConfig+0x2e0>
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a1e      	ldr	r2, [pc, #120]	; (8008008 <DMA_SetConfig+0x354>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d101      	bne.n	8007f98 <DMA_SetConfig+0x2e4>
 8007f94:	2301      	movs	r3, #1
 8007f96:	e000      	b.n	8007f9a <DMA_SetConfig+0x2e6>
 8007f98:	2300      	movs	r3, #0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d020      	beq.n	8007fe0 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fa2:	f003 031f 	and.w	r3, r3, #31
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	409a      	lsls	r2, r3
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	683a      	ldr	r2, [r7, #0]
 8007fb4:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	2b40      	cmp	r3, #64	; 0x40
 8007fbc:	d108      	bne.n	8007fd0 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68ba      	ldr	r2, [r7, #8]
 8007fcc:	60da      	str	r2, [r3, #12]
}
 8007fce:	e007      	b.n	8007fe0 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	60da      	str	r2, [r3, #12]
}
 8007fe0:	bf00      	nop
 8007fe2:	371c      	adds	r7, #28
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr
 8007fec:	58025408 	.word	0x58025408
 8007ff0:	5802541c 	.word	0x5802541c
 8007ff4:	58025430 	.word	0x58025430
 8007ff8:	58025444 	.word	0x58025444
 8007ffc:	58025458 	.word	0x58025458
 8008000:	5802546c 	.word	0x5802546c
 8008004:	58025480 	.word	0x58025480
 8008008:	58025494 	.word	0x58025494

0800800c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800800c:	b480      	push	{r7}
 800800e:	b085      	sub	sp, #20
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a42      	ldr	r2, [pc, #264]	; (8008124 <DMA_CalcBaseAndBitshift+0x118>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d04a      	beq.n	80080b4 <DMA_CalcBaseAndBitshift+0xa8>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a41      	ldr	r2, [pc, #260]	; (8008128 <DMA_CalcBaseAndBitshift+0x11c>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d045      	beq.n	80080b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a3f      	ldr	r2, [pc, #252]	; (800812c <DMA_CalcBaseAndBitshift+0x120>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d040      	beq.n	80080b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a3e      	ldr	r2, [pc, #248]	; (8008130 <DMA_CalcBaseAndBitshift+0x124>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d03b      	beq.n	80080b4 <DMA_CalcBaseAndBitshift+0xa8>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a3c      	ldr	r2, [pc, #240]	; (8008134 <DMA_CalcBaseAndBitshift+0x128>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d036      	beq.n	80080b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a3b      	ldr	r2, [pc, #236]	; (8008138 <DMA_CalcBaseAndBitshift+0x12c>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d031      	beq.n	80080b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a39      	ldr	r2, [pc, #228]	; (800813c <DMA_CalcBaseAndBitshift+0x130>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d02c      	beq.n	80080b4 <DMA_CalcBaseAndBitshift+0xa8>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a38      	ldr	r2, [pc, #224]	; (8008140 <DMA_CalcBaseAndBitshift+0x134>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d027      	beq.n	80080b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a36      	ldr	r2, [pc, #216]	; (8008144 <DMA_CalcBaseAndBitshift+0x138>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d022      	beq.n	80080b4 <DMA_CalcBaseAndBitshift+0xa8>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a35      	ldr	r2, [pc, #212]	; (8008148 <DMA_CalcBaseAndBitshift+0x13c>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d01d      	beq.n	80080b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a33      	ldr	r2, [pc, #204]	; (800814c <DMA_CalcBaseAndBitshift+0x140>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d018      	beq.n	80080b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a32      	ldr	r2, [pc, #200]	; (8008150 <DMA_CalcBaseAndBitshift+0x144>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d013      	beq.n	80080b4 <DMA_CalcBaseAndBitshift+0xa8>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a30      	ldr	r2, [pc, #192]	; (8008154 <DMA_CalcBaseAndBitshift+0x148>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d00e      	beq.n	80080b4 <DMA_CalcBaseAndBitshift+0xa8>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a2f      	ldr	r2, [pc, #188]	; (8008158 <DMA_CalcBaseAndBitshift+0x14c>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d009      	beq.n	80080b4 <DMA_CalcBaseAndBitshift+0xa8>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a2d      	ldr	r2, [pc, #180]	; (800815c <DMA_CalcBaseAndBitshift+0x150>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d004      	beq.n	80080b4 <DMA_CalcBaseAndBitshift+0xa8>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a2c      	ldr	r2, [pc, #176]	; (8008160 <DMA_CalcBaseAndBitshift+0x154>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d101      	bne.n	80080b8 <DMA_CalcBaseAndBitshift+0xac>
 80080b4:	2301      	movs	r3, #1
 80080b6:	e000      	b.n	80080ba <DMA_CalcBaseAndBitshift+0xae>
 80080b8:	2300      	movs	r3, #0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d024      	beq.n	8008108 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	3b10      	subs	r3, #16
 80080c6:	4a27      	ldr	r2, [pc, #156]	; (8008164 <DMA_CalcBaseAndBitshift+0x158>)
 80080c8:	fba2 2303 	umull	r2, r3, r2, r3
 80080cc:	091b      	lsrs	r3, r3, #4
 80080ce:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f003 0307 	and.w	r3, r3, #7
 80080d6:	4a24      	ldr	r2, [pc, #144]	; (8008168 <DMA_CalcBaseAndBitshift+0x15c>)
 80080d8:	5cd3      	ldrb	r3, [r2, r3]
 80080da:	461a      	mov	r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2b03      	cmp	r3, #3
 80080e4:	d908      	bls.n	80080f8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	461a      	mov	r2, r3
 80080ec:	4b1f      	ldr	r3, [pc, #124]	; (800816c <DMA_CalcBaseAndBitshift+0x160>)
 80080ee:	4013      	ands	r3, r2
 80080f0:	1d1a      	adds	r2, r3, #4
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	659a      	str	r2, [r3, #88]	; 0x58
 80080f6:	e00d      	b.n	8008114 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	461a      	mov	r2, r3
 80080fe:	4b1b      	ldr	r3, [pc, #108]	; (800816c <DMA_CalcBaseAndBitshift+0x160>)
 8008100:	4013      	ands	r3, r2
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	6593      	str	r3, [r2, #88]	; 0x58
 8008106:	e005      	b.n	8008114 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008118:	4618      	mov	r0, r3
 800811a:	3714      	adds	r7, #20
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr
 8008124:	40020010 	.word	0x40020010
 8008128:	40020028 	.word	0x40020028
 800812c:	40020040 	.word	0x40020040
 8008130:	40020058 	.word	0x40020058
 8008134:	40020070 	.word	0x40020070
 8008138:	40020088 	.word	0x40020088
 800813c:	400200a0 	.word	0x400200a0
 8008140:	400200b8 	.word	0x400200b8
 8008144:	40020410 	.word	0x40020410
 8008148:	40020428 	.word	0x40020428
 800814c:	40020440 	.word	0x40020440
 8008150:	40020458 	.word	0x40020458
 8008154:	40020470 	.word	0x40020470
 8008158:	40020488 	.word	0x40020488
 800815c:	400204a0 	.word	0x400204a0
 8008160:	400204b8 	.word	0x400204b8
 8008164:	aaaaaaab 	.word	0xaaaaaaab
 8008168:	08012128 	.word	0x08012128
 800816c:	fffffc00 	.word	0xfffffc00

08008170 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008178:	2300      	movs	r3, #0
 800817a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	699b      	ldr	r3, [r3, #24]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d120      	bne.n	80081c6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008188:	2b03      	cmp	r3, #3
 800818a:	d858      	bhi.n	800823e <DMA_CheckFifoParam+0xce>
 800818c:	a201      	add	r2, pc, #4	; (adr r2, 8008194 <DMA_CheckFifoParam+0x24>)
 800818e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008192:	bf00      	nop
 8008194:	080081a5 	.word	0x080081a5
 8008198:	080081b7 	.word	0x080081b7
 800819c:	080081a5 	.word	0x080081a5
 80081a0:	0800823f 	.word	0x0800823f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d048      	beq.n	8008242 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80081b4:	e045      	b.n	8008242 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80081be:	d142      	bne.n	8008246 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80081c4:	e03f      	b.n	8008246 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	699b      	ldr	r3, [r3, #24]
 80081ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081ce:	d123      	bne.n	8008218 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d4:	2b03      	cmp	r3, #3
 80081d6:	d838      	bhi.n	800824a <DMA_CheckFifoParam+0xda>
 80081d8:	a201      	add	r2, pc, #4	; (adr r2, 80081e0 <DMA_CheckFifoParam+0x70>)
 80081da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081de:	bf00      	nop
 80081e0:	080081f1 	.word	0x080081f1
 80081e4:	080081f7 	.word	0x080081f7
 80081e8:	080081f1 	.word	0x080081f1
 80081ec:	08008209 	.word	0x08008209
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	73fb      	strb	r3, [r7, #15]
        break;
 80081f4:	e030      	b.n	8008258 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d025      	beq.n	800824e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008206:	e022      	b.n	800824e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008210:	d11f      	bne.n	8008252 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008216:	e01c      	b.n	8008252 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800821c:	2b02      	cmp	r3, #2
 800821e:	d902      	bls.n	8008226 <DMA_CheckFifoParam+0xb6>
 8008220:	2b03      	cmp	r3, #3
 8008222:	d003      	beq.n	800822c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008224:	e018      	b.n	8008258 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	73fb      	strb	r3, [r7, #15]
        break;
 800822a:	e015      	b.n	8008258 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00e      	beq.n	8008256 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	73fb      	strb	r3, [r7, #15]
    break;
 800823c:	e00b      	b.n	8008256 <DMA_CheckFifoParam+0xe6>
        break;
 800823e:	bf00      	nop
 8008240:	e00a      	b.n	8008258 <DMA_CheckFifoParam+0xe8>
        break;
 8008242:	bf00      	nop
 8008244:	e008      	b.n	8008258 <DMA_CheckFifoParam+0xe8>
        break;
 8008246:	bf00      	nop
 8008248:	e006      	b.n	8008258 <DMA_CheckFifoParam+0xe8>
        break;
 800824a:	bf00      	nop
 800824c:	e004      	b.n	8008258 <DMA_CheckFifoParam+0xe8>
        break;
 800824e:	bf00      	nop
 8008250:	e002      	b.n	8008258 <DMA_CheckFifoParam+0xe8>
        break;
 8008252:	bf00      	nop
 8008254:	e000      	b.n	8008258 <DMA_CheckFifoParam+0xe8>
    break;
 8008256:	bf00      	nop
    }
  }

  return status;
 8008258:	7bfb      	ldrb	r3, [r7, #15]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop

08008268 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a38      	ldr	r2, [pc, #224]	; (800835c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d022      	beq.n	80082c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a36      	ldr	r2, [pc, #216]	; (8008360 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d01d      	beq.n	80082c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a35      	ldr	r2, [pc, #212]	; (8008364 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d018      	beq.n	80082c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a33      	ldr	r2, [pc, #204]	; (8008368 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d013      	beq.n	80082c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a32      	ldr	r2, [pc, #200]	; (800836c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d00e      	beq.n	80082c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a30      	ldr	r2, [pc, #192]	; (8008370 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d009      	beq.n	80082c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a2f      	ldr	r2, [pc, #188]	; (8008374 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d004      	beq.n	80082c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a2d      	ldr	r2, [pc, #180]	; (8008378 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d101      	bne.n	80082ca <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80082c6:	2301      	movs	r3, #1
 80082c8:	e000      	b.n	80082cc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80082ca:	2300      	movs	r3, #0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d01a      	beq.n	8008306 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	3b08      	subs	r3, #8
 80082d8:	4a28      	ldr	r2, [pc, #160]	; (800837c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80082da:	fba2 2303 	umull	r2, r3, r2, r3
 80082de:	091b      	lsrs	r3, r3, #4
 80082e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	4b26      	ldr	r3, [pc, #152]	; (8008380 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80082e6:	4413      	add	r3, r2
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	461a      	mov	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a24      	ldr	r2, [pc, #144]	; (8008384 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80082f4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f003 031f 	and.w	r3, r3, #31
 80082fc:	2201      	movs	r2, #1
 80082fe:	409a      	lsls	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008304:	e024      	b.n	8008350 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	b2db      	uxtb	r3, r3
 800830c:	3b10      	subs	r3, #16
 800830e:	4a1e      	ldr	r2, [pc, #120]	; (8008388 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008310:	fba2 2303 	umull	r2, r3, r2, r3
 8008314:	091b      	lsrs	r3, r3, #4
 8008316:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	4a1c      	ldr	r2, [pc, #112]	; (800838c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d806      	bhi.n	800832e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	4a1b      	ldr	r2, [pc, #108]	; (8008390 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d902      	bls.n	800832e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	3308      	adds	r3, #8
 800832c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	4b18      	ldr	r3, [pc, #96]	; (8008394 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008332:	4413      	add	r3, r2
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	461a      	mov	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a16      	ldr	r2, [pc, #88]	; (8008398 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008340:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f003 031f 	and.w	r3, r3, #31
 8008348:	2201      	movs	r2, #1
 800834a:	409a      	lsls	r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008350:	bf00      	nop
 8008352:	3714      	adds	r7, #20
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr
 800835c:	58025408 	.word	0x58025408
 8008360:	5802541c 	.word	0x5802541c
 8008364:	58025430 	.word	0x58025430
 8008368:	58025444 	.word	0x58025444
 800836c:	58025458 	.word	0x58025458
 8008370:	5802546c 	.word	0x5802546c
 8008374:	58025480 	.word	0x58025480
 8008378:	58025494 	.word	0x58025494
 800837c:	cccccccd 	.word	0xcccccccd
 8008380:	16009600 	.word	0x16009600
 8008384:	58025880 	.word	0x58025880
 8008388:	aaaaaaab 	.word	0xaaaaaaab
 800838c:	400204b8 	.word	0x400204b8
 8008390:	4002040f 	.word	0x4002040f
 8008394:	10008200 	.word	0x10008200
 8008398:	40020880 	.word	0x40020880

0800839c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800839c:	b480      	push	{r7}
 800839e:	b085      	sub	sp, #20
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d04a      	beq.n	8008448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2b08      	cmp	r3, #8
 80083b6:	d847      	bhi.n	8008448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a25      	ldr	r2, [pc, #148]	; (8008454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d022      	beq.n	8008408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a24      	ldr	r2, [pc, #144]	; (8008458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d01d      	beq.n	8008408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a22      	ldr	r2, [pc, #136]	; (800845c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d018      	beq.n	8008408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a21      	ldr	r2, [pc, #132]	; (8008460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d013      	beq.n	8008408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a1f      	ldr	r2, [pc, #124]	; (8008464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d00e      	beq.n	8008408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a1e      	ldr	r2, [pc, #120]	; (8008468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d009      	beq.n	8008408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a1c      	ldr	r2, [pc, #112]	; (800846c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d004      	beq.n	8008408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a1b      	ldr	r2, [pc, #108]	; (8008470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d101      	bne.n	800840c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008408:	2301      	movs	r3, #1
 800840a:	e000      	b.n	800840e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800840c:	2300      	movs	r3, #0
 800840e:	2b00      	cmp	r3, #0
 8008410:	d00a      	beq.n	8008428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	4b17      	ldr	r3, [pc, #92]	; (8008474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008416:	4413      	add	r3, r2
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	461a      	mov	r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a15      	ldr	r2, [pc, #84]	; (8008478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008424:	671a      	str	r2, [r3, #112]	; 0x70
 8008426:	e009      	b.n	800843c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008428:	68fa      	ldr	r2, [r7, #12]
 800842a:	4b14      	ldr	r3, [pc, #80]	; (800847c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800842c:	4413      	add	r3, r2
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	461a      	mov	r2, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a11      	ldr	r2, [pc, #68]	; (8008480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800843a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	3b01      	subs	r3, #1
 8008440:	2201      	movs	r2, #1
 8008442:	409a      	lsls	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008448:	bf00      	nop
 800844a:	3714      	adds	r7, #20
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr
 8008454:	58025408 	.word	0x58025408
 8008458:	5802541c 	.word	0x5802541c
 800845c:	58025430 	.word	0x58025430
 8008460:	58025444 	.word	0x58025444
 8008464:	58025458 	.word	0x58025458
 8008468:	5802546c 	.word	0x5802546c
 800846c:	58025480 	.word	0x58025480
 8008470:	58025494 	.word	0x58025494
 8008474:	1600963f 	.word	0x1600963f
 8008478:	58025940 	.word	0x58025940
 800847c:	1000823f 	.word	0x1000823f
 8008480:	40020940 	.word	0x40020940

08008484 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008484:	b480      	push	{r7}
 8008486:	b089      	sub	sp, #36	; 0x24
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800848e:	2300      	movs	r3, #0
 8008490:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008492:	4b89      	ldr	r3, [pc, #548]	; (80086b8 <HAL_GPIO_Init+0x234>)
 8008494:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008496:	e194      	b.n	80087c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	2101      	movs	r1, #1
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	fa01 f303 	lsl.w	r3, r1, r3
 80084a4:	4013      	ands	r3, r2
 80084a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	f000 8186 	beq.w	80087bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	f003 0303 	and.w	r3, r3, #3
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d005      	beq.n	80084c8 <HAL_GPIO_Init+0x44>
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	f003 0303 	and.w	r3, r3, #3
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	d130      	bne.n	800852a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	005b      	lsls	r3, r3, #1
 80084d2:	2203      	movs	r2, #3
 80084d4:	fa02 f303 	lsl.w	r3, r2, r3
 80084d8:	43db      	mvns	r3, r3
 80084da:	69ba      	ldr	r2, [r7, #24]
 80084dc:	4013      	ands	r3, r2
 80084de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	68da      	ldr	r2, [r3, #12]
 80084e4:	69fb      	ldr	r3, [r7, #28]
 80084e6:	005b      	lsls	r3, r3, #1
 80084e8:	fa02 f303 	lsl.w	r3, r2, r3
 80084ec:	69ba      	ldr	r2, [r7, #24]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	69ba      	ldr	r2, [r7, #24]
 80084f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80084fe:	2201      	movs	r2, #1
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	fa02 f303 	lsl.w	r3, r2, r3
 8008506:	43db      	mvns	r3, r3
 8008508:	69ba      	ldr	r2, [r7, #24]
 800850a:	4013      	ands	r3, r2
 800850c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	091b      	lsrs	r3, r3, #4
 8008514:	f003 0201 	and.w	r2, r3, #1
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	fa02 f303 	lsl.w	r3, r2, r3
 800851e:	69ba      	ldr	r2, [r7, #24]
 8008520:	4313      	orrs	r3, r2
 8008522:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	69ba      	ldr	r2, [r7, #24]
 8008528:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	f003 0303 	and.w	r3, r3, #3
 8008532:	2b03      	cmp	r3, #3
 8008534:	d017      	beq.n	8008566 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	005b      	lsls	r3, r3, #1
 8008540:	2203      	movs	r2, #3
 8008542:	fa02 f303 	lsl.w	r3, r2, r3
 8008546:	43db      	mvns	r3, r3
 8008548:	69ba      	ldr	r2, [r7, #24]
 800854a:	4013      	ands	r3, r2
 800854c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	689a      	ldr	r2, [r3, #8]
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	005b      	lsls	r3, r3, #1
 8008556:	fa02 f303 	lsl.w	r3, r2, r3
 800855a:	69ba      	ldr	r2, [r7, #24]
 800855c:	4313      	orrs	r3, r2
 800855e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	69ba      	ldr	r2, [r7, #24]
 8008564:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	f003 0303 	and.w	r3, r3, #3
 800856e:	2b02      	cmp	r3, #2
 8008570:	d123      	bne.n	80085ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	08da      	lsrs	r2, r3, #3
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	3208      	adds	r2, #8
 800857a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800857e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	f003 0307 	and.w	r3, r3, #7
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	220f      	movs	r2, #15
 800858a:	fa02 f303 	lsl.w	r3, r2, r3
 800858e:	43db      	mvns	r3, r3
 8008590:	69ba      	ldr	r2, [r7, #24]
 8008592:	4013      	ands	r3, r2
 8008594:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	691a      	ldr	r2, [r3, #16]
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	f003 0307 	and.w	r3, r3, #7
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	fa02 f303 	lsl.w	r3, r2, r3
 80085a6:	69ba      	ldr	r2, [r7, #24]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	08da      	lsrs	r2, r3, #3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	3208      	adds	r2, #8
 80085b4:	69b9      	ldr	r1, [r7, #24]
 80085b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	005b      	lsls	r3, r3, #1
 80085c4:	2203      	movs	r2, #3
 80085c6:	fa02 f303 	lsl.w	r3, r2, r3
 80085ca:	43db      	mvns	r3, r3
 80085cc:	69ba      	ldr	r2, [r7, #24]
 80085ce:	4013      	ands	r3, r2
 80085d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	f003 0203 	and.w	r2, r3, #3
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	005b      	lsls	r3, r3, #1
 80085de:	fa02 f303 	lsl.w	r3, r2, r3
 80085e2:	69ba      	ldr	r2, [r7, #24]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	69ba      	ldr	r2, [r7, #24]
 80085ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f000 80e0 	beq.w	80087bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80085fc:	4b2f      	ldr	r3, [pc, #188]	; (80086bc <HAL_GPIO_Init+0x238>)
 80085fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008602:	4a2e      	ldr	r2, [pc, #184]	; (80086bc <HAL_GPIO_Init+0x238>)
 8008604:	f043 0302 	orr.w	r3, r3, #2
 8008608:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800860c:	4b2b      	ldr	r3, [pc, #172]	; (80086bc <HAL_GPIO_Init+0x238>)
 800860e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008612:	f003 0302 	and.w	r3, r3, #2
 8008616:	60fb      	str	r3, [r7, #12]
 8008618:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800861a:	4a29      	ldr	r2, [pc, #164]	; (80086c0 <HAL_GPIO_Init+0x23c>)
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	089b      	lsrs	r3, r3, #2
 8008620:	3302      	adds	r3, #2
 8008622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008626:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	f003 0303 	and.w	r3, r3, #3
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	220f      	movs	r2, #15
 8008632:	fa02 f303 	lsl.w	r3, r2, r3
 8008636:	43db      	mvns	r3, r3
 8008638:	69ba      	ldr	r2, [r7, #24]
 800863a:	4013      	ands	r3, r2
 800863c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a20      	ldr	r2, [pc, #128]	; (80086c4 <HAL_GPIO_Init+0x240>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d052      	beq.n	80086ec <HAL_GPIO_Init+0x268>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a1f      	ldr	r2, [pc, #124]	; (80086c8 <HAL_GPIO_Init+0x244>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d031      	beq.n	80086b2 <HAL_GPIO_Init+0x22e>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a1e      	ldr	r2, [pc, #120]	; (80086cc <HAL_GPIO_Init+0x248>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d02b      	beq.n	80086ae <HAL_GPIO_Init+0x22a>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4a1d      	ldr	r2, [pc, #116]	; (80086d0 <HAL_GPIO_Init+0x24c>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d025      	beq.n	80086aa <HAL_GPIO_Init+0x226>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a1c      	ldr	r2, [pc, #112]	; (80086d4 <HAL_GPIO_Init+0x250>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d01f      	beq.n	80086a6 <HAL_GPIO_Init+0x222>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a1b      	ldr	r2, [pc, #108]	; (80086d8 <HAL_GPIO_Init+0x254>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d019      	beq.n	80086a2 <HAL_GPIO_Init+0x21e>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a1a      	ldr	r2, [pc, #104]	; (80086dc <HAL_GPIO_Init+0x258>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d013      	beq.n	800869e <HAL_GPIO_Init+0x21a>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a19      	ldr	r2, [pc, #100]	; (80086e0 <HAL_GPIO_Init+0x25c>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d00d      	beq.n	800869a <HAL_GPIO_Init+0x216>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a18      	ldr	r2, [pc, #96]	; (80086e4 <HAL_GPIO_Init+0x260>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d007      	beq.n	8008696 <HAL_GPIO_Init+0x212>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4a17      	ldr	r2, [pc, #92]	; (80086e8 <HAL_GPIO_Init+0x264>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d101      	bne.n	8008692 <HAL_GPIO_Init+0x20e>
 800868e:	2309      	movs	r3, #9
 8008690:	e02d      	b.n	80086ee <HAL_GPIO_Init+0x26a>
 8008692:	230a      	movs	r3, #10
 8008694:	e02b      	b.n	80086ee <HAL_GPIO_Init+0x26a>
 8008696:	2308      	movs	r3, #8
 8008698:	e029      	b.n	80086ee <HAL_GPIO_Init+0x26a>
 800869a:	2307      	movs	r3, #7
 800869c:	e027      	b.n	80086ee <HAL_GPIO_Init+0x26a>
 800869e:	2306      	movs	r3, #6
 80086a0:	e025      	b.n	80086ee <HAL_GPIO_Init+0x26a>
 80086a2:	2305      	movs	r3, #5
 80086a4:	e023      	b.n	80086ee <HAL_GPIO_Init+0x26a>
 80086a6:	2304      	movs	r3, #4
 80086a8:	e021      	b.n	80086ee <HAL_GPIO_Init+0x26a>
 80086aa:	2303      	movs	r3, #3
 80086ac:	e01f      	b.n	80086ee <HAL_GPIO_Init+0x26a>
 80086ae:	2302      	movs	r3, #2
 80086b0:	e01d      	b.n	80086ee <HAL_GPIO_Init+0x26a>
 80086b2:	2301      	movs	r3, #1
 80086b4:	e01b      	b.n	80086ee <HAL_GPIO_Init+0x26a>
 80086b6:	bf00      	nop
 80086b8:	58000080 	.word	0x58000080
 80086bc:	58024400 	.word	0x58024400
 80086c0:	58000400 	.word	0x58000400
 80086c4:	58020000 	.word	0x58020000
 80086c8:	58020400 	.word	0x58020400
 80086cc:	58020800 	.word	0x58020800
 80086d0:	58020c00 	.word	0x58020c00
 80086d4:	58021000 	.word	0x58021000
 80086d8:	58021400 	.word	0x58021400
 80086dc:	58021800 	.word	0x58021800
 80086e0:	58021c00 	.word	0x58021c00
 80086e4:	58022000 	.word	0x58022000
 80086e8:	58022400 	.word	0x58022400
 80086ec:	2300      	movs	r3, #0
 80086ee:	69fa      	ldr	r2, [r7, #28]
 80086f0:	f002 0203 	and.w	r2, r2, #3
 80086f4:	0092      	lsls	r2, r2, #2
 80086f6:	4093      	lsls	r3, r2
 80086f8:	69ba      	ldr	r2, [r7, #24]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80086fe:	4938      	ldr	r1, [pc, #224]	; (80087e0 <HAL_GPIO_Init+0x35c>)
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	089b      	lsrs	r3, r3, #2
 8008704:	3302      	adds	r3, #2
 8008706:	69ba      	ldr	r2, [r7, #24]
 8008708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800870c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	43db      	mvns	r3, r3
 8008718:	69ba      	ldr	r2, [r7, #24]
 800871a:	4013      	ands	r3, r2
 800871c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008726:	2b00      	cmp	r3, #0
 8008728:	d003      	beq.n	8008732 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800872a:	69ba      	ldr	r2, [r7, #24]
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	4313      	orrs	r3, r2
 8008730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008732:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800873a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	43db      	mvns	r3, r3
 8008746:	69ba      	ldr	r2, [r7, #24]
 8008748:	4013      	ands	r3, r2
 800874a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008754:	2b00      	cmp	r3, #0
 8008756:	d003      	beq.n	8008760 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008758:	69ba      	ldr	r2, [r7, #24]
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	4313      	orrs	r3, r2
 800875e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008760:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	43db      	mvns	r3, r3
 8008772:	69ba      	ldr	r2, [r7, #24]
 8008774:	4013      	ands	r3, r2
 8008776:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008780:	2b00      	cmp	r3, #0
 8008782:	d003      	beq.n	800878c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008784:	69ba      	ldr	r2, [r7, #24]
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	4313      	orrs	r3, r2
 800878a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	69ba      	ldr	r2, [r7, #24]
 8008790:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	43db      	mvns	r3, r3
 800879c:	69ba      	ldr	r2, [r7, #24]
 800879e:	4013      	ands	r3, r2
 80087a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d003      	beq.n	80087b6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80087ae:	69ba      	ldr	r2, [r7, #24]
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	69ba      	ldr	r2, [r7, #24]
 80087ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80087bc:	69fb      	ldr	r3, [r7, #28]
 80087be:	3301      	adds	r3, #1
 80087c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	fa22 f303 	lsr.w	r3, r2, r3
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f47f ae63 	bne.w	8008498 <HAL_GPIO_Init+0x14>
  }
}
 80087d2:	bf00      	nop
 80087d4:	bf00      	nop
 80087d6:	3724      	adds	r7, #36	; 0x24
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr
 80087e0:	58000400 	.word	0x58000400

080087e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	460b      	mov	r3, r1
 80087ee:	807b      	strh	r3, [r7, #2]
 80087f0:	4613      	mov	r3, r2
 80087f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80087f4:	787b      	ldrb	r3, [r7, #1]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d003      	beq.n	8008802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80087fa:	887a      	ldrh	r2, [r7, #2]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008800:	e003      	b.n	800880a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008802:	887b      	ldrh	r3, [r7, #2]
 8008804:	041a      	lsls	r2, r3, #16
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	619a      	str	r2, [r3, #24]
}
 800880a:	bf00      	nop
 800880c:	370c      	adds	r7, #12
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr

08008816 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b082      	sub	sp, #8
 800881a:	af00      	add	r7, sp, #0
 800881c:	4603      	mov	r3, r0
 800881e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008824:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008828:	88fb      	ldrh	r3, [r7, #6]
 800882a:	4013      	ands	r3, r2
 800882c:	2b00      	cmp	r3, #0
 800882e:	d008      	beq.n	8008842 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008830:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008834:	88fb      	ldrh	r3, [r7, #6]
 8008836:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800883a:	88fb      	ldrh	r3, [r7, #6]
 800883c:	4618      	mov	r0, r3
 800883e:	f7fa fe61 	bl	8003504 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8008842:	bf00      	nop
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
	...

0800884c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008854:	4b19      	ldr	r3, [pc, #100]	; (80088bc <HAL_PWREx_ConfigSupply+0x70>)
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	f003 0304 	and.w	r3, r3, #4
 800885c:	2b04      	cmp	r3, #4
 800885e:	d00a      	beq.n	8008876 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008860:	4b16      	ldr	r3, [pc, #88]	; (80088bc <HAL_PWREx_ConfigSupply+0x70>)
 8008862:	68db      	ldr	r3, [r3, #12]
 8008864:	f003 0307 	and.w	r3, r3, #7
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	429a      	cmp	r2, r3
 800886c:	d001      	beq.n	8008872 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800886e:	2301      	movs	r3, #1
 8008870:	e01f      	b.n	80088b2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008872:	2300      	movs	r3, #0
 8008874:	e01d      	b.n	80088b2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008876:	4b11      	ldr	r3, [pc, #68]	; (80088bc <HAL_PWREx_ConfigSupply+0x70>)
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	f023 0207 	bic.w	r2, r3, #7
 800887e:	490f      	ldr	r1, [pc, #60]	; (80088bc <HAL_PWREx_ConfigSupply+0x70>)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4313      	orrs	r3, r2
 8008884:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008886:	f7fc fc91 	bl	80051ac <HAL_GetTick>
 800888a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800888c:	e009      	b.n	80088a2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800888e:	f7fc fc8d 	bl	80051ac <HAL_GetTick>
 8008892:	4602      	mov	r2, r0
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	1ad3      	subs	r3, r2, r3
 8008898:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800889c:	d901      	bls.n	80088a2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	e007      	b.n	80088b2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80088a2:	4b06      	ldr	r3, [pc, #24]	; (80088bc <HAL_PWREx_ConfigSupply+0x70>)
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088ae:	d1ee      	bne.n	800888e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3710      	adds	r7, #16
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	58024800 	.word	0x58024800

080088c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b08c      	sub	sp, #48	; 0x30
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d102      	bne.n	80088d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	f000 bc1c 	b.w	800910c <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f003 0301 	and.w	r3, r3, #1
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f000 8087 	beq.w	80089f0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088e2:	4b9e      	ldr	r3, [pc, #632]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80088ec:	4b9b      	ldr	r3, [pc, #620]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 80088ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80088f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f4:	2b10      	cmp	r3, #16
 80088f6:	d007      	beq.n	8008908 <HAL_RCC_OscConfig+0x48>
 80088f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fa:	2b18      	cmp	r3, #24
 80088fc:	d110      	bne.n	8008920 <HAL_RCC_OscConfig+0x60>
 80088fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008900:	f003 0303 	and.w	r3, r3, #3
 8008904:	2b02      	cmp	r3, #2
 8008906:	d10b      	bne.n	8008920 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008908:	4b94      	ldr	r3, [pc, #592]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008910:	2b00      	cmp	r3, #0
 8008912:	d06c      	beq.n	80089ee <HAL_RCC_OscConfig+0x12e>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d168      	bne.n	80089ee <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	e3f5      	b.n	800910c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008928:	d106      	bne.n	8008938 <HAL_RCC_OscConfig+0x78>
 800892a:	4b8c      	ldr	r3, [pc, #560]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a8b      	ldr	r2, [pc, #556]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 8008930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008934:	6013      	str	r3, [r2, #0]
 8008936:	e02e      	b.n	8008996 <HAL_RCC_OscConfig+0xd6>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d10c      	bne.n	800895a <HAL_RCC_OscConfig+0x9a>
 8008940:	4b86      	ldr	r3, [pc, #536]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a85      	ldr	r2, [pc, #532]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 8008946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800894a:	6013      	str	r3, [r2, #0]
 800894c:	4b83      	ldr	r3, [pc, #524]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a82      	ldr	r2, [pc, #520]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 8008952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008956:	6013      	str	r3, [r2, #0]
 8008958:	e01d      	b.n	8008996 <HAL_RCC_OscConfig+0xd6>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008962:	d10c      	bne.n	800897e <HAL_RCC_OscConfig+0xbe>
 8008964:	4b7d      	ldr	r3, [pc, #500]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a7c      	ldr	r2, [pc, #496]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 800896a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800896e:	6013      	str	r3, [r2, #0]
 8008970:	4b7a      	ldr	r3, [pc, #488]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a79      	ldr	r2, [pc, #484]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 8008976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800897a:	6013      	str	r3, [r2, #0]
 800897c:	e00b      	b.n	8008996 <HAL_RCC_OscConfig+0xd6>
 800897e:	4b77      	ldr	r3, [pc, #476]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a76      	ldr	r2, [pc, #472]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 8008984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008988:	6013      	str	r3, [r2, #0]
 800898a:	4b74      	ldr	r3, [pc, #464]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a73      	ldr	r2, [pc, #460]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 8008990:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008994:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d013      	beq.n	80089c6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800899e:	f7fc fc05 	bl	80051ac <HAL_GetTick>
 80089a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80089a4:	e008      	b.n	80089b8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80089a6:	f7fc fc01 	bl	80051ac <HAL_GetTick>
 80089aa:	4602      	mov	r2, r0
 80089ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	2b64      	cmp	r3, #100	; 0x64
 80089b2:	d901      	bls.n	80089b8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80089b4:	2303      	movs	r3, #3
 80089b6:	e3a9      	b.n	800910c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80089b8:	4b68      	ldr	r3, [pc, #416]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d0f0      	beq.n	80089a6 <HAL_RCC_OscConfig+0xe6>
 80089c4:	e014      	b.n	80089f0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089c6:	f7fc fbf1 	bl	80051ac <HAL_GetTick>
 80089ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80089cc:	e008      	b.n	80089e0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80089ce:	f7fc fbed 	bl	80051ac <HAL_GetTick>
 80089d2:	4602      	mov	r2, r0
 80089d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d6:	1ad3      	subs	r3, r2, r3
 80089d8:	2b64      	cmp	r3, #100	; 0x64
 80089da:	d901      	bls.n	80089e0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80089dc:	2303      	movs	r3, #3
 80089de:	e395      	b.n	800910c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80089e0:	4b5e      	ldr	r3, [pc, #376]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d1f0      	bne.n	80089ce <HAL_RCC_OscConfig+0x10e>
 80089ec:	e000      	b.n	80089f0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089ee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f003 0302 	and.w	r3, r3, #2
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	f000 80ca 	beq.w	8008b92 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089fe:	4b57      	ldr	r3, [pc, #348]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a06:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008a08:	4b54      	ldr	r3, [pc, #336]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 8008a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a0c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008a0e:	6a3b      	ldr	r3, [r7, #32]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d007      	beq.n	8008a24 <HAL_RCC_OscConfig+0x164>
 8008a14:	6a3b      	ldr	r3, [r7, #32]
 8008a16:	2b18      	cmp	r3, #24
 8008a18:	d156      	bne.n	8008ac8 <HAL_RCC_OscConfig+0x208>
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	f003 0303 	and.w	r3, r3, #3
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d151      	bne.n	8008ac8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a24:	4b4d      	ldr	r3, [pc, #308]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f003 0304 	and.w	r3, r3, #4
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d005      	beq.n	8008a3c <HAL_RCC_OscConfig+0x17c>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d101      	bne.n	8008a3c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e367      	b.n	800910c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008a3c:	4b47      	ldr	r3, [pc, #284]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f023 0219 	bic.w	r2, r3, #25
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	68db      	ldr	r3, [r3, #12]
 8008a48:	4944      	ldr	r1, [pc, #272]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008a4e:	f7fc fbad 	bl	80051ac <HAL_GetTick>
 8008a52:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a54:	e008      	b.n	8008a68 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008a56:	f7fc fba9 	bl	80051ac <HAL_GetTick>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5e:	1ad3      	subs	r3, r2, r3
 8008a60:	2b02      	cmp	r3, #2
 8008a62:	d901      	bls.n	8008a68 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8008a64:	2303      	movs	r3, #3
 8008a66:	e351      	b.n	800910c <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a68:	4b3c      	ldr	r3, [pc, #240]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f003 0304 	and.w	r3, r3, #4
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d0f0      	beq.n	8008a56 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a74:	f7fc fba6 	bl	80051c4 <HAL_GetREVID>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	f241 0203 	movw	r2, #4099	; 0x1003
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d817      	bhi.n	8008ab2 <HAL_RCC_OscConfig+0x1f2>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	2b40      	cmp	r3, #64	; 0x40
 8008a88:	d108      	bne.n	8008a9c <HAL_RCC_OscConfig+0x1dc>
 8008a8a:	4b34      	ldr	r3, [pc, #208]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008a92:	4a32      	ldr	r2, [pc, #200]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 8008a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a98:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a9a:	e07a      	b.n	8008b92 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a9c:	4b2f      	ldr	r3, [pc, #188]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	031b      	lsls	r3, r3, #12
 8008aaa:	492c      	ldr	r1, [pc, #176]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 8008aac:	4313      	orrs	r3, r2
 8008aae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ab0:	e06f      	b.n	8008b92 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ab2:	4b2a      	ldr	r3, [pc, #168]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	061b      	lsls	r3, r3, #24
 8008ac0:	4926      	ldr	r1, [pc, #152]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ac6:	e064      	b.n	8008b92 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d047      	beq.n	8008b60 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008ad0:	4b22      	ldr	r3, [pc, #136]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f023 0219 	bic.w	r2, r3, #25
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	491f      	ldr	r1, [pc, #124]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ae2:	f7fc fb63 	bl	80051ac <HAL_GetTick>
 8008ae6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ae8:	e008      	b.n	8008afc <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008aea:	f7fc fb5f 	bl	80051ac <HAL_GetTick>
 8008aee:	4602      	mov	r2, r0
 8008af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af2:	1ad3      	subs	r3, r2, r3
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	d901      	bls.n	8008afc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8008af8:	2303      	movs	r3, #3
 8008afa:	e307      	b.n	800910c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008afc:	4b17      	ldr	r3, [pc, #92]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f003 0304 	and.w	r3, r3, #4
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d0f0      	beq.n	8008aea <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b08:	f7fc fb5c 	bl	80051c4 <HAL_GetREVID>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	f241 0203 	movw	r2, #4099	; 0x1003
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d817      	bhi.n	8008b46 <HAL_RCC_OscConfig+0x286>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	691b      	ldr	r3, [r3, #16]
 8008b1a:	2b40      	cmp	r3, #64	; 0x40
 8008b1c:	d108      	bne.n	8008b30 <HAL_RCC_OscConfig+0x270>
 8008b1e:	4b0f      	ldr	r3, [pc, #60]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008b26:	4a0d      	ldr	r2, [pc, #52]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 8008b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b2c:	6053      	str	r3, [r2, #4]
 8008b2e:	e030      	b.n	8008b92 <HAL_RCC_OscConfig+0x2d2>
 8008b30:	4b0a      	ldr	r3, [pc, #40]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	691b      	ldr	r3, [r3, #16]
 8008b3c:	031b      	lsls	r3, r3, #12
 8008b3e:	4907      	ldr	r1, [pc, #28]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 8008b40:	4313      	orrs	r3, r2
 8008b42:	604b      	str	r3, [r1, #4]
 8008b44:	e025      	b.n	8008b92 <HAL_RCC_OscConfig+0x2d2>
 8008b46:	4b05      	ldr	r3, [pc, #20]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	691b      	ldr	r3, [r3, #16]
 8008b52:	061b      	lsls	r3, r3, #24
 8008b54:	4901      	ldr	r1, [pc, #4]	; (8008b5c <HAL_RCC_OscConfig+0x29c>)
 8008b56:	4313      	orrs	r3, r2
 8008b58:	604b      	str	r3, [r1, #4]
 8008b5a:	e01a      	b.n	8008b92 <HAL_RCC_OscConfig+0x2d2>
 8008b5c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008b60:	4b9e      	ldr	r3, [pc, #632]	; (8008ddc <HAL_RCC_OscConfig+0x51c>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a9d      	ldr	r2, [pc, #628]	; (8008ddc <HAL_RCC_OscConfig+0x51c>)
 8008b66:	f023 0301 	bic.w	r3, r3, #1
 8008b6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b6c:	f7fc fb1e 	bl	80051ac <HAL_GetTick>
 8008b70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008b72:	e008      	b.n	8008b86 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008b74:	f7fc fb1a 	bl	80051ac <HAL_GetTick>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7c:	1ad3      	subs	r3, r2, r3
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	d901      	bls.n	8008b86 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8008b82:	2303      	movs	r3, #3
 8008b84:	e2c2      	b.n	800910c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008b86:	4b95      	ldr	r3, [pc, #596]	; (8008ddc <HAL_RCC_OscConfig+0x51c>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 0304 	and.w	r3, r3, #4
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d1f0      	bne.n	8008b74 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f003 0310 	and.w	r3, r3, #16
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	f000 80a9 	beq.w	8008cf2 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ba0:	4b8e      	ldr	r3, [pc, #568]	; (8008ddc <HAL_RCC_OscConfig+0x51c>)
 8008ba2:	691b      	ldr	r3, [r3, #16]
 8008ba4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ba8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008baa:	4b8c      	ldr	r3, [pc, #560]	; (8008ddc <HAL_RCC_OscConfig+0x51c>)
 8008bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bae:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008bb0:	69bb      	ldr	r3, [r7, #24]
 8008bb2:	2b08      	cmp	r3, #8
 8008bb4:	d007      	beq.n	8008bc6 <HAL_RCC_OscConfig+0x306>
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	2b18      	cmp	r3, #24
 8008bba:	d13a      	bne.n	8008c32 <HAL_RCC_OscConfig+0x372>
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	f003 0303 	and.w	r3, r3, #3
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d135      	bne.n	8008c32 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008bc6:	4b85      	ldr	r3, [pc, #532]	; (8008ddc <HAL_RCC_OscConfig+0x51c>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d005      	beq.n	8008bde <HAL_RCC_OscConfig+0x31e>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	69db      	ldr	r3, [r3, #28]
 8008bd6:	2b80      	cmp	r3, #128	; 0x80
 8008bd8:	d001      	beq.n	8008bde <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e296      	b.n	800910c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008bde:	f7fc faf1 	bl	80051c4 <HAL_GetREVID>
 8008be2:	4603      	mov	r3, r0
 8008be4:	f241 0203 	movw	r2, #4099	; 0x1003
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d817      	bhi.n	8008c1c <HAL_RCC_OscConfig+0x35c>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6a1b      	ldr	r3, [r3, #32]
 8008bf0:	2b20      	cmp	r3, #32
 8008bf2:	d108      	bne.n	8008c06 <HAL_RCC_OscConfig+0x346>
 8008bf4:	4b79      	ldr	r3, [pc, #484]	; (8008ddc <HAL_RCC_OscConfig+0x51c>)
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008bfc:	4a77      	ldr	r2, [pc, #476]	; (8008ddc <HAL_RCC_OscConfig+0x51c>)
 8008bfe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c02:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008c04:	e075      	b.n	8008cf2 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008c06:	4b75      	ldr	r3, [pc, #468]	; (8008ddc <HAL_RCC_OscConfig+0x51c>)
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a1b      	ldr	r3, [r3, #32]
 8008c12:	069b      	lsls	r3, r3, #26
 8008c14:	4971      	ldr	r1, [pc, #452]	; (8008ddc <HAL_RCC_OscConfig+0x51c>)
 8008c16:	4313      	orrs	r3, r2
 8008c18:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008c1a:	e06a      	b.n	8008cf2 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008c1c:	4b6f      	ldr	r3, [pc, #444]	; (8008ddc <HAL_RCC_OscConfig+0x51c>)
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6a1b      	ldr	r3, [r3, #32]
 8008c28:	061b      	lsls	r3, r3, #24
 8008c2a:	496c      	ldr	r1, [pc, #432]	; (8008ddc <HAL_RCC_OscConfig+0x51c>)
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008c30:	e05f      	b.n	8008cf2 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	69db      	ldr	r3, [r3, #28]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d042      	beq.n	8008cc0 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008c3a:	4b68      	ldr	r3, [pc, #416]	; (8008ddc <HAL_RCC_OscConfig+0x51c>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a67      	ldr	r2, [pc, #412]	; (8008ddc <HAL_RCC_OscConfig+0x51c>)
 8008c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c46:	f7fc fab1 	bl	80051ac <HAL_GetTick>
 8008c4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008c4c:	e008      	b.n	8008c60 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008c4e:	f7fc faad 	bl	80051ac <HAL_GetTick>
 8008c52:	4602      	mov	r2, r0
 8008c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c56:	1ad3      	subs	r3, r2, r3
 8008c58:	2b02      	cmp	r3, #2
 8008c5a:	d901      	bls.n	8008c60 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8008c5c:	2303      	movs	r3, #3
 8008c5e:	e255      	b.n	800910c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008c60:	4b5e      	ldr	r3, [pc, #376]	; (8008ddc <HAL_RCC_OscConfig+0x51c>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d0f0      	beq.n	8008c4e <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008c6c:	f7fc faaa 	bl	80051c4 <HAL_GetREVID>
 8008c70:	4603      	mov	r3, r0
 8008c72:	f241 0203 	movw	r2, #4099	; 0x1003
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d817      	bhi.n	8008caa <HAL_RCC_OscConfig+0x3ea>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a1b      	ldr	r3, [r3, #32]
 8008c7e:	2b20      	cmp	r3, #32
 8008c80:	d108      	bne.n	8008c94 <HAL_RCC_OscConfig+0x3d4>
 8008c82:	4b56      	ldr	r3, [pc, #344]	; (8008ddc <HAL_RCC_OscConfig+0x51c>)
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008c8a:	4a54      	ldr	r2, [pc, #336]	; (8008ddc <HAL_RCC_OscConfig+0x51c>)
 8008c8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c90:	6053      	str	r3, [r2, #4]
 8008c92:	e02e      	b.n	8008cf2 <HAL_RCC_OscConfig+0x432>
 8008c94:	4b51      	ldr	r3, [pc, #324]	; (8008ddc <HAL_RCC_OscConfig+0x51c>)
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6a1b      	ldr	r3, [r3, #32]
 8008ca0:	069b      	lsls	r3, r3, #26
 8008ca2:	494e      	ldr	r1, [pc, #312]	; (8008ddc <HAL_RCC_OscConfig+0x51c>)
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	604b      	str	r3, [r1, #4]
 8008ca8:	e023      	b.n	8008cf2 <HAL_RCC_OscConfig+0x432>
 8008caa:	4b4c      	ldr	r3, [pc, #304]	; (8008ddc <HAL_RCC_OscConfig+0x51c>)
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6a1b      	ldr	r3, [r3, #32]
 8008cb6:	061b      	lsls	r3, r3, #24
 8008cb8:	4948      	ldr	r1, [pc, #288]	; (8008ddc <HAL_RCC_OscConfig+0x51c>)
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	60cb      	str	r3, [r1, #12]
 8008cbe:	e018      	b.n	8008cf2 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008cc0:	4b46      	ldr	r3, [pc, #280]	; (8008ddc <HAL_RCC_OscConfig+0x51c>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a45      	ldr	r2, [pc, #276]	; (8008ddc <HAL_RCC_OscConfig+0x51c>)
 8008cc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ccc:	f7fc fa6e 	bl	80051ac <HAL_GetTick>
 8008cd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008cd2:	e008      	b.n	8008ce6 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008cd4:	f7fc fa6a 	bl	80051ac <HAL_GetTick>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cdc:	1ad3      	subs	r3, r2, r3
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d901      	bls.n	8008ce6 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8008ce2:	2303      	movs	r3, #3
 8008ce4:	e212      	b.n	800910c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008ce6:	4b3d      	ldr	r3, [pc, #244]	; (8008ddc <HAL_RCC_OscConfig+0x51c>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1f0      	bne.n	8008cd4 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f003 0308 	and.w	r3, r3, #8
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d036      	beq.n	8008d6c <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	695b      	ldr	r3, [r3, #20]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d019      	beq.n	8008d3a <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d06:	4b35      	ldr	r3, [pc, #212]	; (8008ddc <HAL_RCC_OscConfig+0x51c>)
 8008d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d0a:	4a34      	ldr	r2, [pc, #208]	; (8008ddc <HAL_RCC_OscConfig+0x51c>)
 8008d0c:	f043 0301 	orr.w	r3, r3, #1
 8008d10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d12:	f7fc fa4b 	bl	80051ac <HAL_GetTick>
 8008d16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008d18:	e008      	b.n	8008d2c <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d1a:	f7fc fa47 	bl	80051ac <HAL_GetTick>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d22:	1ad3      	subs	r3, r2, r3
 8008d24:	2b02      	cmp	r3, #2
 8008d26:	d901      	bls.n	8008d2c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8008d28:	2303      	movs	r3, #3
 8008d2a:	e1ef      	b.n	800910c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008d2c:	4b2b      	ldr	r3, [pc, #172]	; (8008ddc <HAL_RCC_OscConfig+0x51c>)
 8008d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d30:	f003 0302 	and.w	r3, r3, #2
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d0f0      	beq.n	8008d1a <HAL_RCC_OscConfig+0x45a>
 8008d38:	e018      	b.n	8008d6c <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d3a:	4b28      	ldr	r3, [pc, #160]	; (8008ddc <HAL_RCC_OscConfig+0x51c>)
 8008d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d3e:	4a27      	ldr	r2, [pc, #156]	; (8008ddc <HAL_RCC_OscConfig+0x51c>)
 8008d40:	f023 0301 	bic.w	r3, r3, #1
 8008d44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d46:	f7fc fa31 	bl	80051ac <HAL_GetTick>
 8008d4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008d4c:	e008      	b.n	8008d60 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d4e:	f7fc fa2d 	bl	80051ac <HAL_GetTick>
 8008d52:	4602      	mov	r2, r0
 8008d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d56:	1ad3      	subs	r3, r2, r3
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	d901      	bls.n	8008d60 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8008d5c:	2303      	movs	r3, #3
 8008d5e:	e1d5      	b.n	800910c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008d60:	4b1e      	ldr	r3, [pc, #120]	; (8008ddc <HAL_RCC_OscConfig+0x51c>)
 8008d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d64:	f003 0302 	and.w	r3, r3, #2
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d1f0      	bne.n	8008d4e <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f003 0320 	and.w	r3, r3, #32
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d039      	beq.n	8008dec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	699b      	ldr	r3, [r3, #24]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d019      	beq.n	8008db4 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008d80:	4b16      	ldr	r3, [pc, #88]	; (8008ddc <HAL_RCC_OscConfig+0x51c>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a15      	ldr	r2, [pc, #84]	; (8008ddc <HAL_RCC_OscConfig+0x51c>)
 8008d86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008d8a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008d8c:	f7fc fa0e 	bl	80051ac <HAL_GetTick>
 8008d90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008d92:	e008      	b.n	8008da6 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008d94:	f7fc fa0a 	bl	80051ac <HAL_GetTick>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9c:	1ad3      	subs	r3, r2, r3
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	d901      	bls.n	8008da6 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8008da2:	2303      	movs	r3, #3
 8008da4:	e1b2      	b.n	800910c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008da6:	4b0d      	ldr	r3, [pc, #52]	; (8008ddc <HAL_RCC_OscConfig+0x51c>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d0f0      	beq.n	8008d94 <HAL_RCC_OscConfig+0x4d4>
 8008db2:	e01b      	b.n	8008dec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008db4:	4b09      	ldr	r3, [pc, #36]	; (8008ddc <HAL_RCC_OscConfig+0x51c>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a08      	ldr	r2, [pc, #32]	; (8008ddc <HAL_RCC_OscConfig+0x51c>)
 8008dba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008dbe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008dc0:	f7fc f9f4 	bl	80051ac <HAL_GetTick>
 8008dc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008dc6:	e00b      	b.n	8008de0 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008dc8:	f7fc f9f0 	bl	80051ac <HAL_GetTick>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d904      	bls.n	8008de0 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8008dd6:	2303      	movs	r3, #3
 8008dd8:	e198      	b.n	800910c <HAL_RCC_OscConfig+0x84c>
 8008dda:	bf00      	nop
 8008ddc:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008de0:	4ba3      	ldr	r3, [pc, #652]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d1ed      	bne.n	8008dc8 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 0304 	and.w	r3, r3, #4
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f000 8081 	beq.w	8008efc <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008dfa:	4b9e      	ldr	r3, [pc, #632]	; (8009074 <HAL_RCC_OscConfig+0x7b4>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a9d      	ldr	r2, [pc, #628]	; (8009074 <HAL_RCC_OscConfig+0x7b4>)
 8008e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008e06:	f7fc f9d1 	bl	80051ac <HAL_GetTick>
 8008e0a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008e0c:	e008      	b.n	8008e20 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008e0e:	f7fc f9cd 	bl	80051ac <HAL_GetTick>
 8008e12:	4602      	mov	r2, r0
 8008e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e16:	1ad3      	subs	r3, r2, r3
 8008e18:	2b64      	cmp	r3, #100	; 0x64
 8008e1a:	d901      	bls.n	8008e20 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8008e1c:	2303      	movs	r3, #3
 8008e1e:	e175      	b.n	800910c <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008e20:	4b94      	ldr	r3, [pc, #592]	; (8009074 <HAL_RCC_OscConfig+0x7b4>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d0f0      	beq.n	8008e0e <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d106      	bne.n	8008e42 <HAL_RCC_OscConfig+0x582>
 8008e34:	4b8e      	ldr	r3, [pc, #568]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e38:	4a8d      	ldr	r2, [pc, #564]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008e3a:	f043 0301 	orr.w	r3, r3, #1
 8008e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8008e40:	e02d      	b.n	8008e9e <HAL_RCC_OscConfig+0x5de>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d10c      	bne.n	8008e64 <HAL_RCC_OscConfig+0x5a4>
 8008e4a:	4b89      	ldr	r3, [pc, #548]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e4e:	4a88      	ldr	r2, [pc, #544]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008e50:	f023 0301 	bic.w	r3, r3, #1
 8008e54:	6713      	str	r3, [r2, #112]	; 0x70
 8008e56:	4b86      	ldr	r3, [pc, #536]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e5a:	4a85      	ldr	r2, [pc, #532]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008e5c:	f023 0304 	bic.w	r3, r3, #4
 8008e60:	6713      	str	r3, [r2, #112]	; 0x70
 8008e62:	e01c      	b.n	8008e9e <HAL_RCC_OscConfig+0x5de>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	2b05      	cmp	r3, #5
 8008e6a:	d10c      	bne.n	8008e86 <HAL_RCC_OscConfig+0x5c6>
 8008e6c:	4b80      	ldr	r3, [pc, #512]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e70:	4a7f      	ldr	r2, [pc, #508]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008e72:	f043 0304 	orr.w	r3, r3, #4
 8008e76:	6713      	str	r3, [r2, #112]	; 0x70
 8008e78:	4b7d      	ldr	r3, [pc, #500]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e7c:	4a7c      	ldr	r2, [pc, #496]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008e7e:	f043 0301 	orr.w	r3, r3, #1
 8008e82:	6713      	str	r3, [r2, #112]	; 0x70
 8008e84:	e00b      	b.n	8008e9e <HAL_RCC_OscConfig+0x5de>
 8008e86:	4b7a      	ldr	r3, [pc, #488]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e8a:	4a79      	ldr	r2, [pc, #484]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008e8c:	f023 0301 	bic.w	r3, r3, #1
 8008e90:	6713      	str	r3, [r2, #112]	; 0x70
 8008e92:	4b77      	ldr	r3, [pc, #476]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e96:	4a76      	ldr	r2, [pc, #472]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008e98:	f023 0304 	bic.w	r3, r3, #4
 8008e9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d015      	beq.n	8008ed2 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ea6:	f7fc f981 	bl	80051ac <HAL_GetTick>
 8008eaa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008eac:	e00a      	b.n	8008ec4 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008eae:	f7fc f97d 	bl	80051ac <HAL_GetTick>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb6:	1ad3      	subs	r3, r2, r3
 8008eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d901      	bls.n	8008ec4 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8008ec0:	2303      	movs	r3, #3
 8008ec2:	e123      	b.n	800910c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008ec4:	4b6a      	ldr	r3, [pc, #424]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ec8:	f003 0302 	and.w	r3, r3, #2
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d0ee      	beq.n	8008eae <HAL_RCC_OscConfig+0x5ee>
 8008ed0:	e014      	b.n	8008efc <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ed2:	f7fc f96b 	bl	80051ac <HAL_GetTick>
 8008ed6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008ed8:	e00a      	b.n	8008ef0 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008eda:	f7fc f967 	bl	80051ac <HAL_GetTick>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee2:	1ad3      	subs	r3, r2, r3
 8008ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d901      	bls.n	8008ef0 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8008eec:	2303      	movs	r3, #3
 8008eee:	e10d      	b.n	800910c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008ef0:	4b5f      	ldr	r3, [pc, #380]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ef4:	f003 0302 	and.w	r3, r3, #2
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1ee      	bne.n	8008eda <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	f000 8102 	beq.w	800910a <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008f06:	4b5a      	ldr	r3, [pc, #360]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008f08:	691b      	ldr	r3, [r3, #16]
 8008f0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f0e:	2b18      	cmp	r3, #24
 8008f10:	f000 80bd 	beq.w	800908e <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	f040 8095 	bne.w	8009048 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f1e:	4b54      	ldr	r3, [pc, #336]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a53      	ldr	r2, [pc, #332]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008f24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f2a:	f7fc f93f 	bl	80051ac <HAL_GetTick>
 8008f2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008f30:	e008      	b.n	8008f44 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f32:	f7fc f93b 	bl	80051ac <HAL_GetTick>
 8008f36:	4602      	mov	r2, r0
 8008f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3a:	1ad3      	subs	r3, r2, r3
 8008f3c:	2b02      	cmp	r3, #2
 8008f3e:	d901      	bls.n	8008f44 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8008f40:	2303      	movs	r3, #3
 8008f42:	e0e3      	b.n	800910c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008f44:	4b4a      	ldr	r3, [pc, #296]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d1f0      	bne.n	8008f32 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008f50:	4b47      	ldr	r3, [pc, #284]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008f52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f54:	4b48      	ldr	r3, [pc, #288]	; (8009078 <HAL_RCC_OscConfig+0x7b8>)
 8008f56:	4013      	ands	r3, r2
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008f60:	0112      	lsls	r2, r2, #4
 8008f62:	430a      	orrs	r2, r1
 8008f64:	4942      	ldr	r1, [pc, #264]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008f66:	4313      	orrs	r3, r2
 8008f68:	628b      	str	r3, [r1, #40]	; 0x28
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f6e:	3b01      	subs	r3, #1
 8008f70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f78:	3b01      	subs	r3, #1
 8008f7a:	025b      	lsls	r3, r3, #9
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	431a      	orrs	r2, r3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f84:	3b01      	subs	r3, #1
 8008f86:	041b      	lsls	r3, r3, #16
 8008f88:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008f8c:	431a      	orrs	r2, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f92:	3b01      	subs	r3, #1
 8008f94:	061b      	lsls	r3, r3, #24
 8008f96:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008f9a:	4935      	ldr	r1, [pc, #212]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008fa0:	4b33      	ldr	r3, [pc, #204]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa4:	4a32      	ldr	r2, [pc, #200]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008fa6:	f023 0301 	bic.w	r3, r3, #1
 8008faa:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008fac:	4b30      	ldr	r3, [pc, #192]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008fae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fb0:	4b32      	ldr	r3, [pc, #200]	; (800907c <HAL_RCC_OscConfig+0x7bc>)
 8008fb2:	4013      	ands	r3, r2
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008fb8:	00d2      	lsls	r2, r2, #3
 8008fba:	492d      	ldr	r1, [pc, #180]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008fc0:	4b2b      	ldr	r3, [pc, #172]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc4:	f023 020c 	bic.w	r2, r3, #12
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fcc:	4928      	ldr	r1, [pc, #160]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008fd2:	4b27      	ldr	r3, [pc, #156]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd6:	f023 0202 	bic.w	r2, r3, #2
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fde:	4924      	ldr	r1, [pc, #144]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008fe4:	4b22      	ldr	r3, [pc, #136]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe8:	4a21      	ldr	r2, [pc, #132]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ff0:	4b1f      	ldr	r3, [pc, #124]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff4:	4a1e      	ldr	r2, [pc, #120]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ffa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008ffc:	4b1c      	ldr	r3, [pc, #112]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8008ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009000:	4a1b      	ldr	r2, [pc, #108]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8009002:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009006:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009008:	4b19      	ldr	r3, [pc, #100]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 800900a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800900c:	4a18      	ldr	r2, [pc, #96]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 800900e:	f043 0301 	orr.w	r3, r3, #1
 8009012:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009014:	4b16      	ldr	r3, [pc, #88]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a15      	ldr	r2, [pc, #84]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 800901a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800901e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009020:	f7fc f8c4 	bl	80051ac <HAL_GetTick>
 8009024:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009026:	e008      	b.n	800903a <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009028:	f7fc f8c0 	bl	80051ac <HAL_GetTick>
 800902c:	4602      	mov	r2, r0
 800902e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009030:	1ad3      	subs	r3, r2, r3
 8009032:	2b02      	cmp	r3, #2
 8009034:	d901      	bls.n	800903a <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8009036:	2303      	movs	r3, #3
 8009038:	e068      	b.n	800910c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800903a:	4b0d      	ldr	r3, [pc, #52]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009042:	2b00      	cmp	r3, #0
 8009044:	d0f0      	beq.n	8009028 <HAL_RCC_OscConfig+0x768>
 8009046:	e060      	b.n	800910a <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009048:	4b09      	ldr	r3, [pc, #36]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a08      	ldr	r2, [pc, #32]	; (8009070 <HAL_RCC_OscConfig+0x7b0>)
 800904e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009052:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009054:	f7fc f8aa 	bl	80051ac <HAL_GetTick>
 8009058:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800905a:	e011      	b.n	8009080 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800905c:	f7fc f8a6 	bl	80051ac <HAL_GetTick>
 8009060:	4602      	mov	r2, r0
 8009062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009064:	1ad3      	subs	r3, r2, r3
 8009066:	2b02      	cmp	r3, #2
 8009068:	d90a      	bls.n	8009080 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800906a:	2303      	movs	r3, #3
 800906c:	e04e      	b.n	800910c <HAL_RCC_OscConfig+0x84c>
 800906e:	bf00      	nop
 8009070:	58024400 	.word	0x58024400
 8009074:	58024800 	.word	0x58024800
 8009078:	fffffc0c 	.word	0xfffffc0c
 800907c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009080:	4b24      	ldr	r3, [pc, #144]	; (8009114 <HAL_RCC_OscConfig+0x854>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009088:	2b00      	cmp	r3, #0
 800908a:	d1e7      	bne.n	800905c <HAL_RCC_OscConfig+0x79c>
 800908c:	e03d      	b.n	800910a <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800908e:	4b21      	ldr	r3, [pc, #132]	; (8009114 <HAL_RCC_OscConfig+0x854>)
 8009090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009092:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009094:	4b1f      	ldr	r3, [pc, #124]	; (8009114 <HAL_RCC_OscConfig+0x854>)
 8009096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009098:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d031      	beq.n	8009106 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	f003 0203 	and.w	r2, r3, #3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d12a      	bne.n	8009106 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	091b      	lsrs	r3, r3, #4
 80090b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80090bc:	429a      	cmp	r2, r3
 80090be:	d122      	bne.n	8009106 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ca:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d11a      	bne.n	8009106 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	0a5b      	lsrs	r3, r3, #9
 80090d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090dc:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80090de:	429a      	cmp	r2, r3
 80090e0:	d111      	bne.n	8009106 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	0c1b      	lsrs	r3, r3, #16
 80090e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ee:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d108      	bne.n	8009106 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	0e1b      	lsrs	r3, r3, #24
 80090f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009100:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009102:	429a      	cmp	r2, r3
 8009104:	d001      	beq.n	800910a <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	e000      	b.n	800910c <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800910a:	2300      	movs	r3, #0
}
 800910c:	4618      	mov	r0, r3
 800910e:	3730      	adds	r7, #48	; 0x30
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}
 8009114:	58024400 	.word	0x58024400

08009118 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b086      	sub	sp, #24
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d101      	bne.n	800912c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	e19c      	b.n	8009466 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800912c:	4b8a      	ldr	r3, [pc, #552]	; (8009358 <HAL_RCC_ClockConfig+0x240>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f003 030f 	and.w	r3, r3, #15
 8009134:	683a      	ldr	r2, [r7, #0]
 8009136:	429a      	cmp	r2, r3
 8009138:	d910      	bls.n	800915c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800913a:	4b87      	ldr	r3, [pc, #540]	; (8009358 <HAL_RCC_ClockConfig+0x240>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f023 020f 	bic.w	r2, r3, #15
 8009142:	4985      	ldr	r1, [pc, #532]	; (8009358 <HAL_RCC_ClockConfig+0x240>)
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	4313      	orrs	r3, r2
 8009148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800914a:	4b83      	ldr	r3, [pc, #524]	; (8009358 <HAL_RCC_ClockConfig+0x240>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f003 030f 	and.w	r3, r3, #15
 8009152:	683a      	ldr	r2, [r7, #0]
 8009154:	429a      	cmp	r2, r3
 8009156:	d001      	beq.n	800915c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009158:	2301      	movs	r3, #1
 800915a:	e184      	b.n	8009466 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f003 0304 	and.w	r3, r3, #4
 8009164:	2b00      	cmp	r3, #0
 8009166:	d010      	beq.n	800918a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	691a      	ldr	r2, [r3, #16]
 800916c:	4b7b      	ldr	r3, [pc, #492]	; (800935c <HAL_RCC_ClockConfig+0x244>)
 800916e:	699b      	ldr	r3, [r3, #24]
 8009170:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009174:	429a      	cmp	r2, r3
 8009176:	d908      	bls.n	800918a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009178:	4b78      	ldr	r3, [pc, #480]	; (800935c <HAL_RCC_ClockConfig+0x244>)
 800917a:	699b      	ldr	r3, [r3, #24]
 800917c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	691b      	ldr	r3, [r3, #16]
 8009184:	4975      	ldr	r1, [pc, #468]	; (800935c <HAL_RCC_ClockConfig+0x244>)
 8009186:	4313      	orrs	r3, r2
 8009188:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f003 0308 	and.w	r3, r3, #8
 8009192:	2b00      	cmp	r3, #0
 8009194:	d010      	beq.n	80091b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	695a      	ldr	r2, [r3, #20]
 800919a:	4b70      	ldr	r3, [pc, #448]	; (800935c <HAL_RCC_ClockConfig+0x244>)
 800919c:	69db      	ldr	r3, [r3, #28]
 800919e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d908      	bls.n	80091b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80091a6:	4b6d      	ldr	r3, [pc, #436]	; (800935c <HAL_RCC_ClockConfig+0x244>)
 80091a8:	69db      	ldr	r3, [r3, #28]
 80091aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	695b      	ldr	r3, [r3, #20]
 80091b2:	496a      	ldr	r1, [pc, #424]	; (800935c <HAL_RCC_ClockConfig+0x244>)
 80091b4:	4313      	orrs	r3, r2
 80091b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f003 0310 	and.w	r3, r3, #16
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d010      	beq.n	80091e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	699a      	ldr	r2, [r3, #24]
 80091c8:	4b64      	ldr	r3, [pc, #400]	; (800935c <HAL_RCC_ClockConfig+0x244>)
 80091ca:	69db      	ldr	r3, [r3, #28]
 80091cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d908      	bls.n	80091e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80091d4:	4b61      	ldr	r3, [pc, #388]	; (800935c <HAL_RCC_ClockConfig+0x244>)
 80091d6:	69db      	ldr	r3, [r3, #28]
 80091d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	699b      	ldr	r3, [r3, #24]
 80091e0:	495e      	ldr	r1, [pc, #376]	; (800935c <HAL_RCC_ClockConfig+0x244>)
 80091e2:	4313      	orrs	r3, r2
 80091e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f003 0320 	and.w	r3, r3, #32
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d010      	beq.n	8009214 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	69da      	ldr	r2, [r3, #28]
 80091f6:	4b59      	ldr	r3, [pc, #356]	; (800935c <HAL_RCC_ClockConfig+0x244>)
 80091f8:	6a1b      	ldr	r3, [r3, #32]
 80091fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80091fe:	429a      	cmp	r2, r3
 8009200:	d908      	bls.n	8009214 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009202:	4b56      	ldr	r3, [pc, #344]	; (800935c <HAL_RCC_ClockConfig+0x244>)
 8009204:	6a1b      	ldr	r3, [r3, #32]
 8009206:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	69db      	ldr	r3, [r3, #28]
 800920e:	4953      	ldr	r1, [pc, #332]	; (800935c <HAL_RCC_ClockConfig+0x244>)
 8009210:	4313      	orrs	r3, r2
 8009212:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 0302 	and.w	r3, r3, #2
 800921c:	2b00      	cmp	r3, #0
 800921e:	d010      	beq.n	8009242 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	68da      	ldr	r2, [r3, #12]
 8009224:	4b4d      	ldr	r3, [pc, #308]	; (800935c <HAL_RCC_ClockConfig+0x244>)
 8009226:	699b      	ldr	r3, [r3, #24]
 8009228:	f003 030f 	and.w	r3, r3, #15
 800922c:	429a      	cmp	r2, r3
 800922e:	d908      	bls.n	8009242 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009230:	4b4a      	ldr	r3, [pc, #296]	; (800935c <HAL_RCC_ClockConfig+0x244>)
 8009232:	699b      	ldr	r3, [r3, #24]
 8009234:	f023 020f 	bic.w	r2, r3, #15
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	4947      	ldr	r1, [pc, #284]	; (800935c <HAL_RCC_ClockConfig+0x244>)
 800923e:	4313      	orrs	r3, r2
 8009240:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f003 0301 	and.w	r3, r3, #1
 800924a:	2b00      	cmp	r3, #0
 800924c:	d055      	beq.n	80092fa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800924e:	4b43      	ldr	r3, [pc, #268]	; (800935c <HAL_RCC_ClockConfig+0x244>)
 8009250:	699b      	ldr	r3, [r3, #24]
 8009252:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	4940      	ldr	r1, [pc, #256]	; (800935c <HAL_RCC_ClockConfig+0x244>)
 800925c:	4313      	orrs	r3, r2
 800925e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	2b02      	cmp	r3, #2
 8009266:	d107      	bne.n	8009278 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009268:	4b3c      	ldr	r3, [pc, #240]	; (800935c <HAL_RCC_ClockConfig+0x244>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009270:	2b00      	cmp	r3, #0
 8009272:	d121      	bne.n	80092b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009274:	2301      	movs	r3, #1
 8009276:	e0f6      	b.n	8009466 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	2b03      	cmp	r3, #3
 800927e:	d107      	bne.n	8009290 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009280:	4b36      	ldr	r3, [pc, #216]	; (800935c <HAL_RCC_ClockConfig+0x244>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009288:	2b00      	cmp	r3, #0
 800928a:	d115      	bne.n	80092b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800928c:	2301      	movs	r3, #1
 800928e:	e0ea      	b.n	8009466 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	2b01      	cmp	r3, #1
 8009296:	d107      	bne.n	80092a8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009298:	4b30      	ldr	r3, [pc, #192]	; (800935c <HAL_RCC_ClockConfig+0x244>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d109      	bne.n	80092b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80092a4:	2301      	movs	r3, #1
 80092a6:	e0de      	b.n	8009466 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80092a8:	4b2c      	ldr	r3, [pc, #176]	; (800935c <HAL_RCC_ClockConfig+0x244>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f003 0304 	and.w	r3, r3, #4
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d101      	bne.n	80092b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80092b4:	2301      	movs	r3, #1
 80092b6:	e0d6      	b.n	8009466 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80092b8:	4b28      	ldr	r3, [pc, #160]	; (800935c <HAL_RCC_ClockConfig+0x244>)
 80092ba:	691b      	ldr	r3, [r3, #16]
 80092bc:	f023 0207 	bic.w	r2, r3, #7
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	4925      	ldr	r1, [pc, #148]	; (800935c <HAL_RCC_ClockConfig+0x244>)
 80092c6:	4313      	orrs	r3, r2
 80092c8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092ca:	f7fb ff6f 	bl	80051ac <HAL_GetTick>
 80092ce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092d0:	e00a      	b.n	80092e8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80092d2:	f7fb ff6b 	bl	80051ac <HAL_GetTick>
 80092d6:	4602      	mov	r2, r0
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	1ad3      	subs	r3, r2, r3
 80092dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d901      	bls.n	80092e8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80092e4:	2303      	movs	r3, #3
 80092e6:	e0be      	b.n	8009466 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092e8:	4b1c      	ldr	r3, [pc, #112]	; (800935c <HAL_RCC_ClockConfig+0x244>)
 80092ea:	691b      	ldr	r3, [r3, #16]
 80092ec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	00db      	lsls	r3, r3, #3
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d1eb      	bne.n	80092d2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f003 0302 	and.w	r3, r3, #2
 8009302:	2b00      	cmp	r3, #0
 8009304:	d010      	beq.n	8009328 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	68da      	ldr	r2, [r3, #12]
 800930a:	4b14      	ldr	r3, [pc, #80]	; (800935c <HAL_RCC_ClockConfig+0x244>)
 800930c:	699b      	ldr	r3, [r3, #24]
 800930e:	f003 030f 	and.w	r3, r3, #15
 8009312:	429a      	cmp	r2, r3
 8009314:	d208      	bcs.n	8009328 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009316:	4b11      	ldr	r3, [pc, #68]	; (800935c <HAL_RCC_ClockConfig+0x244>)
 8009318:	699b      	ldr	r3, [r3, #24]
 800931a:	f023 020f 	bic.w	r2, r3, #15
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	490e      	ldr	r1, [pc, #56]	; (800935c <HAL_RCC_ClockConfig+0x244>)
 8009324:	4313      	orrs	r3, r2
 8009326:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009328:	4b0b      	ldr	r3, [pc, #44]	; (8009358 <HAL_RCC_ClockConfig+0x240>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 030f 	and.w	r3, r3, #15
 8009330:	683a      	ldr	r2, [r7, #0]
 8009332:	429a      	cmp	r2, r3
 8009334:	d214      	bcs.n	8009360 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009336:	4b08      	ldr	r3, [pc, #32]	; (8009358 <HAL_RCC_ClockConfig+0x240>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f023 020f 	bic.w	r2, r3, #15
 800933e:	4906      	ldr	r1, [pc, #24]	; (8009358 <HAL_RCC_ClockConfig+0x240>)
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	4313      	orrs	r3, r2
 8009344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009346:	4b04      	ldr	r3, [pc, #16]	; (8009358 <HAL_RCC_ClockConfig+0x240>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f003 030f 	and.w	r3, r3, #15
 800934e:	683a      	ldr	r2, [r7, #0]
 8009350:	429a      	cmp	r2, r3
 8009352:	d005      	beq.n	8009360 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009354:	2301      	movs	r3, #1
 8009356:	e086      	b.n	8009466 <HAL_RCC_ClockConfig+0x34e>
 8009358:	52002000 	.word	0x52002000
 800935c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f003 0304 	and.w	r3, r3, #4
 8009368:	2b00      	cmp	r3, #0
 800936a:	d010      	beq.n	800938e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	691a      	ldr	r2, [r3, #16]
 8009370:	4b3f      	ldr	r3, [pc, #252]	; (8009470 <HAL_RCC_ClockConfig+0x358>)
 8009372:	699b      	ldr	r3, [r3, #24]
 8009374:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009378:	429a      	cmp	r2, r3
 800937a:	d208      	bcs.n	800938e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800937c:	4b3c      	ldr	r3, [pc, #240]	; (8009470 <HAL_RCC_ClockConfig+0x358>)
 800937e:	699b      	ldr	r3, [r3, #24]
 8009380:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	691b      	ldr	r3, [r3, #16]
 8009388:	4939      	ldr	r1, [pc, #228]	; (8009470 <HAL_RCC_ClockConfig+0x358>)
 800938a:	4313      	orrs	r3, r2
 800938c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f003 0308 	and.w	r3, r3, #8
 8009396:	2b00      	cmp	r3, #0
 8009398:	d010      	beq.n	80093bc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	695a      	ldr	r2, [r3, #20]
 800939e:	4b34      	ldr	r3, [pc, #208]	; (8009470 <HAL_RCC_ClockConfig+0x358>)
 80093a0:	69db      	ldr	r3, [r3, #28]
 80093a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d208      	bcs.n	80093bc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80093aa:	4b31      	ldr	r3, [pc, #196]	; (8009470 <HAL_RCC_ClockConfig+0x358>)
 80093ac:	69db      	ldr	r3, [r3, #28]
 80093ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	695b      	ldr	r3, [r3, #20]
 80093b6:	492e      	ldr	r1, [pc, #184]	; (8009470 <HAL_RCC_ClockConfig+0x358>)
 80093b8:	4313      	orrs	r3, r2
 80093ba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f003 0310 	and.w	r3, r3, #16
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d010      	beq.n	80093ea <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	699a      	ldr	r2, [r3, #24]
 80093cc:	4b28      	ldr	r3, [pc, #160]	; (8009470 <HAL_RCC_ClockConfig+0x358>)
 80093ce:	69db      	ldr	r3, [r3, #28]
 80093d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d208      	bcs.n	80093ea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80093d8:	4b25      	ldr	r3, [pc, #148]	; (8009470 <HAL_RCC_ClockConfig+0x358>)
 80093da:	69db      	ldr	r3, [r3, #28]
 80093dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	699b      	ldr	r3, [r3, #24]
 80093e4:	4922      	ldr	r1, [pc, #136]	; (8009470 <HAL_RCC_ClockConfig+0x358>)
 80093e6:	4313      	orrs	r3, r2
 80093e8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f003 0320 	and.w	r3, r3, #32
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d010      	beq.n	8009418 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	69da      	ldr	r2, [r3, #28]
 80093fa:	4b1d      	ldr	r3, [pc, #116]	; (8009470 <HAL_RCC_ClockConfig+0x358>)
 80093fc:	6a1b      	ldr	r3, [r3, #32]
 80093fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009402:	429a      	cmp	r2, r3
 8009404:	d208      	bcs.n	8009418 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009406:	4b1a      	ldr	r3, [pc, #104]	; (8009470 <HAL_RCC_ClockConfig+0x358>)
 8009408:	6a1b      	ldr	r3, [r3, #32]
 800940a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	69db      	ldr	r3, [r3, #28]
 8009412:	4917      	ldr	r1, [pc, #92]	; (8009470 <HAL_RCC_ClockConfig+0x358>)
 8009414:	4313      	orrs	r3, r2
 8009416:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009418:	f000 f834 	bl	8009484 <HAL_RCC_GetSysClockFreq>
 800941c:	4602      	mov	r2, r0
 800941e:	4b14      	ldr	r3, [pc, #80]	; (8009470 <HAL_RCC_ClockConfig+0x358>)
 8009420:	699b      	ldr	r3, [r3, #24]
 8009422:	0a1b      	lsrs	r3, r3, #8
 8009424:	f003 030f 	and.w	r3, r3, #15
 8009428:	4912      	ldr	r1, [pc, #72]	; (8009474 <HAL_RCC_ClockConfig+0x35c>)
 800942a:	5ccb      	ldrb	r3, [r1, r3]
 800942c:	f003 031f 	and.w	r3, r3, #31
 8009430:	fa22 f303 	lsr.w	r3, r2, r3
 8009434:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009436:	4b0e      	ldr	r3, [pc, #56]	; (8009470 <HAL_RCC_ClockConfig+0x358>)
 8009438:	699b      	ldr	r3, [r3, #24]
 800943a:	f003 030f 	and.w	r3, r3, #15
 800943e:	4a0d      	ldr	r2, [pc, #52]	; (8009474 <HAL_RCC_ClockConfig+0x35c>)
 8009440:	5cd3      	ldrb	r3, [r2, r3]
 8009442:	f003 031f 	and.w	r3, r3, #31
 8009446:	693a      	ldr	r2, [r7, #16]
 8009448:	fa22 f303 	lsr.w	r3, r2, r3
 800944c:	4a0a      	ldr	r2, [pc, #40]	; (8009478 <HAL_RCC_ClockConfig+0x360>)
 800944e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009450:	4a0a      	ldr	r2, [pc, #40]	; (800947c <HAL_RCC_ClockConfig+0x364>)
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009456:	4b0a      	ldr	r3, [pc, #40]	; (8009480 <HAL_RCC_ClockConfig+0x368>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4618      	mov	r0, r3
 800945c:	f7fb fe5c 	bl	8005118 <HAL_InitTick>
 8009460:	4603      	mov	r3, r0
 8009462:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009464:	7bfb      	ldrb	r3, [r7, #15]
}
 8009466:	4618      	mov	r0, r3
 8009468:	3718      	adds	r7, #24
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	58024400 	.word	0x58024400
 8009474:	08012118 	.word	0x08012118
 8009478:	2400003c 	.word	0x2400003c
 800947c:	24000038 	.word	0x24000038
 8009480:	24000040 	.word	0x24000040

08009484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009484:	b480      	push	{r7}
 8009486:	b089      	sub	sp, #36	; 0x24
 8009488:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800948a:	4bb3      	ldr	r3, [pc, #716]	; (8009758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800948c:	691b      	ldr	r3, [r3, #16]
 800948e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009492:	2b18      	cmp	r3, #24
 8009494:	f200 8155 	bhi.w	8009742 <HAL_RCC_GetSysClockFreq+0x2be>
 8009498:	a201      	add	r2, pc, #4	; (adr r2, 80094a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800949a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800949e:	bf00      	nop
 80094a0:	08009505 	.word	0x08009505
 80094a4:	08009743 	.word	0x08009743
 80094a8:	08009743 	.word	0x08009743
 80094ac:	08009743 	.word	0x08009743
 80094b0:	08009743 	.word	0x08009743
 80094b4:	08009743 	.word	0x08009743
 80094b8:	08009743 	.word	0x08009743
 80094bc:	08009743 	.word	0x08009743
 80094c0:	0800952b 	.word	0x0800952b
 80094c4:	08009743 	.word	0x08009743
 80094c8:	08009743 	.word	0x08009743
 80094cc:	08009743 	.word	0x08009743
 80094d0:	08009743 	.word	0x08009743
 80094d4:	08009743 	.word	0x08009743
 80094d8:	08009743 	.word	0x08009743
 80094dc:	08009743 	.word	0x08009743
 80094e0:	08009531 	.word	0x08009531
 80094e4:	08009743 	.word	0x08009743
 80094e8:	08009743 	.word	0x08009743
 80094ec:	08009743 	.word	0x08009743
 80094f0:	08009743 	.word	0x08009743
 80094f4:	08009743 	.word	0x08009743
 80094f8:	08009743 	.word	0x08009743
 80094fc:	08009743 	.word	0x08009743
 8009500:	08009537 	.word	0x08009537
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009504:	4b94      	ldr	r3, [pc, #592]	; (8009758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f003 0320 	and.w	r3, r3, #32
 800950c:	2b00      	cmp	r3, #0
 800950e:	d009      	beq.n	8009524 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009510:	4b91      	ldr	r3, [pc, #580]	; (8009758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	08db      	lsrs	r3, r3, #3
 8009516:	f003 0303 	and.w	r3, r3, #3
 800951a:	4a90      	ldr	r2, [pc, #576]	; (800975c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800951c:	fa22 f303 	lsr.w	r3, r2, r3
 8009520:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009522:	e111      	b.n	8009748 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009524:	4b8d      	ldr	r3, [pc, #564]	; (800975c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009526:	61bb      	str	r3, [r7, #24]
    break;
 8009528:	e10e      	b.n	8009748 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800952a:	4b8d      	ldr	r3, [pc, #564]	; (8009760 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800952c:	61bb      	str	r3, [r7, #24]
    break;
 800952e:	e10b      	b.n	8009748 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009530:	4b8c      	ldr	r3, [pc, #560]	; (8009764 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009532:	61bb      	str	r3, [r7, #24]
    break;
 8009534:	e108      	b.n	8009748 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009536:	4b88      	ldr	r3, [pc, #544]	; (8009758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800953a:	f003 0303 	and.w	r3, r3, #3
 800953e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009540:	4b85      	ldr	r3, [pc, #532]	; (8009758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009544:	091b      	lsrs	r3, r3, #4
 8009546:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800954a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800954c:	4b82      	ldr	r3, [pc, #520]	; (8009758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800954e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009550:	f003 0301 	and.w	r3, r3, #1
 8009554:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009556:	4b80      	ldr	r3, [pc, #512]	; (8009758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800955a:	08db      	lsrs	r3, r3, #3
 800955c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009560:	68fa      	ldr	r2, [r7, #12]
 8009562:	fb02 f303 	mul.w	r3, r2, r3
 8009566:	ee07 3a90 	vmov	s15, r3
 800956a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800956e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	2b00      	cmp	r3, #0
 8009576:	f000 80e1 	beq.w	800973c <HAL_RCC_GetSysClockFreq+0x2b8>
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	2b02      	cmp	r3, #2
 800957e:	f000 8083 	beq.w	8009688 <HAL_RCC_GetSysClockFreq+0x204>
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	2b02      	cmp	r3, #2
 8009586:	f200 80a1 	bhi.w	80096cc <HAL_RCC_GetSysClockFreq+0x248>
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d003      	beq.n	8009598 <HAL_RCC_GetSysClockFreq+0x114>
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	2b01      	cmp	r3, #1
 8009594:	d056      	beq.n	8009644 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009596:	e099      	b.n	80096cc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009598:	4b6f      	ldr	r3, [pc, #444]	; (8009758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f003 0320 	and.w	r3, r3, #32
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d02d      	beq.n	8009600 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80095a4:	4b6c      	ldr	r3, [pc, #432]	; (8009758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	08db      	lsrs	r3, r3, #3
 80095aa:	f003 0303 	and.w	r3, r3, #3
 80095ae:	4a6b      	ldr	r2, [pc, #428]	; (800975c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80095b0:	fa22 f303 	lsr.w	r3, r2, r3
 80095b4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	ee07 3a90 	vmov	s15, r3
 80095bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	ee07 3a90 	vmov	s15, r3
 80095c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095ce:	4b62      	ldr	r3, [pc, #392]	; (8009758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095d6:	ee07 3a90 	vmov	s15, r3
 80095da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095de:	ed97 6a02 	vldr	s12, [r7, #8]
 80095e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009768 <HAL_RCC_GetSysClockFreq+0x2e4>
 80095e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80095fe:	e087      	b.n	8009710 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	ee07 3a90 	vmov	s15, r3
 8009606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800960a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800976c <HAL_RCC_GetSysClockFreq+0x2e8>
 800960e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009612:	4b51      	ldr	r3, [pc, #324]	; (8009758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800961a:	ee07 3a90 	vmov	s15, r3
 800961e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009622:	ed97 6a02 	vldr	s12, [r7, #8]
 8009626:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009768 <HAL_RCC_GetSysClockFreq+0x2e4>
 800962a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800962e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800963a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800963e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009642:	e065      	b.n	8009710 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	ee07 3a90 	vmov	s15, r3
 800964a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800964e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009770 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009656:	4b40      	ldr	r3, [pc, #256]	; (8009758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800965a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800965e:	ee07 3a90 	vmov	s15, r3
 8009662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009666:	ed97 6a02 	vldr	s12, [r7, #8]
 800966a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009768 <HAL_RCC_GetSysClockFreq+0x2e4>
 800966e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800967a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800967e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009682:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009686:	e043      	b.n	8009710 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	ee07 3a90 	vmov	s15, r3
 800968e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009692:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009774 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800969a:	4b2f      	ldr	r3, [pc, #188]	; (8009758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800969c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800969e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096a2:	ee07 3a90 	vmov	s15, r3
 80096a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80096ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009768 <HAL_RCC_GetSysClockFreq+0x2e4>
 80096b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096ca:	e021      	b.n	8009710 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	ee07 3a90 	vmov	s15, r3
 80096d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009770 <HAL_RCC_GetSysClockFreq+0x2ec>
 80096da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096de:	4b1e      	ldr	r3, [pc, #120]	; (8009758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096e6:	ee07 3a90 	vmov	s15, r3
 80096ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80096f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009768 <HAL_RCC_GetSysClockFreq+0x2e4>
 80096f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800970a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800970e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009710:	4b11      	ldr	r3, [pc, #68]	; (8009758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009714:	0a5b      	lsrs	r3, r3, #9
 8009716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800971a:	3301      	adds	r3, #1
 800971c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	ee07 3a90 	vmov	s15, r3
 8009724:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009728:	edd7 6a07 	vldr	s13, [r7, #28]
 800972c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009734:	ee17 3a90 	vmov	r3, s15
 8009738:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800973a:	e005      	b.n	8009748 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800973c:	2300      	movs	r3, #0
 800973e:	61bb      	str	r3, [r7, #24]
    break;
 8009740:	e002      	b.n	8009748 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009742:	4b07      	ldr	r3, [pc, #28]	; (8009760 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009744:	61bb      	str	r3, [r7, #24]
    break;
 8009746:	bf00      	nop
  }

  return sysclockfreq;
 8009748:	69bb      	ldr	r3, [r7, #24]
}
 800974a:	4618      	mov	r0, r3
 800974c:	3724      	adds	r7, #36	; 0x24
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr
 8009756:	bf00      	nop
 8009758:	58024400 	.word	0x58024400
 800975c:	03d09000 	.word	0x03d09000
 8009760:	003d0900 	.word	0x003d0900
 8009764:	02dc6c00 	.word	0x02dc6c00
 8009768:	46000000 	.word	0x46000000
 800976c:	4c742400 	.word	0x4c742400
 8009770:	4a742400 	.word	0x4a742400
 8009774:	4c371b00 	.word	0x4c371b00

08009778 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800977e:	f7ff fe81 	bl	8009484 <HAL_RCC_GetSysClockFreq>
 8009782:	4602      	mov	r2, r0
 8009784:	4b10      	ldr	r3, [pc, #64]	; (80097c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8009786:	699b      	ldr	r3, [r3, #24]
 8009788:	0a1b      	lsrs	r3, r3, #8
 800978a:	f003 030f 	and.w	r3, r3, #15
 800978e:	490f      	ldr	r1, [pc, #60]	; (80097cc <HAL_RCC_GetHCLKFreq+0x54>)
 8009790:	5ccb      	ldrb	r3, [r1, r3]
 8009792:	f003 031f 	and.w	r3, r3, #31
 8009796:	fa22 f303 	lsr.w	r3, r2, r3
 800979a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800979c:	4b0a      	ldr	r3, [pc, #40]	; (80097c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800979e:	699b      	ldr	r3, [r3, #24]
 80097a0:	f003 030f 	and.w	r3, r3, #15
 80097a4:	4a09      	ldr	r2, [pc, #36]	; (80097cc <HAL_RCC_GetHCLKFreq+0x54>)
 80097a6:	5cd3      	ldrb	r3, [r2, r3]
 80097a8:	f003 031f 	and.w	r3, r3, #31
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	fa22 f303 	lsr.w	r3, r2, r3
 80097b2:	4a07      	ldr	r2, [pc, #28]	; (80097d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80097b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80097b6:	4a07      	ldr	r2, [pc, #28]	; (80097d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80097bc:	4b04      	ldr	r3, [pc, #16]	; (80097d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80097be:	681b      	ldr	r3, [r3, #0]
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3708      	adds	r7, #8
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}
 80097c8:	58024400 	.word	0x58024400
 80097cc:	08012118 	.word	0x08012118
 80097d0:	2400003c 	.word	0x2400003c
 80097d4:	24000038 	.word	0x24000038

080097d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80097dc:	f7ff ffcc 	bl	8009778 <HAL_RCC_GetHCLKFreq>
 80097e0:	4602      	mov	r2, r0
 80097e2:	4b06      	ldr	r3, [pc, #24]	; (80097fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80097e4:	69db      	ldr	r3, [r3, #28]
 80097e6:	091b      	lsrs	r3, r3, #4
 80097e8:	f003 0307 	and.w	r3, r3, #7
 80097ec:	4904      	ldr	r1, [pc, #16]	; (8009800 <HAL_RCC_GetPCLK1Freq+0x28>)
 80097ee:	5ccb      	ldrb	r3, [r1, r3]
 80097f0:	f003 031f 	and.w	r3, r3, #31
 80097f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	bd80      	pop	{r7, pc}
 80097fc:	58024400 	.word	0x58024400
 8009800:	08012118 	.word	0x08012118

08009804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009808:	f7ff ffb6 	bl	8009778 <HAL_RCC_GetHCLKFreq>
 800980c:	4602      	mov	r2, r0
 800980e:	4b06      	ldr	r3, [pc, #24]	; (8009828 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009810:	69db      	ldr	r3, [r3, #28]
 8009812:	0a1b      	lsrs	r3, r3, #8
 8009814:	f003 0307 	and.w	r3, r3, #7
 8009818:	4904      	ldr	r1, [pc, #16]	; (800982c <HAL_RCC_GetPCLK2Freq+0x28>)
 800981a:	5ccb      	ldrb	r3, [r1, r3]
 800981c:	f003 031f 	and.w	r3, r3, #31
 8009820:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009824:	4618      	mov	r0, r3
 8009826:	bd80      	pop	{r7, pc}
 8009828:	58024400 	.word	0x58024400
 800982c:	08012118 	.word	0x08012118

08009830 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b086      	sub	sp, #24
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009838:	2300      	movs	r3, #0
 800983a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800983c:	2300      	movs	r3, #0
 800983e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009848:	2b00      	cmp	r3, #0
 800984a:	d03f      	beq.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009850:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009854:	d02a      	beq.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009856:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800985a:	d824      	bhi.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800985c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009860:	d018      	beq.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009862:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009866:	d81e      	bhi.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009868:	2b00      	cmp	r3, #0
 800986a:	d003      	beq.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800986c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009870:	d007      	beq.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009872:	e018      	b.n	80098a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009874:	4bab      	ldr	r3, [pc, #684]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009878:	4aaa      	ldr	r2, [pc, #680]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800987a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800987e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009880:	e015      	b.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	3304      	adds	r3, #4
 8009886:	2102      	movs	r1, #2
 8009888:	4618      	mov	r0, r3
 800988a:	f001 f9cf 	bl	800ac2c <RCCEx_PLL2_Config>
 800988e:	4603      	mov	r3, r0
 8009890:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009892:	e00c      	b.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	3324      	adds	r3, #36	; 0x24
 8009898:	2102      	movs	r1, #2
 800989a:	4618      	mov	r0, r3
 800989c:	f001 fa78 	bl	800ad90 <RCCEx_PLL3_Config>
 80098a0:	4603      	mov	r3, r0
 80098a2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80098a4:	e003      	b.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80098a6:	2301      	movs	r3, #1
 80098a8:	75fb      	strb	r3, [r7, #23]
      break;
 80098aa:	e000      	b.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80098ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098ae:	7dfb      	ldrb	r3, [r7, #23]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d109      	bne.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80098b4:	4b9b      	ldr	r3, [pc, #620]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80098b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098c0:	4998      	ldr	r1, [pc, #608]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80098c2:	4313      	orrs	r3, r2
 80098c4:	650b      	str	r3, [r1, #80]	; 0x50
 80098c6:	e001      	b.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098c8:	7dfb      	ldrb	r3, [r7, #23]
 80098ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d03d      	beq.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098dc:	2b04      	cmp	r3, #4
 80098de:	d826      	bhi.n	800992e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80098e0:	a201      	add	r2, pc, #4	; (adr r2, 80098e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80098e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e6:	bf00      	nop
 80098e8:	080098fd 	.word	0x080098fd
 80098ec:	0800990b 	.word	0x0800990b
 80098f0:	0800991d 	.word	0x0800991d
 80098f4:	08009935 	.word	0x08009935
 80098f8:	08009935 	.word	0x08009935
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098fc:	4b89      	ldr	r3, [pc, #548]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80098fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009900:	4a88      	ldr	r2, [pc, #544]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009906:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009908:	e015      	b.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	3304      	adds	r3, #4
 800990e:	2100      	movs	r1, #0
 8009910:	4618      	mov	r0, r3
 8009912:	f001 f98b 	bl	800ac2c <RCCEx_PLL2_Config>
 8009916:	4603      	mov	r3, r0
 8009918:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800991a:	e00c      	b.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	3324      	adds	r3, #36	; 0x24
 8009920:	2100      	movs	r1, #0
 8009922:	4618      	mov	r0, r3
 8009924:	f001 fa34 	bl	800ad90 <RCCEx_PLL3_Config>
 8009928:	4603      	mov	r3, r0
 800992a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800992c:	e003      	b.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	75fb      	strb	r3, [r7, #23]
      break;
 8009932:	e000      	b.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009934:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009936:	7dfb      	ldrb	r3, [r7, #23]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d109      	bne.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800993c:	4b79      	ldr	r3, [pc, #484]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800993e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009940:	f023 0207 	bic.w	r2, r3, #7
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009948:	4976      	ldr	r1, [pc, #472]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800994a:	4313      	orrs	r3, r2
 800994c:	650b      	str	r3, [r1, #80]	; 0x50
 800994e:	e001      	b.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009950:	7dfb      	ldrb	r3, [r7, #23]
 8009952:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800995c:	2b00      	cmp	r3, #0
 800995e:	d042      	beq.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009968:	d02b      	beq.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800996a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800996e:	d825      	bhi.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009970:	2bc0      	cmp	r3, #192	; 0xc0
 8009972:	d028      	beq.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009974:	2bc0      	cmp	r3, #192	; 0xc0
 8009976:	d821      	bhi.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009978:	2b80      	cmp	r3, #128	; 0x80
 800997a:	d016      	beq.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800997c:	2b80      	cmp	r3, #128	; 0x80
 800997e:	d81d      	bhi.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009980:	2b00      	cmp	r3, #0
 8009982:	d002      	beq.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009984:	2b40      	cmp	r3, #64	; 0x40
 8009986:	d007      	beq.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009988:	e018      	b.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800998a:	4b66      	ldr	r3, [pc, #408]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800998c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800998e:	4a65      	ldr	r2, [pc, #404]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009994:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009996:	e017      	b.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	3304      	adds	r3, #4
 800999c:	2100      	movs	r1, #0
 800999e:	4618      	mov	r0, r3
 80099a0:	f001 f944 	bl	800ac2c <RCCEx_PLL2_Config>
 80099a4:	4603      	mov	r3, r0
 80099a6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80099a8:	e00e      	b.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	3324      	adds	r3, #36	; 0x24
 80099ae:	2100      	movs	r1, #0
 80099b0:	4618      	mov	r0, r3
 80099b2:	f001 f9ed 	bl	800ad90 <RCCEx_PLL3_Config>
 80099b6:	4603      	mov	r3, r0
 80099b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80099ba:	e005      	b.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099bc:	2301      	movs	r3, #1
 80099be:	75fb      	strb	r3, [r7, #23]
      break;
 80099c0:	e002      	b.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80099c2:	bf00      	nop
 80099c4:	e000      	b.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80099c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099c8:	7dfb      	ldrb	r3, [r7, #23]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d109      	bne.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80099ce:	4b55      	ldr	r3, [pc, #340]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80099d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099d2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099da:	4952      	ldr	r1, [pc, #328]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80099dc:	4313      	orrs	r3, r2
 80099de:	650b      	str	r3, [r1, #80]	; 0x50
 80099e0:	e001      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099e2:	7dfb      	ldrb	r3, [r7, #23]
 80099e4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d049      	beq.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80099f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80099fc:	d030      	beq.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80099fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a02:	d82a      	bhi.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009a04:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009a08:	d02c      	beq.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8009a0a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009a0e:	d824      	bhi.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009a10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a14:	d018      	beq.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8009a16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a1a:	d81e      	bhi.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d003      	beq.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8009a20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a24:	d007      	beq.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009a26:	e018      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a28:	4b3e      	ldr	r3, [pc, #248]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a2c:	4a3d      	ldr	r2, [pc, #244]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009a2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009a34:	e017      	b.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	3304      	adds	r3, #4
 8009a3a:	2100      	movs	r1, #0
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f001 f8f5 	bl	800ac2c <RCCEx_PLL2_Config>
 8009a42:	4603      	mov	r3, r0
 8009a44:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009a46:	e00e      	b.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	3324      	adds	r3, #36	; 0x24
 8009a4c:	2100      	movs	r1, #0
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f001 f99e 	bl	800ad90 <RCCEx_PLL3_Config>
 8009a54:	4603      	mov	r3, r0
 8009a56:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009a58:	e005      	b.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	75fb      	strb	r3, [r7, #23]
      break;
 8009a5e:	e002      	b.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009a60:	bf00      	nop
 8009a62:	e000      	b.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009a64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a66:	7dfb      	ldrb	r3, [r7, #23]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d10a      	bne.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009a6c:	4b2d      	ldr	r3, [pc, #180]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a70:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009a7a:	492a      	ldr	r1, [pc, #168]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	658b      	str	r3, [r1, #88]	; 0x58
 8009a80:	e001      	b.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a82:	7dfb      	ldrb	r3, [r7, #23]
 8009a84:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d04c      	beq.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009a98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009a9c:	d030      	beq.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8009a9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009aa2:	d82a      	bhi.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009aa4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009aa8:	d02c      	beq.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8009aaa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009aae:	d824      	bhi.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009ab0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ab4:	d018      	beq.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8009ab6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009aba:	d81e      	bhi.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d003      	beq.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009ac0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009ac4:	d007      	beq.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009ac6:	e018      	b.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ac8:	4b16      	ldr	r3, [pc, #88]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009acc:	4a15      	ldr	r2, [pc, #84]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009ace:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ad2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009ad4:	e017      	b.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	3304      	adds	r3, #4
 8009ada:	2100      	movs	r1, #0
 8009adc:	4618      	mov	r0, r3
 8009ade:	f001 f8a5 	bl	800ac2c <RCCEx_PLL2_Config>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009ae6:	e00e      	b.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	3324      	adds	r3, #36	; 0x24
 8009aec:	2100      	movs	r1, #0
 8009aee:	4618      	mov	r0, r3
 8009af0:	f001 f94e 	bl	800ad90 <RCCEx_PLL3_Config>
 8009af4:	4603      	mov	r3, r0
 8009af6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009af8:	e005      	b.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	75fb      	strb	r3, [r7, #23]
      break;
 8009afe:	e002      	b.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8009b00:	bf00      	nop
 8009b02:	e000      	b.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8009b04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b06:	7dfb      	ldrb	r3, [r7, #23]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d10d      	bne.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009b0c:	4b05      	ldr	r3, [pc, #20]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b10:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009b1a:	4902      	ldr	r1, [pc, #8]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	658b      	str	r3, [r1, #88]	; 0x58
 8009b20:	e004      	b.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8009b22:	bf00      	nop
 8009b24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b28:	7dfb      	ldrb	r3, [r7, #23]
 8009b2a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d032      	beq.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b3c:	2b30      	cmp	r3, #48	; 0x30
 8009b3e:	d01c      	beq.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009b40:	2b30      	cmp	r3, #48	; 0x30
 8009b42:	d817      	bhi.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8009b44:	2b20      	cmp	r3, #32
 8009b46:	d00c      	beq.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8009b48:	2b20      	cmp	r3, #32
 8009b4a:	d813      	bhi.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d016      	beq.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8009b50:	2b10      	cmp	r3, #16
 8009b52:	d10f      	bne.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b54:	4baf      	ldr	r3, [pc, #700]	; (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b58:	4aae      	ldr	r2, [pc, #696]	; (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009b60:	e00e      	b.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	3304      	adds	r3, #4
 8009b66:	2102      	movs	r1, #2
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f001 f85f 	bl	800ac2c <RCCEx_PLL2_Config>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009b72:	e005      	b.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009b74:	2301      	movs	r3, #1
 8009b76:	75fb      	strb	r3, [r7, #23]
      break;
 8009b78:	e002      	b.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8009b7a:	bf00      	nop
 8009b7c:	e000      	b.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8009b7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b80:	7dfb      	ldrb	r3, [r7, #23]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d109      	bne.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009b86:	4ba3      	ldr	r3, [pc, #652]	; (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b8a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b92:	49a0      	ldr	r1, [pc, #640]	; (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009b94:	4313      	orrs	r3, r2
 8009b96:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009b98:	e001      	b.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b9a:	7dfb      	ldrb	r3, [r7, #23]
 8009b9c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d047      	beq.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009bb2:	d030      	beq.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8009bb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009bb8:	d82a      	bhi.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009bba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009bbe:	d02c      	beq.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8009bc0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009bc4:	d824      	bhi.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009bc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bca:	d018      	beq.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8009bcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bd0:	d81e      	bhi.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d003      	beq.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8009bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bda:	d007      	beq.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8009bdc:	e018      	b.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bde:	4b8d      	ldr	r3, [pc, #564]	; (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be2:	4a8c      	ldr	r2, [pc, #560]	; (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009be8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009bea:	e017      	b.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	3304      	adds	r3, #4
 8009bf0:	2100      	movs	r1, #0
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f001 f81a 	bl	800ac2c <RCCEx_PLL2_Config>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009bfc:	e00e      	b.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	3324      	adds	r3, #36	; 0x24
 8009c02:	2100      	movs	r1, #0
 8009c04:	4618      	mov	r0, r3
 8009c06:	f001 f8c3 	bl	800ad90 <RCCEx_PLL3_Config>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009c0e:	e005      	b.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c10:	2301      	movs	r3, #1
 8009c12:	75fb      	strb	r3, [r7, #23]
      break;
 8009c14:	e002      	b.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8009c16:	bf00      	nop
 8009c18:	e000      	b.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8009c1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c1c:	7dfb      	ldrb	r3, [r7, #23]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d109      	bne.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009c22:	4b7c      	ldr	r3, [pc, #496]	; (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c26:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c2e:	4979      	ldr	r1, [pc, #484]	; (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009c30:	4313      	orrs	r3, r2
 8009c32:	650b      	str	r3, [r1, #80]	; 0x50
 8009c34:	e001      	b.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c36:	7dfb      	ldrb	r3, [r7, #23]
 8009c38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d049      	beq.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009c4e:	d02e      	beq.n	8009cae <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8009c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009c54:	d828      	bhi.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009c56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009c5a:	d02a      	beq.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8009c5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009c60:	d822      	bhi.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009c62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009c66:	d026      	beq.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8009c68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009c6c:	d81c      	bhi.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009c6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c72:	d010      	beq.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8009c74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c78:	d816      	bhi.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d01d      	beq.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8009c7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c82:	d111      	bne.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	3304      	adds	r3, #4
 8009c88:	2101      	movs	r1, #1
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f000 ffce 	bl	800ac2c <RCCEx_PLL2_Config>
 8009c90:	4603      	mov	r3, r0
 8009c92:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009c94:	e012      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	3324      	adds	r3, #36	; 0x24
 8009c9a:	2101      	movs	r1, #1
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f001 f877 	bl	800ad90 <RCCEx_PLL3_Config>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009ca6:	e009      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	75fb      	strb	r3, [r7, #23]
      break;
 8009cac:	e006      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009cae:	bf00      	nop
 8009cb0:	e004      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009cb2:	bf00      	nop
 8009cb4:	e002      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009cb6:	bf00      	nop
 8009cb8:	e000      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009cba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cbc:	7dfb      	ldrb	r3, [r7, #23]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d109      	bne.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009cc2:	4b54      	ldr	r3, [pc, #336]	; (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cc6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cce:	4951      	ldr	r1, [pc, #324]	; (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	650b      	str	r3, [r1, #80]	; 0x50
 8009cd4:	e001      	b.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cd6:	7dfb      	ldrb	r3, [r7, #23]
 8009cd8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d04b      	beq.n	8009d7e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009cec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009cf0:	d02e      	beq.n	8009d50 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8009cf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009cf6:	d828      	bhi.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cfc:	d02a      	beq.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8009cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d02:	d822      	bhi.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009d04:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009d08:	d026      	beq.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8009d0a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009d0e:	d81c      	bhi.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009d10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d14:	d010      	beq.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8009d16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d1a:	d816      	bhi.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d01d      	beq.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8009d20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d24:	d111      	bne.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	3304      	adds	r3, #4
 8009d2a:	2101      	movs	r1, #1
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f000 ff7d 	bl	800ac2c <RCCEx_PLL2_Config>
 8009d32:	4603      	mov	r3, r0
 8009d34:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009d36:	e012      	b.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	3324      	adds	r3, #36	; 0x24
 8009d3c:	2101      	movs	r1, #1
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f001 f826 	bl	800ad90 <RCCEx_PLL3_Config>
 8009d44:	4603      	mov	r3, r0
 8009d46:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009d48:	e009      	b.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	75fb      	strb	r3, [r7, #23]
      break;
 8009d4e:	e006      	b.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009d50:	bf00      	nop
 8009d52:	e004      	b.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009d54:	bf00      	nop
 8009d56:	e002      	b.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009d58:	bf00      	nop
 8009d5a:	e000      	b.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009d5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d5e:	7dfb      	ldrb	r3, [r7, #23]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d10a      	bne.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009d64:	4b2b      	ldr	r3, [pc, #172]	; (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d68:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009d72:	4928      	ldr	r1, [pc, #160]	; (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009d74:	4313      	orrs	r3, r2
 8009d76:	658b      	str	r3, [r1, #88]	; 0x58
 8009d78:	e001      	b.n	8009d7e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d7a:	7dfb      	ldrb	r3, [r7, #23]
 8009d7c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d02f      	beq.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d92:	d00e      	beq.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009d94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d98:	d814      	bhi.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d015      	beq.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009d9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009da2:	d10f      	bne.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009da4:	4b1b      	ldr	r3, [pc, #108]	; (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da8:	4a1a      	ldr	r2, [pc, #104]	; (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009daa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009db0:	e00c      	b.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	3304      	adds	r3, #4
 8009db6:	2101      	movs	r1, #1
 8009db8:	4618      	mov	r0, r3
 8009dba:	f000 ff37 	bl	800ac2c <RCCEx_PLL2_Config>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009dc2:	e003      	b.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	75fb      	strb	r3, [r7, #23]
      break;
 8009dc8:	e000      	b.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8009dca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009dcc:	7dfb      	ldrb	r3, [r7, #23]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d109      	bne.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009dd2:	4b10      	ldr	r3, [pc, #64]	; (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dd6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dde:	490d      	ldr	r1, [pc, #52]	; (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009de0:	4313      	orrs	r3, r2
 8009de2:	650b      	str	r3, [r1, #80]	; 0x50
 8009de4:	e001      	b.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009de6:	7dfb      	ldrb	r3, [r7, #23]
 8009de8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d033      	beq.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dfa:	2b03      	cmp	r3, #3
 8009dfc:	d81c      	bhi.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009dfe:	a201      	add	r2, pc, #4	; (adr r2, 8009e04 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8009e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e04:	08009e3f 	.word	0x08009e3f
 8009e08:	08009e19 	.word	0x08009e19
 8009e0c:	08009e27 	.word	0x08009e27
 8009e10:	08009e3f 	.word	0x08009e3f
 8009e14:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e18:	4bb8      	ldr	r3, [pc, #736]	; (800a0fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e1c:	4ab7      	ldr	r2, [pc, #732]	; (800a0fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009e1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009e24:	e00c      	b.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	3304      	adds	r3, #4
 8009e2a:	2102      	movs	r1, #2
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f000 fefd 	bl	800ac2c <RCCEx_PLL2_Config>
 8009e32:	4603      	mov	r3, r0
 8009e34:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009e36:	e003      	b.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8009e3c:	e000      	b.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8009e3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e40:	7dfb      	ldrb	r3, [r7, #23]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d109      	bne.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009e46:	4bad      	ldr	r3, [pc, #692]	; (800a0fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e4a:	f023 0203 	bic.w	r2, r3, #3
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e52:	49aa      	ldr	r1, [pc, #680]	; (800a0fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009e54:	4313      	orrs	r3, r2
 8009e56:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009e58:	e001      	b.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e5a:	7dfb      	ldrb	r3, [r7, #23]
 8009e5c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	f000 8086 	beq.w	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009e6c:	4ba4      	ldr	r3, [pc, #656]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4aa3      	ldr	r2, [pc, #652]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009e78:	f7fb f998 	bl	80051ac <HAL_GetTick>
 8009e7c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e7e:	e009      	b.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e80:	f7fb f994 	bl	80051ac <HAL_GetTick>
 8009e84:	4602      	mov	r2, r0
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	1ad3      	subs	r3, r2, r3
 8009e8a:	2b64      	cmp	r3, #100	; 0x64
 8009e8c:	d902      	bls.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009e8e:	2303      	movs	r3, #3
 8009e90:	75fb      	strb	r3, [r7, #23]
        break;
 8009e92:	e005      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e94:	4b9a      	ldr	r3, [pc, #616]	; (800a100 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d0ef      	beq.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009ea0:	7dfb      	ldrb	r3, [r7, #23]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d166      	bne.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009ea6:	4b95      	ldr	r3, [pc, #596]	; (800a0fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009ea8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009eb0:	4053      	eors	r3, r2
 8009eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d013      	beq.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009eba:	4b90      	ldr	r3, [pc, #576]	; (800a0fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ebe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ec2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009ec4:	4b8d      	ldr	r3, [pc, #564]	; (800a0fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ec8:	4a8c      	ldr	r2, [pc, #560]	; (800a0fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009eca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ece:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009ed0:	4b8a      	ldr	r3, [pc, #552]	; (800a0fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ed4:	4a89      	ldr	r2, [pc, #548]	; (800a0fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009eda:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009edc:	4a87      	ldr	r2, [pc, #540]	; (800a0fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009eec:	d115      	bne.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009eee:	f7fb f95d 	bl	80051ac <HAL_GetTick>
 8009ef2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ef4:	e00b      	b.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ef6:	f7fb f959 	bl	80051ac <HAL_GetTick>
 8009efa:	4602      	mov	r2, r0
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	1ad3      	subs	r3, r2, r3
 8009f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d902      	bls.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009f08:	2303      	movs	r3, #3
 8009f0a:	75fb      	strb	r3, [r7, #23]
            break;
 8009f0c:	e005      	b.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f0e:	4b7b      	ldr	r3, [pc, #492]	; (800a0fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f12:	f003 0302 	and.w	r3, r3, #2
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d0ed      	beq.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8009f1a:	7dfb      	ldrb	r3, [r7, #23]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d126      	bne.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f2e:	d10d      	bne.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009f30:	4b72      	ldr	r3, [pc, #456]	; (800a0fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009f32:	691b      	ldr	r3, [r3, #16]
 8009f34:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009f3e:	0919      	lsrs	r1, r3, #4
 8009f40:	4b70      	ldr	r3, [pc, #448]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8009f42:	400b      	ands	r3, r1
 8009f44:	496d      	ldr	r1, [pc, #436]	; (800a0fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009f46:	4313      	orrs	r3, r2
 8009f48:	610b      	str	r3, [r1, #16]
 8009f4a:	e005      	b.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009f4c:	4b6b      	ldr	r3, [pc, #428]	; (800a0fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009f4e:	691b      	ldr	r3, [r3, #16]
 8009f50:	4a6a      	ldr	r2, [pc, #424]	; (800a0fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009f52:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009f56:	6113      	str	r3, [r2, #16]
 8009f58:	4b68      	ldr	r3, [pc, #416]	; (800a0fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009f5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f66:	4965      	ldr	r1, [pc, #404]	; (800a0fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	670b      	str	r3, [r1, #112]	; 0x70
 8009f6c:	e004      	b.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009f6e:	7dfb      	ldrb	r3, [r7, #23]
 8009f70:	75bb      	strb	r3, [r7, #22]
 8009f72:	e001      	b.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f74:	7dfb      	ldrb	r3, [r7, #23]
 8009f76:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f003 0301 	and.w	r3, r3, #1
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d07e      	beq.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f88:	2b28      	cmp	r3, #40	; 0x28
 8009f8a:	d867      	bhi.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009f8c:	a201      	add	r2, pc, #4	; (adr r2, 8009f94 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f92:	bf00      	nop
 8009f94:	0800a063 	.word	0x0800a063
 8009f98:	0800a05d 	.word	0x0800a05d
 8009f9c:	0800a05d 	.word	0x0800a05d
 8009fa0:	0800a05d 	.word	0x0800a05d
 8009fa4:	0800a05d 	.word	0x0800a05d
 8009fa8:	0800a05d 	.word	0x0800a05d
 8009fac:	0800a05d 	.word	0x0800a05d
 8009fb0:	0800a05d 	.word	0x0800a05d
 8009fb4:	0800a039 	.word	0x0800a039
 8009fb8:	0800a05d 	.word	0x0800a05d
 8009fbc:	0800a05d 	.word	0x0800a05d
 8009fc0:	0800a05d 	.word	0x0800a05d
 8009fc4:	0800a05d 	.word	0x0800a05d
 8009fc8:	0800a05d 	.word	0x0800a05d
 8009fcc:	0800a05d 	.word	0x0800a05d
 8009fd0:	0800a05d 	.word	0x0800a05d
 8009fd4:	0800a04b 	.word	0x0800a04b
 8009fd8:	0800a05d 	.word	0x0800a05d
 8009fdc:	0800a05d 	.word	0x0800a05d
 8009fe0:	0800a05d 	.word	0x0800a05d
 8009fe4:	0800a05d 	.word	0x0800a05d
 8009fe8:	0800a05d 	.word	0x0800a05d
 8009fec:	0800a05d 	.word	0x0800a05d
 8009ff0:	0800a05d 	.word	0x0800a05d
 8009ff4:	0800a063 	.word	0x0800a063
 8009ff8:	0800a05d 	.word	0x0800a05d
 8009ffc:	0800a05d 	.word	0x0800a05d
 800a000:	0800a05d 	.word	0x0800a05d
 800a004:	0800a05d 	.word	0x0800a05d
 800a008:	0800a05d 	.word	0x0800a05d
 800a00c:	0800a05d 	.word	0x0800a05d
 800a010:	0800a05d 	.word	0x0800a05d
 800a014:	0800a063 	.word	0x0800a063
 800a018:	0800a05d 	.word	0x0800a05d
 800a01c:	0800a05d 	.word	0x0800a05d
 800a020:	0800a05d 	.word	0x0800a05d
 800a024:	0800a05d 	.word	0x0800a05d
 800a028:	0800a05d 	.word	0x0800a05d
 800a02c:	0800a05d 	.word	0x0800a05d
 800a030:	0800a05d 	.word	0x0800a05d
 800a034:	0800a063 	.word	0x0800a063
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	3304      	adds	r3, #4
 800a03c:	2101      	movs	r1, #1
 800a03e:	4618      	mov	r0, r3
 800a040:	f000 fdf4 	bl	800ac2c <RCCEx_PLL2_Config>
 800a044:	4603      	mov	r3, r0
 800a046:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a048:	e00c      	b.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	3324      	adds	r3, #36	; 0x24
 800a04e:	2101      	movs	r1, #1
 800a050:	4618      	mov	r0, r3
 800a052:	f000 fe9d 	bl	800ad90 <RCCEx_PLL3_Config>
 800a056:	4603      	mov	r3, r0
 800a058:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a05a:	e003      	b.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a05c:	2301      	movs	r3, #1
 800a05e:	75fb      	strb	r3, [r7, #23]
      break;
 800a060:	e000      	b.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800a062:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a064:	7dfb      	ldrb	r3, [r7, #23]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d109      	bne.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a06a:	4b24      	ldr	r3, [pc, #144]	; (800a0fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a06c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a06e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a076:	4921      	ldr	r1, [pc, #132]	; (800a0fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a078:	4313      	orrs	r3, r2
 800a07a:	654b      	str	r3, [r1, #84]	; 0x54
 800a07c:	e001      	b.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a07e:	7dfb      	ldrb	r3, [r7, #23]
 800a080:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f003 0302 	and.w	r3, r3, #2
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d03e      	beq.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a092:	2b05      	cmp	r3, #5
 800a094:	d820      	bhi.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800a096:	a201      	add	r2, pc, #4	; (adr r2, 800a09c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800a098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a09c:	0800a0df 	.word	0x0800a0df
 800a0a0:	0800a0b5 	.word	0x0800a0b5
 800a0a4:	0800a0c7 	.word	0x0800a0c7
 800a0a8:	0800a0df 	.word	0x0800a0df
 800a0ac:	0800a0df 	.word	0x0800a0df
 800a0b0:	0800a0df 	.word	0x0800a0df
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	3304      	adds	r3, #4
 800a0b8:	2101      	movs	r1, #1
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f000 fdb6 	bl	800ac2c <RCCEx_PLL2_Config>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a0c4:	e00c      	b.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	3324      	adds	r3, #36	; 0x24
 800a0ca:	2101      	movs	r1, #1
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f000 fe5f 	bl	800ad90 <RCCEx_PLL3_Config>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a0d6:	e003      	b.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	75fb      	strb	r3, [r7, #23]
      break;
 800a0dc:	e000      	b.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800a0de:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0e0:	7dfb      	ldrb	r3, [r7, #23]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d110      	bne.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a0e6:	4b05      	ldr	r3, [pc, #20]	; (800a0fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a0e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0ea:	f023 0207 	bic.w	r2, r3, #7
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0f2:	4902      	ldr	r1, [pc, #8]	; (800a0fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	654b      	str	r3, [r1, #84]	; 0x54
 800a0f8:	e008      	b.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800a0fa:	bf00      	nop
 800a0fc:	58024400 	.word	0x58024400
 800a100:	58024800 	.word	0x58024800
 800a104:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a108:	7dfb      	ldrb	r3, [r7, #23]
 800a10a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f003 0304 	and.w	r3, r3, #4
 800a114:	2b00      	cmp	r3, #0
 800a116:	d039      	beq.n	800a18c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a11e:	2b05      	cmp	r3, #5
 800a120:	d820      	bhi.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800a122:	a201      	add	r2, pc, #4	; (adr r2, 800a128 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800a124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a128:	0800a16b 	.word	0x0800a16b
 800a12c:	0800a141 	.word	0x0800a141
 800a130:	0800a153 	.word	0x0800a153
 800a134:	0800a16b 	.word	0x0800a16b
 800a138:	0800a16b 	.word	0x0800a16b
 800a13c:	0800a16b 	.word	0x0800a16b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	3304      	adds	r3, #4
 800a144:	2101      	movs	r1, #1
 800a146:	4618      	mov	r0, r3
 800a148:	f000 fd70 	bl	800ac2c <RCCEx_PLL2_Config>
 800a14c:	4603      	mov	r3, r0
 800a14e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a150:	e00c      	b.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	3324      	adds	r3, #36	; 0x24
 800a156:	2101      	movs	r1, #1
 800a158:	4618      	mov	r0, r3
 800a15a:	f000 fe19 	bl	800ad90 <RCCEx_PLL3_Config>
 800a15e:	4603      	mov	r3, r0
 800a160:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a162:	e003      	b.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a164:	2301      	movs	r3, #1
 800a166:	75fb      	strb	r3, [r7, #23]
      break;
 800a168:	e000      	b.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800a16a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a16c:	7dfb      	ldrb	r3, [r7, #23]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d10a      	bne.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a172:	4bb7      	ldr	r3, [pc, #732]	; (800a450 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a176:	f023 0207 	bic.w	r2, r3, #7
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a180:	49b3      	ldr	r1, [pc, #716]	; (800a450 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a182:	4313      	orrs	r3, r2
 800a184:	658b      	str	r3, [r1, #88]	; 0x58
 800a186:	e001      	b.n	800a18c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a188:	7dfb      	ldrb	r3, [r7, #23]
 800a18a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f003 0320 	and.w	r3, r3, #32
 800a194:	2b00      	cmp	r3, #0
 800a196:	d04b      	beq.n	800a230 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a19e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a1a2:	d02e      	beq.n	800a202 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800a1a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a1a8:	d828      	bhi.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a1aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1ae:	d02a      	beq.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800a1b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1b4:	d822      	bhi.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a1b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a1ba:	d026      	beq.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800a1bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a1c0:	d81c      	bhi.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a1c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1c6:	d010      	beq.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800a1c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1cc:	d816      	bhi.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d01d      	beq.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800a1d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1d6:	d111      	bne.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	3304      	adds	r3, #4
 800a1dc:	2100      	movs	r1, #0
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f000 fd24 	bl	800ac2c <RCCEx_PLL2_Config>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a1e8:	e012      	b.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	3324      	adds	r3, #36	; 0x24
 800a1ee:	2102      	movs	r1, #2
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f000 fdcd 	bl	800ad90 <RCCEx_PLL3_Config>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a1fa:	e009      	b.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	75fb      	strb	r3, [r7, #23]
      break;
 800a200:	e006      	b.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a202:	bf00      	nop
 800a204:	e004      	b.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a206:	bf00      	nop
 800a208:	e002      	b.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a20a:	bf00      	nop
 800a20c:	e000      	b.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a20e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a210:	7dfb      	ldrb	r3, [r7, #23]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d10a      	bne.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a216:	4b8e      	ldr	r3, [pc, #568]	; (800a450 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a21a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a224:	498a      	ldr	r1, [pc, #552]	; (800a450 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a226:	4313      	orrs	r3, r2
 800a228:	654b      	str	r3, [r1, #84]	; 0x54
 800a22a:	e001      	b.n	800a230 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a22c:	7dfb      	ldrb	r3, [r7, #23]
 800a22e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d04b      	beq.n	800a2d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a242:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a246:	d02e      	beq.n	800a2a6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800a248:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a24c:	d828      	bhi.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a24e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a252:	d02a      	beq.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800a254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a258:	d822      	bhi.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a25a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a25e:	d026      	beq.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800a260:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a264:	d81c      	bhi.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a266:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a26a:	d010      	beq.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800a26c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a270:	d816      	bhi.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a272:	2b00      	cmp	r3, #0
 800a274:	d01d      	beq.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800a276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a27a:	d111      	bne.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	3304      	adds	r3, #4
 800a280:	2100      	movs	r1, #0
 800a282:	4618      	mov	r0, r3
 800a284:	f000 fcd2 	bl	800ac2c <RCCEx_PLL2_Config>
 800a288:	4603      	mov	r3, r0
 800a28a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a28c:	e012      	b.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	3324      	adds	r3, #36	; 0x24
 800a292:	2102      	movs	r1, #2
 800a294:	4618      	mov	r0, r3
 800a296:	f000 fd7b 	bl	800ad90 <RCCEx_PLL3_Config>
 800a29a:	4603      	mov	r3, r0
 800a29c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a29e:	e009      	b.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	75fb      	strb	r3, [r7, #23]
      break;
 800a2a4:	e006      	b.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a2a6:	bf00      	nop
 800a2a8:	e004      	b.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a2aa:	bf00      	nop
 800a2ac:	e002      	b.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a2ae:	bf00      	nop
 800a2b0:	e000      	b.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a2b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2b4:	7dfb      	ldrb	r3, [r7, #23]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d10a      	bne.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a2ba:	4b65      	ldr	r3, [pc, #404]	; (800a450 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a2bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2be:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a2c8:	4961      	ldr	r1, [pc, #388]	; (800a450 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	658b      	str	r3, [r1, #88]	; 0x58
 800a2ce:	e001      	b.n	800a2d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2d0:	7dfb      	ldrb	r3, [r7, #23]
 800a2d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d04b      	beq.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a2e6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a2ea:	d02e      	beq.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800a2ec:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a2f0:	d828      	bhi.n	800a344 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a2f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2f6:	d02a      	beq.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800a2f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2fc:	d822      	bhi.n	800a344 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a2fe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a302:	d026      	beq.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800a304:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a308:	d81c      	bhi.n	800a344 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a30a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a30e:	d010      	beq.n	800a332 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800a310:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a314:	d816      	bhi.n	800a344 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a316:	2b00      	cmp	r3, #0
 800a318:	d01d      	beq.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800a31a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a31e:	d111      	bne.n	800a344 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	3304      	adds	r3, #4
 800a324:	2100      	movs	r1, #0
 800a326:	4618      	mov	r0, r3
 800a328:	f000 fc80 	bl	800ac2c <RCCEx_PLL2_Config>
 800a32c:	4603      	mov	r3, r0
 800a32e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a330:	e012      	b.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	3324      	adds	r3, #36	; 0x24
 800a336:	2102      	movs	r1, #2
 800a338:	4618      	mov	r0, r3
 800a33a:	f000 fd29 	bl	800ad90 <RCCEx_PLL3_Config>
 800a33e:	4603      	mov	r3, r0
 800a340:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a342:	e009      	b.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a344:	2301      	movs	r3, #1
 800a346:	75fb      	strb	r3, [r7, #23]
      break;
 800a348:	e006      	b.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a34a:	bf00      	nop
 800a34c:	e004      	b.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a34e:	bf00      	nop
 800a350:	e002      	b.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a352:	bf00      	nop
 800a354:	e000      	b.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a356:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a358:	7dfb      	ldrb	r3, [r7, #23]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d10a      	bne.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a35e:	4b3c      	ldr	r3, [pc, #240]	; (800a450 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a362:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a36c:	4938      	ldr	r1, [pc, #224]	; (800a450 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a36e:	4313      	orrs	r3, r2
 800a370:	658b      	str	r3, [r1, #88]	; 0x58
 800a372:	e001      	b.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a374:	7dfb      	ldrb	r3, [r7, #23]
 800a376:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f003 0308 	and.w	r3, r3, #8
 800a380:	2b00      	cmp	r3, #0
 800a382:	d01a      	beq.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a38a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a38e:	d10a      	bne.n	800a3a6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	3324      	adds	r3, #36	; 0x24
 800a394:	2102      	movs	r1, #2
 800a396:	4618      	mov	r0, r3
 800a398:	f000 fcfa 	bl	800ad90 <RCCEx_PLL3_Config>
 800a39c:	4603      	mov	r3, r0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d001      	beq.n	800a3a6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a3a6:	4b2a      	ldr	r3, [pc, #168]	; (800a450 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a3a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3b4:	4926      	ldr	r1, [pc, #152]	; (800a450 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f003 0310 	and.w	r3, r3, #16
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d01a      	beq.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a3cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3d0:	d10a      	bne.n	800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	3324      	adds	r3, #36	; 0x24
 800a3d6:	2102      	movs	r1, #2
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f000 fcd9 	bl	800ad90 <RCCEx_PLL3_Config>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d001      	beq.n	800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a3e8:	4b19      	ldr	r3, [pc, #100]	; (800a450 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a3ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a3f6:	4916      	ldr	r1, [pc, #88]	; (800a450 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a404:	2b00      	cmp	r3, #0
 800a406:	d036      	beq.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a40e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a412:	d01f      	beq.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a414:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a418:	d817      	bhi.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d003      	beq.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800a41e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a422:	d009      	beq.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800a424:	e011      	b.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	3304      	adds	r3, #4
 800a42a:	2100      	movs	r1, #0
 800a42c:	4618      	mov	r0, r3
 800a42e:	f000 fbfd 	bl	800ac2c <RCCEx_PLL2_Config>
 800a432:	4603      	mov	r3, r0
 800a434:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a436:	e00e      	b.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	3324      	adds	r3, #36	; 0x24
 800a43c:	2102      	movs	r1, #2
 800a43e:	4618      	mov	r0, r3
 800a440:	f000 fca6 	bl	800ad90 <RCCEx_PLL3_Config>
 800a444:	4603      	mov	r3, r0
 800a446:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a448:	e005      	b.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a44a:	2301      	movs	r3, #1
 800a44c:	75fb      	strb	r3, [r7, #23]
      break;
 800a44e:	e002      	b.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800a450:	58024400 	.word	0x58024400
      break;
 800a454:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a456:	7dfb      	ldrb	r3, [r7, #23]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d10a      	bne.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a45c:	4b93      	ldr	r3, [pc, #588]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a45e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a460:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a46a:	4990      	ldr	r1, [pc, #576]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a46c:	4313      	orrs	r3, r2
 800a46e:	658b      	str	r3, [r1, #88]	; 0x58
 800a470:	e001      	b.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a472:	7dfb      	ldrb	r3, [r7, #23]
 800a474:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d033      	beq.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a488:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a48c:	d01c      	beq.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800a48e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a492:	d816      	bhi.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800a494:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a498:	d003      	beq.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800a49a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a49e:	d007      	beq.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800a4a0:	e00f      	b.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4a2:	4b82      	ldr	r3, [pc, #520]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a4a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a6:	4a81      	ldr	r2, [pc, #516]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a4a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a4ae:	e00c      	b.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	3324      	adds	r3, #36	; 0x24
 800a4b4:	2101      	movs	r1, #1
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f000 fc6a 	bl	800ad90 <RCCEx_PLL3_Config>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a4c0:	e003      	b.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	75fb      	strb	r3, [r7, #23]
      break;
 800a4c6:	e000      	b.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800a4c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a4ca:	7dfb      	ldrb	r3, [r7, #23]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d10a      	bne.n	800a4e6 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a4d0:	4b76      	ldr	r3, [pc, #472]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a4d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4de:	4973      	ldr	r1, [pc, #460]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	654b      	str	r3, [r1, #84]	; 0x54
 800a4e4:	e001      	b.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4e6:	7dfb      	ldrb	r3, [r7, #23]
 800a4e8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d029      	beq.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d003      	beq.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800a4fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a502:	d007      	beq.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800a504:	e00f      	b.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a506:	4b69      	ldr	r3, [pc, #420]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a50a:	4a68      	ldr	r2, [pc, #416]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a50c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a510:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a512:	e00b      	b.n	800a52c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	3304      	adds	r3, #4
 800a518:	2102      	movs	r1, #2
 800a51a:	4618      	mov	r0, r3
 800a51c:	f000 fb86 	bl	800ac2c <RCCEx_PLL2_Config>
 800a520:	4603      	mov	r3, r0
 800a522:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a524:	e002      	b.n	800a52c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800a526:	2301      	movs	r3, #1
 800a528:	75fb      	strb	r3, [r7, #23]
      break;
 800a52a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a52c:	7dfb      	ldrb	r3, [r7, #23]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d109      	bne.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a532:	4b5e      	ldr	r3, [pc, #376]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a536:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a53e:	495b      	ldr	r1, [pc, #364]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a540:	4313      	orrs	r3, r2
 800a542:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a544:	e001      	b.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a546:	7dfb      	ldrb	r3, [r7, #23]
 800a548:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a552:	2b00      	cmp	r3, #0
 800a554:	d00a      	beq.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	3324      	adds	r3, #36	; 0x24
 800a55a:	2102      	movs	r1, #2
 800a55c:	4618      	mov	r0, r3
 800a55e:	f000 fc17 	bl	800ad90 <RCCEx_PLL3_Config>
 800a562:	4603      	mov	r3, r0
 800a564:	2b00      	cmp	r3, #0
 800a566:	d001      	beq.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800a568:	2301      	movs	r3, #1
 800a56a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a574:	2b00      	cmp	r3, #0
 800a576:	d030      	beq.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a57c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a580:	d017      	beq.n	800a5b2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800a582:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a586:	d811      	bhi.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800a588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a58c:	d013      	beq.n	800a5b6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800a58e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a592:	d80b      	bhi.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800a594:	2b00      	cmp	r3, #0
 800a596:	d010      	beq.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800a598:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a59c:	d106      	bne.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a59e:	4b43      	ldr	r3, [pc, #268]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a5a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a2:	4a42      	ldr	r2, [pc, #264]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a5a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a5aa:	e007      	b.n	800a5bc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	75fb      	strb	r3, [r7, #23]
      break;
 800a5b0:	e004      	b.n	800a5bc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800a5b2:	bf00      	nop
 800a5b4:	e002      	b.n	800a5bc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800a5b6:	bf00      	nop
 800a5b8:	e000      	b.n	800a5bc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800a5ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a5bc:	7dfb      	ldrb	r3, [r7, #23]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d109      	bne.n	800a5d6 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a5c2:	4b3a      	ldr	r3, [pc, #232]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a5c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5ce:	4937      	ldr	r1, [pc, #220]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	654b      	str	r3, [r1, #84]	; 0x54
 800a5d4:	e001      	b.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5d6:	7dfb      	ldrb	r3, [r7, #23]
 800a5d8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d008      	beq.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a5e6:	4b31      	ldr	r3, [pc, #196]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a5e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5f2:	492e      	ldr	r1, [pc, #184]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a600:	2b00      	cmp	r3, #0
 800a602:	d009      	beq.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a604:	4b29      	ldr	r3, [pc, #164]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a606:	691b      	ldr	r3, [r3, #16]
 800a608:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a612:	4926      	ldr	r1, [pc, #152]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a614:	4313      	orrs	r3, r2
 800a616:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a620:	2b00      	cmp	r3, #0
 800a622:	d008      	beq.n	800a636 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a624:	4b21      	ldr	r3, [pc, #132]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a628:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a630:	491e      	ldr	r1, [pc, #120]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a632:	4313      	orrs	r3, r2
 800a634:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d00d      	beq.n	800a65e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a642:	4b1a      	ldr	r3, [pc, #104]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a644:	691b      	ldr	r3, [r3, #16]
 800a646:	4a19      	ldr	r2, [pc, #100]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a648:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a64c:	6113      	str	r3, [r2, #16]
 800a64e:	4b17      	ldr	r3, [pc, #92]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a650:	691a      	ldr	r2, [r3, #16]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a658:	4914      	ldr	r1, [pc, #80]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a65a:	4313      	orrs	r3, r2
 800a65c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	2b00      	cmp	r3, #0
 800a664:	da08      	bge.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a666:	4b11      	ldr	r3, [pc, #68]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a66a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a672:	490e      	ldr	r1, [pc, #56]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a674:	4313      	orrs	r3, r2
 800a676:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a680:	2b00      	cmp	r3, #0
 800a682:	d009      	beq.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a684:	4b09      	ldr	r3, [pc, #36]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a688:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a692:	4906      	ldr	r1, [pc, #24]	; (800a6ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a694:	4313      	orrs	r3, r2
 800a696:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a698:	7dbb      	ldrb	r3, [r7, #22]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d101      	bne.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	e000      	b.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800a6a2:	2301      	movs	r3, #1
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3718      	adds	r7, #24
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}
 800a6ac:	58024400 	.word	0x58024400

0800a6b0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a6b4:	f7ff f860 	bl	8009778 <HAL_RCC_GetHCLKFreq>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	4b06      	ldr	r3, [pc, #24]	; (800a6d4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a6bc:	6a1b      	ldr	r3, [r3, #32]
 800a6be:	091b      	lsrs	r3, r3, #4
 800a6c0:	f003 0307 	and.w	r3, r3, #7
 800a6c4:	4904      	ldr	r1, [pc, #16]	; (800a6d8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a6c6:	5ccb      	ldrb	r3, [r1, r3]
 800a6c8:	f003 031f 	and.w	r3, r3, #31
 800a6cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	bd80      	pop	{r7, pc}
 800a6d4:	58024400 	.word	0x58024400
 800a6d8:	08012118 	.word	0x08012118

0800a6dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b089      	sub	sp, #36	; 0x24
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a6e4:	4ba1      	ldr	r3, [pc, #644]	; (800a96c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6e8:	f003 0303 	and.w	r3, r3, #3
 800a6ec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a6ee:	4b9f      	ldr	r3, [pc, #636]	; (800a96c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6f2:	0b1b      	lsrs	r3, r3, #12
 800a6f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6f8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a6fa:	4b9c      	ldr	r3, [pc, #624]	; (800a96c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6fe:	091b      	lsrs	r3, r3, #4
 800a700:	f003 0301 	and.w	r3, r3, #1
 800a704:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a706:	4b99      	ldr	r3, [pc, #612]	; (800a96c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a70a:	08db      	lsrs	r3, r3, #3
 800a70c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a710:	693a      	ldr	r2, [r7, #16]
 800a712:	fb02 f303 	mul.w	r3, r2, r3
 800a716:	ee07 3a90 	vmov	s15, r3
 800a71a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a71e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	2b00      	cmp	r3, #0
 800a726:	f000 8111 	beq.w	800a94c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a72a:	69bb      	ldr	r3, [r7, #24]
 800a72c:	2b02      	cmp	r3, #2
 800a72e:	f000 8083 	beq.w	800a838 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a732:	69bb      	ldr	r3, [r7, #24]
 800a734:	2b02      	cmp	r3, #2
 800a736:	f200 80a1 	bhi.w	800a87c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a73a:	69bb      	ldr	r3, [r7, #24]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d003      	beq.n	800a748 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a740:	69bb      	ldr	r3, [r7, #24]
 800a742:	2b01      	cmp	r3, #1
 800a744:	d056      	beq.n	800a7f4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a746:	e099      	b.n	800a87c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a748:	4b88      	ldr	r3, [pc, #544]	; (800a96c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f003 0320 	and.w	r3, r3, #32
 800a750:	2b00      	cmp	r3, #0
 800a752:	d02d      	beq.n	800a7b0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a754:	4b85      	ldr	r3, [pc, #532]	; (800a96c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	08db      	lsrs	r3, r3, #3
 800a75a:	f003 0303 	and.w	r3, r3, #3
 800a75e:	4a84      	ldr	r2, [pc, #528]	; (800a970 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a760:	fa22 f303 	lsr.w	r3, r2, r3
 800a764:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	ee07 3a90 	vmov	s15, r3
 800a76c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	ee07 3a90 	vmov	s15, r3
 800a776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a77a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a77e:	4b7b      	ldr	r3, [pc, #492]	; (800a96c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a786:	ee07 3a90 	vmov	s15, r3
 800a78a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a78e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a792:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a974 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a79a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a79e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7aa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a7ae:	e087      	b.n	800a8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	ee07 3a90 	vmov	s15, r3
 800a7b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7ba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a978 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a7be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7c2:	4b6a      	ldr	r3, [pc, #424]	; (800a96c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7ca:	ee07 3a90 	vmov	s15, r3
 800a7ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7d6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a974 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a7da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a7f2:	e065      	b.n	800a8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	ee07 3a90 	vmov	s15, r3
 800a7fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7fe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a97c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a806:	4b59      	ldr	r3, [pc, #356]	; (800a96c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a80a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a80e:	ee07 3a90 	vmov	s15, r3
 800a812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a816:	ed97 6a03 	vldr	s12, [r7, #12]
 800a81a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a974 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a81e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a826:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a82a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a82e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a832:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a836:	e043      	b.n	800a8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	ee07 3a90 	vmov	s15, r3
 800a83e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a842:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a980 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a84a:	4b48      	ldr	r3, [pc, #288]	; (800a96c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a84e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a852:	ee07 3a90 	vmov	s15, r3
 800a856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a85a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a85e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a974 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a86a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a86e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a872:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a876:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a87a:	e021      	b.n	800a8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	ee07 3a90 	vmov	s15, r3
 800a882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a886:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a97c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a88a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a88e:	4b37      	ldr	r3, [pc, #220]	; (800a96c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a896:	ee07 3a90 	vmov	s15, r3
 800a89a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a89e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8a2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a974 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a8a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a8be:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a8c0:	4b2a      	ldr	r3, [pc, #168]	; (800a96c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8c4:	0a5b      	lsrs	r3, r3, #9
 800a8c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8ca:	ee07 3a90 	vmov	s15, r3
 800a8ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a8da:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8e6:	ee17 2a90 	vmov	r2, s15
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a8ee:	4b1f      	ldr	r3, [pc, #124]	; (800a96c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8f2:	0c1b      	lsrs	r3, r3, #16
 800a8f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8f8:	ee07 3a90 	vmov	s15, r3
 800a8fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a900:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a904:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a908:	edd7 6a07 	vldr	s13, [r7, #28]
 800a90c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a910:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a914:	ee17 2a90 	vmov	r2, s15
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a91c:	4b13      	ldr	r3, [pc, #76]	; (800a96c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a91e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a920:	0e1b      	lsrs	r3, r3, #24
 800a922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a926:	ee07 3a90 	vmov	s15, r3
 800a92a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a92e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a932:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a936:	edd7 6a07 	vldr	s13, [r7, #28]
 800a93a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a93e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a942:	ee17 2a90 	vmov	r2, s15
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a94a:	e008      	b.n	800a95e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2200      	movs	r2, #0
 800a950:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2200      	movs	r2, #0
 800a95c:	609a      	str	r2, [r3, #8]
}
 800a95e:	bf00      	nop
 800a960:	3724      	adds	r7, #36	; 0x24
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr
 800a96a:	bf00      	nop
 800a96c:	58024400 	.word	0x58024400
 800a970:	03d09000 	.word	0x03d09000
 800a974:	46000000 	.word	0x46000000
 800a978:	4c742400 	.word	0x4c742400
 800a97c:	4a742400 	.word	0x4a742400
 800a980:	4c371b00 	.word	0x4c371b00

0800a984 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a984:	b480      	push	{r7}
 800a986:	b089      	sub	sp, #36	; 0x24
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a98c:	4ba1      	ldr	r3, [pc, #644]	; (800ac14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a98e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a990:	f003 0303 	and.w	r3, r3, #3
 800a994:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a996:	4b9f      	ldr	r3, [pc, #636]	; (800ac14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a99a:	0d1b      	lsrs	r3, r3, #20
 800a99c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9a0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a9a2:	4b9c      	ldr	r3, [pc, #624]	; (800ac14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9a6:	0a1b      	lsrs	r3, r3, #8
 800a9a8:	f003 0301 	and.w	r3, r3, #1
 800a9ac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a9ae:	4b99      	ldr	r3, [pc, #612]	; (800ac14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9b2:	08db      	lsrs	r3, r3, #3
 800a9b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a9b8:	693a      	ldr	r2, [r7, #16]
 800a9ba:	fb02 f303 	mul.w	r3, r2, r3
 800a9be:	ee07 3a90 	vmov	s15, r3
 800a9c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	f000 8111 	beq.w	800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a9d2:	69bb      	ldr	r3, [r7, #24]
 800a9d4:	2b02      	cmp	r3, #2
 800a9d6:	f000 8083 	beq.w	800aae0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a9da:	69bb      	ldr	r3, [r7, #24]
 800a9dc:	2b02      	cmp	r3, #2
 800a9de:	f200 80a1 	bhi.w	800ab24 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a9e2:	69bb      	ldr	r3, [r7, #24]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d003      	beq.n	800a9f0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a9e8:	69bb      	ldr	r3, [r7, #24]
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d056      	beq.n	800aa9c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a9ee:	e099      	b.n	800ab24 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9f0:	4b88      	ldr	r3, [pc, #544]	; (800ac14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f003 0320 	and.w	r3, r3, #32
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d02d      	beq.n	800aa58 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a9fc:	4b85      	ldr	r3, [pc, #532]	; (800ac14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	08db      	lsrs	r3, r3, #3
 800aa02:	f003 0303 	and.w	r3, r3, #3
 800aa06:	4a84      	ldr	r2, [pc, #528]	; (800ac18 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800aa08:	fa22 f303 	lsr.w	r3, r2, r3
 800aa0c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	ee07 3a90 	vmov	s15, r3
 800aa14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	ee07 3a90 	vmov	s15, r3
 800aa1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa26:	4b7b      	ldr	r3, [pc, #492]	; (800ac14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa2e:	ee07 3a90 	vmov	s15, r3
 800aa32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa36:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa3a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ac1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa52:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800aa56:	e087      	b.n	800ab68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	ee07 3a90 	vmov	s15, r3
 800aa5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa62:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ac20 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800aa66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa6a:	4b6a      	ldr	r3, [pc, #424]	; (800ac14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa72:	ee07 3a90 	vmov	s15, r3
 800aa76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa7e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ac1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa9a:	e065      	b.n	800ab68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	ee07 3a90 	vmov	s15, r3
 800aaa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaa6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ac24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aaaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaae:	4b59      	ldr	r3, [pc, #356]	; (800ac14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aab6:	ee07 3a90 	vmov	s15, r3
 800aaba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aabe:	ed97 6a03 	vldr	s12, [r7, #12]
 800aac2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ac1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aaca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aada:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aade:	e043      	b.n	800ab68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	ee07 3a90 	vmov	s15, r3
 800aae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ac28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800aaee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaf2:	4b48      	ldr	r3, [pc, #288]	; (800ac14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aaf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aafa:	ee07 3a90 	vmov	s15, r3
 800aafe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab02:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab06:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ac1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ab0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab22:	e021      	b.n	800ab68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	ee07 3a90 	vmov	s15, r3
 800ab2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab2e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ac24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ab32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab36:	4b37      	ldr	r3, [pc, #220]	; (800ac14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab3e:	ee07 3a90 	vmov	s15, r3
 800ab42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab46:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab4a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ac1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ab4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab66:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800ab68:	4b2a      	ldr	r3, [pc, #168]	; (800ac14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab6c:	0a5b      	lsrs	r3, r3, #9
 800ab6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab72:	ee07 3a90 	vmov	s15, r3
 800ab76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab82:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab8e:	ee17 2a90 	vmov	r2, s15
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800ab96:	4b1f      	ldr	r3, [pc, #124]	; (800ac14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab9a:	0c1b      	lsrs	r3, r3, #16
 800ab9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aba0:	ee07 3a90 	vmov	s15, r3
 800aba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aba8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abb0:	edd7 6a07 	vldr	s13, [r7, #28]
 800abb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abbc:	ee17 2a90 	vmov	r2, s15
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800abc4:	4b13      	ldr	r3, [pc, #76]	; (800ac14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abc8:	0e1b      	lsrs	r3, r3, #24
 800abca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abce:	ee07 3a90 	vmov	s15, r3
 800abd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abda:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abde:	edd7 6a07 	vldr	s13, [r7, #28]
 800abe2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abe6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abea:	ee17 2a90 	vmov	r2, s15
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800abf2:	e008      	b.n	800ac06 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2200      	movs	r2, #0
 800abf8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2200      	movs	r2, #0
 800abfe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2200      	movs	r2, #0
 800ac04:	609a      	str	r2, [r3, #8]
}
 800ac06:	bf00      	nop
 800ac08:	3724      	adds	r7, #36	; 0x24
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac10:	4770      	bx	lr
 800ac12:	bf00      	nop
 800ac14:	58024400 	.word	0x58024400
 800ac18:	03d09000 	.word	0x03d09000
 800ac1c:	46000000 	.word	0x46000000
 800ac20:	4c742400 	.word	0x4c742400
 800ac24:	4a742400 	.word	0x4a742400
 800ac28:	4c371b00 	.word	0x4c371b00

0800ac2c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ac36:	2300      	movs	r3, #0
 800ac38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ac3a:	4b53      	ldr	r3, [pc, #332]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ac3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac3e:	f003 0303 	and.w	r3, r3, #3
 800ac42:	2b03      	cmp	r3, #3
 800ac44:	d101      	bne.n	800ac4a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ac46:	2301      	movs	r3, #1
 800ac48:	e099      	b.n	800ad7e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ac4a:	4b4f      	ldr	r3, [pc, #316]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4a4e      	ldr	r2, [pc, #312]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ac50:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ac54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac56:	f7fa faa9 	bl	80051ac <HAL_GetTick>
 800ac5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ac5c:	e008      	b.n	800ac70 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ac5e:	f7fa faa5 	bl	80051ac <HAL_GetTick>
 800ac62:	4602      	mov	r2, r0
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	1ad3      	subs	r3, r2, r3
 800ac68:	2b02      	cmp	r3, #2
 800ac6a:	d901      	bls.n	800ac70 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ac6c:	2303      	movs	r3, #3
 800ac6e:	e086      	b.n	800ad7e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ac70:	4b45      	ldr	r3, [pc, #276]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d1f0      	bne.n	800ac5e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ac7c:	4b42      	ldr	r3, [pc, #264]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ac7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac80:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	031b      	lsls	r3, r3, #12
 800ac8a:	493f      	ldr	r1, [pc, #252]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	628b      	str	r3, [r1, #40]	; 0x28
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	3b01      	subs	r3, #1
 800ac96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	689b      	ldr	r3, [r3, #8]
 800ac9e:	3b01      	subs	r3, #1
 800aca0:	025b      	lsls	r3, r3, #9
 800aca2:	b29b      	uxth	r3, r3
 800aca4:	431a      	orrs	r2, r3
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	68db      	ldr	r3, [r3, #12]
 800acaa:	3b01      	subs	r3, #1
 800acac:	041b      	lsls	r3, r3, #16
 800acae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800acb2:	431a      	orrs	r2, r3
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	691b      	ldr	r3, [r3, #16]
 800acb8:	3b01      	subs	r3, #1
 800acba:	061b      	lsls	r3, r3, #24
 800acbc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800acc0:	4931      	ldr	r1, [pc, #196]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800acc2:	4313      	orrs	r3, r2
 800acc4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800acc6:	4b30      	ldr	r3, [pc, #192]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800acc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	695b      	ldr	r3, [r3, #20]
 800acd2:	492d      	ldr	r1, [pc, #180]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800acd4:	4313      	orrs	r3, r2
 800acd6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800acd8:	4b2b      	ldr	r3, [pc, #172]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800acda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acdc:	f023 0220 	bic.w	r2, r3, #32
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	699b      	ldr	r3, [r3, #24]
 800ace4:	4928      	ldr	r1, [pc, #160]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ace6:	4313      	orrs	r3, r2
 800ace8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800acea:	4b27      	ldr	r3, [pc, #156]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800acec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acee:	4a26      	ldr	r2, [pc, #152]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800acf0:	f023 0310 	bic.w	r3, r3, #16
 800acf4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800acf6:	4b24      	ldr	r3, [pc, #144]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800acf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800acfa:	4b24      	ldr	r3, [pc, #144]	; (800ad8c <RCCEx_PLL2_Config+0x160>)
 800acfc:	4013      	ands	r3, r2
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	69d2      	ldr	r2, [r2, #28]
 800ad02:	00d2      	lsls	r2, r2, #3
 800ad04:	4920      	ldr	r1, [pc, #128]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ad06:	4313      	orrs	r3, r2
 800ad08:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ad0a:	4b1f      	ldr	r3, [pc, #124]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ad0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad0e:	4a1e      	ldr	r2, [pc, #120]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ad10:	f043 0310 	orr.w	r3, r3, #16
 800ad14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d106      	bne.n	800ad2a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ad1c:	4b1a      	ldr	r3, [pc, #104]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ad1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad20:	4a19      	ldr	r2, [pc, #100]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ad22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad26:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ad28:	e00f      	b.n	800ad4a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	d106      	bne.n	800ad3e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ad30:	4b15      	ldr	r3, [pc, #84]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ad32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad34:	4a14      	ldr	r2, [pc, #80]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ad36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ad3c:	e005      	b.n	800ad4a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ad3e:	4b12      	ldr	r3, [pc, #72]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ad40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad42:	4a11      	ldr	r2, [pc, #68]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ad44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ad48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ad4a:	4b0f      	ldr	r3, [pc, #60]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4a0e      	ldr	r2, [pc, #56]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ad50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ad54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad56:	f7fa fa29 	bl	80051ac <HAL_GetTick>
 800ad5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ad5c:	e008      	b.n	800ad70 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ad5e:	f7fa fa25 	bl	80051ac <HAL_GetTick>
 800ad62:	4602      	mov	r2, r0
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	1ad3      	subs	r3, r2, r3
 800ad68:	2b02      	cmp	r3, #2
 800ad6a:	d901      	bls.n	800ad70 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ad6c:	2303      	movs	r3, #3
 800ad6e:	e006      	b.n	800ad7e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ad70:	4b05      	ldr	r3, [pc, #20]	; (800ad88 <RCCEx_PLL2_Config+0x15c>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d0f0      	beq.n	800ad5e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ad7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop
 800ad88:	58024400 	.word	0x58024400
 800ad8c:	ffff0007 	.word	0xffff0007

0800ad90 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b084      	sub	sp, #16
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ad9e:	4b53      	ldr	r3, [pc, #332]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800ada0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ada2:	f003 0303 	and.w	r3, r3, #3
 800ada6:	2b03      	cmp	r3, #3
 800ada8:	d101      	bne.n	800adae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800adaa:	2301      	movs	r3, #1
 800adac:	e099      	b.n	800aee2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800adae:	4b4f      	ldr	r3, [pc, #316]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4a4e      	ldr	r2, [pc, #312]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800adb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800adb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800adba:	f7fa f9f7 	bl	80051ac <HAL_GetTick>
 800adbe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800adc0:	e008      	b.n	800add4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800adc2:	f7fa f9f3 	bl	80051ac <HAL_GetTick>
 800adc6:	4602      	mov	r2, r0
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	1ad3      	subs	r3, r2, r3
 800adcc:	2b02      	cmp	r3, #2
 800adce:	d901      	bls.n	800add4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800add0:	2303      	movs	r3, #3
 800add2:	e086      	b.n	800aee2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800add4:	4b45      	ldr	r3, [pc, #276]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800addc:	2b00      	cmp	r3, #0
 800adde:	d1f0      	bne.n	800adc2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ade0:	4b42      	ldr	r3, [pc, #264]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800ade2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ade4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	051b      	lsls	r3, r3, #20
 800adee:	493f      	ldr	r1, [pc, #252]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800adf0:	4313      	orrs	r3, r2
 800adf2:	628b      	str	r3, [r1, #40]	; 0x28
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	3b01      	subs	r3, #1
 800adfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	689b      	ldr	r3, [r3, #8]
 800ae02:	3b01      	subs	r3, #1
 800ae04:	025b      	lsls	r3, r3, #9
 800ae06:	b29b      	uxth	r3, r3
 800ae08:	431a      	orrs	r2, r3
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	68db      	ldr	r3, [r3, #12]
 800ae0e:	3b01      	subs	r3, #1
 800ae10:	041b      	lsls	r3, r3, #16
 800ae12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ae16:	431a      	orrs	r2, r3
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	691b      	ldr	r3, [r3, #16]
 800ae1c:	3b01      	subs	r3, #1
 800ae1e:	061b      	lsls	r3, r3, #24
 800ae20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ae24:	4931      	ldr	r1, [pc, #196]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800ae26:	4313      	orrs	r3, r2
 800ae28:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ae2a:	4b30      	ldr	r3, [pc, #192]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800ae2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	695b      	ldr	r3, [r3, #20]
 800ae36:	492d      	ldr	r1, [pc, #180]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ae3c:	4b2b      	ldr	r3, [pc, #172]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800ae3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae40:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	699b      	ldr	r3, [r3, #24]
 800ae48:	4928      	ldr	r1, [pc, #160]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ae4e:	4b27      	ldr	r3, [pc, #156]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800ae50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae52:	4a26      	ldr	r2, [pc, #152]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800ae54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ae5a:	4b24      	ldr	r3, [pc, #144]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800ae5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae5e:	4b24      	ldr	r3, [pc, #144]	; (800aef0 <RCCEx_PLL3_Config+0x160>)
 800ae60:	4013      	ands	r3, r2
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	69d2      	ldr	r2, [r2, #28]
 800ae66:	00d2      	lsls	r2, r2, #3
 800ae68:	4920      	ldr	r1, [pc, #128]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ae6e:	4b1f      	ldr	r3, [pc, #124]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800ae70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae72:	4a1e      	ldr	r2, [pc, #120]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800ae74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d106      	bne.n	800ae8e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ae80:	4b1a      	ldr	r3, [pc, #104]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800ae82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae84:	4a19      	ldr	r2, [pc, #100]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800ae86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ae8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ae8c:	e00f      	b.n	800aeae <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d106      	bne.n	800aea2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ae94:	4b15      	ldr	r3, [pc, #84]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800ae96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae98:	4a14      	ldr	r2, [pc, #80]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800ae9a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ae9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aea0:	e005      	b.n	800aeae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800aea2:	4b12      	ldr	r3, [pc, #72]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800aea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea6:	4a11      	ldr	r2, [pc, #68]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800aea8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aeac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800aeae:	4b0f      	ldr	r3, [pc, #60]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4a0e      	ldr	r2, [pc, #56]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800aeb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aeb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aeba:	f7fa f977 	bl	80051ac <HAL_GetTick>
 800aebe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800aec0:	e008      	b.n	800aed4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800aec2:	f7fa f973 	bl	80051ac <HAL_GetTick>
 800aec6:	4602      	mov	r2, r0
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	1ad3      	subs	r3, r2, r3
 800aecc:	2b02      	cmp	r3, #2
 800aece:	d901      	bls.n	800aed4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800aed0:	2303      	movs	r3, #3
 800aed2:	e006      	b.n	800aee2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800aed4:	4b05      	ldr	r3, [pc, #20]	; (800aeec <RCCEx_PLL3_Config+0x15c>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d0f0      	beq.n	800aec2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800aee0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3710      	adds	r7, #16
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop
 800aeec:	58024400 	.word	0x58024400
 800aef0:	ffff0007 	.word	0xffff0007

0800aef4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d101      	bne.n	800af06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800af02:	2301      	movs	r3, #1
 800af04:	e0f1      	b.n	800b0ea <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2200      	movs	r2, #0
 800af0a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	4a78      	ldr	r2, [pc, #480]	; (800b0f4 <HAL_SPI_Init+0x200>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d00f      	beq.n	800af36 <HAL_SPI_Init+0x42>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4a77      	ldr	r2, [pc, #476]	; (800b0f8 <HAL_SPI_Init+0x204>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d00a      	beq.n	800af36 <HAL_SPI_Init+0x42>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4a75      	ldr	r2, [pc, #468]	; (800b0fc <HAL_SPI_Init+0x208>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d005      	beq.n	800af36 <HAL_SPI_Init+0x42>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	68db      	ldr	r3, [r3, #12]
 800af2e:	2b0f      	cmp	r3, #15
 800af30:	d901      	bls.n	800af36 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800af32:	2301      	movs	r3, #1
 800af34:	e0d9      	b.n	800b0ea <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f000 f8e2 	bl	800b100 <SPI_GetPacketSize>
 800af3c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	4a6c      	ldr	r2, [pc, #432]	; (800b0f4 <HAL_SPI_Init+0x200>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d00c      	beq.n	800af62 <HAL_SPI_Init+0x6e>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a6a      	ldr	r2, [pc, #424]	; (800b0f8 <HAL_SPI_Init+0x204>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d007      	beq.n	800af62 <HAL_SPI_Init+0x6e>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	4a69      	ldr	r2, [pc, #420]	; (800b0fc <HAL_SPI_Init+0x208>)
 800af58:	4293      	cmp	r3, r2
 800af5a:	d002      	beq.n	800af62 <HAL_SPI_Init+0x6e>
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2b08      	cmp	r3, #8
 800af60:	d811      	bhi.n	800af86 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800af66:	4a63      	ldr	r2, [pc, #396]	; (800b0f4 <HAL_SPI_Init+0x200>)
 800af68:	4293      	cmp	r3, r2
 800af6a:	d009      	beq.n	800af80 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4a61      	ldr	r2, [pc, #388]	; (800b0f8 <HAL_SPI_Init+0x204>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d004      	beq.n	800af80 <HAL_SPI_Init+0x8c>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4a60      	ldr	r2, [pc, #384]	; (800b0fc <HAL_SPI_Init+0x208>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d104      	bne.n	800af8a <HAL_SPI_Init+0x96>
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2b10      	cmp	r3, #16
 800af84:	d901      	bls.n	800af8a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800af86:	2301      	movs	r3, #1
 800af88:	e0af      	b.n	800b0ea <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800af90:	b2db      	uxtb	r3, r3
 800af92:	2b00      	cmp	r3, #0
 800af94:	d106      	bne.n	800afa4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2200      	movs	r2, #0
 800af9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f7f8 fc82 	bl	80038a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2202      	movs	r2, #2
 800afa8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	681a      	ldr	r2, [r3, #0]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f022 0201 	bic.w	r2, r2, #1
 800afba:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	689b      	ldr	r3, [r3, #8]
 800afc2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800afc6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	699b      	ldr	r3, [r3, #24]
 800afcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800afd0:	d119      	bne.n	800b006 <HAL_SPI_Init+0x112>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800afda:	d103      	bne.n	800afe4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d008      	beq.n	800aff6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d10c      	bne.n	800b006 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800aff0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aff4:	d107      	bne.n	800b006 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	681a      	ldr	r2, [r3, #0]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b004:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	69da      	ldr	r2, [r3, #28]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b00e:	431a      	orrs	r2, r3
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	431a      	orrs	r2, r3
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b018:	ea42 0103 	orr.w	r1, r2, r3
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	68da      	ldr	r2, [r3, #12]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	430a      	orrs	r2, r1
 800b026:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b030:	431a      	orrs	r2, r3
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b036:	431a      	orrs	r2, r3
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	699b      	ldr	r3, [r3, #24]
 800b03c:	431a      	orrs	r2, r3
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	691b      	ldr	r3, [r3, #16]
 800b042:	431a      	orrs	r2, r3
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	695b      	ldr	r3, [r3, #20]
 800b048:	431a      	orrs	r2, r3
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6a1b      	ldr	r3, [r3, #32]
 800b04e:	431a      	orrs	r2, r3
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	431a      	orrs	r2, r3
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b05a:	431a      	orrs	r2, r3
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	689b      	ldr	r3, [r3, #8]
 800b060:	431a      	orrs	r2, r3
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b066:	ea42 0103 	orr.w	r1, r2, r3
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	430a      	orrs	r2, r1
 800b074:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	685b      	ldr	r3, [r3, #4]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d113      	bne.n	800b0a6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	689b      	ldr	r3, [r3, #8]
 800b084:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b090:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	689b      	ldr	r3, [r3, #8]
 800b098:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b0a4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f022 0201 	bic.w	r2, r2, #1
 800b0b4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d00a      	beq.n	800b0d8 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	68db      	ldr	r3, [r3, #12]
 800b0c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	430a      	orrs	r2, r1
 800b0d6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b0e8:	2300      	movs	r3, #0
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3710      	adds	r7, #16
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop
 800b0f4:	40013000 	.word	0x40013000
 800b0f8:	40003800 	.word	0x40003800
 800b0fc:	40003c00 	.word	0x40003c00

0800b100 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b100:	b480      	push	{r7}
 800b102:	b085      	sub	sp, #20
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b10c:	095b      	lsrs	r3, r3, #5
 800b10e:	3301      	adds	r3, #1
 800b110:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	68db      	ldr	r3, [r3, #12]
 800b116:	3301      	adds	r3, #1
 800b118:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	3307      	adds	r3, #7
 800b11e:	08db      	lsrs	r3, r3, #3
 800b120:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	68fa      	ldr	r2, [r7, #12]
 800b126:	fb02 f303 	mul.w	r3, r2, r3
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3714      	adds	r7, #20
 800b12e:	46bd      	mov	sp, r7
 800b130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b134:	4770      	bx	lr

0800b136 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b136:	b580      	push	{r7, lr}
 800b138:	b082      	sub	sp, #8
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d101      	bne.n	800b148 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b144:	2301      	movs	r3, #1
 800b146:	e049      	b.n	800b1dc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b14e:	b2db      	uxtb	r3, r3
 800b150:	2b00      	cmp	r3, #0
 800b152:	d106      	bne.n	800b162 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2200      	movs	r2, #0
 800b158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f7f9 fa41 	bl	80045e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2202      	movs	r2, #2
 800b166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681a      	ldr	r2, [r3, #0]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	3304      	adds	r3, #4
 800b172:	4619      	mov	r1, r3
 800b174:	4610      	mov	r0, r2
 800b176:	f000 fd71 	bl	800bc5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2201      	movs	r2, #1
 800b17e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2201      	movs	r2, #1
 800b186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2201      	movs	r2, #1
 800b18e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2201      	movs	r2, #1
 800b196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2201      	movs	r2, #1
 800b19e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2201      	movs	r2, #1
 800b1b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2201      	movs	r2, #1
 800b1be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2201      	movs	r2, #1
 800b1ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2201      	movs	r2, #1
 800b1d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b1da:	2300      	movs	r3, #0
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3708      	adds	r7, #8
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b085      	sub	sp, #20
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1f2:	b2db      	uxtb	r3, r3
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	d001      	beq.n	800b1fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	e054      	b.n	800b2a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2202      	movs	r2, #2
 800b200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	68da      	ldr	r2, [r3, #12]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f042 0201 	orr.w	r2, r2, #1
 800b212:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4a26      	ldr	r2, [pc, #152]	; (800b2b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d022      	beq.n	800b264 <HAL_TIM_Base_Start_IT+0x80>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b226:	d01d      	beq.n	800b264 <HAL_TIM_Base_Start_IT+0x80>
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	4a22      	ldr	r2, [pc, #136]	; (800b2b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d018      	beq.n	800b264 <HAL_TIM_Base_Start_IT+0x80>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4a21      	ldr	r2, [pc, #132]	; (800b2bc <HAL_TIM_Base_Start_IT+0xd8>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d013      	beq.n	800b264 <HAL_TIM_Base_Start_IT+0x80>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a1f      	ldr	r2, [pc, #124]	; (800b2c0 <HAL_TIM_Base_Start_IT+0xdc>)
 800b242:	4293      	cmp	r3, r2
 800b244:	d00e      	beq.n	800b264 <HAL_TIM_Base_Start_IT+0x80>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4a1e      	ldr	r2, [pc, #120]	; (800b2c4 <HAL_TIM_Base_Start_IT+0xe0>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d009      	beq.n	800b264 <HAL_TIM_Base_Start_IT+0x80>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4a1c      	ldr	r2, [pc, #112]	; (800b2c8 <HAL_TIM_Base_Start_IT+0xe4>)
 800b256:	4293      	cmp	r3, r2
 800b258:	d004      	beq.n	800b264 <HAL_TIM_Base_Start_IT+0x80>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	4a1b      	ldr	r2, [pc, #108]	; (800b2cc <HAL_TIM_Base_Start_IT+0xe8>)
 800b260:	4293      	cmp	r3, r2
 800b262:	d115      	bne.n	800b290 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	689a      	ldr	r2, [r3, #8]
 800b26a:	4b19      	ldr	r3, [pc, #100]	; (800b2d0 <HAL_TIM_Base_Start_IT+0xec>)
 800b26c:	4013      	ands	r3, r2
 800b26e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	2b06      	cmp	r3, #6
 800b274:	d015      	beq.n	800b2a2 <HAL_TIM_Base_Start_IT+0xbe>
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b27c:	d011      	beq.n	800b2a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	681a      	ldr	r2, [r3, #0]
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f042 0201 	orr.w	r2, r2, #1
 800b28c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b28e:	e008      	b.n	800b2a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	681a      	ldr	r2, [r3, #0]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f042 0201 	orr.w	r2, r2, #1
 800b29e:	601a      	str	r2, [r3, #0]
 800b2a0:	e000      	b.n	800b2a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b2a4:	2300      	movs	r3, #0
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3714      	adds	r7, #20
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	4770      	bx	lr
 800b2b2:	bf00      	nop
 800b2b4:	40010000 	.word	0x40010000
 800b2b8:	40000400 	.word	0x40000400
 800b2bc:	40000800 	.word	0x40000800
 800b2c0:	40000c00 	.word	0x40000c00
 800b2c4:	40010400 	.word	0x40010400
 800b2c8:	40001800 	.word	0x40001800
 800b2cc:	40014000 	.word	0x40014000
 800b2d0:	00010007 	.word	0x00010007

0800b2d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b082      	sub	sp, #8
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d101      	bne.n	800b2e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	e049      	b.n	800b37a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2ec:	b2db      	uxtb	r3, r3
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d106      	bne.n	800b300 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f000 f841 	bl	800b382 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2202      	movs	r2, #2
 800b304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681a      	ldr	r2, [r3, #0]
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	3304      	adds	r3, #4
 800b310:	4619      	mov	r1, r3
 800b312:	4610      	mov	r0, r2
 800b314:	f000 fca2 	bl	800bc5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2201      	movs	r2, #1
 800b31c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2201      	movs	r2, #1
 800b324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2201      	movs	r2, #1
 800b32c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2201      	movs	r2, #1
 800b334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2201      	movs	r2, #1
 800b33c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2201      	movs	r2, #1
 800b344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2201      	movs	r2, #1
 800b34c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2201      	movs	r2, #1
 800b354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2201      	movs	r2, #1
 800b35c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2201      	movs	r2, #1
 800b364:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2201      	movs	r2, #1
 800b36c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2201      	movs	r2, #1
 800b374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b378:	2300      	movs	r3, #0
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3708      	adds	r7, #8
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}

0800b382 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b382:	b480      	push	{r7}
 800b384:	b083      	sub	sp, #12
 800b386:	af00      	add	r7, sp, #0
 800b388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b38a:	bf00      	nop
 800b38c:	370c      	adds	r7, #12
 800b38e:	46bd      	mov	sp, r7
 800b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b394:	4770      	bx	lr
	...

0800b398 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b084      	sub	sp, #16
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d109      	bne.n	800b3bc <HAL_TIM_PWM_Start+0x24>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b3ae:	b2db      	uxtb	r3, r3
 800b3b0:	2b01      	cmp	r3, #1
 800b3b2:	bf14      	ite	ne
 800b3b4:	2301      	movne	r3, #1
 800b3b6:	2300      	moveq	r3, #0
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	e03c      	b.n	800b436 <HAL_TIM_PWM_Start+0x9e>
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	2b04      	cmp	r3, #4
 800b3c0:	d109      	bne.n	800b3d6 <HAL_TIM_PWM_Start+0x3e>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b3c8:	b2db      	uxtb	r3, r3
 800b3ca:	2b01      	cmp	r3, #1
 800b3cc:	bf14      	ite	ne
 800b3ce:	2301      	movne	r3, #1
 800b3d0:	2300      	moveq	r3, #0
 800b3d2:	b2db      	uxtb	r3, r3
 800b3d4:	e02f      	b.n	800b436 <HAL_TIM_PWM_Start+0x9e>
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	2b08      	cmp	r3, #8
 800b3da:	d109      	bne.n	800b3f0 <HAL_TIM_PWM_Start+0x58>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b3e2:	b2db      	uxtb	r3, r3
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	bf14      	ite	ne
 800b3e8:	2301      	movne	r3, #1
 800b3ea:	2300      	moveq	r3, #0
 800b3ec:	b2db      	uxtb	r3, r3
 800b3ee:	e022      	b.n	800b436 <HAL_TIM_PWM_Start+0x9e>
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	2b0c      	cmp	r3, #12
 800b3f4:	d109      	bne.n	800b40a <HAL_TIM_PWM_Start+0x72>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3fc:	b2db      	uxtb	r3, r3
 800b3fe:	2b01      	cmp	r3, #1
 800b400:	bf14      	ite	ne
 800b402:	2301      	movne	r3, #1
 800b404:	2300      	moveq	r3, #0
 800b406:	b2db      	uxtb	r3, r3
 800b408:	e015      	b.n	800b436 <HAL_TIM_PWM_Start+0x9e>
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	2b10      	cmp	r3, #16
 800b40e:	d109      	bne.n	800b424 <HAL_TIM_PWM_Start+0x8c>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b416:	b2db      	uxtb	r3, r3
 800b418:	2b01      	cmp	r3, #1
 800b41a:	bf14      	ite	ne
 800b41c:	2301      	movne	r3, #1
 800b41e:	2300      	moveq	r3, #0
 800b420:	b2db      	uxtb	r3, r3
 800b422:	e008      	b.n	800b436 <HAL_TIM_PWM_Start+0x9e>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b42a:	b2db      	uxtb	r3, r3
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	bf14      	ite	ne
 800b430:	2301      	movne	r3, #1
 800b432:	2300      	moveq	r3, #0
 800b434:	b2db      	uxtb	r3, r3
 800b436:	2b00      	cmp	r3, #0
 800b438:	d001      	beq.n	800b43e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b43a:	2301      	movs	r3, #1
 800b43c:	e0a1      	b.n	800b582 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d104      	bne.n	800b44e <HAL_TIM_PWM_Start+0xb6>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2202      	movs	r2, #2
 800b448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b44c:	e023      	b.n	800b496 <HAL_TIM_PWM_Start+0xfe>
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	2b04      	cmp	r3, #4
 800b452:	d104      	bne.n	800b45e <HAL_TIM_PWM_Start+0xc6>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2202      	movs	r2, #2
 800b458:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b45c:	e01b      	b.n	800b496 <HAL_TIM_PWM_Start+0xfe>
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	2b08      	cmp	r3, #8
 800b462:	d104      	bne.n	800b46e <HAL_TIM_PWM_Start+0xd6>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2202      	movs	r2, #2
 800b468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b46c:	e013      	b.n	800b496 <HAL_TIM_PWM_Start+0xfe>
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	2b0c      	cmp	r3, #12
 800b472:	d104      	bne.n	800b47e <HAL_TIM_PWM_Start+0xe6>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2202      	movs	r2, #2
 800b478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b47c:	e00b      	b.n	800b496 <HAL_TIM_PWM_Start+0xfe>
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	2b10      	cmp	r3, #16
 800b482:	d104      	bne.n	800b48e <HAL_TIM_PWM_Start+0xf6>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2202      	movs	r2, #2
 800b488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b48c:	e003      	b.n	800b496 <HAL_TIM_PWM_Start+0xfe>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2202      	movs	r2, #2
 800b492:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2201      	movs	r2, #1
 800b49c:	6839      	ldr	r1, [r7, #0]
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f000 ffea 	bl	800c478 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a38      	ldr	r2, [pc, #224]	; (800b58c <HAL_TIM_PWM_Start+0x1f4>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d013      	beq.n	800b4d6 <HAL_TIM_PWM_Start+0x13e>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	4a37      	ldr	r2, [pc, #220]	; (800b590 <HAL_TIM_PWM_Start+0x1f8>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d00e      	beq.n	800b4d6 <HAL_TIM_PWM_Start+0x13e>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	4a35      	ldr	r2, [pc, #212]	; (800b594 <HAL_TIM_PWM_Start+0x1fc>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d009      	beq.n	800b4d6 <HAL_TIM_PWM_Start+0x13e>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4a34      	ldr	r2, [pc, #208]	; (800b598 <HAL_TIM_PWM_Start+0x200>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d004      	beq.n	800b4d6 <HAL_TIM_PWM_Start+0x13e>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4a32      	ldr	r2, [pc, #200]	; (800b59c <HAL_TIM_PWM_Start+0x204>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d101      	bne.n	800b4da <HAL_TIM_PWM_Start+0x142>
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	e000      	b.n	800b4dc <HAL_TIM_PWM_Start+0x144>
 800b4da:	2300      	movs	r3, #0
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d007      	beq.n	800b4f0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b4ee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4a25      	ldr	r2, [pc, #148]	; (800b58c <HAL_TIM_PWM_Start+0x1f4>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d022      	beq.n	800b540 <HAL_TIM_PWM_Start+0x1a8>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b502:	d01d      	beq.n	800b540 <HAL_TIM_PWM_Start+0x1a8>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a25      	ldr	r2, [pc, #148]	; (800b5a0 <HAL_TIM_PWM_Start+0x208>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d018      	beq.n	800b540 <HAL_TIM_PWM_Start+0x1a8>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4a24      	ldr	r2, [pc, #144]	; (800b5a4 <HAL_TIM_PWM_Start+0x20c>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d013      	beq.n	800b540 <HAL_TIM_PWM_Start+0x1a8>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4a22      	ldr	r2, [pc, #136]	; (800b5a8 <HAL_TIM_PWM_Start+0x210>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d00e      	beq.n	800b540 <HAL_TIM_PWM_Start+0x1a8>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	4a1a      	ldr	r2, [pc, #104]	; (800b590 <HAL_TIM_PWM_Start+0x1f8>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d009      	beq.n	800b540 <HAL_TIM_PWM_Start+0x1a8>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4a1e      	ldr	r2, [pc, #120]	; (800b5ac <HAL_TIM_PWM_Start+0x214>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d004      	beq.n	800b540 <HAL_TIM_PWM_Start+0x1a8>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a16      	ldr	r2, [pc, #88]	; (800b594 <HAL_TIM_PWM_Start+0x1fc>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d115      	bne.n	800b56c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	689a      	ldr	r2, [r3, #8]
 800b546:	4b1a      	ldr	r3, [pc, #104]	; (800b5b0 <HAL_TIM_PWM_Start+0x218>)
 800b548:	4013      	ands	r3, r2
 800b54a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2b06      	cmp	r3, #6
 800b550:	d015      	beq.n	800b57e <HAL_TIM_PWM_Start+0x1e6>
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b558:	d011      	beq.n	800b57e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	681a      	ldr	r2, [r3, #0]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f042 0201 	orr.w	r2, r2, #1
 800b568:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b56a:	e008      	b.n	800b57e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f042 0201 	orr.w	r2, r2, #1
 800b57a:	601a      	str	r2, [r3, #0]
 800b57c:	e000      	b.n	800b580 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b57e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b580:	2300      	movs	r3, #0
}
 800b582:	4618      	mov	r0, r3
 800b584:	3710      	adds	r7, #16
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	40010000 	.word	0x40010000
 800b590:	40010400 	.word	0x40010400
 800b594:	40014000 	.word	0x40014000
 800b598:	40014400 	.word	0x40014400
 800b59c:	40014800 	.word	0x40014800
 800b5a0:	40000400 	.word	0x40000400
 800b5a4:	40000800 	.word	0x40000800
 800b5a8:	40000c00 	.word	0x40000c00
 800b5ac:	40001800 	.word	0x40001800
 800b5b0:	00010007 	.word	0x00010007

0800b5b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b082      	sub	sp, #8
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	691b      	ldr	r3, [r3, #16]
 800b5c2:	f003 0302 	and.w	r3, r3, #2
 800b5c6:	2b02      	cmp	r3, #2
 800b5c8:	d122      	bne.n	800b610 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	68db      	ldr	r3, [r3, #12]
 800b5d0:	f003 0302 	and.w	r3, r3, #2
 800b5d4:	2b02      	cmp	r3, #2
 800b5d6:	d11b      	bne.n	800b610 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f06f 0202 	mvn.w	r2, #2
 800b5e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	699b      	ldr	r3, [r3, #24]
 800b5ee:	f003 0303 	and.w	r3, r3, #3
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d003      	beq.n	800b5fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f000 fb12 	bl	800bc20 <HAL_TIM_IC_CaptureCallback>
 800b5fc:	e005      	b.n	800b60a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 fb04 	bl	800bc0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f000 fb15 	bl	800bc34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2200      	movs	r2, #0
 800b60e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	691b      	ldr	r3, [r3, #16]
 800b616:	f003 0304 	and.w	r3, r3, #4
 800b61a:	2b04      	cmp	r3, #4
 800b61c:	d122      	bne.n	800b664 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	68db      	ldr	r3, [r3, #12]
 800b624:	f003 0304 	and.w	r3, r3, #4
 800b628:	2b04      	cmp	r3, #4
 800b62a:	d11b      	bne.n	800b664 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f06f 0204 	mvn.w	r2, #4
 800b634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2202      	movs	r2, #2
 800b63a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	699b      	ldr	r3, [r3, #24]
 800b642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b646:	2b00      	cmp	r3, #0
 800b648:	d003      	beq.n	800b652 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f000 fae8 	bl	800bc20 <HAL_TIM_IC_CaptureCallback>
 800b650:	e005      	b.n	800b65e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f000 fada 	bl	800bc0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f000 faeb 	bl	800bc34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2200      	movs	r2, #0
 800b662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	691b      	ldr	r3, [r3, #16]
 800b66a:	f003 0308 	and.w	r3, r3, #8
 800b66e:	2b08      	cmp	r3, #8
 800b670:	d122      	bne.n	800b6b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	68db      	ldr	r3, [r3, #12]
 800b678:	f003 0308 	and.w	r3, r3, #8
 800b67c:	2b08      	cmp	r3, #8
 800b67e:	d11b      	bne.n	800b6b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f06f 0208 	mvn.w	r2, #8
 800b688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2204      	movs	r2, #4
 800b68e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	69db      	ldr	r3, [r3, #28]
 800b696:	f003 0303 	and.w	r3, r3, #3
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d003      	beq.n	800b6a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f000 fabe 	bl	800bc20 <HAL_TIM_IC_CaptureCallback>
 800b6a4:	e005      	b.n	800b6b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f000 fab0 	bl	800bc0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f000 fac1 	bl	800bc34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	691b      	ldr	r3, [r3, #16]
 800b6be:	f003 0310 	and.w	r3, r3, #16
 800b6c2:	2b10      	cmp	r3, #16
 800b6c4:	d122      	bne.n	800b70c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	68db      	ldr	r3, [r3, #12]
 800b6cc:	f003 0310 	and.w	r3, r3, #16
 800b6d0:	2b10      	cmp	r3, #16
 800b6d2:	d11b      	bne.n	800b70c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f06f 0210 	mvn.w	r2, #16
 800b6dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2208      	movs	r2, #8
 800b6e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	69db      	ldr	r3, [r3, #28]
 800b6ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d003      	beq.n	800b6fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f000 fa94 	bl	800bc20 <HAL_TIM_IC_CaptureCallback>
 800b6f8:	e005      	b.n	800b706 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 fa86 	bl	800bc0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 fa97 	bl	800bc34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2200      	movs	r2, #0
 800b70a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	691b      	ldr	r3, [r3, #16]
 800b712:	f003 0301 	and.w	r3, r3, #1
 800b716:	2b01      	cmp	r3, #1
 800b718:	d10e      	bne.n	800b738 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	68db      	ldr	r3, [r3, #12]
 800b720:	f003 0301 	and.w	r3, r3, #1
 800b724:	2b01      	cmp	r3, #1
 800b726:	d107      	bne.n	800b738 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f06f 0201 	mvn.w	r2, #1
 800b730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f7f7 f86c 	bl	8002810 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	691b      	ldr	r3, [r3, #16]
 800b73e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b742:	2b80      	cmp	r3, #128	; 0x80
 800b744:	d10e      	bne.n	800b764 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	68db      	ldr	r3, [r3, #12]
 800b74c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b750:	2b80      	cmp	r3, #128	; 0x80
 800b752:	d107      	bne.n	800b764 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b75c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 ffc6 	bl	800c6f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	691b      	ldr	r3, [r3, #16]
 800b76a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b76e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b772:	d10e      	bne.n	800b792 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	68db      	ldr	r3, [r3, #12]
 800b77a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b77e:	2b80      	cmp	r3, #128	; 0x80
 800b780:	d107      	bne.n	800b792 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b78a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 ffb9 	bl	800c704 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	691b      	ldr	r3, [r3, #16]
 800b798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b79c:	2b40      	cmp	r3, #64	; 0x40
 800b79e:	d10e      	bne.n	800b7be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	68db      	ldr	r3, [r3, #12]
 800b7a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7aa:	2b40      	cmp	r3, #64	; 0x40
 800b7ac:	d107      	bne.n	800b7be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b7b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f000 fa45 	bl	800bc48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	691b      	ldr	r3, [r3, #16]
 800b7c4:	f003 0320 	and.w	r3, r3, #32
 800b7c8:	2b20      	cmp	r3, #32
 800b7ca:	d10e      	bne.n	800b7ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	68db      	ldr	r3, [r3, #12]
 800b7d2:	f003 0320 	and.w	r3, r3, #32
 800b7d6:	2b20      	cmp	r3, #32
 800b7d8:	d107      	bne.n	800b7ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f06f 0220 	mvn.w	r2, #32
 800b7e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f000 ff79 	bl	800c6dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b7ea:	bf00      	nop
 800b7ec:	3708      	adds	r7, #8
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
	...

0800b7f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b086      	sub	sp, #24
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	60f8      	str	r0, [r7, #12]
 800b7fc:	60b9      	str	r1, [r7, #8]
 800b7fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b800:	2300      	movs	r3, #0
 800b802:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b80a:	2b01      	cmp	r3, #1
 800b80c:	d101      	bne.n	800b812 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b80e:	2302      	movs	r3, #2
 800b810:	e0ff      	b.n	800ba12 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2201      	movs	r2, #1
 800b816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2b14      	cmp	r3, #20
 800b81e:	f200 80f0 	bhi.w	800ba02 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b822:	a201      	add	r2, pc, #4	; (adr r2, 800b828 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b828:	0800b87d 	.word	0x0800b87d
 800b82c:	0800ba03 	.word	0x0800ba03
 800b830:	0800ba03 	.word	0x0800ba03
 800b834:	0800ba03 	.word	0x0800ba03
 800b838:	0800b8bd 	.word	0x0800b8bd
 800b83c:	0800ba03 	.word	0x0800ba03
 800b840:	0800ba03 	.word	0x0800ba03
 800b844:	0800ba03 	.word	0x0800ba03
 800b848:	0800b8ff 	.word	0x0800b8ff
 800b84c:	0800ba03 	.word	0x0800ba03
 800b850:	0800ba03 	.word	0x0800ba03
 800b854:	0800ba03 	.word	0x0800ba03
 800b858:	0800b93f 	.word	0x0800b93f
 800b85c:	0800ba03 	.word	0x0800ba03
 800b860:	0800ba03 	.word	0x0800ba03
 800b864:	0800ba03 	.word	0x0800ba03
 800b868:	0800b981 	.word	0x0800b981
 800b86c:	0800ba03 	.word	0x0800ba03
 800b870:	0800ba03 	.word	0x0800ba03
 800b874:	0800ba03 	.word	0x0800ba03
 800b878:	0800b9c1 	.word	0x0800b9c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	68b9      	ldr	r1, [r7, #8]
 800b882:	4618      	mov	r0, r3
 800b884:	f000 fa84 	bl	800bd90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	699a      	ldr	r2, [r3, #24]
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f042 0208 	orr.w	r2, r2, #8
 800b896:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	699a      	ldr	r2, [r3, #24]
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f022 0204 	bic.w	r2, r2, #4
 800b8a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	6999      	ldr	r1, [r3, #24]
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	691a      	ldr	r2, [r3, #16]
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	430a      	orrs	r2, r1
 800b8b8:	619a      	str	r2, [r3, #24]
      break;
 800b8ba:	e0a5      	b.n	800ba08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	68b9      	ldr	r1, [r7, #8]
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f000 faf4 	bl	800beb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	699a      	ldr	r2, [r3, #24]
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b8d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	699a      	ldr	r2, [r3, #24]
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b8e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	6999      	ldr	r1, [r3, #24]
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	691b      	ldr	r3, [r3, #16]
 800b8f2:	021a      	lsls	r2, r3, #8
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	430a      	orrs	r2, r1
 800b8fa:	619a      	str	r2, [r3, #24]
      break;
 800b8fc:	e084      	b.n	800ba08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	68b9      	ldr	r1, [r7, #8]
 800b904:	4618      	mov	r0, r3
 800b906:	f000 fb5d 	bl	800bfc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	69da      	ldr	r2, [r3, #28]
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f042 0208 	orr.w	r2, r2, #8
 800b918:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	69da      	ldr	r2, [r3, #28]
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f022 0204 	bic.w	r2, r2, #4
 800b928:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	69d9      	ldr	r1, [r3, #28]
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	691a      	ldr	r2, [r3, #16]
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	430a      	orrs	r2, r1
 800b93a:	61da      	str	r2, [r3, #28]
      break;
 800b93c:	e064      	b.n	800ba08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	68b9      	ldr	r1, [r7, #8]
 800b944:	4618      	mov	r0, r3
 800b946:	f000 fbc5 	bl	800c0d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	69da      	ldr	r2, [r3, #28]
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b958:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	69da      	ldr	r2, [r3, #28]
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b968:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	69d9      	ldr	r1, [r3, #28]
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	691b      	ldr	r3, [r3, #16]
 800b974:	021a      	lsls	r2, r3, #8
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	430a      	orrs	r2, r1
 800b97c:	61da      	str	r2, [r3, #28]
      break;
 800b97e:	e043      	b.n	800ba08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	68b9      	ldr	r1, [r7, #8]
 800b986:	4618      	mov	r0, r3
 800b988:	f000 fc0e 	bl	800c1a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f042 0208 	orr.w	r2, r2, #8
 800b99a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f022 0204 	bic.w	r2, r2, #4
 800b9aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	691a      	ldr	r2, [r3, #16]
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	430a      	orrs	r2, r1
 800b9bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b9be:	e023      	b.n	800ba08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	68b9      	ldr	r1, [r7, #8]
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f000 fc52 	bl	800c270 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b9da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b9ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	691b      	ldr	r3, [r3, #16]
 800b9f6:	021a      	lsls	r2, r3, #8
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	430a      	orrs	r2, r1
 800b9fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ba00:	e002      	b.n	800ba08 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ba02:	2301      	movs	r3, #1
 800ba04:	75fb      	strb	r3, [r7, #23]
      break;
 800ba06:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ba10:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3718      	adds	r7, #24
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop

0800ba1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b084      	sub	sp, #16
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
 800ba24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ba26:	2300      	movs	r3, #0
 800ba28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba30:	2b01      	cmp	r3, #1
 800ba32:	d101      	bne.n	800ba38 <HAL_TIM_ConfigClockSource+0x1c>
 800ba34:	2302      	movs	r3, #2
 800ba36:	e0dc      	b.n	800bbf2 <HAL_TIM_ConfigClockSource+0x1d6>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2202      	movs	r2, #2
 800ba44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	689b      	ldr	r3, [r3, #8]
 800ba4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ba50:	68ba      	ldr	r2, [r7, #8]
 800ba52:	4b6a      	ldr	r3, [pc, #424]	; (800bbfc <HAL_TIM_ConfigClockSource+0x1e0>)
 800ba54:	4013      	ands	r3, r2
 800ba56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ba5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	68ba      	ldr	r2, [r7, #8]
 800ba66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	4a64      	ldr	r2, [pc, #400]	; (800bc00 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	f000 80a9 	beq.w	800bbc6 <HAL_TIM_ConfigClockSource+0x1aa>
 800ba74:	4a62      	ldr	r2, [pc, #392]	; (800bc00 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ba76:	4293      	cmp	r3, r2
 800ba78:	f200 80ae 	bhi.w	800bbd8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba7c:	4a61      	ldr	r2, [pc, #388]	; (800bc04 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	f000 80a1 	beq.w	800bbc6 <HAL_TIM_ConfigClockSource+0x1aa>
 800ba84:	4a5f      	ldr	r2, [pc, #380]	; (800bc04 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	f200 80a6 	bhi.w	800bbd8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba8c:	4a5e      	ldr	r2, [pc, #376]	; (800bc08 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	f000 8099 	beq.w	800bbc6 <HAL_TIM_ConfigClockSource+0x1aa>
 800ba94:	4a5c      	ldr	r2, [pc, #368]	; (800bc08 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ba96:	4293      	cmp	r3, r2
 800ba98:	f200 809e 	bhi.w	800bbd8 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba9c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800baa0:	f000 8091 	beq.w	800bbc6 <HAL_TIM_ConfigClockSource+0x1aa>
 800baa4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800baa8:	f200 8096 	bhi.w	800bbd8 <HAL_TIM_ConfigClockSource+0x1bc>
 800baac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bab0:	f000 8089 	beq.w	800bbc6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bab4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bab8:	f200 808e 	bhi.w	800bbd8 <HAL_TIM_ConfigClockSource+0x1bc>
 800babc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bac0:	d03e      	beq.n	800bb40 <HAL_TIM_ConfigClockSource+0x124>
 800bac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bac6:	f200 8087 	bhi.w	800bbd8 <HAL_TIM_ConfigClockSource+0x1bc>
 800baca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bace:	f000 8086 	beq.w	800bbde <HAL_TIM_ConfigClockSource+0x1c2>
 800bad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bad6:	d87f      	bhi.n	800bbd8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bad8:	2b70      	cmp	r3, #112	; 0x70
 800bada:	d01a      	beq.n	800bb12 <HAL_TIM_ConfigClockSource+0xf6>
 800badc:	2b70      	cmp	r3, #112	; 0x70
 800bade:	d87b      	bhi.n	800bbd8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bae0:	2b60      	cmp	r3, #96	; 0x60
 800bae2:	d050      	beq.n	800bb86 <HAL_TIM_ConfigClockSource+0x16a>
 800bae4:	2b60      	cmp	r3, #96	; 0x60
 800bae6:	d877      	bhi.n	800bbd8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bae8:	2b50      	cmp	r3, #80	; 0x50
 800baea:	d03c      	beq.n	800bb66 <HAL_TIM_ConfigClockSource+0x14a>
 800baec:	2b50      	cmp	r3, #80	; 0x50
 800baee:	d873      	bhi.n	800bbd8 <HAL_TIM_ConfigClockSource+0x1bc>
 800baf0:	2b40      	cmp	r3, #64	; 0x40
 800baf2:	d058      	beq.n	800bba6 <HAL_TIM_ConfigClockSource+0x18a>
 800baf4:	2b40      	cmp	r3, #64	; 0x40
 800baf6:	d86f      	bhi.n	800bbd8 <HAL_TIM_ConfigClockSource+0x1bc>
 800baf8:	2b30      	cmp	r3, #48	; 0x30
 800bafa:	d064      	beq.n	800bbc6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bafc:	2b30      	cmp	r3, #48	; 0x30
 800bafe:	d86b      	bhi.n	800bbd8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb00:	2b20      	cmp	r3, #32
 800bb02:	d060      	beq.n	800bbc6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bb04:	2b20      	cmp	r3, #32
 800bb06:	d867      	bhi.n	800bbd8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d05c      	beq.n	800bbc6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bb0c:	2b10      	cmp	r3, #16
 800bb0e:	d05a      	beq.n	800bbc6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bb10:	e062      	b.n	800bbd8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6818      	ldr	r0, [r3, #0]
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	6899      	ldr	r1, [r3, #8]
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	685a      	ldr	r2, [r3, #4]
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	68db      	ldr	r3, [r3, #12]
 800bb22:	f000 fc89 	bl	800c438 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	689b      	ldr	r3, [r3, #8]
 800bb2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bb34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	68ba      	ldr	r2, [r7, #8]
 800bb3c:	609a      	str	r2, [r3, #8]
      break;
 800bb3e:	e04f      	b.n	800bbe0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6818      	ldr	r0, [r3, #0]
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	6899      	ldr	r1, [r3, #8]
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	685a      	ldr	r2, [r3, #4]
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	68db      	ldr	r3, [r3, #12]
 800bb50:	f000 fc72 	bl	800c438 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	689a      	ldr	r2, [r3, #8]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bb62:	609a      	str	r2, [r3, #8]
      break;
 800bb64:	e03c      	b.n	800bbe0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6818      	ldr	r0, [r3, #0]
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	6859      	ldr	r1, [r3, #4]
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	68db      	ldr	r3, [r3, #12]
 800bb72:	461a      	mov	r2, r3
 800bb74:	f000 fbe2 	bl	800c33c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	2150      	movs	r1, #80	; 0x50
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f000 fc3c 	bl	800c3fc <TIM_ITRx_SetConfig>
      break;
 800bb84:	e02c      	b.n	800bbe0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6818      	ldr	r0, [r3, #0]
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	6859      	ldr	r1, [r3, #4]
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	68db      	ldr	r3, [r3, #12]
 800bb92:	461a      	mov	r2, r3
 800bb94:	f000 fc01 	bl	800c39a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	2160      	movs	r1, #96	; 0x60
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f000 fc2c 	bl	800c3fc <TIM_ITRx_SetConfig>
      break;
 800bba4:	e01c      	b.n	800bbe0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6818      	ldr	r0, [r3, #0]
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	6859      	ldr	r1, [r3, #4]
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	68db      	ldr	r3, [r3, #12]
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	f000 fbc2 	bl	800c33c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	2140      	movs	r1, #64	; 0x40
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f000 fc1c 	bl	800c3fc <TIM_ITRx_SetConfig>
      break;
 800bbc4:	e00c      	b.n	800bbe0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681a      	ldr	r2, [r3, #0]
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	4619      	mov	r1, r3
 800bbd0:	4610      	mov	r0, r2
 800bbd2:	f000 fc13 	bl	800c3fc <TIM_ITRx_SetConfig>
      break;
 800bbd6:	e003      	b.n	800bbe0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800bbd8:	2301      	movs	r3, #1
 800bbda:	73fb      	strb	r3, [r7, #15]
      break;
 800bbdc:	e000      	b.n	800bbe0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800bbde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2201      	movs	r2, #1
 800bbe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2200      	movs	r2, #0
 800bbec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bbf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3710      	adds	r7, #16
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}
 800bbfa:	bf00      	nop
 800bbfc:	ffceff88 	.word	0xffceff88
 800bc00:	00100040 	.word	0x00100040
 800bc04:	00100030 	.word	0x00100030
 800bc08:	00100020 	.word	0x00100020

0800bc0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b083      	sub	sp, #12
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bc14:	bf00      	nop
 800bc16:	370c      	adds	r7, #12
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1e:	4770      	bx	lr

0800bc20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bc20:	b480      	push	{r7}
 800bc22:	b083      	sub	sp, #12
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bc28:	bf00      	nop
 800bc2a:	370c      	adds	r7, #12
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr

0800bc34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b083      	sub	sp, #12
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bc3c:	bf00      	nop
 800bc3e:	370c      	adds	r7, #12
 800bc40:	46bd      	mov	sp, r7
 800bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc46:	4770      	bx	lr

0800bc48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b083      	sub	sp, #12
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bc50:	bf00      	nop
 800bc52:	370c      	adds	r7, #12
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr

0800bc5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b085      	sub	sp, #20
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	4a40      	ldr	r2, [pc, #256]	; (800bd70 <TIM_Base_SetConfig+0x114>)
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d013      	beq.n	800bc9c <TIM_Base_SetConfig+0x40>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc7a:	d00f      	beq.n	800bc9c <TIM_Base_SetConfig+0x40>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	4a3d      	ldr	r2, [pc, #244]	; (800bd74 <TIM_Base_SetConfig+0x118>)
 800bc80:	4293      	cmp	r3, r2
 800bc82:	d00b      	beq.n	800bc9c <TIM_Base_SetConfig+0x40>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	4a3c      	ldr	r2, [pc, #240]	; (800bd78 <TIM_Base_SetConfig+0x11c>)
 800bc88:	4293      	cmp	r3, r2
 800bc8a:	d007      	beq.n	800bc9c <TIM_Base_SetConfig+0x40>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	4a3b      	ldr	r2, [pc, #236]	; (800bd7c <TIM_Base_SetConfig+0x120>)
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d003      	beq.n	800bc9c <TIM_Base_SetConfig+0x40>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	4a3a      	ldr	r2, [pc, #232]	; (800bd80 <TIM_Base_SetConfig+0x124>)
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d108      	bne.n	800bcae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	68fa      	ldr	r2, [r7, #12]
 800bcaa:	4313      	orrs	r3, r2
 800bcac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	4a2f      	ldr	r2, [pc, #188]	; (800bd70 <TIM_Base_SetConfig+0x114>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d01f      	beq.n	800bcf6 <TIM_Base_SetConfig+0x9a>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcbc:	d01b      	beq.n	800bcf6 <TIM_Base_SetConfig+0x9a>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	4a2c      	ldr	r2, [pc, #176]	; (800bd74 <TIM_Base_SetConfig+0x118>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d017      	beq.n	800bcf6 <TIM_Base_SetConfig+0x9a>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	4a2b      	ldr	r2, [pc, #172]	; (800bd78 <TIM_Base_SetConfig+0x11c>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d013      	beq.n	800bcf6 <TIM_Base_SetConfig+0x9a>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	4a2a      	ldr	r2, [pc, #168]	; (800bd7c <TIM_Base_SetConfig+0x120>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d00f      	beq.n	800bcf6 <TIM_Base_SetConfig+0x9a>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	4a29      	ldr	r2, [pc, #164]	; (800bd80 <TIM_Base_SetConfig+0x124>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d00b      	beq.n	800bcf6 <TIM_Base_SetConfig+0x9a>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	4a28      	ldr	r2, [pc, #160]	; (800bd84 <TIM_Base_SetConfig+0x128>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d007      	beq.n	800bcf6 <TIM_Base_SetConfig+0x9a>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	4a27      	ldr	r2, [pc, #156]	; (800bd88 <TIM_Base_SetConfig+0x12c>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d003      	beq.n	800bcf6 <TIM_Base_SetConfig+0x9a>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	4a26      	ldr	r2, [pc, #152]	; (800bd8c <TIM_Base_SetConfig+0x130>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d108      	bne.n	800bd08 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bcfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	68db      	ldr	r3, [r3, #12]
 800bd02:	68fa      	ldr	r2, [r7, #12]
 800bd04:	4313      	orrs	r3, r2
 800bd06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	695b      	ldr	r3, [r3, #20]
 800bd12:	4313      	orrs	r3, r2
 800bd14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	68fa      	ldr	r2, [r7, #12]
 800bd1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	689a      	ldr	r2, [r3, #8]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	681a      	ldr	r2, [r3, #0]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	4a10      	ldr	r2, [pc, #64]	; (800bd70 <TIM_Base_SetConfig+0x114>)
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d00f      	beq.n	800bd54 <TIM_Base_SetConfig+0xf8>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	4a12      	ldr	r2, [pc, #72]	; (800bd80 <TIM_Base_SetConfig+0x124>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d00b      	beq.n	800bd54 <TIM_Base_SetConfig+0xf8>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	4a11      	ldr	r2, [pc, #68]	; (800bd84 <TIM_Base_SetConfig+0x128>)
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d007      	beq.n	800bd54 <TIM_Base_SetConfig+0xf8>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	4a10      	ldr	r2, [pc, #64]	; (800bd88 <TIM_Base_SetConfig+0x12c>)
 800bd48:	4293      	cmp	r3, r2
 800bd4a:	d003      	beq.n	800bd54 <TIM_Base_SetConfig+0xf8>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	4a0f      	ldr	r2, [pc, #60]	; (800bd8c <TIM_Base_SetConfig+0x130>)
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d103      	bne.n	800bd5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	691a      	ldr	r2, [r3, #16]
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2201      	movs	r2, #1
 800bd60:	615a      	str	r2, [r3, #20]
}
 800bd62:	bf00      	nop
 800bd64:	3714      	adds	r7, #20
 800bd66:	46bd      	mov	sp, r7
 800bd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6c:	4770      	bx	lr
 800bd6e:	bf00      	nop
 800bd70:	40010000 	.word	0x40010000
 800bd74:	40000400 	.word	0x40000400
 800bd78:	40000800 	.word	0x40000800
 800bd7c:	40000c00 	.word	0x40000c00
 800bd80:	40010400 	.word	0x40010400
 800bd84:	40014000 	.word	0x40014000
 800bd88:	40014400 	.word	0x40014400
 800bd8c:	40014800 	.word	0x40014800

0800bd90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b087      	sub	sp, #28
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6a1b      	ldr	r3, [r3, #32]
 800bd9e:	f023 0201 	bic.w	r2, r3, #1
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6a1b      	ldr	r3, [r3, #32]
 800bdaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	699b      	ldr	r3, [r3, #24]
 800bdb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bdb8:	68fa      	ldr	r2, [r7, #12]
 800bdba:	4b37      	ldr	r3, [pc, #220]	; (800be98 <TIM_OC1_SetConfig+0x108>)
 800bdbc:	4013      	ands	r3, r2
 800bdbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f023 0303 	bic.w	r3, r3, #3
 800bdc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	68fa      	ldr	r2, [r7, #12]
 800bdce:	4313      	orrs	r3, r2
 800bdd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	f023 0302 	bic.w	r3, r3, #2
 800bdd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	689b      	ldr	r3, [r3, #8]
 800bdde:	697a      	ldr	r2, [r7, #20]
 800bde0:	4313      	orrs	r3, r2
 800bde2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	4a2d      	ldr	r2, [pc, #180]	; (800be9c <TIM_OC1_SetConfig+0x10c>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d00f      	beq.n	800be0c <TIM_OC1_SetConfig+0x7c>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	4a2c      	ldr	r2, [pc, #176]	; (800bea0 <TIM_OC1_SetConfig+0x110>)
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d00b      	beq.n	800be0c <TIM_OC1_SetConfig+0x7c>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	4a2b      	ldr	r2, [pc, #172]	; (800bea4 <TIM_OC1_SetConfig+0x114>)
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	d007      	beq.n	800be0c <TIM_OC1_SetConfig+0x7c>
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	4a2a      	ldr	r2, [pc, #168]	; (800bea8 <TIM_OC1_SetConfig+0x118>)
 800be00:	4293      	cmp	r3, r2
 800be02:	d003      	beq.n	800be0c <TIM_OC1_SetConfig+0x7c>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	4a29      	ldr	r2, [pc, #164]	; (800beac <TIM_OC1_SetConfig+0x11c>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d10c      	bne.n	800be26 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	f023 0308 	bic.w	r3, r3, #8
 800be12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	68db      	ldr	r3, [r3, #12]
 800be18:	697a      	ldr	r2, [r7, #20]
 800be1a:	4313      	orrs	r3, r2
 800be1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	f023 0304 	bic.w	r3, r3, #4
 800be24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	4a1c      	ldr	r2, [pc, #112]	; (800be9c <TIM_OC1_SetConfig+0x10c>)
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d00f      	beq.n	800be4e <TIM_OC1_SetConfig+0xbe>
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	4a1b      	ldr	r2, [pc, #108]	; (800bea0 <TIM_OC1_SetConfig+0x110>)
 800be32:	4293      	cmp	r3, r2
 800be34:	d00b      	beq.n	800be4e <TIM_OC1_SetConfig+0xbe>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	4a1a      	ldr	r2, [pc, #104]	; (800bea4 <TIM_OC1_SetConfig+0x114>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d007      	beq.n	800be4e <TIM_OC1_SetConfig+0xbe>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	4a19      	ldr	r2, [pc, #100]	; (800bea8 <TIM_OC1_SetConfig+0x118>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d003      	beq.n	800be4e <TIM_OC1_SetConfig+0xbe>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	4a18      	ldr	r2, [pc, #96]	; (800beac <TIM_OC1_SetConfig+0x11c>)
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d111      	bne.n	800be72 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800be5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	695b      	ldr	r3, [r3, #20]
 800be62:	693a      	ldr	r2, [r7, #16]
 800be64:	4313      	orrs	r3, r2
 800be66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	699b      	ldr	r3, [r3, #24]
 800be6c:	693a      	ldr	r2, [r7, #16]
 800be6e:	4313      	orrs	r3, r2
 800be70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	693a      	ldr	r2, [r7, #16]
 800be76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	68fa      	ldr	r2, [r7, #12]
 800be7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	685a      	ldr	r2, [r3, #4]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	697a      	ldr	r2, [r7, #20]
 800be8a:	621a      	str	r2, [r3, #32]
}
 800be8c:	bf00      	nop
 800be8e:	371c      	adds	r7, #28
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr
 800be98:	fffeff8f 	.word	0xfffeff8f
 800be9c:	40010000 	.word	0x40010000
 800bea0:	40010400 	.word	0x40010400
 800bea4:	40014000 	.word	0x40014000
 800bea8:	40014400 	.word	0x40014400
 800beac:	40014800 	.word	0x40014800

0800beb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b087      	sub	sp, #28
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6a1b      	ldr	r3, [r3, #32]
 800bebe:	f023 0210 	bic.w	r2, r3, #16
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6a1b      	ldr	r3, [r3, #32]
 800beca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	685b      	ldr	r3, [r3, #4]
 800bed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	699b      	ldr	r3, [r3, #24]
 800bed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bed8:	68fa      	ldr	r2, [r7, #12]
 800beda:	4b34      	ldr	r3, [pc, #208]	; (800bfac <TIM_OC2_SetConfig+0xfc>)
 800bedc:	4013      	ands	r3, r2
 800bede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bee6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	021b      	lsls	r3, r3, #8
 800beee:	68fa      	ldr	r2, [r7, #12]
 800bef0:	4313      	orrs	r3, r2
 800bef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	f023 0320 	bic.w	r3, r3, #32
 800befa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	689b      	ldr	r3, [r3, #8]
 800bf00:	011b      	lsls	r3, r3, #4
 800bf02:	697a      	ldr	r2, [r7, #20]
 800bf04:	4313      	orrs	r3, r2
 800bf06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	4a29      	ldr	r2, [pc, #164]	; (800bfb0 <TIM_OC2_SetConfig+0x100>)
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	d003      	beq.n	800bf18 <TIM_OC2_SetConfig+0x68>
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	4a28      	ldr	r2, [pc, #160]	; (800bfb4 <TIM_OC2_SetConfig+0x104>)
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d10d      	bne.n	800bf34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	68db      	ldr	r3, [r3, #12]
 800bf24:	011b      	lsls	r3, r3, #4
 800bf26:	697a      	ldr	r2, [r7, #20]
 800bf28:	4313      	orrs	r3, r2
 800bf2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	4a1e      	ldr	r2, [pc, #120]	; (800bfb0 <TIM_OC2_SetConfig+0x100>)
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d00f      	beq.n	800bf5c <TIM_OC2_SetConfig+0xac>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	4a1d      	ldr	r2, [pc, #116]	; (800bfb4 <TIM_OC2_SetConfig+0x104>)
 800bf40:	4293      	cmp	r3, r2
 800bf42:	d00b      	beq.n	800bf5c <TIM_OC2_SetConfig+0xac>
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	4a1c      	ldr	r2, [pc, #112]	; (800bfb8 <TIM_OC2_SetConfig+0x108>)
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	d007      	beq.n	800bf5c <TIM_OC2_SetConfig+0xac>
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	4a1b      	ldr	r2, [pc, #108]	; (800bfbc <TIM_OC2_SetConfig+0x10c>)
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d003      	beq.n	800bf5c <TIM_OC2_SetConfig+0xac>
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	4a1a      	ldr	r2, [pc, #104]	; (800bfc0 <TIM_OC2_SetConfig+0x110>)
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	d113      	bne.n	800bf84 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bf62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bf6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	695b      	ldr	r3, [r3, #20]
 800bf70:	009b      	lsls	r3, r3, #2
 800bf72:	693a      	ldr	r2, [r7, #16]
 800bf74:	4313      	orrs	r3, r2
 800bf76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	699b      	ldr	r3, [r3, #24]
 800bf7c:	009b      	lsls	r3, r3, #2
 800bf7e:	693a      	ldr	r2, [r7, #16]
 800bf80:	4313      	orrs	r3, r2
 800bf82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	693a      	ldr	r2, [r7, #16]
 800bf88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	68fa      	ldr	r2, [r7, #12]
 800bf8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	685a      	ldr	r2, [r3, #4]
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	697a      	ldr	r2, [r7, #20]
 800bf9c:	621a      	str	r2, [r3, #32]
}
 800bf9e:	bf00      	nop
 800bfa0:	371c      	adds	r7, #28
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa8:	4770      	bx	lr
 800bfaa:	bf00      	nop
 800bfac:	feff8fff 	.word	0xfeff8fff
 800bfb0:	40010000 	.word	0x40010000
 800bfb4:	40010400 	.word	0x40010400
 800bfb8:	40014000 	.word	0x40014000
 800bfbc:	40014400 	.word	0x40014400
 800bfc0:	40014800 	.word	0x40014800

0800bfc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b087      	sub	sp, #28
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6a1b      	ldr	r3, [r3, #32]
 800bfd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6a1b      	ldr	r3, [r3, #32]
 800bfde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	685b      	ldr	r3, [r3, #4]
 800bfe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	69db      	ldr	r3, [r3, #28]
 800bfea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bfec:	68fa      	ldr	r2, [r7, #12]
 800bfee:	4b33      	ldr	r3, [pc, #204]	; (800c0bc <TIM_OC3_SetConfig+0xf8>)
 800bff0:	4013      	ands	r3, r2
 800bff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	f023 0303 	bic.w	r3, r3, #3
 800bffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	68fa      	ldr	r2, [r7, #12]
 800c002:	4313      	orrs	r3, r2
 800c004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c006:	697b      	ldr	r3, [r7, #20]
 800c008:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c00c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	689b      	ldr	r3, [r3, #8]
 800c012:	021b      	lsls	r3, r3, #8
 800c014:	697a      	ldr	r2, [r7, #20]
 800c016:	4313      	orrs	r3, r2
 800c018:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	4a28      	ldr	r2, [pc, #160]	; (800c0c0 <TIM_OC3_SetConfig+0xfc>)
 800c01e:	4293      	cmp	r3, r2
 800c020:	d003      	beq.n	800c02a <TIM_OC3_SetConfig+0x66>
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	4a27      	ldr	r2, [pc, #156]	; (800c0c4 <TIM_OC3_SetConfig+0x100>)
 800c026:	4293      	cmp	r3, r2
 800c028:	d10d      	bne.n	800c046 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c030:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	68db      	ldr	r3, [r3, #12]
 800c036:	021b      	lsls	r3, r3, #8
 800c038:	697a      	ldr	r2, [r7, #20]
 800c03a:	4313      	orrs	r3, r2
 800c03c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c044:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	4a1d      	ldr	r2, [pc, #116]	; (800c0c0 <TIM_OC3_SetConfig+0xfc>)
 800c04a:	4293      	cmp	r3, r2
 800c04c:	d00f      	beq.n	800c06e <TIM_OC3_SetConfig+0xaa>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	4a1c      	ldr	r2, [pc, #112]	; (800c0c4 <TIM_OC3_SetConfig+0x100>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d00b      	beq.n	800c06e <TIM_OC3_SetConfig+0xaa>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	4a1b      	ldr	r2, [pc, #108]	; (800c0c8 <TIM_OC3_SetConfig+0x104>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d007      	beq.n	800c06e <TIM_OC3_SetConfig+0xaa>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	4a1a      	ldr	r2, [pc, #104]	; (800c0cc <TIM_OC3_SetConfig+0x108>)
 800c062:	4293      	cmp	r3, r2
 800c064:	d003      	beq.n	800c06e <TIM_OC3_SetConfig+0xaa>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	4a19      	ldr	r2, [pc, #100]	; (800c0d0 <TIM_OC3_SetConfig+0x10c>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d113      	bne.n	800c096 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c074:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c07c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	695b      	ldr	r3, [r3, #20]
 800c082:	011b      	lsls	r3, r3, #4
 800c084:	693a      	ldr	r2, [r7, #16]
 800c086:	4313      	orrs	r3, r2
 800c088:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	699b      	ldr	r3, [r3, #24]
 800c08e:	011b      	lsls	r3, r3, #4
 800c090:	693a      	ldr	r2, [r7, #16]
 800c092:	4313      	orrs	r3, r2
 800c094:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	693a      	ldr	r2, [r7, #16]
 800c09a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	68fa      	ldr	r2, [r7, #12]
 800c0a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	685a      	ldr	r2, [r3, #4]
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	697a      	ldr	r2, [r7, #20]
 800c0ae:	621a      	str	r2, [r3, #32]
}
 800c0b0:	bf00      	nop
 800c0b2:	371c      	adds	r7, #28
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ba:	4770      	bx	lr
 800c0bc:	fffeff8f 	.word	0xfffeff8f
 800c0c0:	40010000 	.word	0x40010000
 800c0c4:	40010400 	.word	0x40010400
 800c0c8:	40014000 	.word	0x40014000
 800c0cc:	40014400 	.word	0x40014400
 800c0d0:	40014800 	.word	0x40014800

0800c0d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b087      	sub	sp, #28
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6a1b      	ldr	r3, [r3, #32]
 800c0e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6a1b      	ldr	r3, [r3, #32]
 800c0ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	69db      	ldr	r3, [r3, #28]
 800c0fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c0fc:	68fa      	ldr	r2, [r7, #12]
 800c0fe:	4b24      	ldr	r3, [pc, #144]	; (800c190 <TIM_OC4_SetConfig+0xbc>)
 800c100:	4013      	ands	r3, r2
 800c102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c10a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	021b      	lsls	r3, r3, #8
 800c112:	68fa      	ldr	r2, [r7, #12]
 800c114:	4313      	orrs	r3, r2
 800c116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c118:	693b      	ldr	r3, [r7, #16]
 800c11a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c11e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	689b      	ldr	r3, [r3, #8]
 800c124:	031b      	lsls	r3, r3, #12
 800c126:	693a      	ldr	r2, [r7, #16]
 800c128:	4313      	orrs	r3, r2
 800c12a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	4a19      	ldr	r2, [pc, #100]	; (800c194 <TIM_OC4_SetConfig+0xc0>)
 800c130:	4293      	cmp	r3, r2
 800c132:	d00f      	beq.n	800c154 <TIM_OC4_SetConfig+0x80>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	4a18      	ldr	r2, [pc, #96]	; (800c198 <TIM_OC4_SetConfig+0xc4>)
 800c138:	4293      	cmp	r3, r2
 800c13a:	d00b      	beq.n	800c154 <TIM_OC4_SetConfig+0x80>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	4a17      	ldr	r2, [pc, #92]	; (800c19c <TIM_OC4_SetConfig+0xc8>)
 800c140:	4293      	cmp	r3, r2
 800c142:	d007      	beq.n	800c154 <TIM_OC4_SetConfig+0x80>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	4a16      	ldr	r2, [pc, #88]	; (800c1a0 <TIM_OC4_SetConfig+0xcc>)
 800c148:	4293      	cmp	r3, r2
 800c14a:	d003      	beq.n	800c154 <TIM_OC4_SetConfig+0x80>
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	4a15      	ldr	r2, [pc, #84]	; (800c1a4 <TIM_OC4_SetConfig+0xd0>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d109      	bne.n	800c168 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c154:	697b      	ldr	r3, [r7, #20]
 800c156:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c15a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	695b      	ldr	r3, [r3, #20]
 800c160:	019b      	lsls	r3, r3, #6
 800c162:	697a      	ldr	r2, [r7, #20]
 800c164:	4313      	orrs	r3, r2
 800c166:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	697a      	ldr	r2, [r7, #20]
 800c16c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	68fa      	ldr	r2, [r7, #12]
 800c172:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	685a      	ldr	r2, [r3, #4]
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	693a      	ldr	r2, [r7, #16]
 800c180:	621a      	str	r2, [r3, #32]
}
 800c182:	bf00      	nop
 800c184:	371c      	adds	r7, #28
 800c186:	46bd      	mov	sp, r7
 800c188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18c:	4770      	bx	lr
 800c18e:	bf00      	nop
 800c190:	feff8fff 	.word	0xfeff8fff
 800c194:	40010000 	.word	0x40010000
 800c198:	40010400 	.word	0x40010400
 800c19c:	40014000 	.word	0x40014000
 800c1a0:	40014400 	.word	0x40014400
 800c1a4:	40014800 	.word	0x40014800

0800c1a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b087      	sub	sp, #28
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6a1b      	ldr	r3, [r3, #32]
 800c1b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6a1b      	ldr	r3, [r3, #32]
 800c1c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c1d0:	68fa      	ldr	r2, [r7, #12]
 800c1d2:	4b21      	ldr	r3, [pc, #132]	; (800c258 <TIM_OC5_SetConfig+0xb0>)
 800c1d4:	4013      	ands	r3, r2
 800c1d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	68fa      	ldr	r2, [r7, #12]
 800c1de:	4313      	orrs	r3, r2
 800c1e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c1e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	689b      	ldr	r3, [r3, #8]
 800c1ee:	041b      	lsls	r3, r3, #16
 800c1f0:	693a      	ldr	r2, [r7, #16]
 800c1f2:	4313      	orrs	r3, r2
 800c1f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	4a18      	ldr	r2, [pc, #96]	; (800c25c <TIM_OC5_SetConfig+0xb4>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d00f      	beq.n	800c21e <TIM_OC5_SetConfig+0x76>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	4a17      	ldr	r2, [pc, #92]	; (800c260 <TIM_OC5_SetConfig+0xb8>)
 800c202:	4293      	cmp	r3, r2
 800c204:	d00b      	beq.n	800c21e <TIM_OC5_SetConfig+0x76>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	4a16      	ldr	r2, [pc, #88]	; (800c264 <TIM_OC5_SetConfig+0xbc>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d007      	beq.n	800c21e <TIM_OC5_SetConfig+0x76>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	4a15      	ldr	r2, [pc, #84]	; (800c268 <TIM_OC5_SetConfig+0xc0>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d003      	beq.n	800c21e <TIM_OC5_SetConfig+0x76>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	4a14      	ldr	r2, [pc, #80]	; (800c26c <TIM_OC5_SetConfig+0xc4>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d109      	bne.n	800c232 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c224:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	695b      	ldr	r3, [r3, #20]
 800c22a:	021b      	lsls	r3, r3, #8
 800c22c:	697a      	ldr	r2, [r7, #20]
 800c22e:	4313      	orrs	r3, r2
 800c230:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	697a      	ldr	r2, [r7, #20]
 800c236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	68fa      	ldr	r2, [r7, #12]
 800c23c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	685a      	ldr	r2, [r3, #4]
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	693a      	ldr	r2, [r7, #16]
 800c24a:	621a      	str	r2, [r3, #32]
}
 800c24c:	bf00      	nop
 800c24e:	371c      	adds	r7, #28
 800c250:	46bd      	mov	sp, r7
 800c252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c256:	4770      	bx	lr
 800c258:	fffeff8f 	.word	0xfffeff8f
 800c25c:	40010000 	.word	0x40010000
 800c260:	40010400 	.word	0x40010400
 800c264:	40014000 	.word	0x40014000
 800c268:	40014400 	.word	0x40014400
 800c26c:	40014800 	.word	0x40014800

0800c270 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c270:	b480      	push	{r7}
 800c272:	b087      	sub	sp, #28
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6a1b      	ldr	r3, [r3, #32]
 800c27e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6a1b      	ldr	r3, [r3, #32]
 800c28a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	685b      	ldr	r3, [r3, #4]
 800c290:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c298:	68fa      	ldr	r2, [r7, #12]
 800c29a:	4b22      	ldr	r3, [pc, #136]	; (800c324 <TIM_OC6_SetConfig+0xb4>)
 800c29c:	4013      	ands	r3, r2
 800c29e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	021b      	lsls	r3, r3, #8
 800c2a6:	68fa      	ldr	r2, [r7, #12]
 800c2a8:	4313      	orrs	r3, r2
 800c2aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c2b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	689b      	ldr	r3, [r3, #8]
 800c2b8:	051b      	lsls	r3, r3, #20
 800c2ba:	693a      	ldr	r2, [r7, #16]
 800c2bc:	4313      	orrs	r3, r2
 800c2be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	4a19      	ldr	r2, [pc, #100]	; (800c328 <TIM_OC6_SetConfig+0xb8>)
 800c2c4:	4293      	cmp	r3, r2
 800c2c6:	d00f      	beq.n	800c2e8 <TIM_OC6_SetConfig+0x78>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	4a18      	ldr	r2, [pc, #96]	; (800c32c <TIM_OC6_SetConfig+0xbc>)
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d00b      	beq.n	800c2e8 <TIM_OC6_SetConfig+0x78>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	4a17      	ldr	r2, [pc, #92]	; (800c330 <TIM_OC6_SetConfig+0xc0>)
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d007      	beq.n	800c2e8 <TIM_OC6_SetConfig+0x78>
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	4a16      	ldr	r2, [pc, #88]	; (800c334 <TIM_OC6_SetConfig+0xc4>)
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d003      	beq.n	800c2e8 <TIM_OC6_SetConfig+0x78>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	4a15      	ldr	r2, [pc, #84]	; (800c338 <TIM_OC6_SetConfig+0xc8>)
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	d109      	bne.n	800c2fc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c2ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	695b      	ldr	r3, [r3, #20]
 800c2f4:	029b      	lsls	r3, r3, #10
 800c2f6:	697a      	ldr	r2, [r7, #20]
 800c2f8:	4313      	orrs	r3, r2
 800c2fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	697a      	ldr	r2, [r7, #20]
 800c300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	68fa      	ldr	r2, [r7, #12]
 800c306:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	685a      	ldr	r2, [r3, #4]
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	693a      	ldr	r2, [r7, #16]
 800c314:	621a      	str	r2, [r3, #32]
}
 800c316:	bf00      	nop
 800c318:	371c      	adds	r7, #28
 800c31a:	46bd      	mov	sp, r7
 800c31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c320:	4770      	bx	lr
 800c322:	bf00      	nop
 800c324:	feff8fff 	.word	0xfeff8fff
 800c328:	40010000 	.word	0x40010000
 800c32c:	40010400 	.word	0x40010400
 800c330:	40014000 	.word	0x40014000
 800c334:	40014400 	.word	0x40014400
 800c338:	40014800 	.word	0x40014800

0800c33c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b087      	sub	sp, #28
 800c340:	af00      	add	r7, sp, #0
 800c342:	60f8      	str	r0, [r7, #12]
 800c344:	60b9      	str	r1, [r7, #8]
 800c346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	6a1b      	ldr	r3, [r3, #32]
 800c34c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	6a1b      	ldr	r3, [r3, #32]
 800c352:	f023 0201 	bic.w	r2, r3, #1
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	699b      	ldr	r3, [r3, #24]
 800c35e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	011b      	lsls	r3, r3, #4
 800c36c:	693a      	ldr	r2, [r7, #16]
 800c36e:	4313      	orrs	r3, r2
 800c370:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	f023 030a 	bic.w	r3, r3, #10
 800c378:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c37a:	697a      	ldr	r2, [r7, #20]
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	4313      	orrs	r3, r2
 800c380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	693a      	ldr	r2, [r7, #16]
 800c386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	697a      	ldr	r2, [r7, #20]
 800c38c:	621a      	str	r2, [r3, #32]
}
 800c38e:	bf00      	nop
 800c390:	371c      	adds	r7, #28
 800c392:	46bd      	mov	sp, r7
 800c394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c398:	4770      	bx	lr

0800c39a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c39a:	b480      	push	{r7}
 800c39c:	b087      	sub	sp, #28
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	60f8      	str	r0, [r7, #12]
 800c3a2:	60b9      	str	r1, [r7, #8]
 800c3a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	6a1b      	ldr	r3, [r3, #32]
 800c3aa:	f023 0210 	bic.w	r2, r3, #16
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	699b      	ldr	r3, [r3, #24]
 800c3b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	6a1b      	ldr	r3, [r3, #32]
 800c3bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c3c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	031b      	lsls	r3, r3, #12
 800c3ca:	697a      	ldr	r2, [r7, #20]
 800c3cc:	4313      	orrs	r3, r2
 800c3ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c3d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	011b      	lsls	r3, r3, #4
 800c3dc:	693a      	ldr	r2, [r7, #16]
 800c3de:	4313      	orrs	r3, r2
 800c3e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	697a      	ldr	r2, [r7, #20]
 800c3e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	693a      	ldr	r2, [r7, #16]
 800c3ec:	621a      	str	r2, [r3, #32]
}
 800c3ee:	bf00      	nop
 800c3f0:	371c      	adds	r7, #28
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f8:	4770      	bx	lr
	...

0800c3fc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c3fc:	b480      	push	{r7}
 800c3fe:	b085      	sub	sp, #20
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	689b      	ldr	r3, [r3, #8]
 800c40a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c40c:	68fa      	ldr	r2, [r7, #12]
 800c40e:	4b09      	ldr	r3, [pc, #36]	; (800c434 <TIM_ITRx_SetConfig+0x38>)
 800c410:	4013      	ands	r3, r2
 800c412:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c414:	683a      	ldr	r2, [r7, #0]
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	4313      	orrs	r3, r2
 800c41a:	f043 0307 	orr.w	r3, r3, #7
 800c41e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	68fa      	ldr	r2, [r7, #12]
 800c424:	609a      	str	r2, [r3, #8]
}
 800c426:	bf00      	nop
 800c428:	3714      	adds	r7, #20
 800c42a:	46bd      	mov	sp, r7
 800c42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c430:	4770      	bx	lr
 800c432:	bf00      	nop
 800c434:	ffcfff8f 	.word	0xffcfff8f

0800c438 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c438:	b480      	push	{r7}
 800c43a:	b087      	sub	sp, #28
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	60f8      	str	r0, [r7, #12]
 800c440:	60b9      	str	r1, [r7, #8]
 800c442:	607a      	str	r2, [r7, #4]
 800c444:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	689b      	ldr	r3, [r3, #8]
 800c44a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c452:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	021a      	lsls	r2, r3, #8
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	431a      	orrs	r2, r3
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	4313      	orrs	r3, r2
 800c460:	697a      	ldr	r2, [r7, #20]
 800c462:	4313      	orrs	r3, r2
 800c464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	697a      	ldr	r2, [r7, #20]
 800c46a:	609a      	str	r2, [r3, #8]
}
 800c46c:	bf00      	nop
 800c46e:	371c      	adds	r7, #28
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr

0800c478 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c478:	b480      	push	{r7}
 800c47a:	b087      	sub	sp, #28
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	60b9      	str	r1, [r7, #8]
 800c482:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	f003 031f 	and.w	r3, r3, #31
 800c48a:	2201      	movs	r2, #1
 800c48c:	fa02 f303 	lsl.w	r3, r2, r3
 800c490:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	6a1a      	ldr	r2, [r3, #32]
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	43db      	mvns	r3, r3
 800c49a:	401a      	ands	r2, r3
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	6a1a      	ldr	r2, [r3, #32]
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	f003 031f 	and.w	r3, r3, #31
 800c4aa:	6879      	ldr	r1, [r7, #4]
 800c4ac:	fa01 f303 	lsl.w	r3, r1, r3
 800c4b0:	431a      	orrs	r2, r3
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	621a      	str	r2, [r3, #32]
}
 800c4b6:	bf00      	nop
 800c4b8:	371c      	adds	r7, #28
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c0:	4770      	bx	lr
	...

0800c4c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b085      	sub	sp, #20
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c4d4:	2b01      	cmp	r3, #1
 800c4d6:	d101      	bne.n	800c4dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c4d8:	2302      	movs	r3, #2
 800c4da:	e06d      	b.n	800c5b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2201      	movs	r2, #1
 800c4e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2202      	movs	r2, #2
 800c4e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	685b      	ldr	r3, [r3, #4]
 800c4f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	689b      	ldr	r3, [r3, #8]
 800c4fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	4a30      	ldr	r2, [pc, #192]	; (800c5c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c502:	4293      	cmp	r3, r2
 800c504:	d004      	beq.n	800c510 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	4a2f      	ldr	r2, [pc, #188]	; (800c5c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c50c:	4293      	cmp	r3, r2
 800c50e:	d108      	bne.n	800c522 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c516:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	68fa      	ldr	r2, [r7, #12]
 800c51e:	4313      	orrs	r3, r2
 800c520:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c528:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	68fa      	ldr	r2, [r7, #12]
 800c530:	4313      	orrs	r3, r2
 800c532:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	68fa      	ldr	r2, [r7, #12]
 800c53a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	4a20      	ldr	r2, [pc, #128]	; (800c5c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d022      	beq.n	800c58c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c54e:	d01d      	beq.n	800c58c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	4a1d      	ldr	r2, [pc, #116]	; (800c5cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c556:	4293      	cmp	r3, r2
 800c558:	d018      	beq.n	800c58c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	4a1c      	ldr	r2, [pc, #112]	; (800c5d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c560:	4293      	cmp	r3, r2
 800c562:	d013      	beq.n	800c58c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	4a1a      	ldr	r2, [pc, #104]	; (800c5d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d00e      	beq.n	800c58c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	4a15      	ldr	r2, [pc, #84]	; (800c5c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c574:	4293      	cmp	r3, r2
 800c576:	d009      	beq.n	800c58c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	4a16      	ldr	r2, [pc, #88]	; (800c5d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c57e:	4293      	cmp	r3, r2
 800c580:	d004      	beq.n	800c58c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	4a15      	ldr	r2, [pc, #84]	; (800c5dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c588:	4293      	cmp	r3, r2
 800c58a:	d10c      	bne.n	800c5a6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c592:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	689b      	ldr	r3, [r3, #8]
 800c598:	68ba      	ldr	r2, [r7, #8]
 800c59a:	4313      	orrs	r3, r2
 800c59c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	68ba      	ldr	r2, [r7, #8]
 800c5a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2201      	movs	r2, #1
 800c5aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c5b6:	2300      	movs	r3, #0
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3714      	adds	r7, #20
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr
 800c5c4:	40010000 	.word	0x40010000
 800c5c8:	40010400 	.word	0x40010400
 800c5cc:	40000400 	.word	0x40000400
 800c5d0:	40000800 	.word	0x40000800
 800c5d4:	40000c00 	.word	0x40000c00
 800c5d8:	40001800 	.word	0x40001800
 800c5dc:	40014000 	.word	0x40014000

0800c5e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b085      	sub	sp, #20
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
 800c5e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c5f4:	2b01      	cmp	r3, #1
 800c5f6:	d101      	bne.n	800c5fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c5f8:	2302      	movs	r3, #2
 800c5fa:	e065      	b.n	800c6c8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2201      	movs	r2, #1
 800c600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	68db      	ldr	r3, [r3, #12]
 800c60e:	4313      	orrs	r3, r2
 800c610:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	689b      	ldr	r3, [r3, #8]
 800c61c:	4313      	orrs	r3, r2
 800c61e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	685b      	ldr	r3, [r3, #4]
 800c62a:	4313      	orrs	r3, r2
 800c62c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	4313      	orrs	r3, r2
 800c63a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	691b      	ldr	r3, [r3, #16]
 800c646:	4313      	orrs	r3, r2
 800c648:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	695b      	ldr	r3, [r3, #20]
 800c654:	4313      	orrs	r3, r2
 800c656:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c662:	4313      	orrs	r3, r2
 800c664:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	699b      	ldr	r3, [r3, #24]
 800c670:	041b      	lsls	r3, r3, #16
 800c672:	4313      	orrs	r3, r2
 800c674:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4a16      	ldr	r2, [pc, #88]	; (800c6d4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c67c:	4293      	cmp	r3, r2
 800c67e:	d004      	beq.n	800c68a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	4a14      	ldr	r2, [pc, #80]	; (800c6d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d115      	bne.n	800c6b6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c694:	051b      	lsls	r3, r3, #20
 800c696:	4313      	orrs	r3, r2
 800c698:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	69db      	ldr	r3, [r3, #28]
 800c6a4:	4313      	orrs	r3, r2
 800c6a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	6a1b      	ldr	r3, [r3, #32]
 800c6b2:	4313      	orrs	r3, r2
 800c6b4:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	68fa      	ldr	r2, [r7, #12]
 800c6bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c6c6:	2300      	movs	r3, #0
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3714      	adds	r7, #20
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d2:	4770      	bx	lr
 800c6d4:	40010000 	.word	0x40010000
 800c6d8:	40010400 	.word	0x40010400

0800c6dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c6dc:	b480      	push	{r7}
 800c6de:	b083      	sub	sp, #12
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c6e4:	bf00      	nop
 800c6e6:	370c      	adds	r7, #12
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ee:	4770      	bx	lr

0800c6f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b083      	sub	sp, #12
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c6f8:	bf00      	nop
 800c6fa:	370c      	adds	r7, #12
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr

0800c704 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c704:	b480      	push	{r7}
 800c706:	b083      	sub	sp, #12
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c70c:	bf00      	nop
 800c70e:	370c      	adds	r7, #12
 800c710:	46bd      	mov	sp, r7
 800c712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c716:	4770      	bx	lr

0800c718 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b082      	sub	sp, #8
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d101      	bne.n	800c72a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c726:	2301      	movs	r3, #1
 800c728:	e042      	b.n	800c7b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c730:	2b00      	cmp	r3, #0
 800c732:	d106      	bne.n	800c742 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2200      	movs	r2, #0
 800c738:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	f7f8 fa4f 	bl	8004be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2224      	movs	r2, #36	; 0x24
 800c746:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	681a      	ldr	r2, [r3, #0]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f022 0201 	bic.w	r2, r2, #1
 800c758:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 fdee 	bl	800d33c <UART_SetConfig>
 800c760:	4603      	mov	r3, r0
 800c762:	2b01      	cmp	r3, #1
 800c764:	d101      	bne.n	800c76a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c766:	2301      	movs	r3, #1
 800c768:	e022      	b.n	800c7b0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d002      	beq.n	800c778 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f001 fb42 	bl	800ddfc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	685a      	ldr	r2, [r3, #4]
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c786:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	689a      	ldr	r2, [r3, #8]
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c796:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	681a      	ldr	r2, [r3, #0]
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	f042 0201 	orr.w	r2, r2, #1
 800c7a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f001 fbc9 	bl	800df40 <UART_CheckIdleState>
 800c7ae:	4603      	mov	r3, r0
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3708      	adds	r7, #8
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}

0800c7b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b08a      	sub	sp, #40	; 0x28
 800c7bc:	af02      	add	r7, sp, #8
 800c7be:	60f8      	str	r0, [r7, #12]
 800c7c0:	60b9      	str	r1, [r7, #8]
 800c7c2:	603b      	str	r3, [r7, #0]
 800c7c4:	4613      	mov	r3, r2
 800c7c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7ce:	2b20      	cmp	r3, #32
 800c7d0:	f040 8083 	bne.w	800c8da <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d002      	beq.n	800c7e0 <HAL_UART_Transmit+0x28>
 800c7da:	88fb      	ldrh	r3, [r7, #6]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d101      	bne.n	800c7e4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	e07b      	b.n	800c8dc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c7ea:	2b01      	cmp	r3, #1
 800c7ec:	d101      	bne.n	800c7f2 <HAL_UART_Transmit+0x3a>
 800c7ee:	2302      	movs	r3, #2
 800c7f0:	e074      	b.n	800c8dc <HAL_UART_Transmit+0x124>
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	2201      	movs	r2, #1
 800c7f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	2221      	movs	r2, #33	; 0x21
 800c806:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c80a:	f7f8 fccf 	bl	80051ac <HAL_GetTick>
 800c80e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	88fa      	ldrh	r2, [r7, #6]
 800c814:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	88fa      	ldrh	r2, [r7, #6]
 800c81c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	689b      	ldr	r3, [r3, #8]
 800c824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c828:	d108      	bne.n	800c83c <HAL_UART_Transmit+0x84>
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	691b      	ldr	r3, [r3, #16]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d104      	bne.n	800c83c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800c832:	2300      	movs	r3, #0
 800c834:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	61bb      	str	r3, [r7, #24]
 800c83a:	e003      	b.n	800c844 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c840:	2300      	movs	r3, #0
 800c842:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	2200      	movs	r2, #0
 800c848:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800c84c:	e02c      	b.n	800c8a8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	9300      	str	r3, [sp, #0]
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	2200      	movs	r2, #0
 800c856:	2180      	movs	r1, #128	; 0x80
 800c858:	68f8      	ldr	r0, [r7, #12]
 800c85a:	f001 fbbc 	bl	800dfd6 <UART_WaitOnFlagUntilTimeout>
 800c85e:	4603      	mov	r3, r0
 800c860:	2b00      	cmp	r3, #0
 800c862:	d001      	beq.n	800c868 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800c864:	2303      	movs	r3, #3
 800c866:	e039      	b.n	800c8dc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c868:	69fb      	ldr	r3, [r7, #28]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d10b      	bne.n	800c886 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c86e:	69bb      	ldr	r3, [r7, #24]
 800c870:	881b      	ldrh	r3, [r3, #0]
 800c872:	461a      	mov	r2, r3
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c87c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c87e:	69bb      	ldr	r3, [r7, #24]
 800c880:	3302      	adds	r3, #2
 800c882:	61bb      	str	r3, [r7, #24]
 800c884:	e007      	b.n	800c896 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c886:	69fb      	ldr	r3, [r7, #28]
 800c888:	781a      	ldrb	r2, [r3, #0]
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c890:	69fb      	ldr	r3, [r7, #28]
 800c892:	3301      	adds	r3, #1
 800c894:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c89c:	b29b      	uxth	r3, r3
 800c89e:	3b01      	subs	r3, #1
 800c8a0:	b29a      	uxth	r2, r3
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c8ae:	b29b      	uxth	r3, r3
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d1cc      	bne.n	800c84e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	9300      	str	r3, [sp, #0]
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	2140      	movs	r1, #64	; 0x40
 800c8be:	68f8      	ldr	r0, [r7, #12]
 800c8c0:	f001 fb89 	bl	800dfd6 <UART_WaitOnFlagUntilTimeout>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d001      	beq.n	800c8ce <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c8ca:	2303      	movs	r3, #3
 800c8cc:	e006      	b.n	800c8dc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	2220      	movs	r2, #32
 800c8d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	e000      	b.n	800c8dc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c8da:	2302      	movs	r3, #2
  }
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3720      	adds	r7, #32
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b08a      	sub	sp, #40	; 0x28
 800c8e8:	af02      	add	r7, sp, #8
 800c8ea:	60f8      	str	r0, [r7, #12]
 800c8ec:	60b9      	str	r1, [r7, #8]
 800c8ee:	603b      	str	r3, [r7, #0]
 800c8f0:	4613      	mov	r3, r2
 800c8f2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8fa:	2b20      	cmp	r3, #32
 800c8fc:	f040 80c0 	bne.w	800ca80 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d002      	beq.n	800c90c <HAL_UART_Receive+0x28>
 800c906:	88fb      	ldrh	r3, [r7, #6]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d101      	bne.n	800c910 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800c90c:	2301      	movs	r3, #1
 800c90e:	e0b8      	b.n	800ca82 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c916:	2b01      	cmp	r3, #1
 800c918:	d101      	bne.n	800c91e <HAL_UART_Receive+0x3a>
 800c91a:	2302      	movs	r3, #2
 800c91c:	e0b1      	b.n	800ca82 <HAL_UART_Receive+0x19e>
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	2201      	movs	r2, #1
 800c922:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	2200      	movs	r2, #0
 800c92a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	2222      	movs	r2, #34	; 0x22
 800c932:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	2200      	movs	r2, #0
 800c93a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c93c:	f7f8 fc36 	bl	80051ac <HAL_GetTick>
 800c940:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	88fa      	ldrh	r2, [r7, #6]
 800c946:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	88fa      	ldrh	r2, [r7, #6]
 800c94e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	689b      	ldr	r3, [r3, #8]
 800c956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c95a:	d10e      	bne.n	800c97a <HAL_UART_Receive+0x96>
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	691b      	ldr	r3, [r3, #16]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d105      	bne.n	800c970 <HAL_UART_Receive+0x8c>
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c96a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c96e:	e02d      	b.n	800c9cc <HAL_UART_Receive+0xe8>
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	22ff      	movs	r2, #255	; 0xff
 800c974:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c978:	e028      	b.n	800c9cc <HAL_UART_Receive+0xe8>
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	689b      	ldr	r3, [r3, #8]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d10d      	bne.n	800c99e <HAL_UART_Receive+0xba>
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	691b      	ldr	r3, [r3, #16]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d104      	bne.n	800c994 <HAL_UART_Receive+0xb0>
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	22ff      	movs	r2, #255	; 0xff
 800c98e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c992:	e01b      	b.n	800c9cc <HAL_UART_Receive+0xe8>
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	227f      	movs	r2, #127	; 0x7f
 800c998:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c99c:	e016      	b.n	800c9cc <HAL_UART_Receive+0xe8>
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	689b      	ldr	r3, [r3, #8]
 800c9a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c9a6:	d10d      	bne.n	800c9c4 <HAL_UART_Receive+0xe0>
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	691b      	ldr	r3, [r3, #16]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d104      	bne.n	800c9ba <HAL_UART_Receive+0xd6>
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	227f      	movs	r2, #127	; 0x7f
 800c9b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c9b8:	e008      	b.n	800c9cc <HAL_UART_Receive+0xe8>
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	223f      	movs	r2, #63	; 0x3f
 800c9be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c9c2:	e003      	b.n	800c9cc <HAL_UART_Receive+0xe8>
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c9d2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	689b      	ldr	r3, [r3, #8]
 800c9d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9dc:	d108      	bne.n	800c9f0 <HAL_UART_Receive+0x10c>
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	691b      	ldr	r3, [r3, #16]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d104      	bne.n	800c9f0 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	61bb      	str	r3, [r7, #24]
 800c9ee:	e003      	b.n	800c9f8 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800ca00:	e032      	b.n	800ca68 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	9300      	str	r3, [sp, #0]
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	2120      	movs	r1, #32
 800ca0c:	68f8      	ldr	r0, [r7, #12]
 800ca0e:	f001 fae2 	bl	800dfd6 <UART_WaitOnFlagUntilTimeout>
 800ca12:	4603      	mov	r3, r0
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d001      	beq.n	800ca1c <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800ca18:	2303      	movs	r3, #3
 800ca1a:	e032      	b.n	800ca82 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800ca1c:	69fb      	ldr	r3, [r7, #28]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d10c      	bne.n	800ca3c <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca28:	b29a      	uxth	r2, r3
 800ca2a:	8a7b      	ldrh	r3, [r7, #18]
 800ca2c:	4013      	ands	r3, r2
 800ca2e:	b29a      	uxth	r2, r3
 800ca30:	69bb      	ldr	r3, [r7, #24]
 800ca32:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800ca34:	69bb      	ldr	r3, [r7, #24]
 800ca36:	3302      	adds	r3, #2
 800ca38:	61bb      	str	r3, [r7, #24]
 800ca3a:	e00c      	b.n	800ca56 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca42:	b2da      	uxtb	r2, r3
 800ca44:	8a7b      	ldrh	r3, [r7, #18]
 800ca46:	b2db      	uxtb	r3, r3
 800ca48:	4013      	ands	r3, r2
 800ca4a:	b2da      	uxtb	r2, r3
 800ca4c:	69fb      	ldr	r3, [r7, #28]
 800ca4e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800ca50:	69fb      	ldr	r3, [r7, #28]
 800ca52:	3301      	adds	r3, #1
 800ca54:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca5c:	b29b      	uxth	r3, r3
 800ca5e:	3b01      	subs	r3, #1
 800ca60:	b29a      	uxth	r2, r3
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca6e:	b29b      	uxth	r3, r3
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d1c6      	bne.n	800ca02 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2220      	movs	r2, #32
 800ca78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	e000      	b.n	800ca82 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800ca80:	2302      	movs	r3, #2
  }
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3720      	adds	r7, #32
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}
	...

0800ca8c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b08a      	sub	sp, #40	; 0x28
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	60f8      	str	r0, [r7, #12]
 800ca94:	60b9      	str	r1, [r7, #8]
 800ca96:	4613      	mov	r3, r2
 800ca98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800caa0:	2b20      	cmp	r3, #32
 800caa2:	d17a      	bne.n	800cb9a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d002      	beq.n	800cab0 <HAL_UART_Transmit_DMA+0x24>
 800caaa:	88fb      	ldrh	r3, [r7, #6]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d101      	bne.n	800cab4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800cab0:	2301      	movs	r3, #1
 800cab2:	e073      	b.n	800cb9c <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800caba:	2b01      	cmp	r3, #1
 800cabc:	d101      	bne.n	800cac2 <HAL_UART_Transmit_DMA+0x36>
 800cabe:	2302      	movs	r3, #2
 800cac0:	e06c      	b.n	800cb9c <HAL_UART_Transmit_DMA+0x110>
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	2201      	movs	r2, #1
 800cac6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	68ba      	ldr	r2, [r7, #8]
 800cace:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	88fa      	ldrh	r2, [r7, #6]
 800cad4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	88fa      	ldrh	r2, [r7, #6]
 800cadc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	2200      	movs	r2, #0
 800cae4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	2221      	movs	r2, #33	; 0x21
 800caec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d02c      	beq.n	800cb52 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cafc:	4a29      	ldr	r2, [pc, #164]	; (800cba4 <HAL_UART_Transmit_DMA+0x118>)
 800cafe:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb04:	4a28      	ldr	r2, [pc, #160]	; (800cba8 <HAL_UART_Transmit_DMA+0x11c>)
 800cb06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb0c:	4a27      	ldr	r2, [pc, #156]	; (800cbac <HAL_UART_Transmit_DMA+0x120>)
 800cb0e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb14:	2200      	movs	r2, #0
 800cb16:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb20:	4619      	mov	r1, r3
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	3328      	adds	r3, #40	; 0x28
 800cb28:	461a      	mov	r2, r3
 800cb2a:	88fb      	ldrh	r3, [r7, #6]
 800cb2c:	f7f9 f9cc 	bl	8005ec8 <HAL_DMA_Start_IT>
 800cb30:	4603      	mov	r3, r0
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d00d      	beq.n	800cb52 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	2210      	movs	r2, #16
 800cb3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	2200      	movs	r2, #0
 800cb42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	2220      	movs	r2, #32
 800cb4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800cb4e:	2301      	movs	r3, #1
 800cb50:	e024      	b.n	800cb9c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	2240      	movs	r2, #64	; 0x40
 800cb58:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	3308      	adds	r3, #8
 800cb68:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	e853 3f00 	ldrex	r3, [r3]
 800cb70:	613b      	str	r3, [r7, #16]
   return(result);
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb78:	627b      	str	r3, [r7, #36]	; 0x24
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	3308      	adds	r3, #8
 800cb80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb82:	623a      	str	r2, [r7, #32]
 800cb84:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb86:	69f9      	ldr	r1, [r7, #28]
 800cb88:	6a3a      	ldr	r2, [r7, #32]
 800cb8a:	e841 2300 	strex	r3, r2, [r1]
 800cb8e:	61bb      	str	r3, [r7, #24]
   return(result);
 800cb90:	69bb      	ldr	r3, [r7, #24]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d1e5      	bne.n	800cb62 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800cb96:	2300      	movs	r3, #0
 800cb98:	e000      	b.n	800cb9c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800cb9a:	2302      	movs	r3, #2
  }
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3728      	adds	r7, #40	; 0x28
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}
 800cba4:	0800e409 	.word	0x0800e409
 800cba8:	0800e49f 	.word	0x0800e49f
 800cbac:	0800e615 	.word	0x0800e615

0800cbb0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b0ba      	sub	sp, #232	; 0xe8
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	69db      	ldr	r3, [r3, #28]
 800cbbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	689b      	ldr	r3, [r3, #8]
 800cbd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cbd6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800cbda:	f640 030f 	movw	r3, #2063	; 0x80f
 800cbde:	4013      	ands	r3, r2
 800cbe0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800cbe4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d11b      	bne.n	800cc24 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cbec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbf0:	f003 0320 	and.w	r3, r3, #32
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d015      	beq.n	800cc24 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cbf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cbfc:	f003 0320 	and.w	r3, r3, #32
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d105      	bne.n	800cc10 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cc04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d009      	beq.n	800cc24 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	f000 835a 	beq.w	800d2ce <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	4798      	blx	r3
      }
      return;
 800cc22:	e354      	b.n	800d2ce <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cc24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	f000 811f 	beq.w	800ce6c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cc2e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cc32:	4b8b      	ldr	r3, [pc, #556]	; (800ce60 <HAL_UART_IRQHandler+0x2b0>)
 800cc34:	4013      	ands	r3, r2
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d106      	bne.n	800cc48 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cc3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cc3e:	4b89      	ldr	r3, [pc, #548]	; (800ce64 <HAL_UART_IRQHandler+0x2b4>)
 800cc40:	4013      	ands	r3, r2
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	f000 8112 	beq.w	800ce6c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cc48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc4c:	f003 0301 	and.w	r3, r3, #1
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d011      	beq.n	800cc78 <HAL_UART_IRQHandler+0xc8>
 800cc54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d00b      	beq.n	800cc78 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	2201      	movs	r2, #1
 800cc66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc6e:	f043 0201 	orr.w	r2, r3, #1
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc7c:	f003 0302 	and.w	r3, r3, #2
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d011      	beq.n	800cca8 <HAL_UART_IRQHandler+0xf8>
 800cc84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc88:	f003 0301 	and.w	r3, r3, #1
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d00b      	beq.n	800cca8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	2202      	movs	r2, #2
 800cc96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc9e:	f043 0204 	orr.w	r2, r3, #4
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ccac:	f003 0304 	and.w	r3, r3, #4
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d011      	beq.n	800ccd8 <HAL_UART_IRQHandler+0x128>
 800ccb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ccb8:	f003 0301 	and.w	r3, r3, #1
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d00b      	beq.n	800ccd8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	2204      	movs	r2, #4
 800ccc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ccce:	f043 0202 	orr.w	r2, r3, #2
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ccd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ccdc:	f003 0308 	and.w	r3, r3, #8
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d017      	beq.n	800cd14 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cce8:	f003 0320 	and.w	r3, r3, #32
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d105      	bne.n	800ccfc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ccf0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ccf4:	4b5a      	ldr	r3, [pc, #360]	; (800ce60 <HAL_UART_IRQHandler+0x2b0>)
 800ccf6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d00b      	beq.n	800cd14 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	2208      	movs	r2, #8
 800cd02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd0a:	f043 0208 	orr.w	r2, r3, #8
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cd14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d012      	beq.n	800cd46 <HAL_UART_IRQHandler+0x196>
 800cd20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d00c      	beq.n	800cd46 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cd34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd3c:	f043 0220 	orr.w	r2, r3, #32
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	f000 82c0 	beq.w	800d2d2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cd52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd56:	f003 0320 	and.w	r3, r3, #32
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d013      	beq.n	800cd86 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cd5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd62:	f003 0320 	and.w	r3, r3, #32
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d105      	bne.n	800cd76 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cd6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cd6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d007      	beq.n	800cd86 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d003      	beq.n	800cd86 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	689b      	ldr	r3, [r3, #8]
 800cd96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd9a:	2b40      	cmp	r3, #64	; 0x40
 800cd9c:	d005      	beq.n	800cdaa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cd9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cda2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d04f      	beq.n	800ce4a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f001 fac6 	bl	800e33c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	689b      	ldr	r3, [r3, #8]
 800cdb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdba:	2b40      	cmp	r3, #64	; 0x40
 800cdbc:	d141      	bne.n	800ce42 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	3308      	adds	r3, #8
 800cdc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cdcc:	e853 3f00 	ldrex	r3, [r3]
 800cdd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cdd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cdd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cddc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	3308      	adds	r3, #8
 800cde6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cdea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800cdee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cdf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cdfa:	e841 2300 	strex	r3, r2, [r1]
 800cdfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ce02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d1d9      	bne.n	800cdbe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d013      	beq.n	800ce3a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce16:	4a14      	ldr	r2, [pc, #80]	; (800ce68 <HAL_UART_IRQHandler+0x2b8>)
 800ce18:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f7f9 fdda 	bl	80069d8 <HAL_DMA_Abort_IT>
 800ce24:	4603      	mov	r3, r0
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d017      	beq.n	800ce5a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce30:	687a      	ldr	r2, [r7, #4]
 800ce32:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800ce34:	4610      	mov	r0, r2
 800ce36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce38:	e00f      	b.n	800ce5a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f000 fa74 	bl	800d328 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce40:	e00b      	b.n	800ce5a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f000 fa70 	bl	800d328 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce48:	e007      	b.n	800ce5a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f000 fa6c 	bl	800d328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2200      	movs	r2, #0
 800ce54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800ce58:	e23b      	b.n	800d2d2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce5a:	bf00      	nop
    return;
 800ce5c:	e239      	b.n	800d2d2 <HAL_UART_IRQHandler+0x722>
 800ce5e:	bf00      	nop
 800ce60:	10000001 	.word	0x10000001
 800ce64:	04000120 	.word	0x04000120
 800ce68:	0800e695 	.word	0x0800e695

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce70:	2b01      	cmp	r3, #1
 800ce72:	f040 81ce 	bne.w	800d212 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ce76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce7a:	f003 0310 	and.w	r3, r3, #16
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	f000 81c7 	beq.w	800d212 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ce84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce88:	f003 0310 	and.w	r3, r3, #16
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	f000 81c0 	beq.w	800d212 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	2210      	movs	r2, #16
 800ce98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	689b      	ldr	r3, [r3, #8]
 800cea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cea4:	2b40      	cmp	r3, #64	; 0x40
 800cea6:	f040 813b 	bne.w	800d120 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	4a8b      	ldr	r2, [pc, #556]	; (800d0e0 <HAL_UART_IRQHandler+0x530>)
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d059      	beq.n	800cf6a <HAL_UART_IRQHandler+0x3ba>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	4a89      	ldr	r2, [pc, #548]	; (800d0e4 <HAL_UART_IRQHandler+0x534>)
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d053      	beq.n	800cf6a <HAL_UART_IRQHandler+0x3ba>
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	4a87      	ldr	r2, [pc, #540]	; (800d0e8 <HAL_UART_IRQHandler+0x538>)
 800ceca:	4293      	cmp	r3, r2
 800cecc:	d04d      	beq.n	800cf6a <HAL_UART_IRQHandler+0x3ba>
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	4a85      	ldr	r2, [pc, #532]	; (800d0ec <HAL_UART_IRQHandler+0x53c>)
 800ced6:	4293      	cmp	r3, r2
 800ced8:	d047      	beq.n	800cf6a <HAL_UART_IRQHandler+0x3ba>
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	4a83      	ldr	r2, [pc, #524]	; (800d0f0 <HAL_UART_IRQHandler+0x540>)
 800cee2:	4293      	cmp	r3, r2
 800cee4:	d041      	beq.n	800cf6a <HAL_UART_IRQHandler+0x3ba>
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	4a81      	ldr	r2, [pc, #516]	; (800d0f4 <HAL_UART_IRQHandler+0x544>)
 800ceee:	4293      	cmp	r3, r2
 800cef0:	d03b      	beq.n	800cf6a <HAL_UART_IRQHandler+0x3ba>
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	4a7f      	ldr	r2, [pc, #508]	; (800d0f8 <HAL_UART_IRQHandler+0x548>)
 800cefa:	4293      	cmp	r3, r2
 800cefc:	d035      	beq.n	800cf6a <HAL_UART_IRQHandler+0x3ba>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	4a7d      	ldr	r2, [pc, #500]	; (800d0fc <HAL_UART_IRQHandler+0x54c>)
 800cf06:	4293      	cmp	r3, r2
 800cf08:	d02f      	beq.n	800cf6a <HAL_UART_IRQHandler+0x3ba>
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	4a7b      	ldr	r2, [pc, #492]	; (800d100 <HAL_UART_IRQHandler+0x550>)
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d029      	beq.n	800cf6a <HAL_UART_IRQHandler+0x3ba>
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	4a79      	ldr	r2, [pc, #484]	; (800d104 <HAL_UART_IRQHandler+0x554>)
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d023      	beq.n	800cf6a <HAL_UART_IRQHandler+0x3ba>
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	4a77      	ldr	r2, [pc, #476]	; (800d108 <HAL_UART_IRQHandler+0x558>)
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	d01d      	beq.n	800cf6a <HAL_UART_IRQHandler+0x3ba>
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	4a75      	ldr	r2, [pc, #468]	; (800d10c <HAL_UART_IRQHandler+0x55c>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d017      	beq.n	800cf6a <HAL_UART_IRQHandler+0x3ba>
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	4a73      	ldr	r2, [pc, #460]	; (800d110 <HAL_UART_IRQHandler+0x560>)
 800cf42:	4293      	cmp	r3, r2
 800cf44:	d011      	beq.n	800cf6a <HAL_UART_IRQHandler+0x3ba>
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	4a71      	ldr	r2, [pc, #452]	; (800d114 <HAL_UART_IRQHandler+0x564>)
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d00b      	beq.n	800cf6a <HAL_UART_IRQHandler+0x3ba>
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	4a6f      	ldr	r2, [pc, #444]	; (800d118 <HAL_UART_IRQHandler+0x568>)
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d005      	beq.n	800cf6a <HAL_UART_IRQHandler+0x3ba>
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	4a6d      	ldr	r2, [pc, #436]	; (800d11c <HAL_UART_IRQHandler+0x56c>)
 800cf66:	4293      	cmp	r3, r2
 800cf68:	d105      	bne.n	800cf76 <HAL_UART_IRQHandler+0x3c6>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	685b      	ldr	r3, [r3, #4]
 800cf72:	b29b      	uxth	r3, r3
 800cf74:	e004      	b.n	800cf80 <HAL_UART_IRQHandler+0x3d0>
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	685b      	ldr	r3, [r3, #4]
 800cf7e:	b29b      	uxth	r3, r3
 800cf80:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cf84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	f000 81a4 	beq.w	800d2d6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cf94:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	f080 819c 	bcs.w	800d2d6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cfa4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfac:	69db      	ldr	r3, [r3, #28]
 800cfae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cfb2:	f000 8086 	beq.w	800d0c2 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cfc2:	e853 3f00 	ldrex	r3, [r3]
 800cfc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800cfca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cfce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cfd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	461a      	mov	r2, r3
 800cfdc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cfe0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cfe4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfe8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cfec:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cff0:	e841 2300 	strex	r3, r2, [r1]
 800cff4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800cff8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d1da      	bne.n	800cfb6 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	3308      	adds	r3, #8
 800d006:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d008:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d00a:	e853 3f00 	ldrex	r3, [r3]
 800d00e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d010:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d012:	f023 0301 	bic.w	r3, r3, #1
 800d016:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	3308      	adds	r3, #8
 800d020:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d024:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d028:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d02a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d02c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d030:	e841 2300 	strex	r3, r2, [r1]
 800d034:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d036:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d1e1      	bne.n	800d000 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	3308      	adds	r3, #8
 800d042:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d044:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d046:	e853 3f00 	ldrex	r3, [r3]
 800d04a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d04c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d04e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d052:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	3308      	adds	r3, #8
 800d05c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d060:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d062:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d064:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d066:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d068:	e841 2300 	strex	r3, r2, [r1]
 800d06c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d06e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d070:	2b00      	cmp	r3, #0
 800d072:	d1e3      	bne.n	800d03c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2220      	movs	r2, #32
 800d078:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2200      	movs	r2, #0
 800d080:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d08a:	e853 3f00 	ldrex	r3, [r3]
 800d08e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d092:	f023 0310 	bic.w	r3, r3, #16
 800d096:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	461a      	mov	r2, r3
 800d0a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d0a4:	65bb      	str	r3, [r7, #88]	; 0x58
 800d0a6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d0aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d0ac:	e841 2300 	strex	r3, r2, [r1]
 800d0b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d0b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d1e4      	bne.n	800d082 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f7f9 f96d 	bl	800639c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d0ce:	b29b      	uxth	r3, r3
 800d0d0:	1ad3      	subs	r3, r2, r3
 800d0d2:	b29b      	uxth	r3, r3
 800d0d4:	4619      	mov	r1, r3
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f7f4 fae0 	bl	800169c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d0dc:	e0fb      	b.n	800d2d6 <HAL_UART_IRQHandler+0x726>
 800d0de:	bf00      	nop
 800d0e0:	40020010 	.word	0x40020010
 800d0e4:	40020028 	.word	0x40020028
 800d0e8:	40020040 	.word	0x40020040
 800d0ec:	40020058 	.word	0x40020058
 800d0f0:	40020070 	.word	0x40020070
 800d0f4:	40020088 	.word	0x40020088
 800d0f8:	400200a0 	.word	0x400200a0
 800d0fc:	400200b8 	.word	0x400200b8
 800d100:	40020410 	.word	0x40020410
 800d104:	40020428 	.word	0x40020428
 800d108:	40020440 	.word	0x40020440
 800d10c:	40020458 	.word	0x40020458
 800d110:	40020470 	.word	0x40020470
 800d114:	40020488 	.word	0x40020488
 800d118:	400204a0 	.word	0x400204a0
 800d11c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d12c:	b29b      	uxth	r3, r3
 800d12e:	1ad3      	subs	r3, r2, r3
 800d130:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d13a:	b29b      	uxth	r3, r3
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	f000 80cc 	beq.w	800d2da <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800d142:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d146:	2b00      	cmp	r3, #0
 800d148:	f000 80c7 	beq.w	800d2da <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d154:	e853 3f00 	ldrex	r3, [r3]
 800d158:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d15a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d15c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d160:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	461a      	mov	r2, r3
 800d16a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d16e:	647b      	str	r3, [r7, #68]	; 0x44
 800d170:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d172:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d174:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d176:	e841 2300 	strex	r3, r2, [r1]
 800d17a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d17c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d1e4      	bne.n	800d14c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	3308      	adds	r3, #8
 800d188:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18c:	e853 3f00 	ldrex	r3, [r3]
 800d190:	623b      	str	r3, [r7, #32]
   return(result);
 800d192:	6a3a      	ldr	r2, [r7, #32]
 800d194:	4b54      	ldr	r3, [pc, #336]	; (800d2e8 <HAL_UART_IRQHandler+0x738>)
 800d196:	4013      	ands	r3, r2
 800d198:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	3308      	adds	r3, #8
 800d1a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d1a6:	633a      	str	r2, [r7, #48]	; 0x30
 800d1a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d1ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1ae:	e841 2300 	strex	r3, r2, [r1]
 800d1b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d1e3      	bne.n	800d182 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2220      	movs	r2, #32
 800d1be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1d4:	693b      	ldr	r3, [r7, #16]
 800d1d6:	e853 3f00 	ldrex	r3, [r3]
 800d1da:	60fb      	str	r3, [r7, #12]
   return(result);
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	f023 0310 	bic.w	r3, r3, #16
 800d1e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d1f0:	61fb      	str	r3, [r7, #28]
 800d1f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1f4:	69b9      	ldr	r1, [r7, #24]
 800d1f6:	69fa      	ldr	r2, [r7, #28]
 800d1f8:	e841 2300 	strex	r3, r2, [r1]
 800d1fc:	617b      	str	r3, [r7, #20]
   return(result);
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d1e4      	bne.n	800d1ce <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d204:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d208:	4619      	mov	r1, r3
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f7f4 fa46 	bl	800169c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d210:	e063      	b.n	800d2da <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d00e      	beq.n	800d23c <HAL_UART_IRQHandler+0x68c>
 800d21e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d226:	2b00      	cmp	r3, #0
 800d228:	d008      	beq.n	800d23c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d232:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f001 fa6e 	bl	800e716 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d23a:	e051      	b.n	800d2e0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d23c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d244:	2b00      	cmp	r3, #0
 800d246:	d014      	beq.n	800d272 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d24c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d250:	2b00      	cmp	r3, #0
 800d252:	d105      	bne.n	800d260 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d254:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d258:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d008      	beq.n	800d272 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d264:	2b00      	cmp	r3, #0
 800d266:	d03a      	beq.n	800d2de <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	4798      	blx	r3
    }
    return;
 800d270:	e035      	b.n	800d2de <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d009      	beq.n	800d292 <HAL_UART_IRQHandler+0x6e2>
 800d27e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d286:	2b00      	cmp	r3, #0
 800d288:	d003      	beq.n	800d292 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f001 fa18 	bl	800e6c0 <UART_EndTransmit_IT>
    return;
 800d290:	e026      	b.n	800d2e0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d296:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d009      	beq.n	800d2b2 <HAL_UART_IRQHandler+0x702>
 800d29e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d2a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d003      	beq.n	800d2b2 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f001 fa47 	bl	800e73e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d2b0:	e016      	b.n	800d2e0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d2b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d010      	beq.n	800d2e0 <HAL_UART_IRQHandler+0x730>
 800d2be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	da0c      	bge.n	800d2e0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f001 fa2f 	bl	800e72a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d2cc:	e008      	b.n	800d2e0 <HAL_UART_IRQHandler+0x730>
      return;
 800d2ce:	bf00      	nop
 800d2d0:	e006      	b.n	800d2e0 <HAL_UART_IRQHandler+0x730>
    return;
 800d2d2:	bf00      	nop
 800d2d4:	e004      	b.n	800d2e0 <HAL_UART_IRQHandler+0x730>
      return;
 800d2d6:	bf00      	nop
 800d2d8:	e002      	b.n	800d2e0 <HAL_UART_IRQHandler+0x730>
      return;
 800d2da:	bf00      	nop
 800d2dc:	e000      	b.n	800d2e0 <HAL_UART_IRQHandler+0x730>
    return;
 800d2de:	bf00      	nop
  }
}
 800d2e0:	37e8      	adds	r7, #232	; 0xe8
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}
 800d2e6:	bf00      	nop
 800d2e8:	effffffe 	.word	0xeffffffe

0800d2ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	b083      	sub	sp, #12
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d2f4:	bf00      	nop
 800d2f6:	370c      	adds	r7, #12
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fe:	4770      	bx	lr

0800d300 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d300:	b480      	push	{r7}
 800d302:	b083      	sub	sp, #12
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d308:	bf00      	nop
 800d30a:	370c      	adds	r7, #12
 800d30c:	46bd      	mov	sp, r7
 800d30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d312:	4770      	bx	lr

0800d314 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d314:	b480      	push	{r7}
 800d316:	b083      	sub	sp, #12
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d31c:	bf00      	nop
 800d31e:	370c      	adds	r7, #12
 800d320:	46bd      	mov	sp, r7
 800d322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d326:	4770      	bx	lr

0800d328 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d328:	b480      	push	{r7}
 800d32a:	b083      	sub	sp, #12
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d330:	bf00      	nop
 800d332:	370c      	adds	r7, #12
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr

0800d33c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d33c:	b5b0      	push	{r4, r5, r7, lr}
 800d33e:	b08e      	sub	sp, #56	; 0x38
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d344:	2300      	movs	r3, #0
 800d346:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	689a      	ldr	r2, [r3, #8]
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	691b      	ldr	r3, [r3, #16]
 800d352:	431a      	orrs	r2, r3
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	695b      	ldr	r3, [r3, #20]
 800d358:	431a      	orrs	r2, r3
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	69db      	ldr	r3, [r3, #28]
 800d35e:	4313      	orrs	r3, r2
 800d360:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	681a      	ldr	r2, [r3, #0]
 800d368:	4bbf      	ldr	r3, [pc, #764]	; (800d668 <UART_SetConfig+0x32c>)
 800d36a:	4013      	ands	r3, r2
 800d36c:	687a      	ldr	r2, [r7, #4]
 800d36e:	6812      	ldr	r2, [r2, #0]
 800d370:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d372:	430b      	orrs	r3, r1
 800d374:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	685b      	ldr	r3, [r3, #4]
 800d37c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	68da      	ldr	r2, [r3, #12]
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	430a      	orrs	r2, r1
 800d38a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	699b      	ldr	r3, [r3, #24]
 800d390:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	4ab5      	ldr	r2, [pc, #724]	; (800d66c <UART_SetConfig+0x330>)
 800d398:	4293      	cmp	r3, r2
 800d39a:	d004      	beq.n	800d3a6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	6a1b      	ldr	r3, [r3, #32]
 800d3a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d3a2:	4313      	orrs	r3, r2
 800d3a4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	689a      	ldr	r2, [r3, #8]
 800d3ac:	4bb0      	ldr	r3, [pc, #704]	; (800d670 <UART_SetConfig+0x334>)
 800d3ae:	4013      	ands	r3, r2
 800d3b0:	687a      	ldr	r2, [r7, #4]
 800d3b2:	6812      	ldr	r2, [r2, #0]
 800d3b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d3b6:	430b      	orrs	r3, r1
 800d3b8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3c0:	f023 010f 	bic.w	r1, r3, #15
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	430a      	orrs	r2, r1
 800d3ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	4aa7      	ldr	r2, [pc, #668]	; (800d674 <UART_SetConfig+0x338>)
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d176      	bne.n	800d4c8 <UART_SetConfig+0x18c>
 800d3da:	4ba7      	ldr	r3, [pc, #668]	; (800d678 <UART_SetConfig+0x33c>)
 800d3dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d3e2:	2b28      	cmp	r3, #40	; 0x28
 800d3e4:	d86c      	bhi.n	800d4c0 <UART_SetConfig+0x184>
 800d3e6:	a201      	add	r2, pc, #4	; (adr r2, 800d3ec <UART_SetConfig+0xb0>)
 800d3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ec:	0800d491 	.word	0x0800d491
 800d3f0:	0800d4c1 	.word	0x0800d4c1
 800d3f4:	0800d4c1 	.word	0x0800d4c1
 800d3f8:	0800d4c1 	.word	0x0800d4c1
 800d3fc:	0800d4c1 	.word	0x0800d4c1
 800d400:	0800d4c1 	.word	0x0800d4c1
 800d404:	0800d4c1 	.word	0x0800d4c1
 800d408:	0800d4c1 	.word	0x0800d4c1
 800d40c:	0800d499 	.word	0x0800d499
 800d410:	0800d4c1 	.word	0x0800d4c1
 800d414:	0800d4c1 	.word	0x0800d4c1
 800d418:	0800d4c1 	.word	0x0800d4c1
 800d41c:	0800d4c1 	.word	0x0800d4c1
 800d420:	0800d4c1 	.word	0x0800d4c1
 800d424:	0800d4c1 	.word	0x0800d4c1
 800d428:	0800d4c1 	.word	0x0800d4c1
 800d42c:	0800d4a1 	.word	0x0800d4a1
 800d430:	0800d4c1 	.word	0x0800d4c1
 800d434:	0800d4c1 	.word	0x0800d4c1
 800d438:	0800d4c1 	.word	0x0800d4c1
 800d43c:	0800d4c1 	.word	0x0800d4c1
 800d440:	0800d4c1 	.word	0x0800d4c1
 800d444:	0800d4c1 	.word	0x0800d4c1
 800d448:	0800d4c1 	.word	0x0800d4c1
 800d44c:	0800d4a9 	.word	0x0800d4a9
 800d450:	0800d4c1 	.word	0x0800d4c1
 800d454:	0800d4c1 	.word	0x0800d4c1
 800d458:	0800d4c1 	.word	0x0800d4c1
 800d45c:	0800d4c1 	.word	0x0800d4c1
 800d460:	0800d4c1 	.word	0x0800d4c1
 800d464:	0800d4c1 	.word	0x0800d4c1
 800d468:	0800d4c1 	.word	0x0800d4c1
 800d46c:	0800d4b1 	.word	0x0800d4b1
 800d470:	0800d4c1 	.word	0x0800d4c1
 800d474:	0800d4c1 	.word	0x0800d4c1
 800d478:	0800d4c1 	.word	0x0800d4c1
 800d47c:	0800d4c1 	.word	0x0800d4c1
 800d480:	0800d4c1 	.word	0x0800d4c1
 800d484:	0800d4c1 	.word	0x0800d4c1
 800d488:	0800d4c1 	.word	0x0800d4c1
 800d48c:	0800d4b9 	.word	0x0800d4b9
 800d490:	2301      	movs	r3, #1
 800d492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d496:	e222      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d498:	2304      	movs	r3, #4
 800d49a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d49e:	e21e      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d4a0:	2308      	movs	r3, #8
 800d4a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d4a6:	e21a      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d4a8:	2310      	movs	r3, #16
 800d4aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d4ae:	e216      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d4b0:	2320      	movs	r3, #32
 800d4b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d4b6:	e212      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d4b8:	2340      	movs	r3, #64	; 0x40
 800d4ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d4be:	e20e      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d4c0:	2380      	movs	r3, #128	; 0x80
 800d4c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d4c6:	e20a      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	4a6b      	ldr	r2, [pc, #428]	; (800d67c <UART_SetConfig+0x340>)
 800d4ce:	4293      	cmp	r3, r2
 800d4d0:	d130      	bne.n	800d534 <UART_SetConfig+0x1f8>
 800d4d2:	4b69      	ldr	r3, [pc, #420]	; (800d678 <UART_SetConfig+0x33c>)
 800d4d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4d6:	f003 0307 	and.w	r3, r3, #7
 800d4da:	2b05      	cmp	r3, #5
 800d4dc:	d826      	bhi.n	800d52c <UART_SetConfig+0x1f0>
 800d4de:	a201      	add	r2, pc, #4	; (adr r2, 800d4e4 <UART_SetConfig+0x1a8>)
 800d4e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4e4:	0800d4fd 	.word	0x0800d4fd
 800d4e8:	0800d505 	.word	0x0800d505
 800d4ec:	0800d50d 	.word	0x0800d50d
 800d4f0:	0800d515 	.word	0x0800d515
 800d4f4:	0800d51d 	.word	0x0800d51d
 800d4f8:	0800d525 	.word	0x0800d525
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d502:	e1ec      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d504:	2304      	movs	r3, #4
 800d506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d50a:	e1e8      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d50c:	2308      	movs	r3, #8
 800d50e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d512:	e1e4      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d514:	2310      	movs	r3, #16
 800d516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d51a:	e1e0      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d51c:	2320      	movs	r3, #32
 800d51e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d522:	e1dc      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d524:	2340      	movs	r3, #64	; 0x40
 800d526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d52a:	e1d8      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d52c:	2380      	movs	r3, #128	; 0x80
 800d52e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d532:	e1d4      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4a51      	ldr	r2, [pc, #324]	; (800d680 <UART_SetConfig+0x344>)
 800d53a:	4293      	cmp	r3, r2
 800d53c:	d130      	bne.n	800d5a0 <UART_SetConfig+0x264>
 800d53e:	4b4e      	ldr	r3, [pc, #312]	; (800d678 <UART_SetConfig+0x33c>)
 800d540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d542:	f003 0307 	and.w	r3, r3, #7
 800d546:	2b05      	cmp	r3, #5
 800d548:	d826      	bhi.n	800d598 <UART_SetConfig+0x25c>
 800d54a:	a201      	add	r2, pc, #4	; (adr r2, 800d550 <UART_SetConfig+0x214>)
 800d54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d550:	0800d569 	.word	0x0800d569
 800d554:	0800d571 	.word	0x0800d571
 800d558:	0800d579 	.word	0x0800d579
 800d55c:	0800d581 	.word	0x0800d581
 800d560:	0800d589 	.word	0x0800d589
 800d564:	0800d591 	.word	0x0800d591
 800d568:	2300      	movs	r3, #0
 800d56a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d56e:	e1b6      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d570:	2304      	movs	r3, #4
 800d572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d576:	e1b2      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d578:	2308      	movs	r3, #8
 800d57a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d57e:	e1ae      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d580:	2310      	movs	r3, #16
 800d582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d586:	e1aa      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d588:	2320      	movs	r3, #32
 800d58a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d58e:	e1a6      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d590:	2340      	movs	r3, #64	; 0x40
 800d592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d596:	e1a2      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d598:	2380      	movs	r3, #128	; 0x80
 800d59a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d59e:	e19e      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	4a37      	ldr	r2, [pc, #220]	; (800d684 <UART_SetConfig+0x348>)
 800d5a6:	4293      	cmp	r3, r2
 800d5a8:	d130      	bne.n	800d60c <UART_SetConfig+0x2d0>
 800d5aa:	4b33      	ldr	r3, [pc, #204]	; (800d678 <UART_SetConfig+0x33c>)
 800d5ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5ae:	f003 0307 	and.w	r3, r3, #7
 800d5b2:	2b05      	cmp	r3, #5
 800d5b4:	d826      	bhi.n	800d604 <UART_SetConfig+0x2c8>
 800d5b6:	a201      	add	r2, pc, #4	; (adr r2, 800d5bc <UART_SetConfig+0x280>)
 800d5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5bc:	0800d5d5 	.word	0x0800d5d5
 800d5c0:	0800d5dd 	.word	0x0800d5dd
 800d5c4:	0800d5e5 	.word	0x0800d5e5
 800d5c8:	0800d5ed 	.word	0x0800d5ed
 800d5cc:	0800d5f5 	.word	0x0800d5f5
 800d5d0:	0800d5fd 	.word	0x0800d5fd
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d5da:	e180      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d5dc:	2304      	movs	r3, #4
 800d5de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d5e2:	e17c      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d5e4:	2308      	movs	r3, #8
 800d5e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d5ea:	e178      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d5ec:	2310      	movs	r3, #16
 800d5ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d5f2:	e174      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d5f4:	2320      	movs	r3, #32
 800d5f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d5fa:	e170      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d5fc:	2340      	movs	r3, #64	; 0x40
 800d5fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d602:	e16c      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d604:	2380      	movs	r3, #128	; 0x80
 800d606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d60a:	e168      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	4a1d      	ldr	r2, [pc, #116]	; (800d688 <UART_SetConfig+0x34c>)
 800d612:	4293      	cmp	r3, r2
 800d614:	d142      	bne.n	800d69c <UART_SetConfig+0x360>
 800d616:	4b18      	ldr	r3, [pc, #96]	; (800d678 <UART_SetConfig+0x33c>)
 800d618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d61a:	f003 0307 	and.w	r3, r3, #7
 800d61e:	2b05      	cmp	r3, #5
 800d620:	d838      	bhi.n	800d694 <UART_SetConfig+0x358>
 800d622:	a201      	add	r2, pc, #4	; (adr r2, 800d628 <UART_SetConfig+0x2ec>)
 800d624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d628:	0800d641 	.word	0x0800d641
 800d62c:	0800d649 	.word	0x0800d649
 800d630:	0800d651 	.word	0x0800d651
 800d634:	0800d659 	.word	0x0800d659
 800d638:	0800d661 	.word	0x0800d661
 800d63c:	0800d68d 	.word	0x0800d68d
 800d640:	2300      	movs	r3, #0
 800d642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d646:	e14a      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d648:	2304      	movs	r3, #4
 800d64a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d64e:	e146      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d650:	2308      	movs	r3, #8
 800d652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d656:	e142      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d658:	2310      	movs	r3, #16
 800d65a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d65e:	e13e      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d660:	2320      	movs	r3, #32
 800d662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d666:	e13a      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d668:	cfff69f3 	.word	0xcfff69f3
 800d66c:	58000c00 	.word	0x58000c00
 800d670:	11fff4ff 	.word	0x11fff4ff
 800d674:	40011000 	.word	0x40011000
 800d678:	58024400 	.word	0x58024400
 800d67c:	40004400 	.word	0x40004400
 800d680:	40004800 	.word	0x40004800
 800d684:	40004c00 	.word	0x40004c00
 800d688:	40005000 	.word	0x40005000
 800d68c:	2340      	movs	r3, #64	; 0x40
 800d68e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d692:	e124      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d694:	2380      	movs	r3, #128	; 0x80
 800d696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d69a:	e120      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	4acc      	ldr	r2, [pc, #816]	; (800d9d4 <UART_SetConfig+0x698>)
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	d176      	bne.n	800d794 <UART_SetConfig+0x458>
 800d6a6:	4bcc      	ldr	r3, [pc, #816]	; (800d9d8 <UART_SetConfig+0x69c>)
 800d6a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d6ae:	2b28      	cmp	r3, #40	; 0x28
 800d6b0:	d86c      	bhi.n	800d78c <UART_SetConfig+0x450>
 800d6b2:	a201      	add	r2, pc, #4	; (adr r2, 800d6b8 <UART_SetConfig+0x37c>)
 800d6b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6b8:	0800d75d 	.word	0x0800d75d
 800d6bc:	0800d78d 	.word	0x0800d78d
 800d6c0:	0800d78d 	.word	0x0800d78d
 800d6c4:	0800d78d 	.word	0x0800d78d
 800d6c8:	0800d78d 	.word	0x0800d78d
 800d6cc:	0800d78d 	.word	0x0800d78d
 800d6d0:	0800d78d 	.word	0x0800d78d
 800d6d4:	0800d78d 	.word	0x0800d78d
 800d6d8:	0800d765 	.word	0x0800d765
 800d6dc:	0800d78d 	.word	0x0800d78d
 800d6e0:	0800d78d 	.word	0x0800d78d
 800d6e4:	0800d78d 	.word	0x0800d78d
 800d6e8:	0800d78d 	.word	0x0800d78d
 800d6ec:	0800d78d 	.word	0x0800d78d
 800d6f0:	0800d78d 	.word	0x0800d78d
 800d6f4:	0800d78d 	.word	0x0800d78d
 800d6f8:	0800d76d 	.word	0x0800d76d
 800d6fc:	0800d78d 	.word	0x0800d78d
 800d700:	0800d78d 	.word	0x0800d78d
 800d704:	0800d78d 	.word	0x0800d78d
 800d708:	0800d78d 	.word	0x0800d78d
 800d70c:	0800d78d 	.word	0x0800d78d
 800d710:	0800d78d 	.word	0x0800d78d
 800d714:	0800d78d 	.word	0x0800d78d
 800d718:	0800d775 	.word	0x0800d775
 800d71c:	0800d78d 	.word	0x0800d78d
 800d720:	0800d78d 	.word	0x0800d78d
 800d724:	0800d78d 	.word	0x0800d78d
 800d728:	0800d78d 	.word	0x0800d78d
 800d72c:	0800d78d 	.word	0x0800d78d
 800d730:	0800d78d 	.word	0x0800d78d
 800d734:	0800d78d 	.word	0x0800d78d
 800d738:	0800d77d 	.word	0x0800d77d
 800d73c:	0800d78d 	.word	0x0800d78d
 800d740:	0800d78d 	.word	0x0800d78d
 800d744:	0800d78d 	.word	0x0800d78d
 800d748:	0800d78d 	.word	0x0800d78d
 800d74c:	0800d78d 	.word	0x0800d78d
 800d750:	0800d78d 	.word	0x0800d78d
 800d754:	0800d78d 	.word	0x0800d78d
 800d758:	0800d785 	.word	0x0800d785
 800d75c:	2301      	movs	r3, #1
 800d75e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d762:	e0bc      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d764:	2304      	movs	r3, #4
 800d766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d76a:	e0b8      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d76c:	2308      	movs	r3, #8
 800d76e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d772:	e0b4      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d774:	2310      	movs	r3, #16
 800d776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d77a:	e0b0      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d77c:	2320      	movs	r3, #32
 800d77e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d782:	e0ac      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d784:	2340      	movs	r3, #64	; 0x40
 800d786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d78a:	e0a8      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d78c:	2380      	movs	r3, #128	; 0x80
 800d78e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d792:	e0a4      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	4a90      	ldr	r2, [pc, #576]	; (800d9dc <UART_SetConfig+0x6a0>)
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d130      	bne.n	800d800 <UART_SetConfig+0x4c4>
 800d79e:	4b8e      	ldr	r3, [pc, #568]	; (800d9d8 <UART_SetConfig+0x69c>)
 800d7a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7a2:	f003 0307 	and.w	r3, r3, #7
 800d7a6:	2b05      	cmp	r3, #5
 800d7a8:	d826      	bhi.n	800d7f8 <UART_SetConfig+0x4bc>
 800d7aa:	a201      	add	r2, pc, #4	; (adr r2, 800d7b0 <UART_SetConfig+0x474>)
 800d7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7b0:	0800d7c9 	.word	0x0800d7c9
 800d7b4:	0800d7d1 	.word	0x0800d7d1
 800d7b8:	0800d7d9 	.word	0x0800d7d9
 800d7bc:	0800d7e1 	.word	0x0800d7e1
 800d7c0:	0800d7e9 	.word	0x0800d7e9
 800d7c4:	0800d7f1 	.word	0x0800d7f1
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d7ce:	e086      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d7d0:	2304      	movs	r3, #4
 800d7d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d7d6:	e082      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d7d8:	2308      	movs	r3, #8
 800d7da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d7de:	e07e      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d7e0:	2310      	movs	r3, #16
 800d7e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d7e6:	e07a      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d7e8:	2320      	movs	r3, #32
 800d7ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d7ee:	e076      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d7f0:	2340      	movs	r3, #64	; 0x40
 800d7f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d7f6:	e072      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d7f8:	2380      	movs	r3, #128	; 0x80
 800d7fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d7fe:	e06e      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	4a76      	ldr	r2, [pc, #472]	; (800d9e0 <UART_SetConfig+0x6a4>)
 800d806:	4293      	cmp	r3, r2
 800d808:	d130      	bne.n	800d86c <UART_SetConfig+0x530>
 800d80a:	4b73      	ldr	r3, [pc, #460]	; (800d9d8 <UART_SetConfig+0x69c>)
 800d80c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d80e:	f003 0307 	and.w	r3, r3, #7
 800d812:	2b05      	cmp	r3, #5
 800d814:	d826      	bhi.n	800d864 <UART_SetConfig+0x528>
 800d816:	a201      	add	r2, pc, #4	; (adr r2, 800d81c <UART_SetConfig+0x4e0>)
 800d818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d81c:	0800d835 	.word	0x0800d835
 800d820:	0800d83d 	.word	0x0800d83d
 800d824:	0800d845 	.word	0x0800d845
 800d828:	0800d84d 	.word	0x0800d84d
 800d82c:	0800d855 	.word	0x0800d855
 800d830:	0800d85d 	.word	0x0800d85d
 800d834:	2300      	movs	r3, #0
 800d836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d83a:	e050      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d83c:	2304      	movs	r3, #4
 800d83e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d842:	e04c      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d844:	2308      	movs	r3, #8
 800d846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d84a:	e048      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d84c:	2310      	movs	r3, #16
 800d84e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d852:	e044      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d854:	2320      	movs	r3, #32
 800d856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d85a:	e040      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d85c:	2340      	movs	r3, #64	; 0x40
 800d85e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d862:	e03c      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d864:	2380      	movs	r3, #128	; 0x80
 800d866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d86a:	e038      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	4a5c      	ldr	r2, [pc, #368]	; (800d9e4 <UART_SetConfig+0x6a8>)
 800d872:	4293      	cmp	r3, r2
 800d874:	d130      	bne.n	800d8d8 <UART_SetConfig+0x59c>
 800d876:	4b58      	ldr	r3, [pc, #352]	; (800d9d8 <UART_SetConfig+0x69c>)
 800d878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d87a:	f003 0307 	and.w	r3, r3, #7
 800d87e:	2b05      	cmp	r3, #5
 800d880:	d826      	bhi.n	800d8d0 <UART_SetConfig+0x594>
 800d882:	a201      	add	r2, pc, #4	; (adr r2, 800d888 <UART_SetConfig+0x54c>)
 800d884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d888:	0800d8a1 	.word	0x0800d8a1
 800d88c:	0800d8a9 	.word	0x0800d8a9
 800d890:	0800d8b1 	.word	0x0800d8b1
 800d894:	0800d8b9 	.word	0x0800d8b9
 800d898:	0800d8c1 	.word	0x0800d8c1
 800d89c:	0800d8c9 	.word	0x0800d8c9
 800d8a0:	2302      	movs	r3, #2
 800d8a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d8a6:	e01a      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d8a8:	2304      	movs	r3, #4
 800d8aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d8ae:	e016      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d8b0:	2308      	movs	r3, #8
 800d8b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d8b6:	e012      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d8b8:	2310      	movs	r3, #16
 800d8ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d8be:	e00e      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d8c0:	2320      	movs	r3, #32
 800d8c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d8c6:	e00a      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d8c8:	2340      	movs	r3, #64	; 0x40
 800d8ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d8ce:	e006      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d8d0:	2380      	movs	r3, #128	; 0x80
 800d8d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d8d6:	e002      	b.n	800d8de <UART_SetConfig+0x5a2>
 800d8d8:	2380      	movs	r3, #128	; 0x80
 800d8da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	4a40      	ldr	r2, [pc, #256]	; (800d9e4 <UART_SetConfig+0x6a8>)
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	f040 80ef 	bne.w	800dac8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d8ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d8ee:	2b20      	cmp	r3, #32
 800d8f0:	dc46      	bgt.n	800d980 <UART_SetConfig+0x644>
 800d8f2:	2b02      	cmp	r3, #2
 800d8f4:	f2c0 8081 	blt.w	800d9fa <UART_SetConfig+0x6be>
 800d8f8:	3b02      	subs	r3, #2
 800d8fa:	2b1e      	cmp	r3, #30
 800d8fc:	d87d      	bhi.n	800d9fa <UART_SetConfig+0x6be>
 800d8fe:	a201      	add	r2, pc, #4	; (adr r2, 800d904 <UART_SetConfig+0x5c8>)
 800d900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d904:	0800d987 	.word	0x0800d987
 800d908:	0800d9fb 	.word	0x0800d9fb
 800d90c:	0800d98f 	.word	0x0800d98f
 800d910:	0800d9fb 	.word	0x0800d9fb
 800d914:	0800d9fb 	.word	0x0800d9fb
 800d918:	0800d9fb 	.word	0x0800d9fb
 800d91c:	0800d99f 	.word	0x0800d99f
 800d920:	0800d9fb 	.word	0x0800d9fb
 800d924:	0800d9fb 	.word	0x0800d9fb
 800d928:	0800d9fb 	.word	0x0800d9fb
 800d92c:	0800d9fb 	.word	0x0800d9fb
 800d930:	0800d9fb 	.word	0x0800d9fb
 800d934:	0800d9fb 	.word	0x0800d9fb
 800d938:	0800d9fb 	.word	0x0800d9fb
 800d93c:	0800d9af 	.word	0x0800d9af
 800d940:	0800d9fb 	.word	0x0800d9fb
 800d944:	0800d9fb 	.word	0x0800d9fb
 800d948:	0800d9fb 	.word	0x0800d9fb
 800d94c:	0800d9fb 	.word	0x0800d9fb
 800d950:	0800d9fb 	.word	0x0800d9fb
 800d954:	0800d9fb 	.word	0x0800d9fb
 800d958:	0800d9fb 	.word	0x0800d9fb
 800d95c:	0800d9fb 	.word	0x0800d9fb
 800d960:	0800d9fb 	.word	0x0800d9fb
 800d964:	0800d9fb 	.word	0x0800d9fb
 800d968:	0800d9fb 	.word	0x0800d9fb
 800d96c:	0800d9fb 	.word	0x0800d9fb
 800d970:	0800d9fb 	.word	0x0800d9fb
 800d974:	0800d9fb 	.word	0x0800d9fb
 800d978:	0800d9fb 	.word	0x0800d9fb
 800d97c:	0800d9ed 	.word	0x0800d9ed
 800d980:	2b40      	cmp	r3, #64	; 0x40
 800d982:	d036      	beq.n	800d9f2 <UART_SetConfig+0x6b6>
 800d984:	e039      	b.n	800d9fa <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d986:	f7fc fe93 	bl	800a6b0 <HAL_RCCEx_GetD3PCLK1Freq>
 800d98a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d98c:	e03b      	b.n	800da06 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d98e:	f107 0314 	add.w	r3, r7, #20
 800d992:	4618      	mov	r0, r3
 800d994:	f7fc fea2 	bl	800a6dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d998:	69bb      	ldr	r3, [r7, #24]
 800d99a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d99c:	e033      	b.n	800da06 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d99e:	f107 0308 	add.w	r3, r7, #8
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f7fc ffee 	bl	800a984 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d9ac:	e02b      	b.n	800da06 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d9ae:	4b0a      	ldr	r3, [pc, #40]	; (800d9d8 <UART_SetConfig+0x69c>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	f003 0320 	and.w	r3, r3, #32
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d009      	beq.n	800d9ce <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d9ba:	4b07      	ldr	r3, [pc, #28]	; (800d9d8 <UART_SetConfig+0x69c>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	08db      	lsrs	r3, r3, #3
 800d9c0:	f003 0303 	and.w	r3, r3, #3
 800d9c4:	4a08      	ldr	r2, [pc, #32]	; (800d9e8 <UART_SetConfig+0x6ac>)
 800d9c6:	fa22 f303 	lsr.w	r3, r2, r3
 800d9ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d9cc:	e01b      	b.n	800da06 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800d9ce:	4b06      	ldr	r3, [pc, #24]	; (800d9e8 <UART_SetConfig+0x6ac>)
 800d9d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d9d2:	e018      	b.n	800da06 <UART_SetConfig+0x6ca>
 800d9d4:	40011400 	.word	0x40011400
 800d9d8:	58024400 	.word	0x58024400
 800d9dc:	40007800 	.word	0x40007800
 800d9e0:	40007c00 	.word	0x40007c00
 800d9e4:	58000c00 	.word	0x58000c00
 800d9e8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d9ec:	4bc4      	ldr	r3, [pc, #784]	; (800dd00 <UART_SetConfig+0x9c4>)
 800d9ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d9f0:	e009      	b.n	800da06 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d9f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d9f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d9f8:	e005      	b.n	800da06 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d9fe:	2301      	movs	r3, #1
 800da00:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800da04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800da06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da08:	2b00      	cmp	r3, #0
 800da0a:	f000 81da 	beq.w	800ddc2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da12:	4abc      	ldr	r2, [pc, #752]	; (800dd04 <UART_SetConfig+0x9c8>)
 800da14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da18:	461a      	mov	r2, r3
 800da1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da1c:	fbb3 f3f2 	udiv	r3, r3, r2
 800da20:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	685a      	ldr	r2, [r3, #4]
 800da26:	4613      	mov	r3, r2
 800da28:	005b      	lsls	r3, r3, #1
 800da2a:	4413      	add	r3, r2
 800da2c:	6a3a      	ldr	r2, [r7, #32]
 800da2e:	429a      	cmp	r2, r3
 800da30:	d305      	bcc.n	800da3e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	685b      	ldr	r3, [r3, #4]
 800da36:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800da38:	6a3a      	ldr	r2, [r7, #32]
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d903      	bls.n	800da46 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800da3e:	2301      	movs	r3, #1
 800da40:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800da44:	e1bd      	b.n	800ddc2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da48:	4618      	mov	r0, r3
 800da4a:	f04f 0100 	mov.w	r1, #0
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da52:	4aac      	ldr	r2, [pc, #688]	; (800dd04 <UART_SetConfig+0x9c8>)
 800da54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da58:	b29a      	uxth	r2, r3
 800da5a:	f04f 0300 	mov.w	r3, #0
 800da5e:	f7f2 fe53 	bl	8000708 <__aeabi_uldivmod>
 800da62:	4602      	mov	r2, r0
 800da64:	460b      	mov	r3, r1
 800da66:	4610      	mov	r0, r2
 800da68:	4619      	mov	r1, r3
 800da6a:	f04f 0200 	mov.w	r2, #0
 800da6e:	f04f 0300 	mov.w	r3, #0
 800da72:	020b      	lsls	r3, r1, #8
 800da74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800da78:	0202      	lsls	r2, r0, #8
 800da7a:	6879      	ldr	r1, [r7, #4]
 800da7c:	6849      	ldr	r1, [r1, #4]
 800da7e:	0849      	lsrs	r1, r1, #1
 800da80:	4608      	mov	r0, r1
 800da82:	f04f 0100 	mov.w	r1, #0
 800da86:	1814      	adds	r4, r2, r0
 800da88:	eb43 0501 	adc.w	r5, r3, r1
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	685b      	ldr	r3, [r3, #4]
 800da90:	461a      	mov	r2, r3
 800da92:	f04f 0300 	mov.w	r3, #0
 800da96:	4620      	mov	r0, r4
 800da98:	4629      	mov	r1, r5
 800da9a:	f7f2 fe35 	bl	8000708 <__aeabi_uldivmod>
 800da9e:	4602      	mov	r2, r0
 800daa0:	460b      	mov	r3, r1
 800daa2:	4613      	mov	r3, r2
 800daa4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800daa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daa8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800daac:	d308      	bcc.n	800dac0 <UART_SetConfig+0x784>
 800daae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dab4:	d204      	bcs.n	800dac0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dabc:	60da      	str	r2, [r3, #12]
 800dabe:	e180      	b.n	800ddc2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800dac0:	2301      	movs	r3, #1
 800dac2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800dac6:	e17c      	b.n	800ddc2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	69db      	ldr	r3, [r3, #28]
 800dacc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dad0:	f040 80be 	bne.w	800dc50 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800dad4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dad8:	2b20      	cmp	r3, #32
 800dada:	dc49      	bgt.n	800db70 <UART_SetConfig+0x834>
 800dadc:	2b00      	cmp	r3, #0
 800dade:	db7c      	blt.n	800dbda <UART_SetConfig+0x89e>
 800dae0:	2b20      	cmp	r3, #32
 800dae2:	d87a      	bhi.n	800dbda <UART_SetConfig+0x89e>
 800dae4:	a201      	add	r2, pc, #4	; (adr r2, 800daec <UART_SetConfig+0x7b0>)
 800dae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daea:	bf00      	nop
 800daec:	0800db77 	.word	0x0800db77
 800daf0:	0800db7f 	.word	0x0800db7f
 800daf4:	0800dbdb 	.word	0x0800dbdb
 800daf8:	0800dbdb 	.word	0x0800dbdb
 800dafc:	0800db87 	.word	0x0800db87
 800db00:	0800dbdb 	.word	0x0800dbdb
 800db04:	0800dbdb 	.word	0x0800dbdb
 800db08:	0800dbdb 	.word	0x0800dbdb
 800db0c:	0800db97 	.word	0x0800db97
 800db10:	0800dbdb 	.word	0x0800dbdb
 800db14:	0800dbdb 	.word	0x0800dbdb
 800db18:	0800dbdb 	.word	0x0800dbdb
 800db1c:	0800dbdb 	.word	0x0800dbdb
 800db20:	0800dbdb 	.word	0x0800dbdb
 800db24:	0800dbdb 	.word	0x0800dbdb
 800db28:	0800dbdb 	.word	0x0800dbdb
 800db2c:	0800dba7 	.word	0x0800dba7
 800db30:	0800dbdb 	.word	0x0800dbdb
 800db34:	0800dbdb 	.word	0x0800dbdb
 800db38:	0800dbdb 	.word	0x0800dbdb
 800db3c:	0800dbdb 	.word	0x0800dbdb
 800db40:	0800dbdb 	.word	0x0800dbdb
 800db44:	0800dbdb 	.word	0x0800dbdb
 800db48:	0800dbdb 	.word	0x0800dbdb
 800db4c:	0800dbdb 	.word	0x0800dbdb
 800db50:	0800dbdb 	.word	0x0800dbdb
 800db54:	0800dbdb 	.word	0x0800dbdb
 800db58:	0800dbdb 	.word	0x0800dbdb
 800db5c:	0800dbdb 	.word	0x0800dbdb
 800db60:	0800dbdb 	.word	0x0800dbdb
 800db64:	0800dbdb 	.word	0x0800dbdb
 800db68:	0800dbdb 	.word	0x0800dbdb
 800db6c:	0800dbcd 	.word	0x0800dbcd
 800db70:	2b40      	cmp	r3, #64	; 0x40
 800db72:	d02e      	beq.n	800dbd2 <UART_SetConfig+0x896>
 800db74:	e031      	b.n	800dbda <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800db76:	f7fb fe2f 	bl	80097d8 <HAL_RCC_GetPCLK1Freq>
 800db7a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800db7c:	e033      	b.n	800dbe6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800db7e:	f7fb fe41 	bl	8009804 <HAL_RCC_GetPCLK2Freq>
 800db82:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800db84:	e02f      	b.n	800dbe6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db86:	f107 0314 	add.w	r3, r7, #20
 800db8a:	4618      	mov	r0, r3
 800db8c:	f7fc fda6 	bl	800a6dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800db90:	69bb      	ldr	r3, [r7, #24]
 800db92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800db94:	e027      	b.n	800dbe6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db96:	f107 0308 	add.w	r3, r7, #8
 800db9a:	4618      	mov	r0, r3
 800db9c:	f7fc fef2 	bl	800a984 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dba4:	e01f      	b.n	800dbe6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dba6:	4b58      	ldr	r3, [pc, #352]	; (800dd08 <UART_SetConfig+0x9cc>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	f003 0320 	and.w	r3, r3, #32
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d009      	beq.n	800dbc6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dbb2:	4b55      	ldr	r3, [pc, #340]	; (800dd08 <UART_SetConfig+0x9cc>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	08db      	lsrs	r3, r3, #3
 800dbb8:	f003 0303 	and.w	r3, r3, #3
 800dbbc:	4a53      	ldr	r2, [pc, #332]	; (800dd0c <UART_SetConfig+0x9d0>)
 800dbbe:	fa22 f303 	lsr.w	r3, r2, r3
 800dbc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dbc4:	e00f      	b.n	800dbe6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800dbc6:	4b51      	ldr	r3, [pc, #324]	; (800dd0c <UART_SetConfig+0x9d0>)
 800dbc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dbca:	e00c      	b.n	800dbe6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dbcc:	4b4c      	ldr	r3, [pc, #304]	; (800dd00 <UART_SetConfig+0x9c4>)
 800dbce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dbd0:	e009      	b.n	800dbe6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dbd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dbd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dbd8:	e005      	b.n	800dbe6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800dbde:	2301      	movs	r3, #1
 800dbe0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800dbe4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	f000 80ea 	beq.w	800ddc2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbf2:	4a44      	ldr	r2, [pc, #272]	; (800dd04 <UART_SetConfig+0x9c8>)
 800dbf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dbf8:	461a      	mov	r2, r3
 800dbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbfc:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc00:	005a      	lsls	r2, r3, #1
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	685b      	ldr	r3, [r3, #4]
 800dc06:	085b      	lsrs	r3, r3, #1
 800dc08:	441a      	add	r2, r3
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	685b      	ldr	r3, [r3, #4]
 800dc0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc12:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc16:	2b0f      	cmp	r3, #15
 800dc18:	d916      	bls.n	800dc48 <UART_SetConfig+0x90c>
 800dc1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc20:	d212      	bcs.n	800dc48 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dc22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc24:	b29b      	uxth	r3, r3
 800dc26:	f023 030f 	bic.w	r3, r3, #15
 800dc2a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dc2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc2e:	085b      	lsrs	r3, r3, #1
 800dc30:	b29b      	uxth	r3, r3
 800dc32:	f003 0307 	and.w	r3, r3, #7
 800dc36:	b29a      	uxth	r2, r3
 800dc38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dc3a:	4313      	orrs	r3, r2
 800dc3c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dc44:	60da      	str	r2, [r3, #12]
 800dc46:	e0bc      	b.n	800ddc2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800dc48:	2301      	movs	r3, #1
 800dc4a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800dc4e:	e0b8      	b.n	800ddc2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800dc50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dc54:	2b20      	cmp	r3, #32
 800dc56:	dc4b      	bgt.n	800dcf0 <UART_SetConfig+0x9b4>
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	f2c0 8087 	blt.w	800dd6c <UART_SetConfig+0xa30>
 800dc5e:	2b20      	cmp	r3, #32
 800dc60:	f200 8084 	bhi.w	800dd6c <UART_SetConfig+0xa30>
 800dc64:	a201      	add	r2, pc, #4	; (adr r2, 800dc6c <UART_SetConfig+0x930>)
 800dc66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc6a:	bf00      	nop
 800dc6c:	0800dcf7 	.word	0x0800dcf7
 800dc70:	0800dd11 	.word	0x0800dd11
 800dc74:	0800dd6d 	.word	0x0800dd6d
 800dc78:	0800dd6d 	.word	0x0800dd6d
 800dc7c:	0800dd19 	.word	0x0800dd19
 800dc80:	0800dd6d 	.word	0x0800dd6d
 800dc84:	0800dd6d 	.word	0x0800dd6d
 800dc88:	0800dd6d 	.word	0x0800dd6d
 800dc8c:	0800dd29 	.word	0x0800dd29
 800dc90:	0800dd6d 	.word	0x0800dd6d
 800dc94:	0800dd6d 	.word	0x0800dd6d
 800dc98:	0800dd6d 	.word	0x0800dd6d
 800dc9c:	0800dd6d 	.word	0x0800dd6d
 800dca0:	0800dd6d 	.word	0x0800dd6d
 800dca4:	0800dd6d 	.word	0x0800dd6d
 800dca8:	0800dd6d 	.word	0x0800dd6d
 800dcac:	0800dd39 	.word	0x0800dd39
 800dcb0:	0800dd6d 	.word	0x0800dd6d
 800dcb4:	0800dd6d 	.word	0x0800dd6d
 800dcb8:	0800dd6d 	.word	0x0800dd6d
 800dcbc:	0800dd6d 	.word	0x0800dd6d
 800dcc0:	0800dd6d 	.word	0x0800dd6d
 800dcc4:	0800dd6d 	.word	0x0800dd6d
 800dcc8:	0800dd6d 	.word	0x0800dd6d
 800dccc:	0800dd6d 	.word	0x0800dd6d
 800dcd0:	0800dd6d 	.word	0x0800dd6d
 800dcd4:	0800dd6d 	.word	0x0800dd6d
 800dcd8:	0800dd6d 	.word	0x0800dd6d
 800dcdc:	0800dd6d 	.word	0x0800dd6d
 800dce0:	0800dd6d 	.word	0x0800dd6d
 800dce4:	0800dd6d 	.word	0x0800dd6d
 800dce8:	0800dd6d 	.word	0x0800dd6d
 800dcec:	0800dd5f 	.word	0x0800dd5f
 800dcf0:	2b40      	cmp	r3, #64	; 0x40
 800dcf2:	d037      	beq.n	800dd64 <UART_SetConfig+0xa28>
 800dcf4:	e03a      	b.n	800dd6c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dcf6:	f7fb fd6f 	bl	80097d8 <HAL_RCC_GetPCLK1Freq>
 800dcfa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800dcfc:	e03c      	b.n	800dd78 <UART_SetConfig+0xa3c>
 800dcfe:	bf00      	nop
 800dd00:	003d0900 	.word	0x003d0900
 800dd04:	08012130 	.word	0x08012130
 800dd08:	58024400 	.word	0x58024400
 800dd0c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dd10:	f7fb fd78 	bl	8009804 <HAL_RCC_GetPCLK2Freq>
 800dd14:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800dd16:	e02f      	b.n	800dd78 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dd18:	f107 0314 	add.w	r3, r7, #20
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f7fc fcdd 	bl	800a6dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dd22:	69bb      	ldr	r3, [r7, #24]
 800dd24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dd26:	e027      	b.n	800dd78 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dd28:	f107 0308 	add.w	r3, r7, #8
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f7fc fe29 	bl	800a984 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dd36:	e01f      	b.n	800dd78 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dd38:	4b2c      	ldr	r3, [pc, #176]	; (800ddec <UART_SetConfig+0xab0>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	f003 0320 	and.w	r3, r3, #32
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d009      	beq.n	800dd58 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dd44:	4b29      	ldr	r3, [pc, #164]	; (800ddec <UART_SetConfig+0xab0>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	08db      	lsrs	r3, r3, #3
 800dd4a:	f003 0303 	and.w	r3, r3, #3
 800dd4e:	4a28      	ldr	r2, [pc, #160]	; (800ddf0 <UART_SetConfig+0xab4>)
 800dd50:	fa22 f303 	lsr.w	r3, r2, r3
 800dd54:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dd56:	e00f      	b.n	800dd78 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800dd58:	4b25      	ldr	r3, [pc, #148]	; (800ddf0 <UART_SetConfig+0xab4>)
 800dd5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dd5c:	e00c      	b.n	800dd78 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dd5e:	4b25      	ldr	r3, [pc, #148]	; (800ddf4 <UART_SetConfig+0xab8>)
 800dd60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dd62:	e009      	b.n	800dd78 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dd64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dd68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dd6a:	e005      	b.n	800dd78 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800dd70:	2301      	movs	r3, #1
 800dd72:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800dd76:	bf00      	nop
    }

    if (pclk != 0U)
 800dd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d021      	beq.n	800ddc2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd82:	4a1d      	ldr	r2, [pc, #116]	; (800ddf8 <UART_SetConfig+0xabc>)
 800dd84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dd88:	461a      	mov	r2, r3
 800dd8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd8c:	fbb3 f2f2 	udiv	r2, r3, r2
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	685b      	ldr	r3, [r3, #4]
 800dd94:	085b      	lsrs	r3, r3, #1
 800dd96:	441a      	add	r2, r3
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	685b      	ldr	r3, [r3, #4]
 800dd9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800dda0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dda4:	2b0f      	cmp	r3, #15
 800dda6:	d909      	bls.n	800ddbc <UART_SetConfig+0xa80>
 800dda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ddae:	d205      	bcs.n	800ddbc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ddb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb2:	b29a      	uxth	r2, r3
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	60da      	str	r2, [r3, #12]
 800ddba:	e002      	b.n	800ddc2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2201      	movs	r2, #1
 800ddc6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	2201      	movs	r2, #1
 800ddce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2200      	movs	r2, #0
 800dddc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ddde:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800dde2:	4618      	mov	r0, r3
 800dde4:	3738      	adds	r7, #56	; 0x38
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bdb0      	pop	{r4, r5, r7, pc}
 800ddea:	bf00      	nop
 800ddec:	58024400 	.word	0x58024400
 800ddf0:	03d09000 	.word	0x03d09000
 800ddf4:	003d0900 	.word	0x003d0900
 800ddf8:	08012130 	.word	0x08012130

0800ddfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ddfc:	b480      	push	{r7}
 800ddfe:	b083      	sub	sp, #12
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de08:	f003 0301 	and.w	r3, r3, #1
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d00a      	beq.n	800de26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	685b      	ldr	r3, [r3, #4]
 800de16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	430a      	orrs	r2, r1
 800de24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de2a:	f003 0302 	and.w	r3, r3, #2
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d00a      	beq.n	800de48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	685b      	ldr	r3, [r3, #4]
 800de38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	430a      	orrs	r2, r1
 800de46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de4c:	f003 0304 	and.w	r3, r3, #4
 800de50:	2b00      	cmp	r3, #0
 800de52:	d00a      	beq.n	800de6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	685b      	ldr	r3, [r3, #4]
 800de5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	430a      	orrs	r2, r1
 800de68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de6e:	f003 0308 	and.w	r3, r3, #8
 800de72:	2b00      	cmp	r3, #0
 800de74:	d00a      	beq.n	800de8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	685b      	ldr	r3, [r3, #4]
 800de7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	430a      	orrs	r2, r1
 800de8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de90:	f003 0310 	and.w	r3, r3, #16
 800de94:	2b00      	cmp	r3, #0
 800de96:	d00a      	beq.n	800deae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	689b      	ldr	r3, [r3, #8]
 800de9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	430a      	orrs	r2, r1
 800deac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800deb2:	f003 0320 	and.w	r3, r3, #32
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d00a      	beq.n	800ded0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	689b      	ldr	r3, [r3, #8]
 800dec0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	430a      	orrs	r2, r1
 800dece:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ded4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d01a      	beq.n	800df12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	685b      	ldr	r3, [r3, #4]
 800dee2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	430a      	orrs	r2, r1
 800def0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800def6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800defa:	d10a      	bne.n	800df12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	685b      	ldr	r3, [r3, #4]
 800df02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	430a      	orrs	r2, r1
 800df10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d00a      	beq.n	800df34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	685b      	ldr	r3, [r3, #4]
 800df24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	430a      	orrs	r2, r1
 800df32:	605a      	str	r2, [r3, #4]
  }
}
 800df34:	bf00      	nop
 800df36:	370c      	adds	r7, #12
 800df38:	46bd      	mov	sp, r7
 800df3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3e:	4770      	bx	lr

0800df40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b086      	sub	sp, #24
 800df44:	af02      	add	r7, sp, #8
 800df46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2200      	movs	r2, #0
 800df4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800df50:	f7f7 f92c 	bl	80051ac <HAL_GetTick>
 800df54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	f003 0308 	and.w	r3, r3, #8
 800df60:	2b08      	cmp	r3, #8
 800df62:	d10e      	bne.n	800df82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800df64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800df68:	9300      	str	r3, [sp, #0]
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	2200      	movs	r2, #0
 800df6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f000 f82f 	bl	800dfd6 <UART_WaitOnFlagUntilTimeout>
 800df78:	4603      	mov	r3, r0
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d001      	beq.n	800df82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800df7e:	2303      	movs	r3, #3
 800df80:	e025      	b.n	800dfce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	f003 0304 	and.w	r3, r3, #4
 800df8c:	2b04      	cmp	r3, #4
 800df8e:	d10e      	bne.n	800dfae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800df90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800df94:	9300      	str	r3, [sp, #0]
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	2200      	movs	r2, #0
 800df9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800df9e:	6878      	ldr	r0, [r7, #4]
 800dfa0:	f000 f819 	bl	800dfd6 <UART_WaitOnFlagUntilTimeout>
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d001      	beq.n	800dfae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dfaa:	2303      	movs	r3, #3
 800dfac:	e00f      	b.n	800dfce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2220      	movs	r2, #32
 800dfb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2220      	movs	r2, #32
 800dfba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dfcc:	2300      	movs	r3, #0
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3710      	adds	r7, #16
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}

0800dfd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dfd6:	b580      	push	{r7, lr}
 800dfd8:	b09c      	sub	sp, #112	; 0x70
 800dfda:	af00      	add	r7, sp, #0
 800dfdc:	60f8      	str	r0, [r7, #12]
 800dfde:	60b9      	str	r1, [r7, #8]
 800dfe0:	603b      	str	r3, [r7, #0]
 800dfe2:	4613      	mov	r3, r2
 800dfe4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dfe6:	e0a9      	b.n	800e13c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dfe8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dfea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfee:	f000 80a5 	beq.w	800e13c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dff2:	f7f7 f8db 	bl	80051ac <HAL_GetTick>
 800dff6:	4602      	mov	r2, r0
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	1ad3      	subs	r3, r2, r3
 800dffc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800dffe:	429a      	cmp	r2, r3
 800e000:	d302      	bcc.n	800e008 <UART_WaitOnFlagUntilTimeout+0x32>
 800e002:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e004:	2b00      	cmp	r3, #0
 800e006:	d140      	bne.n	800e08a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e00e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e010:	e853 3f00 	ldrex	r3, [r3]
 800e014:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e018:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e01c:	667b      	str	r3, [r7, #100]	; 0x64
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	461a      	mov	r2, r3
 800e024:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e026:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e028:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e02a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e02c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e02e:	e841 2300 	strex	r3, r2, [r1]
 800e032:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e036:	2b00      	cmp	r3, #0
 800e038:	d1e6      	bne.n	800e008 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	3308      	adds	r3, #8
 800e040:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e044:	e853 3f00 	ldrex	r3, [r3]
 800e048:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e04c:	f023 0301 	bic.w	r3, r3, #1
 800e050:	663b      	str	r3, [r7, #96]	; 0x60
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	3308      	adds	r3, #8
 800e058:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e05a:	64ba      	str	r2, [r7, #72]	; 0x48
 800e05c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e05e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e060:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e062:	e841 2300 	strex	r3, r2, [r1]
 800e066:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d1e5      	bne.n	800e03a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	2220      	movs	r2, #32
 800e072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	2220      	movs	r2, #32
 800e07a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	2200      	movs	r2, #0
 800e082:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e086:	2303      	movs	r3, #3
 800e088:	e069      	b.n	800e15e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	f003 0304 	and.w	r3, r3, #4
 800e094:	2b00      	cmp	r3, #0
 800e096:	d051      	beq.n	800e13c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	69db      	ldr	r3, [r3, #28]
 800e09e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e0a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e0a6:	d149      	bne.n	800e13c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e0b0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ba:	e853 3f00 	ldrex	r3, [r3]
 800e0be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e0c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	461a      	mov	r2, r3
 800e0ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0d0:	637b      	str	r3, [r7, #52]	; 0x34
 800e0d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e0d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e0d8:	e841 2300 	strex	r3, r2, [r1]
 800e0dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d1e6      	bne.n	800e0b2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	3308      	adds	r3, #8
 800e0ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0ec:	697b      	ldr	r3, [r7, #20]
 800e0ee:	e853 3f00 	ldrex	r3, [r3]
 800e0f2:	613b      	str	r3, [r7, #16]
   return(result);
 800e0f4:	693b      	ldr	r3, [r7, #16]
 800e0f6:	f023 0301 	bic.w	r3, r3, #1
 800e0fa:	66bb      	str	r3, [r7, #104]	; 0x68
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	3308      	adds	r3, #8
 800e102:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e104:	623a      	str	r2, [r7, #32]
 800e106:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e108:	69f9      	ldr	r1, [r7, #28]
 800e10a:	6a3a      	ldr	r2, [r7, #32]
 800e10c:	e841 2300 	strex	r3, r2, [r1]
 800e110:	61bb      	str	r3, [r7, #24]
   return(result);
 800e112:	69bb      	ldr	r3, [r7, #24]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d1e5      	bne.n	800e0e4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	2220      	movs	r2, #32
 800e11c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	2220      	movs	r2, #32
 800e124:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	2220      	movs	r2, #32
 800e12c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	2200      	movs	r2, #0
 800e134:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e138:	2303      	movs	r3, #3
 800e13a:	e010      	b.n	800e15e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	69da      	ldr	r2, [r3, #28]
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	4013      	ands	r3, r2
 800e146:	68ba      	ldr	r2, [r7, #8]
 800e148:	429a      	cmp	r2, r3
 800e14a:	bf0c      	ite	eq
 800e14c:	2301      	moveq	r3, #1
 800e14e:	2300      	movne	r3, #0
 800e150:	b2db      	uxtb	r3, r3
 800e152:	461a      	mov	r2, r3
 800e154:	79fb      	ldrb	r3, [r7, #7]
 800e156:	429a      	cmp	r2, r3
 800e158:	f43f af46 	beq.w	800dfe8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e15c:	2300      	movs	r3, #0
}
 800e15e:	4618      	mov	r0, r3
 800e160:	3770      	adds	r7, #112	; 0x70
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}
	...

0800e168 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b096      	sub	sp, #88	; 0x58
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	60f8      	str	r0, [r7, #12]
 800e170:	60b9      	str	r1, [r7, #8]
 800e172:	4613      	mov	r3, r2
 800e174:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	68ba      	ldr	r2, [r7, #8]
 800e17a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	88fa      	ldrh	r2, [r7, #6]
 800e180:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	2200      	movs	r2, #0
 800e188:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	2222      	movs	r2, #34	; 0x22
 800e190:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d02c      	beq.n	800e1f6 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1a0:	4a42      	ldr	r2, [pc, #264]	; (800e2ac <UART_Start_Receive_DMA+0x144>)
 800e1a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1a8:	4a41      	ldr	r2, [pc, #260]	; (800e2b0 <UART_Start_Receive_DMA+0x148>)
 800e1aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1b0:	4a40      	ldr	r2, [pc, #256]	; (800e2b4 <UART_Start_Receive_DMA+0x14c>)
 800e1b2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	3324      	adds	r3, #36	; 0x24
 800e1c6:	4619      	mov	r1, r3
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	88fb      	ldrh	r3, [r7, #6]
 800e1d0:	f7f7 fe7a 	bl	8005ec8 <HAL_DMA_Start_IT>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d00d      	beq.n	800e1f6 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	2210      	movs	r2, #16
 800e1de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	2220      	movs	r2, #32
 800e1ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	e055      	b.n	800e2a2 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	691b      	ldr	r3, [r3, #16]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d018      	beq.n	800e238 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e20c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e20e:	e853 3f00 	ldrex	r3, [r3]
 800e212:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e21a:	657b      	str	r3, [r7, #84]	; 0x54
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	461a      	mov	r2, r3
 800e222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e224:	64bb      	str	r3, [r7, #72]	; 0x48
 800e226:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e228:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e22a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e22c:	e841 2300 	strex	r3, r2, [r1]
 800e230:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e234:	2b00      	cmp	r3, #0
 800e236:	d1e6      	bne.n	800e206 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	3308      	adds	r3, #8
 800e23e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e242:	e853 3f00 	ldrex	r3, [r3]
 800e246:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e24a:	f043 0301 	orr.w	r3, r3, #1
 800e24e:	653b      	str	r3, [r7, #80]	; 0x50
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	3308      	adds	r3, #8
 800e256:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e258:	637a      	str	r2, [r7, #52]	; 0x34
 800e25a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e25c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e25e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e260:	e841 2300 	strex	r3, r2, [r1]
 800e264:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d1e5      	bne.n	800e238 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	3308      	adds	r3, #8
 800e272:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e274:	697b      	ldr	r3, [r7, #20]
 800e276:	e853 3f00 	ldrex	r3, [r3]
 800e27a:	613b      	str	r3, [r7, #16]
   return(result);
 800e27c:	693b      	ldr	r3, [r7, #16]
 800e27e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e282:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	3308      	adds	r3, #8
 800e28a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e28c:	623a      	str	r2, [r7, #32]
 800e28e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e290:	69f9      	ldr	r1, [r7, #28]
 800e292:	6a3a      	ldr	r2, [r7, #32]
 800e294:	e841 2300 	strex	r3, r2, [r1]
 800e298:	61bb      	str	r3, [r7, #24]
   return(result);
 800e29a:	69bb      	ldr	r3, [r7, #24]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d1e5      	bne.n	800e26c <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800e2a0:	2300      	movs	r3, #0
}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	3758      	adds	r7, #88	; 0x58
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}
 800e2aa:	bf00      	nop
 800e2ac:	0800e4bb 	.word	0x0800e4bb
 800e2b0:	0800e5dd 	.word	0x0800e5dd
 800e2b4:	0800e615 	.word	0x0800e615

0800e2b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e2b8:	b480      	push	{r7}
 800e2ba:	b08f      	sub	sp, #60	; 0x3c
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2c6:	6a3b      	ldr	r3, [r7, #32]
 800e2c8:	e853 3f00 	ldrex	r3, [r3]
 800e2cc:	61fb      	str	r3, [r7, #28]
   return(result);
 800e2ce:	69fb      	ldr	r3, [r7, #28]
 800e2d0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e2d4:	637b      	str	r3, [r7, #52]	; 0x34
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	461a      	mov	r2, r3
 800e2dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2de:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e2e0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e2e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2e6:	e841 2300 	strex	r3, r2, [r1]
 800e2ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d1e6      	bne.n	800e2c0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	3308      	adds	r3, #8
 800e2f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	e853 3f00 	ldrex	r3, [r3]
 800e300:	60bb      	str	r3, [r7, #8]
   return(result);
 800e302:	68bb      	ldr	r3, [r7, #8]
 800e304:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e308:	633b      	str	r3, [r7, #48]	; 0x30
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	3308      	adds	r3, #8
 800e310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e312:	61ba      	str	r2, [r7, #24]
 800e314:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e316:	6979      	ldr	r1, [r7, #20]
 800e318:	69ba      	ldr	r2, [r7, #24]
 800e31a:	e841 2300 	strex	r3, r2, [r1]
 800e31e:	613b      	str	r3, [r7, #16]
   return(result);
 800e320:	693b      	ldr	r3, [r7, #16]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d1e5      	bne.n	800e2f2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	2220      	movs	r2, #32
 800e32a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800e32e:	bf00      	nop
 800e330:	373c      	adds	r7, #60	; 0x3c
 800e332:	46bd      	mov	sp, r7
 800e334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e338:	4770      	bx	lr
	...

0800e33c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e33c:	b480      	push	{r7}
 800e33e:	b095      	sub	sp, #84	; 0x54
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e34a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e34c:	e853 3f00 	ldrex	r3, [r3]
 800e350:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e354:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e358:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	461a      	mov	r2, r3
 800e360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e362:	643b      	str	r3, [r7, #64]	; 0x40
 800e364:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e366:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e368:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e36a:	e841 2300 	strex	r3, r2, [r1]
 800e36e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e372:	2b00      	cmp	r3, #0
 800e374:	d1e6      	bne.n	800e344 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	3308      	adds	r3, #8
 800e37c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e37e:	6a3b      	ldr	r3, [r7, #32]
 800e380:	e853 3f00 	ldrex	r3, [r3]
 800e384:	61fb      	str	r3, [r7, #28]
   return(result);
 800e386:	69fa      	ldr	r2, [r7, #28]
 800e388:	4b1e      	ldr	r3, [pc, #120]	; (800e404 <UART_EndRxTransfer+0xc8>)
 800e38a:	4013      	ands	r3, r2
 800e38c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	3308      	adds	r3, #8
 800e394:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e396:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e398:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e39a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e39c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e39e:	e841 2300 	strex	r3, r2, [r1]
 800e3a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d1e5      	bne.n	800e376 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3ae:	2b01      	cmp	r3, #1
 800e3b0:	d118      	bne.n	800e3e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	e853 3f00 	ldrex	r3, [r3]
 800e3be:	60bb      	str	r3, [r7, #8]
   return(result);
 800e3c0:	68bb      	ldr	r3, [r7, #8]
 800e3c2:	f023 0310 	bic.w	r3, r3, #16
 800e3c6:	647b      	str	r3, [r7, #68]	; 0x44
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	461a      	mov	r2, r3
 800e3ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3d0:	61bb      	str	r3, [r7, #24]
 800e3d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3d4:	6979      	ldr	r1, [r7, #20]
 800e3d6:	69ba      	ldr	r2, [r7, #24]
 800e3d8:	e841 2300 	strex	r3, r2, [r1]
 800e3dc:	613b      	str	r3, [r7, #16]
   return(result);
 800e3de:	693b      	ldr	r3, [r7, #16]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d1e6      	bne.n	800e3b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2220      	movs	r2, #32
 800e3e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e3f8:	bf00      	nop
 800e3fa:	3754      	adds	r7, #84	; 0x54
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e402:	4770      	bx	lr
 800e404:	effffffe 	.word	0xeffffffe

0800e408 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b090      	sub	sp, #64	; 0x40
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e414:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	69db      	ldr	r3, [r3, #28]
 800e41a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e41e:	d037      	beq.n	800e490 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800e420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e422:	2200      	movs	r2, #0
 800e424:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	3308      	adds	r3, #8
 800e42e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e432:	e853 3f00 	ldrex	r3, [r3]
 800e436:	623b      	str	r3, [r7, #32]
   return(result);
 800e438:	6a3b      	ldr	r3, [r7, #32]
 800e43a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e43e:	63bb      	str	r3, [r7, #56]	; 0x38
 800e440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	3308      	adds	r3, #8
 800e446:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e448:	633a      	str	r2, [r7, #48]	; 0x30
 800e44a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e44c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e44e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e450:	e841 2300 	strex	r3, r2, [r1]
 800e454:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d1e5      	bne.n	800e428 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e45c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e462:	693b      	ldr	r3, [r7, #16]
 800e464:	e853 3f00 	ldrex	r3, [r3]
 800e468:	60fb      	str	r3, [r7, #12]
   return(result);
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e470:	637b      	str	r3, [r7, #52]	; 0x34
 800e472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	461a      	mov	r2, r3
 800e478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e47a:	61fb      	str	r3, [r7, #28]
 800e47c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e47e:	69b9      	ldr	r1, [r7, #24]
 800e480:	69fa      	ldr	r2, [r7, #28]
 800e482:	e841 2300 	strex	r3, r2, [r1]
 800e486:	617b      	str	r3, [r7, #20]
   return(result);
 800e488:	697b      	ldr	r3, [r7, #20]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d1e6      	bne.n	800e45c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e48e:	e002      	b.n	800e496 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800e490:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e492:	f7fe ff2b 	bl	800d2ec <HAL_UART_TxCpltCallback>
}
 800e496:	bf00      	nop
 800e498:	3740      	adds	r7, #64	; 0x40
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}

0800e49e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e49e:	b580      	push	{r7, lr}
 800e4a0:	b084      	sub	sp, #16
 800e4a2:	af00      	add	r7, sp, #0
 800e4a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4aa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e4ac:	68f8      	ldr	r0, [r7, #12]
 800e4ae:	f7fe ff27 	bl	800d300 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e4b2:	bf00      	nop
 800e4b4:	3710      	adds	r7, #16
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}

0800e4ba <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e4ba:	b580      	push	{r7, lr}
 800e4bc:	b09c      	sub	sp, #112	; 0x70
 800e4be:	af00      	add	r7, sp, #0
 800e4c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4c6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	69db      	ldr	r3, [r3, #28]
 800e4cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e4d0:	d071      	beq.n	800e5b6 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e4d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e4da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4e2:	e853 3f00 	ldrex	r3, [r3]
 800e4e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e4e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e4ee:	66bb      	str	r3, [r7, #104]	; 0x68
 800e4f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	461a      	mov	r2, r3
 800e4f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e4f8:	65bb      	str	r3, [r7, #88]	; 0x58
 800e4fa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e4fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e500:	e841 2300 	strex	r3, r2, [r1]
 800e504:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d1e6      	bne.n	800e4da <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e50c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	3308      	adds	r3, #8
 800e512:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e516:	e853 3f00 	ldrex	r3, [r3]
 800e51a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e51c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e51e:	f023 0301 	bic.w	r3, r3, #1
 800e522:	667b      	str	r3, [r7, #100]	; 0x64
 800e524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	3308      	adds	r3, #8
 800e52a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e52c:	647a      	str	r2, [r7, #68]	; 0x44
 800e52e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e530:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e532:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e534:	e841 2300 	strex	r3, r2, [r1]
 800e538:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e53a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d1e5      	bne.n	800e50c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	3308      	adds	r3, #8
 800e546:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e54a:	e853 3f00 	ldrex	r3, [r3]
 800e54e:	623b      	str	r3, [r7, #32]
   return(result);
 800e550:	6a3b      	ldr	r3, [r7, #32]
 800e552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e556:	663b      	str	r3, [r7, #96]	; 0x60
 800e558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	3308      	adds	r3, #8
 800e55e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e560:	633a      	str	r2, [r7, #48]	; 0x30
 800e562:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e564:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e566:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e568:	e841 2300 	strex	r3, r2, [r1]
 800e56c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e570:	2b00      	cmp	r3, #0
 800e572:	d1e5      	bne.n	800e540 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e576:	2220      	movs	r2, #32
 800e578:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e57c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e57e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e580:	2b01      	cmp	r3, #1
 800e582:	d118      	bne.n	800e5b6 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e58a:	693b      	ldr	r3, [r7, #16]
 800e58c:	e853 3f00 	ldrex	r3, [r3]
 800e590:	60fb      	str	r3, [r7, #12]
   return(result);
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	f023 0310 	bic.w	r3, r3, #16
 800e598:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e59a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	461a      	mov	r2, r3
 800e5a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e5a2:	61fb      	str	r3, [r7, #28]
 800e5a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5a6:	69b9      	ldr	r1, [r7, #24]
 800e5a8:	69fa      	ldr	r2, [r7, #28]
 800e5aa:	e841 2300 	strex	r3, r2, [r1]
 800e5ae:	617b      	str	r3, [r7, #20]
   return(result);
 800e5b0:	697b      	ldr	r3, [r7, #20]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d1e6      	bne.n	800e584 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5ba:	2b01      	cmp	r3, #1
 800e5bc:	d107      	bne.n	800e5ce <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e5be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e5c4:	4619      	mov	r1, r3
 800e5c6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e5c8:	f7f3 f868 	bl	800169c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e5cc:	e002      	b.n	800e5d4 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800e5ce:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e5d0:	f7f4 ff8e 	bl	80034f0 <HAL_UART_RxCpltCallback>
}
 800e5d4:	bf00      	nop
 800e5d6:	3770      	adds	r7, #112	; 0x70
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}

0800e5dc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b084      	sub	sp, #16
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5e8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5ee:	2b01      	cmp	r3, #1
 800e5f0:	d109      	bne.n	800e606 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e5f8:	085b      	lsrs	r3, r3, #1
 800e5fa:	b29b      	uxth	r3, r3
 800e5fc:	4619      	mov	r1, r3
 800e5fe:	68f8      	ldr	r0, [r7, #12]
 800e600:	f7f3 f84c 	bl	800169c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e604:	e002      	b.n	800e60c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800e606:	68f8      	ldr	r0, [r7, #12]
 800e608:	f7fe fe84 	bl	800d314 <HAL_UART_RxHalfCpltCallback>
}
 800e60c:	bf00      	nop
 800e60e:	3710      	adds	r7, #16
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}

0800e614 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b086      	sub	sp, #24
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e620:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e628:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e62a:	697b      	ldr	r3, [r7, #20]
 800e62c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e630:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e632:	697b      	ldr	r3, [r7, #20]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	689b      	ldr	r3, [r3, #8]
 800e638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e63c:	2b80      	cmp	r3, #128	; 0x80
 800e63e:	d109      	bne.n	800e654 <UART_DMAError+0x40>
 800e640:	693b      	ldr	r3, [r7, #16]
 800e642:	2b21      	cmp	r3, #33	; 0x21
 800e644:	d106      	bne.n	800e654 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e646:	697b      	ldr	r3, [r7, #20]
 800e648:	2200      	movs	r2, #0
 800e64a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800e64e:	6978      	ldr	r0, [r7, #20]
 800e650:	f7ff fe32 	bl	800e2b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e654:	697b      	ldr	r3, [r7, #20]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	689b      	ldr	r3, [r3, #8]
 800e65a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e65e:	2b40      	cmp	r3, #64	; 0x40
 800e660:	d109      	bne.n	800e676 <UART_DMAError+0x62>
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	2b22      	cmp	r3, #34	; 0x22
 800e666:	d106      	bne.n	800e676 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e668:	697b      	ldr	r3, [r7, #20]
 800e66a:	2200      	movs	r2, #0
 800e66c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800e670:	6978      	ldr	r0, [r7, #20]
 800e672:	f7ff fe63 	bl	800e33c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e67c:	f043 0210 	orr.w	r2, r3, #16
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e686:	6978      	ldr	r0, [r7, #20]
 800e688:	f7fe fe4e 	bl	800d328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e68c:	bf00      	nop
 800e68e:	3718      	adds	r7, #24
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}

0800e694 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b084      	sub	sp, #16
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e6b2:	68f8      	ldr	r0, [r7, #12]
 800e6b4:	f7fe fe38 	bl	800d328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e6b8:	bf00      	nop
 800e6ba:	3710      	adds	r7, #16
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}

0800e6c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b088      	sub	sp, #32
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	e853 3f00 	ldrex	r3, [r3]
 800e6d4:	60bb      	str	r3, [r7, #8]
   return(result);
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e6dc:	61fb      	str	r3, [r7, #28]
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	461a      	mov	r2, r3
 800e6e4:	69fb      	ldr	r3, [r7, #28]
 800e6e6:	61bb      	str	r3, [r7, #24]
 800e6e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6ea:	6979      	ldr	r1, [r7, #20]
 800e6ec:	69ba      	ldr	r2, [r7, #24]
 800e6ee:	e841 2300 	strex	r3, r2, [r1]
 800e6f2:	613b      	str	r3, [r7, #16]
   return(result);
 800e6f4:	693b      	ldr	r3, [r7, #16]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d1e6      	bne.n	800e6c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	2220      	movs	r2, #32
 800e6fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	2200      	movs	r2, #0
 800e706:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e708:	6878      	ldr	r0, [r7, #4]
 800e70a:	f7fe fdef 	bl	800d2ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e70e:	bf00      	nop
 800e710:	3720      	adds	r7, #32
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}

0800e716 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e716:	b480      	push	{r7}
 800e718:	b083      	sub	sp, #12
 800e71a:	af00      	add	r7, sp, #0
 800e71c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e71e:	bf00      	nop
 800e720:	370c      	adds	r7, #12
 800e722:	46bd      	mov	sp, r7
 800e724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e728:	4770      	bx	lr

0800e72a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e72a:	b480      	push	{r7}
 800e72c:	b083      	sub	sp, #12
 800e72e:	af00      	add	r7, sp, #0
 800e730:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e732:	bf00      	nop
 800e734:	370c      	adds	r7, #12
 800e736:	46bd      	mov	sp, r7
 800e738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73c:	4770      	bx	lr

0800e73e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e73e:	b480      	push	{r7}
 800e740:	b083      	sub	sp, #12
 800e742:	af00      	add	r7, sp, #0
 800e744:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e746:	bf00      	nop
 800e748:	370c      	adds	r7, #12
 800e74a:	46bd      	mov	sp, r7
 800e74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e750:	4770      	bx	lr

0800e752 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800e752:	b580      	push	{r7, lr}
 800e754:	b084      	sub	sp, #16
 800e756:	af00      	add	r7, sp, #0
 800e758:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e760:	2b01      	cmp	r3, #1
 800e762:	d101      	bne.n	800e768 <HAL_UARTEx_EnableFifoMode+0x16>
 800e764:	2302      	movs	r3, #2
 800e766:	e02b      	b.n	800e7c0 <HAL_UARTEx_EnableFifoMode+0x6e>
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2201      	movs	r2, #1
 800e76c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	2224      	movs	r2, #36	; 0x24
 800e774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	681a      	ldr	r2, [r3, #0]
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	f022 0201 	bic.w	r2, r2, #1
 800e78e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e796:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800e79e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	68fa      	ldr	r2, [r7, #12]
 800e7a6:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f000 f91f 	bl	800e9ec <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2220      	movs	r2, #32
 800e7b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e7be:	2300      	movs	r3, #0
}
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	3710      	adds	r7, #16
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	bd80      	pop	{r7, pc}

0800e7c8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e7c8:	b480      	push	{r7}
 800e7ca:	b085      	sub	sp, #20
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e7d6:	2b01      	cmp	r3, #1
 800e7d8:	d101      	bne.n	800e7de <HAL_UARTEx_DisableFifoMode+0x16>
 800e7da:	2302      	movs	r3, #2
 800e7dc:	e027      	b.n	800e82e <HAL_UARTEx_DisableFifoMode+0x66>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	2201      	movs	r2, #1
 800e7e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	2224      	movs	r2, #36	; 0x24
 800e7ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	681a      	ldr	r2, [r3, #0]
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	f022 0201 	bic.w	r2, r2, #1
 800e804:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e80c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	2200      	movs	r2, #0
 800e812:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	68fa      	ldr	r2, [r7, #12]
 800e81a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2220      	movs	r2, #32
 800e820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2200      	movs	r2, #0
 800e828:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e82c:	2300      	movs	r3, #0
}
 800e82e:	4618      	mov	r0, r3
 800e830:	3714      	adds	r7, #20
 800e832:	46bd      	mov	sp, r7
 800e834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e838:	4770      	bx	lr

0800e83a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e83a:	b580      	push	{r7, lr}
 800e83c:	b084      	sub	sp, #16
 800e83e:	af00      	add	r7, sp, #0
 800e840:	6078      	str	r0, [r7, #4]
 800e842:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e84a:	2b01      	cmp	r3, #1
 800e84c:	d101      	bne.n	800e852 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e84e:	2302      	movs	r3, #2
 800e850:	e02d      	b.n	800e8ae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2201      	movs	r2, #1
 800e856:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	2224      	movs	r2, #36	; 0x24
 800e85e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	681a      	ldr	r2, [r3, #0]
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	f022 0201 	bic.w	r2, r2, #1
 800e878:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	689b      	ldr	r3, [r3, #8]
 800e880:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	683a      	ldr	r2, [r7, #0]
 800e88a:	430a      	orrs	r2, r1
 800e88c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f000 f8ac 	bl	800e9ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	68fa      	ldr	r2, [r7, #12]
 800e89a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2220      	movs	r2, #32
 800e8a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e8ac:	2300      	movs	r3, #0
}
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	3710      	adds	r7, #16
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd80      	pop	{r7, pc}

0800e8b6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e8b6:	b580      	push	{r7, lr}
 800e8b8:	b084      	sub	sp, #16
 800e8ba:	af00      	add	r7, sp, #0
 800e8bc:	6078      	str	r0, [r7, #4]
 800e8be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e8c6:	2b01      	cmp	r3, #1
 800e8c8:	d101      	bne.n	800e8ce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e8ca:	2302      	movs	r3, #2
 800e8cc:	e02d      	b.n	800e92a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2201      	movs	r2, #1
 800e8d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2224      	movs	r2, #36	; 0x24
 800e8da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	681a      	ldr	r2, [r3, #0]
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	f022 0201 	bic.w	r2, r2, #1
 800e8f4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	689b      	ldr	r3, [r3, #8]
 800e8fc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	683a      	ldr	r2, [r7, #0]
 800e906:	430a      	orrs	r2, r1
 800e908:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e90a:	6878      	ldr	r0, [r7, #4]
 800e90c:	f000 f86e 	bl	800e9ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	68fa      	ldr	r2, [r7, #12]
 800e916:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2220      	movs	r2, #32
 800e91c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2200      	movs	r2, #0
 800e924:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e928:	2300      	movs	r3, #0
}
 800e92a:	4618      	mov	r0, r3
 800e92c:	3710      	adds	r7, #16
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}

0800e932 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e932:	b580      	push	{r7, lr}
 800e934:	b08c      	sub	sp, #48	; 0x30
 800e936:	af00      	add	r7, sp, #0
 800e938:	60f8      	str	r0, [r7, #12]
 800e93a:	60b9      	str	r1, [r7, #8]
 800e93c:	4613      	mov	r3, r2
 800e93e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e946:	2b20      	cmp	r3, #32
 800e948:	d14a      	bne.n	800e9e0 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d002      	beq.n	800e956 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800e950:	88fb      	ldrh	r3, [r7, #6]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d101      	bne.n	800e95a <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800e956:	2301      	movs	r3, #1
 800e958:	e043      	b.n	800e9e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e960:	2b01      	cmp	r3, #1
 800e962:	d101      	bne.n	800e968 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800e964:	2302      	movs	r3, #2
 800e966:	e03c      	b.n	800e9e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	2201      	movs	r2, #1
 800e96c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	2201      	movs	r2, #1
 800e974:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800e976:	88fb      	ldrh	r3, [r7, #6]
 800e978:	461a      	mov	r2, r3
 800e97a:	68b9      	ldr	r1, [r7, #8]
 800e97c:	68f8      	ldr	r0, [r7, #12]
 800e97e:	f7ff fbf3 	bl	800e168 <UART_Start_Receive_DMA>
 800e982:	4603      	mov	r3, r0
 800e984:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800e988:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d124      	bne.n	800e9da <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e994:	2b01      	cmp	r3, #1
 800e996:	d11d      	bne.n	800e9d4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	2210      	movs	r2, #16
 800e99e:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9a6:	69bb      	ldr	r3, [r7, #24]
 800e9a8:	e853 3f00 	ldrex	r3, [r3]
 800e9ac:	617b      	str	r3, [r7, #20]
   return(result);
 800e9ae:	697b      	ldr	r3, [r7, #20]
 800e9b0:	f043 0310 	orr.w	r3, r3, #16
 800e9b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	461a      	mov	r2, r3
 800e9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9be:	627b      	str	r3, [r7, #36]	; 0x24
 800e9c0:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9c2:	6a39      	ldr	r1, [r7, #32]
 800e9c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9c6:	e841 2300 	strex	r3, r2, [r1]
 800e9ca:	61fb      	str	r3, [r7, #28]
   return(result);
 800e9cc:	69fb      	ldr	r3, [r7, #28]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d1e6      	bne.n	800e9a0 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800e9d2:	e002      	b.n	800e9da <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800e9d4:	2301      	movs	r3, #1
 800e9d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800e9da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e9de:	e000      	b.n	800e9e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800e9e0:	2302      	movs	r3, #2
  }
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	3730      	adds	r7, #48	; 0x30
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}
	...

0800e9ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e9ec:	b480      	push	{r7}
 800e9ee:	b085      	sub	sp, #20
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d108      	bne.n	800ea0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2201      	movs	r2, #1
 800ea00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	2201      	movs	r2, #1
 800ea08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ea0c:	e031      	b.n	800ea72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ea0e:	2310      	movs	r3, #16
 800ea10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ea12:	2310      	movs	r3, #16
 800ea14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	689b      	ldr	r3, [r3, #8]
 800ea1c:	0e5b      	lsrs	r3, r3, #25
 800ea1e:	b2db      	uxtb	r3, r3
 800ea20:	f003 0307 	and.w	r3, r3, #7
 800ea24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	689b      	ldr	r3, [r3, #8]
 800ea2c:	0f5b      	lsrs	r3, r3, #29
 800ea2e:	b2db      	uxtb	r3, r3
 800ea30:	f003 0307 	and.w	r3, r3, #7
 800ea34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ea36:	7bbb      	ldrb	r3, [r7, #14]
 800ea38:	7b3a      	ldrb	r2, [r7, #12]
 800ea3a:	4911      	ldr	r1, [pc, #68]	; (800ea80 <UARTEx_SetNbDataToProcess+0x94>)
 800ea3c:	5c8a      	ldrb	r2, [r1, r2]
 800ea3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ea42:	7b3a      	ldrb	r2, [r7, #12]
 800ea44:	490f      	ldr	r1, [pc, #60]	; (800ea84 <UARTEx_SetNbDataToProcess+0x98>)
 800ea46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ea48:	fb93 f3f2 	sdiv	r3, r3, r2
 800ea4c:	b29a      	uxth	r2, r3
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ea54:	7bfb      	ldrb	r3, [r7, #15]
 800ea56:	7b7a      	ldrb	r2, [r7, #13]
 800ea58:	4909      	ldr	r1, [pc, #36]	; (800ea80 <UARTEx_SetNbDataToProcess+0x94>)
 800ea5a:	5c8a      	ldrb	r2, [r1, r2]
 800ea5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ea60:	7b7a      	ldrb	r2, [r7, #13]
 800ea62:	4908      	ldr	r1, [pc, #32]	; (800ea84 <UARTEx_SetNbDataToProcess+0x98>)
 800ea64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ea66:	fb93 f3f2 	sdiv	r3, r3, r2
 800ea6a:	b29a      	uxth	r2, r3
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ea72:	bf00      	nop
 800ea74:	3714      	adds	r7, #20
 800ea76:	46bd      	mov	sp, r7
 800ea78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7c:	4770      	bx	lr
 800ea7e:	bf00      	nop
 800ea80:	08012148 	.word	0x08012148
 800ea84:	08012150 	.word	0x08012150

0800ea88 <sinf_poly>:
 800ea88:	07cb      	lsls	r3, r1, #31
 800ea8a:	d412      	bmi.n	800eab2 <sinf_poly+0x2a>
 800ea8c:	ee21 6b00 	vmul.f64	d6, d1, d0
 800ea90:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 800ea94:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800ea98:	eea5 7b01 	vfma.f64	d7, d5, d1
 800ea9c:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 800eaa0:	ee21 1b06 	vmul.f64	d1, d1, d6
 800eaa4:	eea5 0b06 	vfma.f64	d0, d5, d6
 800eaa8:	eea7 0b01 	vfma.f64	d0, d7, d1
 800eaac:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800eab0:	4770      	bx	lr
 800eab2:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 800eab6:	ee21 6b01 	vmul.f64	d6, d1, d1
 800eaba:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800eabe:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800eac2:	eea1 7b05 	vfma.f64	d7, d1, d5
 800eac6:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 800eaca:	eea1 0b05 	vfma.f64	d0, d1, d5
 800eace:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 800ead2:	ee21 1b06 	vmul.f64	d1, d1, d6
 800ead6:	eea6 0b05 	vfma.f64	d0, d6, d5
 800eada:	e7e5      	b.n	800eaa8 <sinf_poly+0x20>
 800eadc:	0000      	movs	r0, r0
	...

0800eae0 <cosf>:
 800eae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eae2:	ee10 4a10 	vmov	r4, s0
 800eae6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800eaea:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800eaee:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800eaf2:	d20c      	bcs.n	800eb0e <cosf+0x2e>
 800eaf4:	ee26 1b06 	vmul.f64	d1, d6, d6
 800eaf8:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800eafc:	d378      	bcc.n	800ebf0 <cosf+0x110>
 800eafe:	eeb0 0b46 	vmov.f64	d0, d6
 800eb02:	483f      	ldr	r0, [pc, #252]	; (800ec00 <cosf+0x120>)
 800eb04:	2101      	movs	r1, #1
 800eb06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800eb0a:	f7ff bfbd 	b.w	800ea88 <sinf_poly>
 800eb0e:	f240 422e 	movw	r2, #1070	; 0x42e
 800eb12:	4293      	cmp	r3, r2
 800eb14:	d826      	bhi.n	800eb64 <cosf+0x84>
 800eb16:	4b3a      	ldr	r3, [pc, #232]	; (800ec00 <cosf+0x120>)
 800eb18:	ed93 7b08 	vldr	d7, [r3, #32]
 800eb1c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800eb20:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800eb24:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800eb28:	ee17 1a90 	vmov	r1, s15
 800eb2c:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800eb30:	1609      	asrs	r1, r1, #24
 800eb32:	ee07 1a90 	vmov	s15, r1
 800eb36:	f001 0203 	and.w	r2, r1, #3
 800eb3a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800eb3e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800eb42:	ed92 0b00 	vldr	d0, [r2]
 800eb46:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800eb4a:	f011 0f02 	tst.w	r1, #2
 800eb4e:	eea5 6b47 	vfms.f64	d6, d5, d7
 800eb52:	f081 0101 	eor.w	r1, r1, #1
 800eb56:	bf08      	it	eq
 800eb58:	4618      	moveq	r0, r3
 800eb5a:	ee26 1b06 	vmul.f64	d1, d6, d6
 800eb5e:	ee20 0b06 	vmul.f64	d0, d0, d6
 800eb62:	e7d0      	b.n	800eb06 <cosf+0x26>
 800eb64:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800eb68:	d23e      	bcs.n	800ebe8 <cosf+0x108>
 800eb6a:	4b26      	ldr	r3, [pc, #152]	; (800ec04 <cosf+0x124>)
 800eb6c:	f3c4 6283 	ubfx	r2, r4, #26, #4
 800eb70:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800eb74:	f3c4 0116 	ubfx	r1, r4, #0, #23
 800eb78:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800eb7c:	6a06      	ldr	r6, [r0, #32]
 800eb7e:	6900      	ldr	r0, [r0, #16]
 800eb80:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800eb84:	40a9      	lsls	r1, r5
 800eb86:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800eb8a:	fba1 6706 	umull	r6, r7, r1, r6
 800eb8e:	fb05 f301 	mul.w	r3, r5, r1
 800eb92:	463a      	mov	r2, r7
 800eb94:	fbe0 2301 	umlal	r2, r3, r0, r1
 800eb98:	1c11      	adds	r1, r2, #0
 800eb9a:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 800eb9e:	2000      	movs	r0, #0
 800eba0:	1a10      	subs	r0, r2, r0
 800eba2:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 800eba6:	eb63 0101 	sbc.w	r1, r3, r1
 800ebaa:	f7f1 fd7f 	bl	80006ac <__aeabi_l2d>
 800ebae:	0fb5      	lsrs	r5, r6, #30
 800ebb0:	4b13      	ldr	r3, [pc, #76]	; (800ec00 <cosf+0x120>)
 800ebb2:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800ebb6:	ed9f 0b10 	vldr	d0, [pc, #64]	; 800ebf8 <cosf+0x118>
 800ebba:	ec41 0b17 	vmov	d7, r0, r1
 800ebbe:	f004 0203 	and.w	r2, r4, #3
 800ebc2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800ebc6:	ee27 0b00 	vmul.f64	d0, d7, d0
 800ebca:	ed92 7b00 	vldr	d7, [r2]
 800ebce:	ee20 1b00 	vmul.f64	d1, d0, d0
 800ebd2:	f014 0f02 	tst.w	r4, #2
 800ebd6:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800ebda:	f085 0101 	eor.w	r1, r5, #1
 800ebde:	bf08      	it	eq
 800ebe0:	4618      	moveq	r0, r3
 800ebe2:	ee27 0b00 	vmul.f64	d0, d7, d0
 800ebe6:	e78e      	b.n	800eb06 <cosf+0x26>
 800ebe8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ebec:	f000 b817 	b.w	800ec1e <__math_invalidf>
 800ebf0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ebf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebf6:	bf00      	nop
 800ebf8:	54442d18 	.word	0x54442d18
 800ebfc:	3c1921fb 	.word	0x3c1921fb
 800ec00:	08013200 	.word	0x08013200
 800ec04:	080131a0 	.word	0x080131a0

0800ec08 <with_errnof>:
 800ec08:	b513      	push	{r0, r1, r4, lr}
 800ec0a:	4604      	mov	r4, r0
 800ec0c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ec10:	f000 fdee 	bl	800f7f0 <__errno>
 800ec14:	ed9d 0a01 	vldr	s0, [sp, #4]
 800ec18:	6004      	str	r4, [r0, #0]
 800ec1a:	b002      	add	sp, #8
 800ec1c:	bd10      	pop	{r4, pc}

0800ec1e <__math_invalidf>:
 800ec1e:	eef0 7a40 	vmov.f32	s15, s0
 800ec22:	ee30 7a40 	vsub.f32	s14, s0, s0
 800ec26:	eef4 7a67 	vcmp.f32	s15, s15
 800ec2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec2e:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800ec32:	d602      	bvs.n	800ec3a <__math_invalidf+0x1c>
 800ec34:	2021      	movs	r0, #33	; 0x21
 800ec36:	f7ff bfe7 	b.w	800ec08 <with_errnof>
 800ec3a:	4770      	bx	lr

0800ec3c <checkint>:
 800ec3c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ec40:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800ec44:	429a      	cmp	r2, r3
 800ec46:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec48:	dd2b      	ble.n	800eca2 <checkint+0x66>
 800ec4a:	f240 4333 	movw	r3, #1075	; 0x433
 800ec4e:	429a      	cmp	r2, r3
 800ec50:	dc25      	bgt.n	800ec9e <checkint+0x62>
 800ec52:	1a9b      	subs	r3, r3, r2
 800ec54:	f1a3 0620 	sub.w	r6, r3, #32
 800ec58:	f04f 32ff 	mov.w	r2, #4294967295
 800ec5c:	fa02 f606 	lsl.w	r6, r2, r6
 800ec60:	fa02 f403 	lsl.w	r4, r2, r3
 800ec64:	f1c3 0520 	rsb	r5, r3, #32
 800ec68:	4334      	orrs	r4, r6
 800ec6a:	fa22 f505 	lsr.w	r5, r2, r5
 800ec6e:	432c      	orrs	r4, r5
 800ec70:	409a      	lsls	r2, r3
 800ec72:	ea20 0602 	bic.w	r6, r0, r2
 800ec76:	ea21 0704 	bic.w	r7, r1, r4
 800ec7a:	ea56 0207 	orrs.w	r2, r6, r7
 800ec7e:	f1a3 0420 	sub.w	r4, r3, #32
 800ec82:	f1c3 0220 	rsb	r2, r3, #32
 800ec86:	d10c      	bne.n	800eca2 <checkint+0x66>
 800ec88:	40d8      	lsrs	r0, r3
 800ec8a:	fa01 f302 	lsl.w	r3, r1, r2
 800ec8e:	4318      	orrs	r0, r3
 800ec90:	40e1      	lsrs	r1, r4
 800ec92:	4308      	orrs	r0, r1
 800ec94:	f000 0301 	and.w	r3, r0, #1
 800ec98:	f1c3 0002 	rsb	r0, r3, #2
 800ec9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec9e:	2002      	movs	r0, #2
 800eca0:	e7fc      	b.n	800ec9c <checkint+0x60>
 800eca2:	2000      	movs	r0, #0
 800eca4:	e7fa      	b.n	800ec9c <checkint+0x60>
	...

0800eca8 <pow>:
 800eca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecac:	ed2d 8b0a 	vpush	{d8-d12}
 800ecb0:	b09b      	sub	sp, #108	; 0x6c
 800ecb2:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ecb6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ecba:	ed8d 1b00 	vstr	d1, [sp]
 800ecbe:	ea4f 5915 	mov.w	r9, r5, lsr #20
 800ecc2:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ecc6:	f109 30ff 	add.w	r0, r9, #4294967295
 800ecca:	f240 71fd 	movw	r1, #2045	; 0x7fd
 800ecce:	4288      	cmp	r0, r1
 800ecd0:	46cc      	mov	ip, r9
 800ecd2:	ea4f 5817 	mov.w	r8, r7, lsr #20
 800ecd6:	d806      	bhi.n	800ece6 <pow+0x3e>
 800ecd8:	f3c8 010a 	ubfx	r1, r8, #0, #11
 800ecdc:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 800ece0:	297f      	cmp	r1, #127	; 0x7f
 800ece2:	f240 81ab 	bls.w	800f03c <pow+0x394>
 800ece6:	19b1      	adds	r1, r6, r6
 800ece8:	9104      	str	r1, [sp, #16]
 800ecea:	eb47 0107 	adc.w	r1, r7, r7
 800ecee:	9105      	str	r1, [sp, #20]
 800ecf0:	9904      	ldr	r1, [sp, #16]
 800ecf2:	f111 31ff 	adds.w	r1, r1, #4294967295
 800ecf6:	460a      	mov	r2, r1
 800ecf8:	9905      	ldr	r1, [sp, #20]
 800ecfa:	f141 31ff 	adc.w	r1, r1, #4294967295
 800ecfe:	460b      	mov	r3, r1
 800ed00:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 800ed04:	f06f 0001 	mvn.w	r0, #1
 800ed08:	4299      	cmp	r1, r3
 800ed0a:	bf08      	it	eq
 800ed0c:	4290      	cmpeq	r0, r2
 800ed0e:	d260      	bcs.n	800edd2 <pow+0x12a>
 800ed10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ed14:	4313      	orrs	r3, r2
 800ed16:	d11a      	bne.n	800ed4e <pow+0xa6>
 800ed18:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 800ed1c:	1923      	adds	r3, r4, r4
 800ed1e:	930c      	str	r3, [sp, #48]	; 0x30
 800ed20:	eb42 0302 	adc.w	r3, r2, r2
 800ed24:	930d      	str	r3, [sp, #52]	; 0x34
 800ed26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ed2a:	4bcf      	ldr	r3, [pc, #828]	; (800f068 <pow+0x3c0>)
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	428b      	cmp	r3, r1
 800ed30:	bf08      	it	eq
 800ed32:	4282      	cmpeq	r2, r0
 800ed34:	f080 8265 	bcs.w	800f202 <pow+0x55a>
 800ed38:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ed3c:	ed9d 6b00 	vldr	d6, [sp]
 800ed40:	ee37 0b06 	vadd.f64	d0, d7, d6
 800ed44:	b01b      	add	sp, #108	; 0x6c
 800ed46:	ecbd 8b0a 	vpop	{d8-d12}
 800ed4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed4e:	49c7      	ldr	r1, [pc, #796]	; (800f06c <pow+0x3c4>)
 800ed50:	2000      	movs	r0, #0
 800ed52:	428d      	cmp	r5, r1
 800ed54:	bf08      	it	eq
 800ed56:	4284      	cmpeq	r4, r0
 800ed58:	d10b      	bne.n	800ed72 <pow+0xca>
 800ed5a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800ed5e:	19b3      	adds	r3, r6, r6
 800ed60:	930e      	str	r3, [sp, #56]	; 0x38
 800ed62:	eb42 0302 	adc.w	r3, r2, r2
 800ed66:	930f      	str	r3, [sp, #60]	; 0x3c
 800ed68:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ed6c:	4bbe      	ldr	r3, [pc, #760]	; (800f068 <pow+0x3c0>)
 800ed6e:	2200      	movs	r2, #0
 800ed70:	e7dd      	b.n	800ed2e <pow+0x86>
 800ed72:	1921      	adds	r1, r4, r4
 800ed74:	9106      	str	r1, [sp, #24]
 800ed76:	eb45 0105 	adc.w	r1, r5, r5
 800ed7a:	9107      	str	r1, [sp, #28]
 800ed7c:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800ed80:	49bb      	ldr	r1, [pc, #748]	; (800f070 <pow+0x3c8>)
 800ed82:	2000      	movs	r0, #0
 800ed84:	42a1      	cmp	r1, r4
 800ed86:	bf08      	it	eq
 800ed88:	4298      	cmpeq	r0, r3
 800ed8a:	d3d5      	bcc.n	800ed38 <pow+0x90>
 800ed8c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ed90:	428c      	cmp	r4, r1
 800ed92:	bf08      	it	eq
 800ed94:	4283      	cmpeq	r3, r0
 800ed96:	d1cf      	bne.n	800ed38 <pow+0x90>
 800ed98:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800ed9c:	49b5      	ldr	r1, [pc, #724]	; (800f074 <pow+0x3cc>)
 800ed9e:	2000      	movs	r0, #0
 800eda0:	428c      	cmp	r4, r1
 800eda2:	bf08      	it	eq
 800eda4:	4283      	cmpeq	r3, r0
 800eda6:	f000 822c 	beq.w	800f202 <pow+0x55a>
 800edaa:	49b3      	ldr	r1, [pc, #716]	; (800f078 <pow+0x3d0>)
 800edac:	f04f 30ff 	mov.w	r0, #4294967295
 800edb0:	42a1      	cmp	r1, r4
 800edb2:	bf08      	it	eq
 800edb4:	4298      	cmpeq	r0, r3
 800edb6:	ea6f 0307 	mvn.w	r3, r7
 800edba:	bf34      	ite	cc
 800edbc:	2201      	movcc	r2, #1
 800edbe:	2200      	movcs	r2, #0
 800edc0:	0fdb      	lsrs	r3, r3, #31
 800edc2:	429a      	cmp	r2, r3
 800edc4:	f040 821a 	bne.w	800f1fc <pow+0x554>
 800edc8:	ed9d 7b00 	vldr	d7, [sp]
 800edcc:	ee27 0b07 	vmul.f64	d0, d7, d7
 800edd0:	e7b8      	b.n	800ed44 <pow+0x9c>
 800edd2:	1923      	adds	r3, r4, r4
 800edd4:	9308      	str	r3, [sp, #32]
 800edd6:	eb45 0305 	adc.w	r3, r5, r5
 800edda:	9309      	str	r3, [sp, #36]	; 0x24
 800eddc:	9b08      	ldr	r3, [sp, #32]
 800edde:	f113 33ff 	adds.w	r3, r3, #4294967295
 800ede2:	9310      	str	r3, [sp, #64]	; 0x40
 800ede4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ede6:	f143 33ff 	adc.w	r3, r3, #4294967295
 800edea:	9311      	str	r3, [sp, #68]	; 0x44
 800edec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800edf0:	4299      	cmp	r1, r3
 800edf2:	bf08      	it	eq
 800edf4:	4290      	cmpeq	r0, r2
 800edf6:	d22d      	bcs.n	800ee54 <pow+0x1ac>
 800edf8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800edfc:	2c00      	cmp	r4, #0
 800edfe:	f175 0300 	sbcs.w	r3, r5, #0
 800ee02:	ee27 0b07 	vmul.f64	d0, d7, d7
 800ee06:	da16      	bge.n	800ee36 <pow+0x18e>
 800ee08:	4630      	mov	r0, r6
 800ee0a:	4639      	mov	r1, r7
 800ee0c:	f7ff ff16 	bl	800ec3c <checkint>
 800ee10:	2801      	cmp	r0, #1
 800ee12:	d110      	bne.n	800ee36 <pow+0x18e>
 800ee14:	eeb1 0b40 	vneg.f64	d0, d0
 800ee18:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800ee1c:	4323      	orrs	r3, r4
 800ee1e:	d10c      	bne.n	800ee3a <pow+0x192>
 800ee20:	2e00      	cmp	r6, #0
 800ee22:	f177 0300 	sbcs.w	r3, r7, #0
 800ee26:	da8d      	bge.n	800ed44 <pow+0x9c>
 800ee28:	b01b      	add	sp, #108	; 0x6c
 800ee2a:	ecbd 8b0a 	vpop	{d8-d12}
 800ee2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee32:	f000 bbbd 	b.w	800f5b0 <__math_divzero>
 800ee36:	2000      	movs	r0, #0
 800ee38:	e7ee      	b.n	800ee18 <pow+0x170>
 800ee3a:	2e00      	cmp	r6, #0
 800ee3c:	f177 0300 	sbcs.w	r3, r7, #0
 800ee40:	da80      	bge.n	800ed44 <pow+0x9c>
 800ee42:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ee46:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800ee4a:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800ee4e:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800ee52:	e777      	b.n	800ed44 <pow+0x9c>
 800ee54:	2c00      	cmp	r4, #0
 800ee56:	f175 0300 	sbcs.w	r3, r5, #0
 800ee5a:	da35      	bge.n	800eec8 <pow+0x220>
 800ee5c:	4630      	mov	r0, r6
 800ee5e:	4639      	mov	r1, r7
 800ee60:	f7ff feec 	bl	800ec3c <checkint>
 800ee64:	b940      	cbnz	r0, 800ee78 <pow+0x1d0>
 800ee66:	ed9d 0b02 	vldr	d0, [sp, #8]
 800ee6a:	b01b      	add	sp, #108	; 0x6c
 800ee6c:	ecbd 8b0a 	vpop	{d8-d12}
 800ee70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee74:	f000 bbb4 	b.w	800f5e0 <__math_invalid>
 800ee78:	2801      	cmp	r0, #1
 800ee7a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ee7e:	bf14      	ite	ne
 800ee80:	2000      	movne	r0, #0
 800ee82:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800ee86:	461d      	mov	r5, r3
 800ee88:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 800ee8c:	f3c8 030a 	ubfx	r3, r8, #0, #11
 800ee90:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 800ee94:	2a7f      	cmp	r2, #127	; 0x7f
 800ee96:	d933      	bls.n	800ef00 <pow+0x258>
 800ee98:	4974      	ldr	r1, [pc, #464]	; (800f06c <pow+0x3c4>)
 800ee9a:	2000      	movs	r0, #0
 800ee9c:	428d      	cmp	r5, r1
 800ee9e:	bf08      	it	eq
 800eea0:	4284      	cmpeq	r4, r0
 800eea2:	f000 81ae 	beq.w	800f202 <pow+0x55a>
 800eea6:	f240 32bd 	movw	r2, #957	; 0x3bd
 800eeaa:	4293      	cmp	r3, r2
 800eeac:	d80e      	bhi.n	800eecc <pow+0x224>
 800eeae:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800eeb2:	ed9d 7b00 	vldr	d7, [sp]
 800eeb6:	42a9      	cmp	r1, r5
 800eeb8:	bf08      	it	eq
 800eeba:	42a0      	cmpeq	r0, r4
 800eebc:	bf34      	ite	cc
 800eebe:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 800eec2:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 800eec6:	e73d      	b.n	800ed44 <pow+0x9c>
 800eec8:	2000      	movs	r0, #0
 800eeca:	e7df      	b.n	800ee8c <pow+0x1e4>
 800eecc:	42a9      	cmp	r1, r5
 800eece:	bf08      	it	eq
 800eed0:	42a0      	cmpeq	r0, r4
 800eed2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800eed6:	bf2c      	ite	cs
 800eed8:	2301      	movcs	r3, #1
 800eeda:	2300      	movcc	r3, #0
 800eedc:	4590      	cmp	r8, r2
 800eede:	bf8c      	ite	hi
 800eee0:	f04f 0800 	movhi.w	r8, #0
 800eee4:	f04f 0801 	movls.w	r8, #1
 800eee8:	4543      	cmp	r3, r8
 800eeea:	f04f 0000 	mov.w	r0, #0
 800eeee:	f000 80af 	beq.w	800f050 <pow+0x3a8>
 800eef2:	b01b      	add	sp, #108	; 0x6c
 800eef4:	ecbd 8b0a 	vpop	{d8-d12}
 800eef8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eefc:	f000 bb50 	b.w	800f5a0 <__math_oflow>
 800ef00:	f1bc 0f00 	cmp.w	ip, #0
 800ef04:	d10e      	bne.n	800ef24 <pow+0x27c>
 800ef06:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800f060 <pow+0x3b8>
 800ef0a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ef0e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ef12:	ec57 6b17 	vmov	r6, r7, d7
 800ef16:	4b59      	ldr	r3, [pc, #356]	; (800f07c <pow+0x3d4>)
 800ef18:	2100      	movs	r1, #0
 800ef1a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800ef1e:	1874      	adds	r4, r6, r1
 800ef20:	eb42 0503 	adc.w	r5, r2, r3
 800ef24:	2300      	movs	r3, #0
 800ef26:	18e3      	adds	r3, r4, r3
 800ef28:	4b55      	ldr	r3, [pc, #340]	; (800f080 <pow+0x3d8>)
 800ef2a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800ef2e:	eb45 0303 	adc.w	r3, r5, r3
 800ef32:	1519      	asrs	r1, r3, #20
 800ef34:	ee03 1a10 	vmov	s6, r1
 800ef38:	0d1e      	lsrs	r6, r3, #20
 800ef3a:	2100      	movs	r1, #0
 800ef3c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800ef40:	0536      	lsls	r6, r6, #20
 800ef42:	1a63      	subs	r3, r4, r1
 800ef44:	9312      	str	r3, [sp, #72]	; 0x48
 800ef46:	eb65 0306 	sbc.w	r3, r5, r6
 800ef4a:	9313      	str	r3, [sp, #76]	; 0x4c
 800ef4c:	4b4d      	ldr	r3, [pc, #308]	; (800f084 <pow+0x3dc>)
 800ef4e:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 800ef52:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ef56:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 800ef5a:	eea5 6b07 	vfma.f64	d6, d5, d7
 800ef5e:	ed93 7b00 	vldr	d7, [r3]
 800ef62:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 800ef66:	ed93 4b02 	vldr	d4, [r3, #8]
 800ef6a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800ef6e:	eea3 5b07 	vfma.f64	d5, d3, d7
 800ef72:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 800ef76:	ee36 9b05 	vadd.f64	d9, d6, d5
 800ef7a:	ee35 5b49 	vsub.f64	d5, d5, d9
 800ef7e:	eea3 7b04 	vfma.f64	d7, d3, d4
 800ef82:	ed93 4b04 	vldr	d4, [r3, #16]
 800ef86:	ee35 5b06 	vadd.f64	d5, d5, d6
 800ef8a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ef8e:	ee26 4b04 	vmul.f64	d4, d6, d4
 800ef92:	ed93 3b08 	vldr	d3, [r3, #32]
 800ef96:	ee26 0b04 	vmul.f64	d0, d6, d4
 800ef9a:	eeb0 8b40 	vmov.f64	d8, d0
 800ef9e:	ee94 8b06 	vfnms.f64	d8, d4, d6
 800efa2:	ed93 4b06 	vldr	d4, [r3, #24]
 800efa6:	ee26 ab00 	vmul.f64	d10, d6, d0
 800efaa:	ee39 1b00 	vadd.f64	d1, d9, d0
 800efae:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 800efb2:	eea6 4b03 	vfma.f64	d4, d6, d3
 800efb6:	ee39 9b41 	vsub.f64	d9, d9, d1
 800efba:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 800efbe:	ee37 8b08 	vadd.f64	d8, d7, d8
 800efc2:	ee39 9b00 	vadd.f64	d9, d9, d0
 800efc6:	eea6 3b02 	vfma.f64	d3, d6, d2
 800efca:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800efce:	ee38 9b09 	vadd.f64	d9, d8, d9
 800efd2:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 800efd6:	eea6 2b0c 	vfma.f64	d2, d6, d12
 800efda:	ed9d 6b00 	vldr	d6, [sp]
 800efde:	eea0 3b02 	vfma.f64	d3, d0, d2
 800efe2:	eea0 4b03 	vfma.f64	d4, d0, d3
 800efe6:	eeaa 9b04 	vfma.f64	d9, d10, d4
 800efea:	ee31 7b09 	vadd.f64	d7, d1, d9
 800efee:	ee26 6b07 	vmul.f64	d6, d6, d7
 800eff2:	ed8d 6b02 	vstr	d6, [sp, #8]
 800eff6:	eeb0 3b46 	vmov.f64	d3, d6
 800effa:	ee31 1b47 	vsub.f64	d1, d1, d7
 800effe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f002:	ee31 9b09 	vadd.f64	d9, d1, d9
 800f006:	ed9d 6b00 	vldr	d6, [sp]
 800f00a:	f3c3 570a 	ubfx	r7, r3, #20, #11
 800f00e:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 800f012:	193c      	adds	r4, r7, r4
 800f014:	2c3e      	cmp	r4, #62	; 0x3e
 800f016:	ee96 3b07 	vfnms.f64	d3, d6, d7
 800f01a:	eea6 3b09 	vfma.f64	d3, d6, d9
 800f01e:	d934      	bls.n	800f08a <pow+0x3e2>
 800f020:	428c      	cmp	r4, r1
 800f022:	da0d      	bge.n	800f040 <pow+0x398>
 800f024:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f028:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f02c:	ee37 0b00 	vadd.f64	d0, d7, d0
 800f030:	2800      	cmp	r0, #0
 800f032:	f43f ae87 	beq.w	800ed44 <pow+0x9c>
 800f036:	eeb1 0b40 	vneg.f64	d0, d0
 800f03a:	e683      	b.n	800ed44 <pow+0x9c>
 800f03c:	2000      	movs	r0, #0
 800f03e:	e771      	b.n	800ef24 <pow+0x27c>
 800f040:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 800f044:	d920      	bls.n	800f088 <pow+0x3e0>
 800f046:	2a00      	cmp	r2, #0
 800f048:	f173 0300 	sbcs.w	r3, r3, #0
 800f04c:	f6bf af51 	bge.w	800eef2 <pow+0x24a>
 800f050:	b01b      	add	sp, #108	; 0x6c
 800f052:	ecbd 8b0a 	vpop	{d8-d12}
 800f056:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f05a:	f000 ba99 	b.w	800f590 <__math_uflow>
 800f05e:	bf00      	nop
 800f060:	00000000 	.word	0x00000000
 800f064:	43300000 	.word	0x43300000
 800f068:	fff00000 	.word	0xfff00000
 800f06c:	3ff00000 	.word	0x3ff00000
 800f070:	ffe00000 	.word	0xffe00000
 800f074:	7fe00000 	.word	0x7fe00000
 800f078:	7fdfffff 	.word	0x7fdfffff
 800f07c:	fcc00000 	.word	0xfcc00000
 800f080:	c0196aab 	.word	0xc0196aab
 800f084:	08012158 	.word	0x08012158
 800f088:	460f      	mov	r7, r1
 800f08a:	4e65      	ldr	r6, [pc, #404]	; (800f220 <pow+0x578>)
 800f08c:	ed9d 4b02 	vldr	d4, [sp, #8]
 800f090:	ed96 6b02 	vldr	d6, [r6, #8]
 800f094:	ed96 7b00 	vldr	d7, [r6]
 800f098:	eeb0 5b46 	vmov.f64	d5, d6
 800f09c:	eea4 5b07 	vfma.f64	d5, d4, d7
 800f0a0:	ed8d 5b00 	vstr	d5, [sp]
 800f0a4:	ee35 6b46 	vsub.f64	d6, d5, d6
 800f0a8:	eeb0 5b44 	vmov.f64	d5, d4
 800f0ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f0b0:	ed96 7b04 	vldr	d7, [r6, #16]
 800f0b4:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 800f0b8:	eea6 5b07 	vfma.f64	d5, d6, d7
 800f0bc:	eeb0 7b45 	vmov.f64	d7, d5
 800f0c0:	ed96 5b06 	vldr	d5, [r6, #24]
 800f0c4:	1849      	adds	r1, r1, r1
 800f0c6:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 800f0ca:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800f0ce:	eea6 7b05 	vfma.f64	d7, d6, d5
 800f0d2:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 800f0d6:	ee33 3b07 	vadd.f64	d3, d3, d7
 800f0da:	ee23 6b03 	vmul.f64	d6, d3, d3
 800f0de:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 800f0e2:	ed96 5b08 	vldr	d5, [r6, #32]
 800f0e6:	ee33 7b07 	vadd.f64	d7, d3, d7
 800f0ea:	1814      	adds	r4, r2, r0
 800f0ec:	0365      	lsls	r5, r4, #13
 800f0ee:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 800f0f2:	eea3 5b04 	vfma.f64	d5, d3, d4
 800f0f6:	eea6 7b05 	vfma.f64	d7, d6, d5
 800f0fa:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 800f0fe:	ee26 6b06 	vmul.f64	d6, d6, d6
 800f102:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 800f106:	2000      	movs	r0, #0
 800f108:	eb10 0a04 	adds.w	sl, r0, r4
 800f10c:	eea3 5b04 	vfma.f64	d5, d3, d4
 800f110:	eb45 0b0c 	adc.w	fp, r5, ip
 800f114:	eea6 7b05 	vfma.f64	d7, d6, d5
 800f118:	2f00      	cmp	r7, #0
 800f11a:	d16a      	bne.n	800f1f2 <pow+0x54a>
 800f11c:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 800f120:	4639      	mov	r1, r7
 800f122:	ea50 0301 	orrs.w	r3, r0, r1
 800f126:	f04f 0300 	mov.w	r3, #0
 800f12a:	d115      	bne.n	800f158 <pow+0x4b0>
 800f12c:	eb1a 0303 	adds.w	r3, sl, r3
 800f130:	ee0b 3a10 	vmov	s22, r3
 800f134:	4b3b      	ldr	r3, [pc, #236]	; (800f224 <pow+0x57c>)
 800f136:	ed9f 0b34 	vldr	d0, [pc, #208]	; 800f208 <pow+0x560>
 800f13a:	eb4b 0303 	adc.w	r3, fp, r3
 800f13e:	ee0b 3a90 	vmov	s23, r3
 800f142:	eea7 bb0b 	vfma.f64	d11, d7, d11
 800f146:	ee2b 0b00 	vmul.f64	d0, d11, d0
 800f14a:	b01b      	add	sp, #108	; 0x6c
 800f14c:	ecbd 8b0a 	vpop	{d8-d12}
 800f150:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f154:	f000 ba5c 	b.w	800f610 <__math_check_oflow>
 800f158:	eb1a 0303 	adds.w	r3, sl, r3
 800f15c:	930a      	str	r3, [sp, #40]	; 0x28
 800f15e:	4b32      	ldr	r3, [pc, #200]	; (800f228 <pow+0x580>)
 800f160:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800f164:	eb4b 0303 	adc.w	r3, fp, r3
 800f168:	930b      	str	r3, [sp, #44]	; 0x2c
 800f16a:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800f16e:	ee27 6b05 	vmul.f64	d6, d7, d5
 800f172:	ee35 7b06 	vadd.f64	d7, d5, d6
 800f176:	eeb0 3bc7 	vabs.f64	d3, d7
 800f17a:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800f17e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f182:	ed9f 0b23 	vldr	d0, [pc, #140]	; 800f210 <pow+0x568>
 800f186:	d52b      	bpl.n	800f1e0 <pow+0x538>
 800f188:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f18c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800f190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f194:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800f198:	ee35 6b06 	vadd.f64	d6, d5, d6
 800f19c:	bf48      	it	mi
 800f19e:	eeb0 4b43 	vmovmi.f64	d4, d3
 800f1a2:	ee37 3b04 	vadd.f64	d3, d7, d4
 800f1a6:	ee34 5b43 	vsub.f64	d5, d4, d3
 800f1aa:	ee35 7b07 	vadd.f64	d7, d5, d7
 800f1ae:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f1b2:	ee37 7b03 	vadd.f64	d7, d7, d3
 800f1b6:	ee37 7b44 	vsub.f64	d7, d7, d4
 800f1ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f1be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1c2:	d105      	bne.n	800f1d0 <pow+0x528>
 800f1c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f1c6:	463a      	mov	r2, r7
 800f1c8:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800f1cc:	ec43 2b17 	vmov	d7, r2, r3
 800f1d0:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 800f1d4:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 800f1d8:	ee26 6b00 	vmul.f64	d6, d6, d0
 800f1dc:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 800f1e0:	ee27 0b00 	vmul.f64	d0, d7, d0
 800f1e4:	b01b      	add	sp, #108	; 0x6c
 800f1e6:	ecbd 8b0a 	vpop	{d8-d12}
 800f1ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1ee:	f000 ba06 	b.w	800f5fe <__math_check_uflow>
 800f1f2:	ec4b ab10 	vmov	d0, sl, fp
 800f1f6:	eea7 0b00 	vfma.f64	d0, d7, d0
 800f1fa:	e5a3      	b.n	800ed44 <pow+0x9c>
 800f1fc:	ed9f 0b06 	vldr	d0, [pc, #24]	; 800f218 <pow+0x570>
 800f200:	e5a0      	b.n	800ed44 <pow+0x9c>
 800f202:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f206:	e59d      	b.n	800ed44 <pow+0x9c>
 800f208:	00000000 	.word	0x00000000
 800f20c:	7f000000 	.word	0x7f000000
 800f210:	00000000 	.word	0x00000000
 800f214:	00100000 	.word	0x00100000
	...
 800f220:	080132f8 	.word	0x080132f8
 800f224:	c0f00000 	.word	0xc0f00000
 800f228:	3fe00000 	.word	0x3fe00000

0800f22c <sinf_poly>:
 800f22c:	07cb      	lsls	r3, r1, #31
 800f22e:	d412      	bmi.n	800f256 <sinf_poly+0x2a>
 800f230:	ee21 6b00 	vmul.f64	d6, d1, d0
 800f234:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 800f238:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800f23c:	eea5 7b01 	vfma.f64	d7, d5, d1
 800f240:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 800f244:	ee21 1b06 	vmul.f64	d1, d1, d6
 800f248:	eea5 0b06 	vfma.f64	d0, d5, d6
 800f24c:	eea7 0b01 	vfma.f64	d0, d7, d1
 800f250:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800f254:	4770      	bx	lr
 800f256:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 800f25a:	ee21 6b01 	vmul.f64	d6, d1, d1
 800f25e:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800f262:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800f266:	eea1 7b05 	vfma.f64	d7, d1, d5
 800f26a:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 800f26e:	eea1 0b05 	vfma.f64	d0, d1, d5
 800f272:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 800f276:	ee21 1b06 	vmul.f64	d1, d1, d6
 800f27a:	eea6 0b05 	vfma.f64	d0, d6, d5
 800f27e:	e7e5      	b.n	800f24c <sinf_poly+0x20>

0800f280 <sinf>:
 800f280:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f282:	ee10 4a10 	vmov	r4, s0
 800f286:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800f28a:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800f28e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800f292:	eef0 7a40 	vmov.f32	s15, s0
 800f296:	ea4f 5214 	mov.w	r2, r4, lsr #20
 800f29a:	d218      	bcs.n	800f2ce <sinf+0x4e>
 800f29c:	ee26 1b06 	vmul.f64	d1, d6, d6
 800f2a0:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800f2a4:	d20a      	bcs.n	800f2bc <sinf+0x3c>
 800f2a6:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 800f2aa:	d103      	bne.n	800f2b4 <sinf+0x34>
 800f2ac:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800f2b0:	ed8d 1a01 	vstr	s2, [sp, #4]
 800f2b4:	eeb0 0a67 	vmov.f32	s0, s15
 800f2b8:	b003      	add	sp, #12
 800f2ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2bc:	483e      	ldr	r0, [pc, #248]	; (800f3b8 <sinf+0x138>)
 800f2be:	eeb0 0b46 	vmov.f64	d0, d6
 800f2c2:	2100      	movs	r1, #0
 800f2c4:	b003      	add	sp, #12
 800f2c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f2ca:	f7ff bfaf 	b.w	800f22c <sinf_poly>
 800f2ce:	f240 422e 	movw	r2, #1070	; 0x42e
 800f2d2:	4293      	cmp	r3, r2
 800f2d4:	d824      	bhi.n	800f320 <sinf+0xa0>
 800f2d6:	4b38      	ldr	r3, [pc, #224]	; (800f3b8 <sinf+0x138>)
 800f2d8:	ed93 7b08 	vldr	d7, [r3, #32]
 800f2dc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f2e0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800f2e4:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800f2e8:	ee17 1a90 	vmov	r1, s15
 800f2ec:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800f2f0:	1609      	asrs	r1, r1, #24
 800f2f2:	ee07 1a90 	vmov	s15, r1
 800f2f6:	f001 0203 	and.w	r2, r1, #3
 800f2fa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800f2fe:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800f302:	ed92 0b00 	vldr	d0, [r2]
 800f306:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800f30a:	f011 0f02 	tst.w	r1, #2
 800f30e:	eea5 6b47 	vfms.f64	d6, d5, d7
 800f312:	bf08      	it	eq
 800f314:	4618      	moveq	r0, r3
 800f316:	ee26 1b06 	vmul.f64	d1, d6, d6
 800f31a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800f31e:	e7d1      	b.n	800f2c4 <sinf+0x44>
 800f320:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800f324:	d23d      	bcs.n	800f3a2 <sinf+0x122>
 800f326:	4b25      	ldr	r3, [pc, #148]	; (800f3bc <sinf+0x13c>)
 800f328:	f3c4 6283 	ubfx	r2, r4, #26, #4
 800f32c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800f330:	f3c4 0116 	ubfx	r1, r4, #0, #23
 800f334:	6a06      	ldr	r6, [r0, #32]
 800f336:	6900      	ldr	r0, [r0, #16]
 800f338:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800f33c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800f340:	40a9      	lsls	r1, r5
 800f342:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800f346:	fba1 6706 	umull	r6, r7, r1, r6
 800f34a:	fb05 f301 	mul.w	r3, r5, r1
 800f34e:	463a      	mov	r2, r7
 800f350:	fbe0 2301 	umlal	r2, r3, r0, r1
 800f354:	1c11      	adds	r1, r2, #0
 800f356:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 800f35a:	2000      	movs	r0, #0
 800f35c:	1a10      	subs	r0, r2, r0
 800f35e:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 800f362:	eb63 0101 	sbc.w	r1, r3, r1
 800f366:	f7f1 f9a1 	bl	80006ac <__aeabi_l2d>
 800f36a:	0fb5      	lsrs	r5, r6, #30
 800f36c:	4a12      	ldr	r2, [pc, #72]	; (800f3b8 <sinf+0x138>)
 800f36e:	eb05 73d4 	add.w	r3, r5, r4, lsr #31
 800f372:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 800f3b0 <sinf+0x130>
 800f376:	ec41 0b17 	vmov	d7, r0, r1
 800f37a:	f003 0103 	and.w	r1, r3, #3
 800f37e:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800f382:	ee27 0b00 	vmul.f64	d0, d7, d0
 800f386:	ed91 7b00 	vldr	d7, [r1]
 800f38a:	ee20 1b00 	vmul.f64	d1, d0, d0
 800f38e:	f013 0f02 	tst.w	r3, #2
 800f392:	f102 0070 	add.w	r0, r2, #112	; 0x70
 800f396:	4629      	mov	r1, r5
 800f398:	bf08      	it	eq
 800f39a:	4610      	moveq	r0, r2
 800f39c:	ee27 0b00 	vmul.f64	d0, d7, d0
 800f3a0:	e790      	b.n	800f2c4 <sinf+0x44>
 800f3a2:	b003      	add	sp, #12
 800f3a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f3a8:	f7ff bc39 	b.w	800ec1e <__math_invalidf>
 800f3ac:	f3af 8000 	nop.w
 800f3b0:	54442d18 	.word	0x54442d18
 800f3b4:	3c1921fb 	.word	0x3c1921fb
 800f3b8:	08013200 	.word	0x08013200
 800f3bc:	080131a0 	.word	0x080131a0

0800f3c0 <atan2f>:
 800f3c0:	f000 b826 	b.w	800f410 <__ieee754_atan2f>

0800f3c4 <sqrtf>:
 800f3c4:	b508      	push	{r3, lr}
 800f3c6:	ed2d 8b02 	vpush	{d8}
 800f3ca:	eeb0 8a40 	vmov.f32	s16, s0
 800f3ce:	f000 f8bd 	bl	800f54c <__ieee754_sqrtf>
 800f3d2:	4b0d      	ldr	r3, [pc, #52]	; (800f408 <sqrtf+0x44>)
 800f3d4:	f993 3000 	ldrsb.w	r3, [r3]
 800f3d8:	3301      	adds	r3, #1
 800f3da:	d011      	beq.n	800f400 <sqrtf+0x3c>
 800f3dc:	eeb4 8a48 	vcmp.f32	s16, s16
 800f3e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3e4:	d60c      	bvs.n	800f400 <sqrtf+0x3c>
 800f3e6:	eddf 8a09 	vldr	s17, [pc, #36]	; 800f40c <sqrtf+0x48>
 800f3ea:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f3ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3f2:	d505      	bpl.n	800f400 <sqrtf+0x3c>
 800f3f4:	f000 f9fc 	bl	800f7f0 <__errno>
 800f3f8:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f3fc:	2321      	movs	r3, #33	; 0x21
 800f3fe:	6003      	str	r3, [r0, #0]
 800f400:	ecbd 8b02 	vpop	{d8}
 800f404:	bd08      	pop	{r3, pc}
 800f406:	bf00      	nop
 800f408:	24000045 	.word	0x24000045
 800f40c:	00000000 	.word	0x00000000

0800f410 <__ieee754_atan2f>:
 800f410:	ee10 2a90 	vmov	r2, s1
 800f414:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800f418:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f41c:	b510      	push	{r4, lr}
 800f41e:	eef0 7a40 	vmov.f32	s15, s0
 800f422:	dc06      	bgt.n	800f432 <__ieee754_atan2f+0x22>
 800f424:	ee10 0a10 	vmov	r0, s0
 800f428:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800f42c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f430:	dd04      	ble.n	800f43c <__ieee754_atan2f+0x2c>
 800f432:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800f436:	eeb0 0a67 	vmov.f32	s0, s15
 800f43a:	bd10      	pop	{r4, pc}
 800f43c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800f440:	d103      	bne.n	800f44a <__ieee754_atan2f+0x3a>
 800f442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f446:	f000 b8f7 	b.w	800f638 <atanf>
 800f44a:	1794      	asrs	r4, r2, #30
 800f44c:	f004 0402 	and.w	r4, r4, #2
 800f450:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800f454:	b93b      	cbnz	r3, 800f466 <__ieee754_atan2f+0x56>
 800f456:	2c02      	cmp	r4, #2
 800f458:	d05c      	beq.n	800f514 <__ieee754_atan2f+0x104>
 800f45a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800f528 <__ieee754_atan2f+0x118>
 800f45e:	2c03      	cmp	r4, #3
 800f460:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800f464:	e7e7      	b.n	800f436 <__ieee754_atan2f+0x26>
 800f466:	b939      	cbnz	r1, 800f478 <__ieee754_atan2f+0x68>
 800f468:	eddf 7a30 	vldr	s15, [pc, #192]	; 800f52c <__ieee754_atan2f+0x11c>
 800f46c:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800f530 <__ieee754_atan2f+0x120>
 800f470:	2800      	cmp	r0, #0
 800f472:	fe67 7a80 	vselge.f32	s15, s15, s0
 800f476:	e7de      	b.n	800f436 <__ieee754_atan2f+0x26>
 800f478:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f47c:	d110      	bne.n	800f4a0 <__ieee754_atan2f+0x90>
 800f47e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f482:	f104 34ff 	add.w	r4, r4, #4294967295
 800f486:	d107      	bne.n	800f498 <__ieee754_atan2f+0x88>
 800f488:	2c02      	cmp	r4, #2
 800f48a:	d846      	bhi.n	800f51a <__ieee754_atan2f+0x10a>
 800f48c:	4b29      	ldr	r3, [pc, #164]	; (800f534 <__ieee754_atan2f+0x124>)
 800f48e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f492:	edd4 7a00 	vldr	s15, [r4]
 800f496:	e7ce      	b.n	800f436 <__ieee754_atan2f+0x26>
 800f498:	2c02      	cmp	r4, #2
 800f49a:	d841      	bhi.n	800f520 <__ieee754_atan2f+0x110>
 800f49c:	4b26      	ldr	r3, [pc, #152]	; (800f538 <__ieee754_atan2f+0x128>)
 800f49e:	e7f6      	b.n	800f48e <__ieee754_atan2f+0x7e>
 800f4a0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f4a4:	d0e0      	beq.n	800f468 <__ieee754_atan2f+0x58>
 800f4a6:	1a5b      	subs	r3, r3, r1
 800f4a8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800f4ac:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800f4b0:	da1a      	bge.n	800f4e8 <__ieee754_atan2f+0xd8>
 800f4b2:	2a00      	cmp	r2, #0
 800f4b4:	da01      	bge.n	800f4ba <__ieee754_atan2f+0xaa>
 800f4b6:	313c      	adds	r1, #60	; 0x3c
 800f4b8:	db19      	blt.n	800f4ee <__ieee754_atan2f+0xde>
 800f4ba:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800f4be:	f000 f98f 	bl	800f7e0 <fabsf>
 800f4c2:	f000 f8b9 	bl	800f638 <atanf>
 800f4c6:	eef0 7a40 	vmov.f32	s15, s0
 800f4ca:	2c01      	cmp	r4, #1
 800f4cc:	d012      	beq.n	800f4f4 <__ieee754_atan2f+0xe4>
 800f4ce:	2c02      	cmp	r4, #2
 800f4d0:	d017      	beq.n	800f502 <__ieee754_atan2f+0xf2>
 800f4d2:	2c00      	cmp	r4, #0
 800f4d4:	d0af      	beq.n	800f436 <__ieee754_atan2f+0x26>
 800f4d6:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800f53c <__ieee754_atan2f+0x12c>
 800f4da:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f4de:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800f540 <__ieee754_atan2f+0x130>
 800f4e2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f4e6:	e7a6      	b.n	800f436 <__ieee754_atan2f+0x26>
 800f4e8:	eddf 7a10 	vldr	s15, [pc, #64]	; 800f52c <__ieee754_atan2f+0x11c>
 800f4ec:	e7ed      	b.n	800f4ca <__ieee754_atan2f+0xba>
 800f4ee:	eddf 7a15 	vldr	s15, [pc, #84]	; 800f544 <__ieee754_atan2f+0x134>
 800f4f2:	e7ea      	b.n	800f4ca <__ieee754_atan2f+0xba>
 800f4f4:	ee17 3a90 	vmov	r3, s15
 800f4f8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f4fc:	ee07 3a90 	vmov	s15, r3
 800f500:	e799      	b.n	800f436 <__ieee754_atan2f+0x26>
 800f502:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800f53c <__ieee754_atan2f+0x12c>
 800f506:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f50a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800f540 <__ieee754_atan2f+0x130>
 800f50e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f512:	e790      	b.n	800f436 <__ieee754_atan2f+0x26>
 800f514:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800f540 <__ieee754_atan2f+0x130>
 800f518:	e78d      	b.n	800f436 <__ieee754_atan2f+0x26>
 800f51a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800f548 <__ieee754_atan2f+0x138>
 800f51e:	e78a      	b.n	800f436 <__ieee754_atan2f+0x26>
 800f520:	eddf 7a08 	vldr	s15, [pc, #32]	; 800f544 <__ieee754_atan2f+0x134>
 800f524:	e787      	b.n	800f436 <__ieee754_atan2f+0x26>
 800f526:	bf00      	nop
 800f528:	c0490fdb 	.word	0xc0490fdb
 800f52c:	3fc90fdb 	.word	0x3fc90fdb
 800f530:	bfc90fdb 	.word	0xbfc90fdb
 800f534:	080132e0 	.word	0x080132e0
 800f538:	080132ec 	.word	0x080132ec
 800f53c:	33bbbd2e 	.word	0x33bbbd2e
 800f540:	40490fdb 	.word	0x40490fdb
 800f544:	00000000 	.word	0x00000000
 800f548:	3f490fdb 	.word	0x3f490fdb

0800f54c <__ieee754_sqrtf>:
 800f54c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f550:	4770      	bx	lr

0800f552 <with_errno>:
 800f552:	b513      	push	{r0, r1, r4, lr}
 800f554:	4604      	mov	r4, r0
 800f556:	ed8d 0b00 	vstr	d0, [sp]
 800f55a:	f000 f949 	bl	800f7f0 <__errno>
 800f55e:	ed9d 0b00 	vldr	d0, [sp]
 800f562:	6004      	str	r4, [r0, #0]
 800f564:	b002      	add	sp, #8
 800f566:	bd10      	pop	{r4, pc}

0800f568 <xflow>:
 800f568:	b082      	sub	sp, #8
 800f56a:	b158      	cbz	r0, 800f584 <xflow+0x1c>
 800f56c:	eeb1 7b40 	vneg.f64	d7, d0
 800f570:	ed8d 7b00 	vstr	d7, [sp]
 800f574:	ed9d 7b00 	vldr	d7, [sp]
 800f578:	2022      	movs	r0, #34	; 0x22
 800f57a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f57e:	b002      	add	sp, #8
 800f580:	f7ff bfe7 	b.w	800f552 <with_errno>
 800f584:	eeb0 7b40 	vmov.f64	d7, d0
 800f588:	e7f2      	b.n	800f570 <xflow+0x8>
 800f58a:	0000      	movs	r0, r0
 800f58c:	0000      	movs	r0, r0
	...

0800f590 <__math_uflow>:
 800f590:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f598 <__math_uflow+0x8>
 800f594:	f7ff bfe8 	b.w	800f568 <xflow>
 800f598:	00000000 	.word	0x00000000
 800f59c:	10000000 	.word	0x10000000

0800f5a0 <__math_oflow>:
 800f5a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f5a8 <__math_oflow+0x8>
 800f5a4:	f7ff bfe0 	b.w	800f568 <xflow>
 800f5a8:	00000000 	.word	0x00000000
 800f5ac:	70000000 	.word	0x70000000

0800f5b0 <__math_divzero>:
 800f5b0:	b082      	sub	sp, #8
 800f5b2:	2800      	cmp	r0, #0
 800f5b4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f5b8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800f5bc:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800f5c0:	ed8d 7b00 	vstr	d7, [sp]
 800f5c4:	ed9d 0b00 	vldr	d0, [sp]
 800f5c8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800f5d8 <__math_divzero+0x28>
 800f5cc:	2022      	movs	r0, #34	; 0x22
 800f5ce:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800f5d2:	b002      	add	sp, #8
 800f5d4:	f7ff bfbd 	b.w	800f552 <with_errno>
	...

0800f5e0 <__math_invalid>:
 800f5e0:	eeb0 7b40 	vmov.f64	d7, d0
 800f5e4:	eeb4 7b47 	vcmp.f64	d7, d7
 800f5e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5ec:	ee30 6b40 	vsub.f64	d6, d0, d0
 800f5f0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800f5f4:	d602      	bvs.n	800f5fc <__math_invalid+0x1c>
 800f5f6:	2021      	movs	r0, #33	; 0x21
 800f5f8:	f7ff bfab 	b.w	800f552 <with_errno>
 800f5fc:	4770      	bx	lr

0800f5fe <__math_check_uflow>:
 800f5fe:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800f602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f606:	d102      	bne.n	800f60e <__math_check_uflow+0x10>
 800f608:	2022      	movs	r0, #34	; 0x22
 800f60a:	f7ff bfa2 	b.w	800f552 <with_errno>
 800f60e:	4770      	bx	lr

0800f610 <__math_check_oflow>:
 800f610:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800f630 <__math_check_oflow+0x20>
 800f614:	eeb0 7bc0 	vabs.f64	d7, d0
 800f618:	eeb4 7b46 	vcmp.f64	d7, d6
 800f61c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f620:	dd02      	ble.n	800f628 <__math_check_oflow+0x18>
 800f622:	2022      	movs	r0, #34	; 0x22
 800f624:	f7ff bf95 	b.w	800f552 <with_errno>
 800f628:	4770      	bx	lr
 800f62a:	bf00      	nop
 800f62c:	f3af 8000 	nop.w
 800f630:	ffffffff 	.word	0xffffffff
 800f634:	7fefffff 	.word	0x7fefffff

0800f638 <atanf>:
 800f638:	b538      	push	{r3, r4, r5, lr}
 800f63a:	ee10 5a10 	vmov	r5, s0
 800f63e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800f642:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800f646:	eef0 7a40 	vmov.f32	s15, s0
 800f64a:	db0f      	blt.n	800f66c <atanf+0x34>
 800f64c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800f650:	dd04      	ble.n	800f65c <atanf+0x24>
 800f652:	ee70 7a00 	vadd.f32	s15, s0, s0
 800f656:	eeb0 0a67 	vmov.f32	s0, s15
 800f65a:	bd38      	pop	{r3, r4, r5, pc}
 800f65c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800f794 <atanf+0x15c>
 800f660:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800f798 <atanf+0x160>
 800f664:	2d00      	cmp	r5, #0
 800f666:	fe77 7a80 	vselgt.f32	s15, s15, s0
 800f66a:	e7f4      	b.n	800f656 <atanf+0x1e>
 800f66c:	4b4b      	ldr	r3, [pc, #300]	; (800f79c <atanf+0x164>)
 800f66e:	429c      	cmp	r4, r3
 800f670:	dc10      	bgt.n	800f694 <atanf+0x5c>
 800f672:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800f676:	da0a      	bge.n	800f68e <atanf+0x56>
 800f678:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800f7a0 <atanf+0x168>
 800f67c:	ee30 7a07 	vadd.f32	s14, s0, s14
 800f680:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f684:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800f688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f68c:	dce3      	bgt.n	800f656 <atanf+0x1e>
 800f68e:	f04f 33ff 	mov.w	r3, #4294967295
 800f692:	e013      	b.n	800f6bc <atanf+0x84>
 800f694:	f000 f8a4 	bl	800f7e0 <fabsf>
 800f698:	4b42      	ldr	r3, [pc, #264]	; (800f7a4 <atanf+0x16c>)
 800f69a:	429c      	cmp	r4, r3
 800f69c:	dc4f      	bgt.n	800f73e <atanf+0x106>
 800f69e:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800f6a2:	429c      	cmp	r4, r3
 800f6a4:	dc41      	bgt.n	800f72a <atanf+0xf2>
 800f6a6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800f6aa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f6ae:	eea0 7a27 	vfma.f32	s14, s0, s15
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f6b8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f6bc:	1c5a      	adds	r2, r3, #1
 800f6be:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800f6c2:	eddf 5a39 	vldr	s11, [pc, #228]	; 800f7a8 <atanf+0x170>
 800f6c6:	ed9f 6a39 	vldr	s12, [pc, #228]	; 800f7ac <atanf+0x174>
 800f6ca:	ed9f 5a39 	vldr	s10, [pc, #228]	; 800f7b0 <atanf+0x178>
 800f6ce:	ed9f 0a39 	vldr	s0, [pc, #228]	; 800f7b4 <atanf+0x17c>
 800f6d2:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800f6d6:	eea7 6a25 	vfma.f32	s12, s14, s11
 800f6da:	eddf 5a37 	vldr	s11, [pc, #220]	; 800f7b8 <atanf+0x180>
 800f6de:	eee6 5a07 	vfma.f32	s11, s12, s14
 800f6e2:	ed9f 6a36 	vldr	s12, [pc, #216]	; 800f7bc <atanf+0x184>
 800f6e6:	eea5 6a87 	vfma.f32	s12, s11, s14
 800f6ea:	eddf 5a35 	vldr	s11, [pc, #212]	; 800f7c0 <atanf+0x188>
 800f6ee:	eee6 5a07 	vfma.f32	s11, s12, s14
 800f6f2:	ed9f 6a34 	vldr	s12, [pc, #208]	; 800f7c4 <atanf+0x18c>
 800f6f6:	eea5 6a87 	vfma.f32	s12, s11, s14
 800f6fa:	eddf 5a33 	vldr	s11, [pc, #204]	; 800f7c8 <atanf+0x190>
 800f6fe:	eee7 5a05 	vfma.f32	s11, s14, s10
 800f702:	ed9f 5a32 	vldr	s10, [pc, #200]	; 800f7cc <atanf+0x194>
 800f706:	eea5 5a87 	vfma.f32	s10, s11, s14
 800f70a:	eddf 5a31 	vldr	s11, [pc, #196]	; 800f7d0 <atanf+0x198>
 800f70e:	eee5 5a07 	vfma.f32	s11, s10, s14
 800f712:	eea5 0a87 	vfma.f32	s0, s11, s14
 800f716:	ee20 0a07 	vmul.f32	s0, s0, s14
 800f71a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800f71e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f722:	d121      	bne.n	800f768 <atanf+0x130>
 800f724:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f728:	e795      	b.n	800f656 <atanf+0x1e>
 800f72a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f72e:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f732:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f736:	2301      	movs	r3, #1
 800f738:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f73c:	e7be      	b.n	800f6bc <atanf+0x84>
 800f73e:	4b25      	ldr	r3, [pc, #148]	; (800f7d4 <atanf+0x19c>)
 800f740:	429c      	cmp	r4, r3
 800f742:	dc0b      	bgt.n	800f75c <atanf+0x124>
 800f744:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800f748:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f74c:	eea0 7a27 	vfma.f32	s14, s0, s15
 800f750:	2302      	movs	r3, #2
 800f752:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f756:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f75a:	e7af      	b.n	800f6bc <atanf+0x84>
 800f75c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f760:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f764:	2303      	movs	r3, #3
 800f766:	e7a9      	b.n	800f6bc <atanf+0x84>
 800f768:	4a1b      	ldr	r2, [pc, #108]	; (800f7d8 <atanf+0x1a0>)
 800f76a:	491c      	ldr	r1, [pc, #112]	; (800f7dc <atanf+0x1a4>)
 800f76c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f770:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f774:	ed93 7a00 	vldr	s14, [r3]
 800f778:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f77c:	2d00      	cmp	r5, #0
 800f77e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f782:	ed92 0a00 	vldr	s0, [r2]
 800f786:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f78a:	bfb8      	it	lt
 800f78c:	eef1 7a67 	vneglt.f32	s15, s15
 800f790:	e761      	b.n	800f656 <atanf+0x1e>
 800f792:	bf00      	nop
 800f794:	3fc90fdb 	.word	0x3fc90fdb
 800f798:	bfc90fdb 	.word	0xbfc90fdb
 800f79c:	3edfffff 	.word	0x3edfffff
 800f7a0:	7149f2ca 	.word	0x7149f2ca
 800f7a4:	3f97ffff 	.word	0x3f97ffff
 800f7a8:	3c8569d7 	.word	0x3c8569d7
 800f7ac:	3d4bda59 	.word	0x3d4bda59
 800f7b0:	bd15a221 	.word	0xbd15a221
 800f7b4:	be4ccccd 	.word	0xbe4ccccd
 800f7b8:	3d886b35 	.word	0x3d886b35
 800f7bc:	3dba2e6e 	.word	0x3dba2e6e
 800f7c0:	3e124925 	.word	0x3e124925
 800f7c4:	3eaaaaab 	.word	0x3eaaaaab
 800f7c8:	bd6ef16b 	.word	0xbd6ef16b
 800f7cc:	bd9d8795 	.word	0xbd9d8795
 800f7d0:	bde38e38 	.word	0xbde38e38
 800f7d4:	401bffff 	.word	0x401bffff
 800f7d8:	08013b68 	.word	0x08013b68
 800f7dc:	08013b78 	.word	0x08013b78

0800f7e0 <fabsf>:
 800f7e0:	ee10 3a10 	vmov	r3, s0
 800f7e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f7e8:	ee00 3a10 	vmov	s0, r3
 800f7ec:	4770      	bx	lr
	...

0800f7f0 <__errno>:
 800f7f0:	4b01      	ldr	r3, [pc, #4]	; (800f7f8 <__errno+0x8>)
 800f7f2:	6818      	ldr	r0, [r3, #0]
 800f7f4:	4770      	bx	lr
 800f7f6:	bf00      	nop
 800f7f8:	24000048 	.word	0x24000048

0800f7fc <__libc_init_array>:
 800f7fc:	b570      	push	{r4, r5, r6, lr}
 800f7fe:	4d0d      	ldr	r5, [pc, #52]	; (800f834 <__libc_init_array+0x38>)
 800f800:	4c0d      	ldr	r4, [pc, #52]	; (800f838 <__libc_init_array+0x3c>)
 800f802:	1b64      	subs	r4, r4, r5
 800f804:	10a4      	asrs	r4, r4, #2
 800f806:	2600      	movs	r6, #0
 800f808:	42a6      	cmp	r6, r4
 800f80a:	d109      	bne.n	800f820 <__libc_init_array+0x24>
 800f80c:	4d0b      	ldr	r5, [pc, #44]	; (800f83c <__libc_init_array+0x40>)
 800f80e:	4c0c      	ldr	r4, [pc, #48]	; (800f840 <__libc_init_array+0x44>)
 800f810:	f002 fc60 	bl	80120d4 <_init>
 800f814:	1b64      	subs	r4, r4, r5
 800f816:	10a4      	asrs	r4, r4, #2
 800f818:	2600      	movs	r6, #0
 800f81a:	42a6      	cmp	r6, r4
 800f81c:	d105      	bne.n	800f82a <__libc_init_array+0x2e>
 800f81e:	bd70      	pop	{r4, r5, r6, pc}
 800f820:	f855 3b04 	ldr.w	r3, [r5], #4
 800f824:	4798      	blx	r3
 800f826:	3601      	adds	r6, #1
 800f828:	e7ee      	b.n	800f808 <__libc_init_array+0xc>
 800f82a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f82e:	4798      	blx	r3
 800f830:	3601      	adds	r6, #1
 800f832:	e7f2      	b.n	800f81a <__libc_init_array+0x1e>
 800f834:	08013f74 	.word	0x08013f74
 800f838:	08013f74 	.word	0x08013f74
 800f83c:	08013f74 	.word	0x08013f74
 800f840:	08013f7c 	.word	0x08013f7c

0800f844 <memcpy>:
 800f844:	440a      	add	r2, r1
 800f846:	4291      	cmp	r1, r2
 800f848:	f100 33ff 	add.w	r3, r0, #4294967295
 800f84c:	d100      	bne.n	800f850 <memcpy+0xc>
 800f84e:	4770      	bx	lr
 800f850:	b510      	push	{r4, lr}
 800f852:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f856:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f85a:	4291      	cmp	r1, r2
 800f85c:	d1f9      	bne.n	800f852 <memcpy+0xe>
 800f85e:	bd10      	pop	{r4, pc}

0800f860 <memset>:
 800f860:	4402      	add	r2, r0
 800f862:	4603      	mov	r3, r0
 800f864:	4293      	cmp	r3, r2
 800f866:	d100      	bne.n	800f86a <memset+0xa>
 800f868:	4770      	bx	lr
 800f86a:	f803 1b01 	strb.w	r1, [r3], #1
 800f86e:	e7f9      	b.n	800f864 <memset+0x4>

0800f870 <__cvt>:
 800f870:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f872:	ed2d 8b02 	vpush	{d8}
 800f876:	eeb0 8b40 	vmov.f64	d8, d0
 800f87a:	b085      	sub	sp, #20
 800f87c:	4617      	mov	r7, r2
 800f87e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f880:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f882:	ee18 2a90 	vmov	r2, s17
 800f886:	f025 0520 	bic.w	r5, r5, #32
 800f88a:	2a00      	cmp	r2, #0
 800f88c:	bfb6      	itet	lt
 800f88e:	222d      	movlt	r2, #45	; 0x2d
 800f890:	2200      	movge	r2, #0
 800f892:	eeb1 8b40 	vneglt.f64	d8, d0
 800f896:	2d46      	cmp	r5, #70	; 0x46
 800f898:	460c      	mov	r4, r1
 800f89a:	701a      	strb	r2, [r3, #0]
 800f89c:	d004      	beq.n	800f8a8 <__cvt+0x38>
 800f89e:	2d45      	cmp	r5, #69	; 0x45
 800f8a0:	d100      	bne.n	800f8a4 <__cvt+0x34>
 800f8a2:	3401      	adds	r4, #1
 800f8a4:	2102      	movs	r1, #2
 800f8a6:	e000      	b.n	800f8aa <__cvt+0x3a>
 800f8a8:	2103      	movs	r1, #3
 800f8aa:	ab03      	add	r3, sp, #12
 800f8ac:	9301      	str	r3, [sp, #4]
 800f8ae:	ab02      	add	r3, sp, #8
 800f8b0:	9300      	str	r3, [sp, #0]
 800f8b2:	4622      	mov	r2, r4
 800f8b4:	4633      	mov	r3, r6
 800f8b6:	eeb0 0b48 	vmov.f64	d0, d8
 800f8ba:	f000 fca9 	bl	8010210 <_dtoa_r>
 800f8be:	2d47      	cmp	r5, #71	; 0x47
 800f8c0:	d109      	bne.n	800f8d6 <__cvt+0x66>
 800f8c2:	07fb      	lsls	r3, r7, #31
 800f8c4:	d407      	bmi.n	800f8d6 <__cvt+0x66>
 800f8c6:	9b03      	ldr	r3, [sp, #12]
 800f8c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f8ca:	1a1b      	subs	r3, r3, r0
 800f8cc:	6013      	str	r3, [r2, #0]
 800f8ce:	b005      	add	sp, #20
 800f8d0:	ecbd 8b02 	vpop	{d8}
 800f8d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8d6:	2d46      	cmp	r5, #70	; 0x46
 800f8d8:	eb00 0204 	add.w	r2, r0, r4
 800f8dc:	d10c      	bne.n	800f8f8 <__cvt+0x88>
 800f8de:	7803      	ldrb	r3, [r0, #0]
 800f8e0:	2b30      	cmp	r3, #48	; 0x30
 800f8e2:	d107      	bne.n	800f8f4 <__cvt+0x84>
 800f8e4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f8e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8ec:	bf1c      	itt	ne
 800f8ee:	f1c4 0401 	rsbne	r4, r4, #1
 800f8f2:	6034      	strne	r4, [r6, #0]
 800f8f4:	6833      	ldr	r3, [r6, #0]
 800f8f6:	441a      	add	r2, r3
 800f8f8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f8fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f900:	bf08      	it	eq
 800f902:	9203      	streq	r2, [sp, #12]
 800f904:	2130      	movs	r1, #48	; 0x30
 800f906:	9b03      	ldr	r3, [sp, #12]
 800f908:	4293      	cmp	r3, r2
 800f90a:	d2dc      	bcs.n	800f8c6 <__cvt+0x56>
 800f90c:	1c5c      	adds	r4, r3, #1
 800f90e:	9403      	str	r4, [sp, #12]
 800f910:	7019      	strb	r1, [r3, #0]
 800f912:	e7f8      	b.n	800f906 <__cvt+0x96>

0800f914 <__exponent>:
 800f914:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f916:	4603      	mov	r3, r0
 800f918:	2900      	cmp	r1, #0
 800f91a:	bfb8      	it	lt
 800f91c:	4249      	neglt	r1, r1
 800f91e:	f803 2b02 	strb.w	r2, [r3], #2
 800f922:	bfb4      	ite	lt
 800f924:	222d      	movlt	r2, #45	; 0x2d
 800f926:	222b      	movge	r2, #43	; 0x2b
 800f928:	2909      	cmp	r1, #9
 800f92a:	7042      	strb	r2, [r0, #1]
 800f92c:	dd2a      	ble.n	800f984 <__exponent+0x70>
 800f92e:	f10d 0407 	add.w	r4, sp, #7
 800f932:	46a4      	mov	ip, r4
 800f934:	270a      	movs	r7, #10
 800f936:	46a6      	mov	lr, r4
 800f938:	460a      	mov	r2, r1
 800f93a:	fb91 f6f7 	sdiv	r6, r1, r7
 800f93e:	fb07 1516 	mls	r5, r7, r6, r1
 800f942:	3530      	adds	r5, #48	; 0x30
 800f944:	2a63      	cmp	r2, #99	; 0x63
 800f946:	f104 34ff 	add.w	r4, r4, #4294967295
 800f94a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f94e:	4631      	mov	r1, r6
 800f950:	dcf1      	bgt.n	800f936 <__exponent+0x22>
 800f952:	3130      	adds	r1, #48	; 0x30
 800f954:	f1ae 0502 	sub.w	r5, lr, #2
 800f958:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f95c:	1c44      	adds	r4, r0, #1
 800f95e:	4629      	mov	r1, r5
 800f960:	4561      	cmp	r1, ip
 800f962:	d30a      	bcc.n	800f97a <__exponent+0x66>
 800f964:	f10d 0209 	add.w	r2, sp, #9
 800f968:	eba2 020e 	sub.w	r2, r2, lr
 800f96c:	4565      	cmp	r5, ip
 800f96e:	bf88      	it	hi
 800f970:	2200      	movhi	r2, #0
 800f972:	4413      	add	r3, r2
 800f974:	1a18      	subs	r0, r3, r0
 800f976:	b003      	add	sp, #12
 800f978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f97a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f97e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f982:	e7ed      	b.n	800f960 <__exponent+0x4c>
 800f984:	2330      	movs	r3, #48	; 0x30
 800f986:	3130      	adds	r1, #48	; 0x30
 800f988:	7083      	strb	r3, [r0, #2]
 800f98a:	70c1      	strb	r1, [r0, #3]
 800f98c:	1d03      	adds	r3, r0, #4
 800f98e:	e7f1      	b.n	800f974 <__exponent+0x60>

0800f990 <_printf_float>:
 800f990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f994:	b08b      	sub	sp, #44	; 0x2c
 800f996:	460c      	mov	r4, r1
 800f998:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800f99c:	4616      	mov	r6, r2
 800f99e:	461f      	mov	r7, r3
 800f9a0:	4605      	mov	r5, r0
 800f9a2:	f001 f9b7 	bl	8010d14 <_localeconv_r>
 800f9a6:	f8d0 b000 	ldr.w	fp, [r0]
 800f9aa:	4658      	mov	r0, fp
 800f9ac:	f7f0 fc98 	bl	80002e0 <strlen>
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	9308      	str	r3, [sp, #32]
 800f9b4:	f8d8 3000 	ldr.w	r3, [r8]
 800f9b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800f9bc:	6822      	ldr	r2, [r4, #0]
 800f9be:	3307      	adds	r3, #7
 800f9c0:	f023 0307 	bic.w	r3, r3, #7
 800f9c4:	f103 0108 	add.w	r1, r3, #8
 800f9c8:	f8c8 1000 	str.w	r1, [r8]
 800f9cc:	4682      	mov	sl, r0
 800f9ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f9d2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800f9d6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800fc38 <_printf_float+0x2a8>
 800f9da:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800f9de:	eeb0 6bc0 	vabs.f64	d6, d0
 800f9e2:	eeb4 6b47 	vcmp.f64	d6, d7
 800f9e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9ea:	dd24      	ble.n	800fa36 <_printf_float+0xa6>
 800f9ec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f9f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9f4:	d502      	bpl.n	800f9fc <_printf_float+0x6c>
 800f9f6:	232d      	movs	r3, #45	; 0x2d
 800f9f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f9fc:	4b90      	ldr	r3, [pc, #576]	; (800fc40 <_printf_float+0x2b0>)
 800f9fe:	4891      	ldr	r0, [pc, #580]	; (800fc44 <_printf_float+0x2b4>)
 800fa00:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800fa04:	bf94      	ite	ls
 800fa06:	4698      	movls	r8, r3
 800fa08:	4680      	movhi	r8, r0
 800fa0a:	2303      	movs	r3, #3
 800fa0c:	6123      	str	r3, [r4, #16]
 800fa0e:	f022 0204 	bic.w	r2, r2, #4
 800fa12:	2300      	movs	r3, #0
 800fa14:	6022      	str	r2, [r4, #0]
 800fa16:	9304      	str	r3, [sp, #16]
 800fa18:	9700      	str	r7, [sp, #0]
 800fa1a:	4633      	mov	r3, r6
 800fa1c:	aa09      	add	r2, sp, #36	; 0x24
 800fa1e:	4621      	mov	r1, r4
 800fa20:	4628      	mov	r0, r5
 800fa22:	f000 f9d3 	bl	800fdcc <_printf_common>
 800fa26:	3001      	adds	r0, #1
 800fa28:	f040 808a 	bne.w	800fb40 <_printf_float+0x1b0>
 800fa2c:	f04f 30ff 	mov.w	r0, #4294967295
 800fa30:	b00b      	add	sp, #44	; 0x2c
 800fa32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa36:	eeb4 0b40 	vcmp.f64	d0, d0
 800fa3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa3e:	d709      	bvc.n	800fa54 <_printf_float+0xc4>
 800fa40:	ee10 3a90 	vmov	r3, s1
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	bfbc      	itt	lt
 800fa48:	232d      	movlt	r3, #45	; 0x2d
 800fa4a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fa4e:	487e      	ldr	r0, [pc, #504]	; (800fc48 <_printf_float+0x2b8>)
 800fa50:	4b7e      	ldr	r3, [pc, #504]	; (800fc4c <_printf_float+0x2bc>)
 800fa52:	e7d5      	b.n	800fa00 <_printf_float+0x70>
 800fa54:	6863      	ldr	r3, [r4, #4]
 800fa56:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800fa5a:	9104      	str	r1, [sp, #16]
 800fa5c:	1c59      	adds	r1, r3, #1
 800fa5e:	d13c      	bne.n	800fada <_printf_float+0x14a>
 800fa60:	2306      	movs	r3, #6
 800fa62:	6063      	str	r3, [r4, #4]
 800fa64:	2300      	movs	r3, #0
 800fa66:	9303      	str	r3, [sp, #12]
 800fa68:	ab08      	add	r3, sp, #32
 800fa6a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800fa6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fa72:	ab07      	add	r3, sp, #28
 800fa74:	6861      	ldr	r1, [r4, #4]
 800fa76:	9300      	str	r3, [sp, #0]
 800fa78:	6022      	str	r2, [r4, #0]
 800fa7a:	f10d 031b 	add.w	r3, sp, #27
 800fa7e:	4628      	mov	r0, r5
 800fa80:	f7ff fef6 	bl	800f870 <__cvt>
 800fa84:	9b04      	ldr	r3, [sp, #16]
 800fa86:	9907      	ldr	r1, [sp, #28]
 800fa88:	2b47      	cmp	r3, #71	; 0x47
 800fa8a:	4680      	mov	r8, r0
 800fa8c:	d108      	bne.n	800faa0 <_printf_float+0x110>
 800fa8e:	1cc8      	adds	r0, r1, #3
 800fa90:	db02      	blt.n	800fa98 <_printf_float+0x108>
 800fa92:	6863      	ldr	r3, [r4, #4]
 800fa94:	4299      	cmp	r1, r3
 800fa96:	dd41      	ble.n	800fb1c <_printf_float+0x18c>
 800fa98:	f1a9 0902 	sub.w	r9, r9, #2
 800fa9c:	fa5f f989 	uxtb.w	r9, r9
 800faa0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800faa4:	d820      	bhi.n	800fae8 <_printf_float+0x158>
 800faa6:	3901      	subs	r1, #1
 800faa8:	464a      	mov	r2, r9
 800faaa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800faae:	9107      	str	r1, [sp, #28]
 800fab0:	f7ff ff30 	bl	800f914 <__exponent>
 800fab4:	9a08      	ldr	r2, [sp, #32]
 800fab6:	9004      	str	r0, [sp, #16]
 800fab8:	1813      	adds	r3, r2, r0
 800faba:	2a01      	cmp	r2, #1
 800fabc:	6123      	str	r3, [r4, #16]
 800fabe:	dc02      	bgt.n	800fac6 <_printf_float+0x136>
 800fac0:	6822      	ldr	r2, [r4, #0]
 800fac2:	07d2      	lsls	r2, r2, #31
 800fac4:	d501      	bpl.n	800faca <_printf_float+0x13a>
 800fac6:	3301      	adds	r3, #1
 800fac8:	6123      	str	r3, [r4, #16]
 800faca:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d0a2      	beq.n	800fa18 <_printf_float+0x88>
 800fad2:	232d      	movs	r3, #45	; 0x2d
 800fad4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fad8:	e79e      	b.n	800fa18 <_printf_float+0x88>
 800fada:	9904      	ldr	r1, [sp, #16]
 800fadc:	2947      	cmp	r1, #71	; 0x47
 800fade:	d1c1      	bne.n	800fa64 <_printf_float+0xd4>
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d1bf      	bne.n	800fa64 <_printf_float+0xd4>
 800fae4:	2301      	movs	r3, #1
 800fae6:	e7bc      	b.n	800fa62 <_printf_float+0xd2>
 800fae8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800faec:	d118      	bne.n	800fb20 <_printf_float+0x190>
 800faee:	2900      	cmp	r1, #0
 800faf0:	6863      	ldr	r3, [r4, #4]
 800faf2:	dd0b      	ble.n	800fb0c <_printf_float+0x17c>
 800faf4:	6121      	str	r1, [r4, #16]
 800faf6:	b913      	cbnz	r3, 800fafe <_printf_float+0x16e>
 800faf8:	6822      	ldr	r2, [r4, #0]
 800fafa:	07d0      	lsls	r0, r2, #31
 800fafc:	d502      	bpl.n	800fb04 <_printf_float+0x174>
 800fafe:	3301      	adds	r3, #1
 800fb00:	440b      	add	r3, r1
 800fb02:	6123      	str	r3, [r4, #16]
 800fb04:	2300      	movs	r3, #0
 800fb06:	65a1      	str	r1, [r4, #88]	; 0x58
 800fb08:	9304      	str	r3, [sp, #16]
 800fb0a:	e7de      	b.n	800faca <_printf_float+0x13a>
 800fb0c:	b913      	cbnz	r3, 800fb14 <_printf_float+0x184>
 800fb0e:	6822      	ldr	r2, [r4, #0]
 800fb10:	07d2      	lsls	r2, r2, #31
 800fb12:	d501      	bpl.n	800fb18 <_printf_float+0x188>
 800fb14:	3302      	adds	r3, #2
 800fb16:	e7f4      	b.n	800fb02 <_printf_float+0x172>
 800fb18:	2301      	movs	r3, #1
 800fb1a:	e7f2      	b.n	800fb02 <_printf_float+0x172>
 800fb1c:	f04f 0967 	mov.w	r9, #103	; 0x67
 800fb20:	9b08      	ldr	r3, [sp, #32]
 800fb22:	4299      	cmp	r1, r3
 800fb24:	db05      	blt.n	800fb32 <_printf_float+0x1a2>
 800fb26:	6823      	ldr	r3, [r4, #0]
 800fb28:	6121      	str	r1, [r4, #16]
 800fb2a:	07d8      	lsls	r0, r3, #31
 800fb2c:	d5ea      	bpl.n	800fb04 <_printf_float+0x174>
 800fb2e:	1c4b      	adds	r3, r1, #1
 800fb30:	e7e7      	b.n	800fb02 <_printf_float+0x172>
 800fb32:	2900      	cmp	r1, #0
 800fb34:	bfd4      	ite	le
 800fb36:	f1c1 0202 	rsble	r2, r1, #2
 800fb3a:	2201      	movgt	r2, #1
 800fb3c:	4413      	add	r3, r2
 800fb3e:	e7e0      	b.n	800fb02 <_printf_float+0x172>
 800fb40:	6823      	ldr	r3, [r4, #0]
 800fb42:	055a      	lsls	r2, r3, #21
 800fb44:	d407      	bmi.n	800fb56 <_printf_float+0x1c6>
 800fb46:	6923      	ldr	r3, [r4, #16]
 800fb48:	4642      	mov	r2, r8
 800fb4a:	4631      	mov	r1, r6
 800fb4c:	4628      	mov	r0, r5
 800fb4e:	47b8      	blx	r7
 800fb50:	3001      	adds	r0, #1
 800fb52:	d12a      	bne.n	800fbaa <_printf_float+0x21a>
 800fb54:	e76a      	b.n	800fa2c <_printf_float+0x9c>
 800fb56:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800fb5a:	f240 80e2 	bls.w	800fd22 <_printf_float+0x392>
 800fb5e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800fb62:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fb66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb6a:	d133      	bne.n	800fbd4 <_printf_float+0x244>
 800fb6c:	4a38      	ldr	r2, [pc, #224]	; (800fc50 <_printf_float+0x2c0>)
 800fb6e:	2301      	movs	r3, #1
 800fb70:	4631      	mov	r1, r6
 800fb72:	4628      	mov	r0, r5
 800fb74:	47b8      	blx	r7
 800fb76:	3001      	adds	r0, #1
 800fb78:	f43f af58 	beq.w	800fa2c <_printf_float+0x9c>
 800fb7c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800fb80:	429a      	cmp	r2, r3
 800fb82:	db02      	blt.n	800fb8a <_printf_float+0x1fa>
 800fb84:	6823      	ldr	r3, [r4, #0]
 800fb86:	07d8      	lsls	r0, r3, #31
 800fb88:	d50f      	bpl.n	800fbaa <_printf_float+0x21a>
 800fb8a:	4653      	mov	r3, sl
 800fb8c:	465a      	mov	r2, fp
 800fb8e:	4631      	mov	r1, r6
 800fb90:	4628      	mov	r0, r5
 800fb92:	47b8      	blx	r7
 800fb94:	3001      	adds	r0, #1
 800fb96:	f43f af49 	beq.w	800fa2c <_printf_float+0x9c>
 800fb9a:	f04f 0800 	mov.w	r8, #0
 800fb9e:	f104 091a 	add.w	r9, r4, #26
 800fba2:	9b08      	ldr	r3, [sp, #32]
 800fba4:	3b01      	subs	r3, #1
 800fba6:	4543      	cmp	r3, r8
 800fba8:	dc09      	bgt.n	800fbbe <_printf_float+0x22e>
 800fbaa:	6823      	ldr	r3, [r4, #0]
 800fbac:	079b      	lsls	r3, r3, #30
 800fbae:	f100 8108 	bmi.w	800fdc2 <_printf_float+0x432>
 800fbb2:	68e0      	ldr	r0, [r4, #12]
 800fbb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbb6:	4298      	cmp	r0, r3
 800fbb8:	bfb8      	it	lt
 800fbba:	4618      	movlt	r0, r3
 800fbbc:	e738      	b.n	800fa30 <_printf_float+0xa0>
 800fbbe:	2301      	movs	r3, #1
 800fbc0:	464a      	mov	r2, r9
 800fbc2:	4631      	mov	r1, r6
 800fbc4:	4628      	mov	r0, r5
 800fbc6:	47b8      	blx	r7
 800fbc8:	3001      	adds	r0, #1
 800fbca:	f43f af2f 	beq.w	800fa2c <_printf_float+0x9c>
 800fbce:	f108 0801 	add.w	r8, r8, #1
 800fbd2:	e7e6      	b.n	800fba2 <_printf_float+0x212>
 800fbd4:	9b07      	ldr	r3, [sp, #28]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	dc3c      	bgt.n	800fc54 <_printf_float+0x2c4>
 800fbda:	4a1d      	ldr	r2, [pc, #116]	; (800fc50 <_printf_float+0x2c0>)
 800fbdc:	2301      	movs	r3, #1
 800fbde:	4631      	mov	r1, r6
 800fbe0:	4628      	mov	r0, r5
 800fbe2:	47b8      	blx	r7
 800fbe4:	3001      	adds	r0, #1
 800fbe6:	f43f af21 	beq.w	800fa2c <_printf_float+0x9c>
 800fbea:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800fbee:	4313      	orrs	r3, r2
 800fbf0:	d102      	bne.n	800fbf8 <_printf_float+0x268>
 800fbf2:	6823      	ldr	r3, [r4, #0]
 800fbf4:	07d9      	lsls	r1, r3, #31
 800fbf6:	d5d8      	bpl.n	800fbaa <_printf_float+0x21a>
 800fbf8:	4653      	mov	r3, sl
 800fbfa:	465a      	mov	r2, fp
 800fbfc:	4631      	mov	r1, r6
 800fbfe:	4628      	mov	r0, r5
 800fc00:	47b8      	blx	r7
 800fc02:	3001      	adds	r0, #1
 800fc04:	f43f af12 	beq.w	800fa2c <_printf_float+0x9c>
 800fc08:	f04f 0900 	mov.w	r9, #0
 800fc0c:	f104 0a1a 	add.w	sl, r4, #26
 800fc10:	9b07      	ldr	r3, [sp, #28]
 800fc12:	425b      	negs	r3, r3
 800fc14:	454b      	cmp	r3, r9
 800fc16:	dc01      	bgt.n	800fc1c <_printf_float+0x28c>
 800fc18:	9b08      	ldr	r3, [sp, #32]
 800fc1a:	e795      	b.n	800fb48 <_printf_float+0x1b8>
 800fc1c:	2301      	movs	r3, #1
 800fc1e:	4652      	mov	r2, sl
 800fc20:	4631      	mov	r1, r6
 800fc22:	4628      	mov	r0, r5
 800fc24:	47b8      	blx	r7
 800fc26:	3001      	adds	r0, #1
 800fc28:	f43f af00 	beq.w	800fa2c <_printf_float+0x9c>
 800fc2c:	f109 0901 	add.w	r9, r9, #1
 800fc30:	e7ee      	b.n	800fc10 <_printf_float+0x280>
 800fc32:	bf00      	nop
 800fc34:	f3af 8000 	nop.w
 800fc38:	ffffffff 	.word	0xffffffff
 800fc3c:	7fefffff 	.word	0x7fefffff
 800fc40:	08013b8c 	.word	0x08013b8c
 800fc44:	08013b90 	.word	0x08013b90
 800fc48:	08013b98 	.word	0x08013b98
 800fc4c:	08013b94 	.word	0x08013b94
 800fc50:	08013b9c 	.word	0x08013b9c
 800fc54:	9a08      	ldr	r2, [sp, #32]
 800fc56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fc58:	429a      	cmp	r2, r3
 800fc5a:	bfa8      	it	ge
 800fc5c:	461a      	movge	r2, r3
 800fc5e:	2a00      	cmp	r2, #0
 800fc60:	4691      	mov	r9, r2
 800fc62:	dc38      	bgt.n	800fcd6 <_printf_float+0x346>
 800fc64:	2300      	movs	r3, #0
 800fc66:	9305      	str	r3, [sp, #20]
 800fc68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fc6c:	f104 021a 	add.w	r2, r4, #26
 800fc70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fc72:	9905      	ldr	r1, [sp, #20]
 800fc74:	9304      	str	r3, [sp, #16]
 800fc76:	eba3 0309 	sub.w	r3, r3, r9
 800fc7a:	428b      	cmp	r3, r1
 800fc7c:	dc33      	bgt.n	800fce6 <_printf_float+0x356>
 800fc7e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800fc82:	429a      	cmp	r2, r3
 800fc84:	db3c      	blt.n	800fd00 <_printf_float+0x370>
 800fc86:	6823      	ldr	r3, [r4, #0]
 800fc88:	07da      	lsls	r2, r3, #31
 800fc8a:	d439      	bmi.n	800fd00 <_printf_float+0x370>
 800fc8c:	9a08      	ldr	r2, [sp, #32]
 800fc8e:	9b04      	ldr	r3, [sp, #16]
 800fc90:	9907      	ldr	r1, [sp, #28]
 800fc92:	1ad3      	subs	r3, r2, r3
 800fc94:	eba2 0901 	sub.w	r9, r2, r1
 800fc98:	4599      	cmp	r9, r3
 800fc9a:	bfa8      	it	ge
 800fc9c:	4699      	movge	r9, r3
 800fc9e:	f1b9 0f00 	cmp.w	r9, #0
 800fca2:	dc35      	bgt.n	800fd10 <_printf_float+0x380>
 800fca4:	f04f 0800 	mov.w	r8, #0
 800fca8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fcac:	f104 0a1a 	add.w	sl, r4, #26
 800fcb0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800fcb4:	1a9b      	subs	r3, r3, r2
 800fcb6:	eba3 0309 	sub.w	r3, r3, r9
 800fcba:	4543      	cmp	r3, r8
 800fcbc:	f77f af75 	ble.w	800fbaa <_printf_float+0x21a>
 800fcc0:	2301      	movs	r3, #1
 800fcc2:	4652      	mov	r2, sl
 800fcc4:	4631      	mov	r1, r6
 800fcc6:	4628      	mov	r0, r5
 800fcc8:	47b8      	blx	r7
 800fcca:	3001      	adds	r0, #1
 800fccc:	f43f aeae 	beq.w	800fa2c <_printf_float+0x9c>
 800fcd0:	f108 0801 	add.w	r8, r8, #1
 800fcd4:	e7ec      	b.n	800fcb0 <_printf_float+0x320>
 800fcd6:	4613      	mov	r3, r2
 800fcd8:	4631      	mov	r1, r6
 800fcda:	4642      	mov	r2, r8
 800fcdc:	4628      	mov	r0, r5
 800fcde:	47b8      	blx	r7
 800fce0:	3001      	adds	r0, #1
 800fce2:	d1bf      	bne.n	800fc64 <_printf_float+0x2d4>
 800fce4:	e6a2      	b.n	800fa2c <_printf_float+0x9c>
 800fce6:	2301      	movs	r3, #1
 800fce8:	4631      	mov	r1, r6
 800fcea:	4628      	mov	r0, r5
 800fcec:	9204      	str	r2, [sp, #16]
 800fcee:	47b8      	blx	r7
 800fcf0:	3001      	adds	r0, #1
 800fcf2:	f43f ae9b 	beq.w	800fa2c <_printf_float+0x9c>
 800fcf6:	9b05      	ldr	r3, [sp, #20]
 800fcf8:	9a04      	ldr	r2, [sp, #16]
 800fcfa:	3301      	adds	r3, #1
 800fcfc:	9305      	str	r3, [sp, #20]
 800fcfe:	e7b7      	b.n	800fc70 <_printf_float+0x2e0>
 800fd00:	4653      	mov	r3, sl
 800fd02:	465a      	mov	r2, fp
 800fd04:	4631      	mov	r1, r6
 800fd06:	4628      	mov	r0, r5
 800fd08:	47b8      	blx	r7
 800fd0a:	3001      	adds	r0, #1
 800fd0c:	d1be      	bne.n	800fc8c <_printf_float+0x2fc>
 800fd0e:	e68d      	b.n	800fa2c <_printf_float+0x9c>
 800fd10:	9a04      	ldr	r2, [sp, #16]
 800fd12:	464b      	mov	r3, r9
 800fd14:	4442      	add	r2, r8
 800fd16:	4631      	mov	r1, r6
 800fd18:	4628      	mov	r0, r5
 800fd1a:	47b8      	blx	r7
 800fd1c:	3001      	adds	r0, #1
 800fd1e:	d1c1      	bne.n	800fca4 <_printf_float+0x314>
 800fd20:	e684      	b.n	800fa2c <_printf_float+0x9c>
 800fd22:	9a08      	ldr	r2, [sp, #32]
 800fd24:	2a01      	cmp	r2, #1
 800fd26:	dc01      	bgt.n	800fd2c <_printf_float+0x39c>
 800fd28:	07db      	lsls	r3, r3, #31
 800fd2a:	d537      	bpl.n	800fd9c <_printf_float+0x40c>
 800fd2c:	2301      	movs	r3, #1
 800fd2e:	4642      	mov	r2, r8
 800fd30:	4631      	mov	r1, r6
 800fd32:	4628      	mov	r0, r5
 800fd34:	47b8      	blx	r7
 800fd36:	3001      	adds	r0, #1
 800fd38:	f43f ae78 	beq.w	800fa2c <_printf_float+0x9c>
 800fd3c:	4653      	mov	r3, sl
 800fd3e:	465a      	mov	r2, fp
 800fd40:	4631      	mov	r1, r6
 800fd42:	4628      	mov	r0, r5
 800fd44:	47b8      	blx	r7
 800fd46:	3001      	adds	r0, #1
 800fd48:	f43f ae70 	beq.w	800fa2c <_printf_float+0x9c>
 800fd4c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800fd50:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fd54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd58:	d01b      	beq.n	800fd92 <_printf_float+0x402>
 800fd5a:	9b08      	ldr	r3, [sp, #32]
 800fd5c:	f108 0201 	add.w	r2, r8, #1
 800fd60:	3b01      	subs	r3, #1
 800fd62:	4631      	mov	r1, r6
 800fd64:	4628      	mov	r0, r5
 800fd66:	47b8      	blx	r7
 800fd68:	3001      	adds	r0, #1
 800fd6a:	d10e      	bne.n	800fd8a <_printf_float+0x3fa>
 800fd6c:	e65e      	b.n	800fa2c <_printf_float+0x9c>
 800fd6e:	2301      	movs	r3, #1
 800fd70:	464a      	mov	r2, r9
 800fd72:	4631      	mov	r1, r6
 800fd74:	4628      	mov	r0, r5
 800fd76:	47b8      	blx	r7
 800fd78:	3001      	adds	r0, #1
 800fd7a:	f43f ae57 	beq.w	800fa2c <_printf_float+0x9c>
 800fd7e:	f108 0801 	add.w	r8, r8, #1
 800fd82:	9b08      	ldr	r3, [sp, #32]
 800fd84:	3b01      	subs	r3, #1
 800fd86:	4543      	cmp	r3, r8
 800fd88:	dcf1      	bgt.n	800fd6e <_printf_float+0x3de>
 800fd8a:	9b04      	ldr	r3, [sp, #16]
 800fd8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fd90:	e6db      	b.n	800fb4a <_printf_float+0x1ba>
 800fd92:	f04f 0800 	mov.w	r8, #0
 800fd96:	f104 091a 	add.w	r9, r4, #26
 800fd9a:	e7f2      	b.n	800fd82 <_printf_float+0x3f2>
 800fd9c:	2301      	movs	r3, #1
 800fd9e:	4642      	mov	r2, r8
 800fda0:	e7df      	b.n	800fd62 <_printf_float+0x3d2>
 800fda2:	2301      	movs	r3, #1
 800fda4:	464a      	mov	r2, r9
 800fda6:	4631      	mov	r1, r6
 800fda8:	4628      	mov	r0, r5
 800fdaa:	47b8      	blx	r7
 800fdac:	3001      	adds	r0, #1
 800fdae:	f43f ae3d 	beq.w	800fa2c <_printf_float+0x9c>
 800fdb2:	f108 0801 	add.w	r8, r8, #1
 800fdb6:	68e3      	ldr	r3, [r4, #12]
 800fdb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fdba:	1a5b      	subs	r3, r3, r1
 800fdbc:	4543      	cmp	r3, r8
 800fdbe:	dcf0      	bgt.n	800fda2 <_printf_float+0x412>
 800fdc0:	e6f7      	b.n	800fbb2 <_printf_float+0x222>
 800fdc2:	f04f 0800 	mov.w	r8, #0
 800fdc6:	f104 0919 	add.w	r9, r4, #25
 800fdca:	e7f4      	b.n	800fdb6 <_printf_float+0x426>

0800fdcc <_printf_common>:
 800fdcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdd0:	4616      	mov	r6, r2
 800fdd2:	4699      	mov	r9, r3
 800fdd4:	688a      	ldr	r2, [r1, #8]
 800fdd6:	690b      	ldr	r3, [r1, #16]
 800fdd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fddc:	4293      	cmp	r3, r2
 800fdde:	bfb8      	it	lt
 800fde0:	4613      	movlt	r3, r2
 800fde2:	6033      	str	r3, [r6, #0]
 800fde4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fde8:	4607      	mov	r7, r0
 800fdea:	460c      	mov	r4, r1
 800fdec:	b10a      	cbz	r2, 800fdf2 <_printf_common+0x26>
 800fdee:	3301      	adds	r3, #1
 800fdf0:	6033      	str	r3, [r6, #0]
 800fdf2:	6823      	ldr	r3, [r4, #0]
 800fdf4:	0699      	lsls	r1, r3, #26
 800fdf6:	bf42      	ittt	mi
 800fdf8:	6833      	ldrmi	r3, [r6, #0]
 800fdfa:	3302      	addmi	r3, #2
 800fdfc:	6033      	strmi	r3, [r6, #0]
 800fdfe:	6825      	ldr	r5, [r4, #0]
 800fe00:	f015 0506 	ands.w	r5, r5, #6
 800fe04:	d106      	bne.n	800fe14 <_printf_common+0x48>
 800fe06:	f104 0a19 	add.w	sl, r4, #25
 800fe0a:	68e3      	ldr	r3, [r4, #12]
 800fe0c:	6832      	ldr	r2, [r6, #0]
 800fe0e:	1a9b      	subs	r3, r3, r2
 800fe10:	42ab      	cmp	r3, r5
 800fe12:	dc26      	bgt.n	800fe62 <_printf_common+0x96>
 800fe14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fe18:	1e13      	subs	r3, r2, #0
 800fe1a:	6822      	ldr	r2, [r4, #0]
 800fe1c:	bf18      	it	ne
 800fe1e:	2301      	movne	r3, #1
 800fe20:	0692      	lsls	r2, r2, #26
 800fe22:	d42b      	bmi.n	800fe7c <_printf_common+0xb0>
 800fe24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fe28:	4649      	mov	r1, r9
 800fe2a:	4638      	mov	r0, r7
 800fe2c:	47c0      	blx	r8
 800fe2e:	3001      	adds	r0, #1
 800fe30:	d01e      	beq.n	800fe70 <_printf_common+0xa4>
 800fe32:	6823      	ldr	r3, [r4, #0]
 800fe34:	68e5      	ldr	r5, [r4, #12]
 800fe36:	6832      	ldr	r2, [r6, #0]
 800fe38:	f003 0306 	and.w	r3, r3, #6
 800fe3c:	2b04      	cmp	r3, #4
 800fe3e:	bf08      	it	eq
 800fe40:	1aad      	subeq	r5, r5, r2
 800fe42:	68a3      	ldr	r3, [r4, #8]
 800fe44:	6922      	ldr	r2, [r4, #16]
 800fe46:	bf0c      	ite	eq
 800fe48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fe4c:	2500      	movne	r5, #0
 800fe4e:	4293      	cmp	r3, r2
 800fe50:	bfc4      	itt	gt
 800fe52:	1a9b      	subgt	r3, r3, r2
 800fe54:	18ed      	addgt	r5, r5, r3
 800fe56:	2600      	movs	r6, #0
 800fe58:	341a      	adds	r4, #26
 800fe5a:	42b5      	cmp	r5, r6
 800fe5c:	d11a      	bne.n	800fe94 <_printf_common+0xc8>
 800fe5e:	2000      	movs	r0, #0
 800fe60:	e008      	b.n	800fe74 <_printf_common+0xa8>
 800fe62:	2301      	movs	r3, #1
 800fe64:	4652      	mov	r2, sl
 800fe66:	4649      	mov	r1, r9
 800fe68:	4638      	mov	r0, r7
 800fe6a:	47c0      	blx	r8
 800fe6c:	3001      	adds	r0, #1
 800fe6e:	d103      	bne.n	800fe78 <_printf_common+0xac>
 800fe70:	f04f 30ff 	mov.w	r0, #4294967295
 800fe74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe78:	3501      	adds	r5, #1
 800fe7a:	e7c6      	b.n	800fe0a <_printf_common+0x3e>
 800fe7c:	18e1      	adds	r1, r4, r3
 800fe7e:	1c5a      	adds	r2, r3, #1
 800fe80:	2030      	movs	r0, #48	; 0x30
 800fe82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fe86:	4422      	add	r2, r4
 800fe88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fe8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fe90:	3302      	adds	r3, #2
 800fe92:	e7c7      	b.n	800fe24 <_printf_common+0x58>
 800fe94:	2301      	movs	r3, #1
 800fe96:	4622      	mov	r2, r4
 800fe98:	4649      	mov	r1, r9
 800fe9a:	4638      	mov	r0, r7
 800fe9c:	47c0      	blx	r8
 800fe9e:	3001      	adds	r0, #1
 800fea0:	d0e6      	beq.n	800fe70 <_printf_common+0xa4>
 800fea2:	3601      	adds	r6, #1
 800fea4:	e7d9      	b.n	800fe5a <_printf_common+0x8e>
	...

0800fea8 <_printf_i>:
 800fea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800feac:	460c      	mov	r4, r1
 800feae:	4691      	mov	r9, r2
 800feb0:	7e27      	ldrb	r7, [r4, #24]
 800feb2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800feb4:	2f78      	cmp	r7, #120	; 0x78
 800feb6:	4680      	mov	r8, r0
 800feb8:	469a      	mov	sl, r3
 800feba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800febe:	d807      	bhi.n	800fed0 <_printf_i+0x28>
 800fec0:	2f62      	cmp	r7, #98	; 0x62
 800fec2:	d80a      	bhi.n	800feda <_printf_i+0x32>
 800fec4:	2f00      	cmp	r7, #0
 800fec6:	f000 80d8 	beq.w	801007a <_printf_i+0x1d2>
 800feca:	2f58      	cmp	r7, #88	; 0x58
 800fecc:	f000 80a3 	beq.w	8010016 <_printf_i+0x16e>
 800fed0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fed4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fed8:	e03a      	b.n	800ff50 <_printf_i+0xa8>
 800feda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fede:	2b15      	cmp	r3, #21
 800fee0:	d8f6      	bhi.n	800fed0 <_printf_i+0x28>
 800fee2:	a001      	add	r0, pc, #4	; (adr r0, 800fee8 <_printf_i+0x40>)
 800fee4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800fee8:	0800ff41 	.word	0x0800ff41
 800feec:	0800ff55 	.word	0x0800ff55
 800fef0:	0800fed1 	.word	0x0800fed1
 800fef4:	0800fed1 	.word	0x0800fed1
 800fef8:	0800fed1 	.word	0x0800fed1
 800fefc:	0800fed1 	.word	0x0800fed1
 800ff00:	0800ff55 	.word	0x0800ff55
 800ff04:	0800fed1 	.word	0x0800fed1
 800ff08:	0800fed1 	.word	0x0800fed1
 800ff0c:	0800fed1 	.word	0x0800fed1
 800ff10:	0800fed1 	.word	0x0800fed1
 800ff14:	08010061 	.word	0x08010061
 800ff18:	0800ff85 	.word	0x0800ff85
 800ff1c:	08010043 	.word	0x08010043
 800ff20:	0800fed1 	.word	0x0800fed1
 800ff24:	0800fed1 	.word	0x0800fed1
 800ff28:	08010083 	.word	0x08010083
 800ff2c:	0800fed1 	.word	0x0800fed1
 800ff30:	0800ff85 	.word	0x0800ff85
 800ff34:	0800fed1 	.word	0x0800fed1
 800ff38:	0800fed1 	.word	0x0800fed1
 800ff3c:	0801004b 	.word	0x0801004b
 800ff40:	680b      	ldr	r3, [r1, #0]
 800ff42:	1d1a      	adds	r2, r3, #4
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	600a      	str	r2, [r1, #0]
 800ff48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ff4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ff50:	2301      	movs	r3, #1
 800ff52:	e0a3      	b.n	801009c <_printf_i+0x1f4>
 800ff54:	6825      	ldr	r5, [r4, #0]
 800ff56:	6808      	ldr	r0, [r1, #0]
 800ff58:	062e      	lsls	r6, r5, #24
 800ff5a:	f100 0304 	add.w	r3, r0, #4
 800ff5e:	d50a      	bpl.n	800ff76 <_printf_i+0xce>
 800ff60:	6805      	ldr	r5, [r0, #0]
 800ff62:	600b      	str	r3, [r1, #0]
 800ff64:	2d00      	cmp	r5, #0
 800ff66:	da03      	bge.n	800ff70 <_printf_i+0xc8>
 800ff68:	232d      	movs	r3, #45	; 0x2d
 800ff6a:	426d      	negs	r5, r5
 800ff6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff70:	485e      	ldr	r0, [pc, #376]	; (80100ec <_printf_i+0x244>)
 800ff72:	230a      	movs	r3, #10
 800ff74:	e019      	b.n	800ffaa <_printf_i+0x102>
 800ff76:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ff7a:	6805      	ldr	r5, [r0, #0]
 800ff7c:	600b      	str	r3, [r1, #0]
 800ff7e:	bf18      	it	ne
 800ff80:	b22d      	sxthne	r5, r5
 800ff82:	e7ef      	b.n	800ff64 <_printf_i+0xbc>
 800ff84:	680b      	ldr	r3, [r1, #0]
 800ff86:	6825      	ldr	r5, [r4, #0]
 800ff88:	1d18      	adds	r0, r3, #4
 800ff8a:	6008      	str	r0, [r1, #0]
 800ff8c:	0628      	lsls	r0, r5, #24
 800ff8e:	d501      	bpl.n	800ff94 <_printf_i+0xec>
 800ff90:	681d      	ldr	r5, [r3, #0]
 800ff92:	e002      	b.n	800ff9a <_printf_i+0xf2>
 800ff94:	0669      	lsls	r1, r5, #25
 800ff96:	d5fb      	bpl.n	800ff90 <_printf_i+0xe8>
 800ff98:	881d      	ldrh	r5, [r3, #0]
 800ff9a:	4854      	ldr	r0, [pc, #336]	; (80100ec <_printf_i+0x244>)
 800ff9c:	2f6f      	cmp	r7, #111	; 0x6f
 800ff9e:	bf0c      	ite	eq
 800ffa0:	2308      	moveq	r3, #8
 800ffa2:	230a      	movne	r3, #10
 800ffa4:	2100      	movs	r1, #0
 800ffa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ffaa:	6866      	ldr	r6, [r4, #4]
 800ffac:	60a6      	str	r6, [r4, #8]
 800ffae:	2e00      	cmp	r6, #0
 800ffb0:	bfa2      	ittt	ge
 800ffb2:	6821      	ldrge	r1, [r4, #0]
 800ffb4:	f021 0104 	bicge.w	r1, r1, #4
 800ffb8:	6021      	strge	r1, [r4, #0]
 800ffba:	b90d      	cbnz	r5, 800ffc0 <_printf_i+0x118>
 800ffbc:	2e00      	cmp	r6, #0
 800ffbe:	d04d      	beq.n	801005c <_printf_i+0x1b4>
 800ffc0:	4616      	mov	r6, r2
 800ffc2:	fbb5 f1f3 	udiv	r1, r5, r3
 800ffc6:	fb03 5711 	mls	r7, r3, r1, r5
 800ffca:	5dc7      	ldrb	r7, [r0, r7]
 800ffcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ffd0:	462f      	mov	r7, r5
 800ffd2:	42bb      	cmp	r3, r7
 800ffd4:	460d      	mov	r5, r1
 800ffd6:	d9f4      	bls.n	800ffc2 <_printf_i+0x11a>
 800ffd8:	2b08      	cmp	r3, #8
 800ffda:	d10b      	bne.n	800fff4 <_printf_i+0x14c>
 800ffdc:	6823      	ldr	r3, [r4, #0]
 800ffde:	07df      	lsls	r7, r3, #31
 800ffe0:	d508      	bpl.n	800fff4 <_printf_i+0x14c>
 800ffe2:	6923      	ldr	r3, [r4, #16]
 800ffe4:	6861      	ldr	r1, [r4, #4]
 800ffe6:	4299      	cmp	r1, r3
 800ffe8:	bfde      	ittt	le
 800ffea:	2330      	movle	r3, #48	; 0x30
 800ffec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fff0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fff4:	1b92      	subs	r2, r2, r6
 800fff6:	6122      	str	r2, [r4, #16]
 800fff8:	f8cd a000 	str.w	sl, [sp]
 800fffc:	464b      	mov	r3, r9
 800fffe:	aa03      	add	r2, sp, #12
 8010000:	4621      	mov	r1, r4
 8010002:	4640      	mov	r0, r8
 8010004:	f7ff fee2 	bl	800fdcc <_printf_common>
 8010008:	3001      	adds	r0, #1
 801000a:	d14c      	bne.n	80100a6 <_printf_i+0x1fe>
 801000c:	f04f 30ff 	mov.w	r0, #4294967295
 8010010:	b004      	add	sp, #16
 8010012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010016:	4835      	ldr	r0, [pc, #212]	; (80100ec <_printf_i+0x244>)
 8010018:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801001c:	6823      	ldr	r3, [r4, #0]
 801001e:	680e      	ldr	r6, [r1, #0]
 8010020:	061f      	lsls	r7, r3, #24
 8010022:	f856 5b04 	ldr.w	r5, [r6], #4
 8010026:	600e      	str	r6, [r1, #0]
 8010028:	d514      	bpl.n	8010054 <_printf_i+0x1ac>
 801002a:	07d9      	lsls	r1, r3, #31
 801002c:	bf44      	itt	mi
 801002e:	f043 0320 	orrmi.w	r3, r3, #32
 8010032:	6023      	strmi	r3, [r4, #0]
 8010034:	b91d      	cbnz	r5, 801003e <_printf_i+0x196>
 8010036:	6823      	ldr	r3, [r4, #0]
 8010038:	f023 0320 	bic.w	r3, r3, #32
 801003c:	6023      	str	r3, [r4, #0]
 801003e:	2310      	movs	r3, #16
 8010040:	e7b0      	b.n	800ffa4 <_printf_i+0xfc>
 8010042:	6823      	ldr	r3, [r4, #0]
 8010044:	f043 0320 	orr.w	r3, r3, #32
 8010048:	6023      	str	r3, [r4, #0]
 801004a:	2378      	movs	r3, #120	; 0x78
 801004c:	4828      	ldr	r0, [pc, #160]	; (80100f0 <_printf_i+0x248>)
 801004e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010052:	e7e3      	b.n	801001c <_printf_i+0x174>
 8010054:	065e      	lsls	r6, r3, #25
 8010056:	bf48      	it	mi
 8010058:	b2ad      	uxthmi	r5, r5
 801005a:	e7e6      	b.n	801002a <_printf_i+0x182>
 801005c:	4616      	mov	r6, r2
 801005e:	e7bb      	b.n	800ffd8 <_printf_i+0x130>
 8010060:	680b      	ldr	r3, [r1, #0]
 8010062:	6826      	ldr	r6, [r4, #0]
 8010064:	6960      	ldr	r0, [r4, #20]
 8010066:	1d1d      	adds	r5, r3, #4
 8010068:	600d      	str	r5, [r1, #0]
 801006a:	0635      	lsls	r5, r6, #24
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	d501      	bpl.n	8010074 <_printf_i+0x1cc>
 8010070:	6018      	str	r0, [r3, #0]
 8010072:	e002      	b.n	801007a <_printf_i+0x1d2>
 8010074:	0671      	lsls	r1, r6, #25
 8010076:	d5fb      	bpl.n	8010070 <_printf_i+0x1c8>
 8010078:	8018      	strh	r0, [r3, #0]
 801007a:	2300      	movs	r3, #0
 801007c:	6123      	str	r3, [r4, #16]
 801007e:	4616      	mov	r6, r2
 8010080:	e7ba      	b.n	800fff8 <_printf_i+0x150>
 8010082:	680b      	ldr	r3, [r1, #0]
 8010084:	1d1a      	adds	r2, r3, #4
 8010086:	600a      	str	r2, [r1, #0]
 8010088:	681e      	ldr	r6, [r3, #0]
 801008a:	6862      	ldr	r2, [r4, #4]
 801008c:	2100      	movs	r1, #0
 801008e:	4630      	mov	r0, r6
 8010090:	f7f0 f92e 	bl	80002f0 <memchr>
 8010094:	b108      	cbz	r0, 801009a <_printf_i+0x1f2>
 8010096:	1b80      	subs	r0, r0, r6
 8010098:	6060      	str	r0, [r4, #4]
 801009a:	6863      	ldr	r3, [r4, #4]
 801009c:	6123      	str	r3, [r4, #16]
 801009e:	2300      	movs	r3, #0
 80100a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80100a4:	e7a8      	b.n	800fff8 <_printf_i+0x150>
 80100a6:	6923      	ldr	r3, [r4, #16]
 80100a8:	4632      	mov	r2, r6
 80100aa:	4649      	mov	r1, r9
 80100ac:	4640      	mov	r0, r8
 80100ae:	47d0      	blx	sl
 80100b0:	3001      	adds	r0, #1
 80100b2:	d0ab      	beq.n	801000c <_printf_i+0x164>
 80100b4:	6823      	ldr	r3, [r4, #0]
 80100b6:	079b      	lsls	r3, r3, #30
 80100b8:	d413      	bmi.n	80100e2 <_printf_i+0x23a>
 80100ba:	68e0      	ldr	r0, [r4, #12]
 80100bc:	9b03      	ldr	r3, [sp, #12]
 80100be:	4298      	cmp	r0, r3
 80100c0:	bfb8      	it	lt
 80100c2:	4618      	movlt	r0, r3
 80100c4:	e7a4      	b.n	8010010 <_printf_i+0x168>
 80100c6:	2301      	movs	r3, #1
 80100c8:	4632      	mov	r2, r6
 80100ca:	4649      	mov	r1, r9
 80100cc:	4640      	mov	r0, r8
 80100ce:	47d0      	blx	sl
 80100d0:	3001      	adds	r0, #1
 80100d2:	d09b      	beq.n	801000c <_printf_i+0x164>
 80100d4:	3501      	adds	r5, #1
 80100d6:	68e3      	ldr	r3, [r4, #12]
 80100d8:	9903      	ldr	r1, [sp, #12]
 80100da:	1a5b      	subs	r3, r3, r1
 80100dc:	42ab      	cmp	r3, r5
 80100de:	dcf2      	bgt.n	80100c6 <_printf_i+0x21e>
 80100e0:	e7eb      	b.n	80100ba <_printf_i+0x212>
 80100e2:	2500      	movs	r5, #0
 80100e4:	f104 0619 	add.w	r6, r4, #25
 80100e8:	e7f5      	b.n	80100d6 <_printf_i+0x22e>
 80100ea:	bf00      	nop
 80100ec:	08013b9e 	.word	0x08013b9e
 80100f0:	08013baf 	.word	0x08013baf

080100f4 <quorem>:
 80100f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100f8:	6903      	ldr	r3, [r0, #16]
 80100fa:	690c      	ldr	r4, [r1, #16]
 80100fc:	42a3      	cmp	r3, r4
 80100fe:	4607      	mov	r7, r0
 8010100:	f2c0 8081 	blt.w	8010206 <quorem+0x112>
 8010104:	3c01      	subs	r4, #1
 8010106:	f101 0814 	add.w	r8, r1, #20
 801010a:	f100 0514 	add.w	r5, r0, #20
 801010e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010112:	9301      	str	r3, [sp, #4]
 8010114:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010118:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801011c:	3301      	adds	r3, #1
 801011e:	429a      	cmp	r2, r3
 8010120:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010124:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010128:	fbb2 f6f3 	udiv	r6, r2, r3
 801012c:	d331      	bcc.n	8010192 <quorem+0x9e>
 801012e:	f04f 0e00 	mov.w	lr, #0
 8010132:	4640      	mov	r0, r8
 8010134:	46ac      	mov	ip, r5
 8010136:	46f2      	mov	sl, lr
 8010138:	f850 2b04 	ldr.w	r2, [r0], #4
 801013c:	b293      	uxth	r3, r2
 801013e:	fb06 e303 	mla	r3, r6, r3, lr
 8010142:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010146:	b29b      	uxth	r3, r3
 8010148:	ebaa 0303 	sub.w	r3, sl, r3
 801014c:	0c12      	lsrs	r2, r2, #16
 801014e:	f8dc a000 	ldr.w	sl, [ip]
 8010152:	fb06 e202 	mla	r2, r6, r2, lr
 8010156:	fa13 f38a 	uxtah	r3, r3, sl
 801015a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801015e:	fa1f fa82 	uxth.w	sl, r2
 8010162:	f8dc 2000 	ldr.w	r2, [ip]
 8010166:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801016a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801016e:	b29b      	uxth	r3, r3
 8010170:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010174:	4581      	cmp	r9, r0
 8010176:	f84c 3b04 	str.w	r3, [ip], #4
 801017a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801017e:	d2db      	bcs.n	8010138 <quorem+0x44>
 8010180:	f855 300b 	ldr.w	r3, [r5, fp]
 8010184:	b92b      	cbnz	r3, 8010192 <quorem+0x9e>
 8010186:	9b01      	ldr	r3, [sp, #4]
 8010188:	3b04      	subs	r3, #4
 801018a:	429d      	cmp	r5, r3
 801018c:	461a      	mov	r2, r3
 801018e:	d32e      	bcc.n	80101ee <quorem+0xfa>
 8010190:	613c      	str	r4, [r7, #16]
 8010192:	4638      	mov	r0, r7
 8010194:	f001 f848 	bl	8011228 <__mcmp>
 8010198:	2800      	cmp	r0, #0
 801019a:	db24      	blt.n	80101e6 <quorem+0xf2>
 801019c:	3601      	adds	r6, #1
 801019e:	4628      	mov	r0, r5
 80101a0:	f04f 0c00 	mov.w	ip, #0
 80101a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80101a8:	f8d0 e000 	ldr.w	lr, [r0]
 80101ac:	b293      	uxth	r3, r2
 80101ae:	ebac 0303 	sub.w	r3, ip, r3
 80101b2:	0c12      	lsrs	r2, r2, #16
 80101b4:	fa13 f38e 	uxtah	r3, r3, lr
 80101b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80101bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80101c0:	b29b      	uxth	r3, r3
 80101c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80101c6:	45c1      	cmp	r9, r8
 80101c8:	f840 3b04 	str.w	r3, [r0], #4
 80101cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80101d0:	d2e8      	bcs.n	80101a4 <quorem+0xb0>
 80101d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80101d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80101da:	b922      	cbnz	r2, 80101e6 <quorem+0xf2>
 80101dc:	3b04      	subs	r3, #4
 80101de:	429d      	cmp	r5, r3
 80101e0:	461a      	mov	r2, r3
 80101e2:	d30a      	bcc.n	80101fa <quorem+0x106>
 80101e4:	613c      	str	r4, [r7, #16]
 80101e6:	4630      	mov	r0, r6
 80101e8:	b003      	add	sp, #12
 80101ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101ee:	6812      	ldr	r2, [r2, #0]
 80101f0:	3b04      	subs	r3, #4
 80101f2:	2a00      	cmp	r2, #0
 80101f4:	d1cc      	bne.n	8010190 <quorem+0x9c>
 80101f6:	3c01      	subs	r4, #1
 80101f8:	e7c7      	b.n	801018a <quorem+0x96>
 80101fa:	6812      	ldr	r2, [r2, #0]
 80101fc:	3b04      	subs	r3, #4
 80101fe:	2a00      	cmp	r2, #0
 8010200:	d1f0      	bne.n	80101e4 <quorem+0xf0>
 8010202:	3c01      	subs	r4, #1
 8010204:	e7eb      	b.n	80101de <quorem+0xea>
 8010206:	2000      	movs	r0, #0
 8010208:	e7ee      	b.n	80101e8 <quorem+0xf4>
 801020a:	0000      	movs	r0, r0
 801020c:	0000      	movs	r0, r0
	...

08010210 <_dtoa_r>:
 8010210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010214:	ec59 8b10 	vmov	r8, r9, d0
 8010218:	b095      	sub	sp, #84	; 0x54
 801021a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801021c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801021e:	9107      	str	r1, [sp, #28]
 8010220:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8010224:	4606      	mov	r6, r0
 8010226:	9209      	str	r2, [sp, #36]	; 0x24
 8010228:	9310      	str	r3, [sp, #64]	; 0x40
 801022a:	b975      	cbnz	r5, 801024a <_dtoa_r+0x3a>
 801022c:	2010      	movs	r0, #16
 801022e:	f000 fd75 	bl	8010d1c <malloc>
 8010232:	4602      	mov	r2, r0
 8010234:	6270      	str	r0, [r6, #36]	; 0x24
 8010236:	b920      	cbnz	r0, 8010242 <_dtoa_r+0x32>
 8010238:	4bab      	ldr	r3, [pc, #684]	; (80104e8 <_dtoa_r+0x2d8>)
 801023a:	21ea      	movs	r1, #234	; 0xea
 801023c:	48ab      	ldr	r0, [pc, #684]	; (80104ec <_dtoa_r+0x2dc>)
 801023e:	f001 f9bd 	bl	80115bc <__assert_func>
 8010242:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010246:	6005      	str	r5, [r0, #0]
 8010248:	60c5      	str	r5, [r0, #12]
 801024a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801024c:	6819      	ldr	r1, [r3, #0]
 801024e:	b151      	cbz	r1, 8010266 <_dtoa_r+0x56>
 8010250:	685a      	ldr	r2, [r3, #4]
 8010252:	604a      	str	r2, [r1, #4]
 8010254:	2301      	movs	r3, #1
 8010256:	4093      	lsls	r3, r2
 8010258:	608b      	str	r3, [r1, #8]
 801025a:	4630      	mov	r0, r6
 801025c:	f000 fda6 	bl	8010dac <_Bfree>
 8010260:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010262:	2200      	movs	r2, #0
 8010264:	601a      	str	r2, [r3, #0]
 8010266:	f1b9 0300 	subs.w	r3, r9, #0
 801026a:	bfbb      	ittet	lt
 801026c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010270:	9303      	strlt	r3, [sp, #12]
 8010272:	2300      	movge	r3, #0
 8010274:	2201      	movlt	r2, #1
 8010276:	bfac      	ite	ge
 8010278:	6023      	strge	r3, [r4, #0]
 801027a:	6022      	strlt	r2, [r4, #0]
 801027c:	4b9c      	ldr	r3, [pc, #624]	; (80104f0 <_dtoa_r+0x2e0>)
 801027e:	9c03      	ldr	r4, [sp, #12]
 8010280:	43a3      	bics	r3, r4
 8010282:	d11a      	bne.n	80102ba <_dtoa_r+0xaa>
 8010284:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010286:	f242 730f 	movw	r3, #9999	; 0x270f
 801028a:	6013      	str	r3, [r2, #0]
 801028c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8010290:	ea53 0308 	orrs.w	r3, r3, r8
 8010294:	f000 8512 	beq.w	8010cbc <_dtoa_r+0xaac>
 8010298:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801029a:	b953      	cbnz	r3, 80102b2 <_dtoa_r+0xa2>
 801029c:	4b95      	ldr	r3, [pc, #596]	; (80104f4 <_dtoa_r+0x2e4>)
 801029e:	e01f      	b.n	80102e0 <_dtoa_r+0xd0>
 80102a0:	4b95      	ldr	r3, [pc, #596]	; (80104f8 <_dtoa_r+0x2e8>)
 80102a2:	9300      	str	r3, [sp, #0]
 80102a4:	3308      	adds	r3, #8
 80102a6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80102a8:	6013      	str	r3, [r2, #0]
 80102aa:	9800      	ldr	r0, [sp, #0]
 80102ac:	b015      	add	sp, #84	; 0x54
 80102ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102b2:	4b90      	ldr	r3, [pc, #576]	; (80104f4 <_dtoa_r+0x2e4>)
 80102b4:	9300      	str	r3, [sp, #0]
 80102b6:	3303      	adds	r3, #3
 80102b8:	e7f5      	b.n	80102a6 <_dtoa_r+0x96>
 80102ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80102be:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80102c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102c6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80102ca:	d10b      	bne.n	80102e4 <_dtoa_r+0xd4>
 80102cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80102ce:	2301      	movs	r3, #1
 80102d0:	6013      	str	r3, [r2, #0]
 80102d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	f000 84ee 	beq.w	8010cb6 <_dtoa_r+0xaa6>
 80102da:	4888      	ldr	r0, [pc, #544]	; (80104fc <_dtoa_r+0x2ec>)
 80102dc:	6018      	str	r0, [r3, #0]
 80102de:	1e43      	subs	r3, r0, #1
 80102e0:	9300      	str	r3, [sp, #0]
 80102e2:	e7e2      	b.n	80102aa <_dtoa_r+0x9a>
 80102e4:	a913      	add	r1, sp, #76	; 0x4c
 80102e6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80102ea:	aa12      	add	r2, sp, #72	; 0x48
 80102ec:	4630      	mov	r0, r6
 80102ee:	f001 f83f 	bl	8011370 <__d2b>
 80102f2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80102f6:	4605      	mov	r5, r0
 80102f8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80102fa:	2900      	cmp	r1, #0
 80102fc:	d047      	beq.n	801038e <_dtoa_r+0x17e>
 80102fe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8010300:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010304:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010308:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801030c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010310:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8010314:	2400      	movs	r4, #0
 8010316:	ec43 2b16 	vmov	d6, r2, r3
 801031a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801031e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80104d0 <_dtoa_r+0x2c0>
 8010322:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010326:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 80104d8 <_dtoa_r+0x2c8>
 801032a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801032e:	eeb0 7b46 	vmov.f64	d7, d6
 8010332:	ee06 1a90 	vmov	s13, r1
 8010336:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801033a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80104e0 <_dtoa_r+0x2d0>
 801033e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010342:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8010346:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801034a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801034e:	ee16 ba90 	vmov	fp, s13
 8010352:	9411      	str	r4, [sp, #68]	; 0x44
 8010354:	d508      	bpl.n	8010368 <_dtoa_r+0x158>
 8010356:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801035a:	eeb4 6b47 	vcmp.f64	d6, d7
 801035e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010362:	bf18      	it	ne
 8010364:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8010368:	f1bb 0f16 	cmp.w	fp, #22
 801036c:	d832      	bhi.n	80103d4 <_dtoa_r+0x1c4>
 801036e:	4b64      	ldr	r3, [pc, #400]	; (8010500 <_dtoa_r+0x2f0>)
 8010370:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010374:	ed93 7b00 	vldr	d7, [r3]
 8010378:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801037c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010384:	d501      	bpl.n	801038a <_dtoa_r+0x17a>
 8010386:	f10b 3bff 	add.w	fp, fp, #4294967295
 801038a:	2300      	movs	r3, #0
 801038c:	e023      	b.n	80103d6 <_dtoa_r+0x1c6>
 801038e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8010390:	4401      	add	r1, r0
 8010392:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8010396:	2b20      	cmp	r3, #32
 8010398:	bfc3      	ittte	gt
 801039a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801039e:	fa04 f303 	lslgt.w	r3, r4, r3
 80103a2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80103a6:	f1c3 0320 	rsble	r3, r3, #32
 80103aa:	bfc6      	itte	gt
 80103ac:	fa28 f804 	lsrgt.w	r8, r8, r4
 80103b0:	ea43 0308 	orrgt.w	r3, r3, r8
 80103b4:	fa08 f303 	lslle.w	r3, r8, r3
 80103b8:	ee07 3a90 	vmov	s15, r3
 80103bc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80103c0:	3901      	subs	r1, #1
 80103c2:	ed8d 7b00 	vstr	d7, [sp]
 80103c6:	9c01      	ldr	r4, [sp, #4]
 80103c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80103cc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80103d0:	2401      	movs	r4, #1
 80103d2:	e7a0      	b.n	8010316 <_dtoa_r+0x106>
 80103d4:	2301      	movs	r3, #1
 80103d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80103d8:	1a43      	subs	r3, r0, r1
 80103da:	1e5a      	subs	r2, r3, #1
 80103dc:	bf45      	ittet	mi
 80103de:	f1c3 0301 	rsbmi	r3, r3, #1
 80103e2:	9305      	strmi	r3, [sp, #20]
 80103e4:	2300      	movpl	r3, #0
 80103e6:	2300      	movmi	r3, #0
 80103e8:	9206      	str	r2, [sp, #24]
 80103ea:	bf54      	ite	pl
 80103ec:	9305      	strpl	r3, [sp, #20]
 80103ee:	9306      	strmi	r3, [sp, #24]
 80103f0:	f1bb 0f00 	cmp.w	fp, #0
 80103f4:	db18      	blt.n	8010428 <_dtoa_r+0x218>
 80103f6:	9b06      	ldr	r3, [sp, #24]
 80103f8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80103fc:	445b      	add	r3, fp
 80103fe:	9306      	str	r3, [sp, #24]
 8010400:	2300      	movs	r3, #0
 8010402:	9a07      	ldr	r2, [sp, #28]
 8010404:	2a09      	cmp	r2, #9
 8010406:	d849      	bhi.n	801049c <_dtoa_r+0x28c>
 8010408:	2a05      	cmp	r2, #5
 801040a:	bfc4      	itt	gt
 801040c:	3a04      	subgt	r2, #4
 801040e:	9207      	strgt	r2, [sp, #28]
 8010410:	9a07      	ldr	r2, [sp, #28]
 8010412:	f1a2 0202 	sub.w	r2, r2, #2
 8010416:	bfcc      	ite	gt
 8010418:	2400      	movgt	r4, #0
 801041a:	2401      	movle	r4, #1
 801041c:	2a03      	cmp	r2, #3
 801041e:	d848      	bhi.n	80104b2 <_dtoa_r+0x2a2>
 8010420:	e8df f002 	tbb	[pc, r2]
 8010424:	3a2c2e0b 	.word	0x3a2c2e0b
 8010428:	9b05      	ldr	r3, [sp, #20]
 801042a:	2200      	movs	r2, #0
 801042c:	eba3 030b 	sub.w	r3, r3, fp
 8010430:	9305      	str	r3, [sp, #20]
 8010432:	920e      	str	r2, [sp, #56]	; 0x38
 8010434:	f1cb 0300 	rsb	r3, fp, #0
 8010438:	e7e3      	b.n	8010402 <_dtoa_r+0x1f2>
 801043a:	2200      	movs	r2, #0
 801043c:	9208      	str	r2, [sp, #32]
 801043e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010440:	2a00      	cmp	r2, #0
 8010442:	dc39      	bgt.n	80104b8 <_dtoa_r+0x2a8>
 8010444:	f04f 0a01 	mov.w	sl, #1
 8010448:	46d1      	mov	r9, sl
 801044a:	4652      	mov	r2, sl
 801044c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8010450:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8010452:	2100      	movs	r1, #0
 8010454:	6079      	str	r1, [r7, #4]
 8010456:	2004      	movs	r0, #4
 8010458:	f100 0c14 	add.w	ip, r0, #20
 801045c:	4594      	cmp	ip, r2
 801045e:	6879      	ldr	r1, [r7, #4]
 8010460:	d92f      	bls.n	80104c2 <_dtoa_r+0x2b2>
 8010462:	4630      	mov	r0, r6
 8010464:	930c      	str	r3, [sp, #48]	; 0x30
 8010466:	f000 fc61 	bl	8010d2c <_Balloc>
 801046a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801046c:	9000      	str	r0, [sp, #0]
 801046e:	4602      	mov	r2, r0
 8010470:	2800      	cmp	r0, #0
 8010472:	d149      	bne.n	8010508 <_dtoa_r+0x2f8>
 8010474:	4b23      	ldr	r3, [pc, #140]	; (8010504 <_dtoa_r+0x2f4>)
 8010476:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801047a:	e6df      	b.n	801023c <_dtoa_r+0x2c>
 801047c:	2201      	movs	r2, #1
 801047e:	e7dd      	b.n	801043c <_dtoa_r+0x22c>
 8010480:	2200      	movs	r2, #0
 8010482:	9208      	str	r2, [sp, #32]
 8010484:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010486:	eb0b 0a02 	add.w	sl, fp, r2
 801048a:	f10a 0901 	add.w	r9, sl, #1
 801048e:	464a      	mov	r2, r9
 8010490:	2a01      	cmp	r2, #1
 8010492:	bfb8      	it	lt
 8010494:	2201      	movlt	r2, #1
 8010496:	e7db      	b.n	8010450 <_dtoa_r+0x240>
 8010498:	2201      	movs	r2, #1
 801049a:	e7f2      	b.n	8010482 <_dtoa_r+0x272>
 801049c:	2401      	movs	r4, #1
 801049e:	2200      	movs	r2, #0
 80104a0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80104a4:	f04f 3aff 	mov.w	sl, #4294967295
 80104a8:	2100      	movs	r1, #0
 80104aa:	46d1      	mov	r9, sl
 80104ac:	2212      	movs	r2, #18
 80104ae:	9109      	str	r1, [sp, #36]	; 0x24
 80104b0:	e7ce      	b.n	8010450 <_dtoa_r+0x240>
 80104b2:	2201      	movs	r2, #1
 80104b4:	9208      	str	r2, [sp, #32]
 80104b6:	e7f5      	b.n	80104a4 <_dtoa_r+0x294>
 80104b8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80104bc:	46d1      	mov	r9, sl
 80104be:	4652      	mov	r2, sl
 80104c0:	e7c6      	b.n	8010450 <_dtoa_r+0x240>
 80104c2:	3101      	adds	r1, #1
 80104c4:	6079      	str	r1, [r7, #4]
 80104c6:	0040      	lsls	r0, r0, #1
 80104c8:	e7c6      	b.n	8010458 <_dtoa_r+0x248>
 80104ca:	bf00      	nop
 80104cc:	f3af 8000 	nop.w
 80104d0:	636f4361 	.word	0x636f4361
 80104d4:	3fd287a7 	.word	0x3fd287a7
 80104d8:	8b60c8b3 	.word	0x8b60c8b3
 80104dc:	3fc68a28 	.word	0x3fc68a28
 80104e0:	509f79fb 	.word	0x509f79fb
 80104e4:	3fd34413 	.word	0x3fd34413
 80104e8:	08013bcd 	.word	0x08013bcd
 80104ec:	08013be4 	.word	0x08013be4
 80104f0:	7ff00000 	.word	0x7ff00000
 80104f4:	08013bc9 	.word	0x08013bc9
 80104f8:	08013bc0 	.word	0x08013bc0
 80104fc:	08013b9d 	.word	0x08013b9d
 8010500:	08013ce0 	.word	0x08013ce0
 8010504:	08013c43 	.word	0x08013c43
 8010508:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801050a:	9900      	ldr	r1, [sp, #0]
 801050c:	6011      	str	r1, [r2, #0]
 801050e:	f1b9 0f0e 	cmp.w	r9, #14
 8010512:	d872      	bhi.n	80105fa <_dtoa_r+0x3ea>
 8010514:	2c00      	cmp	r4, #0
 8010516:	d070      	beq.n	80105fa <_dtoa_r+0x3ea>
 8010518:	f1bb 0f00 	cmp.w	fp, #0
 801051c:	f340 80a6 	ble.w	801066c <_dtoa_r+0x45c>
 8010520:	49ca      	ldr	r1, [pc, #808]	; (801084c <_dtoa_r+0x63c>)
 8010522:	f00b 020f 	and.w	r2, fp, #15
 8010526:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801052a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801052e:	ed92 7b00 	vldr	d7, [r2]
 8010532:	ea4f 112b 	mov.w	r1, fp, asr #4
 8010536:	f000 808d 	beq.w	8010654 <_dtoa_r+0x444>
 801053a:	4ac5      	ldr	r2, [pc, #788]	; (8010850 <_dtoa_r+0x640>)
 801053c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8010540:	ed92 6b08 	vldr	d6, [r2, #32]
 8010544:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8010548:	ed8d 6b02 	vstr	d6, [sp, #8]
 801054c:	f001 010f 	and.w	r1, r1, #15
 8010550:	2203      	movs	r2, #3
 8010552:	48bf      	ldr	r0, [pc, #764]	; (8010850 <_dtoa_r+0x640>)
 8010554:	2900      	cmp	r1, #0
 8010556:	d17f      	bne.n	8010658 <_dtoa_r+0x448>
 8010558:	ed9d 6b02 	vldr	d6, [sp, #8]
 801055c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010560:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010564:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010566:	2900      	cmp	r1, #0
 8010568:	f000 80b2 	beq.w	80106d0 <_dtoa_r+0x4c0>
 801056c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010570:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010574:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801057c:	f140 80a8 	bpl.w	80106d0 <_dtoa_r+0x4c0>
 8010580:	f1b9 0f00 	cmp.w	r9, #0
 8010584:	f000 80a4 	beq.w	80106d0 <_dtoa_r+0x4c0>
 8010588:	f1ba 0f00 	cmp.w	sl, #0
 801058c:	dd31      	ble.n	80105f2 <_dtoa_r+0x3e2>
 801058e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8010592:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010596:	ed8d 7b02 	vstr	d7, [sp, #8]
 801059a:	f10b 37ff 	add.w	r7, fp, #4294967295
 801059e:	3201      	adds	r2, #1
 80105a0:	4650      	mov	r0, sl
 80105a2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80105a6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80105aa:	ee07 2a90 	vmov	s15, r2
 80105ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80105b2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80105b6:	ed8d 5b02 	vstr	d5, [sp, #8]
 80105ba:	9c03      	ldr	r4, [sp, #12]
 80105bc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80105c0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80105c4:	2800      	cmp	r0, #0
 80105c6:	f040 8086 	bne.w	80106d6 <_dtoa_r+0x4c6>
 80105ca:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80105ce:	ee36 6b47 	vsub.f64	d6, d6, d7
 80105d2:	ec42 1b17 	vmov	d7, r1, r2
 80105d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80105da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105de:	f300 8272 	bgt.w	8010ac6 <_dtoa_r+0x8b6>
 80105e2:	eeb1 7b47 	vneg.f64	d7, d7
 80105e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80105ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105ee:	f100 8267 	bmi.w	8010ac0 <_dtoa_r+0x8b0>
 80105f2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80105f6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80105fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80105fc:	2a00      	cmp	r2, #0
 80105fe:	f2c0 8129 	blt.w	8010854 <_dtoa_r+0x644>
 8010602:	f1bb 0f0e 	cmp.w	fp, #14
 8010606:	f300 8125 	bgt.w	8010854 <_dtoa_r+0x644>
 801060a:	4b90      	ldr	r3, [pc, #576]	; (801084c <_dtoa_r+0x63c>)
 801060c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010610:	ed93 6b00 	vldr	d6, [r3]
 8010614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010616:	2b00      	cmp	r3, #0
 8010618:	f280 80c3 	bge.w	80107a2 <_dtoa_r+0x592>
 801061c:	f1b9 0f00 	cmp.w	r9, #0
 8010620:	f300 80bf 	bgt.w	80107a2 <_dtoa_r+0x592>
 8010624:	f040 824c 	bne.w	8010ac0 <_dtoa_r+0x8b0>
 8010628:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801062c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010630:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010634:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801063c:	464c      	mov	r4, r9
 801063e:	464f      	mov	r7, r9
 8010640:	f280 8222 	bge.w	8010a88 <_dtoa_r+0x878>
 8010644:	f8dd 8000 	ldr.w	r8, [sp]
 8010648:	2331      	movs	r3, #49	; 0x31
 801064a:	f808 3b01 	strb.w	r3, [r8], #1
 801064e:	f10b 0b01 	add.w	fp, fp, #1
 8010652:	e21e      	b.n	8010a92 <_dtoa_r+0x882>
 8010654:	2202      	movs	r2, #2
 8010656:	e77c      	b.n	8010552 <_dtoa_r+0x342>
 8010658:	07cc      	lsls	r4, r1, #31
 801065a:	d504      	bpl.n	8010666 <_dtoa_r+0x456>
 801065c:	ed90 6b00 	vldr	d6, [r0]
 8010660:	3201      	adds	r2, #1
 8010662:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010666:	1049      	asrs	r1, r1, #1
 8010668:	3008      	adds	r0, #8
 801066a:	e773      	b.n	8010554 <_dtoa_r+0x344>
 801066c:	d02e      	beq.n	80106cc <_dtoa_r+0x4bc>
 801066e:	f1cb 0100 	rsb	r1, fp, #0
 8010672:	4a76      	ldr	r2, [pc, #472]	; (801084c <_dtoa_r+0x63c>)
 8010674:	f001 000f 	and.w	r0, r1, #15
 8010678:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801067c:	ed92 7b00 	vldr	d7, [r2]
 8010680:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8010684:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010688:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801068c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8010690:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8010694:	486e      	ldr	r0, [pc, #440]	; (8010850 <_dtoa_r+0x640>)
 8010696:	1109      	asrs	r1, r1, #4
 8010698:	2400      	movs	r4, #0
 801069a:	2202      	movs	r2, #2
 801069c:	b939      	cbnz	r1, 80106ae <_dtoa_r+0x49e>
 801069e:	2c00      	cmp	r4, #0
 80106a0:	f43f af60 	beq.w	8010564 <_dtoa_r+0x354>
 80106a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80106a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80106ac:	e75a      	b.n	8010564 <_dtoa_r+0x354>
 80106ae:	07cf      	lsls	r7, r1, #31
 80106b0:	d509      	bpl.n	80106c6 <_dtoa_r+0x4b6>
 80106b2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80106b6:	ed90 7b00 	vldr	d7, [r0]
 80106ba:	ee26 7b07 	vmul.f64	d7, d6, d7
 80106be:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80106c2:	3201      	adds	r2, #1
 80106c4:	2401      	movs	r4, #1
 80106c6:	1049      	asrs	r1, r1, #1
 80106c8:	3008      	adds	r0, #8
 80106ca:	e7e7      	b.n	801069c <_dtoa_r+0x48c>
 80106cc:	2202      	movs	r2, #2
 80106ce:	e749      	b.n	8010564 <_dtoa_r+0x354>
 80106d0:	465f      	mov	r7, fp
 80106d2:	4648      	mov	r0, r9
 80106d4:	e765      	b.n	80105a2 <_dtoa_r+0x392>
 80106d6:	ec42 1b17 	vmov	d7, r1, r2
 80106da:	4a5c      	ldr	r2, [pc, #368]	; (801084c <_dtoa_r+0x63c>)
 80106dc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80106e0:	ed12 4b02 	vldr	d4, [r2, #-8]
 80106e4:	9a00      	ldr	r2, [sp, #0]
 80106e6:	1814      	adds	r4, r2, r0
 80106e8:	9a08      	ldr	r2, [sp, #32]
 80106ea:	b352      	cbz	r2, 8010742 <_dtoa_r+0x532>
 80106ec:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80106f0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80106f4:	f8dd 8000 	ldr.w	r8, [sp]
 80106f8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80106fc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010700:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010704:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010708:	ee14 2a90 	vmov	r2, s9
 801070c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010710:	3230      	adds	r2, #48	; 0x30
 8010712:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010716:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801071a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801071e:	f808 2b01 	strb.w	r2, [r8], #1
 8010722:	d439      	bmi.n	8010798 <_dtoa_r+0x588>
 8010724:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010728:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801072c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010730:	d472      	bmi.n	8010818 <_dtoa_r+0x608>
 8010732:	45a0      	cmp	r8, r4
 8010734:	f43f af5d 	beq.w	80105f2 <_dtoa_r+0x3e2>
 8010738:	ee27 7b03 	vmul.f64	d7, d7, d3
 801073c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010740:	e7e0      	b.n	8010704 <_dtoa_r+0x4f4>
 8010742:	f8dd 8000 	ldr.w	r8, [sp]
 8010746:	ee27 7b04 	vmul.f64	d7, d7, d4
 801074a:	4621      	mov	r1, r4
 801074c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010750:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010754:	ee14 2a90 	vmov	r2, s9
 8010758:	3230      	adds	r2, #48	; 0x30
 801075a:	f808 2b01 	strb.w	r2, [r8], #1
 801075e:	45a0      	cmp	r8, r4
 8010760:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010764:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010768:	d118      	bne.n	801079c <_dtoa_r+0x58c>
 801076a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801076e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010772:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801077a:	dc4d      	bgt.n	8010818 <_dtoa_r+0x608>
 801077c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010780:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010788:	f57f af33 	bpl.w	80105f2 <_dtoa_r+0x3e2>
 801078c:	4688      	mov	r8, r1
 801078e:	3901      	subs	r1, #1
 8010790:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8010794:	2b30      	cmp	r3, #48	; 0x30
 8010796:	d0f9      	beq.n	801078c <_dtoa_r+0x57c>
 8010798:	46bb      	mov	fp, r7
 801079a:	e02a      	b.n	80107f2 <_dtoa_r+0x5e2>
 801079c:	ee26 6b03 	vmul.f64	d6, d6, d3
 80107a0:	e7d6      	b.n	8010750 <_dtoa_r+0x540>
 80107a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80107a6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80107aa:	f8dd 8000 	ldr.w	r8, [sp]
 80107ae:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80107b2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80107b6:	ee15 3a10 	vmov	r3, s10
 80107ba:	3330      	adds	r3, #48	; 0x30
 80107bc:	f808 3b01 	strb.w	r3, [r8], #1
 80107c0:	9b00      	ldr	r3, [sp, #0]
 80107c2:	eba8 0303 	sub.w	r3, r8, r3
 80107c6:	4599      	cmp	r9, r3
 80107c8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80107cc:	eea3 7b46 	vfms.f64	d7, d3, d6
 80107d0:	d133      	bne.n	801083a <_dtoa_r+0x62a>
 80107d2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80107d6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80107da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107de:	dc1a      	bgt.n	8010816 <_dtoa_r+0x606>
 80107e0:	eeb4 7b46 	vcmp.f64	d7, d6
 80107e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107e8:	d103      	bne.n	80107f2 <_dtoa_r+0x5e2>
 80107ea:	ee15 3a10 	vmov	r3, s10
 80107ee:	07d9      	lsls	r1, r3, #31
 80107f0:	d411      	bmi.n	8010816 <_dtoa_r+0x606>
 80107f2:	4629      	mov	r1, r5
 80107f4:	4630      	mov	r0, r6
 80107f6:	f000 fad9 	bl	8010dac <_Bfree>
 80107fa:	2300      	movs	r3, #0
 80107fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80107fe:	f888 3000 	strb.w	r3, [r8]
 8010802:	f10b 0301 	add.w	r3, fp, #1
 8010806:	6013      	str	r3, [r2, #0]
 8010808:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801080a:	2b00      	cmp	r3, #0
 801080c:	f43f ad4d 	beq.w	80102aa <_dtoa_r+0x9a>
 8010810:	f8c3 8000 	str.w	r8, [r3]
 8010814:	e549      	b.n	80102aa <_dtoa_r+0x9a>
 8010816:	465f      	mov	r7, fp
 8010818:	4643      	mov	r3, r8
 801081a:	4698      	mov	r8, r3
 801081c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010820:	2a39      	cmp	r2, #57	; 0x39
 8010822:	d106      	bne.n	8010832 <_dtoa_r+0x622>
 8010824:	9a00      	ldr	r2, [sp, #0]
 8010826:	429a      	cmp	r2, r3
 8010828:	d1f7      	bne.n	801081a <_dtoa_r+0x60a>
 801082a:	9900      	ldr	r1, [sp, #0]
 801082c:	2230      	movs	r2, #48	; 0x30
 801082e:	3701      	adds	r7, #1
 8010830:	700a      	strb	r2, [r1, #0]
 8010832:	781a      	ldrb	r2, [r3, #0]
 8010834:	3201      	adds	r2, #1
 8010836:	701a      	strb	r2, [r3, #0]
 8010838:	e7ae      	b.n	8010798 <_dtoa_r+0x588>
 801083a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801083e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010846:	d1b2      	bne.n	80107ae <_dtoa_r+0x59e>
 8010848:	e7d3      	b.n	80107f2 <_dtoa_r+0x5e2>
 801084a:	bf00      	nop
 801084c:	08013ce0 	.word	0x08013ce0
 8010850:	08013cb8 	.word	0x08013cb8
 8010854:	9908      	ldr	r1, [sp, #32]
 8010856:	2900      	cmp	r1, #0
 8010858:	f000 80d1 	beq.w	80109fe <_dtoa_r+0x7ee>
 801085c:	9907      	ldr	r1, [sp, #28]
 801085e:	2901      	cmp	r1, #1
 8010860:	f300 80b4 	bgt.w	80109cc <_dtoa_r+0x7bc>
 8010864:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010866:	2900      	cmp	r1, #0
 8010868:	f000 80ac 	beq.w	80109c4 <_dtoa_r+0x7b4>
 801086c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010870:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010874:	461c      	mov	r4, r3
 8010876:	930a      	str	r3, [sp, #40]	; 0x28
 8010878:	9b05      	ldr	r3, [sp, #20]
 801087a:	4413      	add	r3, r2
 801087c:	9305      	str	r3, [sp, #20]
 801087e:	9b06      	ldr	r3, [sp, #24]
 8010880:	2101      	movs	r1, #1
 8010882:	4413      	add	r3, r2
 8010884:	4630      	mov	r0, r6
 8010886:	9306      	str	r3, [sp, #24]
 8010888:	f000 fb4c 	bl	8010f24 <__i2b>
 801088c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801088e:	4607      	mov	r7, r0
 8010890:	f1b8 0f00 	cmp.w	r8, #0
 8010894:	dd0d      	ble.n	80108b2 <_dtoa_r+0x6a2>
 8010896:	9a06      	ldr	r2, [sp, #24]
 8010898:	2a00      	cmp	r2, #0
 801089a:	dd0a      	ble.n	80108b2 <_dtoa_r+0x6a2>
 801089c:	4542      	cmp	r2, r8
 801089e:	9905      	ldr	r1, [sp, #20]
 80108a0:	bfa8      	it	ge
 80108a2:	4642      	movge	r2, r8
 80108a4:	1a89      	subs	r1, r1, r2
 80108a6:	9105      	str	r1, [sp, #20]
 80108a8:	9906      	ldr	r1, [sp, #24]
 80108aa:	eba8 0802 	sub.w	r8, r8, r2
 80108ae:	1a8a      	subs	r2, r1, r2
 80108b0:	9206      	str	r2, [sp, #24]
 80108b2:	b303      	cbz	r3, 80108f6 <_dtoa_r+0x6e6>
 80108b4:	9a08      	ldr	r2, [sp, #32]
 80108b6:	2a00      	cmp	r2, #0
 80108b8:	f000 80a6 	beq.w	8010a08 <_dtoa_r+0x7f8>
 80108bc:	2c00      	cmp	r4, #0
 80108be:	dd13      	ble.n	80108e8 <_dtoa_r+0x6d8>
 80108c0:	4639      	mov	r1, r7
 80108c2:	4622      	mov	r2, r4
 80108c4:	4630      	mov	r0, r6
 80108c6:	930c      	str	r3, [sp, #48]	; 0x30
 80108c8:	f000 fbe8 	bl	801109c <__pow5mult>
 80108cc:	462a      	mov	r2, r5
 80108ce:	4601      	mov	r1, r0
 80108d0:	4607      	mov	r7, r0
 80108d2:	4630      	mov	r0, r6
 80108d4:	f000 fb3c 	bl	8010f50 <__multiply>
 80108d8:	4629      	mov	r1, r5
 80108da:	900a      	str	r0, [sp, #40]	; 0x28
 80108dc:	4630      	mov	r0, r6
 80108de:	f000 fa65 	bl	8010dac <_Bfree>
 80108e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80108e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80108e6:	4615      	mov	r5, r2
 80108e8:	1b1a      	subs	r2, r3, r4
 80108ea:	d004      	beq.n	80108f6 <_dtoa_r+0x6e6>
 80108ec:	4629      	mov	r1, r5
 80108ee:	4630      	mov	r0, r6
 80108f0:	f000 fbd4 	bl	801109c <__pow5mult>
 80108f4:	4605      	mov	r5, r0
 80108f6:	2101      	movs	r1, #1
 80108f8:	4630      	mov	r0, r6
 80108fa:	f000 fb13 	bl	8010f24 <__i2b>
 80108fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010900:	2b00      	cmp	r3, #0
 8010902:	4604      	mov	r4, r0
 8010904:	f340 8082 	ble.w	8010a0c <_dtoa_r+0x7fc>
 8010908:	461a      	mov	r2, r3
 801090a:	4601      	mov	r1, r0
 801090c:	4630      	mov	r0, r6
 801090e:	f000 fbc5 	bl	801109c <__pow5mult>
 8010912:	9b07      	ldr	r3, [sp, #28]
 8010914:	2b01      	cmp	r3, #1
 8010916:	4604      	mov	r4, r0
 8010918:	dd7b      	ble.n	8010a12 <_dtoa_r+0x802>
 801091a:	2300      	movs	r3, #0
 801091c:	930a      	str	r3, [sp, #40]	; 0x28
 801091e:	6922      	ldr	r2, [r4, #16]
 8010920:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010924:	6910      	ldr	r0, [r2, #16]
 8010926:	f000 faad 	bl	8010e84 <__hi0bits>
 801092a:	f1c0 0020 	rsb	r0, r0, #32
 801092e:	9b06      	ldr	r3, [sp, #24]
 8010930:	4418      	add	r0, r3
 8010932:	f010 001f 	ands.w	r0, r0, #31
 8010936:	f000 808d 	beq.w	8010a54 <_dtoa_r+0x844>
 801093a:	f1c0 0220 	rsb	r2, r0, #32
 801093e:	2a04      	cmp	r2, #4
 8010940:	f340 8086 	ble.w	8010a50 <_dtoa_r+0x840>
 8010944:	f1c0 001c 	rsb	r0, r0, #28
 8010948:	9b05      	ldr	r3, [sp, #20]
 801094a:	4403      	add	r3, r0
 801094c:	9305      	str	r3, [sp, #20]
 801094e:	9b06      	ldr	r3, [sp, #24]
 8010950:	4403      	add	r3, r0
 8010952:	4480      	add	r8, r0
 8010954:	9306      	str	r3, [sp, #24]
 8010956:	9b05      	ldr	r3, [sp, #20]
 8010958:	2b00      	cmp	r3, #0
 801095a:	dd05      	ble.n	8010968 <_dtoa_r+0x758>
 801095c:	4629      	mov	r1, r5
 801095e:	461a      	mov	r2, r3
 8010960:	4630      	mov	r0, r6
 8010962:	f000 fbf5 	bl	8011150 <__lshift>
 8010966:	4605      	mov	r5, r0
 8010968:	9b06      	ldr	r3, [sp, #24]
 801096a:	2b00      	cmp	r3, #0
 801096c:	dd05      	ble.n	801097a <_dtoa_r+0x76a>
 801096e:	4621      	mov	r1, r4
 8010970:	461a      	mov	r2, r3
 8010972:	4630      	mov	r0, r6
 8010974:	f000 fbec 	bl	8011150 <__lshift>
 8010978:	4604      	mov	r4, r0
 801097a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801097c:	2b00      	cmp	r3, #0
 801097e:	d06b      	beq.n	8010a58 <_dtoa_r+0x848>
 8010980:	4621      	mov	r1, r4
 8010982:	4628      	mov	r0, r5
 8010984:	f000 fc50 	bl	8011228 <__mcmp>
 8010988:	2800      	cmp	r0, #0
 801098a:	da65      	bge.n	8010a58 <_dtoa_r+0x848>
 801098c:	2300      	movs	r3, #0
 801098e:	4629      	mov	r1, r5
 8010990:	220a      	movs	r2, #10
 8010992:	4630      	mov	r0, r6
 8010994:	f000 fa2c 	bl	8010df0 <__multadd>
 8010998:	9b08      	ldr	r3, [sp, #32]
 801099a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801099e:	4605      	mov	r5, r0
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	f000 8192 	beq.w	8010cca <_dtoa_r+0xaba>
 80109a6:	4639      	mov	r1, r7
 80109a8:	2300      	movs	r3, #0
 80109aa:	220a      	movs	r2, #10
 80109ac:	4630      	mov	r0, r6
 80109ae:	f000 fa1f 	bl	8010df0 <__multadd>
 80109b2:	f1ba 0f00 	cmp.w	sl, #0
 80109b6:	4607      	mov	r7, r0
 80109b8:	f300 808e 	bgt.w	8010ad8 <_dtoa_r+0x8c8>
 80109bc:	9b07      	ldr	r3, [sp, #28]
 80109be:	2b02      	cmp	r3, #2
 80109c0:	dc51      	bgt.n	8010a66 <_dtoa_r+0x856>
 80109c2:	e089      	b.n	8010ad8 <_dtoa_r+0x8c8>
 80109c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80109c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80109ca:	e751      	b.n	8010870 <_dtoa_r+0x660>
 80109cc:	f109 34ff 	add.w	r4, r9, #4294967295
 80109d0:	42a3      	cmp	r3, r4
 80109d2:	bfbf      	itttt	lt
 80109d4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80109d6:	1ae3      	sublt	r3, r4, r3
 80109d8:	18d2      	addlt	r2, r2, r3
 80109da:	4613      	movlt	r3, r2
 80109dc:	bfb7      	itett	lt
 80109de:	930e      	strlt	r3, [sp, #56]	; 0x38
 80109e0:	1b1c      	subge	r4, r3, r4
 80109e2:	4623      	movlt	r3, r4
 80109e4:	2400      	movlt	r4, #0
 80109e6:	f1b9 0f00 	cmp.w	r9, #0
 80109ea:	bfb5      	itete	lt
 80109ec:	9a05      	ldrlt	r2, [sp, #20]
 80109ee:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 80109f2:	eba2 0809 	sublt.w	r8, r2, r9
 80109f6:	464a      	movge	r2, r9
 80109f8:	bfb8      	it	lt
 80109fa:	2200      	movlt	r2, #0
 80109fc:	e73b      	b.n	8010876 <_dtoa_r+0x666>
 80109fe:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010a02:	9f08      	ldr	r7, [sp, #32]
 8010a04:	461c      	mov	r4, r3
 8010a06:	e743      	b.n	8010890 <_dtoa_r+0x680>
 8010a08:	461a      	mov	r2, r3
 8010a0a:	e76f      	b.n	80108ec <_dtoa_r+0x6dc>
 8010a0c:	9b07      	ldr	r3, [sp, #28]
 8010a0e:	2b01      	cmp	r3, #1
 8010a10:	dc18      	bgt.n	8010a44 <_dtoa_r+0x834>
 8010a12:	9b02      	ldr	r3, [sp, #8]
 8010a14:	b9b3      	cbnz	r3, 8010a44 <_dtoa_r+0x834>
 8010a16:	9b03      	ldr	r3, [sp, #12]
 8010a18:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8010a1c:	b9a2      	cbnz	r2, 8010a48 <_dtoa_r+0x838>
 8010a1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8010a22:	0d12      	lsrs	r2, r2, #20
 8010a24:	0512      	lsls	r2, r2, #20
 8010a26:	b18a      	cbz	r2, 8010a4c <_dtoa_r+0x83c>
 8010a28:	9b05      	ldr	r3, [sp, #20]
 8010a2a:	3301      	adds	r3, #1
 8010a2c:	9305      	str	r3, [sp, #20]
 8010a2e:	9b06      	ldr	r3, [sp, #24]
 8010a30:	3301      	adds	r3, #1
 8010a32:	9306      	str	r3, [sp, #24]
 8010a34:	2301      	movs	r3, #1
 8010a36:	930a      	str	r3, [sp, #40]	; 0x28
 8010a38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	f47f af6f 	bne.w	801091e <_dtoa_r+0x70e>
 8010a40:	2001      	movs	r0, #1
 8010a42:	e774      	b.n	801092e <_dtoa_r+0x71e>
 8010a44:	2300      	movs	r3, #0
 8010a46:	e7f6      	b.n	8010a36 <_dtoa_r+0x826>
 8010a48:	9b02      	ldr	r3, [sp, #8]
 8010a4a:	e7f4      	b.n	8010a36 <_dtoa_r+0x826>
 8010a4c:	920a      	str	r2, [sp, #40]	; 0x28
 8010a4e:	e7f3      	b.n	8010a38 <_dtoa_r+0x828>
 8010a50:	d081      	beq.n	8010956 <_dtoa_r+0x746>
 8010a52:	4610      	mov	r0, r2
 8010a54:	301c      	adds	r0, #28
 8010a56:	e777      	b.n	8010948 <_dtoa_r+0x738>
 8010a58:	f1b9 0f00 	cmp.w	r9, #0
 8010a5c:	dc37      	bgt.n	8010ace <_dtoa_r+0x8be>
 8010a5e:	9b07      	ldr	r3, [sp, #28]
 8010a60:	2b02      	cmp	r3, #2
 8010a62:	dd34      	ble.n	8010ace <_dtoa_r+0x8be>
 8010a64:	46ca      	mov	sl, r9
 8010a66:	f1ba 0f00 	cmp.w	sl, #0
 8010a6a:	d10d      	bne.n	8010a88 <_dtoa_r+0x878>
 8010a6c:	4621      	mov	r1, r4
 8010a6e:	4653      	mov	r3, sl
 8010a70:	2205      	movs	r2, #5
 8010a72:	4630      	mov	r0, r6
 8010a74:	f000 f9bc 	bl	8010df0 <__multadd>
 8010a78:	4601      	mov	r1, r0
 8010a7a:	4604      	mov	r4, r0
 8010a7c:	4628      	mov	r0, r5
 8010a7e:	f000 fbd3 	bl	8011228 <__mcmp>
 8010a82:	2800      	cmp	r0, #0
 8010a84:	f73f adde 	bgt.w	8010644 <_dtoa_r+0x434>
 8010a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a8a:	f8dd 8000 	ldr.w	r8, [sp]
 8010a8e:	ea6f 0b03 	mvn.w	fp, r3
 8010a92:	f04f 0900 	mov.w	r9, #0
 8010a96:	4621      	mov	r1, r4
 8010a98:	4630      	mov	r0, r6
 8010a9a:	f000 f987 	bl	8010dac <_Bfree>
 8010a9e:	2f00      	cmp	r7, #0
 8010aa0:	f43f aea7 	beq.w	80107f2 <_dtoa_r+0x5e2>
 8010aa4:	f1b9 0f00 	cmp.w	r9, #0
 8010aa8:	d005      	beq.n	8010ab6 <_dtoa_r+0x8a6>
 8010aaa:	45b9      	cmp	r9, r7
 8010aac:	d003      	beq.n	8010ab6 <_dtoa_r+0x8a6>
 8010aae:	4649      	mov	r1, r9
 8010ab0:	4630      	mov	r0, r6
 8010ab2:	f000 f97b 	bl	8010dac <_Bfree>
 8010ab6:	4639      	mov	r1, r7
 8010ab8:	4630      	mov	r0, r6
 8010aba:	f000 f977 	bl	8010dac <_Bfree>
 8010abe:	e698      	b.n	80107f2 <_dtoa_r+0x5e2>
 8010ac0:	2400      	movs	r4, #0
 8010ac2:	4627      	mov	r7, r4
 8010ac4:	e7e0      	b.n	8010a88 <_dtoa_r+0x878>
 8010ac6:	46bb      	mov	fp, r7
 8010ac8:	4604      	mov	r4, r0
 8010aca:	4607      	mov	r7, r0
 8010acc:	e5ba      	b.n	8010644 <_dtoa_r+0x434>
 8010ace:	9b08      	ldr	r3, [sp, #32]
 8010ad0:	46ca      	mov	sl, r9
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	f000 8100 	beq.w	8010cd8 <_dtoa_r+0xac8>
 8010ad8:	f1b8 0f00 	cmp.w	r8, #0
 8010adc:	dd05      	ble.n	8010aea <_dtoa_r+0x8da>
 8010ade:	4639      	mov	r1, r7
 8010ae0:	4642      	mov	r2, r8
 8010ae2:	4630      	mov	r0, r6
 8010ae4:	f000 fb34 	bl	8011150 <__lshift>
 8010ae8:	4607      	mov	r7, r0
 8010aea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d05d      	beq.n	8010bac <_dtoa_r+0x99c>
 8010af0:	6879      	ldr	r1, [r7, #4]
 8010af2:	4630      	mov	r0, r6
 8010af4:	f000 f91a 	bl	8010d2c <_Balloc>
 8010af8:	4680      	mov	r8, r0
 8010afa:	b928      	cbnz	r0, 8010b08 <_dtoa_r+0x8f8>
 8010afc:	4b82      	ldr	r3, [pc, #520]	; (8010d08 <_dtoa_r+0xaf8>)
 8010afe:	4602      	mov	r2, r0
 8010b00:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010b04:	f7ff bb9a 	b.w	801023c <_dtoa_r+0x2c>
 8010b08:	693a      	ldr	r2, [r7, #16]
 8010b0a:	3202      	adds	r2, #2
 8010b0c:	0092      	lsls	r2, r2, #2
 8010b0e:	f107 010c 	add.w	r1, r7, #12
 8010b12:	300c      	adds	r0, #12
 8010b14:	f7fe fe96 	bl	800f844 <memcpy>
 8010b18:	2201      	movs	r2, #1
 8010b1a:	4641      	mov	r1, r8
 8010b1c:	4630      	mov	r0, r6
 8010b1e:	f000 fb17 	bl	8011150 <__lshift>
 8010b22:	9b00      	ldr	r3, [sp, #0]
 8010b24:	3301      	adds	r3, #1
 8010b26:	9305      	str	r3, [sp, #20]
 8010b28:	9b00      	ldr	r3, [sp, #0]
 8010b2a:	4453      	add	r3, sl
 8010b2c:	9309      	str	r3, [sp, #36]	; 0x24
 8010b2e:	9b02      	ldr	r3, [sp, #8]
 8010b30:	f003 0301 	and.w	r3, r3, #1
 8010b34:	46b9      	mov	r9, r7
 8010b36:	9308      	str	r3, [sp, #32]
 8010b38:	4607      	mov	r7, r0
 8010b3a:	9b05      	ldr	r3, [sp, #20]
 8010b3c:	4621      	mov	r1, r4
 8010b3e:	3b01      	subs	r3, #1
 8010b40:	4628      	mov	r0, r5
 8010b42:	9302      	str	r3, [sp, #8]
 8010b44:	f7ff fad6 	bl	80100f4 <quorem>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	3330      	adds	r3, #48	; 0x30
 8010b4c:	9006      	str	r0, [sp, #24]
 8010b4e:	4649      	mov	r1, r9
 8010b50:	4628      	mov	r0, r5
 8010b52:	930a      	str	r3, [sp, #40]	; 0x28
 8010b54:	f000 fb68 	bl	8011228 <__mcmp>
 8010b58:	463a      	mov	r2, r7
 8010b5a:	4682      	mov	sl, r0
 8010b5c:	4621      	mov	r1, r4
 8010b5e:	4630      	mov	r0, r6
 8010b60:	f000 fb7e 	bl	8011260 <__mdiff>
 8010b64:	68c2      	ldr	r2, [r0, #12]
 8010b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b68:	4680      	mov	r8, r0
 8010b6a:	bb0a      	cbnz	r2, 8010bb0 <_dtoa_r+0x9a0>
 8010b6c:	4601      	mov	r1, r0
 8010b6e:	4628      	mov	r0, r5
 8010b70:	f000 fb5a 	bl	8011228 <__mcmp>
 8010b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b76:	4602      	mov	r2, r0
 8010b78:	4641      	mov	r1, r8
 8010b7a:	4630      	mov	r0, r6
 8010b7c:	920e      	str	r2, [sp, #56]	; 0x38
 8010b7e:	930a      	str	r3, [sp, #40]	; 0x28
 8010b80:	f000 f914 	bl	8010dac <_Bfree>
 8010b84:	9b07      	ldr	r3, [sp, #28]
 8010b86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010b88:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010b8c:	ea43 0102 	orr.w	r1, r3, r2
 8010b90:	9b08      	ldr	r3, [sp, #32]
 8010b92:	430b      	orrs	r3, r1
 8010b94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b96:	d10d      	bne.n	8010bb4 <_dtoa_r+0x9a4>
 8010b98:	2b39      	cmp	r3, #57	; 0x39
 8010b9a:	d029      	beq.n	8010bf0 <_dtoa_r+0x9e0>
 8010b9c:	f1ba 0f00 	cmp.w	sl, #0
 8010ba0:	dd01      	ble.n	8010ba6 <_dtoa_r+0x996>
 8010ba2:	9b06      	ldr	r3, [sp, #24]
 8010ba4:	3331      	adds	r3, #49	; 0x31
 8010ba6:	9a02      	ldr	r2, [sp, #8]
 8010ba8:	7013      	strb	r3, [r2, #0]
 8010baa:	e774      	b.n	8010a96 <_dtoa_r+0x886>
 8010bac:	4638      	mov	r0, r7
 8010bae:	e7b8      	b.n	8010b22 <_dtoa_r+0x912>
 8010bb0:	2201      	movs	r2, #1
 8010bb2:	e7e1      	b.n	8010b78 <_dtoa_r+0x968>
 8010bb4:	f1ba 0f00 	cmp.w	sl, #0
 8010bb8:	db06      	blt.n	8010bc8 <_dtoa_r+0x9b8>
 8010bba:	9907      	ldr	r1, [sp, #28]
 8010bbc:	ea41 0a0a 	orr.w	sl, r1, sl
 8010bc0:	9908      	ldr	r1, [sp, #32]
 8010bc2:	ea5a 0101 	orrs.w	r1, sl, r1
 8010bc6:	d120      	bne.n	8010c0a <_dtoa_r+0x9fa>
 8010bc8:	2a00      	cmp	r2, #0
 8010bca:	ddec      	ble.n	8010ba6 <_dtoa_r+0x996>
 8010bcc:	4629      	mov	r1, r5
 8010bce:	2201      	movs	r2, #1
 8010bd0:	4630      	mov	r0, r6
 8010bd2:	9305      	str	r3, [sp, #20]
 8010bd4:	f000 fabc 	bl	8011150 <__lshift>
 8010bd8:	4621      	mov	r1, r4
 8010bda:	4605      	mov	r5, r0
 8010bdc:	f000 fb24 	bl	8011228 <__mcmp>
 8010be0:	2800      	cmp	r0, #0
 8010be2:	9b05      	ldr	r3, [sp, #20]
 8010be4:	dc02      	bgt.n	8010bec <_dtoa_r+0x9dc>
 8010be6:	d1de      	bne.n	8010ba6 <_dtoa_r+0x996>
 8010be8:	07da      	lsls	r2, r3, #31
 8010bea:	d5dc      	bpl.n	8010ba6 <_dtoa_r+0x996>
 8010bec:	2b39      	cmp	r3, #57	; 0x39
 8010bee:	d1d8      	bne.n	8010ba2 <_dtoa_r+0x992>
 8010bf0:	9a02      	ldr	r2, [sp, #8]
 8010bf2:	2339      	movs	r3, #57	; 0x39
 8010bf4:	7013      	strb	r3, [r2, #0]
 8010bf6:	4643      	mov	r3, r8
 8010bf8:	4698      	mov	r8, r3
 8010bfa:	3b01      	subs	r3, #1
 8010bfc:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8010c00:	2a39      	cmp	r2, #57	; 0x39
 8010c02:	d051      	beq.n	8010ca8 <_dtoa_r+0xa98>
 8010c04:	3201      	adds	r2, #1
 8010c06:	701a      	strb	r2, [r3, #0]
 8010c08:	e745      	b.n	8010a96 <_dtoa_r+0x886>
 8010c0a:	2a00      	cmp	r2, #0
 8010c0c:	dd03      	ble.n	8010c16 <_dtoa_r+0xa06>
 8010c0e:	2b39      	cmp	r3, #57	; 0x39
 8010c10:	d0ee      	beq.n	8010bf0 <_dtoa_r+0x9e0>
 8010c12:	3301      	adds	r3, #1
 8010c14:	e7c7      	b.n	8010ba6 <_dtoa_r+0x996>
 8010c16:	9a05      	ldr	r2, [sp, #20]
 8010c18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010c1a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010c1e:	428a      	cmp	r2, r1
 8010c20:	d02b      	beq.n	8010c7a <_dtoa_r+0xa6a>
 8010c22:	4629      	mov	r1, r5
 8010c24:	2300      	movs	r3, #0
 8010c26:	220a      	movs	r2, #10
 8010c28:	4630      	mov	r0, r6
 8010c2a:	f000 f8e1 	bl	8010df0 <__multadd>
 8010c2e:	45b9      	cmp	r9, r7
 8010c30:	4605      	mov	r5, r0
 8010c32:	f04f 0300 	mov.w	r3, #0
 8010c36:	f04f 020a 	mov.w	r2, #10
 8010c3a:	4649      	mov	r1, r9
 8010c3c:	4630      	mov	r0, r6
 8010c3e:	d107      	bne.n	8010c50 <_dtoa_r+0xa40>
 8010c40:	f000 f8d6 	bl	8010df0 <__multadd>
 8010c44:	4681      	mov	r9, r0
 8010c46:	4607      	mov	r7, r0
 8010c48:	9b05      	ldr	r3, [sp, #20]
 8010c4a:	3301      	adds	r3, #1
 8010c4c:	9305      	str	r3, [sp, #20]
 8010c4e:	e774      	b.n	8010b3a <_dtoa_r+0x92a>
 8010c50:	f000 f8ce 	bl	8010df0 <__multadd>
 8010c54:	4639      	mov	r1, r7
 8010c56:	4681      	mov	r9, r0
 8010c58:	2300      	movs	r3, #0
 8010c5a:	220a      	movs	r2, #10
 8010c5c:	4630      	mov	r0, r6
 8010c5e:	f000 f8c7 	bl	8010df0 <__multadd>
 8010c62:	4607      	mov	r7, r0
 8010c64:	e7f0      	b.n	8010c48 <_dtoa_r+0xa38>
 8010c66:	f1ba 0f00 	cmp.w	sl, #0
 8010c6a:	9a00      	ldr	r2, [sp, #0]
 8010c6c:	bfcc      	ite	gt
 8010c6e:	46d0      	movgt	r8, sl
 8010c70:	f04f 0801 	movle.w	r8, #1
 8010c74:	4490      	add	r8, r2
 8010c76:	f04f 0900 	mov.w	r9, #0
 8010c7a:	4629      	mov	r1, r5
 8010c7c:	2201      	movs	r2, #1
 8010c7e:	4630      	mov	r0, r6
 8010c80:	9302      	str	r3, [sp, #8]
 8010c82:	f000 fa65 	bl	8011150 <__lshift>
 8010c86:	4621      	mov	r1, r4
 8010c88:	4605      	mov	r5, r0
 8010c8a:	f000 facd 	bl	8011228 <__mcmp>
 8010c8e:	2800      	cmp	r0, #0
 8010c90:	dcb1      	bgt.n	8010bf6 <_dtoa_r+0x9e6>
 8010c92:	d102      	bne.n	8010c9a <_dtoa_r+0xa8a>
 8010c94:	9b02      	ldr	r3, [sp, #8]
 8010c96:	07db      	lsls	r3, r3, #31
 8010c98:	d4ad      	bmi.n	8010bf6 <_dtoa_r+0x9e6>
 8010c9a:	4643      	mov	r3, r8
 8010c9c:	4698      	mov	r8, r3
 8010c9e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010ca2:	2a30      	cmp	r2, #48	; 0x30
 8010ca4:	d0fa      	beq.n	8010c9c <_dtoa_r+0xa8c>
 8010ca6:	e6f6      	b.n	8010a96 <_dtoa_r+0x886>
 8010ca8:	9a00      	ldr	r2, [sp, #0]
 8010caa:	429a      	cmp	r2, r3
 8010cac:	d1a4      	bne.n	8010bf8 <_dtoa_r+0x9e8>
 8010cae:	f10b 0b01 	add.w	fp, fp, #1
 8010cb2:	2331      	movs	r3, #49	; 0x31
 8010cb4:	e778      	b.n	8010ba8 <_dtoa_r+0x998>
 8010cb6:	4b15      	ldr	r3, [pc, #84]	; (8010d0c <_dtoa_r+0xafc>)
 8010cb8:	f7ff bb12 	b.w	80102e0 <_dtoa_r+0xd0>
 8010cbc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	f47f aaee 	bne.w	80102a0 <_dtoa_r+0x90>
 8010cc4:	4b12      	ldr	r3, [pc, #72]	; (8010d10 <_dtoa_r+0xb00>)
 8010cc6:	f7ff bb0b 	b.w	80102e0 <_dtoa_r+0xd0>
 8010cca:	f1ba 0f00 	cmp.w	sl, #0
 8010cce:	dc03      	bgt.n	8010cd8 <_dtoa_r+0xac8>
 8010cd0:	9b07      	ldr	r3, [sp, #28]
 8010cd2:	2b02      	cmp	r3, #2
 8010cd4:	f73f aec7 	bgt.w	8010a66 <_dtoa_r+0x856>
 8010cd8:	f8dd 8000 	ldr.w	r8, [sp]
 8010cdc:	4621      	mov	r1, r4
 8010cde:	4628      	mov	r0, r5
 8010ce0:	f7ff fa08 	bl	80100f4 <quorem>
 8010ce4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010ce8:	f808 3b01 	strb.w	r3, [r8], #1
 8010cec:	9a00      	ldr	r2, [sp, #0]
 8010cee:	eba8 0202 	sub.w	r2, r8, r2
 8010cf2:	4592      	cmp	sl, r2
 8010cf4:	ddb7      	ble.n	8010c66 <_dtoa_r+0xa56>
 8010cf6:	4629      	mov	r1, r5
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	220a      	movs	r2, #10
 8010cfc:	4630      	mov	r0, r6
 8010cfe:	f000 f877 	bl	8010df0 <__multadd>
 8010d02:	4605      	mov	r5, r0
 8010d04:	e7ea      	b.n	8010cdc <_dtoa_r+0xacc>
 8010d06:	bf00      	nop
 8010d08:	08013c43 	.word	0x08013c43
 8010d0c:	08013b9c 	.word	0x08013b9c
 8010d10:	08013bc0 	.word	0x08013bc0

08010d14 <_localeconv_r>:
 8010d14:	4800      	ldr	r0, [pc, #0]	; (8010d18 <_localeconv_r+0x4>)
 8010d16:	4770      	bx	lr
 8010d18:	2400019c 	.word	0x2400019c

08010d1c <malloc>:
 8010d1c:	4b02      	ldr	r3, [pc, #8]	; (8010d28 <malloc+0xc>)
 8010d1e:	4601      	mov	r1, r0
 8010d20:	6818      	ldr	r0, [r3, #0]
 8010d22:	f000 bbe1 	b.w	80114e8 <_malloc_r>
 8010d26:	bf00      	nop
 8010d28:	24000048 	.word	0x24000048

08010d2c <_Balloc>:
 8010d2c:	b570      	push	{r4, r5, r6, lr}
 8010d2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010d30:	4604      	mov	r4, r0
 8010d32:	460d      	mov	r5, r1
 8010d34:	b976      	cbnz	r6, 8010d54 <_Balloc+0x28>
 8010d36:	2010      	movs	r0, #16
 8010d38:	f7ff fff0 	bl	8010d1c <malloc>
 8010d3c:	4602      	mov	r2, r0
 8010d3e:	6260      	str	r0, [r4, #36]	; 0x24
 8010d40:	b920      	cbnz	r0, 8010d4c <_Balloc+0x20>
 8010d42:	4b18      	ldr	r3, [pc, #96]	; (8010da4 <_Balloc+0x78>)
 8010d44:	4818      	ldr	r0, [pc, #96]	; (8010da8 <_Balloc+0x7c>)
 8010d46:	2166      	movs	r1, #102	; 0x66
 8010d48:	f000 fc38 	bl	80115bc <__assert_func>
 8010d4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010d50:	6006      	str	r6, [r0, #0]
 8010d52:	60c6      	str	r6, [r0, #12]
 8010d54:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010d56:	68f3      	ldr	r3, [r6, #12]
 8010d58:	b183      	cbz	r3, 8010d7c <_Balloc+0x50>
 8010d5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010d5c:	68db      	ldr	r3, [r3, #12]
 8010d5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010d62:	b9b8      	cbnz	r0, 8010d94 <_Balloc+0x68>
 8010d64:	2101      	movs	r1, #1
 8010d66:	fa01 f605 	lsl.w	r6, r1, r5
 8010d6a:	1d72      	adds	r2, r6, #5
 8010d6c:	0092      	lsls	r2, r2, #2
 8010d6e:	4620      	mov	r0, r4
 8010d70:	f000 fb5a 	bl	8011428 <_calloc_r>
 8010d74:	b160      	cbz	r0, 8010d90 <_Balloc+0x64>
 8010d76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010d7a:	e00e      	b.n	8010d9a <_Balloc+0x6e>
 8010d7c:	2221      	movs	r2, #33	; 0x21
 8010d7e:	2104      	movs	r1, #4
 8010d80:	4620      	mov	r0, r4
 8010d82:	f000 fb51 	bl	8011428 <_calloc_r>
 8010d86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010d88:	60f0      	str	r0, [r6, #12]
 8010d8a:	68db      	ldr	r3, [r3, #12]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d1e4      	bne.n	8010d5a <_Balloc+0x2e>
 8010d90:	2000      	movs	r0, #0
 8010d92:	bd70      	pop	{r4, r5, r6, pc}
 8010d94:	6802      	ldr	r2, [r0, #0]
 8010d96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010da0:	e7f7      	b.n	8010d92 <_Balloc+0x66>
 8010da2:	bf00      	nop
 8010da4:	08013bcd 	.word	0x08013bcd
 8010da8:	08013c54 	.word	0x08013c54

08010dac <_Bfree>:
 8010dac:	b570      	push	{r4, r5, r6, lr}
 8010dae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010db0:	4605      	mov	r5, r0
 8010db2:	460c      	mov	r4, r1
 8010db4:	b976      	cbnz	r6, 8010dd4 <_Bfree+0x28>
 8010db6:	2010      	movs	r0, #16
 8010db8:	f7ff ffb0 	bl	8010d1c <malloc>
 8010dbc:	4602      	mov	r2, r0
 8010dbe:	6268      	str	r0, [r5, #36]	; 0x24
 8010dc0:	b920      	cbnz	r0, 8010dcc <_Bfree+0x20>
 8010dc2:	4b09      	ldr	r3, [pc, #36]	; (8010de8 <_Bfree+0x3c>)
 8010dc4:	4809      	ldr	r0, [pc, #36]	; (8010dec <_Bfree+0x40>)
 8010dc6:	218a      	movs	r1, #138	; 0x8a
 8010dc8:	f000 fbf8 	bl	80115bc <__assert_func>
 8010dcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010dd0:	6006      	str	r6, [r0, #0]
 8010dd2:	60c6      	str	r6, [r0, #12]
 8010dd4:	b13c      	cbz	r4, 8010de6 <_Bfree+0x3a>
 8010dd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010dd8:	6862      	ldr	r2, [r4, #4]
 8010dda:	68db      	ldr	r3, [r3, #12]
 8010ddc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010de0:	6021      	str	r1, [r4, #0]
 8010de2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010de6:	bd70      	pop	{r4, r5, r6, pc}
 8010de8:	08013bcd 	.word	0x08013bcd
 8010dec:	08013c54 	.word	0x08013c54

08010df0 <__multadd>:
 8010df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010df4:	690e      	ldr	r6, [r1, #16]
 8010df6:	4607      	mov	r7, r0
 8010df8:	4698      	mov	r8, r3
 8010dfa:	460c      	mov	r4, r1
 8010dfc:	f101 0014 	add.w	r0, r1, #20
 8010e00:	2300      	movs	r3, #0
 8010e02:	6805      	ldr	r5, [r0, #0]
 8010e04:	b2a9      	uxth	r1, r5
 8010e06:	fb02 8101 	mla	r1, r2, r1, r8
 8010e0a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8010e0e:	0c2d      	lsrs	r5, r5, #16
 8010e10:	fb02 c505 	mla	r5, r2, r5, ip
 8010e14:	b289      	uxth	r1, r1
 8010e16:	3301      	adds	r3, #1
 8010e18:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8010e1c:	429e      	cmp	r6, r3
 8010e1e:	f840 1b04 	str.w	r1, [r0], #4
 8010e22:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8010e26:	dcec      	bgt.n	8010e02 <__multadd+0x12>
 8010e28:	f1b8 0f00 	cmp.w	r8, #0
 8010e2c:	d022      	beq.n	8010e74 <__multadd+0x84>
 8010e2e:	68a3      	ldr	r3, [r4, #8]
 8010e30:	42b3      	cmp	r3, r6
 8010e32:	dc19      	bgt.n	8010e68 <__multadd+0x78>
 8010e34:	6861      	ldr	r1, [r4, #4]
 8010e36:	4638      	mov	r0, r7
 8010e38:	3101      	adds	r1, #1
 8010e3a:	f7ff ff77 	bl	8010d2c <_Balloc>
 8010e3e:	4605      	mov	r5, r0
 8010e40:	b928      	cbnz	r0, 8010e4e <__multadd+0x5e>
 8010e42:	4602      	mov	r2, r0
 8010e44:	4b0d      	ldr	r3, [pc, #52]	; (8010e7c <__multadd+0x8c>)
 8010e46:	480e      	ldr	r0, [pc, #56]	; (8010e80 <__multadd+0x90>)
 8010e48:	21b5      	movs	r1, #181	; 0xb5
 8010e4a:	f000 fbb7 	bl	80115bc <__assert_func>
 8010e4e:	6922      	ldr	r2, [r4, #16]
 8010e50:	3202      	adds	r2, #2
 8010e52:	f104 010c 	add.w	r1, r4, #12
 8010e56:	0092      	lsls	r2, r2, #2
 8010e58:	300c      	adds	r0, #12
 8010e5a:	f7fe fcf3 	bl	800f844 <memcpy>
 8010e5e:	4621      	mov	r1, r4
 8010e60:	4638      	mov	r0, r7
 8010e62:	f7ff ffa3 	bl	8010dac <_Bfree>
 8010e66:	462c      	mov	r4, r5
 8010e68:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010e6c:	3601      	adds	r6, #1
 8010e6e:	f8c3 8014 	str.w	r8, [r3, #20]
 8010e72:	6126      	str	r6, [r4, #16]
 8010e74:	4620      	mov	r0, r4
 8010e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e7a:	bf00      	nop
 8010e7c:	08013c43 	.word	0x08013c43
 8010e80:	08013c54 	.word	0x08013c54

08010e84 <__hi0bits>:
 8010e84:	0c03      	lsrs	r3, r0, #16
 8010e86:	041b      	lsls	r3, r3, #16
 8010e88:	b9d3      	cbnz	r3, 8010ec0 <__hi0bits+0x3c>
 8010e8a:	0400      	lsls	r0, r0, #16
 8010e8c:	2310      	movs	r3, #16
 8010e8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010e92:	bf04      	itt	eq
 8010e94:	0200      	lsleq	r0, r0, #8
 8010e96:	3308      	addeq	r3, #8
 8010e98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010e9c:	bf04      	itt	eq
 8010e9e:	0100      	lsleq	r0, r0, #4
 8010ea0:	3304      	addeq	r3, #4
 8010ea2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010ea6:	bf04      	itt	eq
 8010ea8:	0080      	lsleq	r0, r0, #2
 8010eaa:	3302      	addeq	r3, #2
 8010eac:	2800      	cmp	r0, #0
 8010eae:	db05      	blt.n	8010ebc <__hi0bits+0x38>
 8010eb0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010eb4:	f103 0301 	add.w	r3, r3, #1
 8010eb8:	bf08      	it	eq
 8010eba:	2320      	moveq	r3, #32
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	4770      	bx	lr
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	e7e4      	b.n	8010e8e <__hi0bits+0xa>

08010ec4 <__lo0bits>:
 8010ec4:	6803      	ldr	r3, [r0, #0]
 8010ec6:	f013 0207 	ands.w	r2, r3, #7
 8010eca:	4601      	mov	r1, r0
 8010ecc:	d00b      	beq.n	8010ee6 <__lo0bits+0x22>
 8010ece:	07da      	lsls	r2, r3, #31
 8010ed0:	d424      	bmi.n	8010f1c <__lo0bits+0x58>
 8010ed2:	0798      	lsls	r0, r3, #30
 8010ed4:	bf49      	itett	mi
 8010ed6:	085b      	lsrmi	r3, r3, #1
 8010ed8:	089b      	lsrpl	r3, r3, #2
 8010eda:	2001      	movmi	r0, #1
 8010edc:	600b      	strmi	r3, [r1, #0]
 8010ede:	bf5c      	itt	pl
 8010ee0:	600b      	strpl	r3, [r1, #0]
 8010ee2:	2002      	movpl	r0, #2
 8010ee4:	4770      	bx	lr
 8010ee6:	b298      	uxth	r0, r3
 8010ee8:	b9b0      	cbnz	r0, 8010f18 <__lo0bits+0x54>
 8010eea:	0c1b      	lsrs	r3, r3, #16
 8010eec:	2010      	movs	r0, #16
 8010eee:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010ef2:	bf04      	itt	eq
 8010ef4:	0a1b      	lsreq	r3, r3, #8
 8010ef6:	3008      	addeq	r0, #8
 8010ef8:	071a      	lsls	r2, r3, #28
 8010efa:	bf04      	itt	eq
 8010efc:	091b      	lsreq	r3, r3, #4
 8010efe:	3004      	addeq	r0, #4
 8010f00:	079a      	lsls	r2, r3, #30
 8010f02:	bf04      	itt	eq
 8010f04:	089b      	lsreq	r3, r3, #2
 8010f06:	3002      	addeq	r0, #2
 8010f08:	07da      	lsls	r2, r3, #31
 8010f0a:	d403      	bmi.n	8010f14 <__lo0bits+0x50>
 8010f0c:	085b      	lsrs	r3, r3, #1
 8010f0e:	f100 0001 	add.w	r0, r0, #1
 8010f12:	d005      	beq.n	8010f20 <__lo0bits+0x5c>
 8010f14:	600b      	str	r3, [r1, #0]
 8010f16:	4770      	bx	lr
 8010f18:	4610      	mov	r0, r2
 8010f1a:	e7e8      	b.n	8010eee <__lo0bits+0x2a>
 8010f1c:	2000      	movs	r0, #0
 8010f1e:	4770      	bx	lr
 8010f20:	2020      	movs	r0, #32
 8010f22:	4770      	bx	lr

08010f24 <__i2b>:
 8010f24:	b510      	push	{r4, lr}
 8010f26:	460c      	mov	r4, r1
 8010f28:	2101      	movs	r1, #1
 8010f2a:	f7ff feff 	bl	8010d2c <_Balloc>
 8010f2e:	4602      	mov	r2, r0
 8010f30:	b928      	cbnz	r0, 8010f3e <__i2b+0x1a>
 8010f32:	4b05      	ldr	r3, [pc, #20]	; (8010f48 <__i2b+0x24>)
 8010f34:	4805      	ldr	r0, [pc, #20]	; (8010f4c <__i2b+0x28>)
 8010f36:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010f3a:	f000 fb3f 	bl	80115bc <__assert_func>
 8010f3e:	2301      	movs	r3, #1
 8010f40:	6144      	str	r4, [r0, #20]
 8010f42:	6103      	str	r3, [r0, #16]
 8010f44:	bd10      	pop	{r4, pc}
 8010f46:	bf00      	nop
 8010f48:	08013c43 	.word	0x08013c43
 8010f4c:	08013c54 	.word	0x08013c54

08010f50 <__multiply>:
 8010f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f54:	4614      	mov	r4, r2
 8010f56:	690a      	ldr	r2, [r1, #16]
 8010f58:	6923      	ldr	r3, [r4, #16]
 8010f5a:	429a      	cmp	r2, r3
 8010f5c:	bfb8      	it	lt
 8010f5e:	460b      	movlt	r3, r1
 8010f60:	460d      	mov	r5, r1
 8010f62:	bfbc      	itt	lt
 8010f64:	4625      	movlt	r5, r4
 8010f66:	461c      	movlt	r4, r3
 8010f68:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8010f6c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010f70:	68ab      	ldr	r3, [r5, #8]
 8010f72:	6869      	ldr	r1, [r5, #4]
 8010f74:	eb0a 0709 	add.w	r7, sl, r9
 8010f78:	42bb      	cmp	r3, r7
 8010f7a:	b085      	sub	sp, #20
 8010f7c:	bfb8      	it	lt
 8010f7e:	3101      	addlt	r1, #1
 8010f80:	f7ff fed4 	bl	8010d2c <_Balloc>
 8010f84:	b930      	cbnz	r0, 8010f94 <__multiply+0x44>
 8010f86:	4602      	mov	r2, r0
 8010f88:	4b42      	ldr	r3, [pc, #264]	; (8011094 <__multiply+0x144>)
 8010f8a:	4843      	ldr	r0, [pc, #268]	; (8011098 <__multiply+0x148>)
 8010f8c:	f240 115d 	movw	r1, #349	; 0x15d
 8010f90:	f000 fb14 	bl	80115bc <__assert_func>
 8010f94:	f100 0614 	add.w	r6, r0, #20
 8010f98:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8010f9c:	4633      	mov	r3, r6
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	4543      	cmp	r3, r8
 8010fa2:	d31e      	bcc.n	8010fe2 <__multiply+0x92>
 8010fa4:	f105 0c14 	add.w	ip, r5, #20
 8010fa8:	f104 0314 	add.w	r3, r4, #20
 8010fac:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8010fb0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8010fb4:	9202      	str	r2, [sp, #8]
 8010fb6:	ebac 0205 	sub.w	r2, ip, r5
 8010fba:	3a15      	subs	r2, #21
 8010fbc:	f022 0203 	bic.w	r2, r2, #3
 8010fc0:	3204      	adds	r2, #4
 8010fc2:	f105 0115 	add.w	r1, r5, #21
 8010fc6:	458c      	cmp	ip, r1
 8010fc8:	bf38      	it	cc
 8010fca:	2204      	movcc	r2, #4
 8010fcc:	9201      	str	r2, [sp, #4]
 8010fce:	9a02      	ldr	r2, [sp, #8]
 8010fd0:	9303      	str	r3, [sp, #12]
 8010fd2:	429a      	cmp	r2, r3
 8010fd4:	d808      	bhi.n	8010fe8 <__multiply+0x98>
 8010fd6:	2f00      	cmp	r7, #0
 8010fd8:	dc55      	bgt.n	8011086 <__multiply+0x136>
 8010fda:	6107      	str	r7, [r0, #16]
 8010fdc:	b005      	add	sp, #20
 8010fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fe2:	f843 2b04 	str.w	r2, [r3], #4
 8010fe6:	e7db      	b.n	8010fa0 <__multiply+0x50>
 8010fe8:	f8b3 a000 	ldrh.w	sl, [r3]
 8010fec:	f1ba 0f00 	cmp.w	sl, #0
 8010ff0:	d020      	beq.n	8011034 <__multiply+0xe4>
 8010ff2:	f105 0e14 	add.w	lr, r5, #20
 8010ff6:	46b1      	mov	r9, r6
 8010ff8:	2200      	movs	r2, #0
 8010ffa:	f85e 4b04 	ldr.w	r4, [lr], #4
 8010ffe:	f8d9 b000 	ldr.w	fp, [r9]
 8011002:	b2a1      	uxth	r1, r4
 8011004:	fa1f fb8b 	uxth.w	fp, fp
 8011008:	fb0a b101 	mla	r1, sl, r1, fp
 801100c:	4411      	add	r1, r2
 801100e:	f8d9 2000 	ldr.w	r2, [r9]
 8011012:	0c24      	lsrs	r4, r4, #16
 8011014:	0c12      	lsrs	r2, r2, #16
 8011016:	fb0a 2404 	mla	r4, sl, r4, r2
 801101a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801101e:	b289      	uxth	r1, r1
 8011020:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8011024:	45f4      	cmp	ip, lr
 8011026:	f849 1b04 	str.w	r1, [r9], #4
 801102a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801102e:	d8e4      	bhi.n	8010ffa <__multiply+0xaa>
 8011030:	9901      	ldr	r1, [sp, #4]
 8011032:	5072      	str	r2, [r6, r1]
 8011034:	9a03      	ldr	r2, [sp, #12]
 8011036:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801103a:	3304      	adds	r3, #4
 801103c:	f1b9 0f00 	cmp.w	r9, #0
 8011040:	d01f      	beq.n	8011082 <__multiply+0x132>
 8011042:	6834      	ldr	r4, [r6, #0]
 8011044:	f105 0114 	add.w	r1, r5, #20
 8011048:	46b6      	mov	lr, r6
 801104a:	f04f 0a00 	mov.w	sl, #0
 801104e:	880a      	ldrh	r2, [r1, #0]
 8011050:	f8be b002 	ldrh.w	fp, [lr, #2]
 8011054:	fb09 b202 	mla	r2, r9, r2, fp
 8011058:	4492      	add	sl, r2
 801105a:	b2a4      	uxth	r4, r4
 801105c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8011060:	f84e 4b04 	str.w	r4, [lr], #4
 8011064:	f851 4b04 	ldr.w	r4, [r1], #4
 8011068:	f8be 2000 	ldrh.w	r2, [lr]
 801106c:	0c24      	lsrs	r4, r4, #16
 801106e:	fb09 2404 	mla	r4, r9, r4, r2
 8011072:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8011076:	458c      	cmp	ip, r1
 8011078:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801107c:	d8e7      	bhi.n	801104e <__multiply+0xfe>
 801107e:	9a01      	ldr	r2, [sp, #4]
 8011080:	50b4      	str	r4, [r6, r2]
 8011082:	3604      	adds	r6, #4
 8011084:	e7a3      	b.n	8010fce <__multiply+0x7e>
 8011086:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801108a:	2b00      	cmp	r3, #0
 801108c:	d1a5      	bne.n	8010fda <__multiply+0x8a>
 801108e:	3f01      	subs	r7, #1
 8011090:	e7a1      	b.n	8010fd6 <__multiply+0x86>
 8011092:	bf00      	nop
 8011094:	08013c43 	.word	0x08013c43
 8011098:	08013c54 	.word	0x08013c54

0801109c <__pow5mult>:
 801109c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110a0:	4615      	mov	r5, r2
 80110a2:	f012 0203 	ands.w	r2, r2, #3
 80110a6:	4606      	mov	r6, r0
 80110a8:	460f      	mov	r7, r1
 80110aa:	d007      	beq.n	80110bc <__pow5mult+0x20>
 80110ac:	4c25      	ldr	r4, [pc, #148]	; (8011144 <__pow5mult+0xa8>)
 80110ae:	3a01      	subs	r2, #1
 80110b0:	2300      	movs	r3, #0
 80110b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80110b6:	f7ff fe9b 	bl	8010df0 <__multadd>
 80110ba:	4607      	mov	r7, r0
 80110bc:	10ad      	asrs	r5, r5, #2
 80110be:	d03d      	beq.n	801113c <__pow5mult+0xa0>
 80110c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80110c2:	b97c      	cbnz	r4, 80110e4 <__pow5mult+0x48>
 80110c4:	2010      	movs	r0, #16
 80110c6:	f7ff fe29 	bl	8010d1c <malloc>
 80110ca:	4602      	mov	r2, r0
 80110cc:	6270      	str	r0, [r6, #36]	; 0x24
 80110ce:	b928      	cbnz	r0, 80110dc <__pow5mult+0x40>
 80110d0:	4b1d      	ldr	r3, [pc, #116]	; (8011148 <__pow5mult+0xac>)
 80110d2:	481e      	ldr	r0, [pc, #120]	; (801114c <__pow5mult+0xb0>)
 80110d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80110d8:	f000 fa70 	bl	80115bc <__assert_func>
 80110dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80110e0:	6004      	str	r4, [r0, #0]
 80110e2:	60c4      	str	r4, [r0, #12]
 80110e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80110e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80110ec:	b94c      	cbnz	r4, 8011102 <__pow5mult+0x66>
 80110ee:	f240 2171 	movw	r1, #625	; 0x271
 80110f2:	4630      	mov	r0, r6
 80110f4:	f7ff ff16 	bl	8010f24 <__i2b>
 80110f8:	2300      	movs	r3, #0
 80110fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80110fe:	4604      	mov	r4, r0
 8011100:	6003      	str	r3, [r0, #0]
 8011102:	f04f 0900 	mov.w	r9, #0
 8011106:	07eb      	lsls	r3, r5, #31
 8011108:	d50a      	bpl.n	8011120 <__pow5mult+0x84>
 801110a:	4639      	mov	r1, r7
 801110c:	4622      	mov	r2, r4
 801110e:	4630      	mov	r0, r6
 8011110:	f7ff ff1e 	bl	8010f50 <__multiply>
 8011114:	4639      	mov	r1, r7
 8011116:	4680      	mov	r8, r0
 8011118:	4630      	mov	r0, r6
 801111a:	f7ff fe47 	bl	8010dac <_Bfree>
 801111e:	4647      	mov	r7, r8
 8011120:	106d      	asrs	r5, r5, #1
 8011122:	d00b      	beq.n	801113c <__pow5mult+0xa0>
 8011124:	6820      	ldr	r0, [r4, #0]
 8011126:	b938      	cbnz	r0, 8011138 <__pow5mult+0x9c>
 8011128:	4622      	mov	r2, r4
 801112a:	4621      	mov	r1, r4
 801112c:	4630      	mov	r0, r6
 801112e:	f7ff ff0f 	bl	8010f50 <__multiply>
 8011132:	6020      	str	r0, [r4, #0]
 8011134:	f8c0 9000 	str.w	r9, [r0]
 8011138:	4604      	mov	r4, r0
 801113a:	e7e4      	b.n	8011106 <__pow5mult+0x6a>
 801113c:	4638      	mov	r0, r7
 801113e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011142:	bf00      	nop
 8011144:	08013da8 	.word	0x08013da8
 8011148:	08013bcd 	.word	0x08013bcd
 801114c:	08013c54 	.word	0x08013c54

08011150 <__lshift>:
 8011150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011154:	460c      	mov	r4, r1
 8011156:	6849      	ldr	r1, [r1, #4]
 8011158:	6923      	ldr	r3, [r4, #16]
 801115a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801115e:	68a3      	ldr	r3, [r4, #8]
 8011160:	4607      	mov	r7, r0
 8011162:	4691      	mov	r9, r2
 8011164:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011168:	f108 0601 	add.w	r6, r8, #1
 801116c:	42b3      	cmp	r3, r6
 801116e:	db0b      	blt.n	8011188 <__lshift+0x38>
 8011170:	4638      	mov	r0, r7
 8011172:	f7ff fddb 	bl	8010d2c <_Balloc>
 8011176:	4605      	mov	r5, r0
 8011178:	b948      	cbnz	r0, 801118e <__lshift+0x3e>
 801117a:	4602      	mov	r2, r0
 801117c:	4b28      	ldr	r3, [pc, #160]	; (8011220 <__lshift+0xd0>)
 801117e:	4829      	ldr	r0, [pc, #164]	; (8011224 <__lshift+0xd4>)
 8011180:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011184:	f000 fa1a 	bl	80115bc <__assert_func>
 8011188:	3101      	adds	r1, #1
 801118a:	005b      	lsls	r3, r3, #1
 801118c:	e7ee      	b.n	801116c <__lshift+0x1c>
 801118e:	2300      	movs	r3, #0
 8011190:	f100 0114 	add.w	r1, r0, #20
 8011194:	f100 0210 	add.w	r2, r0, #16
 8011198:	4618      	mov	r0, r3
 801119a:	4553      	cmp	r3, sl
 801119c:	db33      	blt.n	8011206 <__lshift+0xb6>
 801119e:	6920      	ldr	r0, [r4, #16]
 80111a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80111a4:	f104 0314 	add.w	r3, r4, #20
 80111a8:	f019 091f 	ands.w	r9, r9, #31
 80111ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80111b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80111b4:	d02b      	beq.n	801120e <__lshift+0xbe>
 80111b6:	f1c9 0e20 	rsb	lr, r9, #32
 80111ba:	468a      	mov	sl, r1
 80111bc:	2200      	movs	r2, #0
 80111be:	6818      	ldr	r0, [r3, #0]
 80111c0:	fa00 f009 	lsl.w	r0, r0, r9
 80111c4:	4302      	orrs	r2, r0
 80111c6:	f84a 2b04 	str.w	r2, [sl], #4
 80111ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80111ce:	459c      	cmp	ip, r3
 80111d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80111d4:	d8f3      	bhi.n	80111be <__lshift+0x6e>
 80111d6:	ebac 0304 	sub.w	r3, ip, r4
 80111da:	3b15      	subs	r3, #21
 80111dc:	f023 0303 	bic.w	r3, r3, #3
 80111e0:	3304      	adds	r3, #4
 80111e2:	f104 0015 	add.w	r0, r4, #21
 80111e6:	4584      	cmp	ip, r0
 80111e8:	bf38      	it	cc
 80111ea:	2304      	movcc	r3, #4
 80111ec:	50ca      	str	r2, [r1, r3]
 80111ee:	b10a      	cbz	r2, 80111f4 <__lshift+0xa4>
 80111f0:	f108 0602 	add.w	r6, r8, #2
 80111f4:	3e01      	subs	r6, #1
 80111f6:	4638      	mov	r0, r7
 80111f8:	612e      	str	r6, [r5, #16]
 80111fa:	4621      	mov	r1, r4
 80111fc:	f7ff fdd6 	bl	8010dac <_Bfree>
 8011200:	4628      	mov	r0, r5
 8011202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011206:	f842 0f04 	str.w	r0, [r2, #4]!
 801120a:	3301      	adds	r3, #1
 801120c:	e7c5      	b.n	801119a <__lshift+0x4a>
 801120e:	3904      	subs	r1, #4
 8011210:	f853 2b04 	ldr.w	r2, [r3], #4
 8011214:	f841 2f04 	str.w	r2, [r1, #4]!
 8011218:	459c      	cmp	ip, r3
 801121a:	d8f9      	bhi.n	8011210 <__lshift+0xc0>
 801121c:	e7ea      	b.n	80111f4 <__lshift+0xa4>
 801121e:	bf00      	nop
 8011220:	08013c43 	.word	0x08013c43
 8011224:	08013c54 	.word	0x08013c54

08011228 <__mcmp>:
 8011228:	b530      	push	{r4, r5, lr}
 801122a:	6902      	ldr	r2, [r0, #16]
 801122c:	690c      	ldr	r4, [r1, #16]
 801122e:	1b12      	subs	r2, r2, r4
 8011230:	d10e      	bne.n	8011250 <__mcmp+0x28>
 8011232:	f100 0314 	add.w	r3, r0, #20
 8011236:	3114      	adds	r1, #20
 8011238:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801123c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011240:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011244:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011248:	42a5      	cmp	r5, r4
 801124a:	d003      	beq.n	8011254 <__mcmp+0x2c>
 801124c:	d305      	bcc.n	801125a <__mcmp+0x32>
 801124e:	2201      	movs	r2, #1
 8011250:	4610      	mov	r0, r2
 8011252:	bd30      	pop	{r4, r5, pc}
 8011254:	4283      	cmp	r3, r0
 8011256:	d3f3      	bcc.n	8011240 <__mcmp+0x18>
 8011258:	e7fa      	b.n	8011250 <__mcmp+0x28>
 801125a:	f04f 32ff 	mov.w	r2, #4294967295
 801125e:	e7f7      	b.n	8011250 <__mcmp+0x28>

08011260 <__mdiff>:
 8011260:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011264:	460c      	mov	r4, r1
 8011266:	4606      	mov	r6, r0
 8011268:	4611      	mov	r1, r2
 801126a:	4620      	mov	r0, r4
 801126c:	4617      	mov	r7, r2
 801126e:	f7ff ffdb 	bl	8011228 <__mcmp>
 8011272:	1e05      	subs	r5, r0, #0
 8011274:	d110      	bne.n	8011298 <__mdiff+0x38>
 8011276:	4629      	mov	r1, r5
 8011278:	4630      	mov	r0, r6
 801127a:	f7ff fd57 	bl	8010d2c <_Balloc>
 801127e:	b930      	cbnz	r0, 801128e <__mdiff+0x2e>
 8011280:	4b39      	ldr	r3, [pc, #228]	; (8011368 <__mdiff+0x108>)
 8011282:	4602      	mov	r2, r0
 8011284:	f240 2132 	movw	r1, #562	; 0x232
 8011288:	4838      	ldr	r0, [pc, #224]	; (801136c <__mdiff+0x10c>)
 801128a:	f000 f997 	bl	80115bc <__assert_func>
 801128e:	2301      	movs	r3, #1
 8011290:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011294:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011298:	bfa4      	itt	ge
 801129a:	463b      	movge	r3, r7
 801129c:	4627      	movge	r7, r4
 801129e:	4630      	mov	r0, r6
 80112a0:	6879      	ldr	r1, [r7, #4]
 80112a2:	bfa6      	itte	ge
 80112a4:	461c      	movge	r4, r3
 80112a6:	2500      	movge	r5, #0
 80112a8:	2501      	movlt	r5, #1
 80112aa:	f7ff fd3f 	bl	8010d2c <_Balloc>
 80112ae:	b920      	cbnz	r0, 80112ba <__mdiff+0x5a>
 80112b0:	4b2d      	ldr	r3, [pc, #180]	; (8011368 <__mdiff+0x108>)
 80112b2:	4602      	mov	r2, r0
 80112b4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80112b8:	e7e6      	b.n	8011288 <__mdiff+0x28>
 80112ba:	693e      	ldr	r6, [r7, #16]
 80112bc:	60c5      	str	r5, [r0, #12]
 80112be:	6925      	ldr	r5, [r4, #16]
 80112c0:	f107 0114 	add.w	r1, r7, #20
 80112c4:	f104 0914 	add.w	r9, r4, #20
 80112c8:	f100 0e14 	add.w	lr, r0, #20
 80112cc:	f107 0210 	add.w	r2, r7, #16
 80112d0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80112d4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80112d8:	46f2      	mov	sl, lr
 80112da:	2700      	movs	r7, #0
 80112dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80112e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80112e4:	fa1f f883 	uxth.w	r8, r3
 80112e8:	fa17 f78b 	uxtah	r7, r7, fp
 80112ec:	0c1b      	lsrs	r3, r3, #16
 80112ee:	eba7 0808 	sub.w	r8, r7, r8
 80112f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80112f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80112fa:	fa1f f888 	uxth.w	r8, r8
 80112fe:	141f      	asrs	r7, r3, #16
 8011300:	454d      	cmp	r5, r9
 8011302:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011306:	f84a 3b04 	str.w	r3, [sl], #4
 801130a:	d8e7      	bhi.n	80112dc <__mdiff+0x7c>
 801130c:	1b2b      	subs	r3, r5, r4
 801130e:	3b15      	subs	r3, #21
 8011310:	f023 0303 	bic.w	r3, r3, #3
 8011314:	3304      	adds	r3, #4
 8011316:	3415      	adds	r4, #21
 8011318:	42a5      	cmp	r5, r4
 801131a:	bf38      	it	cc
 801131c:	2304      	movcc	r3, #4
 801131e:	4419      	add	r1, r3
 8011320:	4473      	add	r3, lr
 8011322:	469e      	mov	lr, r3
 8011324:	460d      	mov	r5, r1
 8011326:	4565      	cmp	r5, ip
 8011328:	d30e      	bcc.n	8011348 <__mdiff+0xe8>
 801132a:	f10c 0203 	add.w	r2, ip, #3
 801132e:	1a52      	subs	r2, r2, r1
 8011330:	f022 0203 	bic.w	r2, r2, #3
 8011334:	3903      	subs	r1, #3
 8011336:	458c      	cmp	ip, r1
 8011338:	bf38      	it	cc
 801133a:	2200      	movcc	r2, #0
 801133c:	441a      	add	r2, r3
 801133e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011342:	b17b      	cbz	r3, 8011364 <__mdiff+0x104>
 8011344:	6106      	str	r6, [r0, #16]
 8011346:	e7a5      	b.n	8011294 <__mdiff+0x34>
 8011348:	f855 8b04 	ldr.w	r8, [r5], #4
 801134c:	fa17 f488 	uxtah	r4, r7, r8
 8011350:	1422      	asrs	r2, r4, #16
 8011352:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8011356:	b2a4      	uxth	r4, r4
 8011358:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801135c:	f84e 4b04 	str.w	r4, [lr], #4
 8011360:	1417      	asrs	r7, r2, #16
 8011362:	e7e0      	b.n	8011326 <__mdiff+0xc6>
 8011364:	3e01      	subs	r6, #1
 8011366:	e7ea      	b.n	801133e <__mdiff+0xde>
 8011368:	08013c43 	.word	0x08013c43
 801136c:	08013c54 	.word	0x08013c54

08011370 <__d2b>:
 8011370:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011374:	4689      	mov	r9, r1
 8011376:	2101      	movs	r1, #1
 8011378:	ec57 6b10 	vmov	r6, r7, d0
 801137c:	4690      	mov	r8, r2
 801137e:	f7ff fcd5 	bl	8010d2c <_Balloc>
 8011382:	4604      	mov	r4, r0
 8011384:	b930      	cbnz	r0, 8011394 <__d2b+0x24>
 8011386:	4602      	mov	r2, r0
 8011388:	4b25      	ldr	r3, [pc, #148]	; (8011420 <__d2b+0xb0>)
 801138a:	4826      	ldr	r0, [pc, #152]	; (8011424 <__d2b+0xb4>)
 801138c:	f240 310a 	movw	r1, #778	; 0x30a
 8011390:	f000 f914 	bl	80115bc <__assert_func>
 8011394:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011398:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801139c:	bb35      	cbnz	r5, 80113ec <__d2b+0x7c>
 801139e:	2e00      	cmp	r6, #0
 80113a0:	9301      	str	r3, [sp, #4]
 80113a2:	d028      	beq.n	80113f6 <__d2b+0x86>
 80113a4:	4668      	mov	r0, sp
 80113a6:	9600      	str	r6, [sp, #0]
 80113a8:	f7ff fd8c 	bl	8010ec4 <__lo0bits>
 80113ac:	9900      	ldr	r1, [sp, #0]
 80113ae:	b300      	cbz	r0, 80113f2 <__d2b+0x82>
 80113b0:	9a01      	ldr	r2, [sp, #4]
 80113b2:	f1c0 0320 	rsb	r3, r0, #32
 80113b6:	fa02 f303 	lsl.w	r3, r2, r3
 80113ba:	430b      	orrs	r3, r1
 80113bc:	40c2      	lsrs	r2, r0
 80113be:	6163      	str	r3, [r4, #20]
 80113c0:	9201      	str	r2, [sp, #4]
 80113c2:	9b01      	ldr	r3, [sp, #4]
 80113c4:	61a3      	str	r3, [r4, #24]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	bf14      	ite	ne
 80113ca:	2202      	movne	r2, #2
 80113cc:	2201      	moveq	r2, #1
 80113ce:	6122      	str	r2, [r4, #16]
 80113d0:	b1d5      	cbz	r5, 8011408 <__d2b+0x98>
 80113d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80113d6:	4405      	add	r5, r0
 80113d8:	f8c9 5000 	str.w	r5, [r9]
 80113dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80113e0:	f8c8 0000 	str.w	r0, [r8]
 80113e4:	4620      	mov	r0, r4
 80113e6:	b003      	add	sp, #12
 80113e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80113f0:	e7d5      	b.n	801139e <__d2b+0x2e>
 80113f2:	6161      	str	r1, [r4, #20]
 80113f4:	e7e5      	b.n	80113c2 <__d2b+0x52>
 80113f6:	a801      	add	r0, sp, #4
 80113f8:	f7ff fd64 	bl	8010ec4 <__lo0bits>
 80113fc:	9b01      	ldr	r3, [sp, #4]
 80113fe:	6163      	str	r3, [r4, #20]
 8011400:	2201      	movs	r2, #1
 8011402:	6122      	str	r2, [r4, #16]
 8011404:	3020      	adds	r0, #32
 8011406:	e7e3      	b.n	80113d0 <__d2b+0x60>
 8011408:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801140c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011410:	f8c9 0000 	str.w	r0, [r9]
 8011414:	6918      	ldr	r0, [r3, #16]
 8011416:	f7ff fd35 	bl	8010e84 <__hi0bits>
 801141a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801141e:	e7df      	b.n	80113e0 <__d2b+0x70>
 8011420:	08013c43 	.word	0x08013c43
 8011424:	08013c54 	.word	0x08013c54

08011428 <_calloc_r>:
 8011428:	b513      	push	{r0, r1, r4, lr}
 801142a:	434a      	muls	r2, r1
 801142c:	4611      	mov	r1, r2
 801142e:	9201      	str	r2, [sp, #4]
 8011430:	f000 f85a 	bl	80114e8 <_malloc_r>
 8011434:	4604      	mov	r4, r0
 8011436:	b118      	cbz	r0, 8011440 <_calloc_r+0x18>
 8011438:	9a01      	ldr	r2, [sp, #4]
 801143a:	2100      	movs	r1, #0
 801143c:	f7fe fa10 	bl	800f860 <memset>
 8011440:	4620      	mov	r0, r4
 8011442:	b002      	add	sp, #8
 8011444:	bd10      	pop	{r4, pc}
	...

08011448 <_free_r>:
 8011448:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801144a:	2900      	cmp	r1, #0
 801144c:	d048      	beq.n	80114e0 <_free_r+0x98>
 801144e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011452:	9001      	str	r0, [sp, #4]
 8011454:	2b00      	cmp	r3, #0
 8011456:	f1a1 0404 	sub.w	r4, r1, #4
 801145a:	bfb8      	it	lt
 801145c:	18e4      	addlt	r4, r4, r3
 801145e:	f000 f8ef 	bl	8011640 <__malloc_lock>
 8011462:	4a20      	ldr	r2, [pc, #128]	; (80114e4 <_free_r+0x9c>)
 8011464:	9801      	ldr	r0, [sp, #4]
 8011466:	6813      	ldr	r3, [r2, #0]
 8011468:	4615      	mov	r5, r2
 801146a:	b933      	cbnz	r3, 801147a <_free_r+0x32>
 801146c:	6063      	str	r3, [r4, #4]
 801146e:	6014      	str	r4, [r2, #0]
 8011470:	b003      	add	sp, #12
 8011472:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011476:	f000 b8e9 	b.w	801164c <__malloc_unlock>
 801147a:	42a3      	cmp	r3, r4
 801147c:	d90b      	bls.n	8011496 <_free_r+0x4e>
 801147e:	6821      	ldr	r1, [r4, #0]
 8011480:	1862      	adds	r2, r4, r1
 8011482:	4293      	cmp	r3, r2
 8011484:	bf04      	itt	eq
 8011486:	681a      	ldreq	r2, [r3, #0]
 8011488:	685b      	ldreq	r3, [r3, #4]
 801148a:	6063      	str	r3, [r4, #4]
 801148c:	bf04      	itt	eq
 801148e:	1852      	addeq	r2, r2, r1
 8011490:	6022      	streq	r2, [r4, #0]
 8011492:	602c      	str	r4, [r5, #0]
 8011494:	e7ec      	b.n	8011470 <_free_r+0x28>
 8011496:	461a      	mov	r2, r3
 8011498:	685b      	ldr	r3, [r3, #4]
 801149a:	b10b      	cbz	r3, 80114a0 <_free_r+0x58>
 801149c:	42a3      	cmp	r3, r4
 801149e:	d9fa      	bls.n	8011496 <_free_r+0x4e>
 80114a0:	6811      	ldr	r1, [r2, #0]
 80114a2:	1855      	adds	r5, r2, r1
 80114a4:	42a5      	cmp	r5, r4
 80114a6:	d10b      	bne.n	80114c0 <_free_r+0x78>
 80114a8:	6824      	ldr	r4, [r4, #0]
 80114aa:	4421      	add	r1, r4
 80114ac:	1854      	adds	r4, r2, r1
 80114ae:	42a3      	cmp	r3, r4
 80114b0:	6011      	str	r1, [r2, #0]
 80114b2:	d1dd      	bne.n	8011470 <_free_r+0x28>
 80114b4:	681c      	ldr	r4, [r3, #0]
 80114b6:	685b      	ldr	r3, [r3, #4]
 80114b8:	6053      	str	r3, [r2, #4]
 80114ba:	4421      	add	r1, r4
 80114bc:	6011      	str	r1, [r2, #0]
 80114be:	e7d7      	b.n	8011470 <_free_r+0x28>
 80114c0:	d902      	bls.n	80114c8 <_free_r+0x80>
 80114c2:	230c      	movs	r3, #12
 80114c4:	6003      	str	r3, [r0, #0]
 80114c6:	e7d3      	b.n	8011470 <_free_r+0x28>
 80114c8:	6825      	ldr	r5, [r4, #0]
 80114ca:	1961      	adds	r1, r4, r5
 80114cc:	428b      	cmp	r3, r1
 80114ce:	bf04      	itt	eq
 80114d0:	6819      	ldreq	r1, [r3, #0]
 80114d2:	685b      	ldreq	r3, [r3, #4]
 80114d4:	6063      	str	r3, [r4, #4]
 80114d6:	bf04      	itt	eq
 80114d8:	1949      	addeq	r1, r1, r5
 80114da:	6021      	streq	r1, [r4, #0]
 80114dc:	6054      	str	r4, [r2, #4]
 80114de:	e7c7      	b.n	8011470 <_free_r+0x28>
 80114e0:	b003      	add	sp, #12
 80114e2:	bd30      	pop	{r4, r5, pc}
 80114e4:	24000640 	.word	0x24000640

080114e8 <_malloc_r>:
 80114e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114ea:	1ccd      	adds	r5, r1, #3
 80114ec:	f025 0503 	bic.w	r5, r5, #3
 80114f0:	3508      	adds	r5, #8
 80114f2:	2d0c      	cmp	r5, #12
 80114f4:	bf38      	it	cc
 80114f6:	250c      	movcc	r5, #12
 80114f8:	2d00      	cmp	r5, #0
 80114fa:	4606      	mov	r6, r0
 80114fc:	db01      	blt.n	8011502 <_malloc_r+0x1a>
 80114fe:	42a9      	cmp	r1, r5
 8011500:	d903      	bls.n	801150a <_malloc_r+0x22>
 8011502:	230c      	movs	r3, #12
 8011504:	6033      	str	r3, [r6, #0]
 8011506:	2000      	movs	r0, #0
 8011508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801150a:	f000 f899 	bl	8011640 <__malloc_lock>
 801150e:	4921      	ldr	r1, [pc, #132]	; (8011594 <_malloc_r+0xac>)
 8011510:	680a      	ldr	r2, [r1, #0]
 8011512:	4614      	mov	r4, r2
 8011514:	b99c      	cbnz	r4, 801153e <_malloc_r+0x56>
 8011516:	4f20      	ldr	r7, [pc, #128]	; (8011598 <_malloc_r+0xb0>)
 8011518:	683b      	ldr	r3, [r7, #0]
 801151a:	b923      	cbnz	r3, 8011526 <_malloc_r+0x3e>
 801151c:	4621      	mov	r1, r4
 801151e:	4630      	mov	r0, r6
 8011520:	f000 f83c 	bl	801159c <_sbrk_r>
 8011524:	6038      	str	r0, [r7, #0]
 8011526:	4629      	mov	r1, r5
 8011528:	4630      	mov	r0, r6
 801152a:	f000 f837 	bl	801159c <_sbrk_r>
 801152e:	1c43      	adds	r3, r0, #1
 8011530:	d123      	bne.n	801157a <_malloc_r+0x92>
 8011532:	230c      	movs	r3, #12
 8011534:	6033      	str	r3, [r6, #0]
 8011536:	4630      	mov	r0, r6
 8011538:	f000 f888 	bl	801164c <__malloc_unlock>
 801153c:	e7e3      	b.n	8011506 <_malloc_r+0x1e>
 801153e:	6823      	ldr	r3, [r4, #0]
 8011540:	1b5b      	subs	r3, r3, r5
 8011542:	d417      	bmi.n	8011574 <_malloc_r+0x8c>
 8011544:	2b0b      	cmp	r3, #11
 8011546:	d903      	bls.n	8011550 <_malloc_r+0x68>
 8011548:	6023      	str	r3, [r4, #0]
 801154a:	441c      	add	r4, r3
 801154c:	6025      	str	r5, [r4, #0]
 801154e:	e004      	b.n	801155a <_malloc_r+0x72>
 8011550:	6863      	ldr	r3, [r4, #4]
 8011552:	42a2      	cmp	r2, r4
 8011554:	bf0c      	ite	eq
 8011556:	600b      	streq	r3, [r1, #0]
 8011558:	6053      	strne	r3, [r2, #4]
 801155a:	4630      	mov	r0, r6
 801155c:	f000 f876 	bl	801164c <__malloc_unlock>
 8011560:	f104 000b 	add.w	r0, r4, #11
 8011564:	1d23      	adds	r3, r4, #4
 8011566:	f020 0007 	bic.w	r0, r0, #7
 801156a:	1ac2      	subs	r2, r0, r3
 801156c:	d0cc      	beq.n	8011508 <_malloc_r+0x20>
 801156e:	1a1b      	subs	r3, r3, r0
 8011570:	50a3      	str	r3, [r4, r2]
 8011572:	e7c9      	b.n	8011508 <_malloc_r+0x20>
 8011574:	4622      	mov	r2, r4
 8011576:	6864      	ldr	r4, [r4, #4]
 8011578:	e7cc      	b.n	8011514 <_malloc_r+0x2c>
 801157a:	1cc4      	adds	r4, r0, #3
 801157c:	f024 0403 	bic.w	r4, r4, #3
 8011580:	42a0      	cmp	r0, r4
 8011582:	d0e3      	beq.n	801154c <_malloc_r+0x64>
 8011584:	1a21      	subs	r1, r4, r0
 8011586:	4630      	mov	r0, r6
 8011588:	f000 f808 	bl	801159c <_sbrk_r>
 801158c:	3001      	adds	r0, #1
 801158e:	d1dd      	bne.n	801154c <_malloc_r+0x64>
 8011590:	e7cf      	b.n	8011532 <_malloc_r+0x4a>
 8011592:	bf00      	nop
 8011594:	24000640 	.word	0x24000640
 8011598:	24000644 	.word	0x24000644

0801159c <_sbrk_r>:
 801159c:	b538      	push	{r3, r4, r5, lr}
 801159e:	4d06      	ldr	r5, [pc, #24]	; (80115b8 <_sbrk_r+0x1c>)
 80115a0:	2300      	movs	r3, #0
 80115a2:	4604      	mov	r4, r0
 80115a4:	4608      	mov	r0, r1
 80115a6:	602b      	str	r3, [r5, #0]
 80115a8:	f7f2 fb64 	bl	8003c74 <_sbrk>
 80115ac:	1c43      	adds	r3, r0, #1
 80115ae:	d102      	bne.n	80115b6 <_sbrk_r+0x1a>
 80115b0:	682b      	ldr	r3, [r5, #0]
 80115b2:	b103      	cbz	r3, 80115b6 <_sbrk_r+0x1a>
 80115b4:	6023      	str	r3, [r4, #0]
 80115b6:	bd38      	pop	{r3, r4, r5, pc}
 80115b8:	24000e44 	.word	0x24000e44

080115bc <__assert_func>:
 80115bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80115be:	4614      	mov	r4, r2
 80115c0:	461a      	mov	r2, r3
 80115c2:	4b09      	ldr	r3, [pc, #36]	; (80115e8 <__assert_func+0x2c>)
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	4605      	mov	r5, r0
 80115c8:	68d8      	ldr	r0, [r3, #12]
 80115ca:	b14c      	cbz	r4, 80115e0 <__assert_func+0x24>
 80115cc:	4b07      	ldr	r3, [pc, #28]	; (80115ec <__assert_func+0x30>)
 80115ce:	9100      	str	r1, [sp, #0]
 80115d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80115d4:	4906      	ldr	r1, [pc, #24]	; (80115f0 <__assert_func+0x34>)
 80115d6:	462b      	mov	r3, r5
 80115d8:	f000 f80e 	bl	80115f8 <fiprintf>
 80115dc:	f000 fa64 	bl	8011aa8 <abort>
 80115e0:	4b04      	ldr	r3, [pc, #16]	; (80115f4 <__assert_func+0x38>)
 80115e2:	461c      	mov	r4, r3
 80115e4:	e7f3      	b.n	80115ce <__assert_func+0x12>
 80115e6:	bf00      	nop
 80115e8:	24000048 	.word	0x24000048
 80115ec:	08013db4 	.word	0x08013db4
 80115f0:	08013dc1 	.word	0x08013dc1
 80115f4:	08013def 	.word	0x08013def

080115f8 <fiprintf>:
 80115f8:	b40e      	push	{r1, r2, r3}
 80115fa:	b503      	push	{r0, r1, lr}
 80115fc:	4601      	mov	r1, r0
 80115fe:	ab03      	add	r3, sp, #12
 8011600:	4805      	ldr	r0, [pc, #20]	; (8011618 <fiprintf+0x20>)
 8011602:	f853 2b04 	ldr.w	r2, [r3], #4
 8011606:	6800      	ldr	r0, [r0, #0]
 8011608:	9301      	str	r3, [sp, #4]
 801160a:	f000 f84f 	bl	80116ac <_vfiprintf_r>
 801160e:	b002      	add	sp, #8
 8011610:	f85d eb04 	ldr.w	lr, [sp], #4
 8011614:	b003      	add	sp, #12
 8011616:	4770      	bx	lr
 8011618:	24000048 	.word	0x24000048

0801161c <__ascii_mbtowc>:
 801161c:	b082      	sub	sp, #8
 801161e:	b901      	cbnz	r1, 8011622 <__ascii_mbtowc+0x6>
 8011620:	a901      	add	r1, sp, #4
 8011622:	b142      	cbz	r2, 8011636 <__ascii_mbtowc+0x1a>
 8011624:	b14b      	cbz	r3, 801163a <__ascii_mbtowc+0x1e>
 8011626:	7813      	ldrb	r3, [r2, #0]
 8011628:	600b      	str	r3, [r1, #0]
 801162a:	7812      	ldrb	r2, [r2, #0]
 801162c:	1e10      	subs	r0, r2, #0
 801162e:	bf18      	it	ne
 8011630:	2001      	movne	r0, #1
 8011632:	b002      	add	sp, #8
 8011634:	4770      	bx	lr
 8011636:	4610      	mov	r0, r2
 8011638:	e7fb      	b.n	8011632 <__ascii_mbtowc+0x16>
 801163a:	f06f 0001 	mvn.w	r0, #1
 801163e:	e7f8      	b.n	8011632 <__ascii_mbtowc+0x16>

08011640 <__malloc_lock>:
 8011640:	4801      	ldr	r0, [pc, #4]	; (8011648 <__malloc_lock+0x8>)
 8011642:	f000 bbf1 	b.w	8011e28 <__retarget_lock_acquire_recursive>
 8011646:	bf00      	nop
 8011648:	24000e4c 	.word	0x24000e4c

0801164c <__malloc_unlock>:
 801164c:	4801      	ldr	r0, [pc, #4]	; (8011654 <__malloc_unlock+0x8>)
 801164e:	f000 bbec 	b.w	8011e2a <__retarget_lock_release_recursive>
 8011652:	bf00      	nop
 8011654:	24000e4c 	.word	0x24000e4c

08011658 <__sfputc_r>:
 8011658:	6893      	ldr	r3, [r2, #8]
 801165a:	3b01      	subs	r3, #1
 801165c:	2b00      	cmp	r3, #0
 801165e:	b410      	push	{r4}
 8011660:	6093      	str	r3, [r2, #8]
 8011662:	da08      	bge.n	8011676 <__sfputc_r+0x1e>
 8011664:	6994      	ldr	r4, [r2, #24]
 8011666:	42a3      	cmp	r3, r4
 8011668:	db01      	blt.n	801166e <__sfputc_r+0x16>
 801166a:	290a      	cmp	r1, #10
 801166c:	d103      	bne.n	8011676 <__sfputc_r+0x1e>
 801166e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011672:	f000 b94b 	b.w	801190c <__swbuf_r>
 8011676:	6813      	ldr	r3, [r2, #0]
 8011678:	1c58      	adds	r0, r3, #1
 801167a:	6010      	str	r0, [r2, #0]
 801167c:	7019      	strb	r1, [r3, #0]
 801167e:	4608      	mov	r0, r1
 8011680:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011684:	4770      	bx	lr

08011686 <__sfputs_r>:
 8011686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011688:	4606      	mov	r6, r0
 801168a:	460f      	mov	r7, r1
 801168c:	4614      	mov	r4, r2
 801168e:	18d5      	adds	r5, r2, r3
 8011690:	42ac      	cmp	r4, r5
 8011692:	d101      	bne.n	8011698 <__sfputs_r+0x12>
 8011694:	2000      	movs	r0, #0
 8011696:	e007      	b.n	80116a8 <__sfputs_r+0x22>
 8011698:	f814 1b01 	ldrb.w	r1, [r4], #1
 801169c:	463a      	mov	r2, r7
 801169e:	4630      	mov	r0, r6
 80116a0:	f7ff ffda 	bl	8011658 <__sfputc_r>
 80116a4:	1c43      	adds	r3, r0, #1
 80116a6:	d1f3      	bne.n	8011690 <__sfputs_r+0xa>
 80116a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080116ac <_vfiprintf_r>:
 80116ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116b0:	460d      	mov	r5, r1
 80116b2:	b09d      	sub	sp, #116	; 0x74
 80116b4:	4614      	mov	r4, r2
 80116b6:	4698      	mov	r8, r3
 80116b8:	4606      	mov	r6, r0
 80116ba:	b118      	cbz	r0, 80116c4 <_vfiprintf_r+0x18>
 80116bc:	6983      	ldr	r3, [r0, #24]
 80116be:	b90b      	cbnz	r3, 80116c4 <_vfiprintf_r+0x18>
 80116c0:	f000 fb14 	bl	8011cec <__sinit>
 80116c4:	4b89      	ldr	r3, [pc, #548]	; (80118ec <_vfiprintf_r+0x240>)
 80116c6:	429d      	cmp	r5, r3
 80116c8:	d11b      	bne.n	8011702 <_vfiprintf_r+0x56>
 80116ca:	6875      	ldr	r5, [r6, #4]
 80116cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80116ce:	07d9      	lsls	r1, r3, #31
 80116d0:	d405      	bmi.n	80116de <_vfiprintf_r+0x32>
 80116d2:	89ab      	ldrh	r3, [r5, #12]
 80116d4:	059a      	lsls	r2, r3, #22
 80116d6:	d402      	bmi.n	80116de <_vfiprintf_r+0x32>
 80116d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80116da:	f000 fba5 	bl	8011e28 <__retarget_lock_acquire_recursive>
 80116de:	89ab      	ldrh	r3, [r5, #12]
 80116e0:	071b      	lsls	r3, r3, #28
 80116e2:	d501      	bpl.n	80116e8 <_vfiprintf_r+0x3c>
 80116e4:	692b      	ldr	r3, [r5, #16]
 80116e6:	b9eb      	cbnz	r3, 8011724 <_vfiprintf_r+0x78>
 80116e8:	4629      	mov	r1, r5
 80116ea:	4630      	mov	r0, r6
 80116ec:	f000 f96e 	bl	80119cc <__swsetup_r>
 80116f0:	b1c0      	cbz	r0, 8011724 <_vfiprintf_r+0x78>
 80116f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80116f4:	07dc      	lsls	r4, r3, #31
 80116f6:	d50e      	bpl.n	8011716 <_vfiprintf_r+0x6a>
 80116f8:	f04f 30ff 	mov.w	r0, #4294967295
 80116fc:	b01d      	add	sp, #116	; 0x74
 80116fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011702:	4b7b      	ldr	r3, [pc, #492]	; (80118f0 <_vfiprintf_r+0x244>)
 8011704:	429d      	cmp	r5, r3
 8011706:	d101      	bne.n	801170c <_vfiprintf_r+0x60>
 8011708:	68b5      	ldr	r5, [r6, #8]
 801170a:	e7df      	b.n	80116cc <_vfiprintf_r+0x20>
 801170c:	4b79      	ldr	r3, [pc, #484]	; (80118f4 <_vfiprintf_r+0x248>)
 801170e:	429d      	cmp	r5, r3
 8011710:	bf08      	it	eq
 8011712:	68f5      	ldreq	r5, [r6, #12]
 8011714:	e7da      	b.n	80116cc <_vfiprintf_r+0x20>
 8011716:	89ab      	ldrh	r3, [r5, #12]
 8011718:	0598      	lsls	r0, r3, #22
 801171a:	d4ed      	bmi.n	80116f8 <_vfiprintf_r+0x4c>
 801171c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801171e:	f000 fb84 	bl	8011e2a <__retarget_lock_release_recursive>
 8011722:	e7e9      	b.n	80116f8 <_vfiprintf_r+0x4c>
 8011724:	2300      	movs	r3, #0
 8011726:	9309      	str	r3, [sp, #36]	; 0x24
 8011728:	2320      	movs	r3, #32
 801172a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801172e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011732:	2330      	movs	r3, #48	; 0x30
 8011734:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80118f8 <_vfiprintf_r+0x24c>
 8011738:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801173c:	f04f 0901 	mov.w	r9, #1
 8011740:	4623      	mov	r3, r4
 8011742:	469a      	mov	sl, r3
 8011744:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011748:	b10a      	cbz	r2, 801174e <_vfiprintf_r+0xa2>
 801174a:	2a25      	cmp	r2, #37	; 0x25
 801174c:	d1f9      	bne.n	8011742 <_vfiprintf_r+0x96>
 801174e:	ebba 0b04 	subs.w	fp, sl, r4
 8011752:	d00b      	beq.n	801176c <_vfiprintf_r+0xc0>
 8011754:	465b      	mov	r3, fp
 8011756:	4622      	mov	r2, r4
 8011758:	4629      	mov	r1, r5
 801175a:	4630      	mov	r0, r6
 801175c:	f7ff ff93 	bl	8011686 <__sfputs_r>
 8011760:	3001      	adds	r0, #1
 8011762:	f000 80aa 	beq.w	80118ba <_vfiprintf_r+0x20e>
 8011766:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011768:	445a      	add	r2, fp
 801176a:	9209      	str	r2, [sp, #36]	; 0x24
 801176c:	f89a 3000 	ldrb.w	r3, [sl]
 8011770:	2b00      	cmp	r3, #0
 8011772:	f000 80a2 	beq.w	80118ba <_vfiprintf_r+0x20e>
 8011776:	2300      	movs	r3, #0
 8011778:	f04f 32ff 	mov.w	r2, #4294967295
 801177c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011780:	f10a 0a01 	add.w	sl, sl, #1
 8011784:	9304      	str	r3, [sp, #16]
 8011786:	9307      	str	r3, [sp, #28]
 8011788:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801178c:	931a      	str	r3, [sp, #104]	; 0x68
 801178e:	4654      	mov	r4, sl
 8011790:	2205      	movs	r2, #5
 8011792:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011796:	4858      	ldr	r0, [pc, #352]	; (80118f8 <_vfiprintf_r+0x24c>)
 8011798:	f7ee fdaa 	bl	80002f0 <memchr>
 801179c:	9a04      	ldr	r2, [sp, #16]
 801179e:	b9d8      	cbnz	r0, 80117d8 <_vfiprintf_r+0x12c>
 80117a0:	06d1      	lsls	r1, r2, #27
 80117a2:	bf44      	itt	mi
 80117a4:	2320      	movmi	r3, #32
 80117a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80117aa:	0713      	lsls	r3, r2, #28
 80117ac:	bf44      	itt	mi
 80117ae:	232b      	movmi	r3, #43	; 0x2b
 80117b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80117b4:	f89a 3000 	ldrb.w	r3, [sl]
 80117b8:	2b2a      	cmp	r3, #42	; 0x2a
 80117ba:	d015      	beq.n	80117e8 <_vfiprintf_r+0x13c>
 80117bc:	9a07      	ldr	r2, [sp, #28]
 80117be:	4654      	mov	r4, sl
 80117c0:	2000      	movs	r0, #0
 80117c2:	f04f 0c0a 	mov.w	ip, #10
 80117c6:	4621      	mov	r1, r4
 80117c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80117cc:	3b30      	subs	r3, #48	; 0x30
 80117ce:	2b09      	cmp	r3, #9
 80117d0:	d94e      	bls.n	8011870 <_vfiprintf_r+0x1c4>
 80117d2:	b1b0      	cbz	r0, 8011802 <_vfiprintf_r+0x156>
 80117d4:	9207      	str	r2, [sp, #28]
 80117d6:	e014      	b.n	8011802 <_vfiprintf_r+0x156>
 80117d8:	eba0 0308 	sub.w	r3, r0, r8
 80117dc:	fa09 f303 	lsl.w	r3, r9, r3
 80117e0:	4313      	orrs	r3, r2
 80117e2:	9304      	str	r3, [sp, #16]
 80117e4:	46a2      	mov	sl, r4
 80117e6:	e7d2      	b.n	801178e <_vfiprintf_r+0xe2>
 80117e8:	9b03      	ldr	r3, [sp, #12]
 80117ea:	1d19      	adds	r1, r3, #4
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	9103      	str	r1, [sp, #12]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	bfbb      	ittet	lt
 80117f4:	425b      	neglt	r3, r3
 80117f6:	f042 0202 	orrlt.w	r2, r2, #2
 80117fa:	9307      	strge	r3, [sp, #28]
 80117fc:	9307      	strlt	r3, [sp, #28]
 80117fe:	bfb8      	it	lt
 8011800:	9204      	strlt	r2, [sp, #16]
 8011802:	7823      	ldrb	r3, [r4, #0]
 8011804:	2b2e      	cmp	r3, #46	; 0x2e
 8011806:	d10c      	bne.n	8011822 <_vfiprintf_r+0x176>
 8011808:	7863      	ldrb	r3, [r4, #1]
 801180a:	2b2a      	cmp	r3, #42	; 0x2a
 801180c:	d135      	bne.n	801187a <_vfiprintf_r+0x1ce>
 801180e:	9b03      	ldr	r3, [sp, #12]
 8011810:	1d1a      	adds	r2, r3, #4
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	9203      	str	r2, [sp, #12]
 8011816:	2b00      	cmp	r3, #0
 8011818:	bfb8      	it	lt
 801181a:	f04f 33ff 	movlt.w	r3, #4294967295
 801181e:	3402      	adds	r4, #2
 8011820:	9305      	str	r3, [sp, #20]
 8011822:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011908 <_vfiprintf_r+0x25c>
 8011826:	7821      	ldrb	r1, [r4, #0]
 8011828:	2203      	movs	r2, #3
 801182a:	4650      	mov	r0, sl
 801182c:	f7ee fd60 	bl	80002f0 <memchr>
 8011830:	b140      	cbz	r0, 8011844 <_vfiprintf_r+0x198>
 8011832:	2340      	movs	r3, #64	; 0x40
 8011834:	eba0 000a 	sub.w	r0, r0, sl
 8011838:	fa03 f000 	lsl.w	r0, r3, r0
 801183c:	9b04      	ldr	r3, [sp, #16]
 801183e:	4303      	orrs	r3, r0
 8011840:	3401      	adds	r4, #1
 8011842:	9304      	str	r3, [sp, #16]
 8011844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011848:	482c      	ldr	r0, [pc, #176]	; (80118fc <_vfiprintf_r+0x250>)
 801184a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801184e:	2206      	movs	r2, #6
 8011850:	f7ee fd4e 	bl	80002f0 <memchr>
 8011854:	2800      	cmp	r0, #0
 8011856:	d03f      	beq.n	80118d8 <_vfiprintf_r+0x22c>
 8011858:	4b29      	ldr	r3, [pc, #164]	; (8011900 <_vfiprintf_r+0x254>)
 801185a:	bb1b      	cbnz	r3, 80118a4 <_vfiprintf_r+0x1f8>
 801185c:	9b03      	ldr	r3, [sp, #12]
 801185e:	3307      	adds	r3, #7
 8011860:	f023 0307 	bic.w	r3, r3, #7
 8011864:	3308      	adds	r3, #8
 8011866:	9303      	str	r3, [sp, #12]
 8011868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801186a:	443b      	add	r3, r7
 801186c:	9309      	str	r3, [sp, #36]	; 0x24
 801186e:	e767      	b.n	8011740 <_vfiprintf_r+0x94>
 8011870:	fb0c 3202 	mla	r2, ip, r2, r3
 8011874:	460c      	mov	r4, r1
 8011876:	2001      	movs	r0, #1
 8011878:	e7a5      	b.n	80117c6 <_vfiprintf_r+0x11a>
 801187a:	2300      	movs	r3, #0
 801187c:	3401      	adds	r4, #1
 801187e:	9305      	str	r3, [sp, #20]
 8011880:	4619      	mov	r1, r3
 8011882:	f04f 0c0a 	mov.w	ip, #10
 8011886:	4620      	mov	r0, r4
 8011888:	f810 2b01 	ldrb.w	r2, [r0], #1
 801188c:	3a30      	subs	r2, #48	; 0x30
 801188e:	2a09      	cmp	r2, #9
 8011890:	d903      	bls.n	801189a <_vfiprintf_r+0x1ee>
 8011892:	2b00      	cmp	r3, #0
 8011894:	d0c5      	beq.n	8011822 <_vfiprintf_r+0x176>
 8011896:	9105      	str	r1, [sp, #20]
 8011898:	e7c3      	b.n	8011822 <_vfiprintf_r+0x176>
 801189a:	fb0c 2101 	mla	r1, ip, r1, r2
 801189e:	4604      	mov	r4, r0
 80118a0:	2301      	movs	r3, #1
 80118a2:	e7f0      	b.n	8011886 <_vfiprintf_r+0x1da>
 80118a4:	ab03      	add	r3, sp, #12
 80118a6:	9300      	str	r3, [sp, #0]
 80118a8:	462a      	mov	r2, r5
 80118aa:	4b16      	ldr	r3, [pc, #88]	; (8011904 <_vfiprintf_r+0x258>)
 80118ac:	a904      	add	r1, sp, #16
 80118ae:	4630      	mov	r0, r6
 80118b0:	f7fe f86e 	bl	800f990 <_printf_float>
 80118b4:	4607      	mov	r7, r0
 80118b6:	1c78      	adds	r0, r7, #1
 80118b8:	d1d6      	bne.n	8011868 <_vfiprintf_r+0x1bc>
 80118ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80118bc:	07d9      	lsls	r1, r3, #31
 80118be:	d405      	bmi.n	80118cc <_vfiprintf_r+0x220>
 80118c0:	89ab      	ldrh	r3, [r5, #12]
 80118c2:	059a      	lsls	r2, r3, #22
 80118c4:	d402      	bmi.n	80118cc <_vfiprintf_r+0x220>
 80118c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80118c8:	f000 faaf 	bl	8011e2a <__retarget_lock_release_recursive>
 80118cc:	89ab      	ldrh	r3, [r5, #12]
 80118ce:	065b      	lsls	r3, r3, #25
 80118d0:	f53f af12 	bmi.w	80116f8 <_vfiprintf_r+0x4c>
 80118d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80118d6:	e711      	b.n	80116fc <_vfiprintf_r+0x50>
 80118d8:	ab03      	add	r3, sp, #12
 80118da:	9300      	str	r3, [sp, #0]
 80118dc:	462a      	mov	r2, r5
 80118de:	4b09      	ldr	r3, [pc, #36]	; (8011904 <_vfiprintf_r+0x258>)
 80118e0:	a904      	add	r1, sp, #16
 80118e2:	4630      	mov	r0, r6
 80118e4:	f7fe fae0 	bl	800fea8 <_printf_i>
 80118e8:	e7e4      	b.n	80118b4 <_vfiprintf_r+0x208>
 80118ea:	bf00      	nop
 80118ec:	08013f2c 	.word	0x08013f2c
 80118f0:	08013f4c 	.word	0x08013f4c
 80118f4:	08013f0c 	.word	0x08013f0c
 80118f8:	08013dfa 	.word	0x08013dfa
 80118fc:	08013e04 	.word	0x08013e04
 8011900:	0800f991 	.word	0x0800f991
 8011904:	08011687 	.word	0x08011687
 8011908:	08013e00 	.word	0x08013e00

0801190c <__swbuf_r>:
 801190c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801190e:	460e      	mov	r6, r1
 8011910:	4614      	mov	r4, r2
 8011912:	4605      	mov	r5, r0
 8011914:	b118      	cbz	r0, 801191e <__swbuf_r+0x12>
 8011916:	6983      	ldr	r3, [r0, #24]
 8011918:	b90b      	cbnz	r3, 801191e <__swbuf_r+0x12>
 801191a:	f000 f9e7 	bl	8011cec <__sinit>
 801191e:	4b21      	ldr	r3, [pc, #132]	; (80119a4 <__swbuf_r+0x98>)
 8011920:	429c      	cmp	r4, r3
 8011922:	d12b      	bne.n	801197c <__swbuf_r+0x70>
 8011924:	686c      	ldr	r4, [r5, #4]
 8011926:	69a3      	ldr	r3, [r4, #24]
 8011928:	60a3      	str	r3, [r4, #8]
 801192a:	89a3      	ldrh	r3, [r4, #12]
 801192c:	071a      	lsls	r2, r3, #28
 801192e:	d52f      	bpl.n	8011990 <__swbuf_r+0x84>
 8011930:	6923      	ldr	r3, [r4, #16]
 8011932:	b36b      	cbz	r3, 8011990 <__swbuf_r+0x84>
 8011934:	6923      	ldr	r3, [r4, #16]
 8011936:	6820      	ldr	r0, [r4, #0]
 8011938:	1ac0      	subs	r0, r0, r3
 801193a:	6963      	ldr	r3, [r4, #20]
 801193c:	b2f6      	uxtb	r6, r6
 801193e:	4283      	cmp	r3, r0
 8011940:	4637      	mov	r7, r6
 8011942:	dc04      	bgt.n	801194e <__swbuf_r+0x42>
 8011944:	4621      	mov	r1, r4
 8011946:	4628      	mov	r0, r5
 8011948:	f000 f93c 	bl	8011bc4 <_fflush_r>
 801194c:	bb30      	cbnz	r0, 801199c <__swbuf_r+0x90>
 801194e:	68a3      	ldr	r3, [r4, #8]
 8011950:	3b01      	subs	r3, #1
 8011952:	60a3      	str	r3, [r4, #8]
 8011954:	6823      	ldr	r3, [r4, #0]
 8011956:	1c5a      	adds	r2, r3, #1
 8011958:	6022      	str	r2, [r4, #0]
 801195a:	701e      	strb	r6, [r3, #0]
 801195c:	6963      	ldr	r3, [r4, #20]
 801195e:	3001      	adds	r0, #1
 8011960:	4283      	cmp	r3, r0
 8011962:	d004      	beq.n	801196e <__swbuf_r+0x62>
 8011964:	89a3      	ldrh	r3, [r4, #12]
 8011966:	07db      	lsls	r3, r3, #31
 8011968:	d506      	bpl.n	8011978 <__swbuf_r+0x6c>
 801196a:	2e0a      	cmp	r6, #10
 801196c:	d104      	bne.n	8011978 <__swbuf_r+0x6c>
 801196e:	4621      	mov	r1, r4
 8011970:	4628      	mov	r0, r5
 8011972:	f000 f927 	bl	8011bc4 <_fflush_r>
 8011976:	b988      	cbnz	r0, 801199c <__swbuf_r+0x90>
 8011978:	4638      	mov	r0, r7
 801197a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801197c:	4b0a      	ldr	r3, [pc, #40]	; (80119a8 <__swbuf_r+0x9c>)
 801197e:	429c      	cmp	r4, r3
 8011980:	d101      	bne.n	8011986 <__swbuf_r+0x7a>
 8011982:	68ac      	ldr	r4, [r5, #8]
 8011984:	e7cf      	b.n	8011926 <__swbuf_r+0x1a>
 8011986:	4b09      	ldr	r3, [pc, #36]	; (80119ac <__swbuf_r+0xa0>)
 8011988:	429c      	cmp	r4, r3
 801198a:	bf08      	it	eq
 801198c:	68ec      	ldreq	r4, [r5, #12]
 801198e:	e7ca      	b.n	8011926 <__swbuf_r+0x1a>
 8011990:	4621      	mov	r1, r4
 8011992:	4628      	mov	r0, r5
 8011994:	f000 f81a 	bl	80119cc <__swsetup_r>
 8011998:	2800      	cmp	r0, #0
 801199a:	d0cb      	beq.n	8011934 <__swbuf_r+0x28>
 801199c:	f04f 37ff 	mov.w	r7, #4294967295
 80119a0:	e7ea      	b.n	8011978 <__swbuf_r+0x6c>
 80119a2:	bf00      	nop
 80119a4:	08013f2c 	.word	0x08013f2c
 80119a8:	08013f4c 	.word	0x08013f4c
 80119ac:	08013f0c 	.word	0x08013f0c

080119b0 <__ascii_wctomb>:
 80119b0:	b149      	cbz	r1, 80119c6 <__ascii_wctomb+0x16>
 80119b2:	2aff      	cmp	r2, #255	; 0xff
 80119b4:	bf85      	ittet	hi
 80119b6:	238a      	movhi	r3, #138	; 0x8a
 80119b8:	6003      	strhi	r3, [r0, #0]
 80119ba:	700a      	strbls	r2, [r1, #0]
 80119bc:	f04f 30ff 	movhi.w	r0, #4294967295
 80119c0:	bf98      	it	ls
 80119c2:	2001      	movls	r0, #1
 80119c4:	4770      	bx	lr
 80119c6:	4608      	mov	r0, r1
 80119c8:	4770      	bx	lr
	...

080119cc <__swsetup_r>:
 80119cc:	4b32      	ldr	r3, [pc, #200]	; (8011a98 <__swsetup_r+0xcc>)
 80119ce:	b570      	push	{r4, r5, r6, lr}
 80119d0:	681d      	ldr	r5, [r3, #0]
 80119d2:	4606      	mov	r6, r0
 80119d4:	460c      	mov	r4, r1
 80119d6:	b125      	cbz	r5, 80119e2 <__swsetup_r+0x16>
 80119d8:	69ab      	ldr	r3, [r5, #24]
 80119da:	b913      	cbnz	r3, 80119e2 <__swsetup_r+0x16>
 80119dc:	4628      	mov	r0, r5
 80119de:	f000 f985 	bl	8011cec <__sinit>
 80119e2:	4b2e      	ldr	r3, [pc, #184]	; (8011a9c <__swsetup_r+0xd0>)
 80119e4:	429c      	cmp	r4, r3
 80119e6:	d10f      	bne.n	8011a08 <__swsetup_r+0x3c>
 80119e8:	686c      	ldr	r4, [r5, #4]
 80119ea:	89a3      	ldrh	r3, [r4, #12]
 80119ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80119f0:	0719      	lsls	r1, r3, #28
 80119f2:	d42c      	bmi.n	8011a4e <__swsetup_r+0x82>
 80119f4:	06dd      	lsls	r5, r3, #27
 80119f6:	d411      	bmi.n	8011a1c <__swsetup_r+0x50>
 80119f8:	2309      	movs	r3, #9
 80119fa:	6033      	str	r3, [r6, #0]
 80119fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011a00:	81a3      	strh	r3, [r4, #12]
 8011a02:	f04f 30ff 	mov.w	r0, #4294967295
 8011a06:	e03e      	b.n	8011a86 <__swsetup_r+0xba>
 8011a08:	4b25      	ldr	r3, [pc, #148]	; (8011aa0 <__swsetup_r+0xd4>)
 8011a0a:	429c      	cmp	r4, r3
 8011a0c:	d101      	bne.n	8011a12 <__swsetup_r+0x46>
 8011a0e:	68ac      	ldr	r4, [r5, #8]
 8011a10:	e7eb      	b.n	80119ea <__swsetup_r+0x1e>
 8011a12:	4b24      	ldr	r3, [pc, #144]	; (8011aa4 <__swsetup_r+0xd8>)
 8011a14:	429c      	cmp	r4, r3
 8011a16:	bf08      	it	eq
 8011a18:	68ec      	ldreq	r4, [r5, #12]
 8011a1a:	e7e6      	b.n	80119ea <__swsetup_r+0x1e>
 8011a1c:	0758      	lsls	r0, r3, #29
 8011a1e:	d512      	bpl.n	8011a46 <__swsetup_r+0x7a>
 8011a20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011a22:	b141      	cbz	r1, 8011a36 <__swsetup_r+0x6a>
 8011a24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011a28:	4299      	cmp	r1, r3
 8011a2a:	d002      	beq.n	8011a32 <__swsetup_r+0x66>
 8011a2c:	4630      	mov	r0, r6
 8011a2e:	f7ff fd0b 	bl	8011448 <_free_r>
 8011a32:	2300      	movs	r3, #0
 8011a34:	6363      	str	r3, [r4, #52]	; 0x34
 8011a36:	89a3      	ldrh	r3, [r4, #12]
 8011a38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011a3c:	81a3      	strh	r3, [r4, #12]
 8011a3e:	2300      	movs	r3, #0
 8011a40:	6063      	str	r3, [r4, #4]
 8011a42:	6923      	ldr	r3, [r4, #16]
 8011a44:	6023      	str	r3, [r4, #0]
 8011a46:	89a3      	ldrh	r3, [r4, #12]
 8011a48:	f043 0308 	orr.w	r3, r3, #8
 8011a4c:	81a3      	strh	r3, [r4, #12]
 8011a4e:	6923      	ldr	r3, [r4, #16]
 8011a50:	b94b      	cbnz	r3, 8011a66 <__swsetup_r+0x9a>
 8011a52:	89a3      	ldrh	r3, [r4, #12]
 8011a54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011a5c:	d003      	beq.n	8011a66 <__swsetup_r+0x9a>
 8011a5e:	4621      	mov	r1, r4
 8011a60:	4630      	mov	r0, r6
 8011a62:	f000 fa07 	bl	8011e74 <__smakebuf_r>
 8011a66:	89a0      	ldrh	r0, [r4, #12]
 8011a68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011a6c:	f010 0301 	ands.w	r3, r0, #1
 8011a70:	d00a      	beq.n	8011a88 <__swsetup_r+0xbc>
 8011a72:	2300      	movs	r3, #0
 8011a74:	60a3      	str	r3, [r4, #8]
 8011a76:	6963      	ldr	r3, [r4, #20]
 8011a78:	425b      	negs	r3, r3
 8011a7a:	61a3      	str	r3, [r4, #24]
 8011a7c:	6923      	ldr	r3, [r4, #16]
 8011a7e:	b943      	cbnz	r3, 8011a92 <__swsetup_r+0xc6>
 8011a80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011a84:	d1ba      	bne.n	80119fc <__swsetup_r+0x30>
 8011a86:	bd70      	pop	{r4, r5, r6, pc}
 8011a88:	0781      	lsls	r1, r0, #30
 8011a8a:	bf58      	it	pl
 8011a8c:	6963      	ldrpl	r3, [r4, #20]
 8011a8e:	60a3      	str	r3, [r4, #8]
 8011a90:	e7f4      	b.n	8011a7c <__swsetup_r+0xb0>
 8011a92:	2000      	movs	r0, #0
 8011a94:	e7f7      	b.n	8011a86 <__swsetup_r+0xba>
 8011a96:	bf00      	nop
 8011a98:	24000048 	.word	0x24000048
 8011a9c:	08013f2c 	.word	0x08013f2c
 8011aa0:	08013f4c 	.word	0x08013f4c
 8011aa4:	08013f0c 	.word	0x08013f0c

08011aa8 <abort>:
 8011aa8:	b508      	push	{r3, lr}
 8011aaa:	2006      	movs	r0, #6
 8011aac:	f000 fa4a 	bl	8011f44 <raise>
 8011ab0:	2001      	movs	r0, #1
 8011ab2:	f7f2 f867 	bl	8003b84 <_exit>
	...

08011ab8 <__sflush_r>:
 8011ab8:	898a      	ldrh	r2, [r1, #12]
 8011aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011abe:	4605      	mov	r5, r0
 8011ac0:	0710      	lsls	r0, r2, #28
 8011ac2:	460c      	mov	r4, r1
 8011ac4:	d458      	bmi.n	8011b78 <__sflush_r+0xc0>
 8011ac6:	684b      	ldr	r3, [r1, #4]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	dc05      	bgt.n	8011ad8 <__sflush_r+0x20>
 8011acc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	dc02      	bgt.n	8011ad8 <__sflush_r+0x20>
 8011ad2:	2000      	movs	r0, #0
 8011ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ad8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011ada:	2e00      	cmp	r6, #0
 8011adc:	d0f9      	beq.n	8011ad2 <__sflush_r+0x1a>
 8011ade:	2300      	movs	r3, #0
 8011ae0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011ae4:	682f      	ldr	r7, [r5, #0]
 8011ae6:	602b      	str	r3, [r5, #0]
 8011ae8:	d032      	beq.n	8011b50 <__sflush_r+0x98>
 8011aea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011aec:	89a3      	ldrh	r3, [r4, #12]
 8011aee:	075a      	lsls	r2, r3, #29
 8011af0:	d505      	bpl.n	8011afe <__sflush_r+0x46>
 8011af2:	6863      	ldr	r3, [r4, #4]
 8011af4:	1ac0      	subs	r0, r0, r3
 8011af6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011af8:	b10b      	cbz	r3, 8011afe <__sflush_r+0x46>
 8011afa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011afc:	1ac0      	subs	r0, r0, r3
 8011afe:	2300      	movs	r3, #0
 8011b00:	4602      	mov	r2, r0
 8011b02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011b04:	6a21      	ldr	r1, [r4, #32]
 8011b06:	4628      	mov	r0, r5
 8011b08:	47b0      	blx	r6
 8011b0a:	1c43      	adds	r3, r0, #1
 8011b0c:	89a3      	ldrh	r3, [r4, #12]
 8011b0e:	d106      	bne.n	8011b1e <__sflush_r+0x66>
 8011b10:	6829      	ldr	r1, [r5, #0]
 8011b12:	291d      	cmp	r1, #29
 8011b14:	d82c      	bhi.n	8011b70 <__sflush_r+0xb8>
 8011b16:	4a2a      	ldr	r2, [pc, #168]	; (8011bc0 <__sflush_r+0x108>)
 8011b18:	40ca      	lsrs	r2, r1
 8011b1a:	07d6      	lsls	r6, r2, #31
 8011b1c:	d528      	bpl.n	8011b70 <__sflush_r+0xb8>
 8011b1e:	2200      	movs	r2, #0
 8011b20:	6062      	str	r2, [r4, #4]
 8011b22:	04d9      	lsls	r1, r3, #19
 8011b24:	6922      	ldr	r2, [r4, #16]
 8011b26:	6022      	str	r2, [r4, #0]
 8011b28:	d504      	bpl.n	8011b34 <__sflush_r+0x7c>
 8011b2a:	1c42      	adds	r2, r0, #1
 8011b2c:	d101      	bne.n	8011b32 <__sflush_r+0x7a>
 8011b2e:	682b      	ldr	r3, [r5, #0]
 8011b30:	b903      	cbnz	r3, 8011b34 <__sflush_r+0x7c>
 8011b32:	6560      	str	r0, [r4, #84]	; 0x54
 8011b34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011b36:	602f      	str	r7, [r5, #0]
 8011b38:	2900      	cmp	r1, #0
 8011b3a:	d0ca      	beq.n	8011ad2 <__sflush_r+0x1a>
 8011b3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011b40:	4299      	cmp	r1, r3
 8011b42:	d002      	beq.n	8011b4a <__sflush_r+0x92>
 8011b44:	4628      	mov	r0, r5
 8011b46:	f7ff fc7f 	bl	8011448 <_free_r>
 8011b4a:	2000      	movs	r0, #0
 8011b4c:	6360      	str	r0, [r4, #52]	; 0x34
 8011b4e:	e7c1      	b.n	8011ad4 <__sflush_r+0x1c>
 8011b50:	6a21      	ldr	r1, [r4, #32]
 8011b52:	2301      	movs	r3, #1
 8011b54:	4628      	mov	r0, r5
 8011b56:	47b0      	blx	r6
 8011b58:	1c41      	adds	r1, r0, #1
 8011b5a:	d1c7      	bne.n	8011aec <__sflush_r+0x34>
 8011b5c:	682b      	ldr	r3, [r5, #0]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d0c4      	beq.n	8011aec <__sflush_r+0x34>
 8011b62:	2b1d      	cmp	r3, #29
 8011b64:	d001      	beq.n	8011b6a <__sflush_r+0xb2>
 8011b66:	2b16      	cmp	r3, #22
 8011b68:	d101      	bne.n	8011b6e <__sflush_r+0xb6>
 8011b6a:	602f      	str	r7, [r5, #0]
 8011b6c:	e7b1      	b.n	8011ad2 <__sflush_r+0x1a>
 8011b6e:	89a3      	ldrh	r3, [r4, #12]
 8011b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b74:	81a3      	strh	r3, [r4, #12]
 8011b76:	e7ad      	b.n	8011ad4 <__sflush_r+0x1c>
 8011b78:	690f      	ldr	r7, [r1, #16]
 8011b7a:	2f00      	cmp	r7, #0
 8011b7c:	d0a9      	beq.n	8011ad2 <__sflush_r+0x1a>
 8011b7e:	0793      	lsls	r3, r2, #30
 8011b80:	680e      	ldr	r6, [r1, #0]
 8011b82:	bf08      	it	eq
 8011b84:	694b      	ldreq	r3, [r1, #20]
 8011b86:	600f      	str	r7, [r1, #0]
 8011b88:	bf18      	it	ne
 8011b8a:	2300      	movne	r3, #0
 8011b8c:	eba6 0807 	sub.w	r8, r6, r7
 8011b90:	608b      	str	r3, [r1, #8]
 8011b92:	f1b8 0f00 	cmp.w	r8, #0
 8011b96:	dd9c      	ble.n	8011ad2 <__sflush_r+0x1a>
 8011b98:	6a21      	ldr	r1, [r4, #32]
 8011b9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011b9c:	4643      	mov	r3, r8
 8011b9e:	463a      	mov	r2, r7
 8011ba0:	4628      	mov	r0, r5
 8011ba2:	47b0      	blx	r6
 8011ba4:	2800      	cmp	r0, #0
 8011ba6:	dc06      	bgt.n	8011bb6 <__sflush_r+0xfe>
 8011ba8:	89a3      	ldrh	r3, [r4, #12]
 8011baa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011bae:	81a3      	strh	r3, [r4, #12]
 8011bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8011bb4:	e78e      	b.n	8011ad4 <__sflush_r+0x1c>
 8011bb6:	4407      	add	r7, r0
 8011bb8:	eba8 0800 	sub.w	r8, r8, r0
 8011bbc:	e7e9      	b.n	8011b92 <__sflush_r+0xda>
 8011bbe:	bf00      	nop
 8011bc0:	20400001 	.word	0x20400001

08011bc4 <_fflush_r>:
 8011bc4:	b538      	push	{r3, r4, r5, lr}
 8011bc6:	690b      	ldr	r3, [r1, #16]
 8011bc8:	4605      	mov	r5, r0
 8011bca:	460c      	mov	r4, r1
 8011bcc:	b913      	cbnz	r3, 8011bd4 <_fflush_r+0x10>
 8011bce:	2500      	movs	r5, #0
 8011bd0:	4628      	mov	r0, r5
 8011bd2:	bd38      	pop	{r3, r4, r5, pc}
 8011bd4:	b118      	cbz	r0, 8011bde <_fflush_r+0x1a>
 8011bd6:	6983      	ldr	r3, [r0, #24]
 8011bd8:	b90b      	cbnz	r3, 8011bde <_fflush_r+0x1a>
 8011bda:	f000 f887 	bl	8011cec <__sinit>
 8011bde:	4b14      	ldr	r3, [pc, #80]	; (8011c30 <_fflush_r+0x6c>)
 8011be0:	429c      	cmp	r4, r3
 8011be2:	d11b      	bne.n	8011c1c <_fflush_r+0x58>
 8011be4:	686c      	ldr	r4, [r5, #4]
 8011be6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d0ef      	beq.n	8011bce <_fflush_r+0xa>
 8011bee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011bf0:	07d0      	lsls	r0, r2, #31
 8011bf2:	d404      	bmi.n	8011bfe <_fflush_r+0x3a>
 8011bf4:	0599      	lsls	r1, r3, #22
 8011bf6:	d402      	bmi.n	8011bfe <_fflush_r+0x3a>
 8011bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011bfa:	f000 f915 	bl	8011e28 <__retarget_lock_acquire_recursive>
 8011bfe:	4628      	mov	r0, r5
 8011c00:	4621      	mov	r1, r4
 8011c02:	f7ff ff59 	bl	8011ab8 <__sflush_r>
 8011c06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011c08:	07da      	lsls	r2, r3, #31
 8011c0a:	4605      	mov	r5, r0
 8011c0c:	d4e0      	bmi.n	8011bd0 <_fflush_r+0xc>
 8011c0e:	89a3      	ldrh	r3, [r4, #12]
 8011c10:	059b      	lsls	r3, r3, #22
 8011c12:	d4dd      	bmi.n	8011bd0 <_fflush_r+0xc>
 8011c14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c16:	f000 f908 	bl	8011e2a <__retarget_lock_release_recursive>
 8011c1a:	e7d9      	b.n	8011bd0 <_fflush_r+0xc>
 8011c1c:	4b05      	ldr	r3, [pc, #20]	; (8011c34 <_fflush_r+0x70>)
 8011c1e:	429c      	cmp	r4, r3
 8011c20:	d101      	bne.n	8011c26 <_fflush_r+0x62>
 8011c22:	68ac      	ldr	r4, [r5, #8]
 8011c24:	e7df      	b.n	8011be6 <_fflush_r+0x22>
 8011c26:	4b04      	ldr	r3, [pc, #16]	; (8011c38 <_fflush_r+0x74>)
 8011c28:	429c      	cmp	r4, r3
 8011c2a:	bf08      	it	eq
 8011c2c:	68ec      	ldreq	r4, [r5, #12]
 8011c2e:	e7da      	b.n	8011be6 <_fflush_r+0x22>
 8011c30:	08013f2c 	.word	0x08013f2c
 8011c34:	08013f4c 	.word	0x08013f4c
 8011c38:	08013f0c 	.word	0x08013f0c

08011c3c <std>:
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	b510      	push	{r4, lr}
 8011c40:	4604      	mov	r4, r0
 8011c42:	e9c0 3300 	strd	r3, r3, [r0]
 8011c46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011c4a:	6083      	str	r3, [r0, #8]
 8011c4c:	8181      	strh	r1, [r0, #12]
 8011c4e:	6643      	str	r3, [r0, #100]	; 0x64
 8011c50:	81c2      	strh	r2, [r0, #14]
 8011c52:	6183      	str	r3, [r0, #24]
 8011c54:	4619      	mov	r1, r3
 8011c56:	2208      	movs	r2, #8
 8011c58:	305c      	adds	r0, #92	; 0x5c
 8011c5a:	f7fd fe01 	bl	800f860 <memset>
 8011c5e:	4b05      	ldr	r3, [pc, #20]	; (8011c74 <std+0x38>)
 8011c60:	6263      	str	r3, [r4, #36]	; 0x24
 8011c62:	4b05      	ldr	r3, [pc, #20]	; (8011c78 <std+0x3c>)
 8011c64:	62a3      	str	r3, [r4, #40]	; 0x28
 8011c66:	4b05      	ldr	r3, [pc, #20]	; (8011c7c <std+0x40>)
 8011c68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011c6a:	4b05      	ldr	r3, [pc, #20]	; (8011c80 <std+0x44>)
 8011c6c:	6224      	str	r4, [r4, #32]
 8011c6e:	6323      	str	r3, [r4, #48]	; 0x30
 8011c70:	bd10      	pop	{r4, pc}
 8011c72:	bf00      	nop
 8011c74:	08011f7d 	.word	0x08011f7d
 8011c78:	08011f9f 	.word	0x08011f9f
 8011c7c:	08011fd7 	.word	0x08011fd7
 8011c80:	08011ffb 	.word	0x08011ffb

08011c84 <_cleanup_r>:
 8011c84:	4901      	ldr	r1, [pc, #4]	; (8011c8c <_cleanup_r+0x8>)
 8011c86:	f000 b8af 	b.w	8011de8 <_fwalk_reent>
 8011c8a:	bf00      	nop
 8011c8c:	08011bc5 	.word	0x08011bc5

08011c90 <__sfmoreglue>:
 8011c90:	b570      	push	{r4, r5, r6, lr}
 8011c92:	1e4a      	subs	r2, r1, #1
 8011c94:	2568      	movs	r5, #104	; 0x68
 8011c96:	4355      	muls	r5, r2
 8011c98:	460e      	mov	r6, r1
 8011c9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011c9e:	f7ff fc23 	bl	80114e8 <_malloc_r>
 8011ca2:	4604      	mov	r4, r0
 8011ca4:	b140      	cbz	r0, 8011cb8 <__sfmoreglue+0x28>
 8011ca6:	2100      	movs	r1, #0
 8011ca8:	e9c0 1600 	strd	r1, r6, [r0]
 8011cac:	300c      	adds	r0, #12
 8011cae:	60a0      	str	r0, [r4, #8]
 8011cb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011cb4:	f7fd fdd4 	bl	800f860 <memset>
 8011cb8:	4620      	mov	r0, r4
 8011cba:	bd70      	pop	{r4, r5, r6, pc}

08011cbc <__sfp_lock_acquire>:
 8011cbc:	4801      	ldr	r0, [pc, #4]	; (8011cc4 <__sfp_lock_acquire+0x8>)
 8011cbe:	f000 b8b3 	b.w	8011e28 <__retarget_lock_acquire_recursive>
 8011cc2:	bf00      	nop
 8011cc4:	24000e50 	.word	0x24000e50

08011cc8 <__sfp_lock_release>:
 8011cc8:	4801      	ldr	r0, [pc, #4]	; (8011cd0 <__sfp_lock_release+0x8>)
 8011cca:	f000 b8ae 	b.w	8011e2a <__retarget_lock_release_recursive>
 8011cce:	bf00      	nop
 8011cd0:	24000e50 	.word	0x24000e50

08011cd4 <__sinit_lock_acquire>:
 8011cd4:	4801      	ldr	r0, [pc, #4]	; (8011cdc <__sinit_lock_acquire+0x8>)
 8011cd6:	f000 b8a7 	b.w	8011e28 <__retarget_lock_acquire_recursive>
 8011cda:	bf00      	nop
 8011cdc:	24000e4b 	.word	0x24000e4b

08011ce0 <__sinit_lock_release>:
 8011ce0:	4801      	ldr	r0, [pc, #4]	; (8011ce8 <__sinit_lock_release+0x8>)
 8011ce2:	f000 b8a2 	b.w	8011e2a <__retarget_lock_release_recursive>
 8011ce6:	bf00      	nop
 8011ce8:	24000e4b 	.word	0x24000e4b

08011cec <__sinit>:
 8011cec:	b510      	push	{r4, lr}
 8011cee:	4604      	mov	r4, r0
 8011cf0:	f7ff fff0 	bl	8011cd4 <__sinit_lock_acquire>
 8011cf4:	69a3      	ldr	r3, [r4, #24]
 8011cf6:	b11b      	cbz	r3, 8011d00 <__sinit+0x14>
 8011cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011cfc:	f7ff bff0 	b.w	8011ce0 <__sinit_lock_release>
 8011d00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011d04:	6523      	str	r3, [r4, #80]	; 0x50
 8011d06:	4b13      	ldr	r3, [pc, #76]	; (8011d54 <__sinit+0x68>)
 8011d08:	4a13      	ldr	r2, [pc, #76]	; (8011d58 <__sinit+0x6c>)
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8011d0e:	42a3      	cmp	r3, r4
 8011d10:	bf04      	itt	eq
 8011d12:	2301      	moveq	r3, #1
 8011d14:	61a3      	streq	r3, [r4, #24]
 8011d16:	4620      	mov	r0, r4
 8011d18:	f000 f820 	bl	8011d5c <__sfp>
 8011d1c:	6060      	str	r0, [r4, #4]
 8011d1e:	4620      	mov	r0, r4
 8011d20:	f000 f81c 	bl	8011d5c <__sfp>
 8011d24:	60a0      	str	r0, [r4, #8]
 8011d26:	4620      	mov	r0, r4
 8011d28:	f000 f818 	bl	8011d5c <__sfp>
 8011d2c:	2200      	movs	r2, #0
 8011d2e:	60e0      	str	r0, [r4, #12]
 8011d30:	2104      	movs	r1, #4
 8011d32:	6860      	ldr	r0, [r4, #4]
 8011d34:	f7ff ff82 	bl	8011c3c <std>
 8011d38:	68a0      	ldr	r0, [r4, #8]
 8011d3a:	2201      	movs	r2, #1
 8011d3c:	2109      	movs	r1, #9
 8011d3e:	f7ff ff7d 	bl	8011c3c <std>
 8011d42:	68e0      	ldr	r0, [r4, #12]
 8011d44:	2202      	movs	r2, #2
 8011d46:	2112      	movs	r1, #18
 8011d48:	f7ff ff78 	bl	8011c3c <std>
 8011d4c:	2301      	movs	r3, #1
 8011d4e:	61a3      	str	r3, [r4, #24]
 8011d50:	e7d2      	b.n	8011cf8 <__sinit+0xc>
 8011d52:	bf00      	nop
 8011d54:	08013b88 	.word	0x08013b88
 8011d58:	08011c85 	.word	0x08011c85

08011d5c <__sfp>:
 8011d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d5e:	4607      	mov	r7, r0
 8011d60:	f7ff ffac 	bl	8011cbc <__sfp_lock_acquire>
 8011d64:	4b1e      	ldr	r3, [pc, #120]	; (8011de0 <__sfp+0x84>)
 8011d66:	681e      	ldr	r6, [r3, #0]
 8011d68:	69b3      	ldr	r3, [r6, #24]
 8011d6a:	b913      	cbnz	r3, 8011d72 <__sfp+0x16>
 8011d6c:	4630      	mov	r0, r6
 8011d6e:	f7ff ffbd 	bl	8011cec <__sinit>
 8011d72:	3648      	adds	r6, #72	; 0x48
 8011d74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011d78:	3b01      	subs	r3, #1
 8011d7a:	d503      	bpl.n	8011d84 <__sfp+0x28>
 8011d7c:	6833      	ldr	r3, [r6, #0]
 8011d7e:	b30b      	cbz	r3, 8011dc4 <__sfp+0x68>
 8011d80:	6836      	ldr	r6, [r6, #0]
 8011d82:	e7f7      	b.n	8011d74 <__sfp+0x18>
 8011d84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011d88:	b9d5      	cbnz	r5, 8011dc0 <__sfp+0x64>
 8011d8a:	4b16      	ldr	r3, [pc, #88]	; (8011de4 <__sfp+0x88>)
 8011d8c:	60e3      	str	r3, [r4, #12]
 8011d8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011d92:	6665      	str	r5, [r4, #100]	; 0x64
 8011d94:	f000 f847 	bl	8011e26 <__retarget_lock_init_recursive>
 8011d98:	f7ff ff96 	bl	8011cc8 <__sfp_lock_release>
 8011d9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011da0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011da4:	6025      	str	r5, [r4, #0]
 8011da6:	61a5      	str	r5, [r4, #24]
 8011da8:	2208      	movs	r2, #8
 8011daa:	4629      	mov	r1, r5
 8011dac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011db0:	f7fd fd56 	bl	800f860 <memset>
 8011db4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011db8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011dbc:	4620      	mov	r0, r4
 8011dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011dc0:	3468      	adds	r4, #104	; 0x68
 8011dc2:	e7d9      	b.n	8011d78 <__sfp+0x1c>
 8011dc4:	2104      	movs	r1, #4
 8011dc6:	4638      	mov	r0, r7
 8011dc8:	f7ff ff62 	bl	8011c90 <__sfmoreglue>
 8011dcc:	4604      	mov	r4, r0
 8011dce:	6030      	str	r0, [r6, #0]
 8011dd0:	2800      	cmp	r0, #0
 8011dd2:	d1d5      	bne.n	8011d80 <__sfp+0x24>
 8011dd4:	f7ff ff78 	bl	8011cc8 <__sfp_lock_release>
 8011dd8:	230c      	movs	r3, #12
 8011dda:	603b      	str	r3, [r7, #0]
 8011ddc:	e7ee      	b.n	8011dbc <__sfp+0x60>
 8011dde:	bf00      	nop
 8011de0:	08013b88 	.word	0x08013b88
 8011de4:	ffff0001 	.word	0xffff0001

08011de8 <_fwalk_reent>:
 8011de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011dec:	4606      	mov	r6, r0
 8011dee:	4688      	mov	r8, r1
 8011df0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011df4:	2700      	movs	r7, #0
 8011df6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011dfa:	f1b9 0901 	subs.w	r9, r9, #1
 8011dfe:	d505      	bpl.n	8011e0c <_fwalk_reent+0x24>
 8011e00:	6824      	ldr	r4, [r4, #0]
 8011e02:	2c00      	cmp	r4, #0
 8011e04:	d1f7      	bne.n	8011df6 <_fwalk_reent+0xe>
 8011e06:	4638      	mov	r0, r7
 8011e08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e0c:	89ab      	ldrh	r3, [r5, #12]
 8011e0e:	2b01      	cmp	r3, #1
 8011e10:	d907      	bls.n	8011e22 <_fwalk_reent+0x3a>
 8011e12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011e16:	3301      	adds	r3, #1
 8011e18:	d003      	beq.n	8011e22 <_fwalk_reent+0x3a>
 8011e1a:	4629      	mov	r1, r5
 8011e1c:	4630      	mov	r0, r6
 8011e1e:	47c0      	blx	r8
 8011e20:	4307      	orrs	r7, r0
 8011e22:	3568      	adds	r5, #104	; 0x68
 8011e24:	e7e9      	b.n	8011dfa <_fwalk_reent+0x12>

08011e26 <__retarget_lock_init_recursive>:
 8011e26:	4770      	bx	lr

08011e28 <__retarget_lock_acquire_recursive>:
 8011e28:	4770      	bx	lr

08011e2a <__retarget_lock_release_recursive>:
 8011e2a:	4770      	bx	lr

08011e2c <__swhatbuf_r>:
 8011e2c:	b570      	push	{r4, r5, r6, lr}
 8011e2e:	460e      	mov	r6, r1
 8011e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e34:	2900      	cmp	r1, #0
 8011e36:	b096      	sub	sp, #88	; 0x58
 8011e38:	4614      	mov	r4, r2
 8011e3a:	461d      	mov	r5, r3
 8011e3c:	da07      	bge.n	8011e4e <__swhatbuf_r+0x22>
 8011e3e:	2300      	movs	r3, #0
 8011e40:	602b      	str	r3, [r5, #0]
 8011e42:	89b3      	ldrh	r3, [r6, #12]
 8011e44:	061a      	lsls	r2, r3, #24
 8011e46:	d410      	bmi.n	8011e6a <__swhatbuf_r+0x3e>
 8011e48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011e4c:	e00e      	b.n	8011e6c <__swhatbuf_r+0x40>
 8011e4e:	466a      	mov	r2, sp
 8011e50:	f000 f8fa 	bl	8012048 <_fstat_r>
 8011e54:	2800      	cmp	r0, #0
 8011e56:	dbf2      	blt.n	8011e3e <__swhatbuf_r+0x12>
 8011e58:	9a01      	ldr	r2, [sp, #4]
 8011e5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011e5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011e62:	425a      	negs	r2, r3
 8011e64:	415a      	adcs	r2, r3
 8011e66:	602a      	str	r2, [r5, #0]
 8011e68:	e7ee      	b.n	8011e48 <__swhatbuf_r+0x1c>
 8011e6a:	2340      	movs	r3, #64	; 0x40
 8011e6c:	2000      	movs	r0, #0
 8011e6e:	6023      	str	r3, [r4, #0]
 8011e70:	b016      	add	sp, #88	; 0x58
 8011e72:	bd70      	pop	{r4, r5, r6, pc}

08011e74 <__smakebuf_r>:
 8011e74:	898b      	ldrh	r3, [r1, #12]
 8011e76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011e78:	079d      	lsls	r5, r3, #30
 8011e7a:	4606      	mov	r6, r0
 8011e7c:	460c      	mov	r4, r1
 8011e7e:	d507      	bpl.n	8011e90 <__smakebuf_r+0x1c>
 8011e80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011e84:	6023      	str	r3, [r4, #0]
 8011e86:	6123      	str	r3, [r4, #16]
 8011e88:	2301      	movs	r3, #1
 8011e8a:	6163      	str	r3, [r4, #20]
 8011e8c:	b002      	add	sp, #8
 8011e8e:	bd70      	pop	{r4, r5, r6, pc}
 8011e90:	ab01      	add	r3, sp, #4
 8011e92:	466a      	mov	r2, sp
 8011e94:	f7ff ffca 	bl	8011e2c <__swhatbuf_r>
 8011e98:	9900      	ldr	r1, [sp, #0]
 8011e9a:	4605      	mov	r5, r0
 8011e9c:	4630      	mov	r0, r6
 8011e9e:	f7ff fb23 	bl	80114e8 <_malloc_r>
 8011ea2:	b948      	cbnz	r0, 8011eb8 <__smakebuf_r+0x44>
 8011ea4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ea8:	059a      	lsls	r2, r3, #22
 8011eaa:	d4ef      	bmi.n	8011e8c <__smakebuf_r+0x18>
 8011eac:	f023 0303 	bic.w	r3, r3, #3
 8011eb0:	f043 0302 	orr.w	r3, r3, #2
 8011eb4:	81a3      	strh	r3, [r4, #12]
 8011eb6:	e7e3      	b.n	8011e80 <__smakebuf_r+0xc>
 8011eb8:	4b0d      	ldr	r3, [pc, #52]	; (8011ef0 <__smakebuf_r+0x7c>)
 8011eba:	62b3      	str	r3, [r6, #40]	; 0x28
 8011ebc:	89a3      	ldrh	r3, [r4, #12]
 8011ebe:	6020      	str	r0, [r4, #0]
 8011ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ec4:	81a3      	strh	r3, [r4, #12]
 8011ec6:	9b00      	ldr	r3, [sp, #0]
 8011ec8:	6163      	str	r3, [r4, #20]
 8011eca:	9b01      	ldr	r3, [sp, #4]
 8011ecc:	6120      	str	r0, [r4, #16]
 8011ece:	b15b      	cbz	r3, 8011ee8 <__smakebuf_r+0x74>
 8011ed0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ed4:	4630      	mov	r0, r6
 8011ed6:	f000 f8c9 	bl	801206c <_isatty_r>
 8011eda:	b128      	cbz	r0, 8011ee8 <__smakebuf_r+0x74>
 8011edc:	89a3      	ldrh	r3, [r4, #12]
 8011ede:	f023 0303 	bic.w	r3, r3, #3
 8011ee2:	f043 0301 	orr.w	r3, r3, #1
 8011ee6:	81a3      	strh	r3, [r4, #12]
 8011ee8:	89a0      	ldrh	r0, [r4, #12]
 8011eea:	4305      	orrs	r5, r0
 8011eec:	81a5      	strh	r5, [r4, #12]
 8011eee:	e7cd      	b.n	8011e8c <__smakebuf_r+0x18>
 8011ef0:	08011c85 	.word	0x08011c85

08011ef4 <_raise_r>:
 8011ef4:	291f      	cmp	r1, #31
 8011ef6:	b538      	push	{r3, r4, r5, lr}
 8011ef8:	4604      	mov	r4, r0
 8011efa:	460d      	mov	r5, r1
 8011efc:	d904      	bls.n	8011f08 <_raise_r+0x14>
 8011efe:	2316      	movs	r3, #22
 8011f00:	6003      	str	r3, [r0, #0]
 8011f02:	f04f 30ff 	mov.w	r0, #4294967295
 8011f06:	bd38      	pop	{r3, r4, r5, pc}
 8011f08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011f0a:	b112      	cbz	r2, 8011f12 <_raise_r+0x1e>
 8011f0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011f10:	b94b      	cbnz	r3, 8011f26 <_raise_r+0x32>
 8011f12:	4620      	mov	r0, r4
 8011f14:	f000 f830 	bl	8011f78 <_getpid_r>
 8011f18:	462a      	mov	r2, r5
 8011f1a:	4601      	mov	r1, r0
 8011f1c:	4620      	mov	r0, r4
 8011f1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f22:	f000 b817 	b.w	8011f54 <_kill_r>
 8011f26:	2b01      	cmp	r3, #1
 8011f28:	d00a      	beq.n	8011f40 <_raise_r+0x4c>
 8011f2a:	1c59      	adds	r1, r3, #1
 8011f2c:	d103      	bne.n	8011f36 <_raise_r+0x42>
 8011f2e:	2316      	movs	r3, #22
 8011f30:	6003      	str	r3, [r0, #0]
 8011f32:	2001      	movs	r0, #1
 8011f34:	e7e7      	b.n	8011f06 <_raise_r+0x12>
 8011f36:	2400      	movs	r4, #0
 8011f38:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011f3c:	4628      	mov	r0, r5
 8011f3e:	4798      	blx	r3
 8011f40:	2000      	movs	r0, #0
 8011f42:	e7e0      	b.n	8011f06 <_raise_r+0x12>

08011f44 <raise>:
 8011f44:	4b02      	ldr	r3, [pc, #8]	; (8011f50 <raise+0xc>)
 8011f46:	4601      	mov	r1, r0
 8011f48:	6818      	ldr	r0, [r3, #0]
 8011f4a:	f7ff bfd3 	b.w	8011ef4 <_raise_r>
 8011f4e:	bf00      	nop
 8011f50:	24000048 	.word	0x24000048

08011f54 <_kill_r>:
 8011f54:	b538      	push	{r3, r4, r5, lr}
 8011f56:	4d07      	ldr	r5, [pc, #28]	; (8011f74 <_kill_r+0x20>)
 8011f58:	2300      	movs	r3, #0
 8011f5a:	4604      	mov	r4, r0
 8011f5c:	4608      	mov	r0, r1
 8011f5e:	4611      	mov	r1, r2
 8011f60:	602b      	str	r3, [r5, #0]
 8011f62:	f7f1 fdff 	bl	8003b64 <_kill>
 8011f66:	1c43      	adds	r3, r0, #1
 8011f68:	d102      	bne.n	8011f70 <_kill_r+0x1c>
 8011f6a:	682b      	ldr	r3, [r5, #0]
 8011f6c:	b103      	cbz	r3, 8011f70 <_kill_r+0x1c>
 8011f6e:	6023      	str	r3, [r4, #0]
 8011f70:	bd38      	pop	{r3, r4, r5, pc}
 8011f72:	bf00      	nop
 8011f74:	24000e44 	.word	0x24000e44

08011f78 <_getpid_r>:
 8011f78:	f7f1 bdec 	b.w	8003b54 <_getpid>

08011f7c <__sread>:
 8011f7c:	b510      	push	{r4, lr}
 8011f7e:	460c      	mov	r4, r1
 8011f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f84:	f000 f894 	bl	80120b0 <_read_r>
 8011f88:	2800      	cmp	r0, #0
 8011f8a:	bfab      	itete	ge
 8011f8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011f8e:	89a3      	ldrhlt	r3, [r4, #12]
 8011f90:	181b      	addge	r3, r3, r0
 8011f92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011f96:	bfac      	ite	ge
 8011f98:	6563      	strge	r3, [r4, #84]	; 0x54
 8011f9a:	81a3      	strhlt	r3, [r4, #12]
 8011f9c:	bd10      	pop	{r4, pc}

08011f9e <__swrite>:
 8011f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fa2:	461f      	mov	r7, r3
 8011fa4:	898b      	ldrh	r3, [r1, #12]
 8011fa6:	05db      	lsls	r3, r3, #23
 8011fa8:	4605      	mov	r5, r0
 8011faa:	460c      	mov	r4, r1
 8011fac:	4616      	mov	r6, r2
 8011fae:	d505      	bpl.n	8011fbc <__swrite+0x1e>
 8011fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fb4:	2302      	movs	r3, #2
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	f000 f868 	bl	801208c <_lseek_r>
 8011fbc:	89a3      	ldrh	r3, [r4, #12]
 8011fbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011fc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011fc6:	81a3      	strh	r3, [r4, #12]
 8011fc8:	4632      	mov	r2, r6
 8011fca:	463b      	mov	r3, r7
 8011fcc:	4628      	mov	r0, r5
 8011fce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011fd2:	f000 b817 	b.w	8012004 <_write_r>

08011fd6 <__sseek>:
 8011fd6:	b510      	push	{r4, lr}
 8011fd8:	460c      	mov	r4, r1
 8011fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fde:	f000 f855 	bl	801208c <_lseek_r>
 8011fe2:	1c43      	adds	r3, r0, #1
 8011fe4:	89a3      	ldrh	r3, [r4, #12]
 8011fe6:	bf15      	itete	ne
 8011fe8:	6560      	strne	r0, [r4, #84]	; 0x54
 8011fea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011fee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011ff2:	81a3      	strheq	r3, [r4, #12]
 8011ff4:	bf18      	it	ne
 8011ff6:	81a3      	strhne	r3, [r4, #12]
 8011ff8:	bd10      	pop	{r4, pc}

08011ffa <__sclose>:
 8011ffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ffe:	f000 b813 	b.w	8012028 <_close_r>
	...

08012004 <_write_r>:
 8012004:	b538      	push	{r3, r4, r5, lr}
 8012006:	4d07      	ldr	r5, [pc, #28]	; (8012024 <_write_r+0x20>)
 8012008:	4604      	mov	r4, r0
 801200a:	4608      	mov	r0, r1
 801200c:	4611      	mov	r1, r2
 801200e:	2200      	movs	r2, #0
 8012010:	602a      	str	r2, [r5, #0]
 8012012:	461a      	mov	r2, r3
 8012014:	f7f1 fddd 	bl	8003bd2 <_write>
 8012018:	1c43      	adds	r3, r0, #1
 801201a:	d102      	bne.n	8012022 <_write_r+0x1e>
 801201c:	682b      	ldr	r3, [r5, #0]
 801201e:	b103      	cbz	r3, 8012022 <_write_r+0x1e>
 8012020:	6023      	str	r3, [r4, #0]
 8012022:	bd38      	pop	{r3, r4, r5, pc}
 8012024:	24000e44 	.word	0x24000e44

08012028 <_close_r>:
 8012028:	b538      	push	{r3, r4, r5, lr}
 801202a:	4d06      	ldr	r5, [pc, #24]	; (8012044 <_close_r+0x1c>)
 801202c:	2300      	movs	r3, #0
 801202e:	4604      	mov	r4, r0
 8012030:	4608      	mov	r0, r1
 8012032:	602b      	str	r3, [r5, #0]
 8012034:	f7f1 fde9 	bl	8003c0a <_close>
 8012038:	1c43      	adds	r3, r0, #1
 801203a:	d102      	bne.n	8012042 <_close_r+0x1a>
 801203c:	682b      	ldr	r3, [r5, #0]
 801203e:	b103      	cbz	r3, 8012042 <_close_r+0x1a>
 8012040:	6023      	str	r3, [r4, #0]
 8012042:	bd38      	pop	{r3, r4, r5, pc}
 8012044:	24000e44 	.word	0x24000e44

08012048 <_fstat_r>:
 8012048:	b538      	push	{r3, r4, r5, lr}
 801204a:	4d07      	ldr	r5, [pc, #28]	; (8012068 <_fstat_r+0x20>)
 801204c:	2300      	movs	r3, #0
 801204e:	4604      	mov	r4, r0
 8012050:	4608      	mov	r0, r1
 8012052:	4611      	mov	r1, r2
 8012054:	602b      	str	r3, [r5, #0]
 8012056:	f7f1 fde4 	bl	8003c22 <_fstat>
 801205a:	1c43      	adds	r3, r0, #1
 801205c:	d102      	bne.n	8012064 <_fstat_r+0x1c>
 801205e:	682b      	ldr	r3, [r5, #0]
 8012060:	b103      	cbz	r3, 8012064 <_fstat_r+0x1c>
 8012062:	6023      	str	r3, [r4, #0]
 8012064:	bd38      	pop	{r3, r4, r5, pc}
 8012066:	bf00      	nop
 8012068:	24000e44 	.word	0x24000e44

0801206c <_isatty_r>:
 801206c:	b538      	push	{r3, r4, r5, lr}
 801206e:	4d06      	ldr	r5, [pc, #24]	; (8012088 <_isatty_r+0x1c>)
 8012070:	2300      	movs	r3, #0
 8012072:	4604      	mov	r4, r0
 8012074:	4608      	mov	r0, r1
 8012076:	602b      	str	r3, [r5, #0]
 8012078:	f7f1 fde3 	bl	8003c42 <_isatty>
 801207c:	1c43      	adds	r3, r0, #1
 801207e:	d102      	bne.n	8012086 <_isatty_r+0x1a>
 8012080:	682b      	ldr	r3, [r5, #0]
 8012082:	b103      	cbz	r3, 8012086 <_isatty_r+0x1a>
 8012084:	6023      	str	r3, [r4, #0]
 8012086:	bd38      	pop	{r3, r4, r5, pc}
 8012088:	24000e44 	.word	0x24000e44

0801208c <_lseek_r>:
 801208c:	b538      	push	{r3, r4, r5, lr}
 801208e:	4d07      	ldr	r5, [pc, #28]	; (80120ac <_lseek_r+0x20>)
 8012090:	4604      	mov	r4, r0
 8012092:	4608      	mov	r0, r1
 8012094:	4611      	mov	r1, r2
 8012096:	2200      	movs	r2, #0
 8012098:	602a      	str	r2, [r5, #0]
 801209a:	461a      	mov	r2, r3
 801209c:	f7f1 fddc 	bl	8003c58 <_lseek>
 80120a0:	1c43      	adds	r3, r0, #1
 80120a2:	d102      	bne.n	80120aa <_lseek_r+0x1e>
 80120a4:	682b      	ldr	r3, [r5, #0]
 80120a6:	b103      	cbz	r3, 80120aa <_lseek_r+0x1e>
 80120a8:	6023      	str	r3, [r4, #0]
 80120aa:	bd38      	pop	{r3, r4, r5, pc}
 80120ac:	24000e44 	.word	0x24000e44

080120b0 <_read_r>:
 80120b0:	b538      	push	{r3, r4, r5, lr}
 80120b2:	4d07      	ldr	r5, [pc, #28]	; (80120d0 <_read_r+0x20>)
 80120b4:	4604      	mov	r4, r0
 80120b6:	4608      	mov	r0, r1
 80120b8:	4611      	mov	r1, r2
 80120ba:	2200      	movs	r2, #0
 80120bc:	602a      	str	r2, [r5, #0]
 80120be:	461a      	mov	r2, r3
 80120c0:	f7f1 fd6a 	bl	8003b98 <_read>
 80120c4:	1c43      	adds	r3, r0, #1
 80120c6:	d102      	bne.n	80120ce <_read_r+0x1e>
 80120c8:	682b      	ldr	r3, [r5, #0]
 80120ca:	b103      	cbz	r3, 80120ce <_read_r+0x1e>
 80120cc:	6023      	str	r3, [r4, #0]
 80120ce:	bd38      	pop	{r3, r4, r5, pc}
 80120d0:	24000e44 	.word	0x24000e44

080120d4 <_init>:
 80120d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120d6:	bf00      	nop
 80120d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80120da:	bc08      	pop	{r3}
 80120dc:	469e      	mov	lr, r3
 80120de:	4770      	bx	lr

080120e0 <_fini>:
 80120e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120e2:	bf00      	nop
 80120e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80120e6:	bc08      	pop	{r3}
 80120e8:	469e      	mov	lr, r3
 80120ea:	4770      	bx	lr
